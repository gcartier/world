;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Remote Server Implementation
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.server.remote.implementation jazz


(import (world.autoload)
        (world.configure)
        (world.context)
        (world.support)
        (world.task)
        (world.tier))


(definition (with-server proc)
  (with-task-mutex
    (lambda ()
      (let ((tier (current-tier+)))
        (if (and tier
                 (is? tier Server-Tier)
                 (not shutdown?)
                 (not being-debugged?))
            (continuation-capture
              (lambda (exit)
                (parameterize ((current-exit exit))
                  (proc tier))))
          disconnect-marker)))))


(class World-Remote-Server extends Object
  
  
  (method public (client-invitation self client invitation-word name)
    (with-server
      (lambda (tier)
        (client-invitation tier client invitation-word name))))
  
  
  (method public (client-connect self client client-uuid personal-key machine-identity machine-caps machine-features character-avatar character-dye character-script cached-literals)
    (with-server
      (lambda (tier)
        (client-connect tier client client-uuid personal-key machine-identity machine-caps machine-features character-avatar character-dye character-script cached-literals))))
  
  
  (method public (client-enter self client zone)
    (with-server
      (lambda (tier)
        (client-enter tier client zone))))
  
  
  (method public (client-start self client)
    (with-server
      (lambda (tier)
        (client-start tier client))))
  
  
  (method public (client-ready self client)
    (with-server
      (lambda (tier)
        (client-ready tier client))))
  
  
  (method public (client-stop self client)
    (with-server
      (lambda (tier)
        (client-stop tier client))))
  
  
  (method public (client-disconnect self client reason)
    (with-server
      (lambda (tier)
        (client-disconnect tier client reason))))
  
  
  (method public (client-deconnect self client)
    (with-server
      (lambda (tier)
        (client-deconnect tier client))))
  
  
  (method public (client-reconnection self client zone group)
    (with-server
      (lambda (tier)
        (client-reconnection tier client zone group))))
  
  
  (method public (client-visit self client)
    (with-server
      (lambda (tier)
        (client-visit tier client))))
  
  
  (method public (client-observe self client)
    (with-server
      (lambda (tier)
        (client-observe tier client))))
  
  
  (method public (client-participate self client)
    (with-server
      (lambda (tier)
        (client-participate tier client))))
  
  
  (method public (client-sleep self client)
    (with-server
      (lambda (tier)
        (client-sleep tier client))))
  
  
  (method public (client-wake self client)
    (with-server
      (lambda (tier)
        (client-wake tier client))))
  
  
  (method public (client-alive self client)
    (with-server
      (lambda (tier)
        (client-alive tier client))))
  
  
  (method public (client-verify self client verifier verified)
    (with-server
      (lambda (tier)
        (client-verify tier client verifier verified))))
  
  
  (method public (client-invite self client recipient circle-name)
    (with-server
      (lambda (tier)
        (client-invite tier client recipient circle-name))))
  
  
  (method public (client-accept self client sender circle-name)
    (with-server
      (lambda (tier)
        (client-accept tier client sender circle-name))))
  
  
  (method public (client-decline self client sender reason)
    (with-server
      (lambda (tier)
        (client-decline tier client sender reason))))
  
  
  (method public (client-problem self client sender problem)
    (with-server
      (lambda (tier)
        (client-problem tier client sender problem))))
  
  
  (method public (client-teleport self client teleported zone position sight)
    (with-server
      (lambda (tier)
        (client-teleport tier client teleported zone position sight))))
  
  
  (method public (client-status self client status)
    (with-server
      (lambda (tier)
        (client-status tier client status))))
  
  
  (method public (client-leave self client)
    (with-server
      (lambda (tier)
        (client-leave tier client))))
  
  
  (method public (client-message self client kind recipient message)
    (with-server
      (lambda (tier)
        (client-message tier client kind recipient message))))
  
  
  (method public (client-log self client time message)
    (with-server
      (lambda (tier)
        (client-log tier client time message))))
  
  
  (method public (processor-log self processor time message)
    (with-server
      (lambda (tier)
        (processor-log tier processor time message))))
  
  
  (method public (client-connected-player self client no)
    (with-server
      (lambda (tier)
        (client-connected-player tier client no))))
  
  
  (method public (client-connected-players self client)
    (with-server
      (lambda (tier)
        (client-connected-players tier client))))
  
  
  (method public (client-available-templates self client)
    (with-server
      (lambda (tier)
        (client-available-templates tier client))))
  
  
  (method public (client-available-zone-base self client from)
    (with-server
      (lambda (tier)
        (client-available-zone-base tier client from))))
  
  
  (method public (client-available-zone-base? self client base)
    (with-server
      (lambda (tier)
        (client-available-zone-base? tier client base))))
  
  
  (method public (client-create-zone self client from base)
    (with-server
      (lambda (tier)
        (client-create-zone tier client from base))))
  
  
  (method public (client-available-zones self client)
    (with-server
      (lambda (tier)
        (client-available-zones tier client))))
  
  
  (method public (client-load-zone self client zone)
    (thread-base-priority-set! (current-thread) load-priority)
    (client-load-zone (current-tier) client zone))
  
  
  (method public (client-change-zone self client zone)
    (with-server
      (lambda (tier)
        (client-change-zone tier client zone))))
  
  
  (method public (client-changed-zone self client)
    (with-server
      (lambda (tier)
        (client-changed-zone tier client))))
  
  
  (method public (client-create-group self client name persistent? require-microphone? require-camera? broadcast-hierarchy? auto-create? stone zoom? link description)
    (with-server
      (lambda (tier)
        (client-create-group tier client name persistent? require-microphone? require-camera? broadcast-hierarchy? auto-create? stone zoom? link description))))
  
  
  (method public (client-create-circle self client name persistent? require-microphone? require-camera? broadcast-hierarchy? auto-create? stone zoom? link description mode)
    (with-server
      (lambda (tier)
        (client-create-circle tier client name persistent? require-microphone? require-camera? broadcast-hierarchy? auto-create? stone zoom? link description mode))))
  
  
  (method public (client-delete-group self client name)
    (with-server
      (lambda (tier)
        (client-delete-group tier client name))))
  
  
  (method public (client-group-requirements self client name)
    (with-server
      (lambda (tier)
        (client-group-requirements tier client name))))
  
  
  (method public (client-join-group self client name mode)
    (with-server
      (lambda (tier)
        (client-join-group tier client name mode))))
  
  
  (method public (client-rejoin-group self client name/no)
    (with-server
      (lambda (tier)
        (client-rejoin-group tier client name/no))))
  
  
  (method public (client-leave-group self client name)
    (with-server
      (lambda (tier)
        (client-leave-group tier client name))))
  
  
  (method public (client-change-upload-specs self client stream-no upload-specs upload-closing)
    (with-server
      (lambda (tier)
        (client-change-upload-specs tier client stream-no upload-specs upload-closing))))
  
  
  (method public (client-change-mode/focused self client mode focused)
    (with-server
      (lambda (tier)
        (client-change-mode/focused tier client mode focused))))
  
  
  (method public (client-register-stream self client sender name source-kind video-levels video-on? channels)
    (with-server
      (lambda (tier)
        (client-register-stream tier client sender name source-kind video-levels video-on? channels))))
  
  
  (method public (client-unregister-stream self client stream-no)
    (with-server
      (lambda (tier)
        (client-unregister-stream tier client stream-no))))
  
  
  (method public (client-media-init self client stream-no channels-init)
    (with-server
      (lambda (tier)
        (client-media-init tier client stream-no channels-init))))
  
  
  (method public (client-media-on self client stream-no media-kind)
    (with-server
      (lambda (tier)
        (client-media-on tier client stream-no media-kind))))
  
  
  (method public (client-media-off self client stream-no media-kind)
    (with-server
      (lambda (tier)
        (client-media-off tier client stream-no media-kind))))
  
  
  (method public (client-stream-action self client stream-no action arguments)
    (with-server
      (lambda (tier)
        (client-stream-action tier client stream-no action arguments))))
  
  
  (method public (client-channel-action self client channel-no action arguments)
    (with-server
      (lambda (tier)
        (client-channel-action tier client channel-no action arguments))))
  
  
  (method public (client-circle-properties self client circle-name)
    (with-server
      (lambda (tier)
        (client-circle-properties tier client circle-name))))
  
  
  (method public (client-circle-property self client circle-name property)
    (with-server
      (lambda (tier)
        (client-circle-property tier client circle-name property))))
  
  
  (method public (client-change-circle-property self client circle-name property value)
    (with-server
      (lambda (tier)
        (client-change-circle-property tier client circle-name property value))))
  
  
  (method public (client-circle-information self client circle-name)
    (with-server
      (lambda (tier)
        (client-circle-information tier client circle-name))))
  
  
  (method public (client-circle-shape self client circle-name)
    (with-server
      (lambda (tier)
        (client-circle-shape tier client circle-name))))
  
  
  (method public (client-change-circle-shape self client circle-name shape)
    (with-server
      (lambda (tier)
        (client-change-circle-shape tier client circle-name shape))))
  
  
  (method public (client-change-circle-order self client circle-name order)
    (with-server
      (lambda (tier)
        (client-change-circle-order tier client circle-name order))))
  
  
  (method public (client-list-group-members self name)
    (with-server
      (lambda (tier)
        (client-list-group-members tier name))))
  
  
  (method public (client-list-hierarchy self)
    (with-server
      (lambda (tier)
        (client-list-hierarchy tier))))
  
  
  (method public (request-universe-asset self client path)
    (request-universe-asset (current-tier) client path))
  
  
  (method public (request-world-asset self client path)
    (request-world-asset (current-tier) client path))
  
  
  (method public (retrieve-world-asset self path)
    (retrieve-world-asset (current-tier) path))
  
  
  (method public (upload-world-asset self content digest)
    (upload-world-asset (current-tier) content digest))
  
  
  (method public (update-world-assets self client changes)
    (update-world-assets (current-tier) client changes))
  
  
  (method public (register-literal self literal)
    (register-literal (current-tier) literal))
  
  
  (method public (registered-id self id)
    (registered-id (current-tier) id))
  
  
  (method public (tile-server self)
    (with-server
      (lambda (tier)
        (tile-server tier))))
  
  
  (method public (restore-server self)
    (with-server
      (lambda (tier)
        (restore-server tier))))
  
  
  (method public (profile-start self client)
    (with-server
      (lambda (tier)
        (profile-start tier client))))
  
  
  (method public (profile-test self client test arguments)
    (with-server
      (lambda (tier)
        (profile-test tier client test arguments))))
  
  
  (method public (profile-retrieve self client)
    (with-server
      (lambda (tier)
        (profile-retrieve tier client))))
  
  
  (method public (profile-stop self client)
    (with-server
      (lambda (tier)
        (profile-stop tier client))))
  
  
  (method public (invitation-list self client)
    (with-server
      (lambda (tier)
        (invitation-list tier client))))
  
  
  (method public (invitation-add self client invitation-word expires)
    (with-server
      (lambda (tier)
        (invitation-add tier client invitation-word expires))))
  
  
  (method public (invitation-modify self client invitation-word expires)
    (with-server
      (lambda (tier)
        (invitation-modify tier client invitation-word expires))))
  
  
  (method public (invitation-remove self client key)
    (with-server
      (lambda (tier)
        (invitation-remove tier client key))))
  
  
  (method public (admin-command self client command arguments)
    (with-server
      (lambda (tier)
        (admin-command tier client command arguments))))
  
  
  (method public (admin-request-chunk self requester cookie sender name chunk done?)
    (with-server
      (lambda (tier)
        (admin-request-chunk tier requester cookie sender name chunk done?))))
  
  
  (method public (debuggee-forwarding self debugger-proxy origin-proxy who)
    (with-server
      (lambda (tier)
        (debuggee-forwarding tier debugger-proxy origin-proxy who))))
  
  
  (method public (debugger-attach self debugger-proxy who)
    (with-server
      (lambda (tier)
        (debugger-attach tier debugger-proxy who))))
  
  
  (method public (debugger-detach self who)
    (with-server
      (lambda (tier)
        (debugger-detach tier who))))

  
  ;(method public (admin-run-return self requester cookie sender state data)
  ;  (with-server
  ;    (lambda (tier)
  ;      (admin-run-return tier requester cookie sender state data))))
  ))
