;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Remote Server Implementation
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2016
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.server.remote.implementation jazz


(import (jazz.syntax (phase syntax))
        (world)
        (world.autoload)
        (world.support)
        (world.syntax (phase syntax))
        (world.task)
        (world.tier))


(definition (with-server-tier proc)
  (with-task-mutex
    (lambda ()
      (let ((tier (current-tier+)))
        (if (and tier
                 (is? tier Server-Tier)
                 (not shutdown?)
                 (not being-debugged?))
            (continuation-capture
              (lambda (exit)
                (parameterize ((current-exit exit))
                  (proc tier))))
          disconnect-marker)))))


(class World-Remote-Server extends Object
  
  
  (method public (client-enter client character-name character-avatar character-script)
    (with-server-tier
      (lambda (tier)
        (client-enter~ tier client character-name character-avatar character-script))))
  
  
  (method public (client-exit client character-name)
    (with-server-tier
      (lambda (tier)
        (client-exit~ tier client character-name))))
  
  
  (method public (client-alive client)
    (with-server-tier
      (lambda (tier)
        (client-alive~ tier client))))
  
  
  (method public (client-message client kind recipient message)
    (with-server-tier
      (lambda (tier)
        (client-message~ tier client kind recipient message))))
  
  
  (method public (client-log client time message)
    (with-server-tier
      (lambda (tier)
        (client-log~ tier client time message))))
  
  
  (method public (processor-log processor time message)
    (with-server-tier
      (lambda (tier)
        (processor-log~ tier processor time message))))
  
  
  (method public (client-connected-player client no)
    (with-server-tier
      (lambda (tier)
        (client-connected-player~ tier client no))))
  
  
  (method public (client-connected-players client)
    (with-server-tier
      (lambda (tier)
        (client-connected-players~ tier client))))
  
  
  (method public (client-available-templates client)
    (with-server-tier
      (lambda (tier)
        (client-available-templates~ tier client))))
  
  
  (method public (client-available-zone-base client from)
    (with-server-tier
      (lambda (tier)
        (client-available-zone-base~ tier client from))))
  
  
  (method public (client-available-zone-base? client base)
    (with-server-tier
      (lambda (tier)
        (client-available-zone-base?~ tier client base))))
  
  
  (method public (client-create-zone client from base)
    (with-server-tier
      (lambda (tier)
        (client-create-zone~ tier client from base))))
  
  
  (method public (client-available-zones client)
    (with-server-tier
      (lambda (tier)
        (client-available-zones~ tier client))))
  
  
  (method public (client-change-zone client zone)
    (with-server-tier
      (lambda (tier)
        (client-change-zone~ tier client zone))))
  
  
  (method public (retrieve-asset path)
    (with-server-tier
      (lambda (tier)
        (retrieve-asset~ tier path))))
  
  
  (method public (register-literal literal)
    (with-server-tier
      (lambda (tier)
        (register-literal~ tier literal))))
  
  
  (method public (registered-id id)
    (with-server-tier
      (lambda (tier)
        (registered-id~ tier id))))
  
  
  (method public (tile-server)
    (with-server-tier
      (lambda (tier)
        (tile-server~ tier))))
  
  
  (method public (restore-server)
    (with-server-tier
      (lambda (tier)
        (restore-server~ tier))))))
