;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Remote Server Implementation
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2016
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.server.remote.implementation jazz


(import (world)
        (world.autoload)
        (world.support)
        (world.syntax (phase syntax))
        (world.task))


(class World-Remote-Server extends Object
  
  
  (method public (client-enter client player-name player-avatar)
    (with-task-mutex
      (lambda ()
        (client-enter~ (server-tier) client player-name player-avatar))))
  
  
  (method public (client-exit client player-name)
    (with-task-mutex
      (lambda ()
        (client-exit~ (server-tier) client player-name))))
  
  
  (method public (client-alive client)
    (unless being-debugged?
      (with-task-mutex
        (lambda ()
          (client-alive~ (server-tier) client)))))
  
  
  (method public (client-update client changes)
    (unless being-debugged?
      (with-task-mutex
        (lambda ()
          (client-update~ (server-tier) client changes)))))
  
  
  (method public (client-message client kind message)
    (unless being-debugged?
      (with-task-mutex
        (lambda ()
          (client-message~ (server-tier) client kind message)))))
  
  
  (method public (client-debug client arguments)
    (unless being-debugged?
      (with-task-mutex
        (lambda ()
          (client-debug~ (server-tier) client arguments)))))
  
  
  (method public (retrieve-region region-x region-z)
    (with-task-mutex
      (lambda ()
        (retrieve-region~ (server-tier) region-x region-z))))
  
  
  (method public (retrieve-chunk region-x region-z chunk-x chunk-z chunk-digest)
    (with-task-mutex
      (lambda ()
        (retrieve-chunk~ (server-tier) region-x region-z chunk-x chunk-z chunk-digest))))
  
  
  (method public (register-literal literal)
    (with-task-mutex
      (lambda ()
        (register-literal~ (server-tier) literal))))
  
  
  (method public (registered-id id)
    (with-task-mutex
      (lambda ()
        (registered-id~ (server-tier) id))))))
