;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Remote Server Implementation
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.server.remote.implementation jazz


(import (world.autoload)
        (world.context)
        (world.support)
        (world.task)
        (world.tier))


(definition (with-server proc)
  (with-task-mutex
    (lambda ()
      (let ((tier (current-tier+)))
        (if (and tier
                 (is? tier Server-Tier)
                 (not shutdown?)
                 (not being-debugged?))
            (continuation-capture
              (lambda (exit)
                (parameterize ((current-exit exit))
                  (proc tier))))
          disconnect-marker)))))


(class World-Remote-Server extends Object
  
  
  (method public (client-connect self client client-uuid character-name character-avatar character-script character-zone character-role character-sphere?)
    (with-server
      (lambda (tier)
        (client-connect tier client client-uuid character-name character-avatar character-script character-zone character-role character-sphere?))))
  
  
  (method public (client-start self client)
    (with-server
      (lambda (tier)
        (client-start tier client))))
  
  
  (method public (client-stop self client)
    (with-server
      (lambda (tier)
        (client-stop tier client))))
  
  
  (method public (client-disconnect self client character-name)
    (with-server
      (lambda (tier)
        (client-disconnect tier client character-name))))
  
  
  (method public (client-sleep self client)
    (with-server
      (lambda (tier)
        (client-sleep tier client))))
  
  
  (method public (client-wake self client)
    (with-server
      (lambda (tier)
        (client-wake tier client))))
  
  
  (method public (client-alive self client)
    (with-server
      (lambda (tier)
        (client-alive tier client))))
  
  
  (method public (client-message self client kind recipient message)
    (with-server
      (lambda (tier)
        (client-message tier client kind recipient message))))
  
  
  (method public (client-log self client time message)
    (with-server
      (lambda (tier)
        (client-log tier client time message))))
  
  
  (method public (processor-log self processor time message)
    (with-server
      (lambda (tier)
        (processor-log tier processor time message))))
  
  
  (method public (client-connected-player self client no)
    (with-server
      (lambda (tier)
        (client-connected-player tier client no))))
  
  
  (method public (client-connected-players self client)
    (with-server
      (lambda (tier)
        (client-connected-players tier client))))
  
  
  (method public (client-available-templates self client)
    (with-server
      (lambda (tier)
        (client-available-templates tier client))))
  
  
  (method public (client-available-zone-base self client from)
    (with-server
      (lambda (tier)
        (client-available-zone-base tier client from))))
  
  
  (method public (client-available-zone-base? self client base)
    (with-server
      (lambda (tier)
        (client-available-zone-base? tier client base))))
  
  
  (method public (client-create-zone self client from base)
    (with-server
      (lambda (tier)
        (client-create-zone tier client from base))))
  
  
  (method public (client-available-zones self client)
    (with-server
      (lambda (tier)
        (client-available-zones tier client))))
  
  
  (method public (client-change-zone self client zone)
    (with-server
      (lambda (tier)
        (client-change-zone tier client zone))))
  
  
  (method public (client-create-group self client name persistent? audio-only?)
    (with-server
      (lambda (tier)
        (client-create-group tier client name persistent? audio-only?))))
  
  
  (method public (client-delete-group self client name)
    (with-server
      (lambda (tier)
        (client-delete-group tier client name))))
  
  
  (method public (client-disband-group self client name)
    (with-server
      (lambda (tier)
        (client-disband-group tier client name))))
  
  
  (method public (client-join-group self client name)
    (with-server
      (lambda (tier)
        (client-join-group tier client name))))
  
  
  (method public (client-leave-group self client name)
    (with-server
      (lambda (tier)
        (client-leave-group tier client name))))
  
  
  (method public (client-change-video-level self client video-level)
    (with-server
      (lambda (tier)
        (client-change-video-level tier client video-level))))
  
  
  (method public (client-register-stream self client sender name source-kind video-level channels recipient)
    (with-server
      (lambda (tier)
        (client-register-stream tier client sender name source-kind video-level channels recipient))))
  
  
  (method public (client-unregister-stream self client stream-no)
    (with-server
      (lambda (tier)
        (client-unregister-stream tier client stream-no))))
  
  
  (method public (client-stream-action self client stream-no action arguments)
    (with-server
      (lambda (tier)
        (client-stream-action tier client stream-no action arguments))))
  
  
  (method public (client-channel-action self client channel-no action arguments)
    (with-server
      (lambda (tier)
        (client-channel-action tier client channel-no action arguments))))
  
  
  (method public (client-list-group-members self name)
    (with-server
      (lambda (tier)
        (client-list-group-members tier name))))
  
  
  (method public (client-list-hierarchy self)
    (with-server
      (lambda (tier)
        (client-list-hierarchy tier))))
  
  
  (method public (retrieve-asset self path)
    (with-server
      (lambda (tier)
        (retrieve-asset tier path))))
  
  
  (method public (register-literal self literal)
    (with-server
      (lambda (tier)
        (register-literal tier literal))))
  
  
  (method public (registered-id self id)
    (with-server
      (lambda (tier)
        (registered-id tier id))))
  
  
  (method public (tile-server self)
    (with-server
      (lambda (tier)
        (tile-server tier))))
  
  
  (method public (restore-server self)
    (with-server
      (lambda (tier)
        (restore-server tier))))
  
  
  (method public (profile-start self client)
    (with-server
      (lambda (tier)
        (profile-start tier client))))
  
  
  (method public (profile-test self client test arguments)
    (with-server
      (lambda (tier)
        (profile-test tier client test arguments))))
  
  
  (method public (profile-retrieve self client)
    (with-server
      (lambda (tier)
        (profile-retrieve tier client))))
  
  
  (method public (profile-stop self client)
    (with-server
      (lambda (tier)
        (profile-stop tier client))))
  
  
  (method public (admin-command self client command arguments)
    (with-server
      (lambda (tier)
        (admin-command tier client command arguments))))
  
  
  (method public (admin-request-chunk self requester cookie sender name chunk done?)
    (with-server
      (lambda (tier)
        (admin-request-chunk tier requester cookie sender name chunk done?))))
  
  
  ;(method public (admin-run-return self requester cookie sender state data)
  ;  (with-server
  ;    (lambda (tier)
  ;      (admin-run-return tier requester cookie sender state data))))
  ))
