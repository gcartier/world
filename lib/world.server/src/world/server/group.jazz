;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; Server Group
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.server.group jazz


(import (jazz.io))


(definition protected next-group-no <fx>
  0)

(definition protected (next-group-no!) <fx>
  (prog1 next-group-no
    (increase! next-group-no)))


(class Server-Group extends Object
  
  
  (slot no                             getter generate)
  (slot circle                         getter generate)
  (slot disband?        initialize #f  getter generate)
  (slot members         initialize '() getter generate)
  (slot server-streams  initialize '() getter generate)
  (slot ordered-streams initialize '() getter generate)
  (slot profiling?      initialize #f  accessors generate)
  
  
  (method override (initialize self circle disband?)
    (nextmethod self)
    (set! self.no (next-group-no!))
    (set! self.circle circle)
    (set! self.disband? disband?))
  
  
  (method override (print self output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{a}" no))))
  
  
  (method public (has-members? self)
    (not-null? members))
  
  
  (method public (add-member self delegate)
    (set! members (cons delegate members)))
  
  
  (method public (remove-member self delegate)
    (set! members (remove delegate members)))
  
  
  (method public (has-server-streams? self)
    (not-null? server-streams))
  
  
  (method public (add-server-stream self stream)
    (set! server-streams (cons stream server-streams)))
  
  
  (method public (remove-server-stream self stream)
    (set! server-streams (remove stream server-streams)))
  
  
  (method public (register-ordered-stream self stream)
    (set! ordered-streams (append! ordered-streams (list stream))))
  
  
  (method public (unregister-ordered-stream self stream)
    (set! ordered-streams (remove! stream ordered-streams)))
  
  
  (method public (reorder-ordered-streams self order)
    (let ((queue (new-queue))
          (remaining (copy ordered-streams)))
      (for-each (lambda (stream-no)
                  (let ((stream (find-if (lambda (stream)
                                           (equal? (get-no stream) stream-no))
                                         ordered-streams)))
                    (when stream
                      (enqueue queue stream)
                      (set! remaining (remove! stream remaining)))))
                order)
      (let ((order (queue-list queue)))
        (let ((ordered (append! order remaining)))
          (set! ordered-streams ordered)
          (map get-no order)))))))
