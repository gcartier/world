;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; Server Group
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.server.group jazz


(import (jazz.io))


(definition protected next-group-no <fx>
  0)

(definition protected (next-group-no!) <fx>
  (prog1 next-group-no
    (increase! next-group-no)))


(class Server-Group extends Object
  
  
  (slot name                           getter generate)
  (slot no                             getter generate)
  (slot owner                          accessors generate)
  (slot created                        accessors generate)
  (slot invite-only?                   accessors generate)
  (slot persistent?                    accessors generate)
  (slot require-microphone?            accessors generate)
  (slot require-camera?                accessors generate)
  (slot zone                           getter generate)
  (slot stone                          getter generate)
  (slot shape                          accessors generate)
  (slot zoom?                          getter generate)
  (slot link                           accessors generate)
  (slot description                    accessors generate)
  (slot start-time                     getter generate)
  (slot members         initialize '() accessors generate)
  (slot server-streams  initialize '() accessors generate)
  (slot server-levels                  getter generate)
  (slot ordered-streams initialize '() getter generate)
  
  
  (method override (initialize self name owner created persistent? require-microphone? require-camera? zone stone zoom? link description)
    (nextmethod self)
    (set! self.name name)
    (set! self.no (next-group-no!))
    (set! self.owner owner)
    (set! self.created created)
    (set! self.invite-only? #f)
    (set! self.persistent? persistent?)
    (set! self.require-microphone? require-microphone?)
    (set! self.require-camera? require-camera?)
    (set! self.zone zone)
    (set! self.stone stone)
    (set! self.shape 'flow)
    (set! self.zoom? zoom?)
    (set! self.link link)
    (set! self.description description)
    (set! self.start-time (current-seconds))
    (set! self.server-levels (make-table)))
  
  
  (method override (print self output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{a}" name))))
  
  
  (method public (get-duration self)
    (- (current-seconds) start-time))
  
  
  (method public (effective-link self sending-to-mobile?)
    (if (and name (not zoom?) sending-to-mobile?)
        (url-encode (format "togethersphere:?join={a}" name))
      link))
  
  
  (method public (register-ordered-stream self stream)
    (set! ordered-streams (append! ordered-streams (list stream))))
  
  
  (method public (unregister-ordered-stream self stream)
    (set! ordered-streams (remove! stream ordered-streams)))
  
  
  (method public (reorder-ordered-streams self order)
    (let ((queue (new-queue))
          (remaining (copy ordered-streams)))
      (for-each (lambda (stream-no)
                  (let ((stream (find-if (lambda (stream)
                                           (equal? (get-no stream) stream-no))
                                         ordered-streams)))
                    (when stream
                      (enqueue queue stream)
                      (set! remaining (remove! stream remaining)))))
                order)
      (let ((order (queue-list queue)))
        (let ((ordered (append! order remaining)))
          (set! ordered-streams ordered)
          (map get-no order)))))))
