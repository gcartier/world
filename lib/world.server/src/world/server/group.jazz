;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; Server Group
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.server.group jazz


(definition protected next-group-no <fx>
  0)

(definition protected (next-group-no!) <fx>
  (prog1 next-group-no
    (increase! next-group-no)))


(class Server-Group extends Object
  
  
  (slot name                           getter generate)
  (slot no                             getter generate)
  (slot owner                          accessors generate)
  (slot created                        accessors generate)
  (slot invite-only?                   accessors generate)
  (slot persistent?                    accessors generate)
  (slot require-microphone?            accessors generate)
  (slot require-camera?                accessors generate)
  (slot zone                           getter generate)
  (slot stone                          getter generate)
  (slot zoom?                          getter generate)
  (slot link                           getter generate)
  (slot start-time                     getter generate)
  (slot members         initialize '() accessors generate)
  (slot streams         initialize '() accessors generate)
  
  
  (method override (initialize self name owner created persistent? require-microphone? require-camera? zone stone zoom? link)
    (nextmethod self)
    (set! self.name name)
    (set! self.no (next-group-no!))
    (set! self.owner owner)
    (set! self.created created)
    (set! self.invite-only? #f)
    (set! self.persistent? persistent?)
    (set! self.require-microphone? require-microphone?)
    (set! self.require-camera? require-camera?)
    (set! self.zone zone)
    (set! self.stone stone)
    (set! self.zoom? zoom?)
    (set! self.link link)
    (set! self.start-time (current-seconds)))
  
  
  (method override (print self output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{a}" name))))
  
  
  (method public (get-duration self)
    (- (current-seconds) start-time))))
