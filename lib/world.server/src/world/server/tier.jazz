;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; Server Tier
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2016
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.server.tier jazz


(import (jazz.component)
        (jazz.debuggee)
        (jazz.io)
        (jazz.jml)
        (jazz.jrm)
        (jazz.network)
        (jazz.process)
        (jazz.settings)
        (world)
        (world.autoload)
        (world.change)
        (world.geometry)
        (world.history)
        (world.io)
        (world.network)
        (world.server.client)
        (world.server.configuration)
        (world.settings)
        (world.syntax (phase syntax))
        (world.tier)
        (world.window))


(class Server-Tier extends Tier implements Server
  
  
  (slot clients initialize '() getter generate)
  (slot hits    initialize 0   getter generate)
  
  
  (method override (initialize settings)
    (set! settings~self settings)
    (setup))
  
  
  (method override (setup)
    (register-settings settings)
    (set-client-id (next-unique-id!))
    (unless (get-controller-debugger)
      (let ((host (world-server-host))
            (service (world-server-service)))
        (start-remote-listener host: host service: service))))
  
  
  (method override (enter)
    (unless (admin?)
      (let ((me (current-me)))
        (set-name~ me (world-setting 'world.server.player-name #f))
        (set-avatar~ me (world-setting 'world.server.player-avatar #f)))))
  
  
  (method override (shutdown)
    (unregister-settings settings)
    (unless (get-controller-debugger)
      (stop-remote-listener)))
  
  
  ;;;
  ;;;; Server
  ;;;
  
  
  (method override (get-state)
    'started)
    
  
  (method override (start)
    )
  
  
  (method override (stop)
    )
  
  
  (method override (restart)
    )
  
  
  (method override (wait-started (error?: error? #f))
    )
  
  
  (method override (wait-stopped (error?: error? #f))
    )
  
  
  (method override (server-name)
    "World")
  
  
  (method override (server-title)
    "World")
  
  
  (method override (server-version)
    (process-version~ (get-process)))
  
  
  (method override (server-host)
    (host->string (listening-host~ (get-remote-listener))))
  
  
  (method override (server-service)
    (port->string (listening-port~ (get-remote-listener))))
  
  
  (method override (server-hits)
    hits)
  
  
  (method override (server-debug?)
    #f)
  
  
  ;;;
  ;;;; Player
  ;;;
  
  
  (method override (anonymous)
    "Server")
  
  
  ;;;
  ;;;; Incoming
  ;;;
  
  
  (method (client-enter player-client player-name player-avatar)
    (let ((world (current-world))
          (zone (current-zone)))
      (debug-server 'client-enter player-name player-avatar)
      ;; register client
      (let ((client-id (next-unique-id!)))
        (let ((server-client (new Server-Client client-id player-client player-name)))
          (set! clients (cons server-client clients))
          ;; retrieve player
          (let ((player (player-retrieve player-name player-avatar))
                (player-server-client (find-server-client player-client)))
            ;; collect other players for client
            (define (collect-other-players)
              (define (player-info player)
                (let ((id (get-id~ player))
                      (name (get-name~ player))
                      (avatar (get-avatar~ player))
                      (position (get-position~ player))
                      (lookat (get-lookat~ player)))
                  (list id name avatar position lookat)))
              
              (let ((players
                      (collect (lambda (server-client)
                                 (unless (eq? server-client player-server-client)
                                   (let ((name (get-name~ server-client)))
                                     (let ((existing (find-player~ world name)))
                                       (player-info existing)))))
                               clients)))
                (if (admin?)
                    players
                  (cons (player-info (current-me)) players))))
            
            ;; broadcast entering player to other clients
            (let ((player-id (get-id~ player))
                  (player-position (get-position~ player))
                  (player-lookat (get-lookat~ player))
                  (other-players (collect-other-players)))
              (for-each (lambda (server-client)
                          (unless (eq? server-client player-server-client)
                            (let ((client (get-client~ server-client)))
                              (server-entered~ client player-id player-name player-avatar player-position player-lookat))))
                        clients)
              (when (application?)
                (display-message~ world (format "{a} entered world" player-name)))
              (let ((welcome (if open-test? "Welcome to the Yownu multiplayer test!" "Welcome to Yownu!"))
                    (spawnpoint (get-spawnpoint~ zone)))
                (list client-id welcome spawnpoint player-id player-position player-lookat other-players))))))))
  
  
  (method (client-exit player-client player-name)
    (let ((world (current-world)))
      (debug-server 'client-exit player-name)
      ;; store player
      (player-store (find-player~ world player-name))
      ;; broadcast exiting player to other clients
      (let ((player-server-client (find-server-client player-client)))
        (for-each (lambda (server-client)
                    (unless (eq? server-client player-server-client)
                      (let ((client (get-client~ server-client)))
                        (server-exited~ client player-name))))
                  clients))
      ;; unregister client
      (let ((server-client (find-server-client player-client)))
        (set! clients (remove! server-client clients)))
      (when (application?)
        (display-message~ world (format "{a} exited world" player-name)))))
  
  
  (method (player-retrieve player-name player-avatar)
    (let ((zone (current-zone)))
      (let ((file (new-file~ (players-dir) (format "{a}.player" player-name))))
        (let ((player
                (if (exists?~ file)
                    (let ((player (instantiate~ (read-form file))))
                      (set-name~ player player-name)
                      (set-avatar~ player player-avatar)
                      (set-parent~ player zone)
                      player)
                  (let ((units '(world.data)))
                    (let ((tag '(<Player> (<Camera>)))
                          (data (new Data zone-version 'jazz units #f)))
                      (let ((form (construct-form tag (imports-locator units) data)))
                        (set-origin~ form file)
                        (let ((player (instantiate~ form)))
                          (set-name~ player player-name)
                          (set-avatar~ player player-avatar)
                          (set-parent~ player zone)
                          (set-position~ player (find-spawnpoint~ zone))
                          (set-lookat~ player (find-spawnlookat~ zone))
                          player)))))))
          (set-billboard-name~ player player-name)
          (add-element~ zone player)
          (when (application?)
            (add-simulation~ zone player))
          player))))
  
  
  (method (player-store player)
    (let ((world (current-world))
          (zone (current-zone)))
      (let ((file (new-file~ (players-dir) (format "{a}.player" (get-name~ player)))))
        (create-directories~ file)
        (let ((designer (new Former form: (get-form~ player) reference: player)))
          (define (save-camera)
            (let ((eye (get-eye~ world))
                  (camera (player-camera~ player)))
              (set-property~ designer camera 'position (get-position~ eye))
              (set-property~ designer camera 'lookat (get-lookat~ eye))))
          
          (define (save-player)
            (set-property~ designer player 'position (get-position~ player))
            (set-property~ designer player 'lookat (get-lookat~ player)))
          
          (save-camera)
          (save-player)
          (save~ designer)))
      (when (application?)
        (remove-simulation~ zone player))
      (remove-element~ zone player)))
  
  
  (method (players-dir)
    (let ((zone (current-zone)))
      (new-directory~ (zone-directory (get-moniker~ zone)) "players")))
  
  
  (method (client-update client changes)
    (increase! hits)
    ;; should probably be applied by a task
    (forward-changes changes)
    (outgoing-push-changes changes))
  
  
  (method (client-message client message)
    (let ((sender (get-name~ (find-server-client client))))
      (log-message sender message)
      (for-each (lambda (server-client)
                  (let ((client (get-client~ server-client)))
                    (server-message~ client sender message)))
                clients)))
  
  
  (method (client-debug client arguments)
    (when (world-setting 'world.server.debug? #f)
      (apply debug 'client arguments)))
  
  
  (method (retrieve-region region-x region-z)
    (let ((zone (current-zone)))
      (debug-server 'retrieve-region region-x region-z)
      (boolean (get-region~ zone region-x region-z))))
  
  
  (method (retrieve-chunk region-x region-z chunk-x chunk-z chunk-digest)
    (let ((zone (current-zone)))
      (let ((region (get-region~ zone region-x region-z)))
        (when region
          (let ((chunk (get-chunk~ region chunk-x chunk-z create?: #t)))
            (when chunk
              (unless (equal? (get-digest~ chunk) chunk-digest)
                (let ((chunk-raw (get-raw~ chunk)))
                  (debug-server 'retrieve-chunk region-x region-z chunk-x chunk-z (u8vector-length chunk-raw))
                  chunk-raw))))))))
  
  
  (method (register-literal literal)
    (literal->id literal))
  
  
  (method (registered-id id)
    (id->literal id))
  
  
  (method (find-server-client target)
    (find-if (lambda (client)
               (proxy=? (get-client~ client) target))
             clients))
  
  
  (method (broadcast-server-update changes)
    (for-each (lambda (server-client)
                (let ((client (get-client~ server-client)))
                  (server-update~ client changes)))
              clients))
  
  
  ;;;
  ;;;; Debug
  ;;;
  
  
  (method (debug-server . rest)
    (when (world-setting 'world.server.debug? #f)
      (apply debug 'server rest)))
  
  
  ;;;
  ;;;; Log
  ;;;
  
  
  (slot log-file initialize #f getter generate)
  
  
  (method (cache-log-file)
    (or log-file
        (let ((zone (current-zone)))
          (let ((file (timestamped-file (new-directory~ (zone-directory (get-moniker~ zone)) "messages") #f "txt")))
            (create-directories~ file)
            (set! log-file file)
            file))))
  
  
  (method (log-message sender message)
    (call-with-output-file (path-settings (cache-log-file) append: #t)
      (lambda (output)
        (format output "{a} {a}{%}" sender message))))))
