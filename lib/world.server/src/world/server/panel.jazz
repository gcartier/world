;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Server Panel
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2016
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.server.panel jazz


(import (jazz.network)
        (world)
        (world.autoload)
        (world.instance)
        (world.memory)
        (world.network)
        (world.syntax (phase syntax))
        (world.task))


;;;
;;;; Panel
;;;


(class World-Server-Panel extends Server-Panel
  
  
  (method override (process-server-command command arguments output)
    (define (simulation kind)
      (with-task-mutex
        (lambda ()
          (protocol-simulation~ (server-tier) kind)
          (if (eq? kind 'none)
              (format output "No network simulation{%}")
            (format output "Simulating {a} network{%}" kind)))))
    
    (case command
      ((slow) (simulation 'slow))
      ((awful) (simulation 'awful))
      ((none) (simulation 'none))
      ((types) (with-task-mutex (lambda () (gc) (gc) (analyse-types))))
      ((regions) (with-task-mutex (lambda () (gc) (gc) (analyse-regions))))
      (else (nextmethod command arguments output))))
  
  
  (method override (output-server-info detailed? output)
    (define (present-meg bytes)
      (format "{a}m" (meg bytes)))
    
    (define (meg bytes)
      (fxround (/ bytes 1024. 1024.)))
    
    (format output "  clients                 : {a}{%}" (map get-name~ (get-delegates~ (server-tier))))
    (format output "  processors              : {a}{%}" (table-values processors))
    (bind-values (last-gc-heap-size last-gc-alloc last-gc-live last-gc-movable last-gc-nonmovable) (process-memory)
      (format output "  live                    : {a}{%}" (present-meg last-gc-live))
      (format output "  movable                 : {a}{%}" (present-meg last-gc-movable))
      (format output "  nonmovable              : {a}{%}" (present-meg last-gc-nonmovable)))
    (format output "  outgoing buffer         : {a}{%}" outgoing-max)
    (let ((zone (current-zone)))
      (format output "  regions                 : {a}{%}" (count-regions~ zone))
      (format output "  chunks                  : {a}{%}" (count-chunks~ zone))
      (format output "  sections                : {a}{%}" (count-sections~ zone))
      (format output "  players                 : {a}{? {s}~}{%}" (length (get-players~ zone)) (and detailed? (get-players~ zone)))
      (format output "  actors                  : {a}{? {s}~}{%}" (length (get-actors~ zone)) (and detailed? (get-actors~ zone)))
      (format output "  entities                : {a}{? {s}~}{%}" (length (get-entities~ zone)) (and detailed? (get-entities~ zone)))
      (format output "  creatures               : {a}{? {s}~}{%}" (length (get-creatures~ zone)) (and detailed? (get-creatures~ zone)))
      (format output "  gadgets                 : {a}{? {s}~}{%}" (length (get-gadgets~ zone)) (and detailed? (get-gadgets~ zone)))))))
