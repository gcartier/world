;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Server Panel
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.server.panel jazz


(import (jazz.network)
        (world)
        (world.context)
        (world.memory)
        (world.network)
        (world.processor)
        (world.server.client)
        (world.task)
        (world.udp))


;;;
;;;; Panel
;;;


(class World-Server-Panel extends Server-Panel
  
  
  (method override (process-server-command self command arguments output)
    (case command
      ((types) (with-task-mutex (lambda () (gc) (gc) (analyse-types))))
      ((regions) (with-task-mutex (lambda () (gc) (gc) (analyse-regions))))
      (else (nextmethod self command arguments output))))
  
  
  (method override (output-server-info self detailed? output)
    (define (present-meg bytes)
      (format "{a}m" (meg bytes)))
    
    (define (meg bytes)
      (fxround (/ bytes 1024. 1024.)))
    
    (define (present-delegate delegate)
      (let ((name (get-name delegate)))
        (cond ((get-disconnected? delegate)
               (format "{a}+" name))
              ((get-asleep? delegate)
               (format "{a}*" name))
              (else
               name))))
    
    (define (present-hierarchy hierarchy)
      (map (lambda (info)
             (bind (group allow-audio-only? zone . members) info
               (cons group (cons allow-audio-only? (cons zone (map car members))))))
           hierarchy))
    
    (format output "  clients                 : {a}{%}" (map present-delegate (collect-delegates (current-server))))
    (format output "  processors              : {a}{%}" (list-processors))
    (format output "  groups                  : {a}{%}" (present-hierarchy (collect-hierarchy (current-server))))
    (format output "  threads                 : {a}{%}" (length (top-threads)))
    (format output "  streams                 : {a}{%}" (map get-name (table-values (get-send-streams (current-udp)))))
    (bind-values (last-gc-heap-size last-gc-alloc last-gc-live last-gc-movable last-gc-nonmovable) (process-memory)
      (format output "  live                    : {a}{%}" (present-meg last-gc-live))
      (format output "  movable                 : {a}{%}" (present-meg last-gc-movable))
      (format output "  nonmovable              : {a}{%}" (present-meg last-gc-nonmovable)))
    (format output "  outgoing buffer         : {a}{%}" outgoing-max))))
