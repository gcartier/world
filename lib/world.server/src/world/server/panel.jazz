;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Server Panel
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2016
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.server.panel jazz


(import (jazz.network)
        (world)
        (world.autoload)
        (world.network)
        (world.syntax (phase syntax)))


;;;
;;;; Panel
;;;


(class World-Server-Panel extends Server-Panel
  
  
  (method override (output-server-info output)
    (define (present-meg bytes)
      (format "{a}m" (meg bytes)))
    
    (define (meg bytes)
      (fxround (/ bytes 1024. 1024.)))
    
    (let ((clients (get-clients~ (server-tier))))
      (format output "  clients                 : {a}{%}" (map get-name~ clients))
      (bind-values (last-gc-heap-size last-gc-alloc last-gc-live last-gc-movable last-gc-nonmovable) (process-memory)
        (format output "  live                    : {a}{%}" (present-meg last-gc-live))
        (format output "  movable                 : {a}{%}" (present-meg last-gc-movable))
        (format output "  nonmovable              : {a}{%}" (present-meg last-gc-nonmovable)))
      (format output "  outgoing buffer         : {a}{%}" outgoing-max)
      (let ((zone (current-zone)))
        (with-regions-mutex~ zone
          (lambda ()
            (format output "  regions                 : {a}{%}" (count-regions~ zone))
            (format output "  chunks                  : {a}{%}" (count-chunks~ zone))))
        (format output "  sections                : {a}{%}" (count-sections~ zone))
        (format output "  sectors                 : {a}{%}" (table-length (get-sectors~ zone)))
        (format output "  areas                   : {a}{%}" (table-length (get-areas~ zone)))
        (format output "  players                 : {a}{%}" (length (get-players~ zone)))
        (format output "  actors                  : {a}{%}" (length (get-actors~ zone)))
        (format output "  entities                : {a}{%}" (length (get-entities~ zone)))
        (format output "  creatures               : {a}{%}" (length (get-creatures~ zone)))
        (format output "  gadgets                 : {a}{%}" (length (get-gadgets~ zone))))))))
