;;;============
;;;  Together
;;;============
;;;
;;;; Server Reports
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.server.report jazz


(import (jazz.io))


(definition curl-path
  "/usr/bin/curl")


(definition monitor-directory
  (cond-expand
    (devel  {Directory Home ".together" "devel" "1.0.0" "work" "crashes"})
    (trial  {Directory Home ".together" "trial" "1.0.0" "work" "crashes"})
    (test   {Directory Home ".together" "test" "1.0.0" "work" "crashes"})
    (triage {Directory Home ".together" "triage" "1.0.0" "work" "crashes"})
    (stable {Directory Home ".together" "stable" "1.0.0" "work" "crashes"})
    (stage  {Directory Home ".together" "stage" "1.0.0" "work" "crashes"})
    (prod   {Directory Home ".together" "prod" "1.0.0" "work" "crashes"})))

(definition monitor-remote
  (cond-expand
    (devel  "http://logs.togethersphere.com/devel")
    (trial  "http://logs.togethersphere.com/trial")
    (test   "http://logs.togethersphere.com/test")
    (triage "http://logs.togethersphere.com/triage")
    (stable "http://logs.togethersphere.com/stable")
    (stage  "http://logs.togethersphere.com/stage")
    (prod   "http://logs.togethersphere.com/prod")))


(cond-expand
  (windows
   (definition public (send-crash-reports)
     ))
  (else
   (definition public (send-crash-reports)
     (define (send-crash crash)
       (bind (file remote) crash
         (let ((port (open-process
                       (list
                         path: curl-path
                         arguments: (list "--silent" "-T" (parse file) "-H" "Content-Type: text/plain" (string-append remote "/crashes/" (get-name file)))
                         show-console: #f))))
           (let ((status (process-status port)))
             (when (= status 0)
               (delete file))))))
     
     (define (send-crashes crashes)
       (for-each send-crash crashes))
     
     (define (collect-crashes)
       (let ((queue (new-queue)))
         (when (exists? monitor-directory)
           (iterate-directory monitor-directory
             (lambda (file)
               (when (extension=? (get-extension file) "snapshot")
                 (enqueue queue (list file monitor-remote))))
             files?: #t
             directories?: #f
             recursive?: #f))
         (queue-list queue)))
     
     (let ((crashes (collect-crashes)))
       (let ((count (length crashes)))
         (when (> count 0)
           (thread-start!
             (new-thread
               (lambda ()
                 (send-crashes crashes))
               'send-crash-reports)))
         count))))))
