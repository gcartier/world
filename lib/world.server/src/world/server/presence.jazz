;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; Server Presence
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.server.presence jazz


(import (jazz.presence)
        (jazz.presence.transmission)
        (world)
        (world.context)
        (world.server.problem))


(definition protected delayed-client-disconnecter
  #f)

(definition protected (set-delayed-client-disconnecter proc)
  (set! delayed-client-disconnecter proc))


(definition protected (setup-server-presence)
  (if (get-remote-listener)
      (error "Remote listener already started")
    (set-presence-already-connected
      (lambda (presence remote-uuid existing-connection accept)
        (problem "Already connected")
        (close-connection presence remote-uuid existing-connection)
        (accept)))
    (set-presence-accept-handler
      (lambda (proc presence)
        (handle-exception-filter
          connection-exception?
          (lambda (exc)
            (problem "Accepting remote: {a}" (exception-reason exc)))
          (lambda ()
            (proc presence)))))
    ;; set-presence-invoke-handler is not needed
    ;; at the moment it is made safe by calling-client
    (set-presence-process-handler
      (lambda (proc connection)
        (handle-exception-filter
          connection-exception?
          (lambda (exc)
            (problem "Processing remote: {a}" (exception-reason exc))
            (when delayed-client-disconnecter
              (delayed-client-disconnecter connection exc)))
          (lambda ()
            (proc connection)))))
    (set-presence-execute-handler
      (lambda (proc connection)
        (handle-exception-filter
          connection-exception?
          (lambda (exc)
            (problem "Executing remote: {a}" (exception-reason exc)))
          (lambda ()
            (proc connection))))))))
