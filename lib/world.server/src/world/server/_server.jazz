;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; World Server
;;;


(module world.server jazz


(import (jazz.debuggee)
        (jazz.io)
        (jazz.jrm)
        (jazz.library)
        (jazz.network)
        (jazz.system)
        (jazz.system.process)
        (world)
        (world.player)
        (world.settings)
        (world.server.client)
        (world.server.configuration)
        (world.server.panel)
        (time))


(class World-Server extends Process implements Server
  
  
  (slot clients  initialize '() getter generate)
  (slot hits      initialize 0  getter generate)
  (slot pulse     initialize #f getter generate)
  (slot last-tick initialize #f getter generate)
  
  
  (method override (process-name)
    "World Server")
  

  (method override (process-version)
    world-version)
  
  
  (define settings-updates
    (list->updates
      '((version: 100000 targets: settings))))


  (define (convert-settings dir old)
    (define (convert-initial)
      100000)

    (case old
      ((#f) (convert-initial))
      (else #f)))
  
  
  (method override (settings-version)
    (get-update-version (car settings-updates)))

  
  (method override (initialize-settings)
    (define (determine-settings)
      (or (command-argument "settings")
          (let ((settings-dir {Directory Build "settings"}))
            (and (exists?~ settings-dir)
                 (versioned-directory (parse~ settings-dir) 'settings settings-updates convert-settings)))
          (let ((dot-dir {Directory Home ".world"}))
            (copy-settings-if-not-exists)
            (versioned-directory (parse~ dot-dir) 'settings settings-updates convert-settings))))
    
    (let ((settings-path (tokenise-filename (determine-settings))))
      (register-alias 'Settings settings-path override?: #t)
      (let ((file {File Settings ".settings"}))
        (unless (exists?~ file)
          (create~ file))
        (set! settings (new File-Settings file: file))
        (register-settings settings)))
    (let ((file (new-file~ {Directory Settings} (or (command-argument "server-settings") "world-server.settings"))))
      (when (exists?~ file)
        (register-settings (new File-Settings file: file))))
    (setup-snapshots))
  
  
  (method override (prepare-profile)
    (setup-settings)
    (nextmethod))
  
  
  (method protected virtual (default-server-settings)
    "world-server.settings")
  
  
  (method (setup-settings)
    (let ((file {File Settings "server.settings"}))
      (when (exists?~ file)
        (register-settings (new File-Settings file: file))))
    (let ((file (new-file~ {Directory Settings} (or (command-argument "server-settings") (default-server-settings)))))
      (when (exists?~ file)
        (register-settings (new File-Settings file: file)))))
  
  
  (method override (start-process)
    (nextmethod)
    (start-panel)
    (prepare-tick))
  
  
  (method (start-panel)
    (thread-start!
      (new-thread
        (lambda ()
          (run-loop~ (new World-Panel) self))
        'panel)))
  
  
  ;;;
  ;;;; Servers
  ;;;
  
  
  (method override (start-servers?)
    #t)
  
  
  ;;;
  ;;;; Server
  ;;;
  
  
  (method override (get-state)
    'started)
    
  
  (method override (start)
    )
  
  
  (method override (stop)
    )
  
  
  (method override (restart)
    )
  
  
  (method override (wait-started (error?: error? #f))
    )
  
  
  (method override (wait-stopped (error?: error? #f))
    )
  
  
  (method override (server-name)
    "World")
  
  
  (method override (server-version)
    (process-version))
  
  
  (method override (server-host)
    (host->string (listening-host~ (get-remote-listener))))
  
  
  (method override (server-service)
    (port->string (listening-port~ (get-remote-listener))))
  
  
  (method override (server-hits)
    hits)
  
  
  (method override (server-debug?)
    #f)
  
  
  ;;;
  ;;;; Clients
  ;;;
  
  
  (method (prepare-tick)
    (set! pulse (new Pulse 'tick .05 server-tick-pulse))
    (set! last-tick (time->seconds (current-time))))
  
  
  (method (register-client client)
    (let ((client (new Server-Client client)))
      (set! clients (cons client clients))))
  
  
  (method (unregister-client client)
    (let ((client (find-server-client client)))
      (set! clients (remove! client clients))))
  
  
  (method (enter-world player-client player-name)
    (for-each (lambda (server-client)
                (let ((client (get-client~ server-client)))
                  (world-enter~ client player-client player-name)))
              clients))
  
  
  (method (exit-world player-client player-name)
    (for-each (lambda (server-client)
                (let ((client (get-client~ server-client)))
                  (world-exit~ client player-client player-name)))
              clients))
  
  
  (method (client-tick client commands)
    (let ((client (find-server-client client))
          (commands (deserialize-commands commands)))
      (increase! hits)
      (let ((client-commands (get-commands~ client)))
        (when (get-move-left?~ commands)    (set-move-left?~ client-commands #t))
        (when (get-move-right?~ commands)   (set-move-right?~ client-commands #t))
        (when (get-move-down?~ commands)    (set-move-down?~ client-commands #t))
        (when (get-move-up?~ commands)      (set-move-up?~ client-commands #t))
        (when (get-strafe-left?~ commands)  (set-strafe-left?~ client-commands #t))
        (when (get-strafe-right?~ commands) (set-strafe-right?~ client-commands #t))
        (when (get-strafe-up?~ commands)    (set-strafe-up?~ client-commands #t))
        (when (get-strafe-down?~ commands)  (set-strafe-down?~ client-commands #t))
        (when (get-rotate-left?~ commands)  (set-rotate-left?~ client-commands #t))
        (when (get-rotate-right?~ commands) (set-rotate-right?~ client-commands #t))
        (when (get-jump?~ commands)         (set-jump?~ client-commands #t))
        (when (get-fire?~ commands)         (set-fire?~ client-commands #t)))))
  
  
  (method (find-server-client target)
    (find-if (lambda (client)
               (proxy=? (get-client~ client) target))
             clients))
  
  
  (method (server-tick-pulse)
    (let ((seconds (time->seconds (current-time))))
      (let ((elapse (- seconds last-tick)))
        (set! last-tick seconds)
        (let ((commands (map (lambda (server-client)
                               (cons (get-name~ server-client)
                                     (serialize-commands (get-commands~ server-client))))
                             clients)))
          (for-each (lambda (server-client)
                      (let ((client (get-client~ server-client)))
                        (server-tick~ client commands elapse)
                        (reset-commands~ server-client)))
                    clients)))))
  
  
  ;;;
  ;;;; Runtime
  ;;;
  
  
  (method override (runtime-properties)
    (cons kind: (cons 'server (nextmethod))))

  
  ;;;
  ;;;; Templates
  ;;;
  
  
  (method override (templates-directory)
    (world-templates-directory))
  
  
  ;;;
  ;;;; Profile
  ;;;
  
  
  (method override (use-profile?)
    (using-debugger?))
  
  
  (method override (install-profiles)
    (register-repository-aliases (install-repository (parse~ {Directory Settings "profiles"}))))
  
  
  (method override (profile-kind)
    "server")
  
  
  ;;;
  ;;;; Debuggee
  ;;;
  
  
  (method override (initial-console-context)
    :profile)))
