;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Server
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2016
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.server jazz


(import (jazz.action)
        (jazz.application)
        (jazz.component)
        (jazz.jml)
        (jazz.skin)
        (jazz.text.preferences)
        (world)
        (world.appl)
        (world.autoload)
        (world.change)
        (world.commands)
        (world.dye)
        (world.dyes)
        (world.geometry)
        (world.history)
        (world.index)
        (world.interface.skin)
        (world.network)
        (world.settings)
        (world.syntax (phase syntax))
        (world.server.actions)
        (world.server.client)
        (world.server.panel)
        (world.server.parameters)
        (world.window))


(class World-Server extends World-Application
  
  
  (method override (process-name)
    "World Server")
  

  (method override (process-version)
    world-version)
  
  
  (method override (default-preferences)
    (new World-Preferences))
  
  
  (method override (default-bindings)
    (new World-Bindings))
  
  
  (method override (finish-process)
    (nextmethod)
    (install-role)
    (testing (world-setting 'world.testing #f)))
  
  
  (method (start-panel)
    (thread-start!
      (new-thread
        (lambda ()
          (run-loop~ (new World-Server-Panel) (current-tier)))
        'panel)))

  
  ;;;
  ;;;; Actions
  ;;;
  
  
  (method override (class-actions)
    (append (list (find-actions 'world-menu)
                  (find-actions 'world-interface)
                  (find-actions 'world-graphics)
                  (find-actions 'world-sound)
                  (find-actions 'world-server)
                  (find-actions 'world-world)
                  (find-actions 'world-zone)
                  (find-actions 'world-movement)
                  (find-actions 'world-camera)
                  (find-actions 'world-game)
                  (find-actions 'world-spell)
                  (find-actions 'world-edition)
                  (find-actions 'world-history)
                  (find-actions 'world-window)
                  (find-actions 'world-debug)
                  (find-actions 'world-tutorial)
                  (find-actions 'world-collision)
                  (find-actions 'world-anonymous))
            (nextmethod)))
  
  
  ;;;
  ;;;; Runtime
  ;;;
  
  
  (method override (runtime-properties)
    (cons kind: (cons 'server (nextmethod))))


  ;;;
  ;;;; Skins
  ;;;
  
  
  (method override (install-skins)
    (iterate-skins
      (lambda (name skin)
        (let ((trait (instantiate-trait Skin world-look)))
          (set-parent~ trait (local-trait skin 'jazz))
          (set-active-trait~ skin 'default.jazz.world)))))
  
  
  @skin-convert
  (method override (load-skins)
    (instantiate~
      (<form>
        (<Skins>                    active: world
          (<World-Skin> name: world)))))

  
  ;;;
  ;;;; Templates
  ;;;
  
  
  (method override (templates-directory)
    (world-templates-directory))
  
  
  ;;;
  ;;;; Profile
  ;;;
  
  
  (method override (use-profile?)
    #f)
  
  
  ;;;
  ;;;; Debuggee
  ;;;
  
  
  (method override (initial-console-context)
    #f))


;;;
;;;; Preferences
;;;


(class World-Preferences extends Application-Preferences
  
  
  (form
    (<install>                                     toplevel-state: restored
      (<documents~>
        (<Plain-Text-Preferences> name: plain-text)))))


;;;
;;;; Bindings
;;;


(class World-Bindings extends Application-Bindings
  
  
  (form
    (<install>
      (<World-Menu-Actions>      name: world-menu)
      (<World-Spell-Actions>     name: world-spell)))))
