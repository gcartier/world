;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Server
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2016
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.server jazz


(import (jazz.action)
        (jazz.application)
        (jazz.component)
        (jazz.event)
        (jazz.io)
        (jazz.jml)
        (jazz.jrm)
        (jazz.network)
        (jazz.settings)
        (jazz.skin)
        (jazz.text.preferences)
        (world)
        (world.appl)
        (world.autoload)
        (world.commands)
        (world.defaults)
        (world.dye)
        (world.dyes)
        (world.geometry)
        (world.history)
        (world.interface.skin)
        (world.settings)
        (world.syntax (phase syntax))
        (world.server.actions)
        (world.server.client)
        (world.server.panel)
        (world.server.parameters)
        (world.window))


(class World-Server extends World-Application implements Server
  
  
  (slot clients    initialize '() getter generate)
  (slot hits       initialize 0   getter generate)
  (slot tick-pulse initialize #f  getter generate)
  (slot last-tick  initialize #f  getter generate)
  
  
  (method override (process-name)
    "World Server")
  

  (method override (process-version)
    world-version)
  
  
  (method override (default-preferences)
    (new World-Preferences))
  
  
  (method override (default-bindings)
    (new World-Bindings))
  
  
  (method override (start-process)
    (nextmethod)
    (prepare-tick))
  
  
  (method override (finish-process)
    (nextmethod)
    (install-role)
    (testing (world-setting 'world.testing #f)))
  
  
  (method (start-panel)
    (thread-start!
      (new-thread
        (lambda ()
          (run-loop~ (new World-Server-Panel) self))
        'panel)))
  
  
  ;;;
  ;;;; World
  ;;;
  
  
  (method override (get-world-server)
    #f)
  
  
  (method override (get-world-client)
    #f)
  
  
  ;;;
  ;;;; Server
  ;;;
  
  
  (method override (get-state)
    'started)
    
  
  (method override (start)
    )
  
  
  (method override (stop)
    )
  
  
  (method override (restart)
    )
  
  
  (method override (wait-started (error?: error? #f))
    )
  
  
  (method override (wait-stopped (error?: error? #f))
    )
  
  
  (method override (server-name)
    "World")
  
  
  (method override (server-title)
    "World")
  
  
  (method override (server-version)
    (process-version))
  
  
  (method override (server-host)
    (host->string (listening-host~ (get-remote-listener))))
  
  
  (method override (server-service)
    (port->string (listening-port~ (get-remote-listener))))
  
  
  (method override (server-hits)
    hits)
  
  
  (method override (server-debug?)
    #f)
  
  
  ;;;
  ;;;; Debug
  ;;;
  
  
  (method (debug-server . rest)
    (when (world-setting 'world.server.debug? #f)
      (apply debug-post 'server rest)))
  
  
  ;;;
  ;;;; Clients
  ;;;
  
  
  (method (prepare-tick)
    (set! tick-pulse (new Pulse 'tick .02 server-tick-pulse))
    (set! last-tick (current-seconds)))
  
  
  (method (client-register client)
    (debug-server 'client-register (get-name~ client))
    (let ((server-client (new Server-Client client)))
      (set! clients (cons server-client clients))))
  
  
  (method (client-unregister client)
    (debug-server 'client-unregister (get-name~ client))
    (let ((server-client (find-server-client client)))
      (set! clients (remove! server-client clients))))
  
  
  (method (client-enter player-client player-name player-avatar)
    (let ((world (current-world)))
      (debug-server 'client-enter (get-name~ player-client) player-name player-avatar)
      ;; retrieve player
      (let ((player (player-retrieve player-name player-avatar))
            (player-server-client (find-server-client player-client)))
        ;; send existing players to client
        (for-each (lambda (server-client)
                    (unless (eq? server-client player-server-client)
                      (let ((name (get-name~ server-client)))
                        (let ((existing (find-player~ world name)))
                          (let ((avatar (get-avatar~ existing))
                                (position (get-position~ existing))
                                (lookat (get-lookat~ existing)))
                            (server-player~ player-client name avatar position lookat))))))
                  clients)
        ;; broadcast entering player to other clients
        (let ((player-id (get-id~ player))
              (player-position (get-position~ player))
              (player-lookat (get-lookat~ player)))
          (for-each (lambda (server-client)
                      (unless (eq? server-client player-server-client)
                        (let ((client (get-client~ server-client)))
                          (server-entered~ client player-name player-avatar player-position player-lookat))))
                    clients)
          (when (get-visible?~ (current-world-window))
            (display-message~ world (format "{a} entered world" player-name)))
          (list player-id player-position player-lookat)))))
  
  
  (method (client-exit player-client player-name)
    (let ((world (current-world)))
      (debug-server 'client-exit (get-name~ player-client) player-name)
      ;; store player
      (player-store (find-player~ world player-name))
      ;; broadcast exiting player to other clients
      (let ((player-server-client (find-server-client player-client)))
        (for-each (lambda (server-client)
                    (unless (eq? server-client player-server-client)
                      (let ((client (get-client~ server-client)))
                        (server-exited~ client player-name))))
                  clients))
      (when (get-visible?~ (current-world-window))
        (display-message~ world (format "{a} exited world" player-name)))))
  
  
  (method (player-retrieve player-name player-avatar)
    (let ((world (current-world))
          (zone (current-zone)))
      (let ((player-position (vertex (* (cast <fl> (length (get-actors~ zone))) 2.) 4. 15.) @w (get-spawnpoint~ zone))
            (player-lookat (make-standard-lookat)))
        (let ((player (new Player parent: world name: player-name avatar: player-avatar position: player-position lookat: player-lookat)))
          (set-billboard-name~ player player-name)
          (add-element~ zone player)
          player))))
  
  
  (method (player-store player)
    (let ((zone (current-zone)))
      (remove-element~ zone player)))
  
  
  (method (client-update client changes)
    )
  
  
  (method (client-tick client commands elapse)
    @wait
    (let ((world (current-world))
          (history (current-history)))
      (increase! hits)
      (unless (or (get-debugged?~ world) (get-paused?~ history))
        (let ((server-client (find-server-client client))
              (commands (deserialize-commands commands)))
          (let ((server-commands (get-commands~ server-client)))
            (when (get-move-backward?~ commands) (move-backward~ server-commands))
            (when (get-move-forward?~ commands)  (move-forward~ server-commands))
            (when (get-move-left?~ commands)     (move-left~ server-commands))
            (when (get-move-right?~ commands)    (move-right~ server-commands))
            (when (get-move-up?~ commands)       (move-up~ server-commands))
            (when (get-move-down?~ commands)     (move-down~ server-commands))
            (when (get-rotate-left?~ commands)   (rotate-left~ server-commands))
            (when (get-rotate-right?~ commands)  (rotate-right~ server-commands))
            (when (get-jump?~ commands)          (jump~ server-commands))
            (for-each (lambda (action)
                        (enqueue-action~ server-commands action))
                      (get-actions~ commands))
            (set-last-no~ server-commands (get-last-no~ commands)))))))
  
  
  (method (client-debug client arguments)
    (when (world-setting 'world.server.debug? #f)
      (apply debug-post 'client (get-name~ client) arguments)))
  
  
  (method (find-server-client target)
    (find-if (lambda (client)
               (proxy=? (get-client~ client) target))
             clients))
  
  
  (method (server-tick-pulse)
    @wait
    (let ((world (current-world)))
      (let ((time (current-seconds)))
        (let ((elapse (- time last-tick)))
          (set! last-tick time)
          (let ((player-commands
                  (collect (lambda (server-client)
                             (let ((name (get-name~ server-client))
                                   (commands (get-commands~ server-client)))
                               (when (get-modified?~ commands)
                                 (complete~ commands)
                                 (prog1 (cons name (serialize-commands commands))
                                   (reset-commands~ server-client)))))
                           clients)))
            ;; tick server world
            (server-tick~ world player-commands time elapse)
            ;; broadcast server tick
            (for-each (lambda (server-client)
                        (let ((client (get-client~ server-client)))
                          (server-tick~ client player-commands time elapse)))
                      clients))))))

  
  ;;;
  ;;;; Actions
  ;;;
  
  
  (method override (class-actions)
    (append (list (find-actions 'world-menu)
                  (find-actions 'world-interface)
                  (find-actions 'world-graphics)
                  (find-actions 'world-sound)
                  (find-actions 'world-server)
                  (find-actions 'world-world)
                  (find-actions 'world-zone)
                  (find-actions 'world-movement)
                  (find-actions 'world-camera)
                  (find-actions 'world-game)
                  (find-actions 'world-spell)
                  (find-actions 'world-edition)
                  (find-actions 'world-history)
                  (find-actions 'world-window)
                  (find-actions 'world-debug)
                  (find-actions 'world-tutorial)
                  (find-actions 'world-collision)
                  (find-actions 'world-anonymous))
            (nextmethod)))
  
  
  ;;;
  ;;;; Runtime
  ;;;
  
  
  (method override (runtime-properties)
    (cons kind: (cons 'server (nextmethod))))


  ;;;
  ;;;; Skins
  ;;;
  
  
  (method override (install-skins)
    (iterate-skins
      (lambda (name skin)
        (let ((trait (instantiate-trait Skin world-look)))
          (set-parent~ trait (local-trait skin 'jazz))
          (set-active-trait~ skin 'default.jazz.world)))))
  
  
  @skin-convert
  (method override (load-skins)
    (instantiate~
      (<form>
        (<Skins>                    active: world
          (<World-Skin> name: world)))))

  
  ;;;
  ;;;; Templates
  ;;;
  
  
  (method override (templates-directory)
    (world-templates-directory))
  
  
  ;;;
  ;;;; Profile
  ;;;
  
  
  (method override (use-profile?)
    #f)
  
  
  ;;;
  ;;;; Debuggee
  ;;;
  
  
  (method override (initial-console-context)
    #f))


;;;
;;;; Preferences
;;;


(class World-Preferences extends Application-Preferences
  
  
  (form
    (<install>                                     toplevel-state: restored
      (<documents~>
        (<Plain-Text-Preferences> name: plain-text)))))


;;;
;;;; Bindings
;;;


(class World-Bindings extends Application-Bindings
  
  
  (form
    (<install>
      (<World-Menu-Actions>      name: world-menu)
      (<World-Spell-Actions>     name: world-spell)))))
