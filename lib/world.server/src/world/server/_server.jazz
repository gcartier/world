;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Server
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.server jazz


(import (jazz.io)
        (jazz.jml)
        (jazz.jrm)
        (jazz.library)
        (jazz.network)
        (jazz.system)
        (jazz.system.application)
        (jazz.ui)
        (world)
        (world.appl)
        (world.autoload)
        (world.commands)
        (world.defaults)
        (world.dyes)
        (world.geometry)
        (world.interface.skin)
        (world.player)
        (world.profile)
        (world.settings)
        (world.syntax (phase syntax))
        (world.server.actions)
        (world.server.client)
        (world.server.panel)
        (world.server.parameters))


(class World-Server extends World-Application implements Server
  
  
  (slot clients    initialize '() getter generate)
  (slot hits       initialize 0   getter generate)
  (slot tick-pulse initialize #f  getter generate)
  (slot last-tick  initialize #f  getter generate)
  
  
  (method override (process-name)
    "World Server")
  
  
  (method override (process-copyright)
    "2012-2015")
  

  (method override (process-version)
    world-version)

  
  (method override (initialize-settings)
    (set! initial-role current-role)
    (let ((file {File Settings ".settings"}))
      (when (not (exists?~ file))
        (create~ file))
      (set! settings (new File-Settings file: file))
      (register-settings settings))
    (let ((file {File Settings "server.settings"}))
      (when (exists?~ file)
        (register-settings (new File-Settings file: file))))
    (let ((file (new-file~ {Directory Settings} (or (command-argument "server-settings") "world-server.settings"))))
      (when (exists?~ file)
        (register-settings (new File-Settings file: file)))))
  
  
  (method override (default-preferences)
    (new World-Preferences))
  
  
  (method override (default-bindings)
    (new World-Bindings))
  
  
  (method override (start-process)
    (nextmethod)
    (prepare-tick))
  
  
  (method override (finish-process)
    (nextmethod)
    (install-role)
    (testing (world-setting 'world.testing #f)))
  
  
  (method (start-panel)
    (thread-start!
      (new-thread
        (lambda ()
          (run-loop~ (new World-Server-Panel) self))
        'panel)))
  
  
  ;;;
  ;;;; World
  ;;;
  
  
  (method override (tier)
    'server)
  
  
  (method override (server-side?)
    #t)
  
  
  (method override (client-side?)
    #f)
  
  
  (method override (get-world-server)
    #f)
  
  
  (method override (get-world-client)
    #f)
  
  
  (method override (enter-zone)
    (let ((world (current-world))
          (zone (current-zone)))
      (define (setup-player player)
        (set-color~ player white-dye)
        (add-element~ zone player)
        (set-current-me player)
        (eye-behind-player~ world)
        (follow-player~ world))
      
      (let ((start-position (or (get-start-position~ zone) default-start-position))
            (start-sight (or (get-start-sight~ zone) default-start-sight))
            (start-up (or (get-start-up~ zone) default-start-up)))
        (let ((start-right (cross-normal start-sight start-up)))
          (let ((player (new (player-class~ world) name: "Server" parent: zone position: start-position visible?: #f)))
            (init-lookat~ player start-sight start-up start-right)
            (setup-player player))))))
  
  
  ;;;
  ;;;; Servers
  ;;;
  
  
  (method override (start-servers?)
    ;; pretty costly
    (world-setting 'world.servers? #f))
  
  
  ;;;
  ;;;; Server
  ;;;
  
  
  (method override (get-state)
    'started)
    
  
  (method override (start)
    )
  
  
  (method override (stop)
    )
  
  
  (method override (restart)
    )
  
  
  (method override (wait-started (error?: error? #f))
    )
  
  
  (method override (wait-stopped (error?: error? #f))
    )
  
  
  (method override (server-name)
    "World")
  
  
  (method override (server-title)
    "World")
  
  
  (method override (server-version)
    (process-version))
  
  
  (method override (server-host)
    (host->string (listening-host~ (get-remote-listener))))
  
  
  (method override (server-service)
    (port->string (listening-port~ (get-remote-listener))))
  
  
  (method override (server-hits)
    hits)
  
  
  (method override (server-debug?)
    #f)
  
  
  ;;;
  ;;;; Name
  ;;;
  
  
  (method override (effective-player-name)
    "Server")
  
  
  ;;;
  ;;;; Clients
  ;;;
  
  
  (method (prepare-tick)
    (set! tick-pulse (new Pulse 'tick .02 server-tick-pulse))
    (set! last-tick (current-seconds)))
  
  
  (method (register-client client)
    (when (world-setting 'world.server.debug? #f)
      (terminal 'server 'register-client (get-name~ client)))
    (let ((server-client (new Server-Client client)))
      (set! clients (cons server-client clients))))
  
  
  (method (unregister-client client)
    (when (world-setting 'world.server.debug? #f)
      (terminal 'server 'unregister-client (get-name~ client)))
    (let ((server-client (find-server-client client)))
      (set! clients (remove! server-client clients))))
  
  
  (method (retrieve-player player-name)
    (let ((zone (current-zone)))
      (let ((start-position (get-start-position~ zone))
            (start-sight (get-start-sight~ zone))
            (start-up (get-start-up~ zone)))
        (if (and start-position start-sight start-up)
            (let ((start-right (cross-normal start-sight start-up)))
              (values start-position
                      (list start-sight
                            start-up
                            start-right)))
          (values (vertex -136. 30. -81.)
                  (list (vertex .5728675127029419 -1.5016088372732384e-9 -.8196479678153992)
                        (vertex -2.372749108303651e-8 1. 1.866522758575684e-8)
                        (vertex .8196479082107544 0. .5728676319122314)))))))
  
  
  (method (enter-world player-client player-name player-avatar)
    (let ((world (current-world)))
      (when (world-setting 'world.server.debug? #f)
        (terminal 'server 'enter-world (get-name~ player-client) player-name player-avatar))
      (let ((player-server-client (find-server-client player-client)))
        (receive (player-position player-lookat) (retrieve-player player-name)
          ;; update avatar
          (set-avatar~ player-server-client player-avatar)
          ;; add player to server world
          (world-enter~ world player-name player-avatar player-position player-lookat)
          ;; update client with already present players
          (world-update~ player-client
            (collect (lambda (server-client)
                       (unless (eq? server-client player-server-client)
                         (let ((player (find-named-player~ world (get-name~ server-client))))
                           (when player
                             (let ((lookat (get-lookat~ player)))
                               (list (get-name~ server-client)
                                     (get-avatar~ server-client)
                                     (get-position~ player)
                                     (get-sight~ lookat)
                                     (get-up~ lookat)
                                     (get-right~ lookat)))))))
                     clients))
          ;; broadcast entering player to all clients
          (for-each (lambda (server-client)
                      (let ((client (get-client~ server-client)))
                        (world-enter~ client player-name player-avatar player-position player-lookat)))
                    clients)))))
  
  
  (method (exit-world player-client player-name)
    (let ((world (current-world)))
      (when (world-setting 'world.server.debug? #f)
        (terminal 'server 'exit-world (get-name~ player-client) player-name))
      ;; remove player from server world
      (world-exit~ world player-name)
      ;; broadcast exiting player to all clients
      (for-each (lambda (server-client)
                  (let ((client (get-client~ server-client)))
                    (world-exit~ client player-name)))
                clients)))
  
  
  (method (update-clients)
    (let ((world (current-world)))
      (let ((players
              (map (lambda (server-client)
                     (let ((name (get-name~ server-client)))
                       (let ((player (find-named-player~ world name)))
                         (let ((lookat (get-lookat~ player)))
                           (list (get-name~ server-client)
                                 (get-avatar~ server-client)
                                 (get-position~ player)
                                 (get-sight~ lookat)
                                 (get-up~ lookat)
                                 (get-right~ lookat))))))
                   clients)))
        (for-each (lambda (server-client)
                    (let ((client (get-client~ server-client)))
                      (world-update~ client players)))
                  clients))))
  
  
  (method (update-client client)
    (let ((world (current-world)))
      (let ((players
              (map (lambda (server-client)
                     (let ((name (get-name~ server-client)))
                       (let ((player (find-named-player~ world name)))
                         (let ((lookat (get-lookat~ player)))
                           (list (get-name~ server-client)
                                 (get-avatar~ server-client)
                                 (get-position~ player)
                                 (get-sight~ lookat)
                                 (get-up~ lookat)
                                 (get-right~ lookat))))))
                   clients)))
        (world-update~ client players))))
  
  
  (method (client-tick client commands elapse)
    (let ((world (current-world)))
      (increase! hits)
      (unless (or (get-debugged?~ world) (get-paused?~ world))
        (let ((server-client (find-server-client client))
              (commands (deserialize-commands commands)))
          (let ((server-commands (get-commands~ server-client)))
            (when (get-move-backward?~ commands) (move-backward~ server-commands))
            (when (get-move-forward?~ commands)  (move-forward~ server-commands))
            (when (get-move-left?~ commands)     (move-left~ server-commands))
            (when (get-move-right?~ commands)    (move-right~ server-commands))
            (when (get-move-up?~ commands)       (move-up~ server-commands))
            (when (get-move-down?~ commands)     (move-down~ server-commands))
            (when (get-rotate-left?~ commands)   (rotate-left~ server-commands))
            (when (get-rotate-right?~ commands)  (rotate-right~ server-commands))
            (when (get-jump?~ commands)          (jump~ server-commands))
            (for-each (lambda (action)
                        (enqueue-action~ server-commands action))
                      (get-actions~ commands))
            (set-last-no~ server-commands (get-last-no~ commands)))))))
  
  
  (method (client-test client argument)
    (debug 'client-test client)
    argument)
  
  
  (method (find-server-client target)
    (find-if (lambda (client)
               (proxy=? (get-client~ client) target))
             clients))
  
  
  (method (server-tick-pulse)
    @wait
    (let ((world (current-world)))
      (let ((time (current-seconds)))
        (let ((elapse (- time last-tick)))
          (set! last-tick time)
          (let ((player-commands
                  (collect (lambda (server-client)
                             (let ((name (get-name~ server-client))
                                   (commands (get-commands~ server-client)))
                               (when (get-modified?~ commands)
                                 (complete~ commands)
                                 (prog1 (cons name (serialize-commands commands))
                                   (reset-commands~ server-client)))))
                           clients)))
            ;; tick server world
            (server-tick~ world player-commands time elapse)
            ;; broadcast server tick
            (for-each (lambda (server-client)
                        (let ((client (get-client~ server-client)))
                          (server-tick~ client player-commands time elapse)))
                      clients))))
      @debug
      (when (and (> hits 0)
                 (= (modulo hits 10) 0))
        (update-clients))))

  
  ;;;
  ;;;; Actions
  ;;;
  
  
  (method override (class-actions)
    (append (list (find-actions 'world-menu)
                  (find-actions 'world-interface)
                  (find-actions 'world-graphics)
                  (find-actions 'world-sound)
                  (find-actions 'world-server)
                  (find-actions 'world-world)
                  (find-actions 'world-zone)
                  (find-actions 'world-movement)
                  (find-actions 'world-camera)
                  (find-actions 'world-game)
                  (find-actions 'world-spell)
                  (find-actions 'world-edition)
                  (find-actions 'world-history)
                  (find-actions 'world-window)
                  (find-actions 'world-debug)
                  (find-actions 'world-tutorial)
                  (find-actions 'world-collision)
                  (find-actions 'world-minecraft)
                  (find-actions 'world-anonymous))
            (nextmethod)))
  
  
  (method public (update-world-actions)
    )
  
  
  ;;;
  ;;;; Runtime
  ;;;
  
  
  (method override (runtime-properties)
    (cons kind: (cons 'server (nextmethod))))


  ;;;
  ;;;; Skins
  ;;;
  
  
  (method override (load-skins)
    (instantiate~
      (<form>
        (<Skins>                    active: world
          (<World-Skin> name: world)))))

  
  ;;;
  ;;;; Templates
  ;;;
  
  
  (method override (templates-directory)
    (world-templates-directory))
  
  
  ;;;
  ;;;; Profile
  ;;;
  
  
  (method override (use-profile?)
    (and kernel-source-access? (find-repository 'Jazz)))
  
  
  (method override (new-default-profile)
    (new World-Profile))
  
  
  (method override (install-profiles)
    (register-repository-aliases (install-repository (parse~ {Directory Settings "profiles"}))))
  
  
  (method override (profile-kind)
    "server")
  
  
  ;;;
  ;;;; Debuggee
  ;;;
  
  
  (method override (initial-console-context)
    #f))


;;;
;;;; Preferences
;;;


(class World-Preferences extends Application-Preferences
  
  
  (form
    (<install>                                     toplevel-state: restored
      (<documents~>
        (<Plain-Text-Preferences> name: plain-text)))))


;;;
;;;; Bindings
;;;


(class World-Bindings extends Application-Bindings
  
  
  (form
    (<install>
      (<World-Menu-Actions>      name: world-menu)
      (<World-Spell-Actions>     name: world-spell)))))
