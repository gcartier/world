;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; Server UDP
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;    Barbara Samson


(module world.server.udp jazz


(import (jazz.event)
        (jazz.network)
        (jazz.presence)
        (jazz.snapshot)
        (jazz.stream)
        (jazz.syntax (phase syntax))
        (jazz.zlib)
        (world)
        (world.chronology)
        (world.configure)
        (world.context)
        (world.event)
        (world.evolution)
        (world.profiling)
        (world.record (phase syntax))
        (world.ring)
        (world.server.client)
        (world.server.group)
        (world.server.problem)
        (world.settings)
        (world.stream)
        (world.support)
        (world.task)
        (world.time)
        (world.udp))


(class UDP-Server extends UDP-Tier
  
  
  (slot udp-port        initialize #f getter generate)
  (slot udp-stopping?   initialize #f getter generate)
  (slot no-connections  initialize #f getter generate)
  ;; mutex was not needed before server streaming...
  (slot server-mutex    initialize #f getter generate)
  (slot server-streams  initialize #f getter generate)
  (slot server-channels initialize #f getter generate)
  (slot receive-task    initialize #f getter generate)
  (slot invalid-packets initialize 0  getter generate)
  
  
  (method override (initialize self)
    (nextmethod self)
    (set! server-streams (make-table))
    (set! server-channels (make-table))
    (register-snapshot-callback (~ snapshot-server-streams self)))
  
  
  (method package (start self host service)
    (unless (simulation?)
      (set! udp-port (open-udp (list
                                 local-address: host
                                 local-port-number: service)))
      (setup-udp-port-buffers udp-port)
      (set! udp-stopping? #f)
      (set! no-connections (make-table))
      (set! server-mutex (make-mutex 'server))
      (set! server-channels (make-table))
      (set! send-channels (make-table))
      (set! receive-task (new Task 'udp-receive (~ run-receive self) priority: udp-priority))
      (start-task receive-task)))
  
  
  (method package (stop self)
    (set! udp-stopping? #t)
    (close-port udp-port)
    (thread-join! (get-thread receive-task))
    (set! udp-port #f)
    (set! receive-task #f))
  
  
  (method (snapshot-server-streams self)
    (let ((info (map (lambda (stream)
                       (list (get-sender stream)
                             (get-name stream)
                             (get-source-kind stream)))
                     (table-values server-streams))))
      (add-snapshot-property 'live.udp-server info)))
  
  
  ;;;
  ;;;; Connection
  ;;;
  
  
  (method (register-connection self no connection)
    (table-set! no-connections no connection))
  
  
  (method (unregister-connection self no)
    (table-clear no-connections no))
  
  
  (method protected (no->connection self no)
    (table-ref no-connections no #f))
  
  
  ;;;
  ;;;; Stream
  ;;;
  
  
  (method package (register-server-stream self sender name no origin source-kind video-level recipient exclude-register exclude-broadcast)
    (let ((stream (new UDP-Server-Stream sender name no origin source-kind video-level recipient exclude-register exclude-broadcast)))
      (table-set! server-streams no stream)
      stream))
  
  
  (method package (find-server-stream self stream-no)
    (table-ref server-streams stream-no #f))
  
  
  (method package (close-server-stream self stream)
    (iterate-table (get-channels stream)
      (lambda (no channel)
        (close-server-channel self channel)))
    (let ((stream-no (get-no stream)))
      (close stream)
      (table-clear server-streams stream-no)))
  
  
  (method package (close-send-stream self stream)
    (iterate-table (get-channels stream)
      (lambda (no channel)
        (close-send-channel self channel)))
    (let ((stream-no (get-no stream)))
      (close stream)
      (server-unregister-stream (current-server) stream-no)
      (table-clear send-streams stream-no)))
  
  
  ;;;
  ;;;; Channel
  ;;;
  
  
  (method package (find-server-channel self channel-no)
    (table-ref server-channels channel-no #f))
  
  
  (method package (register-server-channel self stream-no channel-no media-kind source-kind level resolution framerate bitrate codec caps metadata send-state server-sender?)
    (let ((stream (find-server-stream self stream-no)))
      (let ((channel (new UDP-Server-Channel stream channel-no media-kind source-kind level resolution framerate bitrate codec caps metadata send-state server-sender?)))
        (table-set! server-channels channel-no channel)
        channel)))
  
  
  (method package (close-server-channel self channel)
    (let ((channel-no (get-no channel)))
      (close channel)
      (table-clear server-channels channel-no)))
  
  
  (method package (register-send-channel self stream-no channel-no media-kind source-kind level resolution framerate bitrate codec caps metadata send-state)
    (let ((stream (find-send-stream self stream-no)))
      (let ((channel (new UDP-Send-Channel stream channel-no media-kind source-kind level resolution framerate bitrate codec caps metadata send-state)))
        (table-set! send-channels channel-no channel)
        channel)))
  
  
  (method package (close-send-channel self channel)
    (let ((channel-no (get-no channel)))
      (close channel)
      (table-clear send-channels channel-no)))
  
  
  ;;;
  ;;;; Send
  ;;;
  
  
  (method package (send-media self channel-no buffer dts pts duration flags)
    (mutex-lock! server-mutex)
    (let ((channel (find-send-channel self channel-no)))
      (when channel
        (let ((kind (get-media-kind channel)))
          (let ((server-channel (find-server-channel self channel-no)))
            (send-media channel server-no buffer dts pts duration flags
              (lambda (data)
                (broadcast-media self server-channel kind data)))))))
    (mutex-unlock! server-mutex))
  
  
  ;;;
  ;;;; Receive
  ;;;
  
  
  (method (run-receive self task)
    (declare (proper-tail-calls))
    (with-task task
      (lambda (exit)
        (let (loop)
          (let ((data (catch-exception-filter
                        (lambda (exc)
                          udp-stopping?)
                        (lambda (exc)
                          (continuation-return exit #f))
                        (lambda ()
                          (read-data udp-port)))))
            (when data
              (site udp-receive
                (receive-data self data))
              (loop)))))))
  
  
  (method (receive-data self data)
    (mutex-lock! server-mutex)
    (receive-data-unlocked self data)
    (mutex-unlock! server-mutex))
  
  
  (method (receive-data-unlocked self data)
    (if (< (u8vector-length data) 4)
        (begin
          (problem "Receiving data: Invalid packet: {a}" data)
          (increase! invalid-packets))
      (let ((code (read-udp-code data)))
        (if (/= code udp-code)
            (begin
              (problem "Receiving data: Invalid code: {a}" code)
              (increase! invalid-packets))
          (let ((sender (with-record header
                          (read-header-sender data))))
            (let ((connection (no->connection self sender)))
              (when connection
                ;; experiment for a udp timeout hypothesis
                (let ((source-info (udp-source-socket-info udp-port)))
                  (let ((source-host (socket-info-address source-info))
                        (source-port (socket-info-port-number source-info)))
                    (unless (and (host=? source-host (get-host connection))
                                 (service=? source-port (get-port connection)))
                      (when record-events?
                        (record-event udp-id-reconnect
                                      -1.
                                      (fixnum->flonum sender)
                                      -1.
                                      (fixnum->flonum (get-port connection))
                                      (fixnum->flonum source-port)
                                      -1.
                                      -1.))
                      (update-host/port connection source-host source-port))))
                (increase-received connection data))))
          (let ((kind (with-record header
                        (read-header-kind data))))
            (ecase kind
              ((udp-connect)
               (connect-source self data))
              ((udp-heartbeat)
               (receive-heartbeat self data))
              ((udp-nack)
               (receive-nack self data))
              ((udp-audio udp-video)
               (receive-medias self kind data))
              ((udp-state)
               (receive-state self data))
              ((udp-alive)
               (receive-alive self data))
              ((udp-profile-pulse)
               (receive-profile-pulse self data))
              ((udp-profile-media)
               (receive-profile-media self data))
              (else
               (error "Unknown UDP kind: {s}" kind))))))))
  
  
  (method (connect-source self data)
    (with-record connect
      (let ((sender (read-header-sender data))
            (sent (read-connect-sent data))
            (video-level (read-connect-video-level data))
            (source-info (udp-source-socket-info udp-port)))
        (let ((source-host (socket-info-address source-info))
              (source-port (socket-info-port-number source-info)))
          (define (send-connected connection)
            (with-record connected
              (udp-destination-set! source-host source-port udp-port)
              (let ((size (calculate-connected-size)))
                (let ((data (make-u8vector (+ size udp-code-size))))
                  (write-header-kind data udp-connected)
                  (write-header-sender data server-no)
                  (write-connected-connect-sent data sent)
                  (write-udp-code data)
                  (write-data data udp-port)
                  (increase-sent connection data)))))
          
          (let ((existing-connection (no->connection self sender)))
            (if existing-connection
                (begin
                  (send-connected existing-connection)
                  (when record-events?
                    (let ((video-level (get-video-level existing-connection)))
                      (record-event udp-id-connect
                                    -1.
                                    (fixnum->flonum sender)
                                    -1.
                                    reconnect-marker
                                    (if video-level (fixnum->flonum video-level) -1.)
                                    -1.
                                    -1.))))
              (let ((video-level (and (/= video-level -1) video-level)))
                (let ((connection (new UDP-Connection source-host source-port video-level)))
                  (register-connection self sender connection)
                  (send-connected connection)
                  (when record-events?
                    (record-event udp-id-connect
                                  -1.
                                  (fixnum->flonum sender)
                                  -1.
                                  -1.
                                  (if video-level (fixnum->flonum video-level) -1.)
                                  -1.
                                  -1.))))))))))
  
  
  (method package (deconnect-source self no)
    (let ((connection (no->connection self no)))
      (if (not connection)
          (when record-events?
            (record-event udp-id-deconnect
                          -1.
                          (fixnum->flonum no)
                          -1.
                          no-connection-marker
                          -1.
                          -1.
                          -1.))
        (unregister-connection self no)
        (when record-events?
          (record-event udp-id-deconnect
                        -1.
                        (fixnum->flonum no)
                        -1.
                        -1.
                        -1.
                        -1.
                        -1.)))))
  
  
  (method package (new-simulator self)
    (new UDP-Simulator
         (lambda (data connection drop?)
           (if drop?
               (increase-sent connection data)
             (send-connection self connection data)))))
  
  
  (method package (require-simulator self connection)
    (or (get-simulator connection)
        (let ((sim (new-simulator self)))
          (set-simulator connection sim)
          sim)))
  
  
  (method package (stream-video-channel? self stream channel-level video-level)
    (or (not (get-video-level stream))
        (= channel-level (stream-video-level stream video-level))))
  
  
  (method package (stream-to-connection? self channel connection)
    (or (= (get-media-kind channel) udp-audio)
        (let ((stream (get-stream channel))
              (channel-level (get-level channel))
              (video-level (get-video-level connection)))
          (stream-video-channel? self stream channel-level video-level))))
  
  
  (method package (stream-to-group? self channel group)
    (some? (lambda (delegate)
             (let ((no (get-no delegate)))
               (let ((connection (no->connection self no)))
                 (and connection
                      (stream-to-connection? self channel connection)))))
           (get-members group)))
   
  
  (method package (update-streaming self group)
    (for-each (lambda (server-stream)
                (let ((stream (find-send-stream self (get-no server-stream))))
                  (when stream
                    (iterate-table (get-channels stream)
                      (lambda (no channel)
                        (let ((src (get-src (get-pipeline channel)))
                              (stream? (stream-to-group? self channel group)))
                          (set-stream? src stream?)))))))
              (get-streams group)))
  
  
  (method (receive-heartbeat self data)
    (with-record heartbeat
      (let ((sender (read-header-sender data)))
        ;; ack
        (send-ack self sender data)
        ;; throttling
        (let ((connection (no->connection self sender)))
          (when connection
            (set-last-received-heartbeat connection (current-seconds))
            (when (get-throttle-media? connection)
              (set-throttle-media? connection #f)
              (when record-events?
                (record-event udp-id-throttle-off
                              -1.
                              (fixnum->flonum sender)
                              -1.
                              (fixnum->flonum (read-heartbeat-sequence data))
                              -1.
                              -1.
                              -1.))))))))
  
  
  (method (receive-nack self data)
    (with-record nack
      (let ((sender (read-header-sender data))
            (channel-no (read-nack-channel data))
            (start (read-nack-start data))
            (gap (read-nack-gap data)))
        (send-missing self sender channel-no start gap))))
  
  
  ;; receive and reorder all available packets
  (method protected (receive-medias self kind data)
    (declare (proper-tail-calls))
    (with-record media
      (let ((no (read-media-channel data))
            (sender (read-header-sender data)))
        ;; so a sequence of one doesn't allocate a pair
        (let (loop (ordered #f))
          (define (receive)
            (resend-nacks self sender)
            (if (not ordered)
                (receive-media self kind data)
              (for-each (lambda (data)
                          (receive-media self kind data))
                        ordered)))
          
          (input-port-timeout-set! udp-port 0)
          (let ((next (read udp-port)))
            (input-port-timeout-set! udp-port +inf.0)
            (cond ((eof-object? next)
                   (receive))
                  ((and (= (read-header-kind next) kind)
                        (= (read-media-channel next) no))
                   (loop (add-ordered! next (or ordered (list data)) key: (lambda (data)
                                                                            (read-media-sequence data)))))
                  (else
                   (receive)
                   (receive-data-unlocked self next))))))))
  
  
  (method (receive-media self kind data)
    (with-record media
      (let ((channel-no (read-media-channel data))
            (sender (read-header-sender data)))
        (let ((channel (find-server-channel self channel-no)))
          (when channel
            (retain-media channel data)
            (broadcast-media self channel kind data))))))
  
  
  (method (send-missing self sender channel-no start gap)
    (let ((channel (or (find-send-channel self channel-no)
                       (find-server-channel self channel-no))))
      (when channel
        (let ((media-kind (get-media-kind channel))
              (ring (get-retain-ring channel)))
          (loop (for sequence from start below (+ start gap))
                (let ((data (locate-data ring sequence)))
                  (if data
                      (with-record media
                        (let ((connection (no->connection self sender)))
                          (when connection
                            (increase-media-resent data)
                            (send-data self connection data)
                            (when record-events?
                              (let ((frame (read-media-frame data)))
                                (record-event udp-id-resend-packet
                                              (fixnum->flonum channel-no)
                                              (fixnum->flonum sender)
                                              (fixnum->flonum media-kind)
                                              (fixnum->flonum sequence)
                                              (fixnum->flonum frame)
                                              -1.
                                              -1.))))))
                    (when record-events?
                      (record-event udp-id-absent-packet
                                    (fixnum->flonum channel-no)
                                    (fixnum->flonum sender)
                                    (fixnum->flonum media-kind)
                                    (fixnum->flonum sequence)
                                    -1.
                                    -1.
                                    -1.))
                    ;; we already nacked the source early and will broadcast
                    ;; when we receive the resent so we can ignore this nack
                    )))))))
  
  
  (method override (add-missed-media-packets self sender gap)
    (let ((connection (no->connection self sender)))
      (when connection
        (let ((monitor (get-monitor connection)))
          (increase-missed-media-packets monitor gap)))))
  
  
  (method (receive-state self data)
    (with-record state
      (let ((sender (read-header-sender data)))
        ;; reset
        (let ((waiting (u8vector->object (read-state-waiting data)))
              (needs-reset '()))
          (for-each (lambda (channel-no)
                      (let ((channel (find-send-channel self channel-no)))
                        (when channel
                          (set! needs-reset (cons channel needs-reset)))))
                    waiting)
          (when (not-null? needs-reset)
            (delay-event
              (lambda ()
                (for-each reset-media needs-reset)))))
        ;; broadcast
        (broadcast-state self sender data))))
  
  
  (method (broadcast-state self sender data)
    (let ((delegate (find-delegate-by-no (current-server) sender)))
      (when delegate
        (let ((group (get-group delegate)))
          (when group
            (for-each (lambda (member)
                        (let ((no (get-no member)))
                          (let ((connection (no->connection self no)))
                            (when connection
                              (unless (eq? member delegate)
                                (send-data self connection data))))))
                      (get-members group)))))))
  
  
  (method override (send-nack self sender channel-no start gap resend)
    (let ((connection (no->connection self sender)))
      (when connection
        (with-record nack
          (let ((size (calculate-nack-size)))
            (let ((data (make-u8vector (+ size udp-code-size))))
              (write-header-kind data udp-nack)
              (write-header-sender data server-no)
              (write-nack-channel data channel-no)
              (write-nack-start data start)
              (write-nack-gap data gap)
              (write-udp-code data)
              (send-data self connection data)
              (when (> resend 0)
                (add-resending-nacks connection (cons resend data)))))))))
  
  
  (method (resend-nacks self sender)
    (declare (proper-tail-calls))
    (let ((connection (no->connection self sender)))
      (when connection
        (let ((resending-nacks (get-resending-nacks connection)))
          (when (not-null? resending-nacks)
            (let (loop (previous #f) (scan resending-nacks))
              (when (not-null? scan)
                (bind (info . next) scan
                  (bind (resend . data) info
                    (send-data self connection data)
                    (let ((resend (- resend 1)))
                      (cond ((<= resend 0)
                             (if (not previous)
                                 (set-resending-nacks connection next)
                               (set-cdr! previous next))
                             (loop previous next))
                            (else
                             (set-car! info resend)
                             (loop scan next)))))))))))))
  
  
  (method (send-ack self sender data)
    (let ((connection (no->connection self sender)))
      (when connection
        (let ((monitor (get-monitor connection)))
          (let ((packets-sent (get-packets-sent monitor))
                (bytes-sent (get-bytes-sent monitor))
                (packets-received (get-packets-received monitor))
                (bytes-received (get-bytes-received monitor))
                (missed-media-packets (get-missed-media-packets monitor)))
            (define (extract)
              (with-record heartbeat
                (values (read-heartbeat-sent data) (read-heartbeat-sequence data))))
            
            (receive (heartbeat-sent heartbeat-sequence) (extract)
              (with-record ack
                (let ((size (calculate-ack-size)))
                  (let ((data (make-u8vector (+ size udp-code-size))))
                    (write-header-kind data udp-ack)
                    (write-header-sender data sender)
                    (write-ack-heartbeat-sent data heartbeat-sent)
                    (write-ack-heartbeat-sequence data heartbeat-sequence)
                    (write-ack-sent data (current-seconds))
                    (write-ack-packets-sent data packets-sent)
                    (write-ack-bytes-sent data bytes-sent)
                    (write-ack-packets-received data packets-received)
                    (write-ack-bytes-received data bytes-received)
                    (write-ack-missed-media-packets data missed-media-packets)
                    (write-udp-code data)
                    (send-data self connection data))
                  (when record-events?
                    (record-event udp-id-send-ack
                                  -1.
                                  (fixnum->flonum sender)
                                  -1.
                                  (fixnum->flonum heartbeat-sequence)
                                  -1.
                                  -1.
                                  -1.))))))))))
  
  
  (method (broadcast-media self channel kind data)
    (let ((server (current-server)))
      (let ((stream (get-stream channel)))
        (let ((recipients (stream-recipients server stream))
              (exclude-broadcast (get-exclude-broadcast stream))
              (channel-level (get-level channel)))
          (for-each (lambda (member)
                      (let ((no (get-no member)))
                        (let ((connection (no->connection self no)))
                          (when connection
                            (unless (eq? member exclude-broadcast)
                              (unless (get-roaming? member)
                                (let ((video-level (get-video-level connection)))
                                  (unless (and (= kind udp-video)
                                               (not (stream-video-channel? self stream channel-level video-level)))
                                    (let ((last-received-heartbeat (get-last-received-heartbeat connection)))
                                      (when last-received-heartbeat
                                        (unless (get-throttle-media? connection)
                                          (if (waiting-keyframe? connection channel)
                                              (with-record media
                                                (when (frame-keyframe? (read-media-flags data))
                                                  (got-keyframe connection channel)
                                                  (send-data self connection data)))
                                            (let ((now (current-seconds)))
                                              (if (and udp-throttle (> (- now last-received-heartbeat) udp-throttle))
                                                  (begin
                                                    (set-throttle-media? connection #t)
                                                    (wait-keyframes self member connection)
                                                    (when record-events?
                                                      (record-event udp-id-throttle-on
                                                                    -1.
                                                                    (fixnum->flonum no)
                                                                    -1.
                                                                    -1.
                                                                    -1.
                                                                    -1.
                                                                    -1.)))
                                                (send-data self connection data)))))))))))))))
                    recipients)))))
  
  
  (method protected (wait-keyframes self delegate connection)
    (let ((server (current-server)))
      (iterate-table server-channels
        (lambda (no channel)
          (when (memq? delegate (stream-recipients server (get-stream channel)))
            (wait-keyframe connection channel))))))
  
  
  (method protected (done-keyframes self delegate connection)
    (let ((server (current-server)))
      (iterate-table server-channels
        (lambda (no channel)
          (when (memq? delegate (stream-recipients server (get-stream channel)))
            (done-keyframe connection channel))))))
    
  
  (method (receive-alive self data)
    (with-record header
      (let ((sender (read-header-sender data)))
        (send-alive-ack self sender data))))
  
  
  (method (send-alive-ack self sender data)
    (let ((connection (no->connection self sender)))
      (when connection
        (with-record header
          (let ((size (calculate-alive-ack-size)))
            (let ((data (make-u8vector (+ size udp-code-size))))
              (write-header-kind data udp-alive-ack)
              (write-header-sender data sender)
              (write-udp-code data)
              (send-data self connection data)))))))

  
  (method package (send-profile-media self connection sequence payload)
    (mutex-lock! server-mutex)
    (with-record profile-media
      (let ((size (calculate-profile-media-size payload)))
        (let ((data (make-u8vector (+ size udp-code-size))))
          (write-header-kind data udp-profile-media)
          (write-header-sender data server-no)
          (write-profile-media-sequence data sequence)
          (write-profile-media-payload data payload)
          (write-udp-code data)
          (send-data self connection data))))
    (mutex-unlock! server-mutex))
  
  
  (method (receive-profile-pulse self data)
    (with-record profile-pulse
      (let ((sender (read-header-sender data)))
        (let ((connection (no->connection self sender)))
          (when connection
            (receive-profile-pulse connection data)
            (send-profile-ack self sender data))))))
  
  
  (method (send-profile-ack self sender data)
    (let ((connection (no->connection self sender)))
      (when connection
        (let ((now (current-seconds))
              (time-base (get-profile-time-base connection))
              (profile-monitor (get-profile-monitor connection)))
          (let ((packets-sent (get-packets-sent profile-monitor))
                (bytes-sent (get-bytes-sent profile-monitor))
                (packets-received (get-packets-received profile-monitor))
                (bytes-received (get-bytes-received profile-monitor)))
            (define (extract)
              (with-record profile-pulse
                (values (read-profile-pulse-sent data) (read-profile-pulse-sequence data))))
            
            (receive (pulse-sent pulse-sequence) (extract)
              (update-time time-base now pulse-sent
                (lambda (raw-latency latency reason)
                  ))
              (with-record profile-ack
                (let ((size (calculate-profile-ack-size)))
                  (let ((data (make-u8vector (+ size udp-code-size))))
                    (write-header-kind data udp-profile-ack)
                    (write-header-sender data sender)
                    (write-profile-ack-pulse-sent data pulse-sent)
                    (write-profile-ack-pulse-sequence data pulse-sequence)
                    (write-profile-ack-sent data now)
                    (write-profile-ack-latency data (get-raw-latency time-base))
                    (write-profile-ack-packets-sent data packets-sent)
                    (write-profile-ack-bytes-sent data bytes-sent)
                    (write-profile-ack-packets-received data packets-received)
                    (write-profile-ack-bytes-received data bytes-received)
                    (write-udp-code data)
                    (send-data self connection data)
                    (increase-sent profile-monitor data))))))))))
  
  
  (method (receive-profile-media self data)
    (with-record profile-media
      (let ((sender (read-header-sender data)))
        (let ((connection (no->connection self sender)))
          (when connection
            (receive-profile-media connection data))))))
  
  
  (method (send-data self connection data)
    (let ((simulator (get-simulator connection)))
      (if simulator
          (send simulator data connection)
        (send-connection self connection data))))
  
  
  (method (send-connection self connection data)
    (udp-destination-set! (get-host connection) (get-port connection) udp-port)
    (write-data data udp-port)
    (increase-sent connection data)))


;;;
;;;; UDP Connection
;;;


(class UDP-Connection extends Object
  
  
  (slot host                                   getter generate)
  (slot port                                   getter generate)
  (slot monitor                                getter generate)
  (slot simulator               initialize #f  accessors generate)
  (slot video-level                            accessors generate)
  (slot last-received-heartbeat initialize #f  accessors generate)
  (slot throttle-media?         initialize #f  accessors generate)
  (slot waiting-for-keyframe                   accessors generate)
  (slot resending-nacks         initialize '() accessors generate)
  (slot profile-base-time       initialize #f  getter generate)
  (slot profile-time-base       initialize #f  getter generate)
  (slot profile-media-sequence  initialize #f  getter generate)
  (slot profile-last-sequence   initialize #f  getter generate)
  (slot profile-monitor         initialize #f  getter generate)
  (slot profile-chronology      initialize #f  getter generate)
  (slot profile-evolution       initialize #f  getter generate)
  
  
  (method override (initialize self host port video-level)
    (nextmethod self)
    (set! self.host host)
    (set! self.port port)
    (set! self.monitor (new UDP-Monitor))
    (set! self.video-level video-level)
    (set! self.waiting-for-keyframe (make-table test: eq?))
    (set! self.profile-time-base (new Time-Base)))
  
  
  (method override (print self output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{a} {a}" host port))))
  
  
  (method protected (update-host/port self host port)
    (set! self.host host)
    (set! self.port port))
  
  
  (method protected (waiting-keyframe? self channel)
    (table-ref waiting-for-keyframe channel #f))
  
  
  (method protected (wait-keyframe self channel)
    (when (= (get-media-kind channel) udp-video)
      (table-set! waiting-for-keyframe channel #t)))
  
  
  (method protected (got-keyframe self channel)
    (table-clear waiting-for-keyframe channel))
  
  
  (method protected (done-keyframe self channel)
    (table-clear waiting-for-keyframe channel))
  
  
  (method protected (increase-sent self data)
    (increase-sent monitor data))
  
  
  (method protected (increase-received self data)
    (increase-received monitor data))
  
  
  (method protected (add-resending-nacks self info)
    (set! resending-nacks (cons info resending-nacks)))
  
  
  (method package (next-profile-media-sequence! self)
    (prog1 profile-media-sequence
      (increase! profile-media-sequence)))
  
  
  (method package (profile-start self)
    (set! profile-base-time (current-seconds))
    (set! profile-media-sequence 0)
    (set! profile-last-sequence #f)
    (set! profile-monitor (new UDP-Monitor))
    (set! profile-chronology (new Chronology 0))
    (set! profile-evolution (new Evolution 5000)))
  
  
  (method package (profile-test self test arguments)
    (let ((send-thread
            (new-thread
              (lambda ()
                (let ((base (current-seconds))
                      (recuperate .5))
                  (define (wait target)
                    (sleep (- (+ base target) (current-seconds))))
                  
                  (let ((server (current-server)))
                    (let ((mbps (car arguments)))
                      (let ((size 1000)
                            (duration 1.))
                        (let ((delay (/ (cast <fl> size) (mbps->bytes mbps)))
                              (udp-server (get-udp-server server)))
                          (let ((iter (fxround (/ duration delay))))
                            (let ((elapse (/ duration (cast <fl> iter)))
                                  (data (make-u8vector size)))
                              (loop (for n from 0 below iter)
                                    (wait (* (cast <fl> n) elapse))
                                    (send-profile-media udp-server self (next-profile-media-sequence! self) data)
                                    (increase-sent profile-monitor data))))))))))
              'send)))
      (thread-base-priority-set! send-thread udp-priority)
      (thread-start! send-thread)))
  
  
  (method package (profile-retrieve self)
    (let ((metadata (list server-no "_server" '() '() (sites-metadata) profile-base-time))
          (chronology (copy-chronology profile-chronology))
          (evolution (copy-evolution profile-evolution)))
      (zlib-deflate (object->u8vector (list metadata chronology evolution) serialize))))
  
  
  (method package (profile-stop self)
    (set! profile-chronology #f)
    (set! profile-evolution #f))
  
  
  (method (receive-profile-pulse self data)
    (increase-received profile-monitor data))
  
  
  (method package (receive-profile-media self data)
    (with-record profile-media
      (let ((sender (read-header-sender data))
            (sequence (read-profile-media-sequence data)))
        (when record-events?
          (when profile-last-sequence
            (let ((expected-sequence (+ profile-last-sequence 1)))
              (when (/= sequence expected-sequence)
                (parameterize ((simulation-evolution profile-evolution))
                  (loop (for seq from expected-sequence below sequence)
                        (record-event udp-id-lost-packet
                                      -1.
                                      (fixnum->flonum sender)
                                      (fixnum->flonum udp-profile-media)
                                      (fixnum->flonum seq)
                                      -1.
                                      -1.
                                      -1.)))))))
        (set! profile-last-sequence sequence)
        (increase-received profile-monitor data)))))


;;;
;;;; Server Stream
;;;


(class UDP-Server-Stream extends UDP-Stream
  
  
  (slot recipient         getter generate)
  (slot exclude-register  getter generate)
  (slot exclude-broadcast getter generate)
  
  
  (method override (initialize self sender name no origin source-kind video-level recipient exclude-register exclude-broadcast)
    (nextmethod self sender name no origin source-kind video-level)
    (set! self.recipient recipient)
    (set! self.exclude-register exclude-register)
    (set! self.exclude-broadcast exclude-broadcast)))


;;;
;;;; Server Channel
;;;


(class UDP-Server-Channel extends UDP-Retain-Channel
  
  
  (slot server-sender? getter generate)
  (slot release-task   getter generate)
  
  
  (method override (initialize self stream-no no media-kind source-kind level resolution framerate bitrate codec caps metadata send-state server-sender?)
    (nextmethod self stream-no no media-kind source-kind level resolution framerate bitrate codec caps metadata send-state)
    (set! self.server-sender? server-sender?)
    (if server-sender?
        (begin
          (set! self.retain-ring #f)
          (set! self.release-task #f))
      (set! self.retain-ring (new UDP-Ring self no (get-origin stream) media-kind source-kind udp-retain-size max-size: udp-retain-max-size overflow-proc: (udp-ring-overflow 'retain udp-ring-kind-retain) retain-window: (effective-retain-window source-kind)))
      (unless (simulation?)
        (set! self.release-task (new Task 'udp-release (~ run-release self) priority: udp-priority))
        (start-task release-task))))
  
  
  (method override (destroy self)
    (unless server-sender?
      (terminate retain-ring)
      (thread-join! (get-thread release-task)))
    (nextmethod self))
  
  
  (method protected (retain-media self data)
    (insert retain-ring data udp-id-retain-packet))
  
  
  (method protected (run-release self task)
    (declare (proper-tail-calls))
    (with-task task
      (lambda (exit)
        (let (loop)
          (let ((packet (retain-wait retain-ring)))
            (if (eq? packet 'terminate)
                (continuation-return exit #f)
              (site udp-release
                (release-media self packet))
              (loop)))))))
  
  
  (method protected (release-media self packet)
    (when record-events?
      (let ((data (get-data packet))
            (origin (get-origin stream)))
        (if (not data)
            (let ((removed-sequence (get-sequence packet)))
              (record-event udp-id-giveup-packet
                            (fixnum->flonum no)
                            (fixnum->flonum origin)
                            (fixnum->flonum media-kind)
                            (fixnum->flonum removed-sequence)
                            -1.
                            -1.
                            -1.))
          (with-record media
            (let ((sequence (read-media-sequence data))
                  (frame (read-media-frame data))
                  (dts (read-media-dts data))
                  (pts (read-media-pts data)))
              (record-event udp-id-release-packet
                            (fixnum->flonum no)
                            (fixnum->flonum origin)
                            (fixnum->flonum media-kind)
                            (fixnum->flonum sequence)
                            (fixnum->flonum frame)
                            -1.
                            (timestamp->flonum dts))))))))))
