;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; Server UDP
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;    Barbara Samson


(module world.server.udp jazz


(import (jazz.event)
        (jazz.network)
        (jazz.presence)
        (jazz.stream)
        (jazz.syntax (phase syntax))
        (world)
        (world.configure)
        (world.context)
        (world.event)
        (world.ring)
        (world.server.group)
        (world.settings)
        (world.support)
        (world.task)
        (world.udp))


(class UDP-Server extends UDP-Tier
  
  
  (slot udp-port              initialize #f getter generate)
  (slot udp-stopping?         initialize #f getter generate)
  (slot origin-connections    initialize #f getter generate)
  (slot host/port-connections initialize #f getter generate)
  ;; mutex was not needed before server streaming...
  (slot server-mutex          initialize #f getter generate)
  (slot server-streams        initialize #f getter generate)
  (slot server-channels       initialize #f getter generate)
  (slot receive-task          initialize #f getter generate)
  
  
  (method override (initialize self)
    (nextmethod self)
    (set! server-streams (make-table))
    (set! server-channels (make-table)))
  
  
  (method package (start self host service)
    (unless (simulation?)
      (set! udp-port (open-udp (list
                                 local-address: host
                                 local-port-number: service)))
      (set! udp-stopping? #f)
      (set! origin-connections (make-table))
      (set! host/port-connections (make-table))
      (set! server-mutex (make-mutex 'server))
      (set! server-channels (make-table))
      (set! send-channels (make-table))
      (set! receive-task (new Task 'udp-receive (lambda (task)
                                                  (receive-loop self task))
                              priority: udp-priority))
      (start-task receive-task)))
  
  
  (method package (stop self)
    (set! udp-stopping? #t)
    (close-port udp-port)
    (thread-join! (get-thread receive-task))
    (set! udp-port #f)
    (set! receive-task #f))
  
  
  ;;;
  ;;;; Connection
  ;;;
  
  
  (method (register-connection self origin host port connection)
    (table-set! origin-connections origin connection)
    (table-set! host/port-connections (cons host port) connection))
  
  
  (method (unregister-connection self origin host port)
    (table-clear origin-connections origin)
    (table-clear host/port-connections (cons host port)))
  
  
  (method protected (origin->connection self origin)
    (table-ref origin-connections origin #f))
  
  
  (method protected (host/port->connection self host port)
    (table-ref host/port-connections (cons host port) #f))
  
  
  ;;;
  ;;;; Stream
  ;;;
  
  
  (method package (register-server-stream self sender name no origin source-kind video-level recipient exclude-stream exclude-broadcast)
    (let ((stream (new UDP-Server-Stream sender name no origin source-kind video-level recipient exclude-stream exclude-broadcast)))
      (table-set! server-streams no stream)
      stream))
  
  
  (method package (find-server-stream self stream-no)
    (table-ref server-streams stream-no #f))
  
  
  (method package (close-server-stream self stream)
    (iterate-table (get-channels stream)
      (lambda (no channel)
        (close-server-channel self channel)))
    (let ((stream-no (get-no stream)))
      (close stream)
      (table-clear server-streams stream-no)))
  
  
  (method package (close-send-stream self stream)
    (iterate-table (get-channels stream)
      (lambda (no channel)
        (close-send-channel self channel)))
    (let ((stream-no (get-no stream)))
      (close stream)
      (server-unregister-stream (current-server) stream-no)
      (table-clear send-streams stream-no)))
  
  
  ;;;
  ;;;; Channel
  ;;;
  
  
  (method package (find-server-channel self channel-no)
    (table-ref server-channels channel-no #f))
  
  
  (method package (register-server-channel self stream-no channel-no origin media-kind source-kind level resolution framerate bitrate codec caps server-sender?)
    (let ((stream (find-server-stream self stream-no)))
      (let ((channel (new UDP-Server-Channel stream channel-no origin media-kind source-kind level resolution framerate bitrate codec caps server-sender?)))
        (table-set! server-channels channel-no channel)
        channel)))
  
  
  (method package (close-server-channel self channel)
    (let ((channel-no (get-no channel)))
      (close channel)
      (table-clear server-channels channel-no)))
  
  
  (method package (register-send-channel self stream-no channel-no media-kind source-kind level resolution framerate bitrate codec caps)
    (let ((stream (find-send-stream self stream-no)))
      (let ((channel (new UDP-Send-Channel stream channel-no client-no media-kind source-kind level resolution framerate bitrate codec caps)))
        (table-set! send-channels channel-no channel)
        channel)))
  
  
  (method package (close-send-channel self channel)
    (let ((channel-no (get-no channel)))
      (close channel)
      (table-clear send-channels channel-no)))
  
  
  ;;;
  ;;;; Send
  ;;;
  
  
  (method package (send-media self channel-no buffer header? timestamp duration)
    (mutex-lock! server-mutex)
    (let ((channel (find-send-channel self channel-no)))
      (when channel
        (let ((origin (get-origin channel))
              (kind (get-media-kind channel)))
          (let ((server-channel (find-server-channel self channel-no)))
            (send-media channel buffer header? timestamp duration
              (lambda (data)
                (broadcast-media self server-channel origin kind data)))))))
    (mutex-unlock! server-mutex))
  
  
  ;;;
  ;;;; Receive
  ;;;
  
  
  (method (receive-loop self task)
    (declare (proper-tail-calls))
    (with-task task
      (lambda (exit)
        (let (loop)
          (let ((data (with-exception-filter
                        (lambda (exc)
                          udp-stopping?)
                        (lambda (exc)
                          (continuation-return exit #f))
                        (lambda ()
                          (read udp-port)))))
            (when data
              (site (udp-receive on?: #t)
                (when udp-record-read/write?
                  (let ((channel (read-udp-channel data))
                        (origin (read-udp-origin data))
                        (media-kind (read-udp-kind data))
                        (sequence (read-udp-sequence data))
                        (frame (read-udp-frame data)))
                    (record-event udp-id-read-data
                                  (fixnum->flonum channel)
                                  (fixnum->flonum origin)
                                  (fixnum->flonum media-kind)
                                  (fixnum->flonum sequence)
                                  (fixnum->flonum frame)
                                  -1.
                                  (fixnum->flonum (u8vector-length data)))))
                (receive-data self data))
              (loop)))))))
  
  
  (method (receive-data self data)
    (mutex-lock! server-mutex)
    (let ((origin (read-udp-origin data)))
      (let ((connection (origin->connection self origin)))
        (when connection
          (increase-received connection data))))
    (let ((kind (read-udp-kind data)))
      (ecase kind
        ((udp-connect)
         (connect-source self data))
        ((udp-state)
         (receive-state self data))
        ((udp-nack)
         (receive-nack self data))
        ((udp-audio udp-video)
         (receive-media self kind data))
        (else
         (error "Unknown UDP kind: {s}" kind))))
    (mutex-unlock! server-mutex))
  
  
  (method (connect-source self data)
    (let ((sent (read-udp-sent data))
          (origin (read-udp-origin data))
          (local-host (read-udp-connect-local-host data))
          (local-port (read-udp-connect-local-port data))
          (latency (read-udp-connect-latency data))
          (lag (read-udp-connect-lag data))
          (drop (read-udp-connect-drop data))
          (video-level (read-udp-connect-video-level data))
          (source-info (udp-source-socket-info udp-port)))
      (define (udp-simulator)
        (let ((latency (and (/= latency -1.) latency))
              (lag (and (/= lag -1.) lag))
              (drop (and (/= drop -1.) drop)))
          (if (or latency lag drop)
              (new UDP-Simulator latency lag drop
                   (lambda (info drop?)
                     (bind (connection . data) info
                       (if drop?
                           (increase-sent connection data)
                         (send-connection self connection data)))))
            #f)))
      
      (let ((source-host (socket-info-address source-info))
            (source-port (socket-info-port-number source-info)))
        (define (send-connected connection)
          (udp-destination-set! source-host source-port udp-port)
          (let ((size (+ 8 4 4)))
            (let ((data (make-u8vector size)))
              (write-udp-sent data sent)
              (write-udp-kind data udp-connected)
              (write-udp-origin data origin)
              (retrying-write data udp-port)
              (increase-sent connection data))))
        
        (let ((existing-connection (origin->connection self origin)))
          (if existing-connection
              (send-connected existing-connection)
            (let ((video-level (and (/= video-level -1) video-level)))
              (let ((connection (new UDP-Connection source-host source-port local-host local-port (udp-simulator) video-level)))
                (register-connection self origin source-host source-port connection)
                (send-connected connection))))))))
  
  
  (method package (unconnect-source self origin)
    (let ((connection (origin->connection self origin)))
      (when connection
        (let ((host (get-host connection))
              (port (get-port connection)))
          (unregister-connection self origin host port)))))
  
  
  (method package (stream-video-channel? self stream-level channel-level video-level)
    (or (not stream-level)
        (= channel-level (min video-level stream-level))))
  
  
  (method package (stream-to-connection? self channel connection)
    (or (= (get-media-kind channel) udp-audio)
        (let ((stream-level (get-video-level (get-stream channel)))
              (channel-level (get-level channel))
              (video-level (get-video-level connection)))
          (stream-video-channel? self stream-level channel-level video-level))))
  
  
  (method package (stream-to-group? self channel group)
    (some? (lambda (delegate)
             (let ((no (get-no delegate)))
               (let ((connection (table-ref origin-connections no #f)))
                 (stream-to-connection? self channel connection))))
           (get-members group)))
   
  
  (method package (update-streaming self group)
    (for-each (lambda (server-stream)
                (let ((stream (find-send-stream self (get-no server-stream))))
                  (when stream
                    (iterate-table (get-channels stream)
                      (lambda (no channel)
                        (let ((src (get-src (get-pipeline channel)))
                              (stream? (stream-to-group? self channel group)))
                          (set-stream? src stream?)))))))
              (get-streams group)))
  
  
  (method (receive-state self data)
    (let ((origin (read-udp-origin data)))
      ;; ack origin
      (send-ack self origin data)
      ;; throttling
      (let ((connection (origin->connection self origin)))
        (when connection
          (set-last-received-state connection (current-seconds))
          (when (get-throttle-media? connection)
            (set-throttle-media? connection #f)
            (record-event udp-id-throttle-off
                          -1.
                          (fixnum->flonum origin)
                          -1.
                          -1.
                          -1.
                          -1.
                          -1.)
            (when udp-show-throttle?
              (let ((delegate (find-delegate-by-no (current-server) origin)))
                (format :terminal "{s} {s} {a} {s}{%}" remote-name 'THROTTLE (if delegate (get-name delegate) origin) 'OFF))))))
      ;; reset
      (let ((states (u8vector->object (read-udp-state-channels data)))
            (really-needs-reset '()))
        (for-each (lambda (info)
                    (bind (channel-no client-state) info
                      (let ((channel (find-send-channel self channel-no)))
                        (when (and channel (eq? client-state 'waiting))
                          ;; quicky around video still sending waiting
                          (when (= (get-media-kind channel) udp-audio)
                            (set! really-needs-reset (cons channel really-needs-reset)))))))
                  states)
        (when (not-null? really-needs-reset)
          (delay-event
            (lambda ()
              (for-each reset-media really-needs-reset)))))
      ;; broadcast
      (broadcast-state self origin data)))
  
  
  (method (receive-nack self data)
    (let ((channel-no (read-udp-channel data))
          (origin (read-udp-origin data))
          (media-kind (read-udp-nack-media-kind data))
          (missing (u8vector->object (read-udp-nack-missing data))))
      (send-missing self channel-no origin media-kind missing)))
  
  
  (method (receive-media self kind data)
    (let ((channel-no (read-udp-channel data))
          (origin (read-udp-origin data)))
      (let ((channel (find-server-channel self channel-no)))
        (when channel
          (retain-media channel data)
          (broadcast-media self channel origin kind data)
          (let ((frame (read-udp-frame data))
                (last-nacked-frame (get-last-nacked-frame channel)))
            (when (or (not last-nacked-frame)
                      (> frame last-nacked-frame))
              (send-nacks self channel-no origin kind channel)
              (set-last-nacked-frame channel frame)))))))
  
  
  (method (send-nacks self channel-no origin kind channel)
    (let ((missing (collect-missing channel)))
      (unless (null? missing)
        (let ((source-info (udp-source-socket-info udp-port)))
          (let ((source-host (socket-info-address source-info))
                (source-port (socket-info-port-number source-info)))
            (let ((connection (host/port->connection self source-host source-port)))
              (send-nack self connection channel-no origin kind missing)))))))
  
  
  (method (send-missing self channel-no origin media-kind missing)
    (let ((ring (cond ((find-send-channel self channel-no) => get-retain-ring)
                      ((find-server-channel self channel-no) => get-retain-ring)
                      (else #f))))
      (when ring
        (for-each (lambda (sequence)
                    (let ((data (locate-data ring sequence)))
                      (if data
                          (let ((source-info (udp-source-socket-info udp-port)))
                            (let ((source-host (socket-info-address source-info))
                                  (source-port (socket-info-port-number source-info)))
                              (let ((connection (host/port->connection self source-host source-port)))
                                (when udp-show-nacks?
                                  (terminal remote-name (present-media-kind media-kind) '***nack-found-on-server*** sequence))
                                (increase-udp-resent data)
                                (send-data self connection data)
                                (let ((frame (read-udp-frame data)))
                                  (record-event udp-id-resend-packet
                                                (fixnum->flonum channel-no)
                                                (fixnum->flonum origin)
                                                (fixnum->flonum media-kind)
                                                (fixnum->flonum sequence)
                                                (fixnum->flonum frame)
                                                -1.
                                                -1.)))))
                        (record-event udp-id-absent-packet
                                      (fixnum->flonum channel-no)
                                      (fixnum->flonum origin)
                                      (fixnum->flonum media-kind)
                                      (fixnum->flonum sequence)
                                      -1.
                                      -1.
                                      -1.)
                        ;; we already nacked the source early and will broadcast
                        ;; when we receive the resent so we can ignore this nack
                        )))
                  missing))))
  
  
  (method (send-nack self connection channel-no origin media-kind missing)
    (when udp-show-nacks?
      (terminal remote-name (present-media-kind media-kind) '***send-nack*** missing))
    (let ((missing-vector (object->u8vector missing)))
      (let ((size (+ 8 4 4 4 4 (u8vector-length missing-vector))))
        (let ((data (make-u8vector size)))
          (write-udp-sent data (current-seconds))
          (write-udp-kind data udp-nack)
          (write-udp-origin data origin)
          (write-udp-channel data channel-no)
          (write-udp-nack-media-kind data media-kind)
          (write-udp-nack-missing data missing-vector)
          (send-data self connection data)))))
  
  
  (method (send-ack self origin data)
    (let ((connection (origin->connection self origin)))
      (when connection
        (let ((packets-sent (get-packets-sent connection))
              (bytes-sent (get-bytes-sent connection))
              (packets-received (get-packets-received connection))
              (bytes-received (get-bytes-received connection)))
          (let ((size (+ 8 4 4 4 4 4 4))
                (sent (read-udp-sent data)))
            (let ((data (make-u8vector size)))
              (write-udp-sent data sent)
              (write-udp-kind data udp-ack)
              (write-udp-origin data origin)
              (write-udp-ack-packets-sent data packets-sent)
              (write-udp-ack-bytes-sent data bytes-sent)
              (write-udp-ack-packets-received data packets-received)
              (write-udp-ack-bytes-received data bytes-received)
              (send-data self connection data)))))))
  
  
  (method (broadcast-state self origin data)
    (let ((delegate (find-delegate-by-no (current-server) origin)))
      (when delegate
        (let ((group (get-group delegate)))
          (when group
            (for-each (lambda (member)
                        (let ((no (get-no member)))
                          (let ((connection (table-ref origin-connections no #f)))
                            (when connection
                              (unless (eq? member delegate)
                                (send-data self connection data))))))
                      (get-members group)))))))
  
  
  (method (broadcast-media self channel origin kind data)
    (let ((server (current-server)))
      (let ((stream (get-stream channel)))
        (let ((recipients (stream-recipients server stream))
              (exclude-broadcast (get-exclude-broadcast stream))
              (stream-level (get-video-level stream))
              (channel-level (get-level channel)))
          (for-each (lambda (member)
                      (let ((no (get-no member)))
                        (let ((connection (table-ref origin-connections no #f)))
                          (when connection
                            (unless (eq? member exclude-broadcast)
                              (let ((video-level (get-video-level connection)))
                                (unless (and (= kind udp-video)
                                             (not (stream-video-channel? self stream-level channel-level video-level)))
                                  (let ((last-received-state (get-last-received-state connection)))
                                    (when last-received-state
                                      (unless (get-throttle-media? connection)
                                        (if (waiting-header? connection channel)
                                            (if (not (read-udp-media-header? data))
                                                (when udp-show-skipping?
                                                  (format :terminal "{s} {s} {s}{%}" remote-name 'SKIPPING (read-udp-frame data)))
                                              (got-header connection channel)
                                              (send-data self connection data))
                                          (let ((now (current-seconds)))
                                            (if (and udp-throttle (> (- now last-received-state) udp-throttle))
                                                (begin
                                                  (set-throttle-media? connection #t)
                                                  (wait-headers self member connection)
                                                  (record-event udp-id-throttle-on
                                                                (fixnum->flonum (get-no channel))
                                                                (fixnum->flonum no)
                                                                -1.
                                                                -1.
                                                                -1.
                                                                -1.
                                                                -1.)
                                                  (when udp-show-throttle?
                                                    (format :terminal "{s} {s} {a} {s}{%}" remote-name 'THROTTLE (get-name member) 'ON)))
                                              (send-data self connection data))))))))))))))
                    recipients)))))
  
  
  (method protected (wait-headers self delegate connection)
    (let ((server (current-server)))
      (iterate-table server-channels
        (lambda (no channel)
          (when (memq? delegate (stream-recipients server (get-stream channel)))
            (wait-header connection channel))))))
  
  
  (method protected (done-headers self delegate connection)
    (let ((server (current-server)))
      (iterate-table server-channels
        (lambda (no channel)
          (when (memq? delegate (stream-recipients server (get-stream channel)))
            (done-header connection channel))))))
  
  
  (method (send-data self connection data)
    (let ((simulator (get-simulator connection)))
      (if simulator
          (send simulator (cons connection data))
        (send-connection self connection data))))
  
  
  (method (send-connection self connection data)
    (udp-destination-set! (get-host connection) (get-port connection) udp-port)
    (retrying-write data udp-port)
    (increase-sent connection data)))


;;;
;;;; UDP Connection
;;;


(class UDP-Connection extends Object
  
  
  (slot host                              getter generate)
  (slot port                              getter generate)
  (slot local-host                        getter generate)
  (slot local-port                        getter generate)
  (slot simulator                         getter generate)
  (slot video-level                       getter generate)
  (slot packets-sent        initialize 0  getter generate)
  (slot bytes-sent          initialize 0  getter generate)
  (slot packets-received    initialize 0  getter generate)
  (slot bytes-received      initialize 0  getter generate)
  (slot last-received-state initialize #f accessors generate)
  (slot throttle-media?     initialize #f accessors generate)
  (slot waiting-for-header                accessors generate)
  
  
  (method override (initialize self host port local-host local-port simulator video-level)
    (nextmethod self)
    (set! self.host host)
    (set! self.port port)
    (set! self.local-host local-host)
    (set! self.local-port local-port)
    (set! self.simulator simulator)
    (set! self.video-level video-level)
    (set! self.waiting-for-header (make-table test: eq?)))
  
  
  (method override (print self output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{a} {a}" host port))))
  
  
  (method protected (waiting-header? self channel)
    (table-ref waiting-for-header channel #f))
  
  
  (method protected (wait-header self channel)
    (when (= (get-media-kind channel) udp-video)
      (table-set! waiting-for-header channel #t)))
  
  
  (method protected (got-header self channel)
    (table-clear waiting-for-header channel))
  
  
  (method protected (done-header self channel)
    (table-clear waiting-for-header channel))
  
  
  (method protected (increase-sent self data)
    (increase! packets-sent)
    (increase! bytes-sent (u8vector-length data)))
  
  
  (method protected (increase-received self data)
    (increase! packets-received)
    (increase! bytes-received (u8vector-length data))))


;;;
;;;; Server Stream
;;;


(class UDP-Server-Stream extends UDP-Stream
  
  
  (slot recipient         getter generate)
  (slot exclude-stream    getter generate)
  (slot exclude-broadcast getter generate)
  
  
  (method override (initialize self sender name no origin source-kind video-level recipient exclude-stream exclude-broadcast)
    (nextmethod self sender name no origin source-kind video-level)
    (set! self.recipient recipient)
    (set! self.exclude-stream exclude-stream)
    (set! self.exclude-broadcast exclude-broadcast)))


;;;
;;;; Server Channel
;;;


(class UDP-Server-Channel extends UDP-Channel
  
  
  (slot server-sender?    getter generate)
  (slot last-nacked-frame accessors generate)
  (slot retain-ring       getter generate)
  (slot release-task      getter generate)
  
  
  (method override (initialize self stream-no no origin media-kind source-kind level resolution framerate bitrate codec caps server-sender?)
    (nextmethod self stream-no no origin media-kind source-kind level resolution framerate bitrate codec caps)
    (set! self.last-nacked-frame #f)
    (if server-sender?
        (set! self.retain-ring #f)
      (set! self.retain-ring (new UDP-Ring self no origin media-kind udp-retain-size max-size: udp-retain-max-size overflow-proc: (udp-ring-overflow 'retain udp-ring-kind-retain)))
      (unless (simulation?)
        (set! self.release-task (new Task 'udp-release (lambda (task)
                                                         (release-loop self task))
                                     priority: udp-priority))
        (start-task release-task))))
  
  
  (method override (destroy self)
    (unless server-sender?
      (terminate retain-ring)
      (thread-join! (get-thread release-task)))
    (nextmethod self))
  
  
  (method protected (collect-missing self)
    (let ((missing (new-queue)))
      (iterate-latest retain-ring
        (lambda (packet)
          (when (not (get-data packet))
            (enqueue missing (get-sequence packet)))))
      (queue-list missing)))
  
  
  (method protected (retain-media self data)
    (insert retain-ring data udp-id-retain-packet))
  
  
  (method protected (release-loop self task)
    (declare (proper-tail-calls))
    (with-task task
      (lambda (exit)
        (let (loop)
          (let ((packet (retain-wait retain-ring)))
            (if (eq? packet 'terminate)
                (continuation-return exit #f)
              (site (udp-release on?: #t)
                (release-media self packet))
              (loop)))))))
  
  
  (method protected (release-media self packet)
    (let ((data (get-data packet)))
      (if (not data)
          (let ((removed-sequence (get-sequence packet)))
            (record-event udp-id-giveup-packet
                          (fixnum->flonum no)
                          (fixnum->flonum origin)
                          (fixnum->flonum media-kind)
                          (fixnum->flonum removed-sequence)
                          -1.
                          -1.
                          -1.))
        (let ((origin (read-udp-origin data))
              (sequence (read-udp-sequence data))
              (frame (read-udp-frame data))
              (timestamp (read-udp-media-timestamp data)))
          (record-event udp-id-release-packet
                        (fixnum->flonum no)
                        (fixnum->flonum origin)
                        (fixnum->flonum media-kind)
                        (fixnum->flonum sequence)
                        (fixnum->flonum frame)
                        -1.
                        (timestamp->flonum timestamp))))))))
