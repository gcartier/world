;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; Server UDP
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;    Barbara Samson


(module world.server.udp jazz


(import (jazz.network)
        (jazz.presence)
        (world)
        (world.context)
        (world.settings)
        (world.support)
        (world.udp))


(definition udp-debug?
  (world-setting 'world.udp-debug? #f))


(class UDP-Server extends Object
  
  
  (slot udp-port         initialize #f getter generate)
  (slot udp-thread       initialize #f getter generate)
  (slot connections      initialize #f getter generate)
  (slot stopping?        initialize #f getter generate)
  (slot send-channels    initialize #f getter generate)
  (slot receive-channels initialize #f getter generate)
  
  
  (method (start self host service)
    (when udp-debug?
      (terminal remote-name 'listen host service))
    (set! udp-port (open-udp (list
                               local-address: host
                               local-port-number: service)))
    (set! udp-thread (new-thread
                       (lambda ()
                         (process self))
                       'udp))
    (set! connections '())
    (set! stopping? #f)
    (set! send-channels (make-table))
    (set! receive-channels (make-table))
    (thread-start! udp-thread))
  
  
  (method (stop self)
    (set! stopping? #t)
    (close-port udp-port)
    (thread-join! udp-thread)
    (set! udp-port #f)
    (set! udp-thread #f))
  
  
  ;;;
  ;;;; Channel
  ;;;
  
  
  (method (require-send-channel self kind origin)
    (let ((key (cons kind origin)))
      (or (table-ref send-channels key #f)
          (let ((channel (new UDP-Send-Channel kind origin)))
            (table-set! send-channels key channel)
            channel))))
  
  
  (method (require-receive-channel self kind origin)
    (let ((key (cons kind origin)))
      (or (table-ref receive-channels key #f)
          (let ((channel (new UDP-Receive-Channel kind origin)))
            (table-set! receive-channels key channel)
            channel))))
  
  
  ;;;
  ;;;; Receive
  ;;;
  
  
  (method (process self)
    (declare (proper-tail-calls))
    (let (loop)
      (let ((data (with-exception-filter
                    (lambda (exc)
                      stopping?)
                    (lambda (exc)
                      #f)
                    (lambda ()
                      (read udp-port)))))
        (when data
          (receive-data self data)
          (loop)))))
  
  
  (method (receive-data self data)
    (let ((kind (read-udp-kind data)))
      (ecase kind
        ((udp-connect)
         (connect-source self))
        ((udp-nack)
         (receive-nack self kind data))
        ((udp-audio udp-video)
         (receive-media self kind data))
        (else
         (error "Unknown UDP kind: {s}" kind)))))
  
  
  (method (connect-source self)
    (let ((source-info (udp-source-socket-info udp-port)))
      (let ((source-host (socket-info-address source-info))
            (source-port (socket-info-port-number source-info)))
        (when udp-debug?
          (terminal remote-name 'connect source-host source-port))
        (let ((connection (new UDP-Connection source-host source-port)))
          (set! connections (cons connection connections))))))
  
  
  ;; at the moment centro will return a network is unreachable
  ;; or down error after about 10mn and then every minute or so
  (method (retrying-write self data port)
    (declare (proper-tail-calls))
    (let (loop (n 0))
      (with-exception-filter
        (lambda (exc)
          (< n 100))
        (lambda (exc)
          (sleep .01)
          (loop (+ n 1)))
        (lambda ()
          (write data port)))))
  
  
  (method (receive-nack self kind data)
    (let ((media-kind (read-udp-nack-kind data))
          (origin (read-udp-origin data))
          (sequence (read-udp-sequence data)))
      ;; we already nacked the source and will broacast
      ;; when we receive the resent so ignore this nack
      (unless (member? sequence (get-nack-sequences (require-receive-channel self media-kind origin)))
        (let ((channel (require-send-channel self media-kind origin)))
          (let ((ring (get-retain-ring channel)))
            (let ((found (locate ring (lambda (data)
                                        (= (read-udp-sequence data) sequence)))))
              (if found
                  (let ((source-info (udp-source-socket-info udp-port)))
                    (let ((source-host (socket-info-address source-info))
                          (source-port (socket-info-port-number source-info)))
                      (udp-destination-set! source-host source-port udp-port)
                      (when udp-debug-nack?
                        (terminal remote-name (udp-name media-kind) '***nack-found-on-server*** sequence))
                      (retrying-write self found udp-port)))
                (broadcast-data self media-kind data))))))))
  
  
  (method (receive-media self kind data)
    (let ((origin (read-udp-origin data))
          (sequence (read-udp-sequence data)))
      (let ((channel (require-receive-channel self kind origin)))
        (unless (member? sequence (get-nack-sequences channel))
          (let ((last-sequence (get-receive-last-sequence channel)))
            (when last-sequence
              (let ((expected (+ last-sequence 1)))
                (when (> sequence expected)
                  (let ((source-info (udp-source-socket-info udp-port)))
                    (let ((source-host (socket-info-address source-info))
                          (source-port (socket-info-port-number source-info)))
                      (udp-destination-set! source-host source-port udp-port)
                      (loop (for seq from expected below sequence)
                            (send-nack self origin seq kind)
                            (set-nack-sequences channel (cons seq (get-nack-sequences channel))))))))))
          (set-receive-last-sequence channel sequence))
        (when (and udp-debug-nack? (member? sequence (get-nack-sequences channel)))
          (terminal remote-name (udp-name kind) '***resent-received-early*** sequence))
        (broadcast-media self kind data))))
  
  
  (method (send-nack self origin sequence media-kind)
    (when udp-debug-nack?
      (terminal remote-name (udp-name media-kind) 'send-nack sequence))
    (let ((size (+ 4 4 4 4)))
      (let ((data (make-u8vector size)))
        (write-udp-kind data udp-nack)
        (write-udp-origin data origin)
        (write-udp-sequence data sequence)
        (write-udp-nack-kind data media-kind)
        (retrying-write self data udp-port))))
  
  
  (method (broadcast-media self kind data)
    (let ((origin (read-udp-origin data)))
      (let ((channel (require-send-channel self kind origin)))
        (retain channel data)
        (broadcast-data self kind data))))
  
  
  (method (broadcast-data self kind data)
    (let ((source-info (udp-source-socket-info udp-port)))
      (let ((source-host (socket-info-address source-info))
            (source-port (socket-info-port-number source-info)))
        (when udp-debug?
          (terminal remote-name 'broadcast source-host source-port (udp-name kind) (u8vector-length data)))
        (for-each (lambda (connection)
                    (let ((host (get-host connection))
                          (port (get-port connection)))
                      (when (or (not (host=? host source-host))
                                (not (service=? port source-port))
                                (or audio-self? video-self?)
                                @wait-channel-in-chunk (and (= kind udp-audio) audio-self?)
                                @wait-channel-in-chunk (and (= kind udp-video) video-self?))
                        (udp-destination-set! host port udp-port)
                        (when (or (not udp-drop-percentage)
                                  (> (random-real) (/ udp-drop-percentage 100.)))
                          (retrying-write self data udp-port)))))
                  connections)))))


;;;
;;;; UDP Connection
;;;


(class UDP-Connection extends Object
  
  
  (slot host getter generate)
  (slot port getter generate)
  
  
  (method override (initialize self host port)
    (nextmethod self)
    (set! self.host host)
    (set! self.port port))
  
  
  (method override (print self output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{a} {a}" host port))))))
