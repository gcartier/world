;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; Server UDP
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;    Barbara Samson


(module world.server.udp jazz


(import (jazz.network)
        (jazz.presence)
        (jazz.syntax (phase syntax))
        (world)
        (world.configure)
        (world.ring)
        (world.settings)
        (world.support)
        (world.task)
        (world.udp))


(definition udp-debug?
  (world-setting 'world.udp-debug? #f))


(class UDP-Server extends Object
  
  
  (slot udp-port         initialize #f getter generate)
  (slot udp-task         initialize #f getter generate)
  (slot udp-stopping?    initialize #f getter generate)
  (slot connections      initialize #f getter generate)
  (slot send-channels    initialize #f getter generate)
  (slot receive-channels initialize #f getter generate)
  
  
  (method (start self host service)
    (when udp-debug?
      (terminal remote-name 'listen host service))
    (set! udp-port (open-udp (list
                               local-address: host
                               local-port-number: service)))
    (set! udp-task (new Task 'udp-receive (lambda (task)
                                            (receive-loop self task))
                        priority: udp-priority))
    (set! udp-stopping? #f)
    (set! connections (make-table))
    (set! send-channels (make-table))
    (set! receive-channels (make-table))
    (start-task udp-task))
  
  
  (method (stop self)
    (set! udp-stopping? #t)
    (close-port udp-port)
    (thread-join! (get-thread udp-task))
    (set! udp-port #f)
    (set! udp-task #f))
  
  
  ;;;
  ;;;; Connection
  ;;;
  
  
  (method (register-connection self origin connection)
    (table-set! connections origin connection))
  
  (method (unregister-connection self origin)
    (table-clear connections origin))
  
  
  (method (find-connection self origin)
    (table-ref connections origin #f))
  
  
  ;;;
  ;;;; Channel
  ;;;
  
  
  (method (require-send-channel self origin media-kind)
    (let ((key (cons origin media-kind)))
      (or (table-ref send-channels key #f)
          (let ((channel (new UDP-Server-Send-Channel origin media-kind)))
            (table-set! send-channels key channel)
            channel))))
  
  
  (method (require-receive-channel self origin media-kind)
    (let ((key (cons origin media-kind)))
      (or (table-ref receive-channels key #f)
          (let ((channel (new UDP-Server-Receive-Channel origin media-kind)))
            (table-set! receive-channels key channel)
            channel))))
  
  
  ;;;
  ;;;; Receive
  ;;;
  
  
  (method (receive-loop self task)
    (declare (proper-tail-calls))
    (with-task task
      (lambda (exit)
        (let (loop)
          (let ((data (with-exception-filter
                        (lambda (exc)
                          udp-stopping?)
                        (lambda (exc)
                          (continuation-return exit #f))
                        (lambda ()
                          (read udp-port)))))
            (when data
              (site (udp-receive on?: #t)
                (receive-data self data))
              (loop)))))))
  
  
  (method (receive-data self data)
    (let ((kind (read-udp-kind data)))
      (ecase kind
        ((udp-connect)
         (connect-source self data))
        ((udp-ack)
         (receive-ack self data))
        ((udp-nack)
         (receive-nack self data))
        ((udp-audio udp-video)
         (receive-media self kind data))
        (else
         (error "Unknown UDP kind: {s}" kind)))))
  
  
  (method (connect-source self data)
    (let ((sent (read-udp-sent data))
          (origin (read-udp-origin data))
          (latency (read-udp-latency data))
          (lag (read-udp-lag data))
          (drop (read-udp-drop data))
          (source-info (udp-source-socket-info udp-port)))
      (define (simulator)
        (let ((latency (and (/= latency -1.) latency))
              (lag (and (/= lag -1.) lag))
              (drop (and (/= drop -1.) drop)))
          (if (or latency lag drop)
              (new UDP-Simulator latency lag drop
                   (lambda (data)
                     (retrying-write self data udp-port)))
            #f)))
      
      (let ((source-host (socket-info-address source-info))
            (source-port (socket-info-port-number source-info)))
        (when udp-debug?
          (terminal remote-name 'connect source-host source-port))
        (let ((connection (new UDP-Connection source-host source-port (simulator))))
          (register-connection self origin connection))
        (udp-destination-set! source-host source-port udp-port)
        (let ((size (+ 8 4)))
          (let ((data (make-u8vector size)))
            (write-udp-sent data sent)
            (write-udp-kind data udp-connected)
            (write data udp-port))))))
  
  
  ;; at the moment centro will return a network is unreachable
  ;; or down error after about 10mn and then every minute or so
  (method (retrying-write self data port)
    (declare (proper-tail-calls))
    (let (loop (n 0))
      (with-exception-filter
        (lambda (exc)
          (< n 100))
        (lambda (exc)
          (sleep .01)
          (loop (+ n 1)))
        (lambda ()
          (write data port)))))
  
  
  (method (receive-ack self data)
    (let ((origin (read-udp-origin data))
          (media-kind (read-udp-media-kind data))
          (sequence (read-udp-sequence data)))
      (let ((connection (find-connection self origin)))
        (when connection
          (relay-ack self connection data)))))
  
  
  (method (relay-ack self connection data)
    (let ((host (get-host connection))
          (port (get-port connection)))
      (udp-destination-set! host port udp-port)
      (retrying-write self data udp-port)))
  
  
  (method (receive-nack self data)
    (let ((origin (read-udp-origin data))
          (media-kind (read-udp-media-kind data))
          (sequence (read-udp-sequence data)))
      ;; we already nacked the source and will broacast
      ;; when we receive the resent so ignore this nack
      (unless (member? sequence (get-nack-sequences (require-receive-channel self origin media-kind)))
        (let ((channel (require-send-channel self origin media-kind)))
          (let ((ring (get-retain-ring channel)))
            (let ((found (locate ring (lambda (data)
                                        (= (read-udp-sequence data) sequence)))))
              (if found
                  (let ((source-info (udp-source-socket-info udp-port)))
                    (let ((source-host (socket-info-address source-info))
                          (source-port (socket-info-port-number source-info)))
                      (udp-destination-set! source-host source-port udp-port)
                      (when udp-debug-nack?
                        (terminal remote-name (udp-name media-kind) '***nack-found-on-server*** sequence))
                      (retrying-write self found udp-port)))
                (broadcast-data self media-kind data))))))))
  
  
  (method (receive-media self kind data)
    (let ((origin (read-udp-origin data))
          (sequence (read-udp-sequence data)))
      (let ((channel (require-receive-channel self origin kind)))
        (unless (member? sequence (get-nack-sequences channel))
          (let ((last-sequence (get-last-sequence channel)))
            (when last-sequence
              (let ((expected (+ last-sequence 1)))
                (when (> sequence expected)
                  (let ((source-info (udp-source-socket-info udp-port)))
                    (let ((source-host (socket-info-address source-info))
                          (source-port (socket-info-port-number source-info)))
                      (udp-destination-set! source-host source-port udp-port)
                      (loop (for seq from expected below sequence)
                            (send-nack self origin seq kind)
                            (set-nack-sequences channel (cons seq (get-nack-sequences channel))))))))))
          (set-last-sequence channel sequence))
        (when (and udp-debug-nack? (member? sequence (get-nack-sequences channel)))
          (terminal remote-name (udp-name kind) '***resent-received-early*** sequence))
        (broadcast-media self kind data))))
  
  
  (method (send-nack self origin sequence media-kind)
    (when udp-debug-nack?
      (terminal remote-name (udp-name media-kind) 'send-nack sequence))
    (let ((size (+ 8 4 4 4 4)))
      (let ((data (make-u8vector size)))
        (write-udp-sent data (current-seconds))
        (write-udp-kind data udp-nack)
        (write-udp-origin data origin)
        (write-udp-sequence data sequence)
        (write-udp-media-kind data media-kind)
        (retrying-write self data udp-port))))
  
  
  (method (broadcast-media self kind data)
    (let ((origin (read-udp-origin data)))
      (let ((channel (require-send-channel self origin kind)))
        (retain channel data)
        (broadcast-data self kind data))))
  
  
  (method (broadcast-data self kind data)
    (let ((source-info (udp-source-socket-info udp-port)))
      (let ((source-host (socket-info-address source-info))
            (source-port (socket-info-port-number source-info)))
        (when udp-debug?
          (terminal remote-name 'broadcast source-host source-port (udp-name kind) (u8vector-length data)))
        (iterate-table connections
          (lambda (origin connection)
            (let ((host (get-host connection))
                  (port (get-port connection)))
              (when (or (not (host=? host source-host))
                        (not (service=? port source-port))
                        (or audio-self? video-self?)
                        @wait-channel-in-chunk (and (= kind udp-audio) audio-self?)
                        @wait-channel-in-chunk (and (= kind udp-video) video-self?))
                (udp-destination-set! host port udp-port)
                (when (or (not udp-drop)
                          (> (random-real) (/ udp-drop 100.)))
                  (retrying-write self data udp-port))))))))))


;;;
;;;; UDP Connection
;;;


(class UDP-Connection extends Object
  
  
  (slot host      getter generate)
  (slot port      getter generate)
  (slot simulator getter generate)
  
  
  (method override (initialize self host port simulator)
    (nextmethod self)
    (set! self.host host)
    (set! self.port port)
    (set! self.simulator simulator))
  
  
  (method override (print self output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{a} {a}" host port)))))


;;;
;;;; Simulator
;;;


(class UDP-Simulator extends Object
  
  
  (slot latency getter generate)
  (slot lag     getter generate)
  (slot drop    getter generate)
  (slot writer  getter generate)
  (slot ring    getter generate)
  (slot thread  getter generate)
  
  
  (method override (initialize self latency lag drop writer)
    (nextmethod self)
    (set! self.latency (or latency 0.))
    (set! self.lag (or lag 0.))
    (set! self.drop (or drop 0.))
    (set! self.writer writer)
    ;; make it really big until time ring is a real ring
    (set! self.ring (new Time-Ring 40096 @w 512 @max-size: +inf.0))
    (set! self.thread (new-thread
                        (lambda ()
                          (send-loop self))
                        'simulator))
    (thread-start! thread))
  
  
  (method protected (send self connection data)
    (insert ring (+ (current-seconds) latency) data))
  
  
  (method (send-loop self)
    (declare (proper-tail-calls))
    (let (loop)
      (let ((data (wait ring)))
        (writer data))
      (loop))))


;;;
;;;; Send Channel
;;;


(class UDP-Server-Send-Channel extends UDP-Send-Channel)


;;;
;;;; Receive Channel
;;;


(class UDP-Server-Receive-Channel extends UDP-Receive-Channel))
