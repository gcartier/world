;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; Server UDP
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;    Barbara Samson


(module world.server.udp jazz


(import (jazz.event)
        (jazz.network)
        (jazz.presence)
        (jazz.snapshot)
        (jazz.stream)
        (jazz.syntax (phase syntax))
        (jazz.zlib)
        (world)
        (world.chronology)
        (world.configure)
        (world.context)
        (world.event)
        (world.evolution)
        (world.profiling)
        (world.ring)
        (world.server.client)
        (world.server.group)
        (world.server.problem)
        (world.settings)
        (world.stream)
        (world.support)
        (world.task)
        (world.udp))


(class UDP-Server extends UDP-Tier
  
  
  (slot udp-port        initialize #f getter generate)
  (slot udp-stopping?   initialize #f getter generate)
  (slot no-connections  initialize #f getter generate)
  ;; mutex was not needed before server streaming...
  (slot server-mutex    initialize #f getter generate)
  (slot server-streams  initialize #f getter generate)
  (slot server-channels initialize #f getter generate)
  (slot receive-task    initialize #f getter generate)
  (slot invalid-packets initialize 0  getter generate)
  
  
  (method override (initialize self)
    (nextmethod self)
    (set! server-streams (make-table))
    (set! server-channels (make-table))
    (register-snapshot-callback (~ snapshot-server-streams self)))
  
  
  (method package (start self host service)
    (unless (simulation?)
      (set! udp-port (open-udp (list
                                 local-address: host
                                 local-port-number: service)))
      (setup-udp-port-buffers udp-port)
      (set! udp-stopping? #f)
      (set! no-connections (make-table))
      (set! server-mutex (make-mutex 'server))
      (set! server-channels (make-table))
      (set! send-channels (make-table))
      (set! receive-task (new Task 'udp-receive (lambda (task)
                                                  (receive-loop self task))
                              priority: udp-priority))
      (start-task receive-task)))
  
  
  (method package (stop self)
    (set! udp-stopping? #t)
    (close-port udp-port)
    (thread-join! (get-thread receive-task))
    (set! udp-port #f)
    (set! receive-task #f))
  
  
  (method (snapshot-server-streams self)
    (let ((info (map (lambda (stream)
                       (list (get-sender stream)
                             (get-name stream)
                             (get-source-kind stream)))
                     (table-values server-streams))))
      (add-snapshot-property 'live.udp-server info)))
  
  
  ;;;
  ;;;; Connection
  ;;;
  
  
  (method (register-connection self no connection)
    (table-set! no-connections no connection))
  
  
  (method (unregister-connection self no)
    (table-clear no-connections no))
  
  
  (method protected (no->connection self no)
    (table-ref no-connections no #f))
  
  
  ;;;
  ;;;; Stream
  ;;;
  
  
  (method package (register-server-stream self sender name no origin source-kind video-level recipient exclude-register exclude-broadcast)
    (let ((stream (new UDP-Server-Stream sender name no origin source-kind video-level recipient exclude-register exclude-broadcast)))
      (table-set! server-streams no stream)
      stream))
  
  
  (method package (find-server-stream self stream-no)
    (table-ref server-streams stream-no #f))
  
  
  (method package (close-server-stream self stream)
    (iterate-table (get-channels stream)
      (lambda (no channel)
        (close-server-channel self channel)))
    (let ((stream-no (get-no stream)))
      (close stream)
      (table-clear server-streams stream-no)))
  
  
  (method package (close-send-stream self stream)
    (iterate-table (get-channels stream)
      (lambda (no channel)
        (close-send-channel self channel)))
    (let ((stream-no (get-no stream)))
      (close stream)
      (server-unregister-stream (current-server) stream-no)
      (table-clear send-streams stream-no)))
  
  
  ;;;
  ;;;; Channel
  ;;;
  
  
  (method package (find-server-channel self channel-no)
    (table-ref server-channels channel-no #f))
  
  
  (method package (register-server-channel self stream-no channel-no media-kind source-kind level resolution framerate bitrate codec caps metadata server-sender?)
    (let ((stream (find-server-stream self stream-no)))
      (let ((channel (new UDP-Server-Channel stream channel-no media-kind source-kind level resolution framerate bitrate codec caps metadata server-sender?)))
        (table-set! server-channels channel-no channel)
        channel)))
  
  
  (method package (close-server-channel self channel)
    (let ((channel-no (get-no channel)))
      (close channel)
      (table-clear server-channels channel-no)))
  
  
  (method package (register-send-channel self stream-no channel-no media-kind source-kind level resolution framerate bitrate codec caps metadata)
    (let ((stream (find-send-stream self stream-no)))
      (let ((channel (new UDP-Send-Channel stream channel-no media-kind source-kind level resolution framerate bitrate codec caps metadata)))
        (table-set! send-channels channel-no channel)
        channel)))
  
  
  (method package (close-send-channel self channel)
    (let ((channel-no (get-no channel)))
      (close channel)
      (table-clear send-channels channel-no)))
  
  
  ;;;
  ;;;; Send
  ;;;
  
  
  (method package (send-media self channel-no buffer dts pts duration keyframe?)
    (mutex-lock! server-mutex)
    (let ((channel (find-send-channel self channel-no)))
      (when channel
        (let ((kind (get-media-kind channel)))
          (let ((server-channel (find-server-channel self channel-no)))
            (send-media channel buffer dts pts duration keyframe?
              (lambda (data)
                (broadcast-media self server-channel kind data)))))))
    (mutex-unlock! server-mutex))
  
  
  ;;;
  ;;;; Receive
  ;;;
  
  
  (method (receive-loop self task)
    (declare (proper-tail-calls))
    (with-task task
      (lambda (exit)
        (let (loop)
          (let ((data (catch-exception-filter
                        (lambda (exc)
                          udp-stopping?)
                        (lambda (exc)
                          (continuation-return exit #f))
                        (lambda ()
                          (read-data udp-port)))))
            (when data
              (site udp-receive
                (receive-data self data))
              (loop)))))))
  
  
  (method (receive-data self data)
    (if (< (u8vector-length data) 4)
        (begin
          (problem "Receiving data: Invalid packet: {a}" data)
          (increase! invalid-packets))
      (let ((code (read-udp-code data)))
        (if (/= code udp-code)
            (begin
              (problem "Receiving data: Invalid code: {a}" code)
              (increase! invalid-packets))
          (mutex-lock! server-mutex)
          (let ((sender (read-udp-sender data)))
            (let ((connection (no->connection self sender)))
              (when connection
                ;; experiment for a udp timeout hypothesis
                (let ((source-info (udp-source-socket-info udp-port)))
                  (let ((source-host (socket-info-address source-info))
                        (source-port (socket-info-port-number source-info)))
                    (unless (and (host=? source-host (get-host connection))
                                 (service=? source-port (get-port connection)))
                      (record-event udp-id-reconnect
                                    -1.
                                    (fixnum->flonum sender)
                                    -1.
                                    (fixnum->flonum (get-port connection))
                                    (fixnum->flonum source-port)
                                    -1.
                                    -1.)
                      (when udp-show-reconnect?
                        (format :terminal "{s} {s} {s} {s} {s}{%}" presence-name '***reconnect*** sender (get-port connection) source-port))
                      (update-host/port connection source-host source-port))))
                (increase-received connection data))))
          (let ((kind (read-udp-kind data)))
            (ecase kind
              ((udp-connect)
               (connect-source self data))
              ((udp-state)
               (receive-state self data))
              ((udp-nack)
               (receive-nack self data))
              ((udp-audio udp-video)
               (receive-media self kind data))
              ((udp-alive)
               (receive-alive self data))
              ((udp-profile-pulse)
               (receive-profile-pulse self data))
              ((udp-profile-media)
               (receive-profile-media self data))
              ((udp-upload-ping)
               (receive-upload-ping self data))
              (else
               (error "Unknown UDP kind: {s}" kind))))
          (mutex-unlock! server-mutex)))))
  
  
  (method (connect-source self data)
    (let ((sent (read-udp-sent data))
          (sender (read-udp-sender data))
          @peer2peer
          (local-host (read-udp-connect-local-host data))
          @peer2peer
          (local-port (read-udp-connect-local-port data))
          (video-level (read-udp-connect-video-level data))
          (source-info (udp-source-socket-info udp-port)))
      (define (udp-simulator)
        (cond-expand
          (devel (let ((latency udp-latency)
                       (drop udp-drop))
                   (if (or latency drop)
                       (new-simulator self latency drop)
                     #f)))
          (else #f)))
      
      (let ((source-host (socket-info-address source-info))
            (source-port (socket-info-port-number source-info)))
        (define (send-connected connection)
          (udp-destination-set! source-host source-port udp-port)
          (let ((size (udp-sender-header-size)))
            (let ((data (make-u8vector (+ size udp-code-size))))
              (write-udp-sent data sent)
              (write-udp-kind data udp-connected)
              (write-udp-sender data server-no)
              (write-udp-code data)
              (write-data data udp-port)
              (increase-sent connection data))))
        
        (let ((existing-connection (no->connection self sender)))
          (if existing-connection
              (begin
                (send-connected existing-connection)
                (let ((video-level (get-video-level existing-connection)))
                  (record-event udp-id-connect
                                -1.
                                (fixnum->flonum sender)
                                -1.
                                reconnect-marker
                                (if video-level (fixnum->flonum video-level) -1.)
                                -1.
                                -1.)))
            (let ((video-level (and (/= video-level -1) video-level)))
              (let ((connection (new UDP-Connection source-host source-port @peer2peer local-host @peer2peer local-port (udp-simulator) video-level)))
                (register-connection self sender connection)
                (send-connected connection)
                (record-event udp-id-connect
                              -1.
                              (fixnum->flonum sender)
                              -1.
                              -1.
                              (if video-level (fixnum->flonum video-level) -1.)
                              -1.
                              -1.))))))))
  
  
  (method package (deconnect-source self no)
    (let ((connection (no->connection self no)))
      (if (not connection)
          (record-event udp-id-deconnect
                        -1.
                        (fixnum->flonum no)
                        -1.
                        no-connection-marker
                        -1.
                        -1.
                        -1.)
        (unregister-connection self no)
        (record-event udp-id-deconnect
                      -1.
                      (fixnum->flonum no)
                      -1.
                      -1.
                      -1.
                      -1.
                      -1.))))
  
  
  (method package (new-simulator self latency drop)
    (new UDP-Simulator latency drop
         (lambda (data connection drop?)
           (if drop?
               (increase-sent connection data)
             (send-connection self connection data)))))
  
  
  (method package (require-simulator self connection)
    (or (get-simulator connection)
        (let ((sim (new-simulator self #f #f)))
          (set-simulator connection sim)
          sim)))
  
  
  (method package (stream-video-channel? self stream channel-level video-level)
    (if stream-compare?
        #t
      (or (not (get-video-level stream))
          (= channel-level (stream-video-level stream video-level)))))
  
  
  (method package (stream-to-connection? self channel connection)
    (or (= (get-media-kind channel) udp-audio)
        (let ((stream (get-stream channel))
              (channel-level (get-level channel))
              (video-level (get-video-level connection)))
          (stream-video-channel? self stream channel-level video-level))))
  
  
  (method package (stream-to-group? self channel group)
    (some? (lambda (delegate)
             (let ((no (get-no delegate)))
               (let ((connection (table-ref no-connections no #f)))
                 (stream-to-connection? self channel connection))))
           (get-members group)))
   
  
  (method package (update-streaming self group)
    (for-each (lambda (server-stream)
                (let ((stream (find-send-stream self (get-no server-stream))))
                  (when stream
                    (iterate-table (get-channels stream)
                      (lambda (no channel)
                        (let ((src (get-src (get-pipeline channel)))
                              (stream? (stream-to-group? self channel group)))
                          (set-stream? src stream?)))))))
              (get-streams group)))
  
  
  (method (receive-state self data)
    (let ((sender (read-udp-sender data)))
      ;; ack
      (send-ack self sender data)
      ;; throttling
      (let ((connection (no->connection self sender)))
        (when connection
          (set-last-received-state connection (current-seconds))
          (when (get-throttle-media? connection)
            (set-throttle-media? connection #f)
            (record-event udp-id-throttle-off
                          -1.
                          (fixnum->flonum sender)
                          -1.
                          (fixnum->flonum (read-udp-state-sequence data))
                          -1.
                          -1.
                          -1.)
            (when udp-show-throttle?
              (let ((delegate (find-delegate-by-no (current-server) sender)))
                (format :terminal "{s} {s} {a} {s}{%}" presence-name 'THROTTLE (if delegate (get-name delegate) sender) 'OFF))))))
      ;; reset
      (let ((states (u8vector->object (read-udp-state-channels data)))
            (really-needs-reset '()))
        (for-each (lambda (info)
                    (bind (channel-no client-state) info
                      (let ((channel (find-send-channel self channel-no)))
                        (when (and channel (eq? client-state 'waiting))
                          ;; quicky around video still sending waiting
                          (when (= (get-media-kind channel) udp-audio)
                            (set! really-needs-reset (cons channel really-needs-reset)))))))
                  states)
        (when (not-null? really-needs-reset)
          (delay-event
            (lambda ()
              (for-each reset-media really-needs-reset)))))
      ;; broadcast
      (broadcast-state self sender data)))
  
  
  (method (receive-nack self data)
    (let ((channel-no (read-udp-channel data))
          (sender (read-udp-sender data))
          (media-kind (read-udp-nack-media-kind data))
          (missing (u8vector->object (read-udp-nack-missing data))))
      (send-missing self sender channel-no media-kind missing)))
  
  
  (method (receive-media self kind data)
    (let ((channel-no (read-udp-channel data))
          (sender (read-udp-sender data)))
      (let ((channel (find-server-channel self channel-no)))
        (when channel
          (retain-media channel data)
          (broadcast-media self channel kind data)
          (let ((frame (read-udp-frame data))
                (last-nacked-frame (get-last-nacked-frame channel)))
            (when (or (not last-nacked-frame)
                      (> frame last-nacked-frame))
              (send-nacks self sender channel-no kind channel)
              (set-last-nacked-frame channel frame)))))))
  
  
  (method (send-nacks self sender channel-no kind channel)
    (let ((missing (collect-missing channel)))
      (unless (null? missing)
        (let ((connection (no->connection self sender)))
          (send-nack self connection channel-no kind missing)))))
  
  
  (method (send-missing self sender channel-no media-kind missing)
    (let ((ring (cond ((find-send-channel self channel-no) => get-retain-ring)
                      ((find-server-channel self channel-no) => get-retain-ring)
                      (else #f))))
      (when ring
        (for-each (lambda (sequence)
                    (let ((data (locate-data ring sequence)))
                      (if data
                          (let ((connection (no->connection self sender)))
                            (when udp-show-nacks?
                              (terminal presence-name (present-media-kind media-kind) '***nack-found-on-server*** sequence))
                            (increase-udp-resent data)
                            (send-data self connection data)
                            (let ((frame (read-udp-frame data)))
                              (record-event udp-id-resend-packet
                                            (fixnum->flonum channel-no)
                                            (fixnum->flonum sender)
                                            (fixnum->flonum media-kind)
                                            (fixnum->flonum sequence)
                                            (fixnum->flonum frame)
                                            -1.
                                            -1.)))
                        (record-event udp-id-absent-packet
                                      (fixnum->flonum channel-no)
                                      (fixnum->flonum sender)
                                      (fixnum->flonum media-kind)
                                      (fixnum->flonum sequence)
                                      -1.
                                      -1.
                                      -1.)
                        ;; we already nacked the source early and will broadcast
                        ;; when we receive the resent so we can ignore this nack
                        )))
                  missing))))
  
  
  (method (send-nack self connection channel-no media-kind missing)
    (when udp-show-nacks?
      (terminal presence-name (present-media-kind media-kind) '***send-nack*** missing))
    (let ((missing-vector (object->u8vector missing)))
      (let ((size (udp-nack-size missing-vector)))
        (let ((data (make-u8vector (+ size udp-code-size))))
          (write-udp-sent data (current-seconds))
          (write-udp-kind data udp-nack)
          (write-udp-sender data server-no)
          (write-udp-channel data channel-no)
          (write-udp-nack-media-kind data media-kind)
          (write-udp-nack-missing data missing-vector)
          (write-udp-code data)
          (send-data self connection data)))))
  
  
  (method (send-ack self sender data)
    (let ((connection (no->connection self sender)))
      (when connection
        (let ((monitor (get-monitor connection)))
          (let ((packets-sent (get-packets-sent monitor))
                (bytes-sent (get-bytes-sent monitor))
                (packets-received (get-packets-received monitor))
                (bytes-received (get-bytes-received monitor)))
            (let ((size (udp-ack-size))
                  (sent (read-udp-sent data))
                  (state-sequence (read-udp-state-sequence data)))
              (let ((data (make-u8vector (+ size udp-code-size))))
                (write-udp-sent data (current-seconds))
                (write-udp-kind data udp-ack)
                (write-udp-sender data sender)
                (write-udp-ack-state-sent data sent)
                (write-udp-ack-state-sequence data state-sequence)
                (write-udp-ack-packets-sent data packets-sent)
                (write-udp-ack-bytes-sent data bytes-sent)
                (write-udp-ack-packets-received data packets-received)
                (write-udp-ack-bytes-received data bytes-received)
                (write-udp-code data)
                (send-data self connection data))
              (record-event udp-id-send-ack
                            -1.
                            (fixnum->flonum sender)
                            -1.
                            (fixnum->flonum state-sequence)
                            -1.
                            -1.
                            -1.)))))))
  
  
  (method (broadcast-state self sender data)
    (let ((delegate (find-delegate-by-no (current-server) sender)))
      (when delegate
        (let ((group (get-group delegate)))
          (when group
            (for-each (lambda (member)
                        (let ((no (get-no member)))
                          (let ((connection (table-ref no-connections no #f)))
                            (when connection
                              (unless (eq? member delegate)
                                (send-data self connection data))))))
                      (get-members group)))))))
  
  
  (method (broadcast-media self channel kind data)
    (let ((server (current-server)))
      (let ((stream (get-stream channel)))
        (let ((recipients (stream-recipients server stream))
              (exclude-broadcast (get-exclude-broadcast stream))
              (channel-level (get-level channel)))
          (for-each (lambda (member)
                      (let ((no (get-no member)))
                        (let ((connection (table-ref no-connections no #f)))
                          (when connection
                            (unless (eq? member exclude-broadcast)
                              (unless (get-roaming? member)
                                (let ((video-level (get-video-level connection)))
                                  (unless (and (= kind udp-video)
                                               (not (stream-video-channel? self stream channel-level video-level)))
                                    (let ((last-received-state (get-last-received-state connection)))
                                      (when last-received-state
                                        (unless (get-throttle-media? connection)
                                          (if (waiting-keyframe? connection channel)
                                              (if (not (read-udp-media-keyframe? data))
                                                  (when udp-show-skipping?
                                                    (format :terminal "{s} {s} {s}{%}" presence-name 'SKIPPING (read-udp-frame data)))
                                                (got-keyframe connection channel)
                                                (send-data self connection data))
                                            (let ((now (current-seconds)))
                                              (if (and udp-throttle (> (- now last-received-state) udp-throttle))
                                                  (begin
                                                    (set-throttle-media? connection #t)
                                                    (wait-keyframes self member connection)
                                                    (record-event udp-id-throttle-on
                                                                  -1.
                                                                  (fixnum->flonum no)
                                                                  -1.
                                                                  -1.
                                                                  -1.
                                                                  -1.
                                                                  -1.)
                                                    (when udp-show-throttle?
                                                      (format :terminal "{s} {s} {a} {s}{%}" presence-name 'THROTTLE (get-name member) 'ON)))
                                                (send-data self connection data)))))))))))))))
                    recipients)))))
  
  
  (method protected (wait-keyframes self delegate connection)
    (let ((server (current-server)))
      (iterate-table server-channels
        (lambda (no channel)
          (when (memq? delegate (stream-recipients server (get-stream channel)))
            (wait-keyframe connection channel))))))
  
  
  (method protected (done-keyframes self delegate connection)
    (let ((server (current-server)))
      (iterate-table server-channels
        (lambda (no channel)
          (when (memq? delegate (stream-recipients server (get-stream channel)))
            (done-keyframe connection channel))))))
    
  
  (method (receive-alive self data)
    (let ((sender (read-udp-sender data)))
      (send-alive-ack self sender data)))
  
  
  (method (send-alive-ack self sender data)
    (let ((connection (no->connection self sender)))
      (when connection
        (let ((size (udp-sender-header-size)))
          (let ((data (make-u8vector (+ size udp-code-size))))
            (write-udp-sent data (current-seconds))
            (write-udp-kind data udp-alive-ack)
            (write-udp-sender data sender)
            (write-udp-code data)
            (send-data self connection data))))))

  
  (method package (send-profile-media self connection sequence payload)
    (mutex-lock! server-mutex)
    (let ((size (udp-profile-media-size payload)))
      (let ((data (make-u8vector (+ size udp-code-size))))
        (write-udp-sent data (current-seconds))
        (write-udp-kind data udp-profile-media)
        (write-udp-sender data server-no)
        (write-udp-sequence data sequence)
        (write-udp-profile-media-payload data payload)
        (write-udp-code data)
        (send-data self connection data)))
    (mutex-unlock! server-mutex))
  
  
  (method (receive-profile-pulse self data)
    (let ((sender (read-udp-sender data)))
      (let ((connection (no->connection self sender)))
        (when connection
          (receive-profile-pulse connection data)
          (send-data self connection data))))
    (when udp-show-profile?
      (format :terminal "{s} {s} {s}{%}" presence-name 'PROFILE 'PULSE)))
  
  
  (method (receive-profile-media self data)
    (let ((sender (read-udp-sender data)))
      (let ((connection (no->connection self sender)))
        (when connection
          (receive-profile-media connection data))))
    (when udp-show-profile?
      (format :terminal "{s} {s} {s}{%}" presence-name 'PROFILE 'MEDIA)))
  
  
  (method (receive-upload-ping self data)
    @w
    (send-upload-ack self data))
  
  
  (method (send-data self connection data)
    (let ((simulator (get-simulator connection)))
      (if simulator
          (send simulator data connection)
        (send-connection self connection data))))
  
  
  (method (send-connection self connection data)
    (udp-destination-set! (get-host connection) (get-port connection) udp-port)
    (write-data data udp-port)
    (increase-sent connection data)))


;;;
;;;; UDP Connection
;;;


(class UDP-Connection extends Object
  
  
  (slot host                                 getter generate)
  (slot port                                 getter generate)
  @peer2peer
  (slot local-host                           getter generate)
  @peer2peer
  (slot local-port                           getter generate)
  (slot monitor                              getter generate)
  (slot simulator                            accessors generate)
  (slot video-level                          accessors generate)
  (slot last-received-state    initialize #f accessors generate)
  (slot throttle-media?        initialize #f accessors generate)
  (slot waiting-for-keyframe                 accessors generate)
  (slot profile-base-time      initialize #f getter generate)
  (slot profile-media-sequence initialize #f getter generate)
  (slot profile-last-sequence  initialize #f getter generate)
  (slot profile-monitor        initialize #f getter generate)
  (slot profile-chronology     initialize #f getter generate)
  (slot profile-evolution      initialize #f getter generate)
  
  
  (method override (initialize self host port @peer2peer local-host @peer2peer local-port simulator video-level)
    (nextmethod self)
    (set! self.host host)
    (set! self.port port)
    @peer2peer
    (set! self.local-host local-host)
    @peer2peer
    (set! self.local-port local-port)
    (set! self.monitor (new UDP-Monitor))
    (set! self.simulator simulator)
    (set! self.video-level video-level)
    (set! self.waiting-for-keyframe (make-table test: eq?)))
  
  
  (method override (print self output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{a} {a}" host port))))
  
  
  (method protected (update-host/port self host port)
    (set! self.host host)
    (set! self.port port))
  
  
  (method protected (waiting-keyframe? self channel)
    (table-ref waiting-for-keyframe channel #f))
  
  
  (method protected (wait-keyframe self channel)
    (when (= (get-media-kind channel) udp-video)
      (table-set! waiting-for-keyframe channel #t)))
  
  
  (method protected (got-keyframe self channel)
    (table-clear waiting-for-keyframe channel))
  
  
  (method protected (done-keyframe self channel)
    (table-clear waiting-for-keyframe channel))
  
  
  (method protected (increase-sent self data)
    (increase-sent monitor data))
  
  
  (method protected (increase-received self data)
    (increase-received monitor data))
  
  
  (method package (next-profile-media-sequence! self)
    (prog1 profile-media-sequence
      (increase! profile-media-sequence)))
  
  
  (method package (profile-start self)
    (set! profile-base-time (current-seconds))
    (set! profile-media-sequence 0)
    (set! profile-last-sequence #f)
    (set! profile-monitor (new UDP-Monitor))
    (set! profile-chronology (new Chronology 0))
    (set! profile-evolution (new Evolution 5000)))
  
  
  (method package (profile-test self test arguments)
    (let ((send-thread
            (new-thread
              (lambda ()
                (let ((base (current-seconds))
                      (recuperate .5))
                  (define (wait target)
                    (sleep (- (+ base target) (current-seconds))))
                  
                  (let ((server (current-server)))
                    (let ((mbps (car arguments)))
                      (let ((size 1000)
                            (duration 1.))
                        (let ((delay (/ (cast <fl> size) (mbps->bytes mbps)))
                              (udp-server (get-udp-server server)))
                          (let ((iter (fxround (/ duration delay))))
                            (let ((elapse (/ duration (cast <fl> iter)))
                                  (data (make-u8vector size)))
                              (loop (for n from 0 below iter)
                                    (wait (* (cast <fl> n) elapse))
                                    (send-profile-media udp-server self (next-profile-media-sequence! self) data)
                                    (increase-sent profile-monitor data))))))))))
              'send)))
      (thread-base-priority-set! send-thread udp-priority)
      (thread-start! send-thread)))
  
  
  (method package (profile-retrieve self)
    (let ((metadata (list server-no "_server" '() '() (sites-metadata) profile-base-time))
          (chronology (copy-chronology profile-chronology))
          (evolution (copy-evolution profile-evolution)))
      (zlib-deflate (object->u8vector (list metadata chronology evolution) serialize))))
  
  
  (method package (profile-stop self)
    (set! profile-chronology #f)
    (set! profile-evolution #f))
  
  
  (method (receive-profile-pulse self data)
    (increase-received profile-monitor data)
    (write-udp-profile-pulse-packets-sent data (get-packets-sent profile-monitor))
    (write-udp-profile-pulse-bytes-sent data (get-bytes-sent profile-monitor))
    (write-udp-profile-pulse-packets-received data (get-packets-received profile-monitor))
    (write-udp-profile-pulse-bytes-received data (get-bytes-received profile-monitor))
    (increase-sent profile-monitor data))
  
  
  (method package (receive-profile-media self data)
    (let ((sender (read-udp-sender data))
          (sequence (read-udp-sequence data)))
      (when profile-last-sequence
        (let ((expected-sequence (+ profile-last-sequence 1)))
          (when (/= sequence expected-sequence)
            (parameterize ((simulation-evolution profile-evolution))
              (loop (for seq from expected-sequence below sequence)
                    (record-event udp-id-lost-packet
                                  -1.
                                  (fixnum->flonum sender)
                                  (fixnum->flonum udp-audio)
                                  (fixnum->flonum seq)
                                  -1.
                                  -1.
                                  -1.))))))
      (set! profile-last-sequence sequence)
      (increase-received profile-monitor data))))


;;;
;;;; Server Stream
;;;


(class UDP-Server-Stream extends UDP-Stream
  
  
  (slot recipient         getter generate)
  (slot exclude-register  getter generate)
  (slot exclude-broadcast getter generate)
  
  
  (method override (initialize self sender name no origin source-kind video-level recipient exclude-register exclude-broadcast)
    (nextmethod self sender name no origin source-kind video-level)
    (set! self.recipient recipient)
    (set! self.exclude-register exclude-register)
    (set! self.exclude-broadcast exclude-broadcast)))


;;;
;;;; Server Channel
;;;


(class UDP-Server-Channel extends UDP-Channel
  
  
  (slot server-sender?    getter generate)
  (slot last-nacked-frame accessors generate)
  (slot retain-ring       getter generate)
  (slot release-task      getter generate)
  
  
  (method override (initialize self stream-no no media-kind source-kind level resolution framerate bitrate codec caps metadata server-sender?)
    (nextmethod self stream-no no media-kind source-kind level resolution framerate bitrate codec caps metadata)
    (set! self.server-sender? server-sender?)
    (set! self.last-nacked-frame #f)
    (if server-sender?
        (begin
          (set! self.retain-ring #f)
          (set! self.release-task #f))
      (set! self.retain-ring (new UDP-Ring self no (get-origin stream) media-kind udp-retain-size max-size: udp-retain-max-size overflow-proc: (udp-ring-overflow 'retain udp-ring-kind-retain) retain-window: udp-server-retain-window))
      (unless (simulation?)
        (set! self.release-task (new Task 'udp-release (lambda (task)
                                                         (release-loop self task))
                                     priority: udp-priority))
        (start-task release-task))))
  
  
  (method override (destroy self)
    (unless server-sender?
      (terminate retain-ring)
      (thread-join! (get-thread release-task)))
    (nextmethod self))
  
  
  (method protected (collect-missing self)
    (let ((missing (new-queue)))
      (iterate-earliest retain-ring
        (lambda (packet)
          (when (not (get-data packet))
            (enqueue missing (get-sequence packet)))))
      (queue-list missing)))
  
  
  (method protected (retain-media self data)
    (insert retain-ring data udp-id-retain-packet))
  
  
  (method protected (release-loop self task)
    (declare (proper-tail-calls))
    (with-task task
      (lambda (exit)
        (let (loop)
          (let ((packet (retain-wait retain-ring)))
            (if (eq? packet 'terminate)
                (continuation-return exit #f)
              (site udp-release
                (release-media self packet))
              (loop)))))))
  
  
  (method protected (release-media self packet)
    (let ((data (get-data packet))
          (origin (get-origin stream)))
      (if (not data)
          (let ((removed-sequence (get-sequence packet)))
            (record-event udp-id-giveup-packet
                          (fixnum->flonum no)
                          (fixnum->flonum origin)
                          (fixnum->flonum media-kind)
                          (fixnum->flonum removed-sequence)
                          -1.
                          -1.
                          -1.))
        (let ((sequence (read-udp-sequence data))
              (frame (read-udp-frame data))
              (dts (read-udp-media-dts data))
              (pts (read-udp-media-pts data)))
          (record-event udp-id-release-packet
                        (fixnum->flonum no)
                        (fixnum->flonum origin)
                        (fixnum->flonum media-kind)
                        (fixnum->flonum sequence)
                        (fixnum->flonum frame)
                        -1.
                        (timestamp->flonum dts))))))))
