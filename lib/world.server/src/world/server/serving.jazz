;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; Serving Tier
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.server.serving jazz


(import (jazz.debuggee)
        (jazz.event)
        (jazz.network)
        (jazz.presence)
        (jazz.presence.transmission)
        (jazz.snapshot)
        (world)
        (world.autoload)
        (world.server.client)
        (world.server.presence)
        (world.server.problem)
        (world.task)
        (world.tier))


(class Serving-Tier extends Tier
  
  
  (slot delegates initialize '() getter generate)
  
  
  (method override (initialize self dir)
    (nextmethod self dir)
    (set-connection-disconnecter
      (lambda (connection exc)
        (connection-disconnected self connection exc))))
  
  
  (method override (connection-disconnected self connection exc)
    (let ((delegate (find-delegate-by-uuid self (get-remote-uuid connection))))
      (when delegate
        @debugging-read-header-received-eof-disconnects-generates-a-lot-of-snapshots
        (snapshot-process user: (get-name delegate) kind: "Delayed disconnecter" exception: exc max-depth: 0)
        (let ((reason (exception-reason exc)))
          (set-exception delegate exc)
          (set-exception-stack delegate (execution-stack))
          (set-exception-time delegate (current-seconds))
          (delay-disconnect-client self delegate reason: reason)))))
  
  
  (method package (calling-client self delegate thunk)
    ;; quick robustness test
    (when delegate
      ;; should be handled in each call explicitly
      (unless (get-disconnected? delegate)
        (handle-exception-filter
          connection-exception?
          (lambda (exc)
            @debugging-read-header-received-eof-disconnects-generates-a-lot-of-snapshots
            (snapshot-process user: (get-name delegate) kind: "Calling client" exception: exc max-depth: 0)
            (let ((reason (exception-reason exc)))
              (problem "Calling client: {a}" reason)
              (set-exception delegate exc)
              (set-exception-stack delegate (execution-stack))
              (set-exception-time delegate (current-seconds))
              (delay-disconnect-client self delegate reason: reason)))
          thunk))))
  
  
  (method package (find-delegate self target)
    (find-if (lambda (delegate)
               (proxy=? (get-client delegate) target))
             delegates))
  
  
  (method package (find-delegate-by-name self target)
    (find-if (lambda (delegate)
               (equal? (get-name delegate) target))
             delegates))
  
  
  (method package (find-delegate-by-ci-name self target)
    (find-if (lambda (delegate)
               (ci=? (get-name delegate) target))
             delegates))
  
  
  (method package (find-delegate-by-uuid self uuid)
    (find-if (lambda (delegate)
               (uuid=? (get-uuid delegate) uuid))
             delegates))
  
  
  (method package (search-for-delegate self target)
    (let ((delegates (collect-if (lambda (delegate)
                                   (search (get-name delegate) target ignore-case?: #t))
                                 delegates)))
      (case (length delegates)
        ((0) (format "Unable to find {s}" target))
        ((1) (car delegates))
        (else (or (find-delegate-by-ci-name self target)
                  (format "Multiple names found for {s}" target))))))
  
  
  (method package (delay-disconnect-client self delegate (reason: reason #f))
    (delay-event
      (lambda ()
        (with-task-mutex
          (lambda ()
            (unless (get-disconnected? delegate)
              (delayed-disconnect-client self delegate reason: reason)))))))
  
  
  (method protected virtual (delayed-disconnect-client self delegate (reason: reason #f))
    )
  
  
  (method protected virtual (disconnect-client self delegate (reason: reason #f))
    )))
