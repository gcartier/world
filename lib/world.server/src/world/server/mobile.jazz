;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; Mobile Server
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.server.mobile jazz


(import (jazz.io)
        (jazz.network)
        (jazz.network.websocket)
        (world)
        (world.server)
        (world.server.client)
        (world.server.problem)
        (world.settings))


(definition package mobile-server
  #f)

(definition package mobile-server-connect
  #f)

(definition package mobile-server-serve
  #f)

(definition package mobile-service-offset
  50)


(definition package mobile-tls-context
  #f)

(definition package (cache-mobile-tls-context cert chain key)
  (or mobile-tls-context
      (let ((tls-context (make-tls-context options: '(server-mode)
                           certificate: (parse cert)
                           certificate-chain: (parse chain)
                           private-key: (parse key))))
        (set! mobile-tls-context tls-context)
        tls-context)))


(definition package (start-mobile-server certificates-dir mobile-connect mobile-serve)
  (let ((cert (new-file certificates-dir "cert.pem"))
        (chain (new-file certificates-dir "fullchain.pem"))
        (key (new-file certificates-dir "key.pem")))
    (when (and (exists? cert)
               (exists? chain)
               (exists? key))
      (let ((configuration (get-server-configuration)))
        (let ((host (effective-host configuration))
              (service (+ (effective-service configuration) mobile-service-offset))
              (tls-context (cache-mobile-tls-context cert chain key)))
          (let ((server (new Mobile-Server problem host: host service: service tls-context: tls-context)))
            (start server)
            (set! mobile-server server)
            (set! mobile-server-connect mobile-connect)
            (set! mobile-server-serve mobile-serve)))))))


(definition package (stop-mobile-server)
  (when mobile-server
    (stop mobile-server)
    (set! mobile-server #f)))


;;;
;;;; Server
;;;


(class Mobile-Server extends WebSocket-Server
  
  
  (method override (server-name self)
    'mobile-server)
  
  
  (method override (connection-name self)
    'mobile-connection)
  
  
  (method override (process-connection self port)
    (let ((delegate (mobile-server-connect self port)))
      (when delegate
        (mobile-server-serve delegate)))))


;;;
;;;; Delegate
;;;


(class Mobile-Delegate extends Client-Delegate
  
  
  (slot server accessors generate)
  (slot port   accessors generate)
  
  
  (method override (initialize self server port state id no name role admin? verified? verifier personal-key)
    (nextmethod self #f state #f id no name #f #f #f role admin? verified? verifier personal-key)
    (set! self.server server)
    (set! self.port port))
  
  
  (method override (mobile? self)
    #t)
  
  
  ;; quick solution never disconnect for now
  (method override (still-alive? self)
    #t)
  
  
  ;; quick solution never disconnect for now
  (method override (disconnected-giveup? self)
    #f)))
