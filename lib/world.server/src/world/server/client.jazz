;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; Server Client Delegate
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.server.client jazz


(import (jazz.component)
        (jazz.io)
        (world.settings))


(definition disconnect-delay
  (world-setting 'world.disconnect-delay 45.))

(definition disconnected-remove
  (world-setting 'world.disconnected-remove 300.))


;;;
;;;; Identity
;;;


(class Client-Identity extends Component
  
  
  (property role   initialize #f accessors generate)
  (property admin? initialize #f accessors generate))


(definition protected (retrieve-identity directory personal-key)
  (and (string? personal-key)
       (let ((file (new-file directory (list "identities" (add-extension personal-key "identity")))))
         (and (exists? file)
              (instantiate (read-form file))))))


;;;
;;;; Delegate
;;;


(class Client-Delegate extends Object
  
  
  (slot client                        accessors generate)
  (slot state                         accessors generate)
  (slot uuid                          accessors generate)
  (slot id                            getter generate)
  (slot no                            getter generate)
  (slot name                          getter generate)
  (slot avatar                        getter generate)
  (slot script                        getter generate)
  (slot role                          getter generate)
  (slot admin?                        getter generate)
  (slot mode                          accessors generate)
  (slot character       initialize #f accessors generate)
  (slot zone            initialize #f accessors generate)
  (slot processor       initialize #f accessors generate)
  (slot group           initialize #f accessors generate)
  (slot channels                      accessors generate)
  (slot disconnected?   initialize #f accessors generate)
  (slot asleep?         initialize #f accessors generate)
  (slot message-queue                 getter generate)
  (slot alive                         accessors generate)
  (slot exception       initialize #f accessors generate)
  (slot exception-stack initialize #f accessors generate)
  (slot exception-time  initialize #f accessors generate)
  
  
  (method override (initialize self client state uuid id no name avatar script role admin?)
    (set! self.client client)
    (set! self.state state)
    (set! self.uuid uuid)
    (set! self.id id)
    (set! self.no no)
    (set! self.name name)
    (set! self.avatar avatar)
    (set! self.script script)
    (set! self.role role)
    (set! self.admin? admin?)
    (set! self.mode 'observer)
    (set! self.channels (make-table))
    (set! self.message-queue (new-queue))
    (set! self.alive (current-seconds)))
  
  
  (method override (print self output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{a}" name))))
  
  
  (method package (still-alive? self)
    (< (- (current-seconds) alive) disconnect-delay))
  
  
  (method package (disconnected-remove? self)
    (>= (- (current-seconds) alive) disconnected-remove))))
