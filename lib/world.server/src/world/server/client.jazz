;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; Server Client Delegate
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.server.client jazz


(import (jazz.component)
        (jazz.io)
        (world.settings))


(definition disconnect-delay
  (world-setting 'world.disconnect-delay 45.))

(definition disconnected-giveup
  (world-setting 'world.disconnected-giveup 300.))


;;;
;;;; Identity
;;;


(class Client-Identity extends Component
  
  
  (property role   initialize #f accessors generate)
  (property admin? initialize #f accessors generate))


(definition (identity-file directory personal-key)
  (new-file directory (list "identities" (add-extension personal-key "identity"))))


(definition protected (identity-exists? directory personal-key)
  (let ((file (identity-file directory personal-key)))
    (exists? file)))


(definition protected (retrieve-identity directory personal-key)
  (and (string? personal-key)
       (let ((file (identity-file directory personal-key)))
         (and (exists? file)
              (instantiate (read-form file))))))


(definition protected (add-identity directory personal-key name role admin?)
  (let ((file (identity-file directory personal-key)))
    (call-with-output-file (path-settings file)
      (lambda (output)
        (format output ";;;========={%}")
        (format output ";;;  World{%}")
        (format output ";;;========={%}")
        (format output ";;;{%}")
        (format output ";;;; Identity{%}")
        (format output ";;;{%}")
        (format output "{%}")
        (format output "{%}")
        (format output "(data jazz{%}")
        (format output "{%}")
        (format output "{%}")
        (format output "(import world.server.client){%}")
        (format output "{%}")
        (format output "{%}")
        (format output "(form{%}")
        (format output "  (<Client-Identity> name: {s} role: {s} admin?: {s}))){%}" name role admin?)))))


(definition protected (modify-identity directory personal-key modify)
  (let ((identity (retrieve-identity directory personal-key)))
    (let ((designer (new Former form: (get-form identity) reference: identity)))
      (modify designer identity)
      (save designer))))


(definition protected (remove-identity directory personal-key)
  (let ((file (identity-file directory personal-key)))
    (delete file)))


;;;
;;;; Delegate
;;;


(class Client-Delegate extends Object
  
  
  (slot client                         accessors generate)
  (slot state                          accessors generate)
  (slot uuid                           accessors generate)
  (slot id                             getter generate)
  (slot no                             getter generate)
  (slot name                           getter generate)
  (slot avatar                         getter generate)
  (slot dye                            getter generate)
  (slot script                         getter generate)
  (slot role                           getter generate)
  (slot admin?                         getter generate)
  (slot mode                           accessors generate)
  (slot character       initialize #f  accessors generate)
  (slot zone            initialize #f  accessors generate)
  (slot processor       initialize #f  accessors generate)
  (slot group           initialize #f  accessors generate)
  (slot channels                       accessors generate)
  (slot asleep?         initialize #f  accessors generate)
  (slot disconnected?   initialize #f  accessors generate)
  (slot roaming?        initialize #f  accessors generate)
  (slot message-queue                  getter generate)
  (slot invites         initialize '() accessors generate)
  (slot alive                          accessors generate)
  (slot exception       initialize #f  accessors generate)
  (slot exception-stack initialize #f  accessors generate)
  (slot exception-time  initialize #f  accessors generate)
  
  
  (method override (initialize self client state uuid id no name avatar dye script role admin?)
    (set! self.client client)
    (set! self.state state)
    (set! self.uuid uuid)
    (set! self.id id)
    (set! self.no no)
    (set! self.name name)
    (set! self.avatar avatar)
    (set! self.dye dye)
    (set! self.script script)
    (set! self.role role)
    (set! self.admin? admin?)
    (set! self.mode 'observer)
    (set! self.channels (make-table))
    (set! self.message-queue (new-queue))
    (set! self.alive (current-seconds)))
  
  
  (method override (print self output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{a}" name))))
  
  
  ;;;
  ;;;; Disconnected
  ;;;
  
  
  ;; quick solution for mobile
  (method protected virtual (still-alive? self)
    (< (- (current-seconds) alive) disconnect-delay))
  
  
  ;; quick solution for mobile
  (method protected virtual (disconnected-giveup? self)
    (>= (- (current-seconds) alive) disconnected-giveup))
  
  
  ;;;
  ;;;; Invites
  ;;;
  
  
  (method package (add-invite self sender)
    (set! invites (cons sender invites)))
  
  
  (method package (remove-invite self sender)
    (set! invites (remove sender invites)))))
