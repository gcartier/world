;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; Server Client Delegate
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.server.client jazz


(import (jazz.component)
        (jazz.io)
        (jazz.network)
        (jazz.time)
        (time)
        (world.settings))


(definition protected disconnect-delay
  (world-setting 'world.disconnect-delay 45.))

(definition protected disconnected-giveup
  (world-setting 'world.disconnected-giveup 300.))


;;;
;;;; Identity
;;;


(class Client-Identity extends Component
  
  
  (property type       initialize #f accessors generate)
  (property role       initialize #f accessors generate)
  (property admin?     initialize #f accessors generate)
  (property verified?  initialize #f accessors generate)
  (property verifier   initialize #f accessors generate)
  (property email      initialize #f accessors generate)
  (property invitation initialize #f accessors generate)
  (property created    initialize #f accessors generate)
  (property connected  initialize #f accessors generate)
  (property status     initialize #f accessors generate))


(definition (identity-file directory personal-key)
  (new-file directory (list "identities" (add-extension personal-key "identity"))))


(definition protected (generate-identity directory)
  (declare (proper-tail-calls))
  (let (loop)
    (let ((key (upcase (substring (generate-uuid) 0 8))))
      (let ((file (identity-file directory key)))
        (if (not (exists? file))
            key
          (loop))))))


(definition protected (standardize-personal-key personal-key)
  (upcase
    (let ((len (string-length personal-key)))
      (if (> len 8)
          (substring personal-key 0 8)
        personal-key))))


(definition protected (retrieve-identity directory personal-key)
  (let ((personal-key (standardize-personal-key personal-key)))
    (let ((file (identity-file directory personal-key)))
      (and (exists? file)
           (load-identity file)))))


(definition protected (load-identity file)
  (instantiate (read-form file)))


(definition protected (find-identity-key directory target)
  (let ((dir (new-directory directory "identities")))
    (continuation-capture
      (lambda (return)
        (iterate-directory dir
          (lambda (file)
            (let ((key (get-base file)))
              (when (starts-with? key target)
                (continuation-return return key))))
          recursive?: #f)
        #f))))


(definition protected (find-identity directory target)
  (let ((key (find-identity-key directory target)))
    (and key
         (retrieve-identity directory key))))


(definition protected (iterate-identities directory proc)
  (let ((dir (new-directory directory "identities")))
    (iterate-directory dir
      (lambda (file)
        (let ((key (get-base file)))
          (let ((identity (retrieve-identity directory key)))
            (proc key identity))))
      recursive?: #f)))


(definition protected (add-identity directory personal-key name type role admin? email invitation)
  (let ((file (identity-file directory personal-key))
        (created (date-truncate-nanosecond (current-date))))
    (call-with-output-file (path-settings file)
      (lambda (output)
        (format output ";;;========={%}")
        (format output ";;;  World{%}")
        (format output ";;;========={%}")
        (format output ";;;{%}")
        (format output ";;;; Identity{%}")
        (format output ";;;{%}")
        (format output "{%}")
        (format output "{%}")
        (format output "(data jazz{%}")
        (format output "{%}")
        (format output "{%}")
        (format output "(import world.server.client){%}")
        (format output "{%}")
        (format output "{%}")
        (format output "(form{%}")
        (format output "  (<Client-Identity> name: {s} type: {s} role: {s} admin?: {s} email: {s} invitation: {s} created: {s}))){%}" name type role admin? email invitation created)))))


(definition protected (modify-identity directory personal-key modify)
  (let ((identity (retrieve-identity directory personal-key)))
    (let ((designer (new Former form: (get-form identity) reference: identity)))
      (modify designer identity)
      (save designer))))


(definition protected (remove-identity directory personal-key)
  (let ((file (identity-file directory personal-key)))
    (when (exists? file)
      (delete file))))


(definition protected (verify-identity directory verified-key verifier-key)
  (modify-identity directory verified-key
    (lambda (designer identity)
      (set-property designer identity 'verified? #t)
      (set-property designer identity 'verifier verifier-key))))


(definition protected (convert-identities directory)
  (let ((convert (make-table test: equal?))
        (invalid 0)
        (conflict 0)
        (count 0))
    (let ((dir (new-directory directory "identities")))
      (iterate-directory dir
        (lambda (file)
          (let ((key (get-base file)))
            (if (< (string-length key) 8)
                (increase! invalid)
              (let ((short-key (substring key 0 8)))
                (if (table-ref convert short-key #f)
                    (increase! conflict)
                  (table-set! convert short-key key)
                  (increase! count))))))
        recursive?: #f)
      (cond ((/= invalid 0)
             (format "Found {a} invalid key{a}" invalid (format-plural invalid)))
            ((/= conflict 0)
             (format "Found {a} conflicting key{a}" conflict (format-plural conflict)))
            (else
             (iterate-table convert
               (lambda (short-key key)
                 (let ((src (new-file dir (add-extension key "identity")))
                       (dst (new-file dir (add-extension short-key "identity"))))
                   (rename src dst))))
             #f)))))


;;;
;;;; Invitation
;;;


(class Client-Invitation extends Component
  
  
  (property inviter initialize #f accessors generate)
  (property created initialize #f accessors generate)
  (property expires initialize #f accessors generate))


(definition (invitation-file directory invitation-word)
  (new-file directory (list "invitations" (add-extension invitation-word "invitation"))))


(definition protected (standardize-invitation-word invitation-word)
  (downcase invitation-word))


(definition protected (retrieve-invitation directory invitation-word)
  (let ((invitation-word (standardize-invitation-word invitation-word)))
    (let ((file (invitation-file directory invitation-word)))
      (and (exists? file)
           (load-invitation file)))))


(definition protected (load-invitation file)
  (instantiate (read-form file)))


(definition protected (iterate-invitations directory proc)
  (let ((dir (new-directory directory "invitations")))
    (iterate-directory dir
      (lambda (file)
        (let ((invitation-word (get-base file)))
          (let ((invitation (retrieve-invitation directory invitation-word)))
            (proc invitation-word invitation))))
      recursive?: #f)))


(definition protected (add-invitation directory invitation-word inviter expires)
  (let ((invitation-word (standardize-invitation-word invitation-word)))
    (let ((file (invitation-file directory invitation-word))
          (created (date-truncate-nanosecond (current-date))))
      (call-with-output-file (path-settings file)
        (lambda (output)
          (format output ";;;========={%}")
          (format output ";;;  World{%}")
          (format output ";;;========={%}")
          (format output ";;;{%}")
          (format output ";;;; Invitation{%}")
          (format output ";;;{%}")
          (format output "{%}")
          (format output "{%}")
          (format output "(data jazz{%}")
          (format output "{%}")
          (format output "{%}")
          (format output "(import world.server.client){%}")
          (format output "{%}")
          (format output "{%}")
          (format output "(form{%}")
          (format output "  (<Client-Invitation> inviter: {s} created: {s} expires: {s}))){%}" inviter created expires))))))


(definition protected (modify-invitation directory invitation-word modify)
  (let ((invitation (retrieve-invitation directory invitation-word)))
    (let ((designer (new Former form: (get-form invitation) reference: invitation)))
      (modify designer invitation)
      (save designer))))


(definition protected (remove-invitation directory invitation-word)
  (let ((invitation-word (standardize-invitation-word invitation-word)))
    (let ((file (invitation-file directory invitation-word)))
      (when (exists? file)
        (delete file)))))


;;;
;;;; Machine
;;;


(class Client-Machine extends Component
  
  
  (property user     initialize #f accessors generate)
  (property identity initialize #f accessors generate)
  (property caps     initialize #f accessors generate)
  (property features initialize #f accessors generate)
  (property settings initialize #f accessors generate))


(definition (machine-file directory machine-identity)
  (new-file directory (list "machines" (add-extension machine-identity "machine"))))


(definition protected (add-machine directory user machine-caps machine-features)
  (define (generate-machine)
    (declare (proper-tail-calls))
    (let (loop)
      (let ((identity (make-uuid)))
        (let ((file (machine-file directory identity)))
          (if (not (exists? file))
              identity
            (loop))))))
  
  (let ((identity (generate-machine)))
    (create-machine directory user identity machine-caps machine-features)))


(definition protected (create-machine directory user machine-identity machine-caps machine-features)
  (let ((file (machine-file directory machine-identity)))
    (store-machine file user machine-identity machine-caps machine-features #f)
    (load-machine file)))


(definition protected (store-machine file user machine-identity machine-caps machine-features machine-settings)
  (create-directories file)
  (call-with-output-file (path-settings file)
    (lambda (output)
      (format output ";;;========={%}")
      (format output ";;;  World{%}")
      (format output ";;;========={%}")
      (format output ";;;{%}")
      (format output ";;;; Machine{%}")
      (format output ";;;{%}")
      (format output "{%}")
      (format output "{%}")
      (format output "(data jazz{%}")
      (format output "{%}")
      (format output "{%}")
      (format output "(import world.server.client){%}")
      (format output "{%}")
      (format output "{%}")
      (format output "(form{%}")
      (format output "  (<Client-Machine> user: {s} identity: {s} caps: {s} features: {s} settings: {s}))){%}" user machine-identity machine-caps machine-features machine-settings))))


(definition protected (retrieve-machine directory user machine-identity machine-caps machine-features)
  (if (not machine-identity)
      (add-machine directory user machine-caps machine-features)
    (let ((file (machine-file directory machine-identity)))
      (if (not (exists? file))
          (create-machine directory user machine-identity machine-caps machine-features)
        (let ((machine (load-machine file)))
          (if (eqv? (assq-value 'caps.version machine-caps #f)
                    (assq-value 'caps.version (get-caps machine) #f))
              machine
            (create-machine directory user machine-identity machine-caps machine-features)))))))


(definition protected (load-machine file)
  (instantiate (read-form file)))


(definition protected (find-machine directory target)
  (let ((dir (new-directory directory "machines")))
    (continuation-capture
      (lambda (return)
        (iterate-directory dir
          (lambda (file)
            (let ((identity (get-base file)))
              (when (starts-with? identity target)
                (continuation-return return (load-machine file)))))
          recursive?: #f)
        #f))))


(definition protected (save-machine directory identity machine)
  (let ((user (get-user machine))
        (caps (get-caps machine))
        (features (get-features machine))
        (settings (get-settings machine)))
    (let ((file (machine-file directory identity)))
      (store-machine file user identity caps features settings))))


(definition protected (iterate-machines directory proc)
  (let ((dir (new-directory directory "machines")))
    (iterate-directory dir
      (lambda (file)
        (let ((identity (get-base file)))
          (let ((machine (load-machine file)))
            (proc identity machine))))
      recursive?: #f)))


;;;
;;;; Delegate
;;;


(class Client-Delegate extends Object
  
  
  (slot client                          accessors generate)
  (slot state                           accessors generate)
  (slot uuid                            accessors generate)
  (slot id                              getter generate)
  (slot no                              getter generate)
  (slot name                            getter generate)
  (slot avatar                          getter generate)
  (slot dye                             getter generate)
  (slot script                          getter generate)
  (slot role                            getter generate)
  (slot admin?                          getter generate)
  (slot verified?                       accessors generate)
  (slot verifier                        accessors generate)
  (slot personal-key                    getter generate)
  (slot mode                            accessors generate)
  (slot character        initialize #f  accessors generate)
  (slot zone             initialize #f  accessors generate)
  (slot processor        initialize #f  accessors generate)
  (slot group            initialize #f  accessors generate)
  (slot channels                        accessors generate)
  (slot streaming-levels initialize '() accessors generate)
  (slot asleep?          initialize #f  accessors generate)
  (slot disconnected?    initialize #f  accessors generate)
  (slot roaming?         initialize #f  accessors generate)
  (slot message-queue                   getter generate)
  (slot create-time                     getter generate)
  (slot invites          initialize '() accessors generate)
  (slot alive                           accessors generate)
  (slot exception        initialize #f  accessors generate)
  (slot exception-stack  initialize #f  accessors generate)
  (slot exception-time   initialize #f  accessors generate)
  
  
  (method override (initialize self client state uuid id no name avatar dye script role admin? verified? verifier personal-key)
    (set! self.client client)
    (set! self.state state)
    (set! self.uuid uuid)
    (set! self.id id)
    (set! self.no no)
    (set! self.name name)
    (set! self.avatar avatar)
    (set! self.dye dye)
    (set! self.script script)
    (set! self.role role)
    (set! self.admin? admin?)
    (set! self.verified? verified?)
    (set! self.verifier verifier)
    (set! self.personal-key personal-key)
    (set! self.mode 'observer)
    (set! self.channels (make-table))
    (set! self.message-queue (new-queue))
    (set! self.create-time (current-seconds))
    (set! self.alive (current-seconds)))
  
  
  (method override (print self output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{a}" name))))
  
  
  (method protected virtual (mobile? self)
    #f)
  
  
  ;;;
  ;;;; Disconnected
  ;;;
  
  
  ;; quick solution for mobile
  (method protected virtual (still-alive? self)
    (< (- (current-seconds) alive) disconnect-delay))
  
  
  ;; quick solution for mobile
  (method protected virtual (disconnected-giveup? self)
    (>= (- (current-seconds) alive) disconnected-giveup))
  
  
  ;;;
  ;;;; Invites
  ;;;
  
  
  (method package (add-invite self sender)
    (set! invites (cons sender invites)))
  
  
  (method package (remove-invite self sender)
    (set! invites (remove sender invites)))))
