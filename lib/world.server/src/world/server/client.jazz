;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; Server Client Delegate
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.server.client jazz


(import (world.settings))


(definition disconnect-delay
  (world-setting 'world.disconnect-delay 30.))

(definition disconnected-remove
  (world-setting 'world.disconnected-remove 300.))


(class Client-Delegate extends Object
  
  
  (slot client                       accessors generate)
  (slot state                        accessors generate)
  (slot uuid                         getter generate)
  (slot id                           getter generate)
  (slot no                           getter generate)
  (slot name                         getter generate)
  (slot avatar                       getter generate)
  (slot script                       getter generate)
  (slot role                         getter generate)
  (slot sphere?                      getter generate)
  (slot character      initialize #f accessors generate)
  (slot zone           initialize #f accessors generate)
  (slot processor      initialize #f accessors generate)
  (slot group          initialize #f accessors generate)
  (slot channels                     accessors generate)
  (slot asleep?        initialize #f accessors generate)
  (slot alive                        accessors generate)
  (slot exception      initialize #f accessors generate)
  (slot exception-time initialize #f accessors generate)
  
  
  (method override (initialize self client state uuid id no name avatar script role sphere?)
    (set! self.client client)
    (set! self.state state)
    (set! self.uuid uuid)
    (set! self.id id)
    (set! self.no no)
    (set! self.name name)
    (set! self.avatar avatar)
    (set! self.script script)
    (set! self.role role)
    (set! self.sphere? sphere?)
    (set! self.channels (make-table))
    (set! self.alive (current-seconds)))
  
  
  (method override (print self output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{a}" name))))
  
  
  (method package (still-alive? self)
    (< (- (current-seconds) alive) disconnect-delay))
  
  
  (method package (keep-disconnected? self)
    (< (- (current-seconds) alive) disconnected-remove))))
