;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Project
;;;


(data jazz.ide.data.project


(import (jazz.project)
        (jazz.editor.jazz))


(form
  (<Project>                   name: server         description-file: {File :context ".package"}
    (<Project-Directory>                            directory: {Directory :context "src"}
      (<Project-Directory>                          directory: {Directory :context "src" "world"}
        (<Project-Directory>                        directory: {Directory :context "src" "world" "server"}
          (<Jazz-File>         name: panel          source: {File :context "src" "world" "server" "panel.jazz"})
          (<Project-Directory>                      directory: {Directory :context "src" "world" "server" "remote"}
            (<Jazz-File>       name: _remote        source: {File :context "src" "world" "server" "remote" "_remote.jazz"})
            (<Jazz-File>       name: implementation source: {File :context "src" "world" "server" "remote" "implementation.jazz"}))
          (<Jazz-File>         name: client         source: {File :context "src" "world" "server" "client.jazz"})
          (<Jazz-File>         name: tier           source: {File :context "src" "world" "server" "tier.jazz"})
          (<Jazz-File>         name: _server        source: {File :context "src" "world" "server" "_server.jazz"})
          (<Jazz-File>         name: serving        source: {File :context "src" "world" "server" "serving.jazz"})
          (<Jazz-File>         name: udp            source: {File :context "src" "world" "server" "udp.jazz"})
          (<Jazz-File>         name: boot           source: {File :context "src" "world" "server" "boot.jazz"})
          (<Jazz-File>         name: group          source: {File :context "src" "world" "server" "group.jazz"})))))))
