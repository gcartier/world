;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; World
;;;


(module profile.world.World jazz


(import (irregex)
        (jazz.debugger)
        (jazz.graphic)
        ;(jazz.graphic.opengl)
        ;(jazz.graphic.opengl.platform)
        (jazz.ide)
        (jazz.ide.builder)
        (jazz.ide.builder.workbench)
        (jazz.io)
        (jazz.jml)
        (jazz.library)
        (jazz.literals)
        (jazz.media)
        (jazz.network)
        (jazz.platform)
        (jazz.platform.cairo)
        (jazz.profile)
        (jazz.runtime)
        (jazz.system)
        (jazz.ui)
        (jazz.ui.clipboard)
        (jazz.ui.dialog)
        (jazz.ui.view)
        (jazz.ui.window)
        (jazz.ui.workspace)
        (jedi)
        (jedi.development)
        (time)
        ;(world)
        ;(world.client)
        ;(world.window)
        )


;;;
;;;; World
;;;


(class World extends Jedi-Profile
  
  
  @w
  (method override (test)
    (setup-world-window (new-opengl-window class: World-Window width: 800 height: 600))
    (select-snakes))
  
  
  @w
  (method override (test-shift)
    (debug (get-window-focus)))
  
  
  ;;;
  ;;;; Launch
  ;;;
  
  
  (definition public (launch-server (kernel: kernel #f) (directory: directory #f) (kernel-arguments: kernel-arguments #f) (command-arguments: command-arguments #f) (cookie: cookie #f))
    (let ((project (find-project~ (get-workbench) "Server")))
      (assert project
        (launch~ project executable: kernel directory: directory debugger?: #t kernel-arguments: kernel-arguments command-arguments: command-arguments debugger-cookie: cookie debugger-interactive?: #t))))
  
  
  (definition public (launch-client (kernel: kernel #f) (directory: directory #f) (kernel-arguments: kernel-arguments #f) (command-arguments: command-arguments #f) (cookie: cookie #f))
    (let ((project (find-project~ (get-workbench) "Client")))
      (assert project
        (launch~ project executable: kernel directory: directory debugger?: #t kernel-arguments: kernel-arguments command-arguments: command-arguments debugger-cookie: cookie debugger-interactive?: #t))))
  
  
  (definition public (launch-server/client (kernel: kernel #f) (directory: directory #f) (kernel-arguments: kernel-arguments #f) (command-arguments: command-arguments #f))
    (launch-server kernel: kernel directory: directory kernel-arguments: kernel-arguments command-arguments: command-arguments
      cookie: (register-debugger-cookie
                (lambda (cookie)
                  (launch-client kernel: kernel directory: directory kernel-arguments: kernel-arguments command-arguments: command-arguments)))))
  
  
  @standalone
  (definition debug-kernel
    {File Home "world" "build" "debug" "kernel.exe"})
  
  @standalone
  (definition release-kernel
    {File Home "world" "build" "release" "kernel.exe"})
  
    
  (definition debug-kernel
    {File Home "jazz" "work" "build" "debug" "kernel.exe"})
  
  (definition release-kernel
    {File Home "jazz" "work" "build" "release" "kernel.exe"})

  
  (method override (test1)
    (if (shift-down?)
        (launch-server kernel: debug-kernel)
      (launch-server kernel: release-kernel)))
  
  
  (method override (test2)
    (if (shift-down?)
        (launch-client kernel: debug-kernel)
      (launch-client kernel: release-kernel)))
  
  
  (method override (test3)
    (if (shift-down?)
        (launch-server/client kernel: debug-kernel)
      (launch-server/client kernel: release-kernel)))
  
  
  ;;;
  ;;;; Server
  ;;;
  
  
  @w
  (definition server-address
    "192.168.0.102:9090")
  
  
  @w
  (method override (test1)
    (start-server))
  
  
  @w
  (method (start-server)
    (thread-start!
      (new-thread
        (lambda ()
          (let ((connection-port (open-tcp-server server-address)))
            (let (loop)
              (let ((port (read connection-port)))
                (terminal 'connection 'accepted 'on port)
                (thread-start!
                  (new-thread
                    (lambda ()
                      (unwind-protect
                          (accept-connection port)
                        (close-port port)))
                    'client))
                (loop)))))
        'server))
    (user-message "Server started"))
  
  
  @w
  (method (accept-connection port)
    (let (loop)
      (let ((message (read port)))
        (unless (eof-object? message)
          (terminal 'received message)))
      (loop)))
  
  
  ;;;
  ;;;; Client
  ;;;
  
  
  @w
  (method override (test2)
    (open-client))
  
  
  @w
  (method (open-client)
    (call-with-tcp-client (call-with-tcp-client server-address)
      (lambda (port)
        (terminal 'client 'connected 'at port)
        (write "yo" port)
        (force-output port)))))


(register-profile-class World)


;;;
;;;; Customisation
;;;


(register-user-completions
  '(("wo" . "world")
    ("Wo" . "World"))))
