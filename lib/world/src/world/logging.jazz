;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Logging
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.logging jazz


(import (jazz.listener)
        (jazz.platform)
        (jazz.stream)
        (world.configure)
        (world.moment))


(definition protected log-listener
  #f)

(definition protected log-thread
  #f)


(definition public (setup-log-listener)
  (if (not gstreamer-initialized?)
      (add-gstreamer-hook start-log-listener)
    (start-log-listener)))


(definition (start-log-listener)
  (let ((listener (open-stream-listener "log")))
    (let ((thread
            (new-thread
              (lambda ()
                (declare (proper-tail-calls))
                (log_set_listener (get-write-file listener) (not (controlling-terminal?)))
                (let (loop)
                  (let ((c (wait listener)))
                    (case c
                      ((#\.)
                       (retrieve-log-entry)
                       (loop))
                      ((#\@)
                       )))))
              'log)))
      ;; use a fairly high priority as thread is low work
      ;; and also to get events showing in a responsive way
      (thread-base-priority-set! thread event-priority)
      (thread-start! thread)
      (set! log-listener listener)
      (set! log-thread thread))))


(definition public (retrieve-log-entry)
  (let ((entry (log_pop_entry)))
    (when entry
      (let ((moment (parse-log-entry entry)))
        (log_entry_unref entry)
        (record-moment moment)))))


(definition public (stop-log-listener)
  (when log-listener
    (stop-stream-listener log-listener)
    (thread-join! log-thread)
    (set! log-thread #f)
    (close-stream-listener log-listener)
    (set! log-listener #f))))
