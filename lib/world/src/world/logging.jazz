;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Logging
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.logging jazz


(import (jazz.listener)
        (jazz.platform)
        (jazz.stream)
        (world.configure)
        (world.event))


(definition protected log-listener
  #f)

(definition protected log-thread
  #f)

(definition protected max-logging-entries
  100)

(definition protected logging-entries
  (new-queue))

(definition protected logging-mutex
  (make-mutex 'logging))


(definition (add-logging-entry entry)
  (mutex-lock! logging-mutex)
  (enqueue logging-entries entry)
  (when (> (queue-length logging-entries) max-logging-entries)
    (dequeue logging-entries))
  (mutex-unlock! logging-mutex))

(definition public (retrieve-logging-entries)
  (mutex-lock! logging-mutex)
  (prog1 (queue-list logging-entries)
    (reset-queue logging-entries)
    (mutex-unlock! logging-mutex)))


(definition public (start-log-listener)
  (let ((listener (open-stream-listener "log")))
    (log_set_listener (get-write-file listener) (not (controlling-terminal?)))
    (let ((thread
            (new-thread
              (lambda ()
                (declare (proper-tail-calls))
                (let (loop)
                  (let ((c (wait listener)))
                    (case c
                      ((#\.)
                       (retrieve-log-entry)
                       (loop))
                      ((#\@)
                       )))))
              'log)))
      ;; use a fairly high priority as thread is low work
      ;; and also to get events showing in a responsive way
      (thread-base-priority-set! thread event-priority)
      (thread-start! thread)
      (set! log-listener listener)
      (set! log-thread thread))))


(definition public (retrieve-log-entry)
  (let ((entry (log_pop_user_first_entry)))
    (when entry
      (receive (time level category function message stack) (parse-log-entry entry)
        (log_unref_entry entry)
        (add-logging-entry (list time level category function message stack))
        ;; let record-event use current-seconds as overriding
        ;; event time can sometimes lead to out-of-order times
        (record-event udp-id-log
                      -1.
                      -1.
                      -1.
                      (fixnum->flonum level)
                      -1.
                      -1.
                      -1.)))))


(definition public (stop-log-listener)
  (stop-stream-listener log-listener)
  (thread-join! log-thread)
  (set! log-thread #f)
  (close-stream-listener log-listener)
  (set! log-listener #f)))
