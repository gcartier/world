;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Sprites
;;;


(module world.sprite jazz


(import (jazz.geometry)
        (jazz.graphic)
        (jazz.graphic.opengl.glew)
        (jazz.io)
        (jazz.library)
        (jazz.literals)
        (jazz.media)
        (jazz.network)
        (jazz.platform)
        (jazz.platform.cairo)
        (jazz.runtime)
        (jazz.system)
        (jazz.ui)
        (jazz.ui.dialog)
        (jazz.ui.window)
        (time)
        (world)
        (world.autoload)
        (world.client.window)
        (world.foreign)
        (world.geometry)
        (world.history)
        (world.object)
        (world.texture)
        (world.window))


;;;
;;;; Sprite
;;;


(class Sprite extends World-Object
  
  
  (property width     <fl>     accessors generate)
  (property height    <fl>     accessors generate)
  (property depth     <fl>     accessors generate)
  (property color     <object> initialize #f getter generate setter explicit)
  (property texture   <object> initialize #f accessors generate)
  (property user-data <object> initialize #f accessors generate)
  
  
  (slot origin    <object>    getter generate)
  (slot center    <f32vector> getter generate)
  (slot left      <fl>        getter generate)
  (slot bottom    <fl>        getter generate)
  (slot back      <fl>        getter generate)
  (slot right     <fl>        getter generate)
  (slot top       <fl>        getter generate)
  (slot front     <fl>        getter generate)
  (slot radius    <fl>        getter generate)
  (slot radius-x  <fl>        getter generate)
  (slot radius-y  <fl>        getter generate)
  (slot radius-z  <fl>        getter generate)
  (slot red       <fl>        accessors generate)
  (slot green     <fl>        accessors generate)
  (slot blue      <fl>        accessors generate)
  (slot alpha     <fl>        accessors generate)
  (slot triangles <object>    getter explicit)
  
  
  (method override (finish rest)
    (nextmethod rest)
    (set! origin self)
    (set! triangles #f)
    (update-radius)
    (update-position)
    (update-color))
  
  
  (method override (print output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{r precision: 1} {r precision: 1} {r precision: 1} {a} {a} {a}" x y z width height depth))))
  
  
  (method public (get-triangles)
    (when (not triangles)
      (set! triangles (sprite-triangles)))
    triangles)
  
  
  (method protected virtual (sprite-triangles)
    (let ((left (get-left))
          (right (get-right))
          (bottom (get-bottom))
          (top (get-top))
          (back (get-back))
          (front (get-front)))
      (let ((vertices
              (list
                ;; Front face
                (vertex left top front) (vertex 0. 1. 1.) (vertex 0. 0. 1.) (vertex right top front) (vertex 1. 1. 1.) (vertex 0. 0. 1.) (vertex right bottom front) (vertex 1. 0. 1.) (vertex 0. 0. 1.) (vertex right bottom front) (vertex 1. 0. 1.) (vertex 0. 0. 1.) (vertex left bottom front) (vertex 0. 0. 1.) (vertex 0. 0. 1.) (vertex left top front) (vertex 0. 1. 1.) (vertex 0. 0. 1.)
                ;; Back face
                (vertex right top back) (vertex 1. 1. 1.) (vertex 0. 0. -1.) (vertex left top back)  (vertex 0. 1. 1.) (vertex 0. 0. -1.) (vertex left bottom back) (vertex 0. 0. 1.) (vertex 0. 0. -1.) (vertex left bottom back) (vertex 0. 0. 1.) (vertex 0. 0. -1.) (vertex right bottom back) (vertex 1. 0. 1.) (vertex 0. 0. -1.) (vertex right top back) (vertex 1. 1. 1.) (vertex 0. 0. -1.)
                ;; Left face
                (vertex left top back)  (vertex 1. 0. 1.) (vertex -1. 0. 0.) (vertex left top front) (vertex 1. 1. 1.) (vertex -1. 0. 0.) (vertex left bottom front) (vertex 0. 1. 1.) (vertex -1. 0. 0.) (vertex left bottom front) (vertex 0. 1. 1.) (vertex -1. 0. 0.) (vertex left bottom back)  (vertex 0. 0. 1.) (vertex -1. 0. 0.) (vertex left top back) (vertex 1. 0. 1.) (vertex -1. 0. 0.)
                ;; Right face
                (vertex right top front) (vertex 1. 1. 1.) (vertex 1. 0. 0.) (vertex right top back) (vertex 1. 0. 1.) (vertex 1. 0. 0.) (vertex right bottom back) (vertex 0. 0. 1.) (vertex 1. 0. 0.) (vertex right bottom back) (vertex 0. 0. 1.) (vertex 1. 0. 0.) (vertex right bottom front) (vertex 0. 1. 1.) (vertex 1. 0. 0.) (vertex right top front) (vertex 1. 1. 1.) (vertex 1. 0. 0.)
                ;; Top face
                (vertex left top back) (vertex 0. 0. 1.) (vertex 0. 1. 0.) (vertex right top back) (vertex 1. 0. 1.) (vertex 0. 1. 0.) (vertex right top front) (vertex 1. 1. 1.) (vertex 0. 1. 0.) (vertex right top front) (vertex 1. 1. 1.) (vertex 0. 1. 0.) (vertex left top front) (vertex 0. 1. 1.) (vertex 0. 1. 0.) (vertex left top back) (vertex 0. 0. 1.) (vertex 0. 1. 0.)
                ;; Bottom face
                (vertex left bottom front) (vertex 0. 1. 1.) (vertex 0. -1. 0.) (vertex right bottom front) (vertex 1. 1. 1.) (vertex 0. -1. 0.) (vertex right bottom back) (vertex 1. 0. 1.) (vertex 0. -1. 0.) (vertex right bottom back) (vertex 1. 0. 1.) (vertex 0. -1. 0.) (vertex left bottom back) (vertex 0. 0. 1.) (vertex 0. -1. 0.) (vertex left bottom front) (vertex 0. 1. 1.) (vertex 0. -1. 0.))))
        vertices)))
  
  
  (method public (for-each-triangle proc)
    (let (iter (scan (get-triangles)))
      (when (not-null? scan)
        (bind (v1 t1 n1 v2 t2 n2 v3 t2 n3 . rest) scan
          (proc v1 v2 v3 n1)
          (iter rest)))))
  
  
  (method public (ray-closest-triangle p <f32vector> d <f32vector> filter <procedure+>)
    (let ((closest #f)
          (distance -1.))
      (for-each-triangle
        (lambda (v1 v2 v3 normal)
          (when (or (not filter)
                    (filter self normal))
            (let ((dist (ray-triangle-distance p d v1 v2 v3)))
              (when (and (/= dist -1.)
                         (or (= distance -1.)
                             (< dist distance)))
                (set! closest (list v1 v2 v3 normal dist))
                (set! distance dist))))))
      closest))
  
  
  (method protected virtual (update-radius)
    (set! radius-x (/ width 2))
    (set! radius-y (/ height 2))
    (set! radius-z (/ depth 2))
    (set! radius (vertex-norm (vertex radius-x radius-y radius-z))))
  
  
  (method public virtual (set-position v <f32vector>) <void>
    (set! x (vertex-x v))
    (set! y (vertex-y v))
    (set! z (vertex-z v))
    (update-position))
  
  
  (method protected virtual (update-position)
    (set! center (vertex x y z))
    (set! left (- x radius-x))
    (set! bottom (- y radius-y))
    (set! back (- z radius-z))
    (set! right (+ x radius-x))
    (set! top (+ y radius-y))
    (set! front (+ z radius-z))
    (set! triangles #f))
  
  
  (method public (set-color col)
    (set! color col)
    (update-color))
  
  
  (method (update-color)
    (set! red~self (get-red~ color))
    (set! green~self (get-green~ color))
    (set! blue~self (get-blue~ color))
    (set! alpha~self (get-alpha~ color)))
  
  
  (method public (contains-vertex? vert <f32vector>) <bool>
    (and (>= (vertex-x vert) left)
         (>= (vertex-y vert) bottom)
         (>= (vertex-z vert) back)
         (<= (vertex-x vert) right)
         (<= (vertex-y vert) top)
         (<= (vertex-z vert) front)))
  
  
  (method override (draw)
    (if (get-3d?~ world)
        (if (get-textures?~ zone)
            (draw-3d-textured)
          (draw-3d))
      (if (get-textures?~ zone)
          (draw-2d-textured)
        (draw-2d))))
  
  
  (method protected virtual (draw-3d)
    (glColor4f red green blue alpha)
    (let ((x1 (get-left))
          (x2 (get-right))
          (y1 (get-bottom))
          (y2 (get-top))
          (z1 (get-back))
          (z2 (get-front)))
      (render-block x1 x2 y1 y2 z1 z2 GL_QUADS)
      (when (get-block-stiches?~ zone)
        (gl-colorize {Color red: .459 green: .280 blue: .002})
        (render-block x1 x2 y1 y2 z1 z2 GL_LINE_LOOP))))
  
  
  (method protected virtual (draw-3d-textured)
    (when texture
      (glPushMatrix)
      (glTranslatef x y z)
      (glRotatef rtri 1.0 1.0 1.0)
      (glScalef 1.0 1.0 1.0)
      (let ((f -2.5)
            (t 2.5))
        ;; top
        (glNormal3f 0.0 1.0 0.0)
        (textured-quad~ texture
          (lambda () (glVertex3f t t f))
          (lambda () (glVertex3f f t f))
          (lambda () (glVertex3f f t t))
          (lambda () (glVertex3f t t t)))
        ;; bottom
        (glNormal3f 0.0 -1.0 0.0)
        (textured-quad~ texture
          (lambda () (glVertex3f t f t))
          (lambda () (glVertex3f f f t))
          (lambda () (glVertex3f f f f))
          (lambda () (glVertex3f t f f)))
        ;; front
        (glNormal3f 0.0 0.0 1.0)
        (textured-quad~ texture
          (lambda () (glVertex3f f f t))
          (lambda () (glVertex3f t f t))
          (lambda () (glVertex3f t t t))
          (lambda () (glVertex3f f t t)))
        ;; back
        (glNormal3f 0.0 0.0 -1.0)
        (textured-quad~ texture
          (lambda () (glVertex3f t f f))
          (lambda () (glVertex3f f f f))
          (lambda () (glVertex3f f t f))
          (lambda () (glVertex3f t t f)))
        ;; left
        (glNormal3f -1.0 0.0 0.0)
        (textured-quad~ texture
          (lambda () (glVertex3f f t t))
          (lambda () (glVertex3f f t f))
          (lambda () (glVertex3f f f f))
          (lambda () (glVertex3f f f t)))
        ;; right
        (glNormal3f 1.0 0.0 0.0)
        (textured-quad~ texture
          (lambda () (glVertex3f t t f))
          (lambda () (glVertex3f t t t))
          (lambda () (glVertex3f t f t))
          (lambda () (glVertex3f t f f))))
      (glPopMatrix)))
  
  
  (method (draw-2d)
    (let ((x1 (get-left))
          (y1 (get-top))
          (x2 (get-right))
          (y2 (get-bottom)))
      (glNormal3f 0.0 0.0 1.0)
      (if (in-history?)
          (glColor4f red green blue 0.5)
        (glColor4f red green blue alpha))
      (unless (in-history?)
        (glBegin GL_QUADS)
        (glVertex2f x1 y1)
        (glVertex2f x2 y1)
        (glVertex2f x2 y2)
        (glVertex2f x1 y2)
        (glEnd))
      (glColor3f .41176 .23921 .00392)
      (glBegin GL_LINE_LOOP)
      (glVertex2f x1 y1)
      (glVertex2f x2 y1)
      (glVertex2f x2 y2)
      (glVertex2f x1 y2)
      (glEnd)))
  
  
  (method (draw-2d-textured)
    (glPushMatrix)
    (glTranslatef x y z)
    (textured-quad~ texture
      (lambda () (glVertex3f (- radius-x) (- radius-y) (- radius-z)))
      (lambda () (glVertex3f radius-x (- radius-y) (- radius-z)))
      (lambda () (glVertex3f radius-x radius-y (- radius-z)))
      (lambda () (glVertex3f (- radius-x) radius-y (- radius-z))))
    (glPopMatrix))
  
  
  @w
  (method (draw-2d-textured)
    (glPushMatrix)
    (glTranslatef x y z)
    (textured-quad~ texture
      (lambda () (glVertex3f 0.0 0.0 0.0))
      (lambda () (glVertex3f 5.0 0.0 0.0))
      (lambda () (glVertex3f 5.0 5.0 0.0))
      (lambda () (glVertex3f 0.0 5.0 0.0)))
    (glPopMatrix))))
