;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Zones
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is WorldScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2014
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See http://github.com/gcartier/world for details.


(module world.zone jazz


(import (jazz.debuggee)
        (jazz.geometry)
        (jazz.graphic.opengl.glew)
        (jazz.io)
        (jazz.system)
        (world)
        (world.actor)
        (world.area)
        (world.atlas)
        (world.autoload)
        (world.block)
        (world.camera)
        (world.configure)
        (world.dye)
        (world.dyes)
        (world.element)
        (world.enemy)
        (world.entity)
        (world.entities)
        (world.face)
        (world.gadget)
        (world.geometry)
        (world.gravity)
        (world.history)
        (world.info)
        (world.light)
        (world.lighting)
        (world.log)
        (world.material)
        (world.opengl)
        (world.planet)
        (world.player)
        (world.polygon)
        (world.procedural)
        (world.profiling)
        (world.region)
        (world.renderer)
        (world.renderers)
        (world.scene)
        (world.sector)
        (world.serialization)
        (world.settings)
        (world.skybox)
        (world.sun)
        (world.syntax (phase syntax))
        (world.task)
        (world.texture)
        (world.triangle))


;;;
;;;; Zone
;;;


(class Zone extends Scene
  
  
  (property title                   <string+>    initialize #f              accessors generate)
  (property start-mode              <symbol>     initialize #f              accessors generate)
  (property start-eye               <f64vector+> initialize #f              accessors generate)
  (property start-eye-sight         <f64vector+> initialize #f              accessors generate)
  (property start-eye-up            <f64vector+> initialize #f              accessors generate)
  (property start-position          <f64vector+> initialize #f              accessors generate)
  (property start-sight             <f64vector+> initialize #f              accessors generate)
  (property start-up                <f64vector+> initialize #f              accessors generate)
  (property start-distance          <fl+>        initialize #f              accessors generate)
  (property floor-level             <fl+>        initialize 0.              accessors generate)
  (property missile-behavior        <symbol>     initialize 'destroy        accessors generate)
  (property ambient-color           <f32vector+> initialize #f              accessors generate)
  (property sun-color               <f32vector+> initialize #f              accessors generate)
  (property sun-cycle?              <bool>       initialize #t              accessors generate)
  (property start-time              <object>     initialize 'day            accessors generate)
  (property start-skybox            <object>     initialize #f              accessors generate)
  (property prepare-script          <object>     initialize #f              accessors generate)
  (property start-script            <object>     initialize #f              accessors generate)
  (property draw-me?                <bool>       initialize #t              accessors generate)
  (property properties              <object>     initialize '()             accessors generate)
  
  ;; world override properties
  (property ambient-gravity         <object>     initialize default-gravity accessors generate)
  (property jump-impulsion          <object>     initialize default-jump    accessors generate)
  (property start-grid?             <object>     initialize (unspecified)   accessors generate)
  (property start-axes?             <object>     initialize (unspecified)   accessors generate)
  
  
  (slot regions-dir                 <Directory>  initialize #f                        getter explicit)
  (slot regions-mutex               <object>     initialize (make-mutex 'regions)     getter generate)
  (slot regions                     <table>      initialize (make-table test: equal?) getter generate)
  (slot sectors                     <table>      initialize #f                        getter generate)
  (slot sector-size                 <fx>         initialize #f                        getter generate)
  (slot sector-radius               <fl>         initialize #f                        getter generate)
  (slot sector-diameter             <fl>         initialize #f                        getter generate)
  (slot sectors-generating          <fx>         initialize 0                         getter generate)
  (slot sectors-mutex               <object>     initialize #f                        getter generate)
  (slot debug-sectors?              <bool>       initialize #f                        accessors generate)
  (slot areas                       <table>      initialize #f                        getter generate)
  (slot area-size                   <fx>         initialize #f                        getter generate)
  (slot debug-areas?                <bool>       initialize #f                        accessors generate)
  (slot blocks                      <list>       initialize '()                       getter generate)
  (slot players                     <list>       initialize '()                       getter generate)
  (slot actors                      <list>       initialize '()                       getter generate)
  (slot entities                    <list>       initialize '()                       getter generate)
  (slot gravities                   <list>       initialize '()                       getter generate)
  (slot gadgets                     <list>       initialize '()                       getter generate)
  (slot marks                       <list>       initialize '()                       getter generate)
  (slot close-ambiance?             <bool>       initialize #t                        accessors generate)
  (slot editable-warned?            <bool>       initialize #f                        accessors generate)
  (slot generate-thread             <object>     initialize #f                        accessors generate)
  (slot lighting                    <Lighting>   initialize (new Lighting)            accessors generate)
  (slot daytime                     <fl>         initialize 0.                        getter generate)
  (slot daylight                    <fl>         initialize 0.                        accessors generate)
  (slot sun                         <Sun+>       initialize #f                        accessors generate)
  (slot sun-angle                   <fl>         initialize -.20                      accessors generate)
  (slot skybox                      <Skybox+>    initialize #f                        accessors generate)
  (slot designer                    <object>     initialize #f                        accessors generate)
  
  
  ;;;
  ;;;; Initialize
  ;;;
  
  
  ;; quicky for tests
  (method protected virtual (minecraft?)
    #f)
  
  
  (method protected virtual (needs-pumps?)
    #f)
  
  
  (method override (prepare rest)
    (nextmethod rest)
    (load-point 'zone-prepare)
    (prepare-blocks)
    (load-point 'zone-blocks)
    (set-current-zone self))
  
  
  (method override (finish rest)
    (nextmethod rest)
    (set! draw-me? (find-setting 'world.draw-me? #t))
    (set! ambient-color (or ambient-color (find-setting 'world.ambient-color #f) (dye 0.1 0.1 0.1 1.0)))
    (set! sun-color (or sun-color (find-setting 'world.sun-color #f) (dye 1.0 1.0 1.0 1.0)))
    (set! sun-cycle? (and sun-cycle? (find-setting 'world.sun-cycle? #t)))
    (cond ((sun-light?)
           (set-sun-effective~ lighting sun-color)
           (set-sun-coordinates~ lighting (vertex 10000.0 10000.0 10000.0)))
          (else
           (set-sun-effective~ lighting (dye 0. 0. 0. 0.))
           (set-sun-coordinates~ lighting (vertex 0. 0. 0.))))
    (set! start-time (world-setting 'world.start-time 'dawn 'default))
    (register-task 'generate generate-task)
    (register-task 'render (lambda (task) (render-task~ (current-world) task)))
    (when player-task?
      (register-task 'player (lambda (task) (player-task~ (current-world) task))))
    (when tick-task?
      (register-task 'tick (lambda (task) (tick-task~ (current-world) task))))
    (when sun-task?
      (register-task 'sun sun-task))
    (register-entity-classes)
    (prepare-skybox))
  
  
  (method (initialize-zone)
    (let ((world (current-world)))
      (setup-areas)
      (setup-sectors)
      (setup-boundaries)
      (setup-content)
      (setup-overrides)
      (when (zone-based?~ world)
        (setup-history~ world))))
  
  
  (method (start-zone)
    (start-task 'generate)
    (start-task 'render)
    (start-task 'player)
    (start-task 'tick)
    (start-task 'sun))
  
  
  (method (setup-overrides)
    (let ((world (current-world)))
      (when (specified? ambient-gravity)
        (set-ambient-gravity~ world ambient-gravity))
      (when (specified? jump-impulsion)
        (set-jump-impulsion~ world jump-impulsion))
      (when (specified? start-grid?)
        (set-grid?~ world start-grid?))
      (when (specified? start-axes?)
        (set-axes?~ world start-axes?))))
  
  
  (method override (print output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{a}" (or title "New")))))
  
  
  (method protected virtual (sector-class)
    Sector)
  
  
  (method protected virtual (populate-zone)
    )
  
  
  (method protected virtual (generate-physical sector)
    )
    
  
  (method protected virtual (generate-content?)
    #f)
  
  
  (method protected virtual (generate-content sector)
    (set-content-revision~ sector (get-current-content-revision))
    (set-content-uptodate?~ sector #t))
  
  
  (method protected virtual (before-close)
    )
  
  
  (method protected virtual (save-exit)
    )
  
  
  (method (determine-path)
    (let ((world (current-world)))
      (let ((moniker (get-moniker)))
        (if (not moniker)
            'new
          (let ((directories (get-zones-directories~ world)))
            (let (iter (moniker (get-parent~ moniker)) (path '()))
              (if (some? (lambda (dir)
                           (pathname=? moniker dir))
                         directories)
                  path
                (let ((parent (get-parent~ moniker)))
                  (if (not parent)
                      #f
                    (iter parent (cons (get-base~ moniker) path)))))))))))

  
  ;;;
  ;;;; Component
  ;;;
  
  
  (slot destroy-hooks initialize '() getter generate)
  
  
  (method (register-destroy-hook proc)
    (set! destroy-hooks (cons proc destroy-hooks)))
  
  
  (method (unregister-destroy-hook proc)
    (set! destroy-hooks (remove! proc destroy-hooks)))
  
  
  (method override (add-child child)
    (set! children (cons child children)))
  
  
  (method override (destroy-component)
    (destroy))
  
  
  (method override (destroy)
    (let ((world (current-world)))
      (stop-tasks)
      (for-each (lambda (proc)
                  (proc))
                destroy-hooks)
      (free-sectors)
      (free-regions)
      (when (and close-ambiance? (zone-based?~ world))
        (close-ambiance~ world))))
  
  
  (method (stop-tasks)
    (stop-task 'sun)
    (stop-task 'tick)
    (stop-task 'player)
    (stop-task 'render)
    (reset-content)
    (stop-task 'generate stop-generate))
  
  
  ;;;
  ;;;; Update
  ;;;
  
  
  (method (reset-zone)
    (set! blocks '())
    (set! players '())
    (set! actors '())
    (set! entities '())
    (set! gravities '()))
  
  
  (method virtual (setup-content)
    )
  
  
  (method (update-children)
    (set-current-me #f)
    (for-each (lambda (obj)
                (when (is? obj Element)
                  (add-element obj)))
              children))
  
  
  ;;;
  ;;;; Target
  ;;;
  
  
  (method public virtual (target-update target face face-rank poly)
    )
  
  
  ;;;
  ;;;; Designer
  ;;;
  
  
  (method (get-moniker)
    (get-origin~ (get-form~ designer)))
  
  
  (method (get-modified?)
    (get-modified?~ designer))
  
  
  (method (set-modified? flag)
    (let ((world (current-world)))
      (when #t @buggy (neq? flag (get-modified?~ designer))
        (set-modified?~ designer flag)
        (update-title~ world))))
  
  
  (method (read-element element property)
    (read-property element property))
  
  
  (method (write-element element property value)
    (set-property~ designer element property value))
  
  
  ;;;
  ;;;; Draw
  ;;;
  
  
  (method (draw-zone)
    (site (draw-zone on?: #t parent: draw-world)
      (let ((world (current-world)))
        (when skybox
          (draw-skybox~ skybox))
        (when (get-draw-elements?~ world)
          (draw-sectors~ world))
        (when debug-areas?
          (draw-debug-areas))
        (when debug-sectors?
          (draw-debug-sectors))
        (if (effective-draw-gadgets?~ world)
            (draw-gadgets)
          (draw-drawable-gadgets))
        (when (get-draw-marks?~ world)
          (draw-marks))
        (when (get-draw-atlas?~ world)
          (draw-atlas))
        (when (and sun (get-visible?~ sun))
          (register-sun))
        (gl-check-error))))
  
  
  ;;;
  ;;;; Blocks
  ;;;
  
  
  (method protected virtual (create-atlas)
    (let ((world (current-world)))
      (or (registered-atlas 'block)
          (let ((atlas (make-block-atlas~ world)))
            (register-atlas 'block atlas)
            atlas))))
  
  
  (method protected virtual (create-atlas-nearest)
    (let ((world (current-world)))
      (or (registered-atlas 'block-nearest)
          (let ((atlas (make-block-atlas~ world min-filter: GL_NEAREST)))
            (register-atlas 'block-nearest atlas)
            atlas))))
  
  
  (method protected virtual (create-opaque-material atlas)
    (new Material name: 'opaque atlas: atlas texture: (get-texture~ atlas) renderer: (get-opaque-renderer)))
  
  
  (method protected virtual (create-transparent-material atlas)
    (new Material name: 'transparent atlas: atlas texture: (get-texture~ atlas) renderer: (get-transparent-renderer)))
  
  
  (method protected virtual (prepare-blocks)
    (let ((world (current-world)))
      (let ((atlas (create-atlas))
            (atlas-nearest (create-atlas-nearest)))
        (let ((opaque-material (create-opaque-material atlas))
              (transparent-material (create-transparent-material atlas)))
          (prepare-block~ world atlas atlas-nearest opaque-material transparent-material)))))
  
  
  (method protected virtual (sample-program-image program)
    (case program
      ((opaque) "dirty")
      ((transparent) "rose")
      (else "funky")))
  
  
  ;;;
  ;;;; Skybox
  ;;;
  
  
  (method protected virtual (prepare-skybox)
    (set! skybox (let ((name (or start-skybox (find-setting 'world.skybox #f))))
                   (and name (let ((skybox (find-skybox name)))
                               (when skybox
                                 (prepare~ skybox))
                               skybox)))))
  
  
  (method (install-skybox sky)
    (prepare~ sky)
    (set! skybox sky))
  
  
  (method (remove-skybox)
    (set! skybox #f))
  
  
  ;;;
  ;;;; Boundaries
  ;;;
  
  
  (method (setup-boundaries)
    @w
    (set! boundaries (cuboid left bottom back right top front)))
  
  
  ;;;
  ;;;; Snapshots
  ;;;
  
  
  (method (snapshot-zone)
    (let ((world (current-world)))
      (new Snapshot
        (object->u8vector actors serialize)
        (object->u8vector gadgets serialize)
        (object->u8vector marks serialize)
        (object->u8vector (get-eye~ world) serialize)
        (object->u8vector sun-angle serialize))))
  
  
  (method (load-zone snapshot)
    (define (add elem)
      (add-element elem)
      (update-matrix~ elem))
    
    (let ((world (current-world)))
      (for-each remove-element actors)
      (for-each add (u8vector->object (get-actors~ snapshot) deserialize))
      (for-each remove-element gadgets)
      (for-each add (u8vector->object (get-gadgets~ snapshot) deserialize))
      (reset-marks)
      (set! marks (u8vector->object (get-marks~ snapshot) deserialize))
      (set-eye~ world (u8vector->object (get-camera~ snapshot) deserialize))
      (when sun-cycle?
        (position-sun (u8vector->object (get-sun-angle~ snapshot) deserialize)))))
  
  
  ;;;
  ;;;; Elements
  ;;;
  
  
  (method (add-element obj)
    (define (add-player)
      (set! players (cons obj players))
      (set! actors (cons obj actors))
      (set! entities (cons obj entities)))
    
    (define (add-actor)
      (set! actors (cons obj actors))
      (set! entities (cons obj entities)))
    
    (define (add-block)
      (set! blocks (cons obj blocks)))
    
    (define (add-gravity)
      (set! gravities (cons obj gravities))
      (set! gadgets (cons obj gadgets)))
    
    (define (add-gadget)
      (set! gadgets (cons obj gadgets)))
    
    (define (add-entity)
      (set! entities (cons obj entities)))
    
    (typecase obj
      ((Player) (add-player))
      ((Actor) (add-actor))
      ((Block) (add-block))
      ((Gravity-Well) (add-gravity))
      ((Gadget) (add-gadget))
      ((Entity) (add-entity)))
    (area-add-element (element-area obj) obj)
    (sector-add-element (element-sector obj) obj)
    obj)
  
  
  (method (remove-element obj)
    (define (remove-player)
      (set! players (remove! obj players))
      (set! actors (remove! obj actors))
      (set! entities (remove! obj entities)))
    
    (define (remove-actor)
      (set! actors (remove! obj actors))
      (set! entities (remove! obj entities)))
    
    (define (remove-block)
      (set! blocks (remove! obj blocks)))
    
    (define (remove-gravity)
      (set! gravities (remove! obj gravities))
      (set! gadgets (remove! obj gadgets)))
    
    (define (remove-gadget)
      (set! gadgets (remove! obj gadgets)))
    
    (define (remove-entity)
      (set! entities (remove! obj entities)))
    
    (typecase obj
      ((Player) (remove-player))
      ((Actor) (remove-actor))
      ((Block) (remove-block))
      ((Gravity-Well) (remove-gravity))
      ((Gadget) (remove-gadget))
      ((Entity) (remove-entity)))
    (area-remove-element (element-area obj) obj)
    (sector-remove-element (element-sector obj) obj)
    (close~ obj))
  
  
  (method (update-element element old-position)
    (update-area element old-position)
    (update-sector element old-position))
  
  
  (method (find-element predicate)
    (continuation-capture
      (lambda (return)
        (iterate-elements
          (lambda (element)
            (when (predicate element)
              (continuation-return return element))))
        #f)))
  
  
  (method (find-named-element name)
    (find-element
      (lambda (element)
        (eq? (get-name~ element) name))))
  
  
  (method (find-gadget predicate)
    (find-if predicate gadgets))
  
  
  (method (iterate-players proc)
    (for-each proc players))
  
  
  (method (iterate-actors proc)
    (for-each proc actors))
  
  
  (method (iterate-entities proc)
    (for-each proc entities))
  
  
  (method (iterate-gadgets proc)
    (for-each proc gadgets))
  
  
  (method (iterate-elements proc)
    (for-each proc blocks)
    (for-each proc entities))
  
  
  (method (draw-me)
    (let ((me (current-me)))
      (draw~ me)))
  
  
  (method (element-at vert)
    (continuation-capture
      (lambda (return)
        (let ((area (index-area (position-area-index vert))))
          (iterate-area-elements area
            (lambda (obj)
              (when (and (get-visible?~ obj)
                         (vertex=? (get-position~ obj) vert))
                (continuation-return return obj)))))
        #f)))
  
  
  (method (element-near vert)
    (let ((x (vertex-x vert))
          (y (vertex-y vert))
          (z (vertex-z vert))
          (radius .45))
      (let ((left (- x radius))
            (bottom (- y radius))
            (back (- z radius))
            (right (+ x radius))
            (top (+ y radius))
            (front (+ z radius)))
        (continuation-capture
          (lambda (return)
            (iterate-position-neighbor-areas vert 1
              (lambda (area)
                (iterate-area-elements area
                  (lambda (obj)
                    (when (and (get-visible?~ obj)
                               (let ((x (get-x~ obj))
                                     (y (get-y~ obj))
                                     (z (get-z~ obj)))
                                 (and (>= x left)
                                      (>= y bottom)
                                      (>= z back)
                                      (<  x right)
                                      (<  y top)
                                      (<  z front))))
                      (continuation-return return obj))))))
            #f)))))
  
  
  (method (validate-elements)
    (iterate-elements
      (lambda (element)
        (assert (real? (get-x~ element)))
        (assert (real? (get-y~ element)))
        (assert (real? (get-z~ element)))
        (assert (real? (get-red~ element)))
        (assert (real? (get-green~ element)))
        (assert (real? (get-blue~ element)))
        (assert (real? (get-alpha~ element))))))
  
  
  ;;;
  ;;;; Regions
  ;;;
  
  
  (proclaim (warn optimizations))
  
  
  (method protected virtual (region-class)
    World-Region)
  
  
  (method (with-regions-mutex thunk)
    (mutex-lock! regions-mutex)
    (prog1 (thunk)
      (mutex-unlock! regions-mutex)))
  
  
  (method (free-regions)
    (with-regions-mutex
      (lambda ()
        (iterate-table regions
          (lambda (index region <World-Region+>)
            (when region
              (close~ region))))
        (empty-table regions))))
  
  
  (method (iterate-regions proc)
    (iterate-directory~ (get-regions-dir)
      (lambda (file <File>)
        (when (extension=? (get-extension~ file) "mca")
          (let ((base <string> (get-base~ file)))
            (bind (x z) (split (substring base 2 (string-length base)) ".")
              (let ((x (string->number x))
                    (z (string->number z)))
                (proc file x z))))))))
  
  
  (method (compute-boundaries)
    (let ((inf 1000000))
      (let ((left inf)
            (right (- inf))
            (back inf)
            (front (- inf)))
        (iterate-regions
          (lambda (file x <fx> z <fx>)
            (when (< x left)
              (set! left x))
            (when (> x right)
              (set! right x))
            (when (< z back)
              (set! back z))
            (when (> z front)
              (set! front z))))
        (values left right back front))))
  
  
  (method protected virtual (get-regions-dir) <Directory>
    (unimplemented))
  
  
  (method (get-region region-index <pair>) <World-Region+>
    (define (region-name)
      (bind (region-x . region-z) region-index
        (format "r.{a}.{a}.mca" region-x region-z)))
    
    (with-regions-mutex
      (lambda ()
        (let ((value (table-ref regions region-index #t)))
          (if (neq? value #t)
              value
            (let ((dir (get-regions-dir))
                  (name (region-name)))
              (let ((file (new-file~ dir name)))
                (let ((region (if (exists?~ file)
                                  (bind (region-x . region-z) region-index
                                    (new (region-class) region-x region-z file))
                                #f)))
                  (table-set! regions region-index region)
                  region))))))))
  
  
  (method (sector-region sector-x <fx> sector-y <fx> sector-z <fx>) <World-Region+>
    (define (region-index)
      (cons (fxfloor/ sector-x region-size)
            (fxfloor/ sector-z region-size)))
    
    (get-region (region-index)))
  
  
  (proclaim (not warn optimizations))
  
  
  ;;;
  ;;;; Sectors
  ;;;
  
  
  (proclaim (warn optimizations))
  
  
  (method (setup-sectors)
    (set! sectors (make-table test: equal?))
    (set! sector-size (or (find-setting 'world.sector-size #f) 16))
    (set! sector-radius (let ((half (/ sector-size 2.)))
                          (vertex-norm (vertex half half half))))
    (set! sector-diameter (* sector-radius 2))
    (set! sectors-mutex (make-mutex 'sectors)))
  
  
  (method (element-sector-index element <Element>) <vector>
    (position-sector-index (get-position~ element)))
  
  
  (method (position-sector-index pos <f64vector>) <vector>
    (let ((size (cast <fl> sector-size)))
      (vector (fxfloor (/ (vertex-x pos) size))
              (fxfloor (/ (vertex-y pos) size))
              (fxfloor (/ (vertex-z pos) size)))))
  
  
  (method (position-sector pos) <Sector>
    (index-sector (position-sector-index pos)))
  
  
  (method (element-sector element) <Sector>
    (index-sector (element-sector-index element)))
  
  
  (method (index-sector index <vector>) <Sector>
    (or (table-ref sectors index #f)
        (let ((sector (new-sector index)))
          (table-set! sectors index sector)
          sector)))
  
  
  (method (coordinates-sector x y z) <Sector>
    (let ((index (static (make-vector 3))))
      (vector-set! index 0 x)
      (vector-set! index 1 y)
      (vector-set! index 2 z)
      (or (table-ref sectors index #f)
          (let ((index (vector x y z)))
            (let ((sector (new-sector index)))
              (table-set! sectors index sector)
              sector)))))
  
  
  (method (new-sector index <vector>) <Sector>
    (define (center i <fx>)
      (* (+ (cast <fl> i) .5) sector-size))
    
    (let ((x (vector-ref index 0))
          (y (vector-ref index 1))
          (z (vector-ref index 2)))
      (new (sector-class) index (vertex (center x) (center y) (center z)))))
  
  
  (proclaim (not warn optimizations))
  
  
  (method (unlink-sector sector)
    ;; doesnt-work-as-is-see-unlink-area-comment
    )
  
  
  (method (free-sectors)
    (iterate-table sectors
      (lambda (index sector)
        (free-mesh~ sector))))
  
  
  (method (sector-add-element sector element)
    (define (add-block)
      (set-blocks~ sector (cons element (get-blocks~ sector)))
      (set-vertices-uptodate?~ sector #f)
      (set-lightmap-uptodate?~ sector #f))
    
    (define (add-entity)
      (set-entities~ sector (cons element (get-entities~ sector))))
    
    (typecase element
      ((Block)
       (add-block))
      ((Gadget))
      ((Entity)
       (add-entity)))
    (invalidate-lightmaps element))
  
  
  (method (sector-remove-element sector element)
    (define (remove-block)
      (let ((blocks (remove! element (get-blocks~ sector))))
        (set-blocks~ sector blocks)
        (set-vertices-uptodate?~ sector #f)
        (set-lightmap-uptodate?~ sector #f)
        (when (null? blocks)
          (unlink-sector sector))))
    
    (define (remove-entity)
      (set-entities~ sector (remove! element (get-entities~ sector))))
    
    (typecase element
      ((Block)
       (remove-block))
      ((Gadget))
      ((Entity)
       (remove-entity)))
    (invalidate-lightmaps element))
  
  
  (method (update-sector element old-position)
    (let ((old-index (position-sector-index old-position))
          (new-index (element-sector-index element)))
      (unless (equal? old-index new-index)
        (let ((old-sector (index-sector old-index))
              (new-sector (index-sector new-index)))
          (sector-remove-element old-sector element)
          (sector-add-element new-sector element)))))
  
  
  (method (iterate-sectors-with-blocks proc)
    (iterate-table sectors
      (lambda (index sector)
        (when (not-null? (get-blocks~ sector))
          (proc index sector)))))
  
  
  (proclaim (warn optimizations))
  
  
  (method (iterate-position-neighbor-sectors pos distance <fx> proc)
    (let ((index (position-sector-index pos)))
      (let ((a <fx> (vector-ref index 0))
            (b <fx> (vector-ref index 1))
            (c <fx> (vector-ref index 2)))
        (loop (for i from (- distance) to distance)
              (loop (for j from (- distance) to distance)
                    (loop (for k from (- distance) to distance)
                          (proc (coordinates-sector (+ a i) (+ b j) (+ c k)))))))))
  
  
  (method (iterate-position-outward-neighbor-sectors pos distance <fx> proc)
    (let ((index (position-sector-index pos)))
      (proc (index-sector index))
      (let ((a <fx> (vector-ref index 0))
            (b <fx> (vector-ref index 1))
            (c <fx> (vector-ref index 2)))
        (loop (for radius from 1 to distance)
              (let ((radius-1 (- radius 1)))
                ;; left
                (let ((i (- a radius)))
                  (loop (for j from (- radius) to radius)
                        (loop (for k from (- radius) to radius)
                              (proc (coordinates-sector i (+ b j) (+ c k))))))
                ;; right
                (let ((i (+ a radius)))
                  (loop (for j from (- radius) to radius)
                        (loop (for k from (- radius) to radius)
                              (proc (coordinates-sector i (+ b j) (+ c k))))))
                ;; bottom
                (let ((j (- b radius)))
                  (loop (for i from (- radius-1) to radius-1)
                        (loop (for k from (- radius) to radius)
                              (proc (coordinates-sector (+ a i) j (+ c k))))))
                ;;p
                (let ((j (+ b radius)))
                  (loop (for i from (- radius-1) to radius-1)
                        (loop (for k from (- radius) to radius)
                              (proc (coordinates-sector (+ a i) j (+ c k))))))
                ;; back
                (let ((k (- c radius)))
                  (loop (for i from (- radius-1) to radius-1)
                        (loop (for j from (- radius-1) to radius-1)
                              (proc (coordinates-sector (+ a i) (+ b j) k)))))
                ;; front
                (let ((k (+ c radius)))
                  (loop (for i from (- radius-1) to radius-1)
                        (loop (for j from (- radius-1) to radius-1)
                              (proc (coordinates-sector (+ a i) (+ b j) k))))))))))
    
  
  (definition eye-index
    #f)
  
  (definition eye-sectors
    #f)
  
  ;; for debugging
  (method package (get-eye-index)
    eye-index)
  
  ;; for debugging
  (method package (get-eye-sectors)
    eye-sectors)
  
  (method (reset-eye-sectors)
    (set! eye-index #f)
    (set! eye-sectors #f))
  
  
  (method (eye-neighbor-sectors pos distance <fx>) <vector>
    (let ((index (position-sector-index pos)))
      (if (equal? index eye-index)
          eye-sectors
        (let ((a <fx> (vector-ref index 0))
              (b <fx> (vector-ref index 1))
              (c <fx> (vector-ref index 2))
              (sectors (make-vector (expt (+ distance 1 distance) 3)))
              (n 0))
          (define (add sector)
            (vector-set! sectors n sector)
            (increase! n))
          
          (add (index-sector index))
          (loop (for radius from 1 to distance)
                (let ((radius-1 (- radius 1)))
                  ;; left
                  (let ((i (- a radius)))
                    (loop (for j from (- radius) to radius)
                          (loop (for k from (- radius) to radius)
                                (add (coordinates-sector i (+ b j) (+ c k))))))
                  ;; right
                  (let ((i (+ a radius)))
                    (loop (for j from (- radius) to radius)
                          (loop (for k from (- radius) to radius)
                                (add (coordinates-sector i (+ b j) (+ c k))))))
                  ;; bottom
                  (let ((j (- b radius)))
                    (loop (for i from (- radius-1) to radius-1)
                          (loop (for k from (- radius) to radius)
                                (add (coordinates-sector (+ a i) j (+ c k))))))
                  ;; top
                  (let ((j (+ b radius)))
                    (loop (for i from (- radius-1) to radius-1)
                          (loop (for k from (- radius) to radius)
                                (add (coordinates-sector (+ a i) j (+ c k))))))
                  ;; back
                  (let ((k (- c radius)))
                    (loop (for i from (- radius-1) to radius-1)
                          (loop (for j from (- radius-1) to radius-1)
                                (add (coordinates-sector (+ a i) (+ b j) k)))))
                  ;; front
                  (let ((k (+ c radius)))
                    (loop (for i from (- radius-1) to radius-1)
                          (loop (for j from (- radius-1) to radius-1)
                                (add (coordinates-sector (+ a i) (+ b j) k)))))))
          (set! eye-index index)
          (set! eye-sectors sectors)
          eye-sectors))))
  
  
  (method (draw-eye-neighbors camera <Camera> view-distance <fx> @radius <fl> proc)
    (let ((world (current-world))
          (camera-position (get-position~ camera)))
      (let ((sectors (eye-neighbor-sectors camera-position view-distance)))
        (loop (for i from 0 below (vector-length sectors))
              (let ((sector <Sector> (vector-ref sectors i)))
                (let ((center (get-center~ sector)))
                  ;; this hack for big entities like trees slows
                  ;; down render and is not 100% correct anyways
                  ;; (< (f64-ref (vertex-distance& camera-position center)) radius)
                  (when (in-frustum?~ camera center)
                    (update~ sector)
                    (proc sector))))))))
  
  
  (proclaim (not warn optimizations))
  
  
  (method (iterate-element-neighbor-sectors element distance proc)
    (iterate-position-neighbor-sectors (get-position~ element) distance proc))
  
  
  (method (element-neighbor-sectors element distance)
    (let ((queue (new-queue)))
      (iterate-element-neighbor-sectors element distance (lambda (sector) (enqueue queue sector)))
      (queue-list queue)))
  
  
  (method (increase-sectors-generating count <fx>)
    (mutex-lock! sectors-mutex)
    (when (= sectors-generating 0)
      (active-site 'generate)
      (active-site 'generate-sequential)
      (active-site 'content)
      (active-site 'read-chunk))
    (set! sectors-generating (+ sectors-generating count))
    (mutex-unlock! sectors-mutex))
  
  
  (method (decrease-sectors-generating count <fx>)
    (mutex-lock! sectors-mutex)
    (set! sectors-generating (- sectors-generating count))
    (when (= sectors-generating 0)
      (inactive-site 'generate)
      (inactive-site 'generate-sequential)
      (inactive-site 'content)
      (inactive-site 'read-chunk))
    (mutex-unlock! sectors-mutex))
  
  
  (method (compute-floats)
    (let ((total 0))
      (iterate-table sectors
                     (lambda (index sector)
                       (let ((mesh (get-mesh~ sector)))
                         (when (and mesh (get-vertices-uptodate?~ sector))
                           (let ((floats (count-floats~ mesh)))
                             (when floats
                               (increase! total floats)))))))
      total))
  
  
  (method (count-non-empty-sectors)
    (let ((total 0))
      (iterate-table sectors
        (lambda (index sector)
          (let ((mesh (get-mesh~ sector)))
            (when mesh
              (increase! total)))))
      total))
  
  
  (method (validate-sectors)
    )
  
  
  (method (toggle-debug-sectors)
    (let ((world (current-world)))
      (set! debug-sectors? (not debug-sectors?))
      (update-parameter~ world 'debug-sectors)))
  
  
  (method (draw-debug-sectors)
    (let ((world (current-world))
          (me (current-me)))
      (let ((index (element-sector-index me))
            (size (cast <fl> sector-size))
            (depth 5))
        (let ((bx (* (vector-ref index 0) size))
              (by (* (vector-ref index 1) size))
              (bz (* (vector-ref index 2) size))
              (hx (- (* size depth)))
              (tx (* size depth))
              (hy 0.)
              (ty size)
              (hz (- (* size depth)))
              (tz (* size depth)))
          (define (vert x y z)
            (glVertex3f (+ bx x)
                        (+ by y)
                        (+ bz z)))
          
          (glDisable GL_LIGHTING)
          (gl-colorize-dye red-dye)
          (glBegin GL_LINES)
          (loop (for x <fl> from hx to tx by size)
                (loop (for y <fl> from hy to ty by size)
                      (vert x y hz)
                      (vert x y tz))
                (loop (for z <fl> from hz to tz by size)
                      (vert x hy z)
                      (vert x ty z)))
          (glEnd)
          (glBegin GL_LINES)
          (loop (for y <fl> from hy to ty by size)
                (loop (for x <fl> from hx to tx by size)
                      (vert x y hz)
                      (vert x y tz))
                (loop (for z <fl> from hz to tz by size)
                      (vert hx y z)
                      (vert tx y z)))
          (glEnd)
          (glBegin GL_LINES)
          (loop (for z <fl> from hz to tz by size)
                (loop (for x <fl> from hx to tx by size)
                      (vert x hy z)
                      (vert x ty z))
                (loop (for y <fl> from hy to ty by size)
                      (vert hx y z)
                      (vert tx y z)))
          (glEnd)
          (glEnable GL_LIGHTING)))))
  
  
  ;;;
  ;;;; Areas
  ;;;
  
  
  (proclaim (warn optimizations))
  
  
  (method (setup-areas)
    (set! areas (make-table test: equal?))
    (set! area-size 2))
  
  
  (method (element-area-index element <Element>) <vector>
    (position-area-index (get-position~ element)))
  
  
  (method (position-area-index pos <f64vector>) <vector>
    (let ((size (cast <fl> area-size)))
      (vector (fxfloor (/ (vertex-x pos) size))
              (fxfloor (/ (vertex-y pos) size))
              (fxfloor (/ (vertex-z pos) size)))))
  
  
  (method (position-area pos) <Area>
    (index-area (position-area-index pos)))
  
  
  (method (element-area element) <Area>
    (index-area (element-area-index element)))
  
  
  (method (index-area index <vector> (update? #t)) <Area>
    (when update?
      (update-physical~ (area-coordinates-sector (vector-ref index 0) (vector-ref index 1) (vector-ref index 2))))
    (or (table-ref areas index #f)
        (let ((area (new Area index)))
          (table-set! areas index area)
          area)))
  
  
  (method (coordinates-area x y z) <Area>
    (update-physical~ (area-coordinates-sector x y z))
    (let ((index (static (make-vector 3))))
      (vector-set! index 0 x)
      (vector-set! index 1 y)
      (vector-set! index 2 z)
      (or (table-ref areas index #f)
          (let ((index (vector x y z)))
            (let ((area (new Area index)))
              (table-set! areas index area)
              area)))))
  
  
  (method (area-coordinates-sector x <fx> y <fx> z <fx>) <Sector>
    (coordinates-sector (arithmetic-shift-right x 3)
                        (arithmetic-shift-right y 3)
                        (arithmetic-shift-right z 3)))
  
  
  (proclaim (not warn optimizations))
  
  
  (method (unlink-area area)
    @doesnt-work-as-is-because-hit-test-will-consult/create-the-27-adjacent-areas-even-if-they-are-empty
    (table-clear areas (get-index~ area)))
  
  
  (method (area-add-element area element)
    (define (add-actor)
      (set-actors~ area (cons element (get-actors~ area))))
    
    (define (add-block)
      (set-blocks~ area (cons element (get-blocks~ area)))
      (add-polygons~ (element-area element) element (element-polygons~ element) #f))
    
    (define (add-gadget)
      (set-gadgets~ area (cons element (get-gadgets~ area))))
    
    (define (add-entity)
      (set-entities~ area (cons element (get-entities~ area)))
      ;; need to optimize
      (when (get-physical?~ element)
        (let ((polygons (element-polygons~ element))
              (table (make-table test: eq?)))
          (for-each (lambda (polygon)
                      (let ((area (position-area (get-origin~ polygon))))
                        (table-add table area polygon)))
                    polygons)
          (iterate-table table
            (lambda (area polygons)
              (add-polygons~ area element polygons #f))))))
    
    (cond ((and (is? element Actor) (is-not? element Missile))
           (add-actor))
          ((is? element Block)
           (add-block))
          ((is? element Gadget)
           (add-gadget))
          ((is? element Entity)
           (add-entity))))
  
  
  (method (area-remove-element area element)
    (define (remove-actor)
      (let ((actors (remove! element (get-actors~ area))))
        (set-actors~ area actors)
        (when (and (null? actors) (null? (get-blocks~ area)) (null? (get-gadgets~ area)))
          (unlink-area area))))
    
    (define (remove-block)
      (let ((blocks (remove! element (get-blocks~ area))))
        (set-blocks~ area blocks)
        (remove-polygons~ area element)
        (when (and (null? blocks) (null? (get-actors~ area)) (null? (get-gadgets~ area)))
          (unlink-area area))))
    
    (define (remove-gadget)
      (let ((gadgets (remove! element (get-gadgets~ area))))
        (set-gadgets~ area gadgets)
        (when (and (null? gadgets) (null? (get-actors~ area)) (null? (get-blocks~ area)))
          (unlink-area area))))
    
    (define (remove-entity)
      (let ((entities (remove! element (get-entities~ area))))
        (set-entities~ area entities)
        ;; need to optimize
        (when (get-physical?~ element)
          (let ((polygons (element-polygons~ element))
                (table (make-table test: eq?)))
            (for-each (lambda (polygon)
                        (let ((area (position-area (get-origin~ polygon))))
                          (table-set! table area #t)))
                      polygons)
            (iterate-table table
              (lambda (area ignore)
                (remove-polygons~ area element)))))
        (when (and (null? gadgets) (null? (get-actors~ area)) (null? (get-blocks~ area)))
          (unlink-area area))))
    
    (cond ((is? element Actor)
           (remove-actor))
          ((is? element Block)
           (remove-block))
          ((is? element Gadget)
           (remove-gadget))
          ((is? element Entity)
           (remove-entity))))
  
  
  (method (update-area element old-position)
    (let ((old-index (position-area-index old-position))
          (new-index (element-area-index element)))
      (unless (equal? old-index new-index)
        (let ((old-area (index-area old-index))
              (new-area (index-area new-index)))
          (area-remove-element old-area element)
          (area-add-element new-area element)))))
  
  
  (method (iterate-position-neighbor-areas pos distance <fx> proc)
    (let ((index (position-area-index pos)))
      (let ((a <fx> (vector-ref index 0))
            (b <fx> (vector-ref index 1))
            (c <fx> (vector-ref index 2)))
        (loop (for i from (- distance) to distance)
              (loop (for j from (- distance) to distance)
                    (loop (for k from (- distance) to distance)
                          (proc (coordinates-area (+ a i) (+ b j) (+ c k)))))))))
  
  
  (method (iterate-area-elements area proc)
    (for-each proc (get-blocks~ area))
    (for-each proc (get-actors~ area))
    (for-each proc (get-entities~ area))
    (for-each proc (get-gadgets~ area)))
  
  
  (method (collect-area-elements)
    (let ((queue (new-queue)))
      (iterate-table areas
        (lambda (index area)
          (enqueue-list queue (get-blocks~ area))
          (enqueue-list queue (get-actors~ area))
          (enqueue-list queue (get-entities~ area))
          (enqueue-list queue (get-gadgets~ area))))
      (queue-list queue)))
  
  
  (method (areas-count filter)
    (count-if filter (collect-area-elements)))
  
  
  (method (count-polygons)
    (let ((count 0))
      (iterate-table areas
        (lambda (index area)
          (let ((polygons (get-polygons~ area)))
            (when polygons
              (increase! count (/ (f64vector-length polygons) polygon-float-size))))))
      count))
  
  
  (method (validate-areas)
    (let ((world (current-world)))
      (let ((blocks-count 0)
            (actors-count 0)
            (gadgets-count 0))
        (iterate-table areas
          (lambda (index area)
            (let ((area-blocks (length (get-blocks~ area)))
                  (area-actors (length (get-actors~ area)))
                  (area-gadgets (length (get-gadgets~ area))))
              (increase! blocks-count area-blocks)
              (increase! actors-count area-actors)
              (increase! gadgets-count area-gadgets))))
        (if (and (= blocks-count (length blocks))
                 (= actors-count (length actors))
                 (= gadgets-count (length gadgets)))
            (begin
              (unregister-info 'corrupted-areas)
              #t)
          (register-info 'corrupted-areas
            (lambda (add-section add-info)
              (let ((section (add-section "Corrupted areas")))
                (add-info section "blocks" (format "{s} {s}" blocks-count (length blocks)))
                (add-info section "actors" (format "{s} {s}" actors-count (length actors)))
                (add-info section "gadgets" (format "{s} {s}" gadgets-count (length gadgets))))))
          #f))))
  
  
  (method (toggle-debug-areas)
    (let ((world (current-world)))
      (set! debug-areas? (not debug-areas?))
      (update-parameter~ world 'debug-areas)))
  
  
  (method (draw-debug-areas)
    (let ((world (current-world))
          (me (current-me)))
      (let ((index (element-area-index me))
            (size (cast <fl> area-size))
            (depth 5))
        (let ((bx (* (vector-ref index 0) size))
              (by (* (vector-ref index 1) size))
              (bz (* (vector-ref index 2) size))
              (hx (- (* size depth)))
              (tx (* size depth))
              (hy 0.)
              (ty size)
              (hz (- (* size depth)))
              (tz (* size depth)))
          (define (vert x y z)
            (glVertex3f (+ bx x)
                        (+ by y)
                        (+ bz z)))
          
          (glDisable GL_LIGHTING)
          (gl-colorize-dye red-dye)
          (glBegin GL_LINES)
          (loop (for x <fl> from hx to tx by size)
                (loop (for y <fl> from hy to ty by size)
                      (vert x y hz)
                      (vert x y tz))
                (loop (for z <fl> from hz to tz by size)
                      (vert x hy z)
                      (vert x ty z)))
          (glEnd)
          (glBegin GL_LINES)
          (loop (for y <fl> from hy to ty by size)
                (loop (for x <fl> from hx to tx by size)
                      (vert x y hz)
                      (vert x y tz))
                (loop (for z <fl> from hz to tz by size)
                      (vert hx y z)
                      (vert tx y z)))
          (glEnd)
          (glBegin GL_LINES)
          (loop (for z <fl> from hz to tz by size)
                (loop (for x <fl> from hx to tx by size)
                      (vert x hy z)
                      (vert x ty z))
                (loop (for y <fl> from hy to ty by size)
                      (vert hx y z)
                      (vert tx y z)))
          (glEnd)
          (glEnable GL_LIGHTING)))))
  
  
  ;;;
  ;;;; Gadget
  ;;;
  
  
  (method (draw-gadgets)
    (for-each (lambda (gadget)
                (register-entity gadget #t))
              gadgets))
  
  
  (method (draw-drawable-gadgets)
    (for-each (lambda (gadget)
                (when (and (drawable?~ gadget)
                           (get-visible?~ gadget))
                  (register-entity gadget)))
              gadgets))
  
  
  ;;;
  ;;;; Blocks
  ;;;
  
  
  (method (remove-duplicate-blocks)
    (let ((world (current-world)))
      (let ((table (make-table test: vertex=? hash: vertex-hash))
            (count 0))
        (for-each (lambda (block)
                    (let ((pos (get-position~ block)))
                      (if (table-ref table pos #f)
                          (begin
                            (editor-remove-element~ world block)
                            (increase! count))
                        (table-set! table pos block))))
                  blocks)
        (display-message~ world
          (format "Removed {a} block{a}"
                  (format-cardinality count)
                  (format-plural count))))))
  
  
  ;;;
  ;;;; Sun
  ;;;
  
  
  (definition sun-speed <fl>
    .025)
  
  
  (method (set-sun-speed speed)
    (set! sun-speed speed))
  
  
  (method (sun-task task <Task>)
    (declare (proper-tail-calls))
    (let ((world (current-world)))
      (with-log-context "sun" sun-id support-state task
        (lambda (log-context)
          (set-context~ task log-context)
          (continuation-capture
            (lambda (exit)
              (ready-task~ task)
              (let (restart-loop)
                (with-current-loop
                  (lambda ()
                    (with-restart-catcher 'resume-loop (present-current-loop-restart)
                      (lambda ()
                        (if (not sun-cycle?)
                            (task-sleep +infinity exit support-state)
                          (let (iter (previous (current-seconds)))
                            (let ((time (current-seconds)))
                              (let ((elapse (- time previous)))
                                (unless (get-paused?~ world)
                                  (with-task-mutex sun-sequential-state
                                    (lambda ()
                                      (unless (task-stopping?)
                                        (tick-sun elapse)))))
                                (let ((duration (- (current-seconds) time)))
                                  (task-sleep (- sun-rate duration) exit #f))
                                (iter time)))))))))
                (restart-loop))))))))
  
  
  (method (tick-sun elapse (reverse? #f))
    (site (sun on?: #t)
      (position-sun ((if reverse? - +) sun-angle (* sun-speed elapse)))))
  
  
  (method (position-sun angle)
    (set! sun-angle (flmodulo angle PI*2))
    (let ((under-limit 0.1)
          (direction (rotate-upon& PI/4 (vertex 0.0 1.0 0.0) (rotate-upon& sun-angle (vertex 0.0 0.0 -1.0) (vertex -1. 0. 0.)))))
      (let ((pos (vertex-scalar* direction 1000.)))
        (when (not sun)
          (set! sun (new Sun parent: self position: pos))
          (add-element sun))
        (cond ((or (< sun-angle (+ PI under-limit))
                   (> sun-angle (- PI*2 under-limit)))
               (let ((coord (vertex-scalar* direction 1000.))
                     (under (cond ((> sun-angle (- PI*2 under-limit)) (- PI*2 sun-angle))
                                  ((and (> sun-angle PI) (< sun-angle (+ PI under-limit))) (- sun-angle PI))
                                  (else 0.))))
                 (let ((intensity (- 1.0 (/ under under-limit))))
                   (let ((effective (dye (* (dye-red sun-color) intensity)
                                         (* (dye-green sun-color) intensity)
                                         (* (dye-blue sun-color) intensity)
                                         1.0)))
                     (sun-update-lighting effective coord)
                     (set-position~ sun pos)
                     (set-color~ sun effective)
                     (set-visible?~ sun #t)))))
              (else
               (set-sun-effective~ lighting (dye 0. 0. 0. 0.))
               (set-visible?~ sun #f)))
        (sun-update))))
  
  
  (method protected virtual (sun-light?)
    sun-cycle?)
  
  
  (method protected virtual (sun-update-lighting effective coord)
    (set-sun-effective~ lighting effective)
    (set-sun-coordinates~ lighting coord))
  
  
  (method protected virtual (sun-update)
    )
  
  
  (method (register-sun)
    (register-entity sun))
  
  
  ;;;
  ;;;; Day
  ;;;
  
  
  (method (set-daytime time)
    (set! daytime time)
    (set! daylight (daytime->daylight time)))
  
  
  (method (daytime->daylight daytime)
    ;; night
    (cond ((< daytime 6000.)
           0.)
          ;; dawn
          ((< daytime 9000.)
           (/ (- daytime 6000.) 3000.))
          ;; day
          ((< daytime 18000.)
           1.)
          ;; dusk
          ((< daytime 21000.)
           (/ (- 21000. daytime) 3000.))
          ;; night
          (else
           0.)))
  
  
  ;;;
  ;;;; Lighting
  ;;;
  
  
  (definition default-lights-cache
    #f)
  
  
  (method protected virtual (effective-lights)
    (let ((world (current-world)))
      (define (closest-lights)
        (let ((lights (collect-lights))
              (eye-position (get-position~ (get-eye~ world))))
          (sort < lights key: (lambda (light) (vertex-distance eye-position (get-position~ light))))))
      
      (if (get-lighting?~ world)
          (let ((lights (closest-lights)))
            (if (not-null? lights)
                lights
              (default-lights)))
        (default-lights))))
  
  
  (method protected virtual (effective-player-glow)
    -1.)
  
  
  (method (default-lights)
    (if (find-setting 'world.default-lights? #f)
        (or default-lights-cache
            (let ((lights (list (new Light-Ambient position: (vertex 0. 0. 0.)))))
              (set! default-lights-cache lights)
              lights))
      '()))
  
  
  (method (setup-lighting)
    (site (setup-lighting on?: #f parent: render)
      (let ((world (current-world)))
        (let ((lights (effective-lights)))
          (set-ambient-color~ lighting ambient-color)
          (set-lights~ lighting lights)
          (set-lights-count~ lighting (min (get-dynamic-lights~ world) (length lights)))
          (setup~ lighting)
          (set-current-lighting lighting)))))
  
  
  (method (iterate-lights proc)
    (iterate-gadgets
      (lambda (gadget)
        (when (is? gadget Light)
          (proc gadget)))))
  
  
  (method (collect-lights)
    (let ((queue (new-queue)))
      (iterate-lights
        (lambda (light)
          (enqueue queue light)))
      (queue-list queue)))
  
  
  (method (count-lights)
    (let ((count 0))
      (iterate-lights
        (lambda (light)
          (increase! count)))
      count))
  
  
  (method (invalidate-lightmaps element)
    )
  
  
  ;;;
  ;;;; Gravity
  ;;;
  
  
  (method public (iterate-gravities proc)
    (for-each proc gravities))
  
  
  (method public (iterate-planets proc)
    (iterate-gravities
      (lambda (well)
        (when (is? well Planet)
          (proc well)))))
  
  
  (method public (collect-planets)
    (let ((queue (new-queue)))
      (iterate-planets
        (lambda (planet)
          (enqueue queue planet)))
      (queue-list queue)))
  
  
  ;;;
  ;;;; Marks
  ;;;
  
  
  (method (reset-marks)
    (set! marks '()))
  
  
  (method (set-marks lst)
    (set! marks lst))
  
  
  (method (set-mark mark)
    (set! marks (list mark)))
  
  
  (method (add-mark mark)
    (set! marks (cons mark marks)))
  
  
  (method (remove-mark mark)
    (set! marks (remove! mark marks)))
  
  
  (method (draw-marks)
    (for-each draw~ marks))
  
  
  (method (reset-all-marks)
    (let ((world (current-world)))
      (reset-marks)
      (display-message~ world "Marks reset")))
  
  
  ;;;
  ;;;; Edition
  ;;;
  
  
  (method virtual (zone-editable?)
    #t)
  
  
  ;;;
  ;;;; Atlas
  ;;;
  
  
  (method (draw-atlas)
    @convert-effective-material
    (let ((world (current-world)))
      (unless (get-texture-arrays?)
        (let ((texture (get-texture~ (let ((elem (first-target~ world)))
                                       (if (is? elem Entity)
                                           (effective-material~ elem)
                                         (get-block-atlas~ world)))))
              (width 100.)
              (height 100.))
          (map-texture~ texture)
          (textured-quad~ texture
            (lambda () (glVertex3f 0.0 0.0 0.0))
            (lambda () (glVertex3f width 0.0 0.0))
            (lambda () (glVertex3f width height 0.0))
            (lambda () (glVertex3f 0.0 height 0.0)))))))
  
  
  ;;;
  ;;;; Heightmap
  ;;;
  
  
  (method (generate-heightmap-content sector <Sector> heightmap <f32vector> from-x <fx> width <fx> from-z <fx> depth <fx> what)
    (define (generate-done)
      (set-content-revision~ sector (get-current-content-revision))
      (set-content-uptodate?~ sector #t)
      (decrease-sectors-generating 1))
    
    (let ((world (current-world))
          (x-count (+ width 1))
          (z-count (+ depth 1)))
      (let ((count (f32vector-length heightmap)))
        (let ((vertices (make-vector count))
              (normals (make-vector count)))
          (define (get-vertex x <fx> z <fx>)
            (vector-ref vertices (+ (* x z-count) z)))
          (define (get-normal x <fx> z <fx>)
            (vector-ref normals (+ (* x z-count) z)))
          ;; fill vertices
          (loop (for x from 0 below x-count)
                (loop (for z from 0 below z-count)
                      (let ((index (+ (* x z-count) z)))
                        (let ((height (f32vector-ref heightmap index)))
                          (let ((x (cast <fl> (+ from-x x)))
                                (y (cast <fl> height))
                                (z (cast <fl> (+ from-z z))))
                            (vector-set! vertices index (vertex x y z))
                            (vector-set! normals index (vertex 0. 0. 0.)))))))
          ;; add triangles
          (let ((squares (make-vector (* width depth)))
                (sectors (make-table test: eq?))
                (areas (make-table test: eq?))
                (default-image (get-default-image~ world)))
            (let ((material (get-block-opaque~ world))
                  (uv (image-rect~ (get-block-atlas~ world) default-image)))
              (let ((tl (uv-left uv))
                    (tt (uv-top uv))
                    (tr (uv-right uv))
                    (tb (uv-bottom uv))
                    (texture-depth (uv-depth uv)))
                (define (safe-square x <fx> z <fx>)
                  (and
                    (>= x 0) (< x width)
                    (>= z 0) (< z depth)
                    (get-square x z)))
                (define (get-square x <fx> z <fx>)
                  (vector-ref squares (+ (* x depth) z)))
                (define (set-square x <fx> z <fx> square)
                  (vector-set! squares (+ (* x depth) z) square))
                (define (make-square t1 t2)
                  (cons t1 t2))
                (define (square-t1 square) <Smooth-Triangle>
                  (get-polygon~ (cast <Face> (car square))))
                (define (square-t2 square) <Smooth-Triangle>
                  (get-polygon~ (cast <Face> (cdr square))))
                (define (add-face face <Face>)
                  (let ((center (get-center~ (get-polygon~ face))))
                    (let ((sector (index-sector (position-sector-index center))))
                      (table-add sectors sector face))
                    (when (eq? what 'physical)
                      (let ((area (index-area (position-area-index center) #f)))
                        (table-add areas area (get-polygon~ face))))))
                (define (add-triangle v1 v2 v3)
                  (let ((normal (plane-normal v1 v2 v3)))
                    (let ((face
                            (if (> (vertex-x v1) (vertex-x v2))
                                (make-face material
                                           (f32vector tl tb tr tb tr tt)
                                           texture-depth
                                           (make-smooth-triangle self
                                                                 v1 v2 v3
                                                                 normal normal normal))
                              (make-face material
                                         (f32vector tr tt tl tt tl tb)
                                         texture-depth
                                         (make-smooth-triangle self
                                                               v1 v2 v3
                                                               normal normal normal)))))
                      (add-face face)
                      face)))
                ;; add triangles
                (loop (for x from 0 below width)
                      (loop (for z from 0 below depth)
                            (let ((v1 (get-vertex x (+ z 1)))
                                  (v2 (get-vertex (+ x 1) (+ z 1)))
                                  (v3 (get-vertex (+ x 1) z))
                                  (v4 (get-vertex x z)))
                              (let ((triangle1 (add-triangle v1 v2 v3))
                                    (triangle2 (add-triangle v3 v4 v1)))
                                (set-square x z (make-square triangle1 triangle2))))))
                ;; smooth normals
                (loop (for x from 0 below x-count)
                      (loop (for z from 0 below z-count)
                            (let ((normal (get-normal x z))
                                  (tl (safe-square (- x 1) (- z 1)))
                                  (tr (safe-square x (- z 1)))
                                  (bl (safe-square (- x 1) z))
                                  (br (safe-square x z)))
                              (when tl
                                (vertex-increase! normal (get-normal~ (square-t1 tl))))
                              (when tr
                                (vertex-increase! normal (get-normal~ (square-t1 tr)))
                                (vertex-increase! normal (get-normal~ (square-t2 tr))))
                              (when bl
                                (vertex-increase! normal (get-normal~ (square-t1 bl)))
                                (vertex-increase! normal (get-normal~ (square-t2 bl))))
                              (when br
                                (vertex-increase! normal (get-normal~ (square-t2 br))))
                              (vertex-normalize! normal normal))))
                ;; update normals
                (loop (for x from 0 below width)
                      (loop (for z from 0 below depth)
                            (let ((square (get-square x z)))
                              (set-n1~ (square-t1 square) (get-normal x (+ z 1)))
                              (set-n2~ (square-t1 square) (get-normal (+ x 1) (+ z 1)))
                              (set-n3~ (square-t1 square) (get-normal (+ x 1) z))
                              (set-n1~ (square-t2 square) (get-normal (+ x 1) z))
                              (set-n2~ (square-t2 square) (get-normal x z))
                              (set-n3~ (square-t2 square) (get-normal x (+ z 1))))))
                (case what
                  ((physical)
                   (when (eq? self (current-zone))
                     (iterate-table areas
                       (lambda (area <Area> polygons)
                         (add-polygons~ area #f polygons #f)))))
                  ((render)
                   (iterate-table sectors
                     (lambda (sector faces)
                       (receive (vertices neighbors) (prepare-vertices/neighbors~ sector faces)
                         (let ((lightmap (prepare-lightmap~ sector faces)))
                           (write-render-event
                             (lambda ()
                               (when (eq? self (current-zone))
                                 (free-mesh~ sector)
                                 (setup-mesh~ sector)
                                 (fill-vertices/neighbors~ sector (get-mesh~ sector) #f vertices neighbors)
                                 (set-vertices-uptodate?~ sector #t)
                                 (fill-lightmap~ sector (get-mesh~ sector) #f lightmap)
                                 (set-lightmap-uptodate?~ sector #t)
                                 (generate-done))))))))))))))))))


;;;
;;;; Procedural Zones
;;;


(proclaim (warn optimizations))


;; Ideally, this would use a PRNG which we can seed with a given value.
;; That way the map can be persisted using just the seed, and a list of changes.
;; Also I have no clue how this will react in multiplayer.
(class Procedural-Zone extends Zone
  
  
  (property detail-level <fl>               initialize 15. accessors generate)
  (property clamp-height <fl>               initialize 65. accessors generate)
  (property seed         <object>           initialize #f  accessors generate)
  (property generator    <Perlin-Generator> initialize #f  accessors generate)
  
  
  (method override (setup-component)
    (nextmethod)
    (random-seed seed)
    (set! generator (new Perlin-Generator detail-level clamp-height)))
  
  
  (method override (zone-editable?)
    (find-setting 'world.procedural-editable? #f))
  
  
  (method override (generate-content?)
    #t)
  
  
  (method override (generate-content sector <Sector>)
    (let ((index (get-index~ sector)))
      (let ((x <fx> (vector-ref index 0))
            (y <fx> (vector-ref index 1))
            (z <fx> (vector-ref index 2)))
        (when (= y 0)
          (let ((from-x (* x sector-size))
                (width sector-size)
                (from-z (* z sector-size))
                (depth sector-size))
            (generate-procedural sector from-x width from-z depth 'render)))))
    (set-content-revision~ sector (get-current-content-revision))
    (set-content-uptodate?~ sector #t)
    (decrease-sectors-generating 1))
  
  
  (method override (generate-physical sector <Sector>)
    (let ((index (get-index~ sector)))
      (let ((x <fx> (vector-ref index 0))
            (y <fx> (vector-ref index 1))
            (z <fx> (vector-ref index 2)))
        (when (= y 0)
          (let ((from-x (* x sector-size))
                (width sector-size)
                (from-z (* z sector-size))
                (depth sector-size))
            (generate-procedural sector from-x width from-z depth 'physical))))))
  
  
  (method (generate-procedural sector <Sector> from-x <fx> width <fx> from-z <fx> depth <fx> what)
    (let ((world (current-world))
          (x-count (+ width 1))
          (z-count (+ depth 1)))
      (define (generate-heightmap)
        (let ((heightmap <f32vector> (make-f32vector (* x-count z-count))))
          (loop (for x from 0 below x-count)
                (loop (for z from 0 below z-count)
                      (f32vector-set! heightmap (+ (* x z-count) z)
                        ;; max and min are quick hacks until perlin generator is fixed
                        (max 0. (min 10. (/ (get-value~ generator (cast <fl> (+ from-x x)) (cast <fl> (+ from-z z))) 5.))))))
          heightmap))
      
      (generate-heightmap-content sector (generate-heightmap) from-x width from-z depth what)))))
