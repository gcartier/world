;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; Manifests
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2016
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.manifest jazz


(import (jazz.io))


;;;
;;;; Scan
;;;


(definition public (scan-manifest dir (base: base #f))
  (define (scan-dir dir name base)
    (cons 'directory
          (cons name
                (let ((queue (new-queue))
                      (nodes (if base (cddr base) '())))
                  (iterate-directory~ dir
                    (lambda (pathname)
                      (let ((name (get-name~ pathname)))
                        (while (and (not-null? nodes)
                                    (let ((node (car nodes)))
                                      (ci<? (cadr node) name)))
                          (set! nodes (cdr nodes)))
                        (let ((base (and (not-null? nodes)
                                         (let ((node (car nodes)))
                                           (and (ci=? (cadr node) name)
                                                node)))))
                          (if (directory? pathname)
                              (enqueue queue (scan-dir pathname name base))
                            (let ((scan (scan-file pathname name base)))
                              (when scan
                                (enqueue queue scan)))))))
                    files?: #t
                    directories?: #t
                    recursive?: #f
                    sort?: #t
                    sort-type?: #f
                    sort-test: ci<?)
                  (queue-list queue)))))
  
  (define (scan-file file name base)
    (unless (member? name '(".manifest" ".DS_Store"))
      (let ((seconds (get-modification-seconds~ file)))
        (if (and base (= (fourth base) seconds))
            base
          (list 'file name (digest-file (parse~ file) 'SHA-1) seconds)))))
  
  (scan-dir dir (get-name~ dir) base))


;;;
;;;; Save
;;;


(definition public (save-manifest manifest file)
  (call-with-output-file (path-settings file)
    (lambda (output)
      (let ((first? #t))
        (define (freshline)
          (if first?
              (set! first? #f)
            (newline output)))
        
        (define (print node level)
          (bind (kind name . rest) node
            (case kind
              ((file)
               (bind (digest time) rest
                 (freshline)
                 (format output "{_ :v}(file {s} {s} {s})" (* level 2) name digest time)))
              (else
               (freshline)
               (format output "{_ :v}(directory {s}" (* level 2) name)
               (for-each (lambda (node)
                           (print node (+ level 1)))
                         rest)
               (format output ")")))))
      
        (print manifest 0)
        (freshline)))))


(definition public (read-manifest file)
  (call-with-input-file (path-settings file)
    read))


;;;
;;;; Diff
;;;


(definition public (diff-manifests from to)
  (let ((queue (new-queue)))
    (define (diff-dir from to)
      @WAIT
      (let ((queue (new-queue))
                      (nodes (if base (cddr base) '())))
                  (iterate-directory~ dir
                    (lambda (pathname)
                      (let ((name (get-name~ pathname)))
                        (while (and (not-null? nodes)
                                    (let ((node (car nodes)))
                                      (ci<? (cadr node) name)))
                          (set! nodes (cdr nodes)))
                        (let ((base (and (not-null? nodes)
                                         (let ((node (car nodes)))
                                           (and (ci=? (cadr node) name)
                                                node)))))
                          (if (directory? pathname)
                              (enqueue queue (scan-dir pathname name base))
                            (let ((scan (scan-file pathname name base)))
                              (when scan
                                (enqueue queue scan))))))))))
    
    (define (diff-file from to)
      )
    
    (diff-dir from to)
    (queue-list queue))))
