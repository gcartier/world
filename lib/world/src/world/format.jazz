;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World UDP Format
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;    Barbara Samson


(module world.format jazz


(import (jazz.foreign)
        (world)
        (world.record)
        (world.record-syntax (phase syntax)))


;;;
;;;; Access
;;;


(definition public max-u32
  (- (expt 2 32) 1))


(definition public (scan-boolean data pos)
  (/= (scan-s8 data pos) 0))


(definition public (put-boolean data pos value)
  (put-s8 data pos (if value 1 0)))


(definition public (scan-u8vector data pos)
  (let ((len (scan-u32 data pos)))
    (let ((v (make-u8vector len))
          (pos (+ pos 4)))
      (subu8vector-move! data pos (+ pos len) v 0)
      v)))


(definition public (put-u8vector data pos value)
  (let ((len (u8vector-length value)))
    (put-u32 data pos len)
    (let ((pos (+ pos 4)))
      (subu8vector-move! value 0 len data pos))))


(definition public (put-subu8vector! data pos value offset count)
  (put-u32 data pos count)
  (let ((pos (+ pos 4)))
    (subu8vector-move! value offset (+ offset count) data pos)))


(definition public (put-subpointer! data pos pointer offset count)
  (put-u32 data pos count)
  (let ((pos (+ pos 4)))
    (move-subpointer->u8vector! pointer offset count data pos)))


(definition public (scan-host data pos)
  (u8vector (u8vector-ref data pos)
            (u8vector-ref data (+ pos 1))
            (u8vector-ref data (+ pos 2))
            (u8vector-ref data (+ pos 3))))


(definition public (put-host data pos value)
  (u8vector-set! data pos (u8vector-ref value 0))
  (u8vector-set! data (+ pos 1) (u8vector-ref value 1))
  (u8vector-set! data (+ pos 2) (u8vector-ref value 2))
  (u8vector-set! data (+ pos 3) (u8vector-ref value 3)))


;;;
;;;; Header
;;;


;; header
(define-record header
  (code   u8  <fx>)
  (kind   u8  <fx>)
  (sender u32 <fx>))


;;;
;;;; Connect
;;;


;; connect
(define-record connect header
  (sent          double <fl>)
  (graphic-level s32))

(definition public (calculate-connect-size)
  (recordsize connect))


;; connected
(define-record connected header
  (connect-sent double <fl>))

(definition public (calculate-connected-size)
  (recordsize connected))


;;;
;;;; Media
;;;


;; media ackable
(define-record media-ackable header
  (order u64))


;; media ack
(define-record media-ack header
  (order u64))

(definition public (calculate-media-ack-size)
  (recordsize media-ack))


;; media
(define-record media media-ackable
  (flags     u8)
  (resent    u8)
  (channel   u32    <fx>)
  (sequence  u64)
  (frame     u64)
  (part      u32    <fx>)
  (total     u32    <fx>)
  (dts       u64)
  (pts       u64)
  (duration  u64)
  (payload   u8vector))

(definition public (calculate-media-size)
  (recordsize media))

(definition public (read-media-payload-size data)
  (scan-u32 data (fieldoffset media payload)))

(definition public (determine-media-size data)
  (+ (recordsize media) (read-media-payload-size data)))

(definition public (media-payload-offset)
  (+ (fieldoffset media payload) 4))

(definition public (write-media-subpayload data value offset count)
  (put-subu8vector! data (fieldoffset media payload) value offset count))

(definition public (write-media-subpointer data pointer offset count)
  (put-subpointer! data (fieldoffset media payload) pointer offset count))

(definition public (increase-media-resent data)
  (with-record media
    (let ((resent (+ (read-media-resent data) 1)))
      (when (<= resent 255)
        (write-media-resent data resent)))))


;; media trial
(define-record media-trial media-ackable)

(definition public (calculate-media-trial-size)
  (recordsize media-trial))


;; media pulse
(define-record media-pulse media-ackable)

(definition public (calculate-media-pulse-size)
  (recordsize media-pulse))


;;;
;;;; State
;;;


;; state
(define-record state header
  (waiting u8vector))

(definition public (calculate-state-size waiting)
  (+ (recordsize state) (u8vector-length waiting)))


;;;
;;;; Reset
;;;


;; reset
(define-record reset header
  (channel u32 <fx>))

(definition public (calculate-reset-size)
  (recordsize reset))


;;;
;;;; Heartbeat
;;;


;; heartbeat
(define-record heartbeat header
  (sent       double <fl>)
  (sequence   u32)
  (bytes-sent u64))

(definition public (calculate-heartbeat-size)
  (recordsize heartbeat))

(definition public max-heartbeat-sequence
  max-u32)


;;;
;;;; Ack
;;;


;; ack
(define-record ack header
  (heartbeat-sent       double <fl>)
  (heartbeat-sequence   u32)
  (heartbeat-bytes-sent u64)
  (sent                 double <fl>)
  (bytes-sent           u64)
  (bytes-received       u64))

(definition public (calculate-ack-size)
  (recordsize ack))


;;;
;;;; Nack
;;;


;; nack
(define-record nack header
  (channel u32 <fx>)
  (start   u32)
  (gap     u8))

(definition public (calculate-nack-size)
  (recordsize nack))


;;;
;;;; Lively
;;;


;; lively
(define-record lively header)

(definition public (calculate-lively-size)
  (recordsize lively))


;; lively ack
(define-record lively-ack header)

(definition public (calculate-lively-ack-size)
  (recordsize lively-ack))


;;;
;;;; Profile
;;;


;; profile pulse
(define-record profile-pulse header
  (sent       double <fl>)
  (sequence   u32)
  (bytes-sent u64))

(definition public (calculate-profile-pulse-size)
  (recordsize profile-pulse))


;; profile ack
(define-record profile-ack header
  (pulse-sent       double <fl>)
  (pulse-sequence   u32)
  (pulse-bytes-sent u64)
  (sent             double <fl>)
  (latency          double <fl>)
  (bytes-sent       u64)
  (bytes-received   u64))

(definition public (calculate-profile-ack-size)
  (recordsize profile-ack))


;; profile media
(define-record profile-media header
  (order   u32)
  (payload u8vector))

(definition public (calculate-profile-media-size payload)
  (+ (recordsize profile-media) (u8vector-length payload)))


;; profile media pulse
(define-record profile-media-pulse header
  (order u32))

(definition public (calculate-profile-media-pulse-size)
  (recordsize profile-media-pulse))


;; profile media ack
(define-record profile-media-ack header
  (received double <fl>)
  (order    u32))

(definition public (calculate-profile-media-ack-size)
  (recordsize profile-media-ack))


;; profile dummy
(define-record profile-dummy header
  (order   u32)
  (payload u8vector))

(definition public (calculate-profile-dummy-size payload)
  (+ (recordsize profile-dummy) (u8vector-length payload)))


;;;
;;;; Processor
;;;


;; connect
(define-record processor-connect header
  (mode u8)
  (sent double <fl>))

(definition public (calculate-processor-connect-size)
  (recordsize processor-connect))


;; connected
(define-record processor-connected header
  (connect-sent double <fl>))

(definition public (calculate-processor-connected-size)
  (recordsize processor-connected))


;; client droppable
(define-record client-droppable header
  (sent    double <fl>)
  (payload u8vector))

(definition public (calculate-client-droppable-size payload)
  (+ (recordsize client-droppable) (u8vector-length payload)))


;; processor droppable
(define-record processor-droppable header
  (sent    double <fl>)
  (payload u8vector))

(definition public (calculate-processor-droppable-size payload)
  (+ (recordsize processor-droppable) (u8vector-length payload))))
