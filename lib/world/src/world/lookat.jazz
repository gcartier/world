;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; LookAt
;;;


(module world.lookat jazz


(import (jazz.geometry)
        (jazz.graphic)
        (jazz.graphic.opengl.glew)
        (jazz.io)
        (jazz.library)
        (jazz.literals)
        (jazz.media)
        (jazz.network)
        (jazz.platform)
        (jazz.platform.cairo)
        (jazz.runtime)
        (jazz.system)
        (jazz.ui)
        (jazz.ui.dialog)
        (jazz.ui.window)
        (world)
        (world.geometry.classes)
        (world.serialization))


(proclaim (warn optimizations))

(declare (optimize-dead-local-variables))


;;;
;;;; LookAt
;;;


(class LookAt extends Object
  
  
  (slot sight <f32vector> initialize (make-vertex) getter generate)
  (slot up    <f32vector> initialize (make-vertex) getter generate)
  (slot right <f32vector> initialize (make-vertex) getter generate)
  
  
  (method override (print output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{a} {a} {a}" sight up right))))
  
  
  (method meta override (marshall-object obj)
    (serialize-object (class-of obj)
                      (vector
                        (serialize (get-sight~ obj))
                        (serialize (get-up~ obj))
                        (serialize (get-right~ obj)))))
  
  
  (method meta override (unmarshall-object content)
    (bind-vector (sight up right) content
      (allocate self
                (deserialize sight)
                (deserialize up)
                (deserialize right))))
  
  
  (method public inline (set-sight sight <f32vector>) <void>
    (vertex-copy! sight~self sight))
  
  (method public inline (set-up up <f32vector>) <void>
    (vertex-copy! up~self up))
  
  (method public inline (set-right right <f32vector>) <void>
    (vertex-copy! right~self right))))
