;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; LookAt
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;    Alain Marcotte


(module world.lookat jazz


(import (world.geometry.classes)
        (world.serialization))


(proclaim (warn optimizations))

(declare (optimize-dead-local-variables))


;;;
;;;; LookAt
;;;


(proclaim (not warn optimizations))


(class LookAt-Class extends (:class Object)
  
  
  (method override (marshall-object obj)
    (serialize-object (class-of obj)
                      (vector
                        (serialize (get-sight~ obj))
                        (serialize (get-up~ obj))
                        (serialize (get-right~ obj)))))
  
  
  (method override (unmarshall-object content)
    (bind-vector (sight up right) content
      (allocate self
                (deserialize sight)
                (deserialize up)
                (deserialize right)))))


(proclaim (warn optimizations))


(class LookAt metaclass LookAt-Class extends Object
  
  
  (slot sight <f64vector> initialize (make-vertex) getter generate)
  (slot up    <f64vector> initialize (make-vertex) getter generate)
  (slot right <f64vector> initialize (make-vertex) getter generate)
  
  
  (method override (print output readably)
    (format output "~{LookAt {a} {a} {a}}" sight up right))
  
  
  (method public inline (set-sight sight <f64vector>) <void>
    (vertex-copy! sight~self sight))
  
  (method public inline (set-up up <f64vector>) <void>
    (vertex-copy! up~self up))
  
  (method public inline (set-right right <f64vector>) <void>
    (vertex-copy! right~self right))))
