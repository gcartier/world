;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; LookAt
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is WorldScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2014
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;    Alain Marcotte
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See http://github.com/gcartier/world for details.


(module world.lookat jazz


(import (world.geometry.classes)
        (world.serialization))


(proclaim (warn optimizations))

(declare (optimize-dead-local-variables))


;;;
;;;; LookAt
;;;


(proclaim (not warn optimizations))


(class LookAt-Class extends (:class Object)
  
  
  (method override (marshall-object obj)
    (serialize-object (class-of obj)
                      (vector
                        (serialize (get-sight~ obj))
                        (serialize (get-up~ obj))
                        (serialize (get-right~ obj)))))
  
  
  (method override (unmarshall-object content)
    (bind-vector (sight up right) content
      (allocate self
                (deserialize sight)
                (deserialize up)
                (deserialize right)))))


(proclaim (warn optimizations))


(class LookAt metaclass LookAt-Class extends Object
  
  
  (slot sight <f64vector> initialize (make-vertex) getter generate)
  (slot up    <f64vector> initialize (make-vertex) getter generate)
  (slot right <f64vector> initialize (make-vertex) getter generate)
  
  
  (method override (print output readably)
    (format output "~{LookAt {a} {a} {a}}" sight up right))
  
  
  (method public inline (set-sight sight <f64vector>) <void>
    (vertex-copy! sight~self sight))
  
  (method public inline (set-up up <f64vector>) <void>
    (vertex-copy! up~self up))
  
  (method public inline (set-right right <f64vector>) <void>
    (vertex-copy! right~self right))))
