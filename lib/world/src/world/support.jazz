;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Support
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.support jazz


(import (jazz.opengl.glew)
        (world.settings))


;;;
;;;; Active?
;;;


(definition public active? <bool>
  #f)

(definition public (set-active? flag <bool>)
  (set! active? flag))


;;;
;;;; Render Boost
;;;


(definition public render-boost? <bool>
  #f)

(definition public (set-render-boost? boost? <bool>)
  (set! render-boost? boost?))


;;;
;;;; Player Boost
;;;


(definition public player-boost? <bool>
  #f)

(definition public (set-player-boost? boost? <bool>)
  (set! player-boost? boost?))


;;;
;;;; Texture Arrays
;;;


(definition public texture-arrays? <bool>
  #t)

(definition public (set-texture-arrays? flag <bool>)
  (set! texture-arrays? flag)
  (set! TEXTURE-TARGET (if texture-arrays? GL_TEXTURE_2D_ARRAY_EXT GL_TEXTURE_2D)))

(definition protected TEXTURE-TARGET
  GL_TEXTURE_2D_ARRAY_EXT)


;;;
;;;; ARB Multisample
;;;


(definition public arb-multisample? <bool>
  #t)

(definition public (set-arb-multisample? flag <bool>)
  (set! arb-multisample? flag))


;;;
;;;; Animations
;;;


(definition public animations? <bool>
  #t)

(definition public (set-animations? flag <bool>)
  (set! animations? flag))


;;;
;;;; Debug W3D
;;;


(definition public debug-w3d? <bool>
  (world-setting 'world.debug-w3d? #f))

(definition public (set-debug-w3d? flag <bool>)
  (set! debug-w3d? flag))


;;;
;;;; Debug MS3D
;;;


(definition public debug-ms3d? <bool>
  (world-setting 'world.debug-ms3d? #f))

(definition public (set-debug-ms3d? flag <bool>)
  (set! debug-ms3d? flag))


;;;
;;;; Debug Meshes
;;;


(definition public debug-meshes? <bool>
  (world-setting 'world.debug-meshes? #f))

(definition public (set-debug-meshes? flag <bool>)
  (set! debug-meshes? flag))


;;;
;;;; Debug Lightmap
;;;


(definition public debug-lightmap? <bool>
  (world-setting 'world.debug-lightmap? #f))

(definition public (set-debug-lightmap? flag <bool>)
  (set! debug-lightmap? flag))


;;;
;;;; Debug Categories
;;;


(definition public debug-categories? <bool>
  (world-setting 'world.debug-categories? #f))

(definition public (set-debug-categories? flag <bool>)
  (set! debug-categories? flag))


;;;
;;;; Debug Animations
;;;


(definition public debug-animations? <bool>
  (world-setting 'world.debug-animations? #f))

(definition public (set-debug-animations? flag <bool>)
  (set! debug-animations? flag))


;;;
;;;; Debug Throttle
;;;


(definition public debug-throttle? <bool>
  (world-setting 'world.debug-throttle? #f))

(definition public (set-debug-throttle? flag <bool>)
  (set! debug-throttle? flag))


;;;
;;;; Trace Textures
;;;


(definition public trace-textures? <bool>
  (world-setting 'world.trace-textures? #f))

(definition public (set-trace-textures? flag <bool>)
  (set! trace-textures? flag))


;;;
;;;; Task Trace
;;;


(definition public task-trace <list>
  (or (world-setting 'world.task-trace #f) '()))

(definition public (set-task-trace trace <list>)
  (set! task-trace trace))


(definition public always-trace? <bool>
  (world-setting 'world.always-trace? #f))

(definition public (set-always-trace? flag <bool>)
  (set! always-trace? flag))


(definition public tracing?
  (make-parameter #f)))
