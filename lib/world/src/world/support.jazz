;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Support
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2016
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.support jazz


(import (jazz.opengl.glew)
        (world.settings))


;;;
;;;; Active?
;;;


(definition public active? <bool>
  #f)

(definition public (set-active? flag <bool>)
  (set! active? flag))


;;;
;;;; Debugged?
;;;


(definition public being-debugged? <bool>
  #f)

(definition public (set-being-debugged? flag <bool>)
  (set! being-debugged? flag))


;;;
;;;; Render Boost
;;;


(definition public render-boost? <bool>
  #f)

(definition public (set-render-boost? boost? <bool>)
  (set! render-boost? boost?))


;;;
;;;; Player Boost
;;;


(definition public player-boost? <bool>
  #f)

(definition public (set-player-boost? boost? <bool>)
  (set! player-boost? boost?))


;;;
;;;; Texture Arrays
;;;


(definition public texture-arrays? <bool>
  #t)

(definition public (set-texture-arrays? flag <bool>)
  (set! texture-arrays? flag)
  (set! TEXTURE-TARGET (if texture-arrays? GL_TEXTURE_2D_ARRAY_EXT GL_TEXTURE_2D)))

(definition protected TEXTURE-TARGET
  GL_TEXTURE_2D_ARRAY_EXT)


;;;
;;;; ARB Multisample
;;;


(definition public arb-multisample? <bool>
  #t)

(definition public (set-arb-multisample? flag <bool>)
  (set! arb-multisample? flag))


;;;
;;;; Animations
;;;


(definition public animations? <bool>
  #t)

(definition public (set-animations? flag <bool>)
  (set! animations? flag))


;;;
;;;; Debug W3D
;;;


(definition public debug-w3d? <bool>
  (world-setting 'world.debug-w3d? #f))

(definition public (set-debug-w3d? flag <bool>)
  (set! debug-w3d? flag))


;;;
;;;; Debug MS3D
;;;


(definition public debug-ms3d? <bool>
  (world-setting 'world.debug-ms3d? #f))

(definition public (set-debug-ms3d? flag <bool>)
  (set! debug-ms3d? flag))


;;;
;;;; Debug Meshes
;;;


(definition public debug-meshes? <bool>
  (world-setting 'world.debug-meshes? #f))

(definition public (set-debug-meshes? flag <bool>)
  (set! debug-meshes? flag))


;;;
;;;; Debug Lightmap
;;;


(definition public debug-lightmap? <bool>
  (world-setting 'world.debug-lightmap? #f))

(definition public (set-debug-lightmap? flag <bool>)
  (set! debug-lightmap? flag))


;;;
;;;; Mesh Categories
;;;


(definition public mesh-categories? <bool>
  (world-setting 'world.mesh-categories? (neq? initial-role 'user)))

(definition public (set-mesh-categories? flag <bool>)
  (set! mesh-categories? flag))


;;;
;;;; Debug Animations
;;;


(definition public debug-animations? <bool>
  (world-setting 'world.debug-animations? #f))

(definition public (set-debug-animations? flag <bool>)
  (set! debug-animations? flag))


;;;
;;;; Debug Throttle
;;;


(definition public debug-throttle? <bool>
  (world-setting 'world.debug-throttle? #f))

(definition public (set-debug-throttle? flag <bool>)
  (set! debug-throttle? flag))


;;;
;;;; Debug Sequence
;;;


(definition public debug-sequence? <bool>
  (world-setting 'world.debug-sequence? #f))

(definition public (set-debug-sequence? flag <bool>)
  (set! debug-sequence? flag))


;;;
;;;; Debug Deadlocks
;;;


(definition public debug-deadlocks? <bool>
  (world-setting 'world.debug-deadlocks? bot?))

(definition public (set-debug-deadlocks? flag <bool>)
  (set! debug-deadlocks? flag))


;;;
;;;; Trace Textures
;;;


(definition public trace-textures? <bool>
  (world-setting 'world.trace-textures? #f))

(definition public (set-trace-textures? flag <bool>)
  (set! trace-textures? flag))


;;;
;;;; Show Blocking
;;;


(definition protected non-blocking?
  (make-parameter #f))


(definition public show-blocking? <bool>
  (world-setting 'world.show-blocking? #f))

(definition public (set-show-blocking? flag <bool>)
  (set! show-blocking? flag))


(definition protected (effective-show-blocking?)
  (and show-blocking? (not (non-blocking?))))


;;;
;;;; Always Profile
;;;


(definition public always-profile? <bool>
  (world-setting 'world.always-profile? #f))

(definition public (set-always-profile? flag <bool>)
  (set! always-profile? flag))


;;;
;;;; Interface Script
;;;


(definition public interface-script?
  #f)


(definition public (set-interface-script? script?)
  (set! interface-script? script?)))
