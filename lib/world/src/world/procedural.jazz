;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; Procedural Zones
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.procedural jazz


(import (jazz.opengl.render)
        (gaea.geometry)
        (world)
        (world.context)
        (world.face)
        (world.generator)
        (world.index)
        (world.sector)
        (world.settings)
        (world.texture)
        (world.triangle)
        (world.zone))


;;;
;;;; Procedural Zones
;;;


(proclaim (warn optimizations))


;; Ideally, this would use a PRNG which we can seed with a given value.
;; That way the map can be persisted using just the seed and a list of changes.
(class Procedural-Zone extends Zone
  
  
  (property detail-level <fl> initialize 15. accessors generate)
  (property clamp-height <fl> initialize 65. accessors generate)
  
  
  (method override (setup-generator self)
    (set! generator (new Perlin-Generator detail-level: detail-level clamp-height: clamp-height)))
  
  
  (method override (zone-editable? self)
    (world-setting 'world.procedural-editable? #f))
  
  
  (method override (zone-destructible? self)
    (zone-editable? self))
  
  
  (method override (generate-visual self sector <Sector>)
    (let ((index (get-index sector)))
      (let ((x (index-x index))
            (y (index-y index))
            (z (index-z index)))
        (when (= y 0)
          (let ((from-x (* x sector-size))
                (width sector-size)
                (from-z (* z sector-size))
                (depth sector-size))
            (generate-procedural self sector from-x width from-z depth 'visual)))))
    (set-visual-uptodate? sector #t)
    (decrease-sectors-generating self 1))
  
  
  (method override (generate-physical self area revision-update?)
    (let ((index (get-index area)))
      (let ((x (index-x index))
            (y (index-y index))
            (z (index-z index)))
        (when (= y 0)
          (let ((from-x (* x sector-size))
                (width sector-size)
                (from-z (* z sector-size))
                (depth sector-size))
            (generate-procedural self area from-x width from-z depth 'physical))))))
  
  
  ;; gambit30 quicky to pass sector and area
  (method (generate-procedural self sector/area from-x <fx> width <fx> from-z <fx> depth <fx> what)
    (let ((world (current-world))
          (x-count (+ width 1))
          (z-count (+ depth 1)))
      (define (generator-heightmap)
        (let ((heightmap <f32vector> (make-f32vector (* x-count z-count))))
          (loop (for x from 0 below x-count)
                (loop (for z from 0 below z-count)
                      (f32vector-set! heightmap (+ (* x z-count) z)
                        ;; max and min are quick hacks until perlin generator is fixed
                        (max 0. (min 10. (/ (noise2 generator (cast <fl> (+ from-x x)) (cast <fl> (+ from-z z))) 5.))))))
          heightmap))
      
      (generate-heightmap-old self sector/area (generator-heightmap) from-x width from-z depth what)))
  
  
  ;;;
  ;;;; Heightmap
  ;;;
  
  
  ;; gambit30 quicky to pass sector and area
  (method (generate-heightmap-old self sector/area heightmap <f32vector> from-x <fx> width <fx> from-z <fx> depth <fx> what)
    (define (generate-done sector)
      (set-visual-uptodate? sector #t)
      (set-visual-revision sector (get-revision generator))
      (set-visual-generating? sector #f)
      (decrease-sectors-generating self 1))
    
    (declare (proper-tail-calls))
    (declare (optimize-dead-local-variables))
    (declare (inline))
    (declare (inlining-limit 1000))
    (let ((world (current-world))
          (x-count (+ width 1))
          (z-count (+ depth 1))
          (x-base (cast <fl> from-x))
          (z-base (cast <fl> from-z)))
      (let ((count (f32vector-length heightmap)))
        (let ((vertices (make-vector count))
              (normals (make-vector count)))
          (define (get-vertex x <fx> z <fx>)
            (vector-ref vertices (+ (* x z-count) z)))
          
          (define (normal-ref x <fx> z <fx>)
            (vector-ref normals (+ (* x z-count) z)))
          
          ;; fill vertices
          (loop (for x from 0 below x-count)
                (loop (for z from 0 below z-count)
                      (let ((index (+ (* x z-count) z)))
                        (let ((height (f32vector-ref heightmap index)))
                          (let ((x (cast <fl> (+ from-x x)))
                                (y (cast <fl> height))
                                (z (cast <fl> (+ from-z z))))
                            (vector-set! vertices index (vertex (- x x-base) y (- z z-base)))
                            (vector-set! normals index (vertex 0. 0. 0.)))))))
          ;; add triangles
          (let ((squares (make-vector (* width depth)))
                (faces '())
                (areas (make-table test: equal?))
                (default-image (get-default-image world)))
            (let ((material (get-material-opaque world))
                  (uv (image-rect (get-block-atlas world) default-image)))
              (let ((tl (uv-left uv))
                    (tt (uv-top uv))
                    (tr (uv-right uv))
                    (tb (uv-bottom uv))
                    (texture-depth (uv-depth uv)))
                (define (safe-square x <fx> z <fx>)
                  (and
                    (>= x 0) (< x width)
                    (>= z 0) (< z depth)
                    (get-square x z)))
                
                (define (get-square x <fx> z <fx>)
                  (vector-ref squares (+ (* x depth) z)))
                
                (define (set-square x <fx> z <fx> square)
                  (vector-set! squares (+ (* x depth) z) square))
                
                (define (make-square t1 t2)
                  (cons t1 t2))
                
                (define (square-t1 square) <Smooth-Triangle>
                  (get-polygon (cast <Face> (car square))))
                
                (define (square-t2 square) <Smooth-Triangle>
                  (get-polygon (cast <Face> (cdr square))))
                
                (define (add-face face)
                  (set! faces (cons face faces))
                  (when (eq? what 'physical)
                    (let ((poly (get-polygon face)))
                      (let ((center (get-center poly)))
                        (let ((index (position-index sector/area center)))
                          (table-add areas index poly))))))
                
                (define (add-triangle v1 v2 v3)
                  (let ((normal (plane-normal v1 v2 v3)))
                    (let ((face
                            (if (> (vertex-x v1) (vertex-x v2))
                                (make-face material
                                           (f32vector tl tb tr tb tr tt)
                                           texture-depth
                                           (make-smooth-triangle self
                                                                 v1 v2 v3
                                                                 normal normal normal))
                              (make-face material
                                         (f32vector tr tt tl tt tl tb)
                                         texture-depth
                                         (make-smooth-triangle self
                                                               v1 v2 v3
                                                               normal normal normal)))))
                      (add-face face)
                      face)))
                
                ;; add triangles
                (loop (for x from 0 below width)
                      (loop (for z from 0 below depth)
                            (let ((v1 (get-vertex x (+ z 1)))
                                  (v2 (get-vertex (+ x 1) (+ z 1)))
                                  (v3 (get-vertex (+ x 1) z))
                                  (v4 (get-vertex x z)))
                              (let ((triangle1 (add-triangle v1 v2 v3))
                                    (triangle2 (add-triangle v3 v4 v1)))
                                (set-square x z (make-square triangle1 triangle2))))))
                ;; smooth normals
                (loop (for x from 0 below x-count)
                      (loop (for z from 0 below z-count)
                            (let ((normal (normal-ref x z))
                                  (tl (safe-square (- x 1) (- z 1)))
                                  (tr (safe-square x (- z 1)))
                                  (bl (safe-square (- x 1) z))
                                  (br (safe-square x z)))
                              (when tl
                                (vertex-increase! normal (get-normal (square-t1 tl))))
                              (when tr
                                (vertex-increase! normal (get-normal (square-t1 tr)))
                                (vertex-increase! normal (get-normal (square-t2 tr))))
                              (when bl
                                (vertex-increase! normal (get-normal (square-t1 bl)))
                                (vertex-increase! normal (get-normal (square-t2 bl))))
                              (when br
                                (vertex-increase! normal (get-normal (square-t2 br))))
                              (vertex-normalize! normal normal))))
                ;; update normals
                (loop (for x from 0 below width)
                      (loop (for z from 0 below depth)
                            (let ((square (get-square x z)))
                              (set-n1 (square-t1 square) (normal-ref x (+ z 1)))
                              (set-n2 (square-t1 square) (normal-ref (+ x 1) (+ z 1)))
                              (set-n3 (square-t1 square) (normal-ref (+ x 1) z))
                              (set-n1 (square-t2 square) (normal-ref (+ x 1) z))
                              (set-n2 (square-t2 square) (normal-ref x z))
                              (set-n3 (square-t2 square) (normal-ref x (+ z 1))))))
                (case what
                  ((physical)
                   (let ((area sector/area))
                     ;; PLANETS quick inefficient try
                     (let ((matrix (make-translation-matrix (vertex x-base 0. z-base))))
                       (table-iterate areas
                         (lambda (index polygons)
                           (add-polygons area #f index polygons matrix))))))
                  ((visual)
                   (let ((sector sector/area))
                     (bind-values (vertices neighbors) (prepare-vertices/neighbors sector faces)
                       (let ((lightmap (prepare-lightmap sector faces)))
                         (with-render-mutex
                           (lambda ()
                             (free-material-mesh sector)
                             (setup-material-mesh sector)
                             (let ((mesh (get-material-mesh sector)))
                               (fill-vertices/neighbors sector mesh #f vertices neighbors)
                               (fill-lightmap sector mesh #f lightmap)
                               (setup-array mesh))
                             (generate-done sector/area)))))))))))))))))
