;;;============
;;;  Together
;;;============
;;;
;;;; Portals
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.portal jazz


(import (jazz.view)
        (gaea.geometry)
        (world)
        (world.autoload)
        (world.circle)
        (world.client.tier)
        (world.context)
        (world.io)
        (world.settings)
        (world.task))


(definition loading-zone
  (make-parameter #f))


(definition package (load/wait-zone path message thunk)
  (let ((client (current-client))
        (world (current-world))
        (zone (current-zone)))
    (if (equal? path (loading-zone))
        (thunk)
      (parameterize ((loading-zone path))
        (with-cursor :wait
          (lambda ()
            (let ((min-delay (if message .8 0.)))
              (if (equal? (get-path zone) path)
                  (if (not message)
                      (thunk)
                    (working-wait world message min-delay thunk))
                (let ((loaded (make-mutex 'loaded))
                      (before (current-seconds)))
                  (set-zone-loaded-hook client (lambda (path info)
                                                 (mutex-unlock! loaded)
                                                 (mutex-unlock! loaded)))
                  (working world
                    (lambda ()
                      (when message
                        (working-progress world message #f))
                      (load-zone client path)
                      (mutex-lock! loaded)
                      (mutex-lock! loaded)
                      (let ((error (change-zone client path)))
                        (if (string? error)
                            (display-error world error)
                          (thunk)
                          (let ((elapse (- (current-seconds) before)))
                            (sleep (- min-delay elapse))))))))))))))))


(definition package (check-rune rune)
  (let ((world (current-world)))
    (let ((path (get-path rune)))
      (cond ((circling?)
             (display-action world "Cannot use Portal while in a circle"
               (lambda ()
                 )))
            ((not path)
             (display-action world "Unassigned Portal"
               (lambda ()
                 )))
            (else
             (let ((name (present-zone path)))
               (display-action world (format "E : Enter Portal{a}" (format " to {a}" name))
                 (lambda ()
                   (zone-load path)))))))))


(definition package (zone-load path)
  (let ((together (together:current-together))
        (zone (current-zone)))
    (let ((name (present-zone path)))
      (load/wait-zone path (format "Loading {a}" name)
        (lambda ()
          ))))))
