;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; Streaming
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.streaming jazz


(import (jazz.stream)
        (world)
        (world.audio)
        (world.context)
        (world.udp)
        (world.video))


;;;
;;;; Client
;;;


(definition public (make-image-channel location name)
  (let ((client (current-client)))
    (let ((channel (register-channel client name udp-video #f #f #t)))
      (let ((channel-no (get-no channel)))
        (let ((src (new Image-Stream-Video-Src
                     location))
              (sink (new Stream-Sink
                      consumer: (lambda (buffer timestamp duration)
                                  (let ((header? (and buffer (video-buffer-header? buffer))))
                                    (send-client-video client channel-no buffer header? timestamp duration))))))
          (let ((pipeline (pipeline src sink)))
            (set-pipeline channel pipeline)
            channel))))))


(definition public (make-audio-channel location name)
  (let ((client (current-client)))
    (let ((channel (register-channel client name udp-audio #f #f #t)))
      (let ((channel-no (get-no channel)))
        (let ((src (new File-Stream-Audio-Src
                     location))
              (sink (new Stream-Sink
                      consumer: (lambda (buffer timestamp duration)
                                  (case audio-codec
                                    ((opus)
                                     (let ((header? (and buffer (audio-buffer-header? buffer))))
                                       (send-client-audio client channel-no buffer header? timestamp duration)))
                                    ((vorbis)
                                     (if (pair? buffer)
                                         (send-client-audio client channel-no (car buffer) #t -1 GST_CLOCK_TIME_NONE)
                                       (send-client-audio client channel-no buffer #f timestamp duration))))))))
          (let ((pipeline (pipeline src sink)))
            (set-pipeline channel pipeline)
            channel))))))


(definition public (make-video-channel location name)
  (let ((client (current-client)))
    (let ((channel (register-channel client name udp-video #f #f #t)))
      (let ((channel-no (get-no channel)))
        (let ((src (new File-Stream-Video-Src
                     location))
              (sink (new Stream-Sink
                      consumer: (lambda (buffer timestamp duration)
                                  (let ((header? (and buffer (video-buffer-header? buffer))))
                                    (send-client-video client channel-no buffer header? timestamp duration))))))
          (let ((pipeline (pipeline src sink)))
            (set-pipeline channel pipeline)
            channel)))))))
