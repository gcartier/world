;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; Travel Ray
;;;
;;;  The Initial Developer of the Original Code is Edouard Hebert.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2016
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.travel jazz


(import (world)
        (world.area)
        (world.autoload)
        (world.generation.block)
        (world.geometry)
        (world.homogeneous)
        (world.index)
        (world.polygon)
        (world.quad)
        (world.syntax (phase syntax))
        (world.triangle))


(proclaim (warn optimizations))


(definition current-area-visit <fx>
  -1)


(definition public (travel-ray-polygons$ proc orig <vertex> dir <vertex> radius <fl> breadth <fx> max-distance <fl> sphere-matrix (area-cube: area-cube #f) (filter: filter #f) (ignore-non-physical?: ignore-non-physical? #t) (ignore-entities?: ignore-entities? #t) (ignore-players?: ignore-players? #f) (ignore-me?: ignore-me? #f))
  (declare (proper-tail-calls))
  (declare (optimize-dead-local-variables))
  (declare (inline))
  (declare (inlining-limit 1000))
  (validate-vertex-normalized dir)
  (let ((zone (current-zone))
        (me (current-me+)))
    (increase! current-area-visit)
    (let ((step (f64& (cast <fl> (get-area-size~ zone)))))
      (let ((position (vertex-copy& orig))
            (position-increment (vertex-scalar*& dir step))
            (position-distance (f64& 0.)))
        (let (iter)
          (or (proc
                (lambda (proc)
                  (with-area-retainer
                    (lambda (retain)
                      (iterate-position-neighbor-areas~ zone position breadth area-cube
                        (lambda (area <Area> index <fx> retain?)
                          (when retain?
                            (retain area))
                          (unless (= (visit-ref~ area index) current-area-visit)
                            ;; lambda-lift
                            (let ((env (wrap& orig dir radius sphere-matrix filter ignore-non-physical? proc)))
                              (iterate-polygons~ area env index
                                (lambda (env element polygons <f64vector> offset <fx>)
                                  (unwrap (orig <vertex> dir <vertex> radius <fl> sphere-matrix filter ignore-non-physical? proc) env
                                    (let ((poly-center (vertex& (f64vector-ref polygons (+ offset 0)) (f64vector-ref polygons (+ offset 1)) (f64vector-ref polygons (+ offset 2))))
                                          (r (f64& (+ radius (f64vector-ref polygons (+ offset 15))))))
                                      (when (ray-intersects-sphere? orig dir poly-center r)
                                        (let ((poly <Polygon> (if (nan? (f64vector-ref polygons (+ offset 12)))
                                                                  (alloc-triangle$)
                                                                (alloc-quad$))))
                                          (if (or (not filter)
                                                  (begin
                                                    (polygon-extract!~ poly element polygons offset #f)
                                                    (filter poly)))
                                              (begin
                                                (polygon-extract!~ poly element polygons offset sphere-matrix)
                                                (if (or (not ignore-non-physical?)
                                                        (let ((data1 (get-data1~ poly)))
                                                          (or (= data1 0.)
                                                              (let ((block (id->block (decode-id data1))))
                                                                (get-physical?~ block)))))
                                                    (proc poly)
                                                  (free-polygon$~ poly)))
                                            (free-polygon$~ poly)))))))))
                            (unless ignore-entities?
                              (iterate-entities~ area
                                (lambda (entity <Entity>)
                                  (unless (or (not (element-visible?~ entity))
                                              (is? entity Missile)
                                              (and ignore-players? (is? entity Player))
                                              (and ignore-me? (eq? entity me)))
                                    (when (ray-intersects-sphere? orig dir (transformed-center~ entity) (+ radius (get-radius~ entity)))
                                      (for-each-bounding-quad$~ entity sphere-matrix
                                        proc))))))
                            (visit-set!~ area index current-area-visit))))))))
              (let ((new-distance (f64& (+ position-distance step))))
                (and (<= new-distance max-distance)
                  (vertex+! position position position-increment)
                  (f64! position-distance new-distance)
                  (iter)))))))))


(definition public (ray-closest-polygon orig <vertex> dir <vertex> max-distance <fl> (filter: filter #f) (ignore-non-physical?: ignore-non-physical? #t) (ignore-entities?: ignore-entities? #t) (ignore-players?: ignore-players? #f) (ignore-me?: ignore-me? #f) (water-filter: water-filter #f))
  (declare (proper-tail-calls))
  (declare (optimize-dead-local-variables))
  (declare (inline))
  (declare (inlining-limit 1000))
  (travel-ray-polygons$
    (lambda (iterate)
      (let ((closest #f)
            (distance <fl+> #f))
        (iterate
          (lambda (poly <Polygon>)
            (let ((cls (ray-closest-triangle~ poly orig dir filter)))
              (when cls
                (bind (poly <Polygon> dist <fl>) cls
                  (when (and (or (not distance)
                                 (< dist distance))
                             (< dist max-distance))
                    (set! closest (list (copy-polygon~ poly) dist))
                    (set! distance dist)))))
            (free-polygon$~ poly)))
        closest))
    orig
    dir
    0.
    1
    max-distance
    #f
    filter: water-filter
    ignore-non-physical?: ignore-non-physical?
    ignore-entities?: ignore-entities?
    ignore-players?: ignore-players?
    ignore-me?: ignore-me?)))
