;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Assets
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.assets jazz


(import (jazz.associative)
        (jazz.io)
        (world)
        (world.context))


(definition public (make-directory-assets where dir)
  (new Directory-Assets where dir))

(definition public (make-local-assets where dir)
  (new Local-Assets where dir))

(definition public (make-remote-assets where dir)
  (new Remote-Assets where dir))


;;;
;;;; Assets
;;;


(class Assets extends Object
  
  
  (slot where                   getter generate)
  (slot directory               @getter generate)
  
  
  (method override (initialize self where directory)
    (set! self.where where)
    (set! self.directory directory))
  
  
  (method override (print self output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{a}" where))))
  
  
  (method protected virtual (cache-index self)
    )
  
  
  (method protected virtual (retrieve-directory self path)
    )
  
  
  (method protected virtual (retrieve-file self path)
    )
  
  
  (method public (iterate-entries self proc)
    (let ((index (cache-index self)))
      (for-each (lambda (entry)
                  (proc (car entry)))
                (get-entries index))))
  
  
  (method public (contains-file? self filename)
    (find-entry (cache-index self) filename))
  
  
  (method public (contains-directory? self dirname)
    (let ((dirname (normalize-directory dirname)))
      (continuation-capture
        (lambda (return)
          (iterate-entries self
            (lambda (path)
              (when (starts-with? path dirname)
                (continuation-return return #t))))
          #f))))
  
  
  (method public (unique-spine self)
    (list (symbol->string where))))


;;;
;;;; Directory
;;;


(class Directory-Assets extends Assets
  
  
  (slot index initialize #f getter generate)
  
  
  (method override (cache-index self)
    (or index
        (let ((entries (scanning-directory "" directory
                         (lambda (path file base)
                           (list path #f #f)))))
          (let ((idx (new Associative-Index #f directory entries: entries)))
            (set! index idx)
            idx))))
  
  
  (method override (retrieve-directory self path)
    (make-directory self path))
  
  
  (method override (retrieve-file self path)
    (make-file self path))
  
  
  (method public (get-directory self)
    directory)
  
  
  (method public (make-directory self path) <Directory>
    (new-directory directory (listify-path self path)))
  
  
  (method public (make-file self path) <File>
    (new-file directory (listify-path self path)))
  
  
  (method (listify-path self path)
    (if (string? path)
        (tokenise-filename path)
      path)))


;;;
;;;; Local
;;;


(class Local-Assets extends Assets
  
  
  (slot repository initialize #f getter generate)
  
  
  (method override (initialize self where directory)
    (nextmethod self where directory)
    (set! self.repository (new Associative-Repository directory init?: #t)))
  
  
  (method override (cache-index self)
    (get-index repository))
  
  
  (method override (retrieve-directory self dirpath)
    (iterate-entries self
      (lambda (path)
        (when (starts-with? path dirpath)
          (retrieve-file self path))))
    (new-directory directory (tokenise-filename dirpath)))
  
  
  (method override (retrieve-file self path)
    (let ((entry (find-entry repository path))
          (file (new-file directory (tokenise-filename path))))
      (assert entry
        (bind (path digest seconds) entry
          (retrieve-file repository digest file)
          file)))))


;;;
;;;; Remote
;;;


(class Remote-Assets extends Assets
  
  
  (slot repository initialize #f getter generate)
  
  
  (method override (initialize self where directory)
    (nextmethod self where directory)
    (set! self.repository (new Associative-Repository directory init?: #t)))
  
  
  (method override (cache-index self)
    (get-index repository))
  
  
  (method override (retrieve-directory self dirpath)
    (iterate-entries self
      (lambda (path)
        (when (starts-with? path dirpath)
          (retrieve-file self path))))
    (new-directory directory (tokenise-filename dirpath)))
  
  
  (method override (retrieve-file self path)
    (let ((entry (find-entry repository path))
          (file (new-file directory (tokenise-filename path))))
      (assert entry
        (retrieve-asset (current-client) path)
        (bind (path digest seconds) entry
          (retrieve-file repository digest file)
          file))))))
