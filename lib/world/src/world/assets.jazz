;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Assets
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2016
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.assets jazz


(definition public (gather-assets where dir)
  (let ((queue (new-queue)))
    (define (gather dir spine)
      (when (and dir (exists?~ dir))
        (when (exists?~ (new-file~ dir ".assets"))
          (enqueue queue (new Assets where (reverse spine) dir)))
        (iterate-directory~ dir
          (lambda (dir)
            (gather dir (cons (get-name~ dir) spine)))
          files?: #f
          directories?: #t
          recursive?: #f)))
    
    (gather dir '())
    (queue-list queue)))


;;;
;;;; Assets
;;;


(class Assets extends Object
  
  
  (slot where     getter generate)
  (slot spine     getter generate)
  (slot directory getter generate)
  
  
  (method override (initialize where spine directory)
    (set! where~self where)
    (set! spine~self spine)
    (set! directory~self directory))
  
  
  (method override (print output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{l}" spine))))
  
  
  (method public (get-unique-spine)
    (cons (symbol->string where) spine))
  
  
  (method public (make-directory path)
    (new-directory~ directory path))
  
  
  (method public (make-file path)
    (new-file~ directory path))))
