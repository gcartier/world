;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Settings
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.settings jazz


(import (jazz.io)
        (jazz.library.template)
        (jazz.snapshot)
        (jazz.system)
        (world))


;;;
;;;; Settings
;;;


(definition protected settings-updates
  (list->updates
    '((version: 100000 targets: settings))))


(definition (convert-settings dir old)
  (define (convert-initial)
    100000)
  
  (case old
    ((#f) (convert-initial))
    (else #f)))


(definition (copy-settings-if-not-exists settings-root (alias #f))
  (unless (exists?~ settings-root)
    (copy-template (new-directory~ (world-templates-directory alias) "settings")
                   {Directory Home}
                   '())))


(definition (determine-settings)
  (or (command-argument "settings")
      (let ((settings-dir {Directory Build "settings"}))
        (and (exists?~ settings-dir)
             (versioned-directory (parse~ settings-dir) 'settings settings-updates convert-settings feedback?: #f)))
      (let ((settings-root (get-settings-root))
            (settings-alias (get-settings-alias)))
        (copy-settings-if-not-exists settings-root settings-alias)
        (versioned-directory (parse~ settings-root) 'settings settings-updates convert-settings feedback?: #f))))


(definition public (world-setting name default)
  (user-setting name default 'default))


;;;
;;;; Role
;;;


(definition public current-role
  #f)

(definition public (set-current-role role)
  (set! current-role role))


(definition public (user-role?)
  (eq? current-role 'user))

(definition public (designer-role?)
  (eq? current-role 'designer))

(definition public (programmer-role?)
  (eq? current-role 'programmer))

(definition public (admin-role?)
  (eq? current-role 'admin))


(definition (prepare/determine-role)
  (define (determine-role)
    (let ((role-file {File Roles-Settings ".role"}))
      (if (exists?~ role-file)
          (let ((metadata (call-with-input-file (path-settings role-file) read)))
            (and (pair? metadata)
                 (pair? (cdr metadata))
                 (let ((symbol (cadr metadata)))
                   (and (symbol? symbol)
                        symbol))))
        'designer)))
  
  (let ((role (determine-role)))
    (assert (memq? role (get-valid-roles))
      (set-current-role role)
      (list 'Roles-Settings (symbol->string role)))))


;;;
;;;; Pathnames
;;;


(definition public (world-alias)
  (if (is-alias? 'World)
      'World
    'Build))


(definition public (world-file path (alias #f))
  (new-file~ (new Directory (list (or alias (world-alias))))
    path))


(definition public (world-directory path (alias #f))
  (new-directory~ (new Directory (list (or alias (world-alias))))
    path))


;;;
;;;; Templates
;;;


(definition public (world-templates-directory (alias #f))
  (world-directory '("devel" "templates") alias))


;;;
;;;; Snapshots
;;;


(definition public (setup-snapshots)
  (snapshots-directory {Directory Settings "work" "crashes"})
  (snapshot-max-depth 3)
  (snapshot-max-width 32768))


;;;
;;;; Setup
;;;


(definition (register-client-settings)
  (let ((file {File Settings "client.settings"}))
    (when (exists?~ file)
      (register-settings (new File-Settings file: file)))))


(initialize-aliases)

(register-alias 'Roles-Settings (tokenise-filename (determine-settings)))
(register-alias 'Settings (prepare/determine-role) override?: #t)

(register-client-settings))
