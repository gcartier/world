;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Distance
;;;
;;;  The Initial Developer of the Original Code is Edouard Hebert.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.distance jazz


(import (jazz.syntax (phase syntax))
        (world)
        (world.configure)
        (world.context)
        (world.generation)
        (world.geometry)
        (world.index)
        (world.sound)
        (world.support)
        (world.syntax (phase syntax))
        (world.task))


(definition last-player-position
  (vertex 0. 0. 0.))


(definition public (distance-task task <Task>)
  (declare (proper-tail-calls))
  (let ((history (current-history)))
    (with-task task
      (lambda (exit)
        (let (iter (previous (current-monotonic)))
          (let ((time (current-monotonic)))
            (let ((elapse (- time previous)))
              (with-task-mutex
                (lambda ()
                  (unless (get-paused? history)
                    (unless (stopping? task)
                      (tick-distance elapse)))))
              (let ((duration (- (current-monotonic) time)))
                (task-wait task distance-period duration exit))
              (iter time))))))))


(definition (tick-distance elapse)
  (site distance
    (let ((me (current-me)))
      (check-distance elapse me))))


(definition (check-distance elapse me)
  (let ((world (current-world))
        (zone (current-zone)))
    (let ((pos (get-position me)))
      (unless (vertex-near? pos last-player-position)
        ;; water
        (verify-water me)
        ;; chest
        (let ((chest (get-opened-chest zone)))
          (when chest
            (bind (section index coordinates) chest
              (let ((location (section/coordinates->location section coordinates)))
                (let ((dist (vertex-distance (vertex (+ (index-x location) .5)
                                                     (+ (index-y location) .5)
                                                     (+ (index-z location) .5))
                                             pos)))
                  (when (> dist interaction-distance)
                    (play-ambient-sound "minecraft/random/chestclosed" volume: .5)
                    (hide-chest world)
                    (hide-bag world)
                    (set-opened-chest zone #f)))))))
        (vertex-copy! last-player-position pos))
      ;; aggro
      (let ((creatures (get-aggroed-creatures me)))
        (when creatures
          (for-each (lambda (creature)
                      (when (> (vertex-distance pos (get-position creature)) (get-aggro-radius creature))
                        (set-aggro-target creature #f)
                        (set! creatures (remove! creature creatures test: equal?))))
                    creatures)
          (set-aggroed-creatures me creatures)))))))
