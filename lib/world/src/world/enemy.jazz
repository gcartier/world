;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Enemy
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2013
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.enemy jazz


(import (jazz.geometry)
        (jazz.graphic)
        (jazz.graphic.opengl.glew)
        (jazz.io)
        (jazz.library)
        (jazz.literals)
        (jazz.media)
        (jazz.network)
        (jazz.platform)
        (jazz.platform.cairo)
        (jazz.runtime)
        (jazz.system)
        (jazz.ui)
        (jazz.ui.dialog)
        (jazz.ui.window)
        (time)
        (world)
        (world.actor)
        (world.autoload)
        (world.block)
        (world.collision)
        (world.dye)
        (world.dyes)
        (world.element)
        (world.foreign)
        (world.geometry)
        (world.history)
        (world.mark)
        (world.model)
        (world.movement)
        (world.opengl)
        (world.serialization)
        (world.syntax (phase syntax))
        (world.texture))


;;;
;;;; Enemy
;;;


(class Enemy extends Actor
  
  
  (slot speed <fl>   initialize 0. accessors generate)
  (slot tick? <bool> initialize #t accessors generate)
  
  
  (method (move-enemy elapse exit (gravity?: gravity? #t) (response: response 'slide) (ignore-entities?: ignore-entities? #t) (ignore-players?: ignore-players? #f))
    (tick-actor #f #f elapse exit gravity? response ignore-entities?: ignore-entities? ignore-players?: ignore-players?))
  
  
  (method override (hit collisions exit)
    @unify-with-die
    (let ((world (current-world))
          (me (current-me)))
      (when (memq? me collisions key: get-element~)
        (lose~ world me)
        (continuation-return exit))))
  
  
  (method override (hit-floor reset exit)
    (reset (get-radius-y)))
  
  
  (method protected virtual (rebound-x)
    (vertex-x-set! velocity (- (vertex-x velocity)))
    (update-lookat velocity))
  
  
  (method protected virtual (rebound-z)
    (vertex-z-set! velocity (- (vertex-z velocity)))
    (update-lookat velocity))
  
  
  (method (update-lookat dir)
    (let ((world (current-world)))
      (init-lookat (vertex-normalize& dir)
                   (get-world-up~ world)))))


;;;
;;;; Creature
;;;


(definition attack-distance <fl>
  .1)


(class Creature extends Enemy
  
  
  (slot path-duration initialize #f accessors generate)
  (slot anim-duration initialize #f accessors generate)
  (slot aggro-radius  initialize #f accessors generate)
  (slot aggro-target  initialize #f accessors generate)
  
  
  (method override (prepare rest)
    (nextmethod rest)
    (prepare-pathing))
  
  
  (method meta override (marshall-object obj)
    (serialize-object (class-of obj)
                      (vector
                        ;; component
                        (serialize (get-name~ obj))
                        (serialize (get-visible?~ obj))
                        ;; element
                        (serialize (get-position~ obj))
                        (serialize (get-lookat~ obj))
                        (serialize (get-scale~ obj))
                        (serialize (get-radiuses~ obj))
                        (serialize (get-radius~ obj))
                        (serialize (get-color~ obj))
                        (serialize (get-hit-behavior~ obj))
                        (serialize (get-user-data~ obj))
                        ;; entity
                        (get-path~ obj)
                        (get-animate?~ obj)
                        (get-animation~ obj)
                        ;; actor
                        (serialize (get-velocity~ obj))
                        (serialize (get-fall-velocity~ obj))
                        (serialize (get-direction~ obj))
                        (serialize (get-life~ obj))
                        (serialize (get-global-cooldown~ obj))
                        (serialize (get-spell~ obj))
                        (serialize (get-adjustments~ obj))
                        (serialize (get-rapid-fire-acceleration~ obj))
                        (serialize (get-rapid-fire-duration~ obj))
                        (serialize (get-rapid-fire-cooldown~ obj))
                        (serialize (get-last-missile~ obj))
                        (serialize (get-max-missiles~ obj))
                        (serialize (get-missiles-count~ obj))
                        (serialize (get-history-color~ obj))
                        ;; creature
                        (serialize (get-path-duration~ obj))
                        (serialize (get-anim-duration~ obj))
                        (serialize (get-aggro-radius~ obj))
                        (serialize (get-aggro-target~ obj)))))
  
  
  (method meta override (unmarshall-object content)
    (bind-vector (;; component
                  name
                  visible?
                  ;; element
                  position
                  lookat
                  scale
                  radiuses
                  radius
                  color
                  hit-behavior
                  user-data
                  ;; entity
                  path
                  animate?
                  animation
                  ;; actor
                  velocity
                  fall-velocity
                  direction
                  life
                  global-cooldown
                  spell
                  adjustments
                  rapid-fire-acceleration
                  rapid-fire-duration
                  rapid-fire-cooldown
                  last-missile
                  max-missiles
                  missiles-count
                  history-color
                  ;; creature
                  path-duration
                  anim-duration
                  aggro-radius
                  aggro-target)
        content
      (let ((obj (new self name: name visible?: visible?)))
        ;; element
        (set-position~ obj (deserialize position))
        (set-lookat~ obj (deserialize lookat))
        (set-scale~ obj (deserialize scale))
        (set-radiuses~ obj (deserialize radiuses))
        (set-radius~ obj (deserialize radius))
        (set-color~ obj (deserialize color))
        (set-hit-behavior~ obj (deserialize hit-behavior))
        (set-user-data~ obj (deserialize user-data))
        ;; entity
        (set-path~ obj (deserialize path))
        (set-animate?~ obj (deserialize animate?))
        (set-animation~ obj (deserialize animation))
        ;; actor
        (set-velocity~ obj (deserialize velocity))
        (set-fall-velocity~ obj (deserialize fall-velocity))
        (set-direction~ obj (deserialize direction))
        (set-life~ obj (deserialize life))
        (set-global-cooldown~ obj (deserialize global-cooldown))
        (set-spell~ obj (deserialize spell))
        (set-adjustments~ obj (deserialize adjustments))
        (set-rapid-fire-acceleration~ obj (deserialize rapid-fire-acceleration))
        (set-rapid-fire-duration~ obj (deserialize rapid-fire-duration))
        (set-rapid-fire-cooldown~ obj (deserialize rapid-fire-cooldown))
        (set-last-missile~ obj (deserialize last-missile))
        (set-max-missiles~ obj (deserialize max-missiles))
        (set-missiles-count~ obj (deserialize missiles-count))
        (set-history-color~ obj (deserialize history-color))
        ;; creature
        (set-path-duration~ obj (deserialize path-duration))
        (set-anim-duration~ obj (deserialize anim-duration))
        (set-aggro-radius~ obj (deserialize aggro-radius))
        (set-aggro-target~ obj (deserialize aggro-target)))))
  
  
  (method override (tick commands elapse exit)
    (when tick?
      (or (players-aggro)
          (if (<= path-duration 0)
              (path-creature)
            (decrease! path-duration)))
      (if (and aggro-target (< (vertex-distance position (get-position~ aggro-target)) (+ (get-radius) (get-radius~ aggro-target) attack-distance)))
          (attack-player aggro-target)
        (move-enemy elapse exit))))
  
  
  (method override (hit collisions exit)
    (for-each (lambda (collision)
                (let ((element (get-element~ collision)))
                  (cond ((is? element Block)
                         (case axis
                           ((x) (rebound-x))
                           ((z) (rebound-z)))))))
              collisions))
  
  
  (method override (ground-speed)
    speed)
  
  
  (method public virtual (aggro-sound)
    #f)
  
  
  (method public virtual (attack-sound)
    #f)
  
  
  (method (players-aggro)
    (when aggro-radius
      (let ((zone (current-zone)))
        (let (iter (scan (get-players~ zone)))
          (if (null? scan)
              (begin
                (set! aggro-target #f)
                #f)
            (let ((player (car scan)))
              (let ((dist (vertex-distance position (get-position~ player))))
                (if (< dist aggro-radius)
                    (begin
                      (aggro-player player)
                      #t)
                  (iter (cdr scan))))))))))
  
  
  (method (aggro-player player)
    (let ((world (current-world)))
      (when (neq? player aggro-target)
        (set! aggro-target player)
        (play-sound-file~ world (aggro-sound)))
      (update-lookat (vertex-normalize& (vertex-& (get-position~ player) position)))))
  
  
  (method (attack-player player)
    (let ((world (current-world)))
      (if (or (not anim-duration) (<= anim-duration 0))
          (begin
            (play-sound-file~ world (attack-sound))
            (wound~ player)
            (set! anim-duration 100))
        (decrease! anim-duration))))
  
  
  (method (prepare-pathing)
    (set! path-duration (+ 100 (random 200))))
  
  
  (method protected virtual (path-creature)
    (cond ((< (random-real) .333)
           (vertex-x-set! velocity 0.)
           (vertex-z-set! velocity 0.))
          (else
           (update-lookat (vertex (random-in 1.) 0. (random-in 1.)))))
    (prepare-pathing)))


;;;
;;;; MOB
;;;


(definition mob-speed <fl>
  .01)


(class MOB extends Creature
  
  
  (method override (prepare rest)
    (nextmethod rest)
    (set! speed mob-speed)))


;;;
;;;; Wolf
;;;


(definition wolf-speed <fl>
  .04)


(class Wolf extends Creature
  
  
  (method override (prepare rest)
    (nextmethod rest)
    (set-color (dye .157 .157 .157 1.))
    (set-model (registered-model 'Wolf))
    (set! speed wolf-speed)
    (set! aggro-radius 40.))
  
  
  (method override (element-radiuses)
    (vertex .4 .4 .4))
  
  
  (method override (element-radius)
    .4)
  
  
  (method override (target-radius)
    .35)
  
  
  (method override (aggro-sound)
    "sound/wolf/aggro")
  
  (method override (attack-sound)
    "sound/wolf/attack")
  
  (method override (wound-sound)
    "sound/wolf/wound")
  
  (method override (wound-critical-sound)
    "sound/wolf/woundCritical")
  
  (method override (death-sound)
    "sound/wolf/death"))


;;;
;;;; Spider
;;;


(definition spider-speed <fl>
  .02)


(class Spider extends Creature
  
  
  (method override (prepare rest)
    (nextmethod rest)
    (set-color (dye 0. .235 0. 1.))
    (set-model (registered-model 'Spider))
    (set! speed spider-speed)
    (set! aggro-radius 25.))
  
  
  (method override (element-radiuses)
    (vertex .4 .4 .4))
  
  
  (method override (element-radius)
    .4)
  
  
  (method override (target-radius)
    .35)
  
  
  (method override (aggro-sound)
    "sound/spider/aggro")
  
  (method override (attack-sound)
    "sound/spider/attack")
  
  (method override (wound-sound)
    "sound/spider/wound")
  
  (method override (wound-critical-sound)
    "sound/spider/woundCritical")
  
  (method override (death-sound)
    "sound/spider/death"))


;;;
;;;; Turtle
;;;


(definition turtle-speed <fl>
  .005)


(class Turtle extends Creature
  
  
  (slot stomp-time <fl> initialize 0. accessors generate)
  
  
  (method override (prepare rest)
    (nextmethod rest)
    (set-color green-dye)
    (set-model (registered-model 'Turtle))
    (set! speed turtle-speed))
  
  
  (method override (element-radiuses)
    (vertex .2 .2 .2))
  
  
  (method override (element-radius)
    .2)
  
  
  (method override (target-radius)
    .3)
  
  
  (method override (path-creature)
    (let ((zone (current-zone)))
      (if (getf (get-properties~ zone) victor?:)
          (vertex-x-set! velocity turtle-speed)
        (nextmethod))))
  
  
  (method override (tick commands elapse exit)
    (let ((zone (current-zone)))
      (when tick?
        (if stomp-time
            (when (>= (current-seconds) stomp-time)
              (set! stomp-time #f))
          (move-enemy elapse exit)
          (when (and (getf (get-properties~ zone) victor?:)
                     (or (< (get-x) -35.)
                         (> (get-x) -27.)))
            (rebound-x))))))
  
  
  (method override (stomp)
    (set! stomp-time (+ (current-seconds) 3.))
    #t))


;;;
;;;; Missile
;;;


(class Missile extends Enemy
  
  
  (property actor <object> initialize #f accessors generate)
  (property kind  <object> initialize #f getter generate setter explicit)
  
  
  (slot alive    <fl>     initialize 0.    accessors generate)
  (slot response <object> initialize 'stop accessors generate)
  
  
  (method override (prepare rest)
    (nextmethod rest)
    (set-color red-dye))
  
  
  (method override (finish rest)
    (nextmethod rest)
    (setup-model))
  
  
  (method public (set-kind k)
    (set! kind k)
    (setup-model))
  
  
  (method (setup-model)
    (when kind
      (set-model (registered-model (case kind
                                     ((bullet) 'Bullet)
                                     ((bomb) 'Bomb))))))
  
  
  (method override (element-radiuses)
    (vertex .05 .05 .05))
  
  
  (method meta override (marshall-object obj)
    (serialize-object (class-of obj)
                      (vector
                        ;; component
                        (serialize (get-name~ obj))
                        (serialize (get-visible?~ obj))
                        ;; element
                        (serialize (get-position~ obj))
                        (serialize (get-lookat~ obj))
                        (serialize (get-scale~ obj))
                        (serialize (get-radiuses~ obj))
                        (serialize (get-radius~ obj))
                        (serialize (get-color~ obj))
                        (serialize (get-hit-behavior~ obj))
                        (serialize (get-user-data~ obj))
                        ;; entity
                        (get-path~ obj)
                        (get-animate?~ obj)
                        (get-animation~ obj)
                        ;; actor
                        (serialize (get-velocity~ obj))
                        (serialize (get-fall-velocity~ obj))
                        (serialize (get-direction~ obj))
                        (serialize (get-life~ obj))
                        (serialize (get-global-cooldown~ obj))
                        (serialize (get-spell~ obj))
                        (serialize (get-adjustments~ obj))
                        (serialize (get-rapid-fire-acceleration~ obj))
                        (serialize (get-rapid-fire-duration~ obj))
                        (serialize (get-rapid-fire-cooldown~ obj))
                        (serialize (get-last-missile~ obj))
                        (serialize (get-max-missiles~ obj))
                        (serialize (get-missiles-count~ obj))
                        (serialize (get-history-color~ obj))
                        ;; missile
                        (serialize (get-kind~ obj))
                        (serialize (get-alive~ obj)))))
  
  
  (method meta override (unmarshall-object content)
    (bind-vector (;; component
                  name
                  visible?
                  ;; element
                  position
                  lookat
                  scale
                  radiuses
                  radius
                  color
                  hit-behavior
                  user-data
                  ;; entity
                  path
                  animate?
                  animation
                  ;; actor
                  velocity
                  fall-velocity
                  direction
                  life
                  global-cooldown
                  spell
                  adjustments
                  rapid-fire-acceleration
                  rapid-fire-duration
                  rapid-fire-cooldown
                  last-missile
                  max-missiles
                  missiles-count
                  history-color
                  ;; missile
                  kind
                  alive)
        content
      (let ((obj (new self name: name visible?: visible?)))
        ;; element
        (set-position~ obj (deserialize position))
        (set-lookat~ obj (deserialize lookat))
        (set-scale~ obj (deserialize scale))
        (set-radiuses~ obj (deserialize radiuses))
        (set-radius~ obj (deserialize radius))
        (set-color~ obj (deserialize color))
        (set-hit-behavior~ obj (deserialize hit-behavior))
        (set-user-data~ obj (deserialize user-data))
        ;; entity
        (set-path~ obj (deserialize path))
        (set-animate?~ obj (deserialize animate?))
        (set-animation~ obj (deserialize animation))
        ;; actor
        (set-velocity~ obj (deserialize velocity))
        (set-fall-velocity~ obj (deserialize fall-velocity))
        (set-direction~ obj (deserialize direction))
        (set-life~ obj (deserialize life))
        (set-global-cooldown~ obj (deserialize global-cooldown))
        (set-spell~ obj (deserialize spell))
        (set-adjustments~ obj (deserialize adjustments))
        (set-rapid-fire-acceleration~ obj (deserialize rapid-fire-acceleration))
        (set-rapid-fire-duration~ obj (deserialize rapid-fire-duration))
        (set-rapid-fire-cooldown~ obj (deserialize rapid-fire-cooldown))
        (set-last-missile~ obj (deserialize last-missile))
        (set-max-missiles~ obj (deserialize max-missiles))
        (set-missiles-count~ obj (deserialize missiles-count))
        (set-history-color~ obj (deserialize history-color))
        ;; missile
        (set-kind~ obj (deserialize kind))
        (set-alive~ obj (deserialize alive)))))
  
  
  (method override (element-radius)
    .05)
  
  
  (method override (get-friction)
    #f)
  
  
  (method (missile-speed) <fl>
    1.)
  
  (method (missile-life) <fl>
    2.5)
  
  
  (method override (tick commands elapse exit)
    (move-enemy elapse exit gravity?: #f response: response ignore-entities?: #f ignore-players?: #f)
    (set! alive (+ alive elapse))
    (when (> alive (missile-life))
      (remove-self)))
  
  
  (method override (hit collisions exit)
    (nextmethod collisions exit)
    (let ((world (current-world)))
      (let (iter (scan collisions))
        (when (not-null? scan)
          (let ((collision (car scan)))
            (case (missile-hit~ world self collision)
              ((stop))
              ((remove)
               (remove-self)
               (continuation-return exit))
              ((slide)
               (set! response 'slide))
              (else
               (iter (cdr scan)))))))))
  
  
  (method override (hit-floor reset exit)
    (remove-self)
    (continuation-return exit))
  
  
  (method (remove-self)
    (let ((world (current-world)))
      (remove-element~ world self)
      ;; quick hack for serialization not preserving actor
      (when actor
        (decrease-missiles~ actor))))
  
  
  (method override (rebound-x)
    )
  
  (method override (rebound-z)
    )))
