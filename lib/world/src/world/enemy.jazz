;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Enemy
;;;


(module world.enemy jazz


(import (jazz.geometry)
        (jazz.graphic)
        (jazz.graphic.opengl.glew)
        (jazz.io)
        (jazz.library)
        (jazz.literals)
        (jazz.media)
        (jazz.network)
        (jazz.platform)
        (jazz.platform.cairo)
        (jazz.runtime)
        (jazz.system)
        (jazz.ui)
        (jazz.ui.dialog)
        (jazz.ui.window)
        (time)
        (world)
        (world.actor)
        (world.autoload)
        (world.block)
        (world.element)
        (world.foreign)
        (world.geometry)
        (world.history)
        (world.mark)
        (world.texture)
        (world.window)
        (world.client.window))


;;;
;;;; Enemy
;;;


(definition public missile-speed
  2.5)

(definition public missile-delay
  .05)


(class Enemy extends Actor
  
  
  (method (move-enemy elapse exit (gravity: gravity #t))
    (let ((old-position (get-position))
          (factor (* elapse 65)))
      (let ((new-x (+ x (* (vertex-x velocity) factor)))
            (new-y (+ y (* (vertex-y velocity) factor)))
            (new-z (+ z (* (vertex-z velocity) factor))))
        (when (< (- new-y radius-y) (get-floor-level~ world))
          (hit-floor
            (lambda (y)
              (set! new-y y))
            exit))
        (when gravity
          (let ((gravity (if (eq? gravity #t) (get-gravity~ world) gravity)))
            (vertex-y-set! velocity (- (vertex-y velocity) gravity))))
        (when (< (vertex-y velocity) -1.0)
          (vertex-y-set! velocity -1.))
        (receive (hit-x hit-y hit-z) (hit-test~ zone self left bottom back (- new-x radius-x) (- new-y radius-y) (- new-z radius-z) width height depth radius-x radius-y radius-z (hit-filter))
          (when hit-x
            (bind (objects direction border reset) hit-x
              (hit objects 'x reset new-y new-z exit)
              (set! new-x reset)
              (rebound)))
          (when hit-y
            (bind (objects direction border reset) hit-y
              (hit objects 'y new-x reset new-z exit)
              (set! new-y reset)))
          (when hit-z
            (bind (objects direction border reset) hit-z
              (hit objects 'z new-x new-y reset exit)
              (set! new-z reset)
              (rebound))))
        (set! x new-x)
        (set! y new-y)
        (set! z new-z)
        (update-position)
        (update-area~ zone self old-position))))
  
  
  (method protected virtual (hit-filter)
    #f)
  
  
  (method protected virtual (hit-floor reset exit)
    (reset radius-y))
  
  
  (method protected virtual (hit objects axis new-x new-y new-z exit)
    @unify-with-die
    (when (memq? me objects)
      (lose~ world me)
      (continuation-return exit)))
  
  
  (method protected virtual (rebound)
    (if (< (vertex-x velocity) 0)
        (vertex-x-set! velocity .1)
      (vertex-x-set! velocity -.1))))


;;;
;;;; Turtle
;;;


(definition turtle-speed
  .1)


(class Turtle extends Enemy
  
  
  (slot stomp-time <fl> initialize 0. accessors generate)
  
  
  (method override (prepare rest)
    (nextmethod rest)
    (set! width 2.)
    (set! height 2.)
    (set! depth 2.)
    (set-texture (get-turtle-texture~ world))
    (set-color {Color Green})
    (vertex-x-set! velocity turtle-speed))
  
  
  (method override (tick commands elapse exit)
    (if stomp-time
        (when (>= (time->seconds (current-time)) stomp-time)
          (set! stomp-time #f))
      (move-enemy elapse exit)
      (when (and (getf (get-properties~ world) victor?:)
                 (or (< x -35.)
                     (> x -27.)))
        (rebound))))
  
  
  (method override (stomp)
    (set! stomp-time (+ (time->seconds (current-time)) 3.))
    #t))


;;;
;;;; Monster
;;;


(definition monster-speed
  .25)


(class Monster extends Enemy
  
  
  (slot stomp-time <fl> initialize 0. accessors generate)
  
  
  (method override (prepare rest)
    (nextmethod rest)
    (set! width 50.)
    (set! height 50.)
    (set! depth 50.)
    (set-texture (get-monster-texture~ world))
    (set-color {Color Green})
    (vertex-x-set! velocity monster-speed))
  
  
  (method override (tick commands elapse exit)
    (if stomp-time
        (when (>= (time->seconds (current-time)) stomp-time)
          (set! stomp-time #f))
      (move-enemy elapse exit)
      (when (and (getf (get-properties~ world) victor?:)
                 (or (< x -35.)
                     (> x -27.)))
        (rebound))))
  
  
  (method override (stomp)
    (set! stomp-time (+ (time->seconds (current-time)) 3.))
    #t))


;;;
;;;; Missile
;;;


(class Missile extends Enemy
  
  
  (property actor <object> initialize #f accessors generate)
  
  
  (slot start <f32vector> initialize (make-vertex) getter generate)
  
  
  (method override (prepare rest)
    (nextmethod rest)
    (set! width .5)
    (set! height .5)
    (set! depth .5)
    (set-texture (get-missile-texture~ world))
    (set-color {Color Red}))
  
  
  (method override (finish rest)
    (nextmethod rest)
    (vertex-copy! start position))
  
  
  (method override (tick commands elapse exit)
    (move-enemy elapse exit gravity: #f)
    ;; initial poor man boundaries
    (when (> (vertex-distance start position) 250.0)
      (remove-self)))
  
  
  (method override (hit-filter)
    (lambda (obj)
      (is-not? obj Missile)))
  
  
  (method override (hit-floor reset exit)
    (remove-self)
    (continuation-return exit))
  
  
  (method override (hit objects axis new-x new-y new-z exit)
    (nextmethod objects axis new-x new-y new-z exit)
    (let (iter (scan objects))
      (when (not-null? scan)
        (let ((obj (car scan)))
          (case (missile-hit~ world self obj axis new-x new-y new-z)
            ((stop))
            ((remove)
             (remove-self)
             (continuation-return exit))
            (else
             (iter (cdr scan))))))))
  
  
  (method (remove-self)
    (remove-element~ world self)
    (decrease-missiles~ actor))
  
  
  (method override (rebound)
    )
  
  
  (method override (draw-3d)
    (glPushMatrix)
    (glTranslatef x y z)
    (glColor4f red green blue alpha)
    (draw-as-sphere #f)
    (glPopMatrix))))
