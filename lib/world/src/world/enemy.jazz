;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Enemy
;;;


(module world.enemy jazz


(import (jazz.geometry)
        (jazz.graphic)
        (jazz.graphic.opengl.glew)
        (jazz.io)
        (jazz.library)
        (jazz.literals)
        (jazz.media)
        (jazz.network)
        (jazz.platform)
        (jazz.platform.cairo)
        (jazz.runtime)
        (jazz.system)
        (jazz.ui)
        (jazz.ui.dialog)
        (jazz.ui.window)
        (time)
        (world)
        (world.actor)
        (world.autoload)
        (world.block)
        (world.element)
        (world.foreign)
        (world.geometry)
        (world.history)
        (world.mark)
        (world.texture)
        (world.window)
        (world.client.window))


;;;
;;;; Enemy
;;;


(definition public missile-speed
  2.5)

(definition public missile-delay
  .1)


(class Enemy extends Actor
  
  
  (method (move-enemy elapse exit (gravity: gravity #t))
    (let ((old-position (get-position))
          (factor (* elapse 65)))
      (let ((new-x (+ x (* (vertex-x velocity) factor)))
            (new-y (+ y (* (vertex-y velocity) factor)))
            (new-z (+ z (* (vertex-z velocity) factor))))
        (when (< (- new-y radius-y) (get-floor-level~ zone))
          (hit-floor
            (lambda (y)
              (set! new-y y))
            exit))
        (when gravity
          (let ((gravity (if (eq? gravity #t) (get-gravity~ world) gravity)))
            (vertex-y-set! velocity (- (vertex-y velocity) gravity))))
        (when (< (vertex-y velocity) -1.0)
          (vertex-y-set! velocity -1.))
        (receive (hit-x hit-y hit-z) (hit-test~ zone self left bottom back (- new-x radius-x) (- new-y radius-y) (- new-z radius-z) width height depth radius-x radius-y radius-z (hit-filter))
          (when hit-x
            (bind (elements direction border reset) hit-x
              (hit elements 'x reset new-y new-z exit)
              (set! new-x reset)
              (rebound-x)))
          (when hit-y
            (bind (elements direction border reset) hit-y
              (hit elements 'y new-x reset new-z exit)
              (set! new-y reset)))
          (when hit-z
            (bind (elements direction border reset) hit-z
              (hit elements 'z new-x new-y reset exit)
              (set! new-z reset)
              (rebound-z))))
        (set! x new-x)
        (set! y new-y)
        (set! z new-z)
        (update-position)
        (update-area~ zone self old-position))))
  
  
  (method protected virtual (hit-filter)
    #f)
  
  
  (method protected virtual (hit-floor reset exit)
    (reset radius-y))
  
  
  (method protected virtual (hit elements axis new-x new-y new-z exit)
    @unify-with-die
    (when (memq? me elements)
      (lose~ world me)
      (continuation-return exit)))
  
  
  (method protected virtual (rebound-x)
    (vertex-x-set! velocity (- (vertex-x velocity)))
    (update-lookat))
  
  
  (method protected virtual (rebound-z)
    (vertex-z-set! velocity (- (vertex-z velocity)))
    (update-lookat))
  
  
  (method (update-lookat)
    (set-sight~ lookat (vertex-normalize (vertex (vertex-x velocity) 0. (vertex-z velocity))))
    (set-up~ lookat (get-world-up~ world))
    (set-right~ lookat (cross-product (get-sight~ lookat) (get-up~ lookat)))))


;;;
;;;; MOB
;;;


(class MOB extends Enemy
  
  
  (slot path-duration initialize #f getter generate)
  
  
  (method override (prepare rest)
    (nextmethod rest)
    (standardize!~ lookat)
    (path-mob))
  
  
  (method override (update-position)
    (nextmethod)
    (let ((scale .1))
      (set! matrix (matrix-multiply (make-translation-matrix x (- y 2.) z) (matrix-multiply (make-scaling-matrix scale scale scale) (make-lookat-matrix lookat))))))
  
  
  (method override (tick commands elapse exit)
    (if (<= path-duration 0)
        (path-mob)
      (decrease! path-duration)
      (move-enemy elapse exit)))
  
  
  (method protected virtual (path-mob)
    (cond ((< (random-real) .333)
           (vertex-x-set! velocity 0.)
           (vertex-z-set! velocity 0.))
          (else
           (vertex-x-set! velocity (* (random-in 1.) (mob-speed)))
           (vertex-z-set! velocity (* (random-in 1.) (mob-speed)))
           (update-lookat)))
    (set! path-duration (+ 100 (random 200))))
  
  
  (method protected virtual (mob-speed)
    ))


;;;
;;;; Wolf
;;;


(definition wolf-speed
  .1)


(class Wolf extends MOB
  
  
  (method override (prepare rest)
    (nextmethod rest)
    (set! width 4.)
    (set! height 4.)
    (set! depth 4.)
    (set-color {Color red: 40 green: 40 blue: 40})
    (set-model (find-model~ world "pyro"))
    (set-matrix (make-identity-matrix)))
  
  
  (method override (mob-speed)
    wolf-speed)
  
  
  (method override (draw-3d)
    @w
    (draw-entity)
    (draw-as-sphere-actor #f #f 'none 'high GL_FILL {Color red: 100 green: 100 blue: 100})))


;;;
;;;; Spider
;;;


(definition spider-speed
  .05)


(class Spider extends MOB
  
  
  (method override (prepare rest)
    (nextmethod rest)
    (set! width 4.)
    (set! height 4.)
    (set! depth 4.)
    (set-color {Color red:  0 green: 60 blue:  0}))
  
  
  (method override (mob-speed)
    spider-speed)
  
  
  (method override (draw-3d)
    (draw-as-sphere-actor #f #f 'none 'high GL_FILL {Color red: 50 green: 50 blue: 50})))


;;;
;;;; Turtle
;;;


(definition turtle-speed
  .025)


(class Turtle extends MOB
  
  
  (slot stomp-time <fl> initialize 0. accessors generate)
  
  
  (method override (prepare rest)
    (nextmethod rest)
    (set! width 2.)
    (set! height 2.)
    (set! depth 2.)
    (set-color {Color Green}))
  
  
  (method override (mob-speed)
    turtle-speed)
  
  
  (method override (path-mob)
    (if (getf (get-properties~ zone) victor?:)
        (vertex-x-set! velocity turtle-speed)
      (nextmethod)))
  
  
  (method override (tick commands elapse exit)
    (if stomp-time
        (when (>= (time->seconds (current-time)) stomp-time)
          (set! stomp-time #f))
      (move-enemy elapse exit)
      (when (and (getf (get-properties~ zone) victor?:)
                 (or (< x -35.)
                     (> x -27.)))
        (rebound-x))))
  
  
  (method override (stomp)
    (set! stomp-time (+ (time->seconds (current-time)) 3.))
    #t)
  
  
  (method override (draw-3d)
    (glPushMatrix)
    (glTranslatef x y z)
    (glColor4f red green blue alpha)
    (draw-as-cube)
    (glPopMatrix)))


;;;
;;;; Missile
;;;


(class Missile extends Enemy
  
  
  (property actor <object> initialize #f accessors generate)
  
  
  (slot start <f32vector> initialize (make-vertex) getter generate)
  
  
  (method override (prepare rest)
    (nextmethod rest)
    (set! width .5)
    (set! height .5)
    (set! depth .5)
    (set-color {Color Red}))
  
  
  (method override (finish rest)
    (nextmethod rest)
    (vertex-copy! start position))
  
  
  (method override (tick commands elapse exit)
    (move-enemy elapse exit gravity: #f)
    ;; initial poor man boundaries
    (when (> (vertex-distance start position) 250.0)
      (remove-self)))
  
  
  (method override (hit-filter)
    (lambda (obj)
      (is-not? obj Missile)))
  
  
  (method override (hit-floor reset exit)
    (remove-self)
    (continuation-return exit))
  
  
  (method override (hit elements axis new-x new-y new-z exit)
    (nextmethod elements axis new-x new-y new-z exit)
    (let (iter (scan elements))
      (when (not-null? scan)
        (let ((obj (car scan)))
          (case (missile-hit~ world self obj axis new-x new-y new-z)
            ((stop))
            ((remove)
             (remove-self)
             (continuation-return exit))
            (else
             (iter (cdr scan))))))))
  
  
  (method (remove-self)
    (remove-element~ world self)
    (decrease-missiles~ actor))
  
  
  (method override (rebound-x)
    )
  
  (method override (rebound-z)
    )
  
  
  (method override (draw-3d)
    (glPushMatrix)
    (glTranslatef x y z)
    (glColor4f red green blue alpha)
    (draw-as-sphere #f)
    (glPopMatrix))))
