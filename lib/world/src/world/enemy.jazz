;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Enemy
;;;


(module world.enemy jazz


(import (jazz.geometry)
        (jazz.graphic)
        (jazz.graphic.opengl.glew)
        (jazz.io)
        (jazz.library)
        (jazz.literals)
        (jazz.media)
        (jazz.network)
        (jazz.platform)
        (jazz.platform.cairo)
        (jazz.runtime)
        (jazz.system)
        (jazz.ui)
        (jazz.ui.dialog)
        (jazz.ui.window)
        (time)
        (world)
        (world.actor)
        (world.autoload)
        (world.block)
        (world.collision)
        (world.element)
        (world.foreign)
        (world.geometry)
        (world.history)
        (world.mark)
        (world.movement)
        (world.texture)
        (world.tile)
        (world.window)
        (world.client.window))


;;;
;;;; Enemy
;;;


(definition public missile-speed
  2.5)

(definition public missile-delay
  .1)


(class Enemy extends Actor
  
  
  (method (move-enemy elapse exit (gravity: gravity #t))
    (if (find-setting 'world.collision-detection? #f)
        (test-move-enemy elapse exit gravity)
    (let ((old-position (get-position))
          (factor (* elapse 65)))
      (let ((new-x (+ x (* (vertex-x velocity) factor)))
            (new-y (+ y (* (vertex-y velocity) factor)))
            (new-z (+ z (* (vertex-z velocity) factor))))
        (when (< (- new-y radius-y) (get-floor-level~ zone))
          (hit-floor
            (lambda (y)
              (set! new-y y))
            exit))
        (when gravity
          (let ((gravity (if (eq? gravity #t) (get-gravity~ world) gravity)))
            (vertex-y-set! velocity (- (vertex-y velocity) gravity))))
        (when (< (vertex-y velocity) -1.0)
          (vertex-y-set! velocity -1.))
        (receive (hit-x hit-y hit-z) (hit-test~ zone self left bottom back (- new-x radius-x) (- new-y radius-y) (- new-z radius-z) width height depth radius-x radius-y radius-z (hit-filter))
          (when hit-x
            (bind (elements direction border reset) hit-x
              (hit elements 'x reset new-y new-z exit)
              (set! new-x reset)))
          (when hit-y
            (bind (elements direction border reset) hit-y
              (hit elements 'y new-x reset new-z exit)
              (set! new-y reset)))
          (when hit-z
            (bind (elements direction border reset) hit-z
              (hit elements 'z new-x new-y reset exit)
              (set! new-z reset))))
        (set! x new-x)
        (set! y new-y)
        (set! z new-z)
        (update-position)
        (update-area~ zone self old-position)))))
  
  
  (method (test-move-enemy elapse exit gravity)
    (let ((old-position (copy-vertex position))
          (horizontal-velocity (copy-vertex velocity))
          (factor (* elapse 65)))
      (vertex-y-set! horizontal-velocity 0.)
      (let ((target-position (vertex+ position (vertex-scalar* horizontal-velocity factor))))
        (let ((mvt (new Movement position (vertex- target-position position))))
          (receive (new-position last-direction) (collide&slide radius mvt #f)
            (let ((target-fall (copy-vertex new-position)))
              (when (< (- (vertex-y target-position) radius-y) (get-floor-level~ zone))
                (hit-floor
                  (lambda (y)
                    (vertex-y-set! target-position y))
                  exit))
              (when gravity
                (let ((gravity (if (eq? gravity #t) (get-gravity~ world) gravity))
                      (adjusted (* elapse 50.)))
                  (vertex-y-set! velocity (- (vertex-y velocity) (* gravity adjusted)))
                  (vertex-y-set! target-fall (+ (vertex-y target-fall) (- (* (vertex-y velocity) adjusted) (* gravity .5 adjusted adjusted))))))
              (when (< (vertex-y velocity) -1.0)
                (vertex-y-set! velocity -1.))
              (let ((mvt (new Movement new-position (vertex- target-fall new-position))))
                (receive (new-fall last-direction) (collide&stop radius mvt #f)
                  (let ((floor-level (+ (get-floor-level~ zone) radius-y)))
                    (when (< (vertex-y new-fall) floor-level)
                      (vertex-y-set! new-fall floor-level)
                      (vertex-y-set! velocity 0.)))
                  (set-position new-fall)
                  (update-area~ zone self old-position)))))))))
  
  
  (method protected virtual (hit-filter)
    #f)
  
  
  (method protected virtual (hit-floor reset exit)
    (reset radius-y))
  
  
  (method protected virtual (hit elements axis new-x new-y new-z exit)
    @unify-with-die
    (when (memq? me elements)
      (lose~ world me)
      (continuation-return exit)))
  
  
  (method protected virtual (rebound-x)
    (vertex-x-set! velocity (- (vertex-x velocity)))
    (update-lookat))
  
  
  (method protected virtual (rebound-z)
    (vertex-z-set! velocity (- (vertex-z velocity)))
    (update-lookat))
  
  
  (method (update-lookat)
    (set-sight~ lookat (vertex-normalize (vertex (vertex-x velocity) 0. (vertex-z velocity))))
    (set-up~ lookat (get-world-up~ world))
    (set-right~ lookat (cross-product& (get-sight~ lookat) (get-up~ lookat)))))


;;;
;;;; Creature
;;;


(class Creature extends Enemy
  
  
  (slot path-duration initialize #f getter generate)
  (slot anim-duration initialize #f getter generate)
  (slot aggro-radius  initialize #f getter generate)
  (slot aggro-sound   initialize #f getter generate)
  (slot aggro-target  initialize #f getter generate)
  (slot attack-sound  initialize #f getter generate)
  
  
  (method override (prepare rest)
    (nextmethod rest)
    (standardize!~ lookat)
    (path-creature))
  
  
  (method override (update-position)
    (nextmethod)
    (set! matrix (matrix-multiply (make-translation-matrix x (- y 2.) z) (matrix-multiply (make-scaling-matrix scale scale scale) (make-lookat-matrix lookat)))))
  
  
  (method override (tick commands elapse exit)
    (or (players-aggro)
        (if (<= path-duration 0)
            (path-creature)
          (decrease! path-duration)))
    (move-enemy elapse exit))
  
  
  (method override (hit elements axis new-x new-y new-z exit)
    (for-each (lambda (element)
                (cond ((and (is? element Actor) (is-player?~ element))
                       (attack-player element))
                      ((is? element Tile)
                       (case axis
                         ((x) (rebound-x))
                         ((z) (rebound-z))))))
              elements))
  
  
  (method (players-aggro)
    (when aggro-radius
      (let (iter (scan (get-players~ zone)))
        (if (null? scan)
            (begin
              (set! aggro-target #f)
              #f)
          (let ((player (car scan)))
            (let ((dist (vertex-distance position (get-position~ player))))
              (if (< dist aggro-radius)
                  (begin
                    (aggro-player player)
                    #t)
                (iter (cdr scan)))))))))
  
  
  (method (aggro-player player)
    (when (neq? player aggro-target)
      (set! aggro-target player)
      (when aggro-sound
        (play-sound-file~ world aggro-sound)))
    (let ((direction (vertex-normalize (vertex- (get-position~ player) position))))
      (vertex-x-set! velocity (* (vertex-x direction) (creature-speed)))
      (vertex-z-set! velocity (* (vertex-z direction) (creature-speed))))
    (update-lookat))
  
  
  (method (attack-player player)
    (if (or (not anim-duration) (<= anim-duration 0))
        (begin
          (when attack-sound
            (play-sound-file~ world attack-sound)
            (wound~ player))
          (set! anim-duration 100))
      (decrease! anim-duration)))
  
  
  (method protected virtual (path-creature)
    (cond ((< (random-real) .333)
           (vertex-x-set! velocity 0.)
           (vertex-z-set! velocity 0.))
          (else
           (vertex-x-set! velocity (* (random-in 1.) (creature-speed)))
           (vertex-z-set! velocity (* (random-in 1.) (creature-speed)))
           (update-lookat)))
    (set! path-duration (+ 100 (random 200))))
  
  
  (method protected virtual (creature-speed)
    ))


;;;
;;;; Wolf
;;;


(definition wolf-speed
  .1)


(class Wolf extends Creature
  
  
  (method override (prepare rest)
    (nextmethod rest)
    (set! width 4.)
    (set! height 4.)
    (set! depth 4.)
    (set-color {Color red: 40 green: 40 blue: 40})
    (set! aggro-radius 40.)
    (set! aggro-sound "sound/wolf/aggro")
    (set! attack-sound "sound/wolf/attack")
    (set! wound-sound "sound/wolf/wound")
    (set! wound-critical-sound "sound/wolf/woundCritical")
    (set! death-sound "sound/wolf/death"))
  
  
  (method override (update-radius)
    (set! radius (/ width 2.))
    (set! radius-x radius)
    (set! radius-y radius)
    (set! radius-z radius))
  
  
  (method override (creature-speed)
    wolf-speed)
  
  
  (method override (draw-3d)
    (draw-as-sphere-actor #f #f 'none 'high GL_FILL {Color red: 100 green: 100 blue: 100})))


;;;
;;;; Spider
;;;


(definition spider-speed
  .05)


(class Spider extends Creature
  
  
  (method override (prepare rest)
    (nextmethod rest)
    (set! width 4.)
    (set! height 4.)
    (set! depth 4.)
    (set-color {Color red:  0 green: 60 blue:  0})
    (set! aggro-radius 25.)
    (set! aggro-sound "sound/spider/aggro")
    (set! attack-sound "sound/spider/attack")
    (set! wound-sound "sound/spider/wound")
    (set! wound-critical-sound "sound/spider/woundCritical")
    (set! death-sound "sound/spider/death"))
  
  
  (method override (update-radius)
    (set! radius (/ width 2.))
    (set! radius-x radius)
    (set! radius-y radius)
    (set! radius-z radius))
  
  
  (method override (creature-speed)
    spider-speed)
  
  
  (method override (draw-3d)
    (draw-as-sphere-actor #f #f 'none 'high GL_FILL {Color red: 50 green: 50 blue: 50})))


;;;
;;;; Turtle
;;;


(definition turtle-speed
  .025)


(class Turtle extends Creature
  
  
  (slot stomp-time <fl> initialize 0. accessors generate)
  
  
  (method override (prepare rest)
    (nextmethod rest)
    (set! width 2.)
    (set! height 2.)
    (set! depth 2.)
    (set-color {Color Green}))
  
  
  (method override (creature-speed)
    turtle-speed)
  
  
  (method override (path-creature)
    (if (getf (get-properties~ zone) victor?:)
        (vertex-x-set! velocity turtle-speed)
      (nextmethod)))
  
  
  (method override (tick commands elapse exit)
    (if stomp-time
        (when (>= (time->seconds (current-time)) stomp-time)
          (set! stomp-time #f))
      (move-enemy elapse exit)
      (when (and (getf (get-properties~ zone) victor?:)
                 (or (< x -35.)
                     (> x -27.)))
        (rebound-x))))
  
  
  (method override (stomp)
    (set! stomp-time (+ (time->seconds (current-time)) 3.))
    #t)
  
  
  (method override (draw-3d)
    (glPushMatrix)
    (glTranslatef x y z)
    (glColor4f red green blue alpha)
    (draw-as-cube)
    (glPopMatrix)))


;;;
;;;; Missile
;;;


(class Missile extends Enemy
  
  
  (property actor <object> initialize #f accessors generate)
  
  
  (slot start <f32vector> initialize (make-vertex) getter generate)
  
  
  (method override (prepare rest)
    (nextmethod rest)
    (set! width .5)
    (set! height .5)
    (set! depth .5)
    (set-color {Color Red}))
  
  
  (method override (finish rest)
    (nextmethod rest)
    (vertex-copy! start position))
  
  
  (method override (update-radius)
    (set! radius (/ width 2.))
    (set! radius-x radius)
    (set! radius-y radius)
    (set! radius-z radius))
  
  
  (method override (tick commands elapse exit)
    (move-enemy elapse exit gravity: #f)
    ;; initial poor man boundaries
    (when (> (vertex-distance start position) 250.0)
      (remove-self)))
  
  
  (method override (hit-filter)
    (lambda (obj)
      (is-not? obj Missile)))
  
  
  (method override (hit-floor reset exit)
    (remove-self)
    (continuation-return exit))
  
  
  (method override (hit elements axis new-x new-y new-z exit)
    (nextmethod elements axis new-x new-y new-z exit)
    (let (iter (scan elements))
      (when (not-null? scan)
        (let ((obj (car scan)))
          (case (missile-hit~ world self obj axis new-x new-y new-z)
            ((stop))
            ((remove)
             (remove-self)
             (continuation-return exit))
            (else
             (iter (cdr scan))))))))
  
  
  (method (remove-self)
    (remove-element~ world self)
    (decrease-missiles~ actor))
  
  
  (method override (rebound-x)
    )
  
  (method override (rebound-z)
    )
  
  
  (method override (draw-3d)
    (glPushMatrix)
    (glTranslatef x y z)
    (glColor4f red green blue alpha)
    (draw-as-sphere #f)
    (glPopMatrix))))
