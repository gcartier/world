;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; Planets
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.planet jazz


(import (jazz.syntax (phase syntax))
        (world)
        (world.autoload)
        (world.context)
        (world.dyes)
        (world.element)
        (world.generate)
        (world.geometry)
        (world.gravity)
        (world.homogeneous)
        (world.tessellation)
        (world.texture))


(definition public (tg (matrix: matrix #f))
  (let ((world (current-world)))
    (let ((uv (image-rect (get-block-atlas world) "stone")))
      (lambda (setup-proc triangle-proc quad-proc)
        (setup-proc 1 0)
        (let ((v1 (vertex -1. 0. 0.))
              (v2 (vertex  1. 0. 0.))
              (v3 (vertex  0. 1. 0.))
              (tl uv/left)
              (tt uv/top)
              (tr uv/right)
              (tb uv/bottom)
              (tdepth (uv-depth uv)))
          (triangle-proc
            v1 #f tl tb 0
            v2 #f tr tb 0
            v3 #f tr tt 0
            uv
            tdepth))))))


;;;
;;;; Planet
;;;


(class Planet extends Element implements Gravity-Well
  
  
  (property size    <fl>     initialize 1.      accessors generate)
  (property gravity <fl>     initialize .018    getter generate setter explicit)
  (property image   <object> initialize "stone" accessors generate)
  
  
  (slot mass    <fl>                   getter generate)
  (slot sectors <table+> initialize #f getter generate)
  
  
  (method override (finish self rest)
    (nextmethod self rest)
    (set-scaling self size)
    (set-color self red-dye)
    (update-mass self))
  
  
  (method override (element-radiuses self)
    (vertex size size size))
  
  
  (method public (set-gravity self grav)
    (set! gravity grav)
    (update-mass self))
  
  
  (method (update-mass self)
    (let ((radius (get-radius self)))
      (set! mass (* gravity (* radius radius)))))
  
  
  (method package (generate-planet self)
    (site (generate-planet on?: #f)
      (or sectors
          (let ((sects (make-table test: equal?)))
            (let ((world (current-world))
                  (zone (current-zone)))
              (let ((matrix (matrix-multiply (make-translation-matrix& position) (make-scaling-matrix& scale)) @w (make-translation-matrix& position))
                    (material (get-block-opaque world))
                    (uv (image-rect (get-block-atlas world) image)))
                (let ((generator @w (tg) (site (ico-sphere-generator on?: #f) (ico-sphere-generator (fxceiling size) uv))))
                  (for-each (lambda (face)
                              (let ((pos (get-origin (get-polygon face))))
                                (let ((index (position-sector-index zone pos)))
                                  (table-add sects index face))))
                            (generate-mesh generator matrix: matrix smooth-normals?: #t material: material return-faces?: #t))
                  @w
                  (site (sphere-faces on?: #f) (generate/add-faces generator matrix: matrix smooth-normals?: #t material: material))
                  @w
                  (site (sphere-polygons on?: #f) (generate/add-polygons generator element: self matrix: matrix)))))
            (set! sectors sects)
            sects))))
  
  
  (method override (print self output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{r precision: 3}" mass))))
  
  
  ;; done in generate-planet
  (method override (element-faces self)
    '())
  
  
  (method override (element-radius self)
    size)
  
  
  (method override (well-mass self)
    mass)
  
  
  (method override (inside? self r vert)
    (let ((distance (vertex-norm& (vertex-& vert position))))
      (<= distance (+ (get-radius self) r))))))
