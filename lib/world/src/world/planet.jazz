;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Planets
;;;


(module world.planet jazz


(import (jazz.jml)
        (jazz.graphic)
        (jazz.graphic.opengl.glew)
        (world)
        (world.autoload)
        (world.draw)
        (world.dyes)
        (world.element)
        (world.entity)
        (world.foreign)
        (world.gadget)
        (world.generate)
        (world.geometry)
        (world.gravity)
        (world.object)
        (world.serialization)
        (world.shader)
        (world.shape)
        (world.syntax (phase syntax)))


;;;
;;;; Planet
;;;


(class Planet extends Entity implements Gravity-Well
  
  
  (property size  <fl>     initialize 1.      accessors generate)
  (property pull  <fl>     initialize .01     accessors generate)
  (property image <object> initialize "dirty" accessors generate)
  
  
  (method override (finish rest)
    (nextmethod rest)
    (set-radiuses (vertex size size size))
    (set-scale (vertex size size size))
    (set-color red-dye)
    (let ((world (current-world)))
      (let ((material (get-tile-material~ world))
            (uv (image-rect~ (get-tile-atlas~ world) image)))
        (set! model (make-sphere-model 'planet uv material: material))
        (jazz.ui.window:delay-event
          (lambda ()
            (generate-sphere 48 24 uv 'physical matrix: matrix)))))
    (update-matrix))
  
  
  (method override (print output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{r precision: 1}" pull))))
  
  
  (method meta override (marshall-object obj)
    (serialize-object (class-of obj)
                      (vector
                        ;; component
                        (serialize (get-name~ obj))
                        (serialize (get-visible?~ obj))
                        ;; element
                        (serialize (get-position~ obj))
                        (serialize (get-radiuses~ obj))
                        (serialize (get-radius~ obj))
                        (serialize (get-scale~ obj))
                        (serialize (get-color~ obj))
                        (serialize (get-texture~ obj))
                        (serialize (get-hit-behavior~ obj))
                        (serialize (get-user-data~ obj))
                        ;; entity
                        ;; planet
                        (serialize (get-pull~ obj)))))
  
  
  (method meta override (unmarshall-object content)
    (bind-vector (;; component
                  name
                  visible?
                  ;; element
                  position
                  radiuses
                  radius
                  scale
                  color
                  texture
                  hit-behavior
                  user-data
                  ;; entity
                  ;; planet
                  pull)
        content
      (let ((obj (new self name: name visible?: visible?)))
        ;; element
        (set-position~ obj (deserialize position))
        (set-radiuses~ obj (deserialize radiuses))
        (set-radius~ obj (deserialize radius))
        (set-scale~ obj (deserialize scale))
        (set-color~ obj (deserialize color))
        (set-texture~ obj (deserialize texture))
        (set-hit-behavior~ obj (deserialize hit-behavior))
        (set-user-data~ obj (deserialize user-data))
        ;; entity
        ;; planet
        (set-pull~ obj (deserialize pull)))))
  
  
  (method override (element-radius)
    size)
  
  
  (method override (gravity-pull)
    pull)
  
  
  (method override (inside? r vert)
    (let ((distance (vertex-norm (vertex- vert center))))
      (<= distance (+ radius r))))))
