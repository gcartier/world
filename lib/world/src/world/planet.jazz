;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; Planets
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is WorldScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2014
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See http://github.com/gcartier/world for details.


(module world.planet jazz


(import (world)
        (world.autoload)
        (world.dyes)
        (world.element)
        (world.generate)
        (world.geometry)
        (world.gravity)
        (world.serialization)
        (world.syntax (phase syntax))
        (world.tessellation))


;;;
;;;; Planet
;;;


(class Planet extends Element implements Gravity-Well
  
  
  (properties (;; component
               name visible?
               ;; element
               position lookat scale radiuses radius color user-data)
    (property size    <fl>     initialize 1.      accessors generate)
    (property gravity <fl>     initialize .018    getter generate setter explicit)
    (property image   <object> initialize "dirty" accessors generate))
  
  
  (slot mass <fl> getter generate)
  
  
  (method override (finish rest)
    (nextmethod rest)
    (set-scaling size)
    (set-color red-dye)
    (update-mass))
  
  
  (method override (element-radiuses)
    (vertex size size size))
  
  
  (method public (set-gravity grav)
    (set! gravity grav)
    (update-mass))
  
  
  (method (update-mass)
    (let ((radius (get-radius)))
      (set! mass (* gravity (* radius radius)))))
  
  
  (method (generate-planet)
    (site (generate-planet on?: #f)
      (let ((world (current-world))
            (zone (current-zone)))
        (let ((matrix (matrix-multiply (make-translation-matrix& position) (make-scaling-matrix& scale)))
              (material (get-block-opaque~ world))
              (uv (image-rect~ (get-block-atlas~ world) image)))
          (let ((generator (site (sphere-generator on?: #f parent: generate-planet) (ico-sphere-generator (fxceiling size) uv))))
            (site (sphere-faces on?: #f parent: generate-planet) (generate/add-faces generator matrix: matrix smooth-normals?: #t material: material))
            (site (sphere-polygons on?: #f parent: generate-planet) (generate/add-polygons generator element: self matrix: matrix)))))))
  
  
  (method override (print output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{r precision: 3}" mass))))
  
  
  ;; done in generate-planet
  (method override (element-faces)
    '())
  
  
  (method override (element-radius)
    size)
  
  
  (method override (well-mass)
    mass)
  
  
  (method override (inside? r vert)
    (let ((distance (vertex-norm (vertex-& vert position))))
      (<= distance (+ (get-radius) r))))))
