;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Planets
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2013
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.planet jazz


(import (jazz.jml)
        (jazz.graphic)
        (jazz.graphic.opengl.glew)
        (world)
        (world.autoload)
        (world.draw)
        (world.dyes)
        (world.element)
        (world.entity)
        (world.foreign)
        (world.gadget)
        (world.generate)
        (world.geometry)
        (world.gravity)
        (world.object)
        (world.profiling)
        (world.serialization)
        (world.shader)
        (world.shape)
        (world.syntax (phase syntax))
        (world.tessellation))


;;;
;;;; Planet
;;;


(class Planet extends Element implements Gravity-Well
  
  
  (property size    <fl>     initialize 1.      accessors generate)
  (property gravity <fl>     initialize .018    getter generate setter explicit)
  (property image   <object> initialize "dirty" accessors generate)
  
  
  (slot mass <fl> getter generate)
  
  
  (method override (finish rest)
    (nextmethod rest)
    (set-scales (vertex size size size))
    (set-color red-dye)
    (update-mass))
  
  
  (method override (element-radiuses)
    (vertex size size size))
  
  
  (method public (set-gravity grav)
    (set! gravity grav)
    (update-mass))
  
  
  (method (update-mass)
    (let ((radius (get-radius)))
      (set! mass (* gravity (* radius radius)))))
  
  
  (method (generate-planet)
    (let ((world (current-world))
          (zone (current-zone)))
      (let ((matrix (matrix-multiply (make-translation-matrix& (get-x) (get-y) (get-z)) (make-scaling-matrix& (vertex-x scales) (vertex-y scales) (vertex-z scales))))
            (material (get-tile-material~ world))
            (uv (image-rect~ (get-tile-atlas~ world) image)))
        (let ((generator (profiling 'sphere-generator (lambda () (ico-sphere-generator (fxceiling size) uv)))))
          (profiling 'sphere-faces (lambda () (generate/add-faces generator matrix: matrix smooth-normals?: #t material: material)))
          (profiling 'sphere-polygons (lambda () (generate/add-polygons generator element: self matrix: matrix)))))))
  
  
  (method override (print output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{r precision: 3}" mass))))
  
  
  (method meta override (marshall-object obj)
    (serialize-object (class-of obj)
                      (vector
                        ;; component
                        (serialize (get-name~ obj))
                        (serialize (get-visible?~ obj))
                        ;; element
                        (serialize (get-position~ obj))
                        (serialize (get-scales~ obj))
                        (serialize (get-radiuses~ obj))
                        (serialize (get-radius~ obj))
                        (serialize (get-color~ obj))
                        (serialize (get-texture~ obj))
                        (serialize (get-hit-behavior~ obj))
                        (serialize (get-user-data~ obj))
                        ;; entity
                        ;; planet
                        (serialize (get-gravity~ obj)))))
  
  
  (method meta override (unmarshall-object content)
    (bind-vector (;; component
                  name
                  visible?
                  ;; element
                  position
                  scales
                  radiuses
                  radius
                  color
                  texture
                  hit-behavior
                  user-data
                  ;; entity
                  ;; planet
                  gravity)
        content
      (let ((obj (new self name: name visible?: visible?)))
        ;; element
        (set-position~ obj (deserialize position))
        (set-scales~ obj (deserialize scales))
        (set-radiuses~ obj (deserialize radiuses))
        (set-radius~ obj (deserialize radius))
        (set-color~ obj (deserialize color))
        (set-texture~ obj (deserialize texture))
        (set-hit-behavior~ obj (deserialize hit-behavior))
        (set-user-data~ obj (deserialize user-data))
        ;; entity
        ;; planet
        (set-gravity~ obj (deserialize gravity)))))
  
  
  ;; done in generate-planet
  (method override (element-faces)
    '())
  
  
  (method override (element-radius)
    size)
  
  
  (method override (well-mass)
    mass)
  
  
  (method override (inside? r vert)
    (let ((distance (vertex-norm (vertex-& vert position))))
      (<= distance (+ (get-radius) r))))))
