;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Ring
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.ring jazz


(import (jazz.geometry))


(proclaim (warn optimizations))


(class Ring extends Object
  
  
  (slot size         <fx>     getter generate)
  (slot max-size     <fx>     getter generate)
  (slot content      <vector> getter generate)
  (slot mutex        <object> getter generate)
  (slot take-condvar <object> getter generate)
  (slot head         <fx>     accessors generate)
  (slot tail         <fx>     accessors generate)
  (slot count        <fx>     accessors generate)
  
  
  (method override (initialize self size <fx> (max-size: max-size #f))
    (nextmethod self)
    (assert (> size 0))
    (set! self.size size)
    (set! self.max-size (or max-size size))
    (set! content (make-vector size))
    (set! mutex (make-mutex 'ring))
    (set! take-condvar (make-condition-variable 'take))
    (set! head 0)
    (set! tail 0)
    (set! count 0))
  
  
  (method public (give self obj)
    (mutex-lock! mutex)
    (cond ((< count size)
           (vector-set! content tail obj)
           (set! tail (modulo (+ tail 1) size))
           (increase! count))
          ((= size max-size)
           (vector-set! content tail obj)
           (set! tail (modulo (+ tail 1) size))
           (set! head tail))
          (else
           (let ((new-size (min max-size (fxround (* size GOLDEN_GROWTH)))))
             (let ((new-content (make-vector new-size))
                   (growth (- new-size size)))
               (subvector-move! content 0 tail new-content 0)
               (subvector-move! content tail size new-content (+ tail growth))
               (set! size new-size)
               (set! content new-content)
               (vector-set! content tail obj)
               (set! tail (modulo (+ tail 1) size))
               (set! head (modulo (+ head growth) size))
               (increase! count)))))
    (condition-variable-signal! take-condvar)
    (mutex-unlock! mutex))
  
  
  (method public (take self)
    (define (get)
      (prog1 (vector-ref content head)
        (set! head (modulo (+ head 1) size))
        (decrease! count)))
    
    (mutex-lock! mutex)
    (prog1 (if (> count 0)
               (get)
             (mutex-unlock! mutex take-condvar)
             (mutex-lock! mutex)
             (assert (> count 0)
               (get)))
      (mutex-unlock! mutex)))))
