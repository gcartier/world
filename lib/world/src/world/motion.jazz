;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; Motion Controllers
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.motion jazz


(import (jazz.geometry)
        (world)
        (world.autoload)
        (world.camera)
        (world.collision)
        (world.context)
        (world.dye)
        (world.element)
        (world.generation.block)
        (world.geometry)
        (world.history)
        (world.support))


(definition public (person-motion?)
  (is? (current-motion) Person-Motion))


(definition public (orbit-motion?)
  (is? (current-motion) Orbit-Motion))


(definition public (free-motion?)
  (is? (current-motion) Free-Motion))


(definition public (make-person-motion world camera person)
  (new Person-Motion world camera person))


(definition public (make-orbit-motion world camera target)
  (new Orbit-Motion world camera target))


(definition public (make-free-motion world camera)
  (new Free-Motion world camera))


;;;
;;;; Motion
;;;


(class Motion extends Object
  
  
  (slot world  <World>  getter generate)
  (slot camera <Camera> getter generate)
  
  
  (method override (initialize self world camera)
    (set! self.world world)
    (set! self.camera camera))
  
  
  (method package virtual (motion-target self)
    #f)
  
  
  (method package virtual (move-forward self)
    )
  
  
  (method package virtual (move-backward self)
    )
  
  
  (method package virtual (sprint-forward self)
    )
  
  
  (method package virtual (sprint-backward self)
    )
  
  
  (method package virtual (warp-forward self)
    )
  
  
  (method package virtual (warp-backward self)
    )
  
  
  (method package virtual (move-left self)
    )
  
  
  (method package virtual (move-right self)
    )
  
  
  (method package virtual (move-up self)
    )
  
  
  (method package virtual (move-down self)
    )
  
  
  (method package virtual (rotate-left self)
    )
  
  
  (method package virtual (rotate-right self)
    )
  
  
  (method package virtual (zoom-in self)
    )
  
  
  (method package virtual (zoom-out self)
    )
  
  
  (method package virtual (follow-player self)
    )
  
  
  (method package virtual (follow-actor self actor)
    )
  
  
  (method package virtual (eye-behind-player self)
    )
  
  
  (method package virtual (eye-behind-actor self actor)
    )
  
  
  (method protected virtual (restoring-desired-distance? self)
    #f)
  
  
  (method package virtual (restore-desired-distance self elapse)
    )
  
  
  (method package virtual (eye-center-player self)
    )
  
  
  (method package virtual (restore-roll self actor)
    )
  
  
  (method package virtual (reset-roll self actor)
    )
  
  
  (method protected virtual (rotate-camera self yaw <fl> pitch <fl>)
    (rotate-horizontal camera yaw)
    (rotate-vertical camera pitch))
  
  
  (method package (track-camera self dx <fl> dy <fl>)
    (when (hook-eye world)
      (rotate-camera self (/ (- dx) (get-track-sensitivity))
                     (/ (- dy) (get-track-sensitivity))))))


;;;
;;;; Target
;;;


(class Target-Motion extends Motion
  
  
  (slot target            <Element+> initialize #f   accessors generate)
  (slot max-distance      <fl>       initialize 30.0 getter generate)
  (slot desired-distance  <fl>       initialize 3.5  getter generate)
  (slot distance-override <fl+>      initialize #f   getter generate)
  (slot distance-goal     <fl+>      initialize #f   getter generate)
  (slot distance-restore  <fl+>      initialize #f   getter generate)
  (slot relative-yaw      <fl>       initialize 0.   getter generate)
  (slot absolute-pitch    <fl>       initialize 0.   getter generate)
  
  
  (method override (initialize self world camera target)
    (nextmethod self world camera)
    (set! self.target target)
    (prepare-yaw/pitch self))
  
  
  (method (prepare-yaw/pitch self)
    (let ((world (current-world)))
      (let ((world-up (get-world-up world)))
        ;; do not consider roll as a first draft
        (set! relative-yaw (- (vector-signed-angle (remove-pitch-quick-hack (get-sight camera)) (get-sight (motion-target self)) world-up)))
        (set! absolute-pitch (- (vertical-angle (get-sight camera) world-up))))))
  
  
  (method override (motion-target self)
    target)
  
  
  (method package (setup-motion self distance)
    (set! desired-distance distance)
    (set! distance-override #f)
    (set! distance-goal #f)
    (align-eye-behind-no-occlusion self (lens-center (motion-target self)))
    (adjust-player-alpha self))
  
  
  (method (effective-distance self)
    (or distance-override desired-distance))
  
  
  (method (desired-distance-closer self (speed: speed #f))
    (let ((speed (or speed .75)))
      (set! desired-distance (* desired-distance speed))
      (update-first-restore self)))
  
  
  (method (desired-distance-further self (speed: speed #f))
    (let ((speed (or speed .75)))
      (set! desired-distance (min (/ desired-distance speed) max-distance))
      (update-first-restore self)))
  
  
  (method (update-first-restore self)
    (when (and distance-restore distance-override)
      (set! distance-restore (/ (- desired-distance distance-override) eye-restore-duration))))
  
  
  (method package (adjust-player-alpha self)
    (let ((target (motion-target self))
          (transparent-distance (if translucent-players? .6 .8)))
      (let ((alpha (cond ((<= (vertex-distance (lens-center target) (get-position camera)) transparent-distance)
                          0.)
                         (translucent-players?
                          1.)
                         (else
                          (max 0.2 (min 1. (/ (effective-distance self) 2.)))))))
        (dye-alpha-set! (get-color target) alpha)
        (if (orb? (get-name (cache-model target)))
            (dye-alpha-set! (get-overlay target) 1.)
          (dye-alpha-set! (get-overlay target) alpha)))))
  
  
  (method override (follow-player self)
    (reposition-camera self)
    ;; until planets camera doesn't follow gravity fixed
    @PLANETS
    (unless (planets? (current-zone))
      (reposition-camera self)))
  
  
  (method (reposition-camera self)
    (let ((lookat (get-lookat camera))
          (target (motion-target self)))
      (standardize-lookat! lookat)
      ;; quick not correct doesn't work if lookat has roll
      ;; quick not correct hack to remove pitch
      (let ((x (vertex-x (get-sight target)))
            (z (vertex-z (get-sight target))))
        (unless (and (= x 0.)
                     (= z 0.))
          (let ((sight (vertex-normalize& (vertex& x 0. z))))
            (let ((up (get-up lookat)))
              (init-lookat camera sight up)))))
      (set-lookat camera (rotate-lookat& lookat relative-yaw (get-up lookat)))
      (set-lookat camera (rotate-lookat& lookat absolute-pitch (get-right lookat)))
      (when target
        (align-eye-behind self (lens-center target)))))
  
  
  (method override (rotate-camera self yaw <fl> pitch <fl>)
    (nextmethod self yaw pitch)
    (increase! relative-yaw yaw)
    (let ((epsilon .001))
      (set! absolute-pitch (between (- epsilon PI/2) (+ absolute-pitch pitch) (- PI/2 epsilon)))))
  
  
  (method override (follow-actor self actor)
    (when (person-motion?)
      (when actor
        (align-eye-behind self (lens-center actor)))))
  
  
  (method override (eye-behind-player self)
    (eye-behind-actor self (current-controlled world)))
  
  
  (method override (eye-behind-actor self actor)
    (when (and actor (person-motion?))
      (set-lookat camera (realign-lookat& (get-lookat actor) (get-world-up world)))
      (camera-update camera)))
  
  
  (definition eye-restore-duration
    1.6)
  
  
  ;; mimimum radius determined by experimentation
  (definition occlusion-radius
    .1)
  
  (definition occlusion-radiuses
    (vertex occlusion-radius occlusion-radius occlusion-radius))
  
  
  (method override (restoring-desired-distance? self)
    distance-goal)
  
  
  ;; lens   override   goal   distance
  ;; |      |          |      |
  ;; |      |          |      | - user desired distance
  ;; |      |          | - new override target
  ;; |      | - override to clear any occlusion
  ;; | - camera target
  ;;
  ;; distance-restore : constant restore velocity
  (method override (restore-desired-distance self elapse)
    (let ((target (motion-target self)))
      (when distance-goal
        (let ((augmented-override (+ distance-override (* elapse distance-restore))))
          (cond ((>= augmented-override desired-distance)
                 (set! distance-override #f)
                 (set! distance-goal #f))
                ((>= augmented-override distance-goal)
                 (set! distance-override distance-goal)
                 (set! distance-goal #f))
                (else
                 (set! distance-override augmented-override))))
        (align-eye-behind-no-occlusion self (lens-center target))
        (adjust-player-alpha self))))
  
  
  (method package (remove-eye-occlusion self lens)
    (let ((direction (vertex-negate& (get-sight camera))))
      (define (liquid-filter poly)
        (not (get-liquid-cube? (id->block (decode-id (get-data1 poly))))))
      
      (define (determine-eye-occlusion lens)
        (bind-values (center direction collisions) (collide&stop$ lens (vertex+& lens (vertex-scalar*& direction desired-distance)) (get-lookat (motion-target self)) occlusion-radiuses max-distance: desired-distance area-cube: (update-area-cube camera) polygon-filter: liquid-filter ignore-players?: #t)
          (if (null? collisions)
              #f
            (free-collisions$ collisions)
            (vertex-distance lens center))))
      
      (let ((occlusion (determine-eye-occlusion lens)))
        (let ((effective (effective-distance self))
              (goal (or occlusion desired-distance)))
          (when (and (/= goal effective)
                     (or (not distance-goal)
                         (/= goal distance-goal)))
            (if (< goal effective)
                (begin
                  (set! distance-override goal)
                  (set! distance-goal #f)
                  (set! distance-restore (/ (- desired-distance goal) eye-restore-duration))
                  (align-eye-behind-no-occlusion self lens)
                  (adjust-player-alpha self))
              (set! distance-goal goal)))))))
  
  
  (method (align-eye-behind-no-occlusion self pos)
    (let ((sight (get-sight camera)))
      (set-position camera (vertex-& pos (vertex-scalar*& sight (effective-distance self))))
      (derive-target camera)
      (camera-update camera)))
  
  
  (method (align-eye-behind self pos)
    (align-eye-behind-no-occlusion self pos)
    (remove-eye-occlusion self pos))
  
  
  (method package (orbit-behind self elem)
    (set! distance-override #f)
    (align-eye-behind-no-occlusion self (transformed-center elem)))
  
  
  (method (orbit-behind-target self)
    (orbit-behind self (motion-target self)))
  
  
  (method override (eye-center-player self)
    (let ((history (current-history)))
      (unless (get-paused? history)
        (follow-player self))))
  
  
  (method override (zoom-in self)
    (desired-distance-closer self)
    (eye-center-player self)
    (adjust-player-alpha self))
  
  
  (method override (zoom-out self)
    (desired-distance-further self)
    (eye-center-player self)
    (adjust-player-alpha self)))


;;;
;;;; Person
;;;


(class Person-Motion extends Target-Motion
  
  
  (slot desired-roll   <fl>      initialize 0. getter generate)
  (slot roll-origin    <symbol+> initialize #f getter generate)
  (slot roll-speed     <fl+>     initialize #f getter generate)
  (slot last-roll-time <fl+>     initialize #f getter generate)
  (slot last-track-fly <fl+>     initialize #f getter generate)
  
  
  (method override (motion-target self)
    (or target (current-me)))
  
  
  (method override (move-forward self)
    (move-forward (motion-target self) (get-commands world)))
  
  
  (method override (move-backward self)
    (move-backward (motion-target self) (get-commands world)))
  
  
  (method override (sprint-forward self)
    (sprint-forward (motion-target self) (get-commands world)))
  
  
  (method override (sprint-backward self)
    (sprint-backward (motion-target self) (get-commands world)))
  
  
  (method override (warp-forward self)
    (warp-forward (motion-target self)))
  
  
  (method override (warp-backward self)
    (warp-backward (motion-target self)))
  
  
  (method override (move-left self)
    (move-left (motion-target self) (get-commands world)))
  
  
  (method override (move-right self)
    (move-right (motion-target self) (get-commands world)))
  
  
  (method override (move-up self)
    (move-up (motion-target self) (get-commands world)))
  
  
  (method override (move-down self)
    (move-down (motion-target self) (get-commands world)))
  
  
  (method override (rotate-left self)
    (rotate-left (motion-target self) (get-commands world)))
  
  
  (method override (rotate-right self)
    (rotate-right (motion-target self) (get-commands world)))
  
  
  (method (force-up self distance)
    (let ((target (motion-target self))
          (position (get-position camera)))
      (set-position camera (vertex+& position (vertex-scalar*& (get-up (get-lookat target)) distance)))
      (derive-target camera)
      (camera-update camera)
      (set-position target (vertex+& (get-position target) (vertex& 0. distance 0.)))
      (follow-player self)))
  
  
  (method package (rotate-actor-horizontal self actor angle (follow-actor?: follow-actor? #t))
    (let ((history (current-history)))
      (let ((me (current-controlled world)))
        (let ((lookat (get-lookat actor)))
          (let ((up (get-world-up world)))
            (set-lookat actor (rotate-lookat& lookat angle up))
            (when (and (get-down? world) (not (get-moving? world)))
              (decrease! relative-yaw angle))
            (update-matrix actor)
            (when (and (eq? actor me) (not (get-paused? history)))
              (unless (and (get-down? world) (not (is-moving? world)))
                (set-lookat camera (rotate-lookat& (get-lookat camera) angle up)))
              (when follow-actor?
                (follow-actor self actor))))))))
  
  
  (method (rotate-actor-vertical self actor angle (follow-actor?: follow-actor? #t))
    (let ((history (current-history)))
      (let ((me (current-controlled world)))
        (let ((lookat (get-lookat actor)))
          (set-lookat actor (rotate-lookat& lookat angle (get-right lookat)))
          (update-matrix actor))
        (when (and (eq? actor me) (not (get-paused? history)))
          (set-lookat camera (rotate-lookat& (get-lookat camera) angle (get-right camera)))
          (when follow-actor?
            (follow-actor self actor))))))
  
  
  (method package (track-actor self actor dx dy local-sight local-up local-right first?)
    (let ((me (current-controlled world)))
      (if (flying? me)
          (track-fly self actor dx dy local-sight local-up local-right first?)
        (track-ground self actor dx dy local-sight local-up local-right first?))))
  
  
  (method (track-ground self actor dx dy local-sight local-up local-right first?)
    (let ((me (current-controlled world))
          (interface (current-interface))
          (world (current-world))
          (camera (current-camera))
          (history (current-history)))
      (let ((me? (eq? actor me))
            (angleh (/ (- dx) (get-track-sensitivity)))
            (anglev (/ (- dy) (get-track-sensitivity)))
            (actor-lookat (get-lookat actor))
            (local-lookat (lookat local-sight local-up local-right))
            (old-lookat (lookat-copy& (get-lookat actor))))
        (let ((pitch (vertical-angle local-sight (get-world-up world))))
          ;; remove pitch
          (when (and me? (not (get-paused? history)))
            (rotate-lookat-vertical! local-lookat local-lookat pitch))
          ;; start from camera lookat
          (when first?
            (set-lookat actor local-lookat))
          ;; adjust direction
          (rotate-actor-horizontal self actor angleh follow-actor?: #f)
          ;; aec quicky to force disembed
          (let ((center (transformed-center actor))
                (lookat (get-lookat actor))
                (radiuses (transformed-radiuses actor))
                (area-cube (update-area-cube actor))
                (ignore-entities? (ignore-entities? actor))
                (ignore-players? (ignore-players? actor))
                (ignore-me? (ignore-me? actor)))
            (bind-values (new-center slide-direction slide-collisions) (collide&slide$ center center lookat radiuses area-cube: area-cube include-back-facing?: #t ignore-entities?: ignore-entities? ignore-players?: ignore-players? ignore-me?: ignore-me?)
              (let ((movement (vertex- new-center center))
                    (position (get-position actor)))
                (let ((new-position (vertex+& position movement))
                      (old-position (vertex-copy& position)))
                  (when (some? (lambda (collision)
                                 (eq? (get-type collision) 'embedded))
                               slide-collisions)
                    (set-position actor new-position))))
              (free-collisions$ slide-collisions)))
          ;; add pitch
          (when (and me? (not (get-paused? history)))
            (rotate-vertical-up camera anglev (get-up (get-lookat actor))))
          (set! relative-yaw 0.)
          (set! absolute-pitch (- (vertical-angle (get-sight camera) (get-world-up world))))
          ;; camera follows actor
          (when (and me? (not (get-paused? history)))
            (follow-actor self actor))
          (refresh-compass world)
          (world.changes:lookat-change (current-seconds) actor #f #f old-lookat (get-lookat actor))))))
  
  
  (method (track-fly self actor dx dy local-sight local-up local-right first?)
    (let ((me (current-controlled world))
          (camera (current-camera))
          (history (current-history)))
      (let ((me? (eq? actor me))
            (angleh (/ (- dx) (get-track-sensitivity)))
            (anglev (/ (- dy) (get-track-sensitivity)))
            (camera-lookat (get-lookat camera))
            (actor-lookat (get-lookat actor))
            (old-lookat (lookat-copy& (get-lookat actor)))
            (world-up (get-world-up (current-world))))
        (without-roll actor
          (lambda ()
            ;; start from camera lookat
            (when first?
              (set-lookat actor (lookat& local-sight local-up local-right)))
            ;; adjust pitch
            (set-lookat actor (rotate-lookat-vertical-up& actor-lookat anglev world-up))
            (set-lookat camera (rotate-lookat-vertical-up& camera-lookat anglev world-up))
            ;; adjust direction
            (set-lookat actor (rotate-lookat& actor-lookat angleh world-up))
            (set-lookat camera (rotate-lookat& camera-lookat angleh world-up))
            ;; update matrix
            (update-matrix me)
            (set! relative-yaw 0.)
            (set! absolute-pitch (- (vertical-angle (get-sight camera) (get-world-up world))))
            ;; camera follows actor
            (when (and me? (not (get-paused? history)))
              (follow-actor self actor))))
        ;; adjust roll
        (roll-actor self actor angleh)
        (refresh-compass world)
        (world.changes:lookat-change (current-seconds) actor #f #f old-lookat (get-lookat actor)))))
  
  
  (method (roll-actor self actor angle)
    (let ((max-roll .8))
      (let ((desired (max (- max-roll) (min max-roll (* (- angle) 25.)))))
        (set! desired-roll desired)
        (set! roll-origin 'track)
        (set! roll-speed .05)
        (set! last-track-fly (current-seconds))
        (process-roll self actor))))
  
  
  (method override (restore-roll self actor)
    (when roll-origin
      (if (and last-track-fly (> (- (current-seconds) last-track-fly) .1))
          (begin
            (set! last-track-fly #f)
            (reset-roll self actor))
        (process-roll self actor))))
  
  
  (method override (reset-roll self actor)
    (unless (eq? roll-origin 'reset)
      (set! desired-roll 0.)
      (set! roll-origin 'reset)
      (let ((lookat (get-lookat actor)))
        (let ((dist (max (/ (abs (vertical-angle (get-right lookat) (roll-free-up (get-sight lookat)))) PI/4) .6)))
          ;; reset slower if less distance to go
          (set! roll-speed (* .02 dist))))
      (process-roll self actor)))
  
  
  (method (process-roll self actor)
    (define (increase-roll inc)
      (let ((lookat (get-lookat actor)))
        (when (or (not last-roll-time)
                  (> (abs inc) .01)
                  (> (- (current-seconds) last-roll-time) .05))
          (set! last-roll-time (current-seconds))
          (set-lookat actor (rotate-lookat& lookat inc (get-sight lookat))))))
    
    (when (and roll-origin (or (not last-roll-time) (> (- (current-seconds) last-roll-time) .01)))
      (let ((lookat (get-lookat actor)))
        (let ((current (vertical-angle (get-right lookat) (roll-free-up (get-sight lookat)))))
          (let ((distance (abs (- desired-roll current))))
            (if (float-near? distance 0.)
                (set! roll-origin #f)
              (if (eq? roll-origin 'reset)
                  (increase-roll (max (- roll-speed) (min roll-speed (- desired-roll current))))
                ;; increase damper for small distances
                (let ((damper (/ 15. distance)))
                  (let ((target-roll (/ (+ desired-roll (* damper current)) (+ 1. damper))))
                    (increase-roll (max (- roll-speed) (min roll-speed (- target-roll current)))))))))))))
  
  
  (method package (exit-fly self)
    (let ((target (motion-target self)))
      (let ((lookat (get-lookat target)))
        (rotate-actor-vertical self target (vertical-angle (get-sight lookat) (get-up lookat)))
        (follow-player self)))))


;;;
;;;; Orbit
;;;


(class Orbit-Motion extends Target-Motion
  
  
  (method override (motion-target self)
    (or target (first-target world) (current-me)))
  
  
  (method override (move-forward self)
    (desired-distance-closer self speed: .95)
    (orbit-behind self (motion-target self)))
  
  
  (method override (move-backward self)
    (desired-distance-further self speed: .95)
    (orbit-behind self (motion-target self)))
  
  
  (method override (move-left self)
    (rotate-right camera)
    (orbit-behind self (motion-target self)))
  
  
  (method override (move-right self)
    (rotate-left camera)
    (orbit-behind self (motion-target self)))
  
  
  (method override (move-up self)
    (rotate-down camera)
    (orbit-behind self (motion-target self)))
  
  
  (method override (move-down self)
    (rotate-up camera)
    (orbit-behind self (motion-target self)))
  
  
  (method override (rotate-left self)
    (rotate-right camera)
    (orbit-behind self (motion-target self)))
  
  
  (method override (rotate-right self)
    (rotate-left camera)
    (orbit-behind self (motion-target self))))


;;;
;;;; Free
;;;


(class Free-Motion extends Motion
  
  
  (method override (move-forward self)
    (when (hook-eye world)
      (move-forward camera)))
  
  
  (method override (move-backward self)
    (when (hook-eye world)
      (move-backward camera)))
  
  
  (method override (sprint-forward self)
    (when (hook-eye world)
      (sprint-forward camera)))
  
  
  (method override (sprint-backward self)
    (when (hook-eye world)
      (sprint-backward camera)))
  
  
  (method override (warp-forward self)
    (when (hook-eye world)
      (warp-forward camera)))
  
  
  (method override (warp-backward self)
    (when (hook-eye world)
      (warp-backward camera)))
  
  
  (method override (move-left self)
    (when (hook-eye world)
      (move-left camera)))
  
  
  (method override (move-right self)
    (when (hook-eye world)
      (move-right camera)))
  
  
  (method override (move-up self)
    (when (hook-eye world)
      (move-up camera)))
  
  
  (method override (move-down self)
    (when (hook-eye world)
      (move-down camera)))
  
  
  (method override (rotate-left self)
    (when (hook-eye world)
      (rotate-left camera)))
  
  
  (method override (rotate-right self)
    (when (hook-eye world)
      (rotate-right camera)))
  
  
  (method override (zoom-in self)
    (zoom-in camera))
  
  
  (method override (zoom-out self)
    (zoom-out camera))))
