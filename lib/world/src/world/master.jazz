;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Remote Master Implementation
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2016
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.master jazz


(import (jazz.io)
        (jazz.jrm)
        (jazz.network)
        (world.stub))


;;;
;;;; Slave
;;;


(definition *slave-ready-cookie*
  0)

(definition *slave-ready-table*
  (make-table test: eqv?))


(definition public (register-slave-ready-cookie)
  (prog1 *slave-ready-cookie*
    (increase! *slave-ready-cookie*)))


(definition public (register-slave-ready-procedure proc)
  (let ((cookie (register-slave-ready-cookie))
        (mutex (make-mutex 'ready)))
    (mutex-lock! mutex)
    (table-set! *slave-ready-table* cookie (cons mutex proc))
    cookie))


(definition public (registered-slave-ready cookie)
  (table-ref *slave-ready-table* cookie))


(definition public (wait-slave-ready cookie)
  (bind (mutex) (registered-slave-ready cookie)
    (mutex-lock! mutex)
    (mutex-unlock! mutex)))


(definition public (invoke-slave-ready-procedure slave cookie)
  (bind (mutex . proc) (registered-slave-ready cookie)
    (table-clear *slave-ready-table* cookie)
    (proc slave cookie)
    (mutex-unlock! mutex)))


(definition public (spawn-slave-process name filename ready-proc (debug?: debug? #f) (wait?: wait? #f))
  (define (determine-slave-path)
    (let ((filename (add-extension filename (executable-extension kernel-platform))))
      (or (find-kernel-file filename)
          (error "Unable to find {a} executable" name))))
  
  (let ((slave-path (determine-slave-path))
        (cookie (register-slave-ready-procedure ready-proc)))
    (open-process
      (list
        path: slave-path
        arguments: `("-:daqQ-"
                     ;; it is not completly correct at the moment to always debug
                     ;; the slave because of the evaluate always hack done in yownu
                     ,@(let ((arg (command-argument "debugger")))
                         (if (and debug? arg)
                             (list "-debugger" arg)
                           '()))
                     "-master" ,(encode-host/port (or (listening-host~ (get-remote-listener)) "localhost") (listening-port~ (get-remote-listener)))
                     "-master-cookie" ,(->string cookie))
        stdin-redirection: #f
        stdout-redirection: #f
        stderr-redirection: #f
        show-console: #f))
    (when wait?
      (wait-slave-ready cookie))))


;;;
;;;; Master
;;;


(class World-Remote-Master extends Object
  
  
  (method public (slave-ready slave cookie)
    (invoke-slave-ready-procedure slave cookie)))


(definition public (make-world-remote-master)
  (new World-Remote-Master-Local-Proxy (new World-Remote-Master)))


(register-object~ (get-local-register) 'world-remote-master (make-world-remote-master)))
