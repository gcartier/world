;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Application
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is WorldScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2014
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See http://github.com/gcartier/world for details.


(module world.appl jazz


(import (gambit.log)
        (jazz.graphic)
        (jazz.io)
        (jazz.jml)
        (jazz.library)
        (jazz.logger)
        (jazz.system)
        (jazz.system.application)
        (jazz.ui)
        (jazz.ui.view)
        (jazz.ui.window)
        (world)
        (world.autoload)
        (world.interface.dialogs)
        (world.interface.documents)
        (world.log)
        (world.manager)
        (world.option)
        (world.settings)
        (world.syntax (phase syntax))
        (world.task))


(class World-Application extends Application
  
  
  (slot current-role        initialize #f getter generate)
  (slot current-role-traits initialize #f getter generate)
  (slot options             initialize #f getter generate)
  

  (define settings-updates
    (list->updates
      '((version: 100000 targets: settings))))


  (define (convert-settings dir old)
    (define (convert-initial)
      100000)

    (case old
      ((#f) (convert-initial))
      (else #f)))


  (method override (settings-version)
    (get-update-version (car settings-updates)))

  
  (method (determine-settings)
    (or (command-argument "settings")
        (let ((settings-dir {Directory Build "settings"}))
          (and (exists?~ settings-dir)
               (versioned-directory (parse~ settings-dir) 'settings settings-updates convert-settings feedback?: #f)))
        (let ((settings-root (settings-root)))
          (copy-settings-if-not-exists settings-root (settings-alias))
          (versioned-directory (parse~ settings-root) 'settings settings-updates convert-settings feedback?: #f))))
  
  
  (method (prepare/determine-role)
    (define (determine-role)
      (let ((role-file {File Roles-Settings ".role"}))
        (if (exists?~ role-file)
            (let ((metadata (call-with-input-file (path-settings role-file) read)))
              (and (pair? metadata)
                   (pair? (cdr metadata))
                   (let ((symbol (cadr metadata)))
                     (and (symbol? symbol)
                          symbol))))
          'user)))
    
    (let ((role (determine-role)))
      (assert (memq? role (valid-roles))
        (prepare-role role)
        (list 'Roles-Settings (symbol->string role)))))
  
  
  (method protected virtual (valid-roles)
    '())


  (method public (user-role?)
    (eq? current-role 'user))


  (method public (programmer-role?)
    (eq? current-role 'programmer))


  (method public (admin-role?)
    (eq? current-role 'admin))
  
  
  (method override (finish-process)
    (nextmethod)
    (random-seed (find-setting 'world.random-seed #f))
    (set-logger-directory {Directory Settings "logs"})
    (when (find-setting 'world.gc-report? #f)
      (gc-report-set! #t))
    (set-validate-shaders? (find-setting 'world.validate-shaders? #f))
    (setup-styles)
    (update-world-options))

  
  ;;;
  ;;;; Loop
  ;;;
  
  
  (method override (run-loop)
    (with-log-context "event" event-id support-state #f
      (lambda (log-context)
        (nextmethod))))
  
  
  ;; copy/paste of thread-process and process-delayed-events
  ;; to have full control over the primordial thread
  (method override (thread-process-loop)
    (define (thread-process-delayed-events)
      (declare (proper-tail-calls))
      (let ((msg (read-delayed-event)))
        (when (not (eof-object? msg))
          (let ((thunk (car msg)))
            (site (delayed on?: #t parent: event)
              (with-task-mutex event-sequential-state
                (lambda ()
                  (thunk))))
            (thread-process-delayed-events)))))
    
    (declare (proper-tail-calls))
    (setup-threads~ (current-world))
    (let ((log-context (current-log-context)))
      (let (loop)
        (site (event on?: #t)
          (log-transition log-context waiting-state)
          (let ((msg (thread-read-message timeout: +infinity)))
            (log-transition log-context support-state)
            (thread-process-delayed-events)
            (when (not (eof-object? msg))
              (bind (thunk . chain) msg
                (parameterize ((current-continuation-chain chain))
                  (site (thunk on?: #t parent: event)
                    (if (eq? (mutex-state task-mutex) (current-thread))
                        (thunk)
                      (with-task-mutex event-sequential-state
                        (lambda ()
                          (thunk))))))))))
        (loop))))
  
  
  (method override (synchronize-messages?)
    #f)
  
  
  ;;;
  ;;;; Tier
  ;;;
  
  
  (method public virtual abstract (tier))
  (method public virtual abstract (server-side?))
  (method public virtual abstract (client-side?))
  (method public virtual abstract (get-world-server))
  (method public virtual abstract (get-world-client))
  (method public virtual abstract (enter-zone))

  
  ;;;
  ;;;; Name
  ;;;
  
  
  (method protected virtual (effective-player-name)
    )
  
  
  ;;;
  ;;;; Settings
  ;;;
  
  
  (method protected virtual (settings-root)
    {Directory Home ".world"})
  
  
  (method protected virtual (settings-alias)
    'World)
  
  
  ;;;
  ;;;; Roles
  ;;;
  
  
  (method protected virtual (role-traits role)
    (error "Unknown role: {s}" role))


  (method (prepare-role role)
    (set! current-role role))
  
  
  (method (install-role)
    (let ((traits (role-traits current-role)))
      (for-each (lambda (info)
                  (bind (alias trait) info
                    (let ((component (process-alias alias)))
                      (when component
                        (replace-active-trait~ component trait)))))
                traits)
      (set! current-role-traits traits)))
  
  
  (method (find-role-trait name)
    (let ((pair (assq name current-role-traits)))
      (when pair
        (cadr pair))))


  ;;;
  ;;;; Alias
  ;;;
  
  
  (method override (process-alias name)
    (case name
      ((:world) (current-world))
      ((:zone) (current-zone))
      ((:tutorial) (current-tutorial))
      (else (nextmethod name))))
  
  
  ;;;
  ;;;; Shortcuts
  ;;;
  
  
  (method override (dispatch-shortcut shortcut)
    (if (and (get-focus)
             (let ((modifiers (get-modifiers~ shortcut))
                   (key (get-key~ shortcut)))
               (and (or (null? modifiers)
                        (equal? modifiers '(:shift)))
                    (char? key)
                    (word-constituent? key))))
        #f
      (if (let ((world (current-world)))
            (or (not world)
                (not (process-shortcut~ world shortcut))))
          (nextmethod shortcut)
        #t)))
  
  
  ;;;
  ;;;; Resources
  ;;;
  
  
  (method override (resources-dir)
    (let ((repo (find-repository 'World)))
      (if (and repo (repository-binary? repo))
          {Directory World "lib" "jazz.resources" "resources"}
        (nextmethod))))
  
  
  ;;;
  ;;;; Runtime
  ;;;
  
  
  (method override (runtime-products)
    (let ((world (current-world)))
      (if (not world)
          '()
        (let ((queue (new-queue)))
          (iterate-table (get-installed-modules~ world)
            (lambda (name info)
              (bind (dirname . repository) info
                (for-each (lambda (package)
                            (for-each (lambda (product)
                                        (let ((name (product-descriptor-name product)))
                                          (enqueue queue name)))
                                      (package-products package)))
                          (repository-packages repository)))))
          (queue-list queue)))))

  
  ;;;
  ;;;; Manager
  ;;;
  
  
  (method override (prepare-window-manager)
    (set-window-manager (new World-Window-Manager)))
  
  
  ;;;
  ;;;; Activation
  ;;;
  
  
  (method override (deactivate)
    (update-rate #f)
    (nextmethod))
  
  
  (method override (activate)
    (update-rate #t)
    (nextmethod))
  
  
  ;; change refresh rate based on active window or not
  (method (update-rate active?)
    )


  (method (check-news)
    (let ((news (news-file))
          (setting-name 'world.last-news))
      (let ((last (find-setting setting-name #f))
            (actual (digest-file (parse~ news) 'SHA-1)))
        (when (and last (not (equal? last actual)))
          (propose-news)
          (set-setting~ settings setting-name actual)
          (save-content~ settings)))))
  
  
  (method (propose-news)
    (open-message "News have changed since you last viewed them"
                  caption: "News"
                  type: 'question
                  yes: "Show Me"
                  no: "Ignore"
                  execute: (lambda (evt)
                             (let ((dialog (find-ascendant~ (get-sender~ evt) World-Dialog))
                                   (button (get-property~ evt button:)))
                               (close~ dialog)
                               (case button
                                 ((yes)
                                  (show-news)))))))
  
  
  (method (show-news)
    (open-document (news-file) class: World-Formatted-Text-View))
  
  
  ;;;
  ;;;; Files
  ;;;
  
  
  (method virtual (news-file)
    (world-file '("devel" "world" "News.ftx")))
  
  
  (method virtual (roadmap-file)
    (world-file '("devel" "world" "Roadmap.ftx")))
  
  
  (method virtual (help-file)
    (world-file '("devel" "world" "Help.ftx")))
  
  
  ;;;
  ;;;; Styles
  ;;;
  
  
  (definition world-styles
    (<form>
      (<Styles-Preferences>
        (<Text-Style-Preferences> name: Text-Base                     font: {Font Label antialias: none} color: {Color White})
        (<Text-Style-Preferences> name: Code-Base                     font: {Font Code antialias: none} color: {Color White})
        (<Text-Style-Preferences> name: Text-Title                    color: {Color Text-Red})
        (<Text-Style-Preferences> name: Text-Comment                  color: {Color Text-Purple})
        (<Text-Style-Preferences> name: Text-Expr-Comment             color: {Color Text-Dark})
        (<Text-Style-Preferences> name: Text-Named-Comment            color: {Color Text-Dark})
        (<Text-Style-Preferences> name: Text-Line-Comment             color: {Color Text-Purple})
        (<Text-Style-Preferences> name: Text-Balanced-Comment         color: {Color Text-Green})
        (<Text-Style-Preferences> name: Text-Declaration-Keyword      color: {Color Text-Blue})
        (<Text-Style-Preferences> name: Text-Declaration              color: {Color Text-Green})
        (<Text-Style-Preferences> name: Text-Documented-Declaration   color: {Color Text-Green})
        (<Text-Style-Preferences> name: Text-Undocumented-Declaration color: {Color Text-Green})
        (<Text-Style-Preferences> name: Text-Definition               color: {Color Text-Red})
        (<Text-Style-Preferences> name: Text-Keyword                  color: {Color Text-Blue})
        (<Text-Style-Preferences> name: Text-Jazzdoc                  color: {Color Text-Purple})
        (<Text-Style-Preferences> name: Text-Jazzdoc-Body             color: {Color Text-Dark})
        (<Text-Style-Preferences> name: Text-Tag                      color: {Color Text-Purple})
        (<Text-Style-Preferences> name: Text-Specifier                color: {Color Text-Dark})
        (<Text-Style-Preferences> name: Text-Literal                  color: {Color Text-Ochre})
        (<Text-Style-Preferences> name: Text-Char                     color: {Color Text-Ochre})
        (<Text-Style-Preferences> name: Text-Number                   color: {Color Text-Ochre})
        (<Text-Style-Preferences> name: Text-Boolean                  color: {Color Text-Ochre})
        (<Text-Style-Preferences> name: Text-String                   color: {Color Text-Ochre})
        (<Text-Style-Preferences> name: Text-Delimited-String         color: {Color Text-Ochre})
        (<Text-Style-Preferences> name: Text-Named-String             color: {Color Text-Ochre})
        (<Text-Style-Preferences> name: Text-Quotation                color: {Color Text-Ochre})
        (<Text-Style-Preferences> name: Text-Feature                  color: {Color Text-Orange})
        (<Text-Style-Preferences> name: Text-Metadata                 color: {Color Text-Ochre}))))
  
  
  (method (setup-styles)
    (register-children~ (instantiate~ world-styles) (styles-domain)))

  
  ;;;
  ;;;; Options
  ;;;
  
  
  (method public (update-world-options)
    (set! options (new World-Options)))
  
  
  ;;;
  ;;;; Toplevel
  ;;;
  
  
  (method override (show-toplevel)
    )
  
  
  ;;;
  ;;;; Interface
  ;;;
  
  
  (method protected virtual (setup-application-interface)
    ))


;;;
;;;; Options
;;;


(class World-Options extends Component
  
  
  (form
    (<install>
      (<Options>    name: video
        (<Options>                  title: "Rendering"
          (<Option>                 title: "Sector size" setting: world.sector-size)
          (<Option>                 title: "View distance" setting: world.view-distance)
          (<Option>                 title: "Dynamic lights" setting: world.dynamic-lights)
          (<Option>                 title: "Post processing?" setting: world.post-processing?)
          (<Option>                 title: "Multisampling" setting: world.multisampling))
        (<Options>                  title: "Environment"
          (<Option>                 title: "Sun cycle?" setting: world.sun-cycle?)
          (<Option>                 title: "Fog?" setting: world.fog?)))
      (<Options>    name: audio
        (<Options>                  title: "Music"
          (<Option>                 title: "Music?" setting: world.music?)
          (<Option>                 title: "Music Loop?" setting: world.music-loop?))
        (<Options>                  title: "Sounds"
          (<Option>                 title: "Sounds?" setting: world.sounds?)
          (<Option>                 title: "Selection sounds?" setting: world.selection-sounds?)))
      (<Options>    name: interface
        (<Options>                  title: "General"
          (<Option>                 title: "Confirmation dialogs?" setting: world.confirmation-dialogs?))
        (<Options>                  title: "Camera"
          (<Option>                 title: "Move speed" setting: world.camera-move-speed)
          (<Option>                 title: "Strafe speed" setting: world.camera-strafe-speed)
          (<Option>                 title: "Rotate speed" setting: world.camera-rotate-speed)))))))
