;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Application
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is WorldScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2014
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See http://github.com/gcartier/world for details.


(module world.appl jazz


(import (jazz.io)
        (jazz.system.application)
        (jazz.ui.view)
        (jazz.ui.window)
        (world)
        (world.autoload)
        (world.syntax (phase syntax))
        (world.manager))


(class World-Application extends Application
  
  
  (method public virtual abstract (tier))
  (method public virtual abstract (server-side?))
  (method public virtual abstract (client-side?))
  (method public virtual abstract (get-world-server))
  (method public virtual abstract (get-world-client))
  (method public virtual abstract (enter-zone))

  
  ;;;
  ;;;; Name
  ;;;
  
  
  (method protected virtual (effective-player-name)
    )
  
  
  ;;;
  ;;;; Settings
  ;;;
  
  
  (method protected virtual (settings-root)
    {Directory Home ".world"})
  
  
  (method protected virtual (settings-alias)
    'World)
  
  
  ;;;
  ;;;; Shortcuts
  ;;;
  
  
  (method override (dispatch-shortcut shortcut)
    (if (and (get-focus)
             (let ((modifiers (get-modifiers~ shortcut))
                   (key (get-key~ shortcut)))
               (and (or (null? modifiers)
                        (equal? modifiers '(:shift)))
                    (char? key)
                    (word-constituent? key))))
        #f
      (if (let ((world (current-world)))
            (or (not world)
                (not (process-shortcut~ world shortcut))))
          (nextmethod shortcut)
        #t)))
  
  
  ;;;
  ;;;; Resources
  ;;;
  
  
  (method override (resources-dir)
    (let ((repo (find-repository 'World)))
      (if (and repo (repository-binary? repo))
          {Directory World "lib" "jazz.resources" "resources"}
        (nextmethod))))
  
  
  ;;;
  ;;;; Runtime
  ;;;
  
  
  (method override (runtime-products)
    (let ((world (current-world)))
      (if (not world)
          '()
        (let ((queue (new-queue)))
          (iterate-table (get-installed-modules~ world)
            (lambda (name info)
              (bind (dirname . repository) info
                (for-each (lambda (package)
                            (for-each (lambda (product)
                                        (let ((name (product-descriptor-name product)))
                                          (enqueue queue name)))
                                      (package-products package)))
                          (repository-packages repository)))))
          (queue-list queue)))))

  
  ;;;
  ;;;; Manager
  ;;;
  
  
  (method override (prepare-window-manager)
    (set-window-manager (new World-Window-Manager)))
  
  
  ;;;
  ;;;; Activation
  ;;;
  
  
  (method override (deactivate)
    (update-rate #f)
    (nextmethod))
  
  
  (method override (activate)
    (update-rate #t)
    (nextmethod))
  
  
  ;; change refresh rate based on active window or not
  (method (update-rate active?)
    )
  
  
  ;;;
  ;;;; Toplevel
  ;;;
  
  
  (method override (show-toplevel)
    )
  
  
  ;;;
  ;;;; Interface
  ;;;
  
  
  (method protected virtual (setup-application-interface)
    )))
