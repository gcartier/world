;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; World Application
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2013
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.appl jazz


(import (jazz.debuggee)
        (jazz.graphic)
        (jazz.graphic.opengl.glew)
        (jazz.ide.login)
        (jazz.io)
        (jazz.jml)
        (jazz.jrm)
        (jazz.library)
        (jazz.locale)
        (jazz.system)
        (jazz.system.application)
        (jazz.ui)
        (jazz.ui.view)
        (jazz.ui.window)
        (jazz.version)
        (world)
        (world.autoload)
        (world.player)
        (world.settings)
        (world.syntax (phase syntax))
        (world.client.configuration)
        (world.client.window)
        (world.manager)
        (world.window))


(class World-Application extends Application
  
  
  (method public virtual abstract (tier))
  (method public virtual abstract (server-side?))
  (method public virtual abstract (client-side?))
  (method public virtual abstract (get-world-server))
  (method public virtual abstract (get-world-client))
  (method public virtual abstract (enter-zone))

  
  ;;;
  ;;;; Name
  ;;;
  
  
  (method protected virtual (effective-player-name)
    )
  
  
  ;;;
  ;;;; Settings
  ;;;
  
  
  (method protected virtual (settings-root)
    {Directory Home ".world"})
  
  
  (method protected virtual (settings-alias)
    'World)
  
  
  ;;;
  ;;;; Shortcuts
  ;;;
  
  
  (method override (dispatch-shortcut shortcut)
    (if (and (get-focus)
             (let ((modifiers (get-modifiers~ shortcut))
                   (key (get-key~ shortcut)))
               (and (or (null? modifiers)
                        (equal? modifiers '(:shift)))
                    (char? key)
                    (word-constituent? key))))
        #f
      (if (let ((world (current-world)))
            (or (not world)
                (not (process-shortcut~ world shortcut))))
          (nextmethod shortcut)
        #t)))
  
  
  ;;;
  ;;;; Resources
  ;;;
  
  
  (method override (resources-dir)
    (let ((repo (find-repository 'World)))
      (if (and repo (repository-binary? repo))
          {Directory World "lib" "jazz.resources" "resources"}
        (nextmethod))))
  
  
  ;;;
  ;;;; Runtime
  ;;;
  
  
  (method override (runtime-products)
    (let ((world (current-world))
          (queue (new-queue)))
      (iterate-table (get-installed-modules~ world)
        (lambda (name info)
          (bind (dirname . repository) info
            (for-each (lambda (package)
                        (for-each (lambda (product)
                                    (let ((name (product-descriptor-name product)))
                                      (enqueue queue name)))
                                  (package-products package)))
                      (repository-packages repository)))))
      (queue-list queue)))

  
  ;;;
  ;;;; Manager
  ;;;
  
  
  (method override (prepare-window-manager)
    (set-window-manager (new World-Window-Manager)))
  
  
  ;;;
  ;;;; Activation
  ;;;
  
  
  (method override (deactivate)
    (update-rate #f)
    (nextmethod))
  
  
  (method override (activate)
    (update-rate #t)
    (nextmethod))
  
  
  ;; change refresh rate based on active window or not
  (method (update-rate active?)
    )
  
  
  ;;;
  ;;;; Toplevel
  ;;;
  
  
  (method override (show-toplevel)
    )
  
  
  ;;;
  ;;;; Interface
  ;;;
  
  
  (method protected virtual (setup-application-interface)
    )))
