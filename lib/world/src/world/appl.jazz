;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Application
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.appl jazz


(import @log (gambit.log)
        (jazz.application)
        (jazz.component)
        (jazz.graphic)
        (jazz.io)
        (jazz.jml)
        (jazz.logger)
        (jazz.syntax (phase syntax))
        (jazz.text.preferences)
        (jazz.ui)
        (jazz.view)
        (jazz.window)
        (world)
        (world.autoload)
        (world.interface.dialogs)
        (world.interface.documents)
        (world.log)
        (world.manager)
        (world.option)
        (world.settings)
        (world.syntax (phase syntax))
        (world.task))


(class World-Application extends Application
  
  
  (slot current-role-traits initialize #f getter generate)
  (slot options             initialize #f getter generate)
  
  
  (method override (process-owner)
    "Guillaume Cartier")
  
  
  (method override (process-email)
    "gucartier@gmail.com")
  
  
  (method override (process-copyright)
    "2012-2015")
  
  
  (method (process-copyright-revision)
    0)
  
  
  (method (process-copyright-new?)
    (not (world-setting 'world.last-copyright #f)))
  
  
  (method (process-copyright-changed?)
    (let ((last (world-setting 'world.last-copyright #f))
          (actual (process-copyright-revision)))
      (not (eqv? last actual))))
  
  
  (method (process-copyright-update)
    (let ((actual (process-copyright-revision)))
      (set-setting~ settings 'world.last-copyright actual)
      (save-content~ settings)))


  (method override (settings-version)
    (get-update-version (car settings-updates)))
  
  
  (method protected virtual (customize-roles)
    )
  
  
  (method override (finish-process)
    (nextmethod)
    (random-seed (world-setting 'world.random-seed #f))
    (set-logger-directory {Directory Settings "logs"})
    (when (world-setting 'world.gc-report? #f)
      (gc-report-set! #t))
    (set-validate-shaders? (world-setting 'world.validate-shaders? #t))
    (setup-styles)
    (update-world-options))

  
  ;;;
  ;;;; Load
  ;;;
  
  
  (method override (prepare-phase)
    (nextmethod)
    (load-point 'app-prepare))
  
  (method override (install-phase)
    (nextmethod)
    (load-point 'app-install))
  
  (method override (finalize-phase)
    (nextmethod)
    (load-point 'app-finalize))
  
  (method override (finish-phase)
    (nextmethod)
    (load-point 'app-finish))
  
  
  ;;;
  ;;;; Debuggee
  ;;;
  
  
  ;; until it's the worker that sends outline information
  (method override (effective-transmit-runtime-what what)
    'properties)

  
  ;;;
  ;;;; Loop
  ;;;
  
  
  (method override (run-loop)
    (with-log-context "event" event-id support-state #f
      (lambda (log-context)
        (nextmethod))))
  
  
  ;; copy/paste of thread-process and process-delayed-events
  ;; to have full control over the primordial thread
  (method override (thread-process-loop (done? #f))
    (define (thread-process-delayed-events)
      (declare (proper-tail-calls))
      (let ((thunk (read-delayed-event)))
        (when (not (eof-object? thunk))
          (site (delayed on?: #t parent: event)
            (with-task-mutex event-sequential-state
              (lambda ()
                (thunk))))
          (thread-process-delayed-events))))
    
    (declare (proper-tail-calls))
    (setup-threads~ (current-world))
    (let ((log-context (current-log-context)))
      (let (loop)
        (log-transition log-context waiting-state)
        (let ((thunk (thread-read-message timeout: +infinity)))
          (log-transition log-context support-state)
          (site (event on?: #t)
            (thread-process-delayed-events)
            (when (not (eof-object? thunk))
              (site (thunk on?: #t parent: event)
                (if (eq? (mutex-state task-mutex) (current-thread))
                    (thunk)
                  (with-task-mutex event-sequential-state
                    (lambda ()
                      (thunk))))))))
        (unless (and done? (done?))
          (loop)))))
  
  
  ;;;
  ;;;; Tier
  ;;;
  
  
  (method public virtual abstract (tier))
  (method public virtual abstract (server-side?))
  (method public virtual abstract (client-side?))
  (method public virtual abstract (get-world-server))
  (method public virtual abstract (get-world-client))
  (method public virtual abstract (enter-zone))

  
  ;;;
  ;;;; Name
  ;;;
  
  
  (method protected virtual (effective-player-name)
    )
  
  
  ;;;
  ;;;; Roles
  ;;;
  
  
  (method protected virtual (role-traits role)
    (error "Unknown role: {s}" role))
  
  
  (method (install-role)
    (let ((traits (role-traits current-role)))
      (for-each (lambda (info)
                  (bind (alias trait) info
                    (let ((component (resolve-nickname alias)))
                      (when component
                        (replace-active-trait~ component trait)))))
                traits)
      (set! current-role-traits traits)))
  
  
  (method (find-role-trait name)
    (let ((pair (assq name current-role-traits)))
      (when pair
        (cadr pair))))


  ;;;
  ;;;; Nicknames
  ;;;
  
  
  (method override (setup-nicknames)
    (nextmethod)
    (register-nickname :world    (lambda () (current-world)))
    (register-nickname :zone     (lambda () (current-zone)))
    (register-nickname :game     (lambda () (current-game)))
    (register-nickname :music    (lambda () (current-music)))
    (register-nickname :ambience (lambda () (current-ambience)))
    (register-nickname :tutorial (lambda () (current-tutorial))))
  
  
  ;;;
  ;;;; Shortcuts
  ;;;
  
  
  (method override (dispatch-shortcut shortcut)
    (if (and (get-focus)
             (let ((modifiers (get-modifiers~ shortcut))
                   (key (get-key~ shortcut)))
               (and (or (null? modifiers)
                        (equal? modifiers '(:shift)))
                    (char? key)
                    (word-constituent? key))))
        #f
      (if (let ((world (current-world)))
            (or (not world)
                (not (process-shortcut~ world shortcut))))
          (nextmethod shortcut)
        #t)))
  
  
  ;;;
  ;;;; Resources
  ;;;
  
  
  (method override (resources-dir)
    (let ((repo (find-repository 'World)))
      (if (and repo (repository-binary? repo))
          {Directory World "lib" "jazz.resources" "resources"}
        (nextmethod))))
  
  
  ;;;
  ;;;; Runtime
  ;;;
  
  
  (method override (runtime-products)
    (let ((world (current-world)))
      (if (not world)
          '()
        (let ((queue (new-queue)))
          (iterate-table (get-installed-modules~ world)
            (lambda (name info)
              (bind (dirname . repository) info
                (for-each (lambda (package)
                            (for-each (lambda (product)
                                        (let ((name (product-descriptor-name product)))
                                          (enqueue queue name)))
                                      (package-products package)))
                          (repository-packages repository)))))
          (queue-list queue)))))

  
  ;;;
  ;;;; Manager
  ;;;
  
  
  (method override (prepare-window-manager)
    (set-window-manager (new World-Window-Manager)))
  
  
  ;;;
  ;;;; Activation
  ;;;
  
  
  (method override (deactivate)
    (update-rate #f)
    (nextmethod))
  
  
  (method override (activate)
    (update-rate #t)
    (nextmethod))
  
  
  ;; change refresh rate based on active window or not
  (method (update-rate active?)
    )


  (method (check-news)
    (let ((news (news-file))
          (setting-name 'world.last-news))
      (let ((last (world-setting setting-name #f))
            (actual (digest-file (parse~ news) 'SHA-1)))
        (when (and last (not (equal? last actual)))
          (propose-news)
          (set-setting~ settings setting-name actual)
          (save-content~ settings)))))
  
  
  (method (propose-news)
    (open-message "News have changed since you last viewed them"
                  caption: "News"
                  type: 'question
                  yes: "Show Me"
                  no: "Ignore"
                  execute: (lambda (evt)
                             (let ((dialog (find-ascendant~ (get-sender~ evt) World-Dialog))
                                   (button (get-property~ evt button:)))
                               (close~ dialog)
                               (case button
                                 ((yes)
                                  (show-news)))))))
  
  
  (method (show-news)
    (open-world-document (news-file) class: World-Formatted-Text-View))
  
  
  ;;;
  ;;;; Files
  ;;;
  
  
  (method virtual (news-file)
    (world-file '("devel" "world" "News.ftx")))
  
  
  (method virtual (roadmap-file)
    (world-file '("devel" "world" "Roadmap.ftx")))
  
  
  (method virtual (help-file)
    (world-file '("devel" "world" "Help.ftx")))
  
  
  (method virtual (about-file)
    (world-file '("devel" "world" "About.ftx")))
  
  
  ;;;
  ;;;; Styles
  ;;;
  
  
  (definition world-styles
    (<form>
      (<Styles-Preferences>
        (<Text-Style-Preferences> name: Text-Base                     font: {Font Label antialias: none} color: {Color White})
        (<Text-Style-Preferences> name: Code-Base                     font: {Font Code antialias: none} color: {Color White})
        (<Text-Style-Preferences> name: Text-Title                    color: {Color Text-Red})
        (<Text-Style-Preferences> name: Text-Comment                  color: {Color Text-Purple})
        (<Text-Style-Preferences> name: Text-Expr-Comment             color: {Color Text-Dark})
        (<Text-Style-Preferences> name: Text-Named-Comment            color: {Color Text-Dark})
        (<Text-Style-Preferences> name: Text-Line-Comment             color: {Color Text-Purple})
        (<Text-Style-Preferences> name: Text-Balanced-Comment         color: {Color Text-Green})
        (<Text-Style-Preferences> name: Text-Declaration-Keyword      color: {Color Text-Blue})
        (<Text-Style-Preferences> name: Text-Declaration              color: {Color Text-Green})
        (<Text-Style-Preferences> name: Text-Documented-Declaration   color: {Color Text-Green})
        (<Text-Style-Preferences> name: Text-Undocumented-Declaration color: {Color Text-Green})
        (<Text-Style-Preferences> name: Text-Definition               color: {Color Text-Red})
        (<Text-Style-Preferences> name: Text-Keyword                  color: {Color Text-Blue})
        (<Text-Style-Preferences> name: Text-Jazzdoc                  color: {Color Text-Purple})
        (<Text-Style-Preferences> name: Text-Jazzdoc-Body             color: {Color Text-Dark})
        (<Text-Style-Preferences> name: Text-Tag                      color: {Color Text-Purple})
        (<Text-Style-Preferences> name: Text-Specifier                color: {Color Text-Dark})
        (<Text-Style-Preferences> name: Text-Literal                  color: {Color Text-Ochre})
        (<Text-Style-Preferences> name: Text-Char                     color: {Color Text-Ochre})
        (<Text-Style-Preferences> name: Text-Number                   color: {Color Text-Ochre})
        (<Text-Style-Preferences> name: Text-Boolean                  color: {Color Text-Ochre})
        (<Text-Style-Preferences> name: Text-String                   color: {Color Text-Ochre})
        (<Text-Style-Preferences> name: Text-Delimited-String         color: {Color Text-Ochre})
        (<Text-Style-Preferences> name: Text-Named-String             color: {Color Text-Ochre})
        (<Text-Style-Preferences> name: Text-Quotation                color: {Color Text-Ochre})
        (<Text-Style-Preferences> name: Text-Feature                  color: {Color Text-Orange})
        (<Text-Style-Preferences> name: Text-Metadata                 color: {Color Text-Ochre}))))
  
  
  (method (setup-styles)
    (register-children~ (instantiate~ world-styles) (styles-domain)))

  
  ;;;
  ;;;; Options
  ;;;
  
  
  (method public (update-world-options)
    (set! options (new World-Options)))
  
  
  ;;;
  ;;;; Toplevel
  ;;;
  
  
  (method override (show-toplevel)
    )
  
  
  ;;;
  ;;;; Interface
  ;;;
  
  
  (method protected virtual (setup-application-interface)
    ))


;;;
;;;; Options
;;;


(class World-Options extends Component
  
  
  (form
    (<install>
      (<Options>    name: video
        (<Options>                  title: "Rendering"
          (<Option>                 title: "Sector size" setting: world.sector-size)
          (<Option>                 title: "View distance" setting: world.view-distance)
          (<Option>                 title: "Dynamic lights" setting: world.dynamic-lights)
          (<Option>                 title: "Post processing?" setting: world.post-processing?)
          (<Option>                 title: "Multisampling" setting: world.multisampling))
        (<Options>                  title: "Environment"
          (<Option>                 title: "Sun cycle?" setting: world.sun-cycle?)
          (<Option>                 title: "Fog?" setting: world.fog?)))
      (<Options>    name: audio
        (<Options>                  title: "Music"
          (<Option>                 title: "Music?" setting: world.music?)
          (<Option>                 title: "Ambience?" setting: world.ambience?))
        (<Options>                  title: "Sounds"
          (<Option>                 title: "Sounds?" setting: world.sounds?)
          (<Option>                 title: "Selection sounds?" setting: world.selection-sounds?)))
      (<Options>    name: interface
        (<Options>                  title: "Camera"
          (<Option>                 title: "Move speed" setting: world.camera-move-speed)
          (<Option>                 title: "Strafe speed" setting: world.camera-strafe-speed)
          (<Option>                 title: "Rotate speed" setting: world.camera-rotate-speed)))))))
