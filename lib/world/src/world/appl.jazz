;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Application
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2016
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.appl jazz


(import (jazz.action)
        (jazz.application)
        (jazz.audio)
        (jazz.component)
        (jazz.debuggee)
        (jazz.graphic)
        (jazz.io)
        (jazz.jml)
        (jazz.layout)
        (jazz.menu)
        (jazz.reference)
        (jazz.resource)
        (jazz.skin)
        (jazz.syntax (phase syntax))
        (jazz.text)
        (jazz.text.preferences)
        (jazz.ui)
        (jazz.version)
        (jazz.view)
        (jazz.window)
        (jazz.workspace)
        (world)
        (world.autoload)
        (world.client.actions)
        (world.client.bars)
        (world.client.configuration)
        (world.client.parameters)
        (world.interface.bars)
        (world.interface.dialogs)
        (world.interface.documents)
        (world.interface.skin)
        (world.io)
        (world.manager)
        (world.option)
        (world.process)
        (world.settings)
        (world.support)
        (world.syntax (phase syntax))
        (world.task))


;;;
;;;; Client
;;;


(class World-Application extends Application
  
  
  (slot current-role-traits initialize #f getter generate)
  (slot options             initialize #f getter generate)

  
  (method override (process-name)
    "World")
  
  
  (method override (process-icon)
    "WebServer")
  
  
  (method override (process-version)
    world-version)
  
  
  (method override (process-owner)
    "Guillaume Cartier")
  
  
  (method override (process-email)
    "gucartier@gmail.com")
  
  
  (method override (process-copyright)
    "2012-2016")
  
  
  (method (process-copyright-revision)
    0)
  
  
  (method (process-copyright-new?)
    (not (world-setting 'world.last-copyright #f)))
  
  
  (method (process-copyright-changed?)
    (let ((last (world-setting 'world.last-copyright #f))
          (actual (process-copyright-revision)))
      (not (eqv? last actual))))
  
  
  (method (process-copyright-update)
    (let ((actual (process-copyright-revision)))
      (set-setting~ options-settings 'world.last-copyright actual)
      (save-content~ options-settings)))


  (method override (settings-version)
    (get-update-version (car settings-updates)))
  
  
  (method override (initialize-settings)
    (cond ((world-setting 'world.start-user? #f)
           (set-current-role 'user))
          ((world-setting 'world.start-designer? #f)
           (set-current-role 'designer)))
    (customize-roles))
  
  
  (method override (default-preferences)
    (new World-Preferences))
  
  
  (method override (default-workspaces)
    (new World-Workspaces))
  
  
  (method override (default-bindings)
    (new World-Bindings))
  
  
  (method override (finish-process)
    (nextmethod)
    (random-seed (world-setting 'world.random-seed #f))
    (when (world-setting 'world.gc-report? #f)
      (gc-report-set! #t))
    (initialize-audio)
    (set-validate-shaders? (world-setting 'world.validate-shaders? #t))
    (setup-styles)
    (update-world-options)
    (install-role)
    (register-debuggee-hook
      (lambda (thread level)
        (when (eq? thread (primordial-thread))
          (let ((world (current-world)))
            (when world
              (let ((debugged? (> level 0)))
                (set-debugged?~ world debugged?)
                (when (not debugged?)
                  (reset-profiling~ world))))))))
    (register-evaluate-wrap
      (lambda (thunk)
        (with-task-mutex
          thunk)))
    (register-evaluate-hook
      (lambda (forms syntax str container line col)
        (let ((world (current-world)))
          (when world
            (evaluate-hook~ world forms syntax str container line col))))))


  ;;;
  ;;;; Skins
  ;;;
  
  
  (method override (install-skins)
    (iterate-skins
      (lambda (name skin)
        (let ((trait (instantiate-trait Skin world-look)))
          (set-parent~ trait (local-trait skin 'jazz))
          (set-active-trait~ skin 'default.jazz.world)))))
  
  
  @skin-convert
  (method override (load-skins)
    (instantiate~
      (<form>
        (<Skins>                    active: world
          (<World-Skin> name: world)))))


  ;;;
  ;;;; Templates
  ;;;


  (method override (templates-directory)
    (world-templates-directory))
  
  
  ;;;
  ;;;; Profile
  ;;;
  
  
  (method override (use-profile?)
    #f)

  
  ;;;
  ;;;; Load
  ;;;
  
  
  (method override (prepare-phase)
    (nextmethod)
    (load-point 'app-prepare))
  
  (method override (install-phase)
    (nextmethod)
    (load-point 'app-install))
  
  (method override (finalize-phase)
    (nextmethod)
    (load-point 'app-finalize))
  
  (method override (finish-phase)
    (nextmethod)
    (load-point 'app-finish))


  ;;;
  ;;;; Quit
  ;;;
  

  (method override (quit-process (status 0))
    (quit-world)
    (nextmethod status))
  
  
  ;;;
  ;;;; Debuggee
  ;;;
  
  
  (method override (initial-console-context)
    #f)
  
  
  ;; until it's the worker that sends outline information
  (method override (effective-transmit-runtime-what what)
    'properties)

  
  ;;;
  ;;;; Events
  ;;;
  
  
  ;; copy/paste of thread-process and process-delayed-events
  ;; to have full control over the primordial thread
  (method override (thread-process-loop (done? #f))
    (world-loop done?))

  
  ;;;
  ;;;; Frames
  ;;;


  (method override (default-frame-class)
    Plain-Text-View)


  (method override (known-extension-frame-class ext)
    (cond ((member? ext '("txt") test: extension=?) Plain-Text-View)
          (else (nextmethod ext))))

  
  ;;;
  ;;;; Actions
  ;;;
  
  
  (method override (class-actions)
    (append (list (find-actions 'world-menu)
                  (find-actions 'world-interface)
                  (find-actions 'world-graphics)
                  (find-actions 'world-sound)
                  (find-actions 'world-client)
                  (find-actions 'world-world)
                  (find-actions 'world-zone)
                  (find-actions 'world-movement)
                  (find-actions 'world-camera)
                  (find-actions 'world-game)
                  (find-actions 'world-user)
                  (find-actions 'world-spell)
                  (find-actions 'world-edition)
                  (find-actions 'world-history)
                  (find-actions 'world-window)
                  (find-actions 'world-debug)
                  (find-actions 'world-tutorial)
                  (find-actions 'world-collision)
                  (find-actions 'world-anonymous))
            (nextmethod)))
  
  
  ;;;
  ;;;; Shortcuts
  ;;;
  
  
  (method override (dispatch-shortcut shortcut)
    (let ((world (current-world+)))
      (let ((focus (get-focus)))
        (cond ((and (is? focus Text-View)
                    (shortcut=? shortcut {Shortcut Escape}))
               (nextmethod shortcut))
              ((and focus
                    (let ((modifiers (get-modifiers~ shortcut))
                          (key (get-key~ shortcut)))
                      (and (or (null? modifiers)
                               (equal? modifiers '(:shift)))
                           (char? key)
                           (word-constituent? key))))
               #f)
              ((or (not world)
                   (not (process-shortcut~ world shortcut)))
               (with-task-mutex
                 (lambda ()
                   (nextmethod shortcut))))
              (else
               #t)))))
  
  
  ;;;
  ;;;; Roles
  ;;;
  
  
  (method protected virtual (role-traits role)
    (error "Unknown role: {s}" role))
  
  
  (method protected virtual (customize-roles)
    )
  
  
  (method (install-role)
    (let ((traits (role-traits current-role)))
      (for-each (lambda (info)
                  (bind (alias trait) info
                    (let ((component (resolve-nickname alias)))
                      (when component
                        (replace-active-trait~ component trait)))))
                traits)
      (set! current-role-traits traits)))
  
  
  (method (find-role-trait name)
    (let ((pair (assq name current-role-traits)))
      (when pair
        (cadr pair))))


  ;;;
  ;;;; Nicknames
  ;;;
  
  
  (method override (setup-nicknames)
    (nextmethod)
    (register-nickname :world    (lambda () (current-world)))
    (register-nickname :zone     (lambda () (current-zone)))
    (register-nickname :game     (lambda () (current-game)))
    (register-nickname :music    (lambda () (current-music)))
    (register-nickname :ambience (lambda () (current-ambience)))
    (register-nickname :tutorial (lambda () (current-tutorial))))


  ;;;
  ;;;; Environment
  ;;;
  
  
  (method override (save-environment)
    (nextmethod)
    (save-content~ options-settings))

  
  ;;;
  ;;;; Manager
  ;;;
  
  
  (method override (prepare-window-manager)
    (set-window-manager (new World-Window-Manager)))
  
  
  ;;;
  ;;;; Activation
  ;;;
  
  
  (method override (deactivate)
    (set-active? #f)
    (nextmethod))
  
  
  (method override (activate)
    (set-active? #t)
    (nextmethod))


  (method (check-news)
    (let ((news (news-file))
          (setting-name 'world.last-news))
      (let ((last (world-setting setting-name #f))
            (actual (digest-file (parse~ news) 'SHA-1)))
        (when (and last (not (equal? last actual)))
          (propose-news)
          (set-setting~ options-settings setting-name actual)
          (save-content~ options-settings)))))
  
  
  (method (propose-news)
    (open-message "News have changed since you last viewed them"
                  caption: "News"
                  type: 'question
                  yes: "Show Me"
                  no: "Ignore"
                  execute: (lambda (evt)
                             (let ((dialog (find-ascendant~ (get-sender~ evt) World-Dialog))
                                   (button (get-property~ evt button:)))
                               (close~ dialog)
                               (case button
                                 ((yes)
                                  (show-news)))))))
  
  
  (method (show-news)
    (open-world-document (news-file) class: World-Formatted-Text-View))
  
  
  ;;;
  ;;;; Files
  ;;;
  
  
  (method virtual (news-file)
    (world-file '("devel" "world" "News.ftx")))
  
  
  (method virtual (roadmap-file)
    (world-file '("devel" "world" "Roadmap.ftx")))
  
  
  (method virtual (help-file)
    (world-file '("devel" "world" "Help.ftx")))
  
  
  (method virtual (about-file)
    (world-file '("devel" "world" "About.ftx")))
  
  
  ;;;
  ;;;; Styles
  ;;;
  
  
  (definition world-styles
    (<form>
      (<Styles-Preferences>
        (<Text-Style-Preferences> name: Text-Base                     font: {Font Label antialias: none} color: {Color White})
        (<Text-Style-Preferences> name: Code-Base                     font: {Font Code antialias: none} color: {Color White})
        (<Text-Style-Preferences> name: Text-Title                    color: {Color Text-Red})
        (<Text-Style-Preferences> name: Text-Comment                  color: {Color Text-Purple})
        (<Text-Style-Preferences> name: Text-Expr-Comment             color: {Color Text-Dark})
        (<Text-Style-Preferences> name: Text-Named-Comment            color: {Color Text-Dark})
        (<Text-Style-Preferences> name: Text-Line-Comment             color: {Color Text-Purple})
        (<Text-Style-Preferences> name: Text-Balanced-Comment         color: {Color Text-Green})
        (<Text-Style-Preferences> name: Text-Declaration-Keyword      color: {Color Text-Blue})
        (<Text-Style-Preferences> name: Text-Declaration              color: {Color Text-Green})
        (<Text-Style-Preferences> name: Text-Documented-Declaration   color: {Color Text-Green})
        (<Text-Style-Preferences> name: Text-Undocumented-Declaration color: {Color Text-Green})
        (<Text-Style-Preferences> name: Text-Definition               color: {Color Text-Red})
        (<Text-Style-Preferences> name: Text-Keyword                  color: {Color Text-Blue})
        (<Text-Style-Preferences> name: Text-Jazzdoc                  color: {Color Text-Purple})
        (<Text-Style-Preferences> name: Text-Jazzdoc-Body             color: {Color Text-Dark})
        (<Text-Style-Preferences> name: Text-Tag                      color: {Color Text-Purple})
        (<Text-Style-Preferences> name: Text-Specifier                color: {Color Text-Dark})
        (<Text-Style-Preferences> name: Text-Literal                  color: {Color Text-Ochre})
        (<Text-Style-Preferences> name: Text-Char                     color: {Color Text-Ochre})
        (<Text-Style-Preferences> name: Text-Number                   color: {Color Text-Ochre})
        (<Text-Style-Preferences> name: Text-Boolean                  color: {Color Text-Ochre})
        (<Text-Style-Preferences> name: Text-String                   color: {Color Text-Ochre})
        (<Text-Style-Preferences> name: Text-Delimited-String         color: {Color Text-Ochre})
        (<Text-Style-Preferences> name: Text-Named-String             color: {Color Text-Ochre})
        (<Text-Style-Preferences> name: Text-Quotation                color: {Color Text-Ochre})
        (<Text-Style-Preferences> name: Text-Feature                  color: {Color Text-Orange})
        (<Text-Style-Preferences> name: Text-Metadata                 color: {Color Text-Ochre}))))
  
  
  (method (setup-styles)
    (register-children~ (instantiate~ world-styles) (styles-domain)))

  
  ;;;
  ;;;; Options
  ;;;
  
  
  (method public (update-world-options)
    (set! options (new World-Options)))
  
  
  ;;;
  ;;;; Toplevel
  ;;;
  
  
  (method override (show-toplevel)
    )
  
  
  ;;;
  ;;;; Interface
  ;;;
  
  
  (method protected virtual (setup-application-interface)
    (install-bars
      `((,World-Main-Bar      main      horizontal (center -10))
        (,World-Client-Bar    client    horizontal (10 -98))
        (,World-Game-Bar      game      horizontal (center -36))
        (,World-Window-Bar    window    horizontal (-10 -10))
        (,World-Camera-Bar    camera    horizontal (-10 -36))
        (,World-Debug-Bar     debug     horizontal (10 -10))
        (,World-History-Bar   history   horizontal (10 -36))
        (,World-Target-Bar    target    horizontal (-10 10))
        (,World-Edition-Bar   edition   vertical   (-36 center))
        (,World-Interface-Bar interface vertical   (-10 center))
        (,World-Tutorial-Bar  tutorial  horizontal (10 10) #f)
        (,World-Objective-Bar objective horizontal (114 10) #f)
        (,World-Collision-Bar collision horizontal (-10 36) #f))))
  
  
  ;;;
  ;;;; Resources
  ;;;
  
  
  (method override (resources-dir)
    (let ((repo (find-repository 'World)))
      (if (and repo (repository-binary? repo))
          {Directory World "lib" "jazz.resources" "resources"}
        (nextmethod))))
  
  
  ;;;
  ;;;; Runtime
  ;;;
  
  
  (method override (runtime-products)
    (world-products))
  
  
  (method override (runtime-properties)
    (append (world-properties 'client) (nextmethod))))


;;;
;;;; Preferences
;;;


(class World-Preferences extends Application-Preferences
  
  
  (form
    (<install>                                     toplevel-state: restored toolbar-classes: ((:menubar . {Reference World-Menubar}) (:toolbar . {Reference World-Toolbar}) (:status . {Reference World-Status}))
      (<documents~>
        (<Plain-Text-Preferences> name: plain-text)))))


;;;
;;;; Workspaces
;;;


(class World-Workspaces extends Workspaces-Preferences
  
  
  (form
    (<install>                          active: home
      (<World-Workspace> name: home))))


;;;
;;;; Workspace
;;;


(class World-Workspace extends Workspace-Preferences
  
  
  (form
    (<install>                                    title: "Home" icon: {Image-Resource "WorkspaceHome"}
      (<Menubar-Preferences>        name: menubar location: root
        (<Mainbar-Preferences>      name: toolbar location: second
          (<Status-Preferences>     name: status  location: second
            (<Stage-Preferences>    name: top     location: first maximized?: #t)))))))


;;;
;;;; Bindings
;;;


(class World-Bindings extends Application-Bindings
  
  
  (form
    (<install>
      (<World-Menu-Actions>      name: world-menu)
      (<World-Interface-Actions> name: world-interface)
      (<World-Graphics-Actions>  name: world-graphics)
      (<World-Sound-Actions>     name: world-sound)
      (<World-Client-Actions>    name: world-client)
      (<World-World-Actions>     name: world-world)
      (<World-Zone-Actions>      name: world-zone)
      (<World-Movement-Actions>  name: world-movement)
      (<World-Camera-Actions>    name: world-camera)
      (<World-Game-Actions>      name: world-game)
      (<World-Spell-Actions>     name: world-spell)
      (<World-Edition-Actions>   name: world-edition)
      (<World-History-Actions>   name: world-history)
      (<World-Window-Actions>    name: world-window)
      (<World-Debug-Actions>     name: world-debug)
      (<World-Tutorial-Actions>  name: world-tutorial)
      (<World-Objective-Actions> name: world-objective)
      (<World-Collision-Actions> name: world-collision)
      (<World-Anonymous-Actions> name: world-anonymous))))


;;;
;;;; Menubar
;;;


(class World-Menubar extends Menubar
  
  
  (method override (install rest)
    (nextmethod rest)
    (with-update-locked
      (lambda ()
        (new Label-Item parent: self name: 'file   content: (new File-Base-Menu))
        (new Label-Item parent: self name: 'edit   content: (new Edit-Base-Menu))
        (new Label-Item parent: self name: 'window content: (new Window-Menu))
        (new Label-Item parent: self name: 'help   content: (new Help-Menu))))))


;;;
;;;; Help-Menu
;;;


(class Help-Menu extends Menu
  
  
  (form
    (<install>          title: "Help"
      (<Label-Item>     title: "About World..." icon: {Image-Resource "About"} action-handler: {Action application about}))))


;;;
;;;; Toolbar
;;;


(class World-Toolbar extends Toolbar


  (form
    (<install>
      (<Action-Icon> name: new        tooltip-text: "New" resource: {Image-Resource "New"} action-handler: {Action application new})
      (<Action-Icon> name: open       tooltip-text: "Open..." resource: {Image-Resource "Open"} action-handler: {Action application open})
      (<Separator>)
      (<Action-Icon> name: cut        tooltip-text: "Cut" resource: {Image-Resource "Cut"} action-handler: {Action view cut})
      (<Action-Icon> name: copy       tooltip-text: "Copy" resource: {Image-Resource "Copy"} action-handler: {Action view copy})
      (<Action-Icon> name: paste      tooltip-text: "Paste" resource: {Image-Resource "Paste"} action-handler: {Action view paste})
      (<Separator>)
      (<Action-Icon> name: undo       tooltip-text: "Undo" resource: {Image-Resource "Undo"} action-handler: {Action view undo})
      (<Action-Icon> name: redo       tooltip-text: "Redo" resource: {Image-Resource "Redo"} action-handler: {Action view redo})
      (<Separator>                    location: tail size: {Dimension 1 0}))))


;;;
;;;; Status
;;;


(class World-Status extends Status-Toolbar


  (form
    (<install>
      (<Status-Label> name: message size: {Dimension 782 20} location: center))))


;;;
;;;; Options
;;;


(class World-Options extends Component
  
  
  (form
    (<install>
      (<Options>    name: video
        (<Options>                  title: "Rendering"
          (<Option>                 title: "Sector size" setting: world.sector-size)
          (<Option>                 title: "View distance" setting: world.view-distance)
          (<Option>                 title: "Dynamic lights" setting: world.dynamic-lights)
          (<Option>                 title: "Post processing?" setting: world.post-processing?)
          (<Option>                 title: "Multisampling" setting: world.multisampling))
        (<Options>                  title: "Environment"
          (<Option>                 title: "Sun cycle?" setting: world.sun-cycle?)
          (<Option>                 title: "Fog?" setting: world.fog?)))
      (<Options>    name: audio
        (<Options>                  title: "Music"
          (<Option>                 title: "Music?" setting: world.music?)
          (<Option>                 title: "Ambience?" setting: world.ambience?))
        (<Options>                  title: "Sounds"
          (<Option>                 title: "Sounds?" setting: world.sounds?)
          (<Option>                 title: "Selection sounds?" setting: world.selection-sounds?)))
      (<Options>    name: interface
        (<Options>                  title: "Camera"
          (<Option>                 title: "Move speed" setting: world.camera-move-speed)
          (<Option>                 title: "Strafe speed" setting: world.camera-strafe-speed)
          (<Option>                 title: "Rotate speed" setting: world.camera-rotate-speed)))))))
