;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Application
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.appl jazz


(require (world.client.parameters))

(import (jazz.action)
        (jazz.application)
        (jazz.audio)
        (jazz.command)
        (jazz.component)
        (jazz.debuggee)
        (jazz.debugger)
        (jazz.event)
        (jazz.exemplar)
        (jazz.figure)
        (jazz.graphic)
        (jazz.io)
        (jazz.layout)
        (jazz.markup)
        (jazz.menu)
        (jazz.network)
        (jazz.platform)
        (jazz.reference)
        (jazz.resource)
        (jazz.skin)
        (jazz.text)
        (jazz.text.preferences)
        (jazz.ui)
        (jazz.view)
        (jazz.window)
        (jazz.workspace)
        (world)
        (world.circle)
        (world.client.actions)
        (world.client.bars)
        (world.client.tier)
        (world.context)
        (world.interface)
        (world.interface.bars)
        (world.interface.dialogs)
        (world.interface.documents)
        (world.interface.models)
        (world.interface.script)
        (world.interface.skin)
        (world.interface.text)
        (world.interface.timeline)
        (world.io)
        (world.manager)
        (world.option)
        (world.settings)
        (world.support)
        (world.task))


;;;
;;;; Client
;;;


(class World-Application extends Application
  
  
  (slot current-role-traits initialize #f getter generate)
  (slot options             initialize #f getter generate)

  
  (method override (process-name self)
    "World")
  
  
  (method override (process-icon self)
    "WebServer")
  
  
  (method override (process-version self)
    world-version)
  
  
  (method override (process-owner self)
    "Guillaume Cartier")
  
  
  (method override (process-email self)
    "gucartier@gmail.com")
  
  
  (method override (process-copyright self)
    "2012-2018")
  
  
  (method (process-copyright-revision self)
    0)
  
  
  (method package (process-copyright-new? self)
    (not (world-setting 'world.last-copyright #f)))
  
  
  (method package (process-copyright-changed? self)
    (let ((last (world-setting 'world.last-copyright #f))
          (actual (process-copyright-revision self)))
      (not (eqv? last actual))))
  
  
  (method package (process-copyright-update self)
    (let ((actual (process-copyright-revision self)))
      (set-setting options-settings 'world.last-copyright actual)
      (save-content options-settings)))


  (method override (settings-version self)
    (get-update-version (car settings-updates)))
  
  
  (method override (default-preferences self)
    (new World-Preferences))
  
  
  (method override (default-workspaces self)
    (new World-Workspaces))
  
  
  (method override (default-bindings self)
    (new World-Bindings))
  
  
  (method override (finish-process self)
    (nextmethod self)
    (when (world-setting 'world.gc-report? #f)
      (gc-report-set! #t))
    (when (window?)
      (startup-audio))
    (setup-styles self)
    (register-site-looks self)
    (register-event-looks self)
    (set-focus-resetter refocus-world)
    (update-world-options self)
    (install-role self)
    (register-debuggee-hook
      (lambda (thread level)
        (set-being-debugged? (> level 0))))
    (register-evaluate-wrap
      (lambda (thunk)
        (if being-debugged?
            (thunk)
          (with-task-mutex
            thunk))))
    (when (window?)
      (register-evaluate-hook
        (lambda (forms syntax str container line col)
          (with-reentrant-task-mutex
            (lambda ()
              (let ((world (current-world)))
                (when world
                  (let ((debugger (current-debugger)))
                    (if debugger
                        (evaluating-code debugger
                          (lambda ()
                            (evaluate-world-hook world forms syntax str container line col)))
                      (evaluate-world-hook world forms syntax str container line col)))))))))))
  
  
  (method package (start-panel self)
    (when (and (server?)
               (or (controlling-terminal?)
                   (using-debugger?)))
      (thread-start!
        (new-thread
          (lambda ()
            (run-panel (new world.server.panel:World-Server-Panel) (current-server)))
          'panel))))


  ;;;
  ;;;; Skins
  ;;;
  
  
  (method override (install-skins self)
    (iterate-skins
      (lambda (name skin)
        (let ((trait (instantiate-trait Skin world-look)))
          (set-parent trait (local-trait skin 'jazz))
          (set-active-trait skin 'default.jazz.world)))))
  
  
  @skin-convert
  (method override (load-skins)
    (instantiate~
      (<form>
        (<Skins>                    active: world
          (<World-Skin> name: world)))))


  ;;;
  ;;;; Files
  ;;;
  
  
  (method override (receive-files self pos pathnames)
    )


  ;;;
  ;;;; Templates
  ;;;


  (method override (templates-directory self)
    (world-templates-directory))
  
  
  ;;;
  ;;;; Profile
  ;;;
  
  
  (method override (use-profile? self)
    #f)

  
  ;;;
  ;;;; Load
  ;;;
  
  
  (method override (prepare-phase self)
    (nextmethod self)
    (load-point 'app-prepare))
  
  (method override (install-phase self)
    (nextmethod self)
    (load-point 'app-install))
  
  (method override (finalize-phase self)
    (nextmethod self)
    (load-point 'app-finalize))
  
  (method override (finish-phase self)
    (nextmethod self)
    (load-point 'app-finish))


  ;;;
  ;;;; Quit
  ;;;
  

  (method override (quit-process self (status 0))
    (with-reentrant-task-mutex
      (lambda ()
        (quit-world)
        (nextmethod self status))))
  
  
  ;;;
  ;;;; Debuggee
  ;;;
  
  
  (method override (select-console self)
    (unless slave?
      (nextmethod self)))
  
  
  (method override (initial-console-context self)
    #f)
  
  
  ;; until it's the worker that sends outline information
  (method override (effective-transmit-runtime-what self what)
    'properties)

  
  ;;;
  ;;;; Events
  ;;;
  
  
  ;; copy/paste of thread-process and process-delayed-events
  ;; to have full control over the primordial thread
  (method override (thread-process-loop self (done? #f))
    (world-loop done?))
  
  
  ;;;
  ;;;; Shortcuts
  ;;;
  
  
  (method override (dispatch-shortcut self shortcut)
    (let ((world (current-world+)))
      (let ((focus (active-focus)))
        (cond ((and (shortcut=? shortcut {Shortcut Escape})
                    (or (and (is? focus World-Text-View)
                             (handle-escape? focus))
                        (and (is? focus Script-Text-View)
                             (get-completion-active? focus)
                             (has-selection? focus))
                        (is? focus Command-Text-View)
                        (is? focus world.interface.script:Scripts-Tree)
                        (is? focus world.interface.script:Modules-Tree)))
               (nextmethod self shortcut))
              ((and (not (world-focus? focus))
                    (is-not? (active-focus) Circle-View)
                    (let ((modifiers (get-modifiers shortcut))
                          (key (get-key shortcut)))
                      (and (or (null? modifiers)
                               (equal? modifiers '(:shift)))
                           (char? key)
                           (or (word-constituent? key)
                               (memv? key '(#\= #\[ #\] #\/ #\\))))))
               #f)
              ((or (not world)
                   (not (process-shortcut world shortcut)))
               (and (not being-debugged?)
                    (with-task-mutex
                      (lambda ()
                        (nextmethod self shortcut)))))
              (else
               #t)))))
  
  
  ;;;
  ;;;; Roles
  ;;;
  
  
  (method protected virtual (role-bindings self)
    (error "Unknown role: {s}" current-role))
  
  
  (method protected virtual (role-traits self)
    (error "Unknown role: {s}" current-role))
  
  
  (method package (install-role self)
    (let ((traits (role-traits self)))
      (for-each (lambda (info)
                  (bind (alias . traits) info
                    (let ((component (resolve-nickname alias)))
                      (when component
                        (replace-active-traits component traits)))))
                traits)
      (set! current-role-traits traits)))
  
  
  (method package (find-role-trait self name)
    (let ((pair (assq name current-role-traits)))
      (and pair (cadr pair))))


  ;;;
  ;;;; Nicknames
  ;;;
  
  
  (method override (setup-nicknames self)
    (nextmethod self)
    (register-nickname :tier     (lambda () (current-tier)))
    (register-nickname :world    (lambda () (current-world)))
    (register-nickname :zone     (lambda () (current-zone)))
    (register-nickname :universe (lambda () (current-universe)))
    (register-nickname :space    (lambda () (current-space)))
    (register-nickname :music    (lambda () (current-music)))
    (register-nickname :ambience (lambda () (current-ambience)))
    (register-nickname :audio    (lambda () (current-audio)))
    (register-nickname :video    (lambda () (current-video)))
    (register-nickname :tutorial (lambda () (current-tutorial))))


  ;;;
  ;;;; Environment
  ;;;
  
  
  (method override (save-environment self)
    (nextmethod self)
    (save-content options-settings))

  
  ;;;
  ;;;; Manager
  ;;;
  
  
  (method override (prepare-window-manager self)
    (set-window-manager (new World-Window-Manager)))
  
  
  ;;;
  ;;;; Activation
  ;;;
  
  
  (method override (deactivate self)
    (set-application-active? #f)
    (nextmethod self))
  
  
  (method override (activate self)
    (set-application-active? #t)
    (let ((tier (current-tier)))
      (when (is? tier Client-Tier)
        (delay-event
          (lambda ()
            (with-task-mutex
              (lambda ()
                (upload-assets tier 'world)
                (upload-assets tier 'zone)))))))
    (nextmethod self))


  (method package (check-news self)
    (let ((news (news-file self))
          (setting-name 'world.last-news))
      ;; quick hack so we can launch from the binaries
      ;; without actually having to deploy them
      (when (exists? news)
        (let ((last (world-setting setting-name #f))
              (actual (digest-file (parse news) 'SHA-1)))
          (unless (and last (equal? last actual))
            (propose-news self)
            (set-setting options-settings setting-name actual)
            (save-content options-settings))))))
  
  
  (method (propose-news self)
    (open-message "News have changed since you last viewed them"
                  caption: "News"
                  type: 'question
                  yes: "Show Me"
                  no: "Ignore"
                  execute: (lambda (evt)
                             (let ((dialog (find-ascendant (get-sender evt) World-Dialog))
                                   (button (get-property evt button:)))
                               (close dialog)
                               (case button
                                 ((yes)
                                  (show-news self)))))))
  
  
  (method (show-news self)
    (open-world-document (news-file self) class: World-Formatted-Text-View))
  
  
  ;;;
  ;;;; Files
  ;;;
  
  
  (method package virtual (news-file self)
    (world-file '("devel" "world" "News.ftx")))
  
  
  (method package virtual (roadmap-file self)
    (world-file '("devel" "world" "Roadmap.ftx")))
  
  
  (method package virtual (help-file self)
    (world-file '("devel" "world" "Help.ftx")))
  
  
  (method package virtual (about-file self)
    (world-file '("devel" "world" "About.ftx")))
  
  
  ;;;
  ;;;; Styles
  ;;;
  
  
  (definition world-styles
    (<form>
      (<Styles-Preferences>
        (<Text-Style-Preferences> name: Text-Base                     font: {Font Label antialias: none} color: {Color White})
        (<Text-Style-Preferences> name: Text-User                     font: {Font Label-User antialias: none} color: {Color White})
        (<Text-Style-Preferences> name: Code-Base                     font: {Font Code} color: {Color White})
        (<Text-Style-Preferences> name: Text-Title                    color: {Color Text-Red})
        (<Text-Style-Preferences> name: Text-Comment                  color: {Color Text-Purple})
        (<Text-Style-Preferences> name: Text-Expr-Comment             color: {Color Text-Dark})
        (<Text-Style-Preferences> name: Text-Named-Comment            color: {Color Text-Dark})
        (<Text-Style-Preferences> name: Text-Line-Comment             color: {Color Text-Purple})
        (<Text-Style-Preferences> name: Text-Balanced-Comment         color: {Color Text-Green})
        (<Text-Style-Preferences> name: Text-Declaration-Keyword      color: {Color Text-Blue})
        (<Text-Style-Preferences> name: Text-Declaration              color: {Color Text-Green})
        (<Text-Style-Preferences> name: Text-Documented-Declaration   color: {Color Text-Green})
        (<Text-Style-Preferences> name: Text-Undocumented-Declaration color: {Color Text-Green})
        (<Text-Style-Preferences> name: Text-Definition               color: {Color Text-Red})
        (<Text-Style-Preferences> name: Text-Keyword                  color: {Color Text-Blue})
        (<Text-Style-Preferences> name: Text-Jazzdoc                  color: {Color Text-Purple})
        (<Text-Style-Preferences> name: Text-Jazzdoc-Body             color: {Color Text-Dark})
        (<Text-Style-Preferences> name: Text-Tag                      color: {Color Text-Purple})
        (<Text-Style-Preferences> name: Text-Specifier                color: {Color red: 165 green: 165 blue: 165})
        (<Text-Style-Preferences> name: Text-Literal                  color: {Color Text-Ochre})
        (<Text-Style-Preferences> name: Text-Char                     color: {Color Text-Ochre})
        (<Text-Style-Preferences> name: Text-Number                   color: {Color Text-Ochre})
        (<Text-Style-Preferences> name: Text-Boolean                  color: {Color Text-Ochre})
        (<Text-Style-Preferences> name: Text-String                   color: {Color Text-Ochre})
        (<Text-Style-Preferences> name: Text-Delimited-String         color: {Color Text-Ochre})
        (<Text-Style-Preferences> name: Text-Named-String             color: {Color Text-Ochre})
        (<Text-Style-Preferences> name: Text-Quotation                color: {Color Text-Ochre})
        (<Text-Style-Preferences> name: Text-Feature                  color: {Color Text-Orange})
        (<Text-Style-Preferences> name: Text-Metadata                 color: {Color Text-Ochre}))))
  
  
  (method (setup-styles self)
    (register-children (instantiate world-styles) (styles-domain)))
  
  
  ;;;
  ;;;; Sites
  ;;;
  
  
  (method protected virtual (register-site-looks self)
    (let ((dark-purple {Color red: .464 green: .141 blue: .732})
          (purple {Color Purple})
          (cyan {Color red: .120 green: .624 blue: .616}))
      (register-site-look 'register-literal 10 {Color Yellow})
      (register-site-look 'registered-id 10 {Color Green})
      (register-site-look 'retrieve-region 10 dark-purple)
      (register-site-look 'retrieve-chunk 10 purple)
      (register-site-look 'retrieve-entity 10 {Color Blue})
      (register-site-look 'client-update 10 cyan)
      (register-site-look 'processor-update 10 cyan)
      (register-site-look 'udp-release 10 {Color Ochre})
      (register-site-look 'udp-receive 10 {Color Ochre})
      (register-site-look 'udp-process 10 {Color Ochre})
      (register-site-look 'network 9 {Color Orange})
      (register-site-look 'render 8 {Color Blue})
      (register-site-look 'event 7 {Color Yellow})
      (register-site-look 'message 7 {Color Yellow})
      (register-site-look 'player 6 {Color Green})
      (register-site-look 'physical 5 {Color Blue})
      (register-site-look 'visual 4 dark-purple)
      (register-site-look 'generate 3 purple)
      (register-site-look 'memory 2 {Color Red})
      (default-site-look 1 {Color Green})))
  
  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method protected virtual (register-event-looks self)
    )

  
  ;;;
  ;;;; Options
  ;;;
  
  
  (method public (update-world-options self)
    (set! options (new World-Options)))
  
  
  ;;;
  ;;;; Toplevel
  ;;;
  
  
  (method override (show-toplevel self)
    )
  
  
  ;;;
  ;;;; Interface
  ;;;
  
  
  (method package virtual (setup-application-interface self)
    )

  
  ;;;
  ;;;; Command
  ;;;
  
  
  (method override (get-command-shell self)
    (let ((focus (active-focus)))
      (and (is? focus Script-Text-View)
           (let ((manager (find-ascendant focus Script-Manager)))
             (locate manager '(command command-shell))))))
  
  
  (method override (unzoom-command-text self command-text)
    (let ((splitter (get-parent (get-parent (get-parent (get-creator command-text))))))
      (unzoom splitter)))
  
  
  (method override (rezoom-command-text self text command-text)
    (let ((splitter (get-parent (get-parent (get-parent (get-creator command-text)))))
          (position (get-scrolled-position text)))
      (zoom splitter (find-located splitter 'first))
      (scroll-to text position)))
  
  
  ;;;
  ;;;; Resources
  ;;;
  
  
  (method override (resources-dir self)
    (let ((repo (find-repository 'World)))
      (if (and repo (repository-binary? repo))
          {Directory World "lib" "jazz.resources" "resources"}
        (nextmethod self))))
  
  
  ;;;
  ;;;; Sleep
  ;;;
  
  
  (method override (sleep-process self)
    (set-sleeping? #t))
  
  
  (method override (wake-process self)
    (set-sleeping? #f))
  
  
  ;;;
  ;;;; Runtime
  ;;;
  
  
  (method override (runtime-products self)
    (world-products))
  
  
  (method override (runtime-properties self)
    (append (world-properties 'client) (nextmethod self))))


;;;
;;;; Preferences
;;;


(class World-Preferences extends Application-Preferences
  
  
  (form
    (<install>                                     toplevel-state: restored toolbar-classes: ((:menubar . {Reference World-Menubar}) (:toolbar . {Reference World-Toolbar}) (:status . {Reference World-Status}))
      (<documents~>
        (<Plain-Text-Preferences> name: plain-text)))))


;;;
;;;; Workspaces
;;;


(class World-Workspaces extends Workspaces-Preferences
  
  
  (form
    (<install>                          active: home
      (<World-Workspace> name: home))))


;;;
;;;; Workspace
;;;


(class World-Workspace extends Workspace-Preferences
  
  
  (form
    (<install>                                    title: "Home" icon: {Image-Resource "WorkspaceHome"}
      (<Menubar-Preferences>        name: menubar location: root
        (<Mainbar-Preferences>      name: toolbar location: second
          (<Status-Preferences>     name: status  location: second
            (<Stage-Preferences>    name: top     location: first maximized?: #t)))))))


;;;
;;;; Bindings
;;;


(class World-Bindings extends Application-Bindings
  
  
  (form
    (<install>
      (<World-Main-Actions>      name: world-main)
      (<World-Graphics-Actions>  name: world-graphics)
      (<World-Sound-Actions>     name: world-sound)
      (<World-Interface-Actions> name: world-interface)
      (<World-Zone-Actions>      name: world-zone)
      (<World-Movement-Actions>  name: world-movement)
      (<World-Camera-Actions>    name: world-camera)
      (<World-Game-Actions>      name: world-game)
      (<World-Spell-Actions>     name: world-spell)
      (<World-People-Actions>    name: world-people)
      (<World-Chat-Actions>      name: world-chat)
      (<World-Showcase-Actions>  name: world-showcase)
      (<World-Build-Actions>     name: world-build)
      (<World-Target-Actions>    name: world-target)
      (<World-History-Actions>   name: world-history)
      (<World-Tile-Actions>      name: world-tile)
      (<World-Script-Actions>    name: world-script)
      (<World-Debug-Actions>     name: world-debug)
      (<World-Tutorial-Actions>  name: world-tutorial)
      (<World-Objective-Actions> name: world-objective)
      (<World-Anonymous-Actions> name: world-anonymous))))


;;;
;;;; Menubar
;;;


(class World-Menubar extends Menubar
  
  
  (method override (install self rest)
    (nextmethod self rest)
    (with-update-locked self
      (lambda ()
        (new Label-Item parent: self name: 'file   content: (new File-Base-Menu))
        (new Label-Item parent: self name: 'edit   content: (new Edit-Base-Menu))
        (new Label-Item parent: self name: 'window content: (new Window-Menu))
        (new Label-Item parent: self name: 'help   content: (new Help-Menu))))))


;;;
;;;; Help-Menu
;;;


(class Help-Menu extends Menu
  
  
  (form
    (<install>          title: "Help"
      (<Label-Item>     title: "About World..." icon: {Image-Resource "About"} action-handler: {Action application about}))))


;;;
;;;; Toolbar
;;;


(class World-Toolbar extends Toolbar


  (form
    (<install>
      (<Action-Icon> name: new        tooltip-text: "New" resource: {Image-Resource "New"} action-handler: {Action application new})
      (<Action-Icon> name: open       tooltip-text: "Open..." resource: {Image-Resource "Open"} action-handler: {Action application open})
      (<Separator>)
      (<Action-Icon> name: cut        tooltip-text: "Cut" resource: {Image-Resource "Cut"} action-handler: {Action view cut})
      (<Action-Icon> name: copy       tooltip-text: "Copy" resource: {Image-Resource "Copy"} action-handler: {Action view copy})
      (<Action-Icon> name: paste      tooltip-text: "Paste" resource: {Image-Resource "Paste"} action-handler: {Action view paste})
      (<Separator>)
      (<Action-Icon> name: undo       tooltip-text: "Undo" resource: {Image-Resource "Undo"} action-handler: {Action view undo})
      (<Action-Icon> name: redo       tooltip-text: "Redo" resource: {Image-Resource "Redo"} action-handler: {Action view redo})
      (<Separator>                    location: tail size: {Dimension 1 0}))))


;;;
;;;; Status
;;;


(class World-Status extends Status-Toolbar


  (form
    (<install>
      (<Status-Label> name: message size: {Dimension 782 20} location: center))))


;;;
;;;; Options
;;;


(class World-Options extends Component
  
  
  (form
    (<install>
      (<Options>    name: video
        (<Options>                  title: "Rendering"
          (<Option>                 title: "View distance" setting: world.view-distance)
          (<Option>                 title: "Dynamic lights" setting: world.dynamic-lights)
          (<Option>                 title: "Post processing?" setting: world.post-processing?)
          (<Option>                 title: "Multisampling" setting: world.multisampling))
        (<Options>                  title: "Environment"
          (<Option>                 title: "Sun?" setting: world.sun?)
          (<Option>                 title: "Fog?" setting: world.fog?)))
      (<Options>    name: audio
        (<Options>                  title: "Music"
          (<Option>                 title: "Music?" setting: world.music?)
          (<Option>                 title: "Ambience?" setting: world.ambience?))
        (<Options>                  title: "Sounds"
          (<Option>                 title: "Sounds?" setting: world.sounds?)
          (<Option>                 title: "Selection sounds?" setting: world.selection-sounds?)))
      (<Options>    name: interface
        (<Options>                  title: "Camera"
          (<Option>                 title: "Move speed" setting: world.camera-move-speed)
          (<Option>                 title: "Strafe speed" setting: world.camera-strafe-speed)
          (<Option>                 title: "Rotate speed" setting: world.camera-rotate-speed)))))))
