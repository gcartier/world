;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; Changes
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2016
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;    Alain Marcotte


(module world.change jazz


(import (world)
        (world.autoload)
        (world.syntax (phase syntax)))


(class Change extends Object
  
  
  (slot name                getter generate)
  (slot id             <fx> getter generate)
  (slot forward-store       getter generate)
  (slot forward-apply       getter generate)
  (slot backward-store      getter generate)
  (slot backward-apply      getter generate)
  
  
  (method override (initialize name id forward-store forward-apply backward-store backward-apply)
    (set! name~self name)
    (set! id~self id)
    (set! forward-store~self forward-store)
    (set! forward-apply~self forward-apply)
    (set! backward-store~self backward-store)
    (set! backward-apply~self backward-apply))
  
  
  (method override (print output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{a}" name)))))


(definition protected changes <table>
  (make-table test: eq?))

(definition protected changeids <vector>
  (make-vector 256 #f))


(definition next-change-id <fx>
  0)

(definition (next-change-id!)
  (prog1 next-change-id
    (increase! next-change-id)))


(definition protected (register-change name (forward-store: forward-store #f) (forward-apply: forward-apply #f) (backward-store: backward-store #f) (backward-apply: backward-apply #f))
  (let ((id (next-change-id!)))
    (let ((change (new Change name id forward-store forward-apply backward-store backward-apply)))
      (table-set! changes name change)
      (vector-set! changeids id change)
      (unspecified))))


(definition public inline (name->change name) <Change>
  (table-ref changes name))

(definition public inline (id->change id <fx>) <Change>
  (vector-ref changeids id))


(definition public (change name forward backward (metadata: metadata #f))
  (let ((history (current-history)))
    (let ((change (name->change name)))
      (let ((id (get-id~ change))
            (forward-store (get-forward-store~ change))
            (backward-store (get-backward-store~ change)))
      (add-change~ history (get-id~ change)
        (lambda (push)
          (forward forward-store push))
        (lambda (push)
          (backward backward-store push))
        metadata)))))
  

(definition public (forward-change id pop)
  (let ((change (id->change id)))
    (let ((forward (get-forward-apply~ change)))
      (forward pop))))


(definition public (backward-change id pop)
  (let ((change (id->change id)))
    (let ((backward (get-backward-apply~ change)))
      (backward pop)))))
