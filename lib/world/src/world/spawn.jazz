;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Spawn
;;;
;;;  The Initial Developer of the Original Code is Edouard Hebert.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2016
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.spawn jazz


(import (jazz.syntax (phase syntax))
        (world)
        (world.autoload)
        (world.change)
        (world.configure)
        (world.creature)
        (world.entity)
        (world.geometry)
        (world.history)
        (world.homogeneous)
        (world.generation)
        (world.index)
        (world.log)
        (world.settings)
        (world.syntax (phase syntax))
        (world.task))


(definition protected spawn-creatures?    <bool> (world-setting 'world.spawn-creatures? #t @aec-quicky-and-no-generate-on-server-for-now (not young-child?)))
(definition protected spawn-initial-delay <pair> (world-setting 'world.spawn-initial-delay '(5. 20.)))
(definition protected spawn-delay         <pair> (world-setting 'world.spawn-delay '(10. 40.)))
(definition protected spawn-minimum       <fx>   (world-setting 'world.spawn-minimum 2))
(definition protected spawn-maximum       <fx>   (world-setting 'world.spawn-maximum 4))
(definition protected max-spawner-count   <fx>   (world-setting 'world.max-spawner-count 10))
(definition protected max-spawned-count   <fx>   (world-setting 'world.max-spawned-count 40))

(definition protected spawn-initial-min-delay <fl> (first spawn-initial-delay))
(definition protected spawn-initial-max-delay <fl> (second spawn-initial-delay))
(definition protected spawn-min-delay         <fl> (first spawn-delay))
(definition protected spawn-max-delay         <fl> (second spawn-delay))


(definition protected spawned-count     0)
(definition protected spawned-creatures '())
(definition protected player-indexes    #f)
(definition protected player-spawners   #f)
(definition protected added-spawner?    #f)

(definition protected (set-spawned-count count)
  (set! spawned-count count))

(definition protected (set-spawned-creatures creatures)
  (set! spawned-creatures creatures))

(definition protected (set-added-spawner? added?)
  (set! added-spawner? added?))


(constant max-spawn-light <fx>
  8)


(definition protected (initialize-spawned)
  (set! spawned-count 0)
  (set! spawned-creatures '())
  (set! player-indexes (make-table test: eq? weak-keys: #t))
  (set! player-spawners (make-table test: eq? weak-keys: #t))
  (set! added-spawner? #f))


(definition (sorted-spawned-creatures player)
  (let ((pos (get-position~ player)))
    (sort > spawned-creatures key: (lambda (creature)
                                     (vertex-distance (get-position~ creature) pos)))))


(definition public (spawn-task task <Task>)
  (declare (proper-tail-calls))
  (let ((zone (current-zone))
        (history (current-history)))
    (with-task task
      (lambda (exit)
        (let (iter (previous (current-seconds)))
          (let ((time (current-seconds)))
            (let ((elapse (- time previous)))
              (unless (client?)
                (unless (get-paused?~ history)
                  (unless (stopping?~ task)
                    (for-each (lambda (player)
                                (unless (server-me?~ player)
                                  (let ((current-section-index (element-section-index~ zone player)))
                                    (let ((current-spawners (with-task-mutex
                                                              (lambda ()
                                                                (if (and (equal? (table-ref player-indexes player #f) current-section-index)
                                                                         (not added-spawner?))
                                                                    (table-ref player-spawners player)
                                                                  (find-spawners current-section-index))))))
                                      (table-set! player-indexes player current-section-index)
                                      (table-set! player-spawners player current-spawners)
                                      (set! added-spawner? #f)
                                      (tick-spawn player elapse current-spawners)))))
                              (get-players~ zone)))))
              (let ((duration (- (current-seconds) time)))
                (task-sleep task spawn-period duration exit))
              (iter time))))))))


(definition (tick-spawn player elapse spawners)
  (site (spawn on?: #t)
    (when spawn-creatures?
      (spawn-creatures player elapse spawners))))


(definition protected (find-spawners section-index)
  (let ((zone (current-zone))
        (queue (new-queue)))
    (iterate-section-neighbors~ zone section-index 1
      (lambda (section)
        (section-iterate-blocks~ zone section '(52)
          (lambda (index)
            (let ((coords (index->coordinates index)))
              (let ((spawner (find-object (lambda (creature)
                                            (let ((spawner (get-spawner~ creature)))
                                              (and (eq? (get-section~ spawner) section)
                                                   (equal? (get-coordinates~ spawner) coords)
                                                   spawner)))
                                          spawned-creatures)))
                (if spawner
                    (enqueue queue spawner)
                  ;; spawn faster the first time to compensate for not having natural spawning
                  (enqueue queue (new Spawner section coords 0. (random-between spawn-initial-min-delay spawn-initial-max-delay) 0 (section/index->position section index))))))))))
    (queue-list queue)))


(definition (spawn-creatures player elapse spawners)
  (let ((zone (current-zone))
        (game (current-game)))
    (for-each (lambda (spawner)
                (let ((time-now (+ (get-time-since-last~ spawner) elapse)))
                  (if (>= time-now (get-time-for-spawn~ spawner))
                      (with-task-mutex
                        (lambda ()
                          (let ((player-position (get-position~ player))
                                (section (get-section~ spawner))
                                (coordinates (get-coordinates~ spawner)))
                            (bind-index (i j k) coordinates
                              (call-with-section~ zone section i j k
                                (lambda (section block-id <fx> data-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> with-field block-ref block-set! data-ref data-set! blocklight-ref blocklight-set! skylight-ref skylight-set!)
                                  (define (find-spawning-places needed)
                                    (define (random-x/z)
                                      (random-element '(-1 1)))
                                    
                                    (define (random-y)
                                      (random-element '(-1 0 1)))
                                    
                                    (let ((places '()))
                                      (set! needed (* needed 4))
                                      (let (iter-distance (dist 1))
                                        (let (iter-circle (max-places (max 2 (/ needed 2))))
                                          (let ((a (* dist (if (= dist 1) (random-y) (random-x/z))))
                                                (b (* dist (random-y)))
                                                (c (* dist (if (= dist 1) (random-y) (random-x/z)))))
                                            (with-field (+ i a) (+ j b) (+ k c)
                                              (lambda (section index)
                                                (when (and section (= (block-ref section index) 0))
                                                  (decrease! needed)
                                                  (decrease! max-places)
                                                  (set! places (cons (cons (section/index->position section index) (blocklight-ref section index)) places)) ;; maybe include skylight
                                                  (cond ((> max-places 0)
                                                         (iter-circle max-places))
                                                        ((and (< dist 4) (= max-places 0) (> needed 0))
                                                         (iter-distance (+ dist 1)))
                                                        (else
                                                         #f))))))))
                                      places))
                                  
                                  (let ((spawn-count (random-integer-between spawn-minimum spawn-maximum)))
                                    (let ((sorted-creatures (and (> (+ spawned-count spawn-count) max-spawned-count) (sorted-spawned-creatures player)))
                                          (possible-spawn-places (find-spawning-places spawn-count)))
                                      (loop (for number from 0 below spawn-count)
                                            (unless (or (null? possible-spawn-places) (>= (get-creature-count~ spawner) max-spawner-count))
                                              (bind (pos . light) (random-element possible-spawn-places)
                                                (when (< light max-spawn-light)
                                                  (set! possible-spawn-places (remove! position possible-spawn-places test: equal?))
                                                  (let ((farthest-to-remove (and (> (+ spawned-count 1) max-spawned-count) (not-null? sorted-creatures) (car sorted-creatures))))
                                                    ;; do not remove farthest if we are spawning farthest away than it
                                                    (unless (and farthest-to-remove (>= (vertex-distance& pos player-position) (vertex-distance& (get-position~ farthest-to-remove) player-position)))
                                                      (let ((lookat (horizon-lookat (random-horizon))))
                                                        (when farthest-to-remove
                                                          (remove-element~ zone farthest-to-remove)
                                                          (set! sorted-creatures (cdr sorted-creatures)))
                                                        (spawn pos lookat spawner))))))))
                                      (set-time-since-last~ spawner 0.)
                                      (set-time-for-spawn~ spawner (random-between spawn-min-delay spawn-max-delay))))))))))
                      (set-time-since-last~ spawner time-now))))
              spawners)))


(definition protected (add-spawned creature)
  (let ((spawner (get-spawner~ creature)))
    (when spawner
      (set-spawned-count (+ spawned-count 1))
      (set-spawned-creatures (cons creature spawned-creatures))
      (set-creature-count~ spawner (+ (get-creature-count~ spawner) 1)))))


(definition protected (remove-spawned creature)
  (let ((spawner (get-spawner~ creature)))
    (when spawner
      (set-spawned-count (- spawned-count 1))
      (set-spawned-creatures (remove! creature spawned-creatures))
      (set-creature-count~ spawner (- (get-creature-count~ spawner) 1)))))


(definition protected (validate-spawn)
  (let ((spawned (collect-if get-spawner~ spawned-creatures)))
    (unless (testing?)
      (debug spawned-count (length spawned) (length spawned-creatures)))
    (assert (<= spawned-count max-spawned-count))
    (assert (= spawned-count (length spawned) (length spawned-creatures)))
    (assert (= (length spawned-creatures) (length (remove-duplicates spawned-creatures))))
    (assert (= (length player-spawners) (length (remove-duplicates player-spawners))))
    (let ((spawners (remove-duplicates (map get-spawner~ spawned-creatures))))
      (for-each (lambda (spawner count)
                  (assert (= (get-creature-count~ spawner) count))
                  (assert (<= count max-spawner-count)))
                spawners
                (map (lambda (spawner)
                       (length (collect-if (lambda (creature)
                                             (eq? (get-spawner~ creature) spawner))
                                           spawned-creatures)))
                     spawners)))))


;;;
;;;; Spawner
;;;


(class Spawner extends Object
  
  
  (slot section         getter generate)
  (slot coordinates     getter generate)
  (slot time-since-last accessors generate)
  (slot time-for-spawn  accessors generate)
  (slot creature-count  accessors generate)
  (slot position        getter generate)
  
  
  (method override (initialize section coordinates time-since-last time-for-spawn creature-count position)
    (set! section~self section)
    (set! coordinates~self coordinates)
    (set! time-since-last~self time-since-last)
    (set! time-for-spawn~self time-for-spawn)
    (set! creature-count~self creature-count)
    (set! position~self position)))


;;;
;;;; Change
;;;


(definition protected (spawn pos lookat spawner)
  (let ((class-name (category-name (random-element (list Spider Wolf Jumper)))))
    (let ((creature (apply-spawn class-name #f pos lookat spawner)))
      (let ((entity-id (get-id~ creature)))
        (let ((history (current-history)))
          (unless (or (and (get-paused?~ history) (not (stepping-history?))) (admin?))
            (bidirectional-change 'spawn (current-seconds)
              (lambda (store push)
                )
              (lambda (store push)
                (store push class-name entity-id pos lookat))
              (lambda (store push)
                ))))))))


(definition protected (apply-spawn class-name id pos lookat (spawner #f))
  (let ((world (current-world))
        (zone (current-zone)))
    (let ((class (class-name->class~ world class-name)))
      (let ((creature (new class id: id position: pos lookat: lookat)))
        (log-server (format "Spawn {a} {a} {a}" class-name (get-id~ creature) pos))
        (set-behavior~ creature 'hostile)
        (when spawner
          (set-spawner~ creature spawner))
        (add-element~ zone creature)))))


(define-change spawn
  forward-count: 14
  forward-store: (lambda (push class-name entity-id position lookat)
                   (let ((sight (get-sight~ lookat))
                         (up (get-up~ lookat))
                         (right (get-right~ lookat)))
                     (push (cast <fl> (literal->id class-name)))
                     (push (cast <fl> (literal->id entity-id)))
                     (push (vertex-x position))
                     (push (vertex-y position))
                     (push (vertex-z position))
                     (push (vertex-x sight))
                     (push (vertex-y sight))
                     (push (vertex-z sight))
                     (push (vertex-x up))
                     (push (vertex-y up))
                     (push (vertex-z up))
                     (push (vertex-x right))
                     (push (vertex-y right))
                     (push (vertex-z right))))
  forward-apply: (lambda (client-id pop)
                   (let* ((class-id (pop))
                          (entity-id (pop))
                          (x (pop))
                          (y (pop))
                          (z (pop))
                          (sx (pop))
                          (sy (pop))
                          (sz (pop))
                          (ux (pop))
                          (uy (pop))
                          (uz (pop))
                          (rx (pop))
                          (ry (pop))
                          (rz (pop)))
                     (let ((class-name (id->literal (flonum->fixnum class-id)))
                           (entity-id (id->literal (flonum->fixnum entity-id)))
                           (pos (vertex& x y z))
                           (lookat (lookat& (vertex& sx sy sz) (vertex& ux uy uz) (vertex& rx ry rz))))
                       (apply-spawn class-name entity-id pos lookat))))))
