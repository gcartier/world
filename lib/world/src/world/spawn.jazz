;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Spawn
;;;
;;;  The Initial Developer of the Original Code is Edouard Hebert.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2016
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.spawn jazz


(import (jazz.syntax (phase syntax))
        (world)
        (world.autoload)
        (world.configure)
        (world.creature)
        (world.geometry)
        (world.history)
        (world.generation)
        (world.settings)
        (world.syntax (phase syntax))
        (world.task))


(definition spawn-creatures?      <bool> (world-setting 'world.spawn-creatures? #f @aec-quicky-and-no-generate-on-server-for-now (not young-child?)))
(definition spawn-initial-delay   <pair> (world-setting 'world.spawn-initial-delay '(5. 20.)))
(definition spawn-delay           <pair> (world-setting 'world.spawn-delay '(10. 40.)))
(definition spawn-minimum         <fx>   (world-setting 'world.spawn-minimum 2))
(definition spawn-maximum         <fx>   (world-setting 'world.spawn-maximum 4))

;; be very conservative until task is fully optimized and adaptive to not starve other tasks
(definition max-spawner-creatures <fx>   (world-setting 'world.max-spawner-creatures 4)) ;; 10
(definition max-creatures         <fx>   (world-setting 'world.max-creatures 10)) ;; 40initialize 


(definition protected spawned-count     0)
(definition protected spawned-creatures '())
(definition protected spawner-list      '())
(definition protected spawner-added?    #f)

(definition protected (set-spawned-count count)
  (set! spawned-count count))

(definition protected (set-spawned-creatures creatures)
  (set! spawned-creatures creatures))

(definition protected (set-spawner-added? added?)
  (set! spawner-added? added?))


(definition protected (initialize-spawned)
  (set! spawned-count 0)
  (set! spawned-creatures '())
  (set! spawner-list '()))


(definition (sorted-spawned-creatures)
  (let ((me (current-me)))
    (let ((pos (get-position~ me)))
      (sort > spawned-creatures key: (lambda (creature)
                                       (vertex-distance (get-position~ creature) pos))))))


(definition public (spawn-task task <Task>)
  (declare (proper-tail-calls))
  (let ((zone (current-zone))
        (me (current-me+))
        (history (current-history)))
    (with-task task
      (lambda (exit)
        (let ((section #f))
          (let (iter (previous (current-seconds)))
            (let ((time (current-seconds)))
              (let ((elapse (- time previous)))
                (unless (get-paused?~ history)
                  (with-task-mutex
                    (lambda ()
                      (unless (stopping?~ task)
                        ;; quick solution that should be generalized for server-side
                        (when me
                          (let ((current-section (get-section~ me)))
                            (let ((current-spawners (if (and (eq? section current-section)
                                                             (not spawner-added?))
                                                        spawner-list
                                                      (find-spawners current-section spawner-list))))
                              (set! section current-section)
                              (set! spawner-list current-spawners)
                              (set! spawner-added? #f)
                              (tick-spawn elapse current-spawners))))))))
                (let ((duration (- (current-seconds) time)))
                  (task-sleep task spawn-period duration exit))
                (iter time)))))))))


(definition (tick-spawn elapse spawners)
  (site (spawn on?: #t)
    (when spawn-creatures?
      (spawn-creatures elapse spawners))))


(definition (find-spawners section old-spawners)
  (let ((zone (current-zone))
        (queue (new-queue)))
    (iterate-section-neighbors~ zone section 1
      (lambda (section)
        (section-iterate-blocks~ zone section '(52)
          (lambda (index)
            ;; spawn faster the first time to compensate for not having natural spawning
            (let ((coords (index->coordinates index)))
              (let ((spawner (find-object (lambda (spawner)
                                            (and (eq? (get-section~ spawner) section)
                                                 (equal? (get-coordinates~ spawner) coords)
                                                 spawner))
                                          old-spawners)))
                (if spawner
                    (enqueue queue spawner)
                  (retain~ section 'spawners)
                  (enqueue queue (new Spawner section coords 0. (random-between (first spawn-initial-delay) (second spawn-initial-delay)) 0 (section/index->position section index))))))))
        (release~ section 'iterate-section-neighbors)))
    (queue-list queue)))


(definition (spawn-creatures elapse spawners)
  (let ((zone (current-zone)))
    (for-each (lambda (spawner)
                (let ((section (get-section~ spawner))
                      (time-since-last (get-time-since-last~ spawner))
                      (time-for-spawn (get-time-for-spawn~ spawner))
                      (creature-count (get-creature-count~ spawner))
                      (coordinates (get-coordinates~ spawner)))
                  (bind (i j k) coordinates
                    (call-with-section~ zone section i j k
                      (lambda (section block-id <fx> data-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> with-field block-ref block-set! data-ref data-set! blocklight-ref blocklight-set! skylight-ref skylight-set!)
                        (define (find-spawning-places needed)
                          (define (random-x)
                            (random-element '(-1 1)))
                          
                          (define (random-y)
                            (random-element '(-1 0 1)))
                          
                          (let ((places '())
                                (a 0)
                                (b 0)
                                (c 0))
                            (set! needed (* needed 4))
                            (let (iter-distance (dist 1))
                              (let (iter-circle (max-places (max 2 (/ needed 2))))
                                (set! a (* dist (if (= dist 1) (random-y) (random-x))))
                                (set! b (* dist (random-y)))
                                (set! c (* dist (if (= dist 1) (random-y) (random-x))))
                                (with-field (+ i a) (+ j b) (+ k c)
                                  (lambda (section index)
                                    (when (and section (= (block-ref section index) 0))
                                      (decrease! needed)
                                      (decrease! max-places)
                                      (set! places (cons (cons (section/index->position section index) (blocklight-ref section index)) places)) ;; maybe include skylight
                                      (cond ((> max-places 0)
                                             (iter-circle max-places))
                                            ((and (< dist 4) (= max-places 0) (> needed 0))
                                             (iter-distance (+ dist 1)))
                                            (else
                                             #f)))))))
                            places))
                        
                        (let ((time-now (+ time-since-last elapse)))
                          (if (> time-now time-for-spawn)
                              (let ((spawn-count (random-integer-between spawn-minimum spawn-maximum)))
                                (let ((sorted-creatures (and (> (+ spawned-count spawn-count) max-creatures) (sorted-spawned-creatures)))
                                      (possible-spawn-places (find-spawning-places spawn-count)))
                                  (loop (for number from 0 below spawn-count)
                                        (unless (or (null? possible-spawn-places) (>= creature-count max-spawner-creatures))
                                          (let ((position (random-element possible-spawn-places)))
                                            (when (< (cdr position) 8)
                                              (set! possible-spawn-places (remove position possible-spawn-places test: equal?))
                                              (let ((creature (new (random-element (list Spider Wolf Jumper)) parent: zone position: (car position) animate?: #t)))
                                                (set-hostile?~ creature #t)
                                                (set-spawner-position~ creature (vertex x y z))
                                                (add-element~ zone creature)
                                                (increase! creature-count 1))
                                              (when (and (> spawned-count max-creatures) (not-null? sorted-creatures))
                                                (let ((creature (car sorted-creatures)))
                                                  (remove-element~ zone creature)
                                                  (set! sorted-creatures (cdr sorted-creatures))))))))
                                  (set-time-since-last~ spawner 0.)
                                  (set-time-for-spawn~ spawner (random-between (first spawn-delay) (second spawn-delay)))
                                  (set-creature-count~ spawner creature-count)))
                            (set-time-since-last~ spawner time-now))))))))
              spawners))))
