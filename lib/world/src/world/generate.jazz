;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; World Generate
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.generate jazz


(import (jazz.geometry)
        (jazz.graphic)
        (jazz.graphic.opengl.glew)
        (jazz.io)
        (jazz.library)
        (jazz.literals)
        (jazz.media)
        (jazz.network)
        (jazz.platform)
        (jazz.platform.cairo)
        (jazz.runtime)
        (jazz.system)
        (jazz.ui)
        (jazz.ui.window)
        (time)
        (world)
        (world.area)
        (world.autoload)
        (world.face)
        (world.geometry)
        (world.mesh)
        (world.polygon)
        (world.quad)
        (world.syntax (phase syntax))
        (world.texture)
        (world.tile)
        (world.triangle))


(proclaim (warn optimizations))

(declare (optimize-dead-local-variables))


;;;
;;;; Debug
;;;


(definition public (generate-debug generator)
  (generator
    (lambda (triangles quads)
      (debug 'setup triangles quads))
    (lambda (v1 n1 t1u t1v v2 n2 t2u t2v v3 n3 t3u t3v tdepth)
      (debug 'triangle v1 v2 v3))
    (lambda (v1 n1 t1u t1v v2 n2 t2u t2v v3 n3 t3u t3v v4 n4 t4u t4v tdepth)
      (debug 'quad v1 v2 v3 v4))))


;;;
;;;; Mesh
;;;


(definition public (generate-mesh generator (matrix: matrix #f) (smooth-normals?: smooth-normals? #f) (material: material #f) (return-faces?: return-faces? #f))
  (let ((vertex-floats 10)
        (triangles-count <fx+> #f)
        (triangle-floats <fx+> #f)
        (content <f32vector+> #f)
        (n 0)
        (smooth-normals (and smooth-normals? (make-table test: vertex=? hash: vertex-hash)))
        (faces (and return-faces? (new-queue))))
    (define (setup triangles <fx> quads <fx>)
      (unless return-faces?
        (set! triangles-count (+ triangles (* quads 2)))
        (set! triangle-floats (* 3 vertex-floats))
        (set! content (make-f32vector (* triangles-count triangle-floats)))))
    
    (define (add-triangle v1 n1 t1u t1v v2 n2 t2u t2v v3 n3 t3u t3v tdepth)
      (add
        (transform v1) n1 t1u t1v
        (transform v2) n2 t2u t2v
        (transform v3) n3 t3u t3v
        tdepth))
    
    (define (add-quad v1 n1 t1u t1v v2 n2 t2u t2v v3 n3 t3u t3v v4 n4 t4u t4v tdepth)
      (add
        (transform v1) n1 t1u t1v
        (transform v2) n2 t2u t2v
        (transform v3) n3 t3u t3v
        tdepth)
      (add
        (transform v3) n3 t3u t3v
        (transform v4) n4 t4u t4v
        (transform v1) n1 t1u t1v
        tdepth))
    
    (define (transform vert)
      (matrix+-transform-3x4 matrix vert))
    
    (define (add v1 n1 t1u t1v v2 n2 t2u t2v v3 n3 t3u t3v tdepth)
      (let ((plane-normal #f))
        (define (get-plane-normal)
          (or plane-normal (let ((normal (plane-normal-safe v1 v2 v3)))
                             (set! plane-normal normal)
                             normal)))
        
        (let ((n1 (or n1 (get-plane-normal)))
              (n2 (or n2 (get-plane-normal)))
              (n3 (or n3 (get-plane-normal))))
          (when smooth-normals?
            (let ((plane-normal (get-plane-normal)))
              (define (process-vertex vert)
                (let ((vert (if return-faces? vert (vertex-64->32 vert))))
                  (let ((smooth-normal (table-ref smooth-normals vert #f)))
                    (if (not smooth-normal)
                        (table-set! smooth-normals vert plane-normal)
                      (vertex-increase! smooth-normal plane-normal)))))
              
              (process-vertex v1)
              (process-vertex v2)
              (process-vertex v3)))
          (if return-faces?
              (enqueue faces (make-face #f
                                        (f32vector t1u t1v t2u t2v t3u t3v)
                                        tdepth
                                        (make-smooth-triangle #f v1 v2 v3 n1 n2 n3)))
            (add-vertex v1) (add-normal n1) (add-texture t1u t1v tdepth) (add-bone)
            (add-vertex v2) (add-normal n2) (add-texture t2u t2v tdepth) (add-bone)
            (add-vertex v3) (add-normal n3) (add-texture t3u t3v tdepth) (add-bone)))))
    
    (define (add-vertex vert)
      (f32vector-set! content n (vertex-x vert))
      (f32vector-set! content (+ n 1) (vertex-y vert))
      (f32vector-set! content (+ n 2) (vertex-z vert))
      (set! n (+ n 3)))
    
    (define (add-normal normal)
      (f32vector-set! content n (vertex-x normal))
      (f32vector-set! content (+ n 1) (vertex-y normal))
      (f32vector-set! content (+ n 2) (vertex-z normal))
      (set! n (+ n 3)))
    
    (define (add-texture tu tv tdepth)
      (f32vector-set! content n tu)
      (f32vector-set! content (+ n 1) tv)
      (f32vector-set! content (+ n 2) tdepth)
      (set! n (+ n 3)))
    
    (define (add-bone)
      (f32vector-set! content n 0.)
      (set! n (+ n 1)))
    
    (generator setup add-triangle add-quad)
    (when smooth-normals?
      (iterate-table smooth-normals
        (lambda (vert smooth-normal)
          (vertex-normalize! smooth-normal smooth-normal)))
      (if return-faces?
          (for-each (lambda (face <Face>)
                      (let ((triangle <Smooth-Triangle> (get-polygon~ face)))
                        (let ((v1 (get-v1~ triangle)))
                          (let ((smooth-normal (table-ref smooth-normals v1)))
                            (set-n1~ triangle smooth-normal)))
                        (let ((v2 (get-v2~ triangle)))
                          (let ((smooth-normal (table-ref smooth-normals v2)))
                            (set-n2~ triangle smooth-normal)))
                        (let ((v3 (get-v3~ triangle)))
                          (let ((smooth-normal (table-ref smooth-normals v3)))
                            (set-n3~ triangle smooth-normal)))))
                    (queue-list faces))
        (loop (for i from 0 below triangles-count)
              (let ((n (* i triangle-floats)))
                (define (smooth-vertex offset <fx>)
                  (let ((vert (vertex (f32vector-ref content offset) (f32vector-ref content (+ offset 1)) (f32vector-ref content (+ offset 2)))))
                    (let ((smooth-normal (table-ref smooth-normals vert)))
                      (f32vector-set! content (+ offset 3) (vertex-x smooth-normal))
                      (f32vector-set! content (+ offset 4) (vertex-y smooth-normal))
                      (f32vector-set! content (+ offset 5) (vertex-z smooth-normal)))))
                
                (smooth-vertex n)
                (smooth-vertex (+ n vertex-floats))
                (smooth-vertex (+ n (* vertex-floats 2)))))))
    (if return-faces?
        (queue-list faces)
      (let ((mesh (new Mesh material: material)))
        (allocate-vertices~ mesh)
        (set-data~ (get-vertices-buffer~ mesh) content vertex-floats)
        mesh))))


;;;
;;;; Faces
;;;


(definition public (generate-faces generator (matrix: matrix #f) (smooth-normals?: smooth-normals? #f) (material: material #f))
  (let ((zone (current-zone)))
    (let ((faces (generate-mesh generator matrix: matrix smooth-normals?: smooth-normals? material: material return-faces?: #t))
          (sectors (make-table test: eq?)))
      (for-each (lambda (face)
                  (let ((sector (position-sector~ zone (get-center~ (get-polygon~ face)))))
                    (add-face~ sector face)
                    (table-set! sectors sector #t)))
                faces)
      (iterate-table sectors
        (lambda (sector ignore)
          (set-vertices-uptodate?~ sector #f))))))


;;;
;;;; Polygons
;;;


(definition public (generate-polygons generator (element: element #f) (matrix: matrix #f))
  (let ((world (current-world))
        (zone (current-zone))
        (areas #f))
    (define (setup triangles quads)
      (set! areas (make-table test: eq?)))
    
    (define (add-triangle v1 n1 t1u t1v v2 n2 t2u t2v v3 n3 t3u t3v tdepth)
      (add-polygon (triangle-class~ world) (vector v1 v2 v3)))
    
    (define (add-quad v1 n1 t1u t1v v2 n2 t2u t2v v3 n3 t3u t3v v4 n4 t4u t4v tdepth)
      (add-polygon (quad-class~ world) (vector v1 v2 v3 v4)))
    
    (define (add-polygon class vertices)
      (define (transform vertex)
        (matrix+-transform-3x4 matrix vertex))
      
      (let ((vertices (vector-map transform vertices)))
        (let ((polygon <Polygon> (new class element vertices)))
          (let ((center (get-center~ polygon)))
            (let ((area (index-area~ zone (position-area-index~ zone center) #f)))
              (table-add areas area polygon))))))
    
    (generator setup add-triangle add-quad)
    (iterate-table areas
      (lambda (area <Area> polygons)
        (add-polygons~ area element polygons))))))
