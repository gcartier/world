;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; World Generate
;;;


(module world.generate jazz


(import (jazz.geometry)
        (jazz.graphic)
        (jazz.graphic.opengl.glew)
        (jazz.io)
        (jazz.library)
        (jazz.literals)
        (jazz.media)
        (jazz.network)
        (jazz.platform)
        (jazz.platform.cairo)
        (jazz.runtime)
        (jazz.system)
        (jazz.ui)
        (jazz.ui.window)
        (time)
        (world)
        (world.area)
        (world.autoload)
        (world.geometry)
        (world.mesh)
        (world.quad)
        (world.syntax (phase syntax))
        (world.texture)
        (world.tile))


;;;
;;;; Mesh
;;;


(definition public (generate-mesh generator (smooth-normals?: smooth-normals? #f) (matrix: matrix #f) (material: material #f))
  (let ((vertex-floats 10)
        (triangles-count #f)
        (triangle-floats #f)
        (content #f)
        (n 0)
        (smooth-normals (and smooth-normals? (make-table test: vertex-near?))))
    (define (setup triangles quads)
      (set! triangles-count (+ triangles (* quads 2)))
      (set! triangle-floats (* 3 vertex-floats))
      (set! content (make-f32vector (* triangles-count triangle-floats))))
    
    (define (add-triangle v1 n1 t1u t1v v2 n2 t2u t2v v3 n3 t3u t3v tdepth)
      (add
        v1 n1 t1u t1v
        v2 n2 t2u t2v
        v3 n3 t3u t3v
        tdepth))
    
    (define (add-quad v1 n1 t1u t1v v2 n2 t2u t2v v3 n3 t3u t3v v4 n4 t4u t4v tdepth)
      (add
        v1 n1 t1u t1v
        v2 n2 t2u t2v
        v3 n3 t3u t3v
        tdepth)
      (add
        v3 n3 t3u t3v
        v4 n4 t4u t4v
        v1 n1 t1u t1v
        tdepth))
    
    (define (add v1 n1 t1u t1v v2 n2 t2u t2v v3 n3 t3u t3v tdepth)
      (let ((plane-normal #f))
        (define (get-plane-normal)
          (or plane-normal (let ((normal (plane-normal-safe v1 v2 v3)))
                             (set! plane-normal normal)
                             normal)))
        
        (let ((n1 (or n1 (get-plane-normal)))
              (n2 (or n2 (get-plane-normal)))
              (n3 (or n3 (get-plane-normal))))
          (when smooth-normals?
            (let ((plane-normal (get-plane-normal)))
              (define (process-vertex vert)
                (let ((smooth-normal (table-ref smooth-normals vert #f)))
                  (if (not smooth-normal)
                      (table-set! smooth-normals vert plane-normal)
                    (vertex-increase! smooth-normal plane-normal))))
              
              (process-vertex v1)
              (process-vertex v2)
              (process-vertex v3)))
          (add-vertex v1) (add-normal n1) (add-texture t1u t1v tdepth) (add-bone)
          (add-vertex v2) (add-normal n2) (add-texture t2u t2v tdepth) (add-bone)
          (add-vertex v3) (add-normal n3) (add-texture t3u t3v tdepth) (add-bone))))
    
    (define (add-vertex vert)
      (f32vector-set! content n (vertex-x vert))
      (f32vector-set! content (+ n 1) (vertex-y vert))
      (f32vector-set! content (+ n 2) (vertex-z vert))
      (set! n (+ n 3)))
    
    (define (add-normal normal)
      (f32vector-set! content n (vertex-x normal))
      (f32vector-set! content (+ n 1) (vertex-y normal))
      (f32vector-set! content (+ n 2) (vertex-z normal))
      (set! n (+ n 3)))
    
    (define (add-texture tu tv tdepth)
      (f32vector-set! content n tu)
      (f32vector-set! content (+ n 1) tv)
      (f32vector-set! content (+ n 2) tdepth)
      (set! n (+ n 3)))
    
    (define (add-bone)
      (f32vector-set! content n 0.)
      (set! n (+ n 1)))
    
    (generator setup add-triangle add-quad)
    (when smooth-normals?
      (iterate-table smooth-normals
        (lambda (vert smooth-normal)
          (vertex-normalize! smooth-normal smooth-normal)))
      (loop (for i from 0 below triangles-count)
            (let ((n (* i triangle-floats)))
              (define (smooth-vertex offset)
                (let ((vert (vertex (f32vector-ref content offset) (f32vector-ref content (+ offset 1)) (f32vector-ref content (+ offset 2)))))
                  (let ((smooth-normal (table-ref smooth-normals vert)))
                    (f32vector-set! content (+ offset 3) (vertex-x smooth-normal))
                    (f32vector-set! content (+ offset 4) (vertex-y smooth-normal))
                    (f32vector-set! content (+ offset 5) (vertex-z smooth-normal)))))
              
              (smooth-vertex n)
              (smooth-vertex (+ n vertex-floats))
              (smooth-vertex (+ n (* vertex-floats 2))))))
    (let ((mesh (new Mesh material: material)))
      (allocate-vertices~ mesh)
      (set-data~ (get-vertices-buffer~ mesh) content vertex-floats)
      mesh)))


;;;
;;;; Polygons
;;;


(definition public (generate-polygons generator (matrix: matrix #f))
  (let ((world (current-world))
        (zone (current-zone))
        (areas #f))
    (define (setup triangles quads)
      (set! areas (make-table test: eq?)))
    
    (define (add-triangle v1 n1 t1u t1v v2 n2 t2u t2v v3 n3 t3u t3v tdepth)
      (add-polygon (triangle-class~ world) (vector v3 v2 v1)))
    
    (define (add-quad v1 n1 t1u t1v v2 n2 t2u t2v v3 n3 t3u t3v v4 n4 t4u t4v tdepth)
      (add-polygon (quad-class~ world) (vector v4 v3 v2 v1)))
    
    (define (add-polygon class vertices)
      (define (transform vertex)
        (matrix-transform-3x4 matrix vertex))
      
      (let ((vertices (vector-map transform vertices)))
        (let ((polygon (new class #f vertices)))
          (let ((center (get-center~ polygon)))
            (let ((area (index-area~ zone (position-area-index~ zone center) #f)))
              (table-add areas area polygon))))))
    
    (generator setup add-triangle add-quad)
    (iterate-table areas
      (lambda (area <Area> polygons)
        (add-polygons~ area #f polygons))))))
