;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Generate
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.generate jazz


(import (jazz.geometry)
        (world)
        (world.area)
        (world.context)
        (world.face)
        (world.generation.block)
        (world.geometry)
        (world.material)
        (world.mesh)
        (world.parallelepiped)
        (world.polygon)
        (world.quad)
        (world.support)
        (world.template)
        (world.triangle))


(proclaim (warn optimizations))

(declare (optimize-dead-local-variables))


;;;
;;;; Void
;;;


(definition public (generate-void generator)
  (generator
    (lambda (triangles quads)
      )
    (lambda (v1 n1 s1 t1 v2 n2 s2 t2 v3 n3 s3 t3 uv tdepth)
      )
    (lambda (v1 n1 s1 t1 v2 n2 s2 t2 v3 n3 s3 t3 v4 n4 s4 t4 uv tdepth)
      )))


;;;
;;;; Debug
;;;


(definition public (generate-debug generator)
  (generator
    (lambda (triangles quads)
      (debug 'setup triangles quads))
    (lambda (v1 n1 s1 t1 v2 n2 s2 t2 v3 n3 s3 t3 uv tdepth)
      (debug 'triangle v1 v2 v3))
    (lambda (v1 n1 s1 t1 v2 n2 s2 t2 v3 n3 s3 t3 v4 n4 s4 t4 uv tdepth)
      (debug 'quad v1 v2 v3 v4))))


;;;
;;;; Cuboid
;;;


(definition public (iterate-cuboid-quads cuboid <cuboid> element proc)
  (let ((left (cuboid-left cuboid))
        (right (cuboid-right cuboid))
        (bottom (cuboid-bottom cuboid))
        (top (cuboid-top cuboid))
        (back (cuboid-back cuboid))
        (front (cuboid-front cuboid)))
    ;; front face
    (proc (make-quad element (vertex left top front) (vertex left bottom front) (vertex right bottom front) (vertex right top front)))
    ;; back face
    (proc (make-quad element (vertex right top back) (vertex right bottom back) (vertex left bottom back) (vertex left top back)))
    ;; left face
    (proc (make-quad element (vertex left top back) (vertex left bottom back) (vertex left bottom front) (vertex left top front)))
    ;; right face
    (proc (make-quad element (vertex right top front) (vertex right bottom front) (vertex right bottom back) (vertex right top back)))
    ;; top face
    (proc (make-quad element (vertex left top back) (vertex left top front) (vertex right top front) (vertex right top back)))
    ;; bottom face
    (proc (make-quad element (vertex left bottom front) (vertex left bottom back) (vertex right bottom back) (vertex right bottom front)))))


(definition public (iterate-cuboid-inner-quads cuboid <cuboid> element proc)
  (let ((left (cuboid-left cuboid))
        (right (cuboid-right cuboid))
        (bottom (cuboid-bottom cuboid))
        (top (cuboid-top cuboid))
        (back (cuboid-back cuboid))
        (front (cuboid-front cuboid)))
    (define (iterate v1 v2 v3 v4)
      (proc (make-quad element v4 v3 v2 v1)))
    
    ;; front face
    (iterate (vertex left top front) (vertex left bottom front) (vertex right bottom front) (vertex right top front))
    ;; back face
    (iterate (vertex right top back) (vertex right bottom back) (vertex left bottom back) (vertex left top back))
    ;; left face
    (iterate (vertex left top back) (vertex left bottom back) (vertex left bottom front) (vertex left top front))
    ;; right face
    (iterate (vertex right top front) (vertex right bottom front) (vertex right bottom back) (vertex right top back))
    ;; top face
    (iterate (vertex left top back) (vertex left top front) (vertex right top front) (vertex right top back))
    ;; bottom face
    (iterate (vertex left bottom front) (vertex left bottom back) (vertex right bottom back) (vertex right bottom front))))


(definition public (ray-closest-cuboid-inner-quad orig <vertex> dir <vertex> cuboid <cuboid>)
  (let ((closest #f)
        (distance <fl+> #f))
    (iterate-cuboid-inner-quads cuboid #f
      (lambda (quad <Quad>)
        (let ((cls (ray-closest-triangle quad orig dir #f)))
          (when cls
            (bind (poly dist <fl>) cls
              (when (or (not distance)
                        (< dist distance))
                (set! closest (list poly dist))
                (set! distance dist)))))))
    closest))


(definition public (transform-cuboid cuboid <cuboid> matrix <matrix>) <Parallelepiped>
  (let ((left (cuboid-left cuboid))
        (right (cuboid-right cuboid))
        (bottom (cuboid-bottom cuboid))
        (top (cuboid-top cuboid))
        (back (cuboid-back cuboid))
        (front (cuboid-front cuboid)))
    (parallelepiped (matrix-transform-3x4& matrix (vertex left bottom back))
                    (matrix-transform-3x4& matrix (vertex left bottom front))
                    (matrix-transform-3x4& matrix (vertex left top back))
                    (matrix-transform-3x4& matrix (vertex left top front))
                    (matrix-transform-3x4& matrix (vertex right bottom back))
                    (matrix-transform-3x4& matrix (vertex right bottom front))
                    (matrix-transform-3x4& matrix (vertex right top back))
                    (matrix-transform-3x4& matrix (vertex right top front)))))


;;;
;;;; Parallelepiped
;;;


(definition public (iterate-parallelepiped-quads$ para <Parallelepiped> sphere-matrix <matrix+> proc element)
  (let ((left/bottom/back (get-left/bottom/back para))
        (left/bottom/front (get-left/bottom/front para))
        (left/top/back (get-left/top/back para))
        (left/top/front (get-left/top/front para))
        (right/bottom/back (get-right/bottom/back para))
        (right/bottom/front (get-right/bottom/front para))
        (right/top/back (get-right/top/back para))
        (right/top/front (get-right/top/front para)))
    (define (transform v1 <vertex> v2 <vertex> v3 <vertex> v4 <vertex>)
      (proc (make-quad$ element
                        (matrix+-transform-3x4 sphere-matrix v1)
                        (matrix+-transform-3x4 sphere-matrix v2)
                        (matrix+-transform-3x4 sphere-matrix v3)
                        (matrix+-transform-3x4 sphere-matrix v4))))
    
    ;; top
    (transform right/top/back left/top/back left/top/front right/top/front)
    ;; bottom
    (transform right/bottom/front left/bottom/front left/bottom/back right/bottom/back)
    ;; front
    (transform left/bottom/front right/bottom/front right/top/front left/top/front)
    ;; back
    (transform right/bottom/back left/bottom/back left/top/back right/top/back)
    ;; left
    (transform left/top/front left/top/back left/bottom/back left/bottom/front)
    ;; right
    (transform right/top/back right/top/front right/bottom/front right/bottom/back)))


(definition public (iterate-parallelepiped-vertices para <Parallelepiped> proc)
  (proc (get-left/bottom/back para))
  (proc (get-left/bottom/front para))
  (proc (get-left/top/back para))
  (proc (get-left/top/front para))
  (proc (get-right/bottom/back para))
  (proc (get-right/bottom/front para))
  (proc (get-right/top/back para))
  (proc (get-right/top/front para)))


(definition public (parallelepiped-bounds para <Parallelepiped>) <cuboid>
  (compute-vertices-bounds
    (lambda (process)
      (iterate-parallelepiped-vertices para process))))


;;;
;;;; Mesh
;;;


(definition public (generate-mesh generator (matrix: matrix <matrix+> #f) (neighbors?: neighbors? #f) (smooth-normals?: smooth-normals? #f) (material: material #f) (return-faces?: return-faces? #f))
  (let ((triangles-count <fx+> #f)
        (content <f32vector+> #f)
        (neighbors <f32vector+> #f)
        (lightmap <f32vector+> #f)
        (n <fx> 0)
        (m <fx> 0)
        (smooth-normals (and smooth-normals? (make-table test: vertex=? hash: vertex-hash)))
        (faces (and return-faces? (new-queue))))
    (define (setup triangles <fx> quads <fx>)
      (unless return-faces?
        (set! triangles-count (+ triangles (* quads 2)))
        (allege triangles-count
          (set! content (make-f32vector (* triangles-count triangle-floats)))
          (when neighbors?
            (set! neighbors (make-f32vector (* triangles-count triangle-neighbors-floats))))
          (set! lightmap (make-f32vector (* triangles-count triangle-lightmap-floats) 0.)))))
    
    (define (add-triangle v1 <vertex> n1 s1 <fx> t1 <fx> b1 <fx> v2 <vertex> n2 s2 <fx> t2 <fx> b2 <fx> v3 <vertex> n3 s3 <fx> t3 <fx> b3 <fx> uv <f32vector> tdepth)
      (let ((v1 (transform v1))
            (v2 (transform v2))
            (v3 (transform v3)))
        (add
          v1 n1 s1 t1 b1
          v2 n2 s2 t2 b2
          v3 n3 s3 t3 b3
          uv
          tdepth)))
    
    (define (add-quad v1 <vertex> n1 s1 <fx> t1 <fx> b1 <fx> v2 <vertex> n2 s2 <fx> t2 <fx> b2 <fx> v3 <vertex> n3 s3 <fx> t3 <fx> b3 <fx> v4 <vertex> n4 s4 <fx> t4 <fx> b4 <fx> uv <f32vector> tdepth)
      (let ((v1 (transform v1))
            (v2 (transform v2))
            (v3 (transform v3))
            (v4 (transform v4)))
        (add
          v1 n1 s1 t1 b1
          v2 n2 s2 t2 b2
          v3 n3 s3 t3 b3
          uv
          tdepth)
        (add
          v3 n3 s3 t3 b3
          v4 n4 s4 t4 b4
          v1 n1 s1 t1 b1
          uv
          tdepth)))
    
    (define (transform vert <vertex>) <vertex>
      (matrix+-transform-3x4 matrix vert))
    
    (define (add v1 <vertex> n1 s1 <fx> t1 <fx> b1 <fx> v2 <vertex> n2 s2 <fx> t2 <fx> b2 <fx> v3 <vertex> n3 s3 <fx> t3 <fx> b3 <fx> uv <f32vector> tdepth)
      (let ((plane-normal #f))
        (define (get-plane-normal)
          (or plane-normal (let ((normal (plane-normal-safe v1 v2 v3)))
                             (set! plane-normal normal)
                             normal)))
        
        (let ((n1 (or n1 (get-plane-normal)))
              (n2 (or n2 (get-plane-normal)))
              (n3 (or n3 (get-plane-normal))))
          (when smooth-normals?
            (allege smooth-normals
              (let ((plane-normal (get-plane-normal)))
                (define (process-vertex vert)
                  (let ((vert (if return-faces? vert (vertex-64->32 vert))))
                    (let ((smooth-normal (table-ref smooth-normals vert #f)))
                      (if (not smooth-normal)
                          (table-set! smooth-normals vert plane-normal)
                        (vertex-increase! smooth-normal plane-normal)))))
                
                (process-vertex v1)
                (process-vertex v2)
                (process-vertex v3))))
          (if return-faces?
              (enqueue faces (make-face material
                                        (f32vector (f32vector-ref uv s1) (f32vector-ref uv t1)
                                                   (f32vector-ref uv s2) (f32vector-ref uv t2)
                                                   (f32vector-ref uv s3) (f32vector-ref uv t3))
                                        tdepth
                                        (make-smooth-triangle #f v1 v2 v3 n1 n2 n3)))
            (add-vertex v1) (add-normal n1) (add-texture s1 t1 uv tdepth) (add-bone b1) (when neighbors? (add-neighbors 0. v2 v3))
            (add-vertex v2) (add-normal n2) (add-texture s2 t2 uv tdepth) (add-bone b2) (when neighbors? (add-neighbors 1. v1 v3))
            (add-vertex v3) (add-normal n3) (add-texture s3 t3 uv tdepth) (add-bone b3) (when neighbors? (add-neighbors 2. v1 v2))))))
    
    (define (add-vertex vert)
      (allege content
        (f32vector-set! content n (vertex-x vert))
        (f32vector-set! content (+ n 1) (vertex-y vert))
        (f32vector-set! content (+ n 2) (vertex-z vert))
        (set! n (+ n 3))))
    
    (define (add-normal normal)
      (allege content
        (f32vector-set! content n (vertex-x normal))
        (f32vector-set! content (+ n 1) (vertex-y normal))
        (f32vector-set! content (+ n 2) (vertex-z normal))
        (set! n (+ n 3))))
    
    (define (add-texture s <fx> t <fx> uv <f32vector> tdepth)
      (allege content
        (f32vector-set! content n (f32vector-ref uv s))
        (f32vector-set! content (+ n 1) (f32vector-ref uv t))
        (f32vector-set! content (+ n 2) tdepth)
        (set! n (+ n 3))))
    
    (define (add-bone bone <fx>)
      (allege content
        (f32vector-set! content n (cast <fl> bone))
        (set! n (+ n 1))))
    
    (define (add-neighbors rank n1 n2)
      (allege neighbors
        (f32vector-set! neighbors m rank)
        (set! m (+ m 1))
        (f32vector-set! neighbors m (vertex-x n1))
        (f32vector-set! neighbors (+ m 1) (vertex-y n1))
        (f32vector-set! neighbors (+ m 2) (vertex-z n1))
        (set! m (+ m 3))
        (f32vector-set! neighbors m (vertex-x n2))
        (f32vector-set! neighbors (+ m 1) (vertex-y n2))
        (f32vector-set! neighbors (+ m 2) (vertex-z n2))
        (set! m (+ m 3))))
    
    (generator setup add-triangle add-quad)
    (when smooth-normals?
      (allege smooth-normals
        (iterate-table smooth-normals
          (lambda (vert smooth-normal)
            (vertex-normalize! smooth-normal smooth-normal)))
        (if return-faces?
            (for-each (lambda (face <Face>)
                        (let ((triangle <Smooth-Triangle> (get-polygon face)))
                          (let ((v1 (get-v1 triangle)))
                            (let ((smooth-normal (table-ref smooth-normals v1)))
                              (set-n1 triangle smooth-normal)))
                          (let ((v2 (get-v2 triangle)))
                            (let ((smooth-normal (table-ref smooth-normals v2)))
                              (set-n2 triangle smooth-normal)))
                          (let ((v3 (get-v3 triangle)))
                            (let ((smooth-normal (table-ref smooth-normals v3)))
                              (set-n3 triangle smooth-normal)))))
                      (queue-list faces))
          (loop (for i from 0 below (allege triangles-count))
                (let ((n (* i triangle-floats)))
                  (define (smooth-vertex offset <fx>)
                    (allege content
                      (let ((vert (vertex (f32vector-ref content offset) (f32vector-ref content (+ offset 1)) (f32vector-ref content (+ offset 2)))))
                        (let ((smooth-normal (table-ref smooth-normals vert)))
                          (f32vector-set! content (+ offset 3) (vertex-x smooth-normal))
                          (f32vector-set! content (+ offset 4) (vertex-y smooth-normal))
                          (f32vector-set! content (+ offset 5) (vertex-z smooth-normal))))))
                  
                  (smooth-vertex n)
                  (smooth-vertex (+ n vertex-floats))
                  (smooth-vertex (+ n (* vertex-floats 2))))))))
    (if return-faces?
        (queue-list faces)
      (let ((mesh (new Mesh material: material)))
        (allocate-vertices mesh)
        (set-data (get-vertices-buffer mesh) content (f32vector-length (allege content)) vertex-floats)
        (when neighbors?
          (allocate-neighbors mesh)
          (set-data (get-neighbors-buffer mesh) neighbors (f32vector-length (allege neighbors)) neighbors-floats))
        (allocate-lightmap mesh)
        (set-data (get-lightmap-buffer mesh) lightmap (f32vector-length (allege lightmap)) lightmap-floats)
        (setup-array mesh)
        mesh))))


(definition public (wire-triangle triangle-proc)
  (let ((uv (f32vector 0. 0. 0. 0. 0. 0. 0. 0.))
        (depth 0.))
    (lambda (v1 v2 v3)
      (triangle-proc v1 #f 0 0 0 v2 #f 0 0 0 v3 #f 0 0 0 uv depth))))


(definition public (wire-quad quad-proc)
  (let ((uv (f32vector 0. 0. 0. 0. 0. 0. 0. 0.))
        (depth 0.))
    (lambda (v1 v2 v3 v4)
      (quad-proc v1 #f 0 0 0 v2 #f 0 0 0 v3 #f 0 0 0 v4 #f 0 0 0 uv depth))))


;;;
;;;; Mesher
;;;


(class Mesher extends Object
  
  
  (slot content   <f32vector>               getter generate)
  (slot neighbors <f32vector>               getter generate)
  (slot lightmap  <f32vector>               getter generate)
  (slot matrix    <matrix+>                 getter generate)
  (slot material  <Material>                getter generate)
  (slot reserved  <fx>         initialize 0 getter generate)
  (slot used      <fx>         initialize 0 getter generate)
  (slot vi        <fx>         initialize 0 getter generate) ;; vertices index
  (slot ni        <fx>         initialize 0 getter generate) ;; neighbors index
  (slot li        <fx>         initialize 0 getter generate) ;; lightmap index
  
  
  (method override (initialize self triangles-count <fx> quads-count <fx> (matrix: matrix #f) (material: material #f))
    (let ((triangles (+ triangles-count (* quads-count 2))))
      (set! content (make-f32vector (* triangles triangle-floats)))
      (set! neighbors (make-f32vector (* triangles triangle-neighbors-floats)))
      (set! lightmap (make-f32vector (* triangles triangle-lightmap-floats)))
      (set! reserved triangles))
    (set! self.matrix matrix)
    (set! self.material material))
  
  
  (method package (reset self)
    (set! used 0)
    (set! vi 0)
    (set! ni 0)
    (set! li 0))
  
  
  (method package (increase-used! self n <fx>)
    (increase! used n))
  
  (method package (increase-li! self n <fx>)
    (increase! li n))
  
  
  (method (maybe-grow self triangle-count <fx>)
    (define (grow vect <f32vector> new-reserved <fx> floats/triangle <fx>) <f32vector>
      (let ((new-vect (make-f32vector (* new-reserved floats/triangle))))
        (subf32vector-move! vect 0 (* used floats/triangle) new-vect 0)
        new-vect))
    
    (let ((new-used (+ used triangle-count)))
      (when (> new-used reserved)
        (let ((new-reserved (fxround (* (cast <fl> new-used) GOLDEN_GROWTH))))
          (set! content (grow content new-reserved triangle-floats))
          (set! neighbors (grow neighbors new-reserved triangle-neighbors-floats))
          (set! lightmap (grow lightmap new-reserved triangle-lightmap-floats))
          (set! reserved new-reserved)))))


  (proclaim (not generate lambda-check))
  
  
  (method package (add-template-face self x <fl> y <fl> z <fl> template <Face-Template> depth-offset <fx+> inverse?)
    (maybe-grow self (triangle-count template))
    ;; lambda-lift
    (add-template-triangles template self x y z inverse?
      (lambda (mesher <Mesher> x <fl> y <fl> z <fl> v1 <vertex> n1 <vertex> s1 <fx> t1 <fx> b1 <fx> v2 <vertex> n2 <vertex> s2 <fx> t2 <fx> b2 <fx> v3 <vertex> n3 <vertex> s3 <fx> t3 <fx> b3 <fx> uv <f32vector> tdepth <fl>)
        (increase-used! mesher 1)
        (let ((v1 (vertex+xyz& v1 x y z))
              (v2 (vertex+xyz& v2 x y z))
              (v3 (vertex+xyz& v3 x y z)))
          (add mesher
            v1 n1 s1 t1 b1
            v2 n2 s2 t2 b2
            v3 n3 s3 t3 b3
            uv
            (if depth-offset
                (+ tdepth (cast <fl> depth-offset))
              tdepth))))))
  
  
  (method (add-face self face <Face>)
    (maybe-grow self (triangle-count face))
    (add-triangles face
      (lambda (v1 <vertex> n1 <vertex> s1 <fx> t1 <fx> b1 <fx> v2 <vertex> n2 <vertex> s2 <fx> t2 <fx> b2 <fx> v3 <vertex> n3 <vertex> s3 <fx> t3 <fx> b3 <fx> uv <f32vector> tdepth <fl>)
        (increase! used 1)
        (let ((v1 (transform self v1))
              (v2 (transform self v2))
              (v3 (transform self v3)))
          (add self
            v1 n1 s1 t1 b1
            v2 n2 s2 t2 b2
            v3 n3 s3 t3 b3
            uv
            tdepth)))))
  
  
  (proclaim (default generate lambda-check))
  
  
  (method package (add-triangle self v1 <vertex> n1 <vertex> s1 <fx> t1 <fx> b1 <fx> v2 <vertex> n2 <vertex> s2 <fx> t2 <fx> b2 <fx> v3 <vertex> n3 <vertex> s3 <fx> t3 <fx> b3 <fx> uv <f32vector> tdepth <fl>)
    (increase! used 1)
    (let ((v1 (transform self v1))
          (v2 (transform self v2))
          (v3 (transform self v3)))
      (add self
        v1 n1 s1 t1 b1
        v2 n2 s2 t2 b2
        v3 n3 s3 t3 b3
        uv
        tdepth)))
  
  
  (method (add-quad self v1 <vertex> n1 <vertex> s1 <fx> t1 <fx> b1 <fx> v2 <vertex> n2 <vertex> s2 <fx> t2 <fx> b2 <fx> v3 <vertex> n3 <vertex> s3 <fx> t3 <fx> b3 <fx> v4 <vertex> n4 <vertex> s4 <fx> t4 <fx> b4 <fx> uv <f32vector> tdepth <fl>)
    (increase! used 2)
    (let ((v1 (transform self v1))
          (v2 (transform self v2))
          (v3 (transform self v3))
          (v4 (transform self v4)))
      (add self
        v1 n1 s1 t1 b1
        v2 n2 s2 t2 b2
        v3 n3 s3 t3 b3
        uv
        tdepth)
      (add self
        v3 n3 s3 t3 b3
        v4 n4 s4 t4 b4
        v1 n1 s1 t1 b1
        uv
        tdepth)))
  
  
  (method package (transform self vert <vertex>) <vertex>
    (matrix+-transform-3x4 matrix vert))
  
  
  (method package (add self v1 <vertex> n1 <vertex> s1 <fx> t1 <fx> b1 <fx> v2 <vertex> n2 <vertex> s2 <fx> t2 <fx> b2 <fx> v3 <vertex> n3 <vertex> s3 <fx> t3 <fx> b3 <fx> uv <f32vector> tdepth <fl>)
    (add-vertex self v1 n1 s1 t1 uv tdepth b1) (add-neighbors self 0. v2 v3)
    (add-vertex self v2 n2 s2 t2 uv tdepth b2) (add-neighbors self 1. v1 v3)
    (add-vertex self v3 n3 s3 t3 uv tdepth b3) (add-neighbors self 2. v1 v2))
  
  
  (method (add-vertex self vert <vertex> normal <vertex> s <fx> t <fx> uv <f32vector> tdepth <fl> bone <fx>)
    (f32vector-set! content vi (vertex-x vert))
    (f32vector-set! content (+ vi 1) (vertex-y vert))
    (f32vector-set! content (+ vi 2) (vertex-z vert))
    (f32vector-set! content (+ vi 3) (vertex-x normal))
    (f32vector-set! content (+ vi 4) (vertex-y normal))
    (f32vector-set! content (+ vi 5) (vertex-z normal))
    (f32vector-set! content (+ vi 6) (f32vector-ref uv s))
    (f32vector-set! content (+ vi 7) (f32vector-ref uv t))
    (f32vector-set! content (+ vi 8) tdepth)
    (f32vector-set! content (+ vi 9) (cast <fl> bone))
    (set! vi (+ vi 10)))
  
  
  (method (add-neighbors self rank <fl> n1 <vertex> n2 <vertex>)
    (f32vector-set! neighbors ni rank)
    (set! ni (+ ni 1))
    (f32vector-set! neighbors ni (vertex-x n1))
    (f32vector-set! neighbors (+ ni 1) (vertex-y n1))
    (f32vector-set! neighbors (+ ni 2) (vertex-z n1))
    (set! ni (+ ni 3))
    (f32vector-set! neighbors ni (vertex-x n2))
    (f32vector-set! neighbors (+ ni 1) (vertex-y n2))
    (f32vector-set! neighbors (+ ni 2) (vertex-z n2))
    (set! ni (+ ni 3)))
  
  
  (method package (get-mesh self (debuggable-mesh?: debuggable-mesh? #f)) <Mesh>
    (let ((mesh (new Mesh material: material)))
      (allocate-vertices mesh)
      (set-data (get-vertices-buffer mesh) content (* used triangle-floats) vertex-floats)
      (when (and debuggable-mesh? debug-meshes?)
        (set-vertices-data mesh content))
      (allocate-neighbors mesh)
      (set-data (get-neighbors-buffer mesh) neighbors (* used triangle-neighbors-floats) neighbors-floats)
      (allocate-lightmap mesh)
      (set-data (get-lightmap-buffer mesh) lightmap (* used triangle-lightmap-floats) lightmap-floats)
      (setup-array mesh)
      mesh)))


;;;
;;;; Faces
;;;


(definition public (generate/add-faces generator (matrix: matrix #f) (smooth-normals?: smooth-normals? #f) (material: material #f))
  (let ((zone (current-zone)))
    (let ((faces (generate-mesh generator matrix: matrix smooth-normals?: smooth-normals? material: material return-faces?: #t))
          (sectors (make-table test: eq?)))
      (for-each (lambda (face <Face>)
                  @$$$
                  (let ((sector (position-sector zone (get-center (get-polygon face)))))
                    (add-face sector face)
                    (table-set! sectors sector #t)))
                faces))))


(definition public (faces-generator faces)
  (lambda (setup-proc triangle-proc quad-proc)
    (define (count)
      (let ((triangles 0)
            (quads 0))
        (for-each (lambda (face <Face>)
                    (increase! triangles (triangle-count face)))
                  faces)
        (setup-proc triangles quads)))
    
    (count)
    (for-each (lambda (face <Face>)
                (add-triangles face triangle-proc))
              faces)))


;;;
;;;; Polygons
;;;


(definition public (polygons-extract element polygons <f64vector> matrix)
  (let ((queue (new-queue)))
    (loop (for i from 0 below (fxround/ (f64vector-length polygons) polygon-float-size))
          (let ((offset (* i polygon-float-size)))
            (let ((poly <Polygon> (if (nan? (f64vector-ref polygons (+ offset 12)))
                                      (allocate-triangle element)
                                    (allocate-quad element))))
              (polygon-extract! poly element polygons offset matrix)
              (enqueue queue poly))))
    (queue-list queue)))


(definition public (block-polygons-extract element polygons <f64vector> matrix block-id variant-id x y z)
  (let ((queue (new-queue)))
    (loop (for i from 0 below (fxround/ (f64vector-length polygons) polygon-float-size))
          (let ((offset (* i polygon-float-size)))
            (let ((poly <Polygon> (if (nan? (f64vector-ref polygons (+ offset 12)))
                                      (allocate-triangle element)
                                    (allocate-quad element))))
              (polygon-extract! poly element polygons offset matrix)
              (set-data1 poly (cast <fl> (encode-id block-id variant-id)))
              (set-data2 poly x)
              (set-data3 poly y)
              (set-data4 poly z)
              (enqueue queue poly))))
    (queue-list queue)))


(definition public (generate/add-polygons generator (element: element #f) (matrix: matrix <matrix+> #f))
  (let ((world (current-world))
        (zone (current-zone)))
    (let ((areas #f))
      (define (setup triangles quads)
        (set! areas (make-table test: eq?)))
      
      (define (add-triangle v1 n1 s1 t1 b1 v2 n2 s2 t2 b2 v3 n3 s3 t3 b3 uv tdepth)
        (add-polygon (triangle-class world) (vector v1 v2 v3)))
      
      (define (add-quad v1 n1 s1 t1 b1 v2 n2 s2 t2 b2 v3 n3 s3 t3 b3 v4 n4 s4 t4 b4 uv tdepth)
        (add-polygon (quad-class world) (vector v1 v2 v3 v4)))
      
      (define (add-polygon class vertices)
        (define (transform vertex <vertex>)
          (matrix+-transform-3x4 matrix vertex))
        
        (let ((vertices vertices))
          (let ((polygon <Polygon> (new class element vertices)))
            (let ((center (matrix+-transform-3x4 matrix (get-center polygon))))
              (let ((area #f @CONVERT (index-area zone (position-area-index zone center) #f)))
                (table-add areas area polygon))))))
      
      (generator setup add-triangle add-quad)
      (iterate-table areas
        (lambda (area <Area> polygons)
          (add-polygons area element polygons matrix)))))))
