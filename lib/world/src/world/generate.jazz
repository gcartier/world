;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; World Generate
;;;


(module world.generate jazz


(import (jazz.geometry)
        (jazz.graphic)
        (jazz.graphic.opengl.glew)
        (jazz.io)
        (jazz.library)
        (jazz.literals)
        (jazz.media)
        (jazz.network)
        (jazz.platform)
        (jazz.platform.cairo)
        (jazz.runtime)
        (jazz.system)
        (jazz.ui)
        (jazz.ui.window)
        (time)
        (world)
        (world.area)
        (world.autoload)
        (world.geometry)
        (world.mesh)
        (world.quad)
        (world.syntax (phase syntax))
        (world.texture)
        (world.tile))


;;;
;;;; Mesh
;;;


(definition public (generate-mesh generator uv (matrix: matrix #f) (material: material #f))
  (let ((floats-per-indice 10)
        (triangles-count #f)
        (triangle-floats #f)
        (content #f)
        (n 0))
    (define (setup triangles quads)
      (set! triangles-count (+ triangles (* quads 2)))
      (set! triangle-floats (* 3 floats-per-indice))
      (set! content (make-f32vector (* triangles-count triangle-floats))))
    
    (define (add-triangle v1 v2 v3 t1u t1v t2u t2v t3u t3v tdepth)
      (add
        v1 v2 v3
        t1u t1v t2u t2v t3u t3v
        tdepth))
    
    (define (add-quad v1 v2 v3 v4 t1u t1v t2u t2v t3u t3v t4u t4v tdepth)
      (add
        v1 v2 v3
        t1u t1v t2u t2v t3u t3v
        tdepth)
      (add
        v3 v4 v1
        t3u t3v t4u t4v t1u t1v
        tdepth))
    
    (define (add v1 v2 v3 t1u t1v t2u t2v t3u t3v tdepth)
      (let ((normal (plane-normal-safe v1 v2 v3)))
        (add-vertex v1) (add-normal normal) (add-texture t1u t1v tdepth) (add-bone)
        (add-vertex v2) (add-normal normal) (add-texture t2u t2v tdepth) (add-bone)
        (add-vertex v3) (add-normal normal) (add-texture t3u t3v tdepth) (add-bone)))
    
    (define (add-vertex vert)
      (f32vector-set! content n (vertex-x vert))
      (f32vector-set! content (+ n 1) (vertex-y vert))
      (f32vector-set! content (+ n 2) (vertex-z vert))
      (set! n (+ n 3)))
    
    (define (add-normal normal)
      (f32vector-set! content n (vertex-x normal))
      (f32vector-set! content (+ n 1) (vertex-y normal))
      (f32vector-set! content (+ n 2) (vertex-z normal))
      (set! n (+ n 3)))
    
    (define (add-texture tu tv tdepth)
      (f32vector-set! content n tu)
      (f32vector-set! content (+ n 1) tv)
      (f32vector-set! content (+ n 2) tdepth)
      (set! n (+ n 3)))
    
    (define (add-bone)
      (f32vector-set! content n 0.)
      (set! n (+ n 1)))
    
    (generator uv setup add-triangle add-quad)
    (let ((mesh (new Mesh material: material)))
      (allocate-vertices~ mesh)
      (set-data~ (get-vertices-buffer~ mesh) content floats-per-indice)
      mesh)))


;;;
;;;; Polygons
;;;


(definition public (generate-polygons generator uv (matrix: matrix #f))
  (let ((world (current-world))
        (zone (current-zone))
        (areas #f))
    (define (setup triangles quads)
      (set! areas (make-table test: eq?)))
    
    (define (add-triangle v1 v2 v3 t1u t1v t2u t2v t3u t3v tdepth)
      (add-polygon (triangle-class~ world) (vector v3 v2 v1)))
    
    (define (add-quad v1 v2 v3 v4 t1u t1v t2u t2v t3u t3v t4u t4v tdepth)
      (add-polygon (quad-class~ world) (vector v4 v3 v2 v1)))
    
    (define (add-polygon class vertices)
      (define (transform vertex)
        (matrix-transform-3x4 matrix vertex))
      
      (let ((vertices (vector-map transform vertices)))
        (let ((polygon (new class #f vertices)))
          (let ((center (get-center~ polygon)))
            (let ((area (index-area~ zone (position-area-index~ zone center) #f)))
              (table-add areas area polygon))))))
    
    (generator uv setup add-triangle add-quad)
    (iterate-table areas
      (lambda (area <Area> polygons)
        (add-polygons~ area #f polygons))))))
