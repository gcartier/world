;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; World Generate
;;;


(module world.generate jazz


(import (jazz.geometry)
        (jazz.graphic)
        (jazz.graphic.opengl.glew)
        (jazz.io)
        (jazz.library)
        (jazz.literals)
        (jazz.media)
        (jazz.network)
        (jazz.platform)
        (jazz.platform.cairo)
        (jazz.runtime)
        (jazz.system)
        (jazz.ui)
        (jazz.ui.window)
        (time)
        (world)
        (world.geometry)
        (world.mesh))


(definition public (generate-sphere slices stacks (material: material #f))
  (let ((dphi (/ 360. slices))
        (dtheta (/ 180. stacks)))
    (define (count-sphere)
      (let ((count 0))
        (loop (for theta <fl> from -90. to (- 90. dtheta) by dtheta)
              (loop (for phi <fl> from 0. to (- 360. dphi) by dphi)
                    (if (and (> theta -90.) (< theta 90.))
                        (increase! count 2)
                      (increase! count))))
        count))
    
    (let ((mesh (new Mesh material: material))
          (triangles-count (count-sphere))
          (triangle-floats (* 3 3 3))
          (DTOR (/ PI*2 360.)))
      (let ((content (make-f32vector (* triangles-count triangle-floats)))
            (n 0))
        (define (add-triangle v1 v2 v3)
          (add v1 (vertex 0. 1. 1.)
            v2 (vertex 1. 1. 1.)
            v3 (vertex 1. 0. 1.)))
        
        (define (add-quad v1 v2 v3 v4)
          (add v1 (vertex 0. 1. 1.)
            v2 (vertex 1. 1. 1.)
            v3 (vertex 1. 0. 1.))
          (add v3 (vertex 1. 0. 1.)
            v4 (vertex 0. 0. 1.) 
            v1 (vertex 0. 1. 1.)))
        
        (define (add v1 t1 v2 t2 v3 t3)
          (let ((normal (plane-normal v1 v2 v3)))
            (add-vertex v1) (add-texture t1) (add-normal normal)
            (add-vertex v2) (add-texture t2) (add-normal normal)
            (add-vertex v3) (add-texture t3) (add-normal normal)))
        
        (define (add-vertex vert)
          (f32vector-set! content n (vertex-x vert))
          (f32vector-set! content (+ n 1) (vertex-y vert))
          (f32vector-set! content (+ n 2) (vertex-z vert))
          (set! n (+ n 3)))
        
        (define (add-texture tex)
          (f32vector-set! content n (vertex-x tex))
          (f32vector-set! content (+ n 1) (vertex-y tex))
          (f32vector-set! content (+ n 2) 0.)
          (set! n (+ n 3)))
        
        (define (add-normal normal)
          (f32vector-set! content n (vertex-x normal))
          (f32vector-set! content (+ n 1) (vertex-y normal))
          (f32vector-set! content (+ n 2) (vertex-z normal))
          (set! n (+ n 3)))
        
        (loop (for theta <fl> from -90. to (- 90. dtheta) by dtheta)
              (loop (for phi <fl> from 0. to (- 360. dphi) by dphi)
                    @pacman (for phi <fl> from (* dphi 4) to (- 360. dphi) by dphi)
                    (let ((v1 (vertex  (* (cos (* theta DTOR)) (cos (* phi DTOR)))
                                       (* (cos (* theta DTOR)) (sin (* phi DTOR)))
                                       (sin (* theta DTOR))))
                          (v2 (vertex (* (cos (* (+ theta dtheta) DTOR)) (cos (* phi DTOR)))
                                      (* (cos (* (+ theta dtheta) DTOR)) (sin (* phi DTOR)))
                                      (sin (* (+ theta dtheta) DTOR))))
                          (v3 (vertex (* (cos (* (+ theta dtheta) DTOR)) (cos (* (+ phi dphi) DTOR)))
                                      (* (cos (* (+ theta dtheta) DTOR)) (sin (* (+ phi dphi) DTOR)))
                                      (sin (* (+ theta dtheta) DTOR))))
                          (v4 (when (and (> theta -90.) (< theta 90.))
                                (vertex (* (cos (* theta DTOR)) (cos (* (+ phi dphi) DTOR)))
                                        (* (cos (* theta DTOR)) (sin (* (+ phi dphi) DTOR)))
                                        (sin (* theta DTOR))))))
                      (if v4
                          (add-quad v1 v2 v3 v4)
                        (add-triangle v1 v2 v3)))))
        (allocate-vertices~ mesh)
        (set-data~ (get-vertices-buffer~ mesh) content 9)
        mesh)))))
