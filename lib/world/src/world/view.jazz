;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; View Entities
;;;


(module world.view jazz


(import (jazz.geometry)
        (jazz.graphic)
        (jazz.graphic.opengl.glew)
        (jazz.io)
        (jazz.jml)
        (jazz.library)
        (jazz.literals)
        (jazz.media)
        (jazz.network)
        (jazz.platform)
        (jazz.platform.cairo)
        (jazz.runtime)
        (jazz.system)
        (jazz.ui)
        (jazz.ui.dialog)
        (jazz.ui.window)
        (time)
        (world)
        (world.autoload)
        (world.element)
        (world.entity)
        (world.foreign)
        (world.geometry)
        (world.interface)
        (world.interface.bindings)
        (world.texture))


;;;
;;;; View-Quad
;;;


(class View-Quad extends Entity
  
  
  (property view      initialize #f accessors generate)
  (property modified? initialize #f accessors generate)
  
  
  (method override (prepare rest)
    (nextmethod rest)
    (set! texture (make-cairo-texture 866 588))
    (set! modified? #t))
  
  
  (method override (draw)
    (when view
      (let ((offscreen (get-offscreen~ view #f)))
        (when modified?
          (set-clipper~ offscreen {Rect 0 0 866 588})
          (fill-rect~ offscreen {Rect 0 0 866 588} {Color Black})
          (paint-drawing~ view offscreen '())
          (blit-surface~ (get-surface~ texture) offscreen)
          (map-texture~ texture)
          (set! modified? #f))
        (glPushMatrix)
        (glMultMatrixf* matrix)
        (textured-quad~ texture
          (lambda () (glVertex3f 0.0 0.0 0.0))
          (lambda () (glVertex3f 1.0 0.0 0.0))
          (lambda () (glVertex3f 1.0 1.0 0.0))
          (lambda () (glVertex3f 0.0 1.0 0.0)))
        (glPopMatrix)))))


;;;
;;;; View-Cube
;;;


(class View-Cube extends Entity
  
  
  (form
    (<install>
      (<View-Quad> name: left   x: 0. y: 0. z: 0.)
      (<View-Quad> name: right  x: 0. y: 0. z: 0.)
      (<View-Quad> name: bottom x: 0. y: 0. z: 0.)
      (<View-Quad> name: top    x: 0. y: 0. z: 0.)
      (<View-Quad> name: back   x: 0. y: 0. z: 0.)
      (<View-Quad> name: front  x: 0. y: 0. z: 0.)))
  
  
  (method override (finish rest)
    (nextmethod rest)
    (set! matrix (make-scaling-matrix 10. 10. 10.))
    (set-view~ (locate 'left)   (get-root~ (get-toplevel)))
    (set-view~ (locate 'right)  (get-root~ (get-toplevel)))
    (set-view~ (locate 'bottom) (get-root~ (get-toplevel)))
    (set-view~ (locate 'top)    (get-root~ (get-toplevel)))
    (set-view~ (locate 'back)   (get-root~ (get-toplevel)))
    (set-view~ (locate 'front)  (let ((view (new World-Bindings-Viewer size: {Dimension 866 588} offscreen?: #t title: "Hello world!")))
                                  (set-player~ view (get-toplevel))
                                  view))
    (set-matrix~ (locate 'left)   (make-y-rotation-matrix PI/2))
    (set-matrix~ (locate 'right)  (matrix-multiply (make-translation-matrix 1. 0. 1.) (make-y-rotation-matrix (- PI/2))))
    (set-matrix~ (locate 'bottom) (make-x-rotation-matrix (- PI/2)))
    (set-matrix~ (locate 'top)    (matrix-multiply (make-translation-matrix 0. 1. 1.) (make-x-rotation-matrix PI/2)))
    (set-matrix~ (locate 'back)   (matrix-multiply (make-translation-matrix 1. 0. 0.) (make-y-rotation-matrix PI)))
    (set-matrix~ (locate 'front)  (make-translation-matrix 0. 0. 1.)))
  
  
  (method override (draw)
    (glPushMatrix)
    (glMultMatrixf* matrix)
    (for-each draw~ children)
    (glPopMatrix))))
