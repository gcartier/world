;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; View Entities
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is WorldScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2014
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See http://github.com/gcartier/world for details.


(module world.view jazz


(import (jazz.geometry)
        (jazz.graphic)
        (jazz.graphic.opengl.glew)
        (jazz.jml)
        (jazz.system)
        (world.entity)
        (world.foreign)
        (world.geometry)
        (world.interface.bindings)
        (world.syntax (phase syntax))
        (world.texture))


;;;
;;;; View-Quad
;;;


(class View-Quad extends Entity
  
  
  (property view      initialize #f accessors generate)
  (property modified? initialize #f accessors generate)
  
  
  (slot texture initialize #f getter generate)
  
  
  (method override (prepare rest)
    (nextmethod rest)
    (set! texture (make-cairo-texture 866 588))
    (set! modified? #t))
  
  
  (method override (draw)
    (when view
      (let ((offscreen (get-offscreen~ view #f)))
        (when modified?
          (set-clipper~ offscreen {Rect 0 0 866 588})
          (fill-rect~ offscreen {Rect 0 0 866 588} {Color Black})
          (paint-drawing~ view offscreen '())
          (blit-surface~ (get-surface~ texture) offscreen)
          (map-texture~ texture)
          (set! modified? #f))
        (glPushMatrix)
        (glMultMatrixd* matrix)
        (textured-quad~ texture
          (lambda () (glVertex3f 0.0 0.0 0.0))
          (lambda () (glVertex3f 1.0 0.0 0.0))
          (lambda () (glVertex3f 1.0 1.0 0.0))
          (lambda () (glVertex3f 0.0 1.0 0.0)))
        (glPopMatrix)))))


;;;
;;;; View-Cube
;;;


(class View-Cube extends Entity
  
  
  (form
    (<install>
      (<View-Quad> name: left)
      (<View-Quad> name: right)
      (<View-Quad> name: bottom)
      (<View-Quad> name: top)
      (<View-Quad> name: back)
      (<View-Quad> name: front)))
  
  
  (method override (finish rest)
    (nextmethod rest)
    (make-scaling-matrix! matrix (vertex 2. 2. 2.))
    (set-view~ (locate 'left)   (get-root~ (get-toplevel)))
    (set-view~ (locate 'right)  (get-root~ (get-toplevel)))
    (set-view~ (locate 'bottom) (get-root~ (get-toplevel)))
    (set-view~ (locate 'top)    (get-root~ (get-toplevel)))
    (set-view~ (locate 'back)   (get-root~ (get-toplevel)))
    (set-view~ (locate 'front)  (let ((view (new World-Bindings-Viewer size: {Dimension 866 588} offscreen?: #t title: "Hello world!")))
                                  (set-player~ view (get-toplevel))
                                  view))
    (set-matrix~ (locate 'left)   (make-y-rotation-matrix& PI/2))
    (set-matrix~ (locate 'right)  (matrix-multiply& (make-translation-matrix& (vertex& 1. 0. 1.)) (make-y-rotation-matrix& (- PI/2))))
    (set-matrix~ (locate 'bottom) (make-x-rotation-matrix& (- PI/2)))
    (set-matrix~ (locate 'top)    (matrix-multiply& (make-translation-matrix& (vertex& 0. 1. 1.)) (make-x-rotation-matrix& PI/2)))
    (set-matrix~ (locate 'back)   (matrix-multiply& (make-translation-matrix& (vertex& 1. 0. 0.)) (make-y-rotation-matrix& PI)))
    (set-matrix~ (locate 'front)  (make-translation-matrix& (vertex& 0. 0. 1.))))
  
  
  (method override (draw)
    (glPushMatrix)
    (glMultMatrixd* matrix)
    (for-each draw~ children)
    (glPopMatrix))))
