;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; View Entities
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.view jazz


(import (jazz.application)
        (jazz.geometry)
        (jazz.markup)
        (jazz.view)
        (world)
        (world.entity)
        (world.geometry)
        (world.interface.bindings)
        (world.texture))


;;;
;;;; View-Quad
;;;


(class View-Quad extends Entity
  
  
  (property view      initialize #f accessors generate)
  (property modified? initialize #f accessors generate)
  
  
  (slot texture initialize #f getter generate)
  
  
  (method override (prepare self rest)
    (nextmethod self rest)
    (set! texture (make-cairo-texture 866 588))
    (set! modified? #t))
  
  
  (method override (render self)
    @convert
    (when view
      (let ((offscreen (get-offscreen view #f)))
        (when modified?
          (set-clipper offscreen {Rect 0 0 866 588})
          (fill-rect offscreen {Rect 0 0 866 588} {Color Black})
          (paint-drawing view offscreen '())
          (blit-surface (get-surface texture) offscreen)
          (flush surface)
          (map-texture texture)
          (set! modified? #f))
        (glPushMatrix)
        (glMultMatrixd* matrix)
        (textured-quad texture
          (lambda () (glVertex3f 0.0 0.0 0.0))
          (lambda () (glVertex3f 1.0 0.0 0.0))
          (lambda () (glVertex3f 1.0 1.0 0.0))
          (lambda () (glVertex3f 0.0 1.0 0.0)))
        (glPopMatrix)))))


;;;
;;;; View-Cube
;;;


(class View-Cube extends Entity
  
  
  (form
    (<install>
      (<View-Quad> name: left)
      (<View-Quad> name: right)
      (<View-Quad> name: bottom)
      (<View-Quad> name: top)
      (<View-Quad> name: back)
      (<View-Quad> name: front)))
  
  
  (method override (finish self rest)
    (nextmethod self rest)
    (make-scaling-matrix! matrix (vertex 2. 2. 2.))
    (set-view (locate self 'left)   (get-root (current-toplevel)))
    (set-view (locate self 'right)  (get-root (current-toplevel)))
    (set-view (locate self 'bottom) (get-root (current-toplevel)))
    (set-view (locate self 'top)    (get-root (current-toplevel)))
    (set-view (locate self 'back)   (get-root (current-toplevel)))
    (set-view (locate self 'front)  (let ((view (new World-Bindings-Viewer size: {Dimension 866 588} offscreen?: #t title: "Hello world!")))
                                  (set-player view (current-toplevel))
                                  view))
    (set-matrix (locate self 'left)   (make-y-rotation-matrix& PI/2))
    (set-matrix (locate self 'right)  (matrix-multiply& (make-translation-matrix& (vertex& 1. 0. 1.)) (make-y-rotation-matrix& (- PI/2))))
    (set-matrix (locate self 'bottom) (make-x-rotation-matrix& (- PI/2)))
    (set-matrix (locate self 'top)    (matrix-multiply& (make-translation-matrix& (vertex& 0. 1. 1.)) (make-x-rotation-matrix& PI/2)))
    (set-matrix (locate self 'back)   (matrix-multiply& (make-translation-matrix& (vertex& 1. 0. 0.)) (make-y-rotation-matrix& PI)))
    (set-matrix (locate self 'front)  (make-translation-matrix& (vertex& 0. 0. 1.))))
  
  
  (method override (render self)
    @convert (
    (glPushMatrix)
    (glMultMatrixd* matrix)
    (for-each render~ children)
    (glPopMatrix)))))
