;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Generation Vegetation
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;    Edouard Hebert


(module world.generation.vegetation jazz


(import (jazz.audio)
        (jazz.geometry)
        (jazz.graphic)
        (jazz.io)
        (jazz.json)
        (world)
        (world.autoload)
        (world.biome)
        (world.context)
        (world.generation)
        (world.generation.base)
        (world.generation.block)
        (world.generation.categories)
        (world.generation.model)
        (world.generation.rendering)
        (world.geometry)
        (world.index)
        (world.interface.inventory)
        (world.interface.sign)
        (world.quad)
        (world.quad-texture)
        (world.sound)
        (world.syntax (phase syntax))
        (world.tag)
        (world.texture))


(define-block Sapling
  6
  category: plants
  kind: vegetation
  generic?: #t
  variant-mask: #b111
  rendering: transparent-rendering
  opaque-cube?: #f
  cube?: #f
  physical?: #f
  ambient?: #t
  present: 'texture
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (add-cross-faces what i j k x y z uv lighting rendering category block-id variant-id add-face)))

(define-block OakSapling
  (6 0)
  texture: "sapling_oak")

(define-block SpruceSapling
  (6 1)
  texture: "sapling_spruce")

(define-block BirchSapling
  (6 2)
  texture: "sapling_birch")

(define-block JungleSapling
  (6 3)
  texture: "sapling_jungle")

(define-block AcaciaSapling
  (6 4)
  texture: "sapling_acacia")

(define-block DarkOakSapling
  (6 5)
  texture: "sapling_roofed_oak")


(define-block Leaves
  18
  category: plants
  kind: leaves
  generic?: #t
  variant-mask: #b11
  rendering: transparent-rendering
  opaque-cube?: #f
  translucent-cube?: #t
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (add-cube-faces what i j k x y z uv lighting rendering category block-id variant-id add-face)))

(define-block OakLeaves
  (18 0)
  texture: "leaves_oak_green")

(define-block SpruceLeaves
  (18 1)
  texture: "leaves_spruce_green")

(define-block BirchLeaves
  (18 2)
  texture: "leaves_birch_green")

(define-block JungleLeaves
  (18 3)
  texture: "leaves_jungle_green")


(define-block TallGrass
  31
  category: plants
  kind: vegetation
  texture: "tallgrass_green"
  rendering: transparent-rendering
  opaque-cube?: #f
  cube?: #f
  physical?: #f
  ambient?: #t
  present: "tallgrass_green")


(define-block DeadBush
  32
  category: plants
  kind: vegetation
  texture: "deadbush"
  rendering: transparent-rendering
  opaque-cube?: #f
  cube?: #f
  physical?: #f
  ambient?: #t
  present: 'texture)


(define-block Dandelion
  37
  category: plants
  kind: vegetation
  texture: "flower_dandelion"
  rendering: transparent-rendering
  opaque-cube?: #f
  cube?: #f
  physical?: #f
  ambient?: #t
  present: 'texture)


(define-block Rose
  38
  category: plants
  kind: vegetation
  texture: "flower_rose"
  rendering: transparent-rendering
  opaque-cube?: #f
  cube?: #f
  physical?: #f
  ambient?: #t
  present: 'texture)


(define-block BrownMushroom
  39
  category: plants
  kind: vegetation
  texture: "mushroom_brown"
  rendering: transparent-rendering
  physical?: #f
  cube?: #f
  opaque-cube?: #f
  ambient?: #t
  present: 'texture)


(define-block RedMushroom
  40
  category: plants
  kind: vegetation
  texture: "mushroom_red"
  rendering: transparent-rendering
  physical?: #f
  cube?: #f
  opaque-cube?: #f
  ambient?: #t
  present: 'texture)


(define-block WheatCrops
  59
  category: plants
  kind: vegetation
  texture: "wheat_stage_7"
  rendering: transparent-rendering
  opaque-cube?: #f
  cube?: #f
  physical?: #f
  ambient?: #t
  present: 'texture)


(define-block SugarCane
  83
  category: plants
  kind: vegetation
  texture: "reeds"
  rendering: transparent-rendering
  opaque-cube?: #f
  cube?: #f
  physical?: #f
  ambient?: #t
  present: 'texture)


(define-block PumpkinStem
  104
  category: plants
  kind: vegetation
  texture: "pumpkin_stem_disconnected_ochre"
  rendering: transparent-rendering
  opaque-cube?: #f
  cube?: #f
  physical?: #f
  ambient?: #t
  present: "pumpkin_stem_disconnected_ochre"
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (add-cross-faces what i j k x y z uv lighting rendering category block-id variant-id add-face)))


(define-block MelonStem
  105
  category: waiting ;; no need for two stems
  kind: vegetation
  texture: "melon_stem_disconnected_ochre"
  rendering: transparent-rendering
  opaque-cube?: #f
  cube?: #f
  physical?: #f
  ambient?: #t
  present: "melon_stem_disconnected_ochre"
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (add-cross-faces what i j k x y z uv lighting rendering category block-id variant-id add-face)))


(define-block Vines
  106
  category: plants
  kind: vegetation
  texture: "vine_green"
  rendering: transparent-rendering
  opaque-cube?: #f
  cube?: #f
  physical?: #f
  ambient?: #t
  present: "vine_green"
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (add-transparent what block-id variant-id data-id 2 8 4 1 i j k x y z uv lighting rendering category add-face))
  visual: add-data-visual
  physical: add-data-physical)


(define-block LilyPad
  111
  category: plants
  kind: vegetation
  texture: "waterlily_green"
  rendering: transparent-rendering
  opaque-cube?: #f
  cube?: #f
  ambient?: #t
  present: 'texture
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (add-bottom what i j k x y z uv generic-coordinates lighting rendering category block-id variant-id add-face)))


;; improve
(define-block NetherWart
  115
  category: plants
  kind: vegetation
  texture: "nether_wart_stage_1"
  rendering: transparent-rendering
  opaque-cube?: #f
  cube?: #f
  ambient?: #t
  present: 'texture)


(define-block Leaves2
  161
  category: plants
  kind: leaves
  generic?: #t
  variant-mask: #b11
  rendering: transparent-rendering
  opaque-cube?: #f
  translucent-cube?: #t
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (add-cube-faces what i j k x y z uv lighting rendering category block-id variant-id add-face)))

(define-block AcaciaLeaves
  (161 0)
  texture: "leaves_acacia_green")

(define-block DarkOakLeaves
  (161 1)
  texture: "leaves_big_oak_green")


(define-block DoublePlant
  175
  category: plants
  kind: vegetation
  generic?: #t
  variant-mask: #b111
  rendering: transparent-rendering
  cube?: #f
  opaque-cube?: #f
  physical?: #f
  ambient?: #t
  present: 'texture
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (let ((uv (if (bit-set? 3 data-id)
                            uv
                          (cache-coordinates (case (bitwise-and data-id #b111)
                                             ((0) "double_plant_sunflower_bottom")
                                             ((1) "double_plant_syringa_bottom")
                                             ((2) "double_plant_grass_bottom_green")
                                             ((3) "double_plant_fern_bottom_green")
                                             ((4) "double_plant_rose_bottom")
                                             (else "double_plant_paeonia_bottom"))))))
                (add-cross-faces what i j k x y z uv lighting rendering category block-id variant-id add-face))))

(define-block DoublePlantSunflower
  (175 0)
  texture: "double_plant_sunflower_top")

(define-block DoublePlantLilac
  (175 1)
  texture: "double_plant_syringa_top")

(define-block DoubleTallGrass
  (175 2)
  texture: "double_plant_grass_top_green")

(define-block DoubleFern
  (175 3)
  texture: "double_plant_fern_top_green")

(define-block DoublePlantRose
  (175 4)
  texture: "double_plant_rose_top")

(define-block DoublePlantPeony
  (175 5)
  texture: "double_plant_paeonia_top"))
