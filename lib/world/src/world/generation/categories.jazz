;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Generation Categories
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2016
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;    Edouard Hebert


(module world.generation.categories jazz


(import (world.syntax (phase syntax)))


;;;
;;;; Category
;;;


(class Block-Category extends Object
  
  
  (slot name    getter generate)
  (slot rank    getter generate)
  (slot texture getter generate)
  
  
  (method override (initialize name rank texture)
    (set! name~self name)
    (set! rank~self rank)
    (set! texture~self texture))
  
  
  (method override (print output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{a}" name)))))


(definition package block-categories
  (make-table test: eq?))

(definition (register-block-category name (rank: rank #f) (texture: texture #f))
  (let ((category (new Block-Category name rank texture)))
    (table-set! block-categories name category)
    category))


(definition public (name->block-category name)
  (table-ref block-categories name))


(define-block-category building       rank:  0 texture: 405)
(define-block-category wood           rank:  1 texture: 280)
(define-block-category decoration     rank:  2 texture: 355)
(define-block-category plants         rank:  3 texture: 338)
(define-block-category wool           rank:  4 texture: 399)
(define-block-category redstone       rank:  5 texture: 331)
(define-block-category invalid        rank:  7 texture: 377)
(define-block-category waiting        rank:  8 texture: 289)
(define-block-category sloped         rank:  9 texture: 265)


;;;
;;;; Kind
;;;


(class Block-Kind extends Object
  
  
  (slot name getter generate)
  (slot rank getter generate)
  
  
  (method override (initialize name rank)
    (set! name~self name)
    (set! rank~self rank))
  
  
  (method override (print output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{a}" name)))))


(definition package block-kinds
  (make-table test: eq?))

(definition (register-block-kind name (rank: rank #f))
  (let ((kind (new Block-Kind name rank)))
    (table-set! block-kinds name kind)
    kind))


(definition public (name->block-kind name)
  (table-ref block-kinds name))


;; building
(define-block-kind cube           rank: 0)
(define-block-kind slab           rank: 1)
(define-block-kind stairs         rank: 2)
(define-block-kind snow           rank: 4)
(define-block-kind ice            rank: 5)
(define-block-kind ore            rank: 6)

;; wood
(define-block-kind bark           rank: -1)

;; decoration
(define-block-kind torch          rank: 0)
(define-block-kind fire           rank: 1)
(define-block-kind web            rank: 2)
(define-block-kind vegetation     rank: 3)
(define-block-kind leaves         rank: 4)
(define-block-kind veggieblock    rank: 5)
(define-block-kind liquid         rank: 6)
(define-block-kind glass          rank: 7)
(define-block-kind signs          rank: 8)
(define-block-kind fence          rank: 9)
(define-block-kind bars           rank: 10)
(define-block-kind ladder         rank: 11)
(define-block-kind transportation rank: 12)
(define-block-kind portal         rank: 13)
(define-block-kind cake           rank: 14)

;; redstone
(define-block-kind power          rank: 0)
(define-block-kind redstonetorch  rank: 1)
(define-block-kind transmission   rank: 2)
(define-block-kind mechanism      rank: 3))
