;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Generation Redstone
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;    Edouard Hebert


(module world.generation.redstone jazz


(import (jazz.audio)
        (jazz.geometry)
        (jazz.graphic)
        (jazz.io)
        (jazz.json)
        (world)
        (world.autoload)
        (world.biome)
        (world.context)
        (world.generation)
        (world.generation.base)
        (world.generation.block)
        (world.generation.categories)
        (world.generation.model)
        (world.generation.rendering)
        (world.geometry)
        (world.index)
        (world.interface.inventory)
        (world.interface.sign)
        (world.quad)
        (world.quad-texture)
        (world.sound)
        (world.syntax (phase syntax))
        (world.tag)
        (world.texture))


(define-block Dispenser
  23
  category: waiting ;; redstone
  texture: "dispenser_front_vertical"
  opaque-cube?: #f
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (let ((key (string-append
                           "facing="
                           (case (bitwise-and data-id #b111)
                             ((0) "down")
                             ((1) "up")
                             ((2) "north")
                             ((3) "south")
                             ((4) "west")
                             (else "east")))))
                (with-block-state "dispenser.json" key
                  (lambda (model rotation-y rotation-x)
                    (add-json-model what model block-id variant-id data-id i j k x y z uv lighting rendering category add-face add-cube block-ref data-ref rotation-y rotation-x)))))
  visual: add-data-visual
  physical: add-data-physical)


(define-block NoteBlock
  25
  category: waiting ;; redstone
  kind: mechanism
  texture: "noteblock")


(define-block StickyPiston
  29
  category: redstone
  kind: mechanism
  texture: "piston_side"
  opaque?: #f
  opaque-cube?: #f
  present: '(rotate-z: -90. rotate-y: -45. rotate-z: 30.)
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (let ((matrix (case (bit-set data-id 3 #f)
                              ((0) (make-x-rotation-matrix PI))
                              ((1) (make-identity-matrix))
                              ((2) (make-x-rotation-matrix PI/2))
                              ((3) (make-x-rotation-matrix (- PI/2)))
                              ((4) (make-z-rotation-matrix (- PI/2)))
                              ((5) (make-z-rotation-matrix PI/2)))))
                (let ((left (- block-radius))
                      (right block-radius)
                      (bottom (- block-radius))
                      (top (if (bit-set? 3 data-id)
                               4m
                             block-radius))
                      (back (- block-radius))
                      (front block-radius)
                      (side-uv (if (bit-set? 3 data-id)
                                   (uv-rect uv 0. 4m 1. 1.)
                                 uv))
                      (top-uv (if (bit-set? 3 data-id)
                                  (cache-coordinates "piston_inner")
                                (cache-coordinates "piston_top_sticky")))
                      (bottom-uv (cache-coordinates "piston_bottom")))
                  (add-face (left-generic   what i j k x y z left right bottom top back front side-uv   generic-coordinates lighting rendering block-id variant-id matrix) rendering category)
                  (add-face (right-generic  what i j k x y z left right bottom top back front side-uv   generic-coordinates lighting rendering block-id variant-id matrix) rendering category)
                  (add-face (bottom-generic what i j k x y z left right bottom top back front bottom-uv generic-coordinates lighting rendering block-id variant-id matrix) rendering category)
                  (add-face (top-generic    what i j k x y z left right bottom top back front top-uv    generic-coordinates lighting rendering block-id variant-id matrix) rendering category)
                  (add-face (back-generic   what i j k x y z left right bottom top back front side-uv   generic-coordinates lighting rendering block-id variant-id matrix) rendering category)
                  (add-face (front-generic  what i j k x y z left right bottom top back front side-uv   generic-coordinates lighting rendering block-id variant-id matrix) rendering category))))
  visual: add-data-visual
  physical: add-data-physical)


(define-block Piston
  33
  category: redstone
  kind: mechanism
  texture: "piston_side"
  opaque?: #f
  opaque-cube?: #f
  present: '(rotate-z: -90. rotate-y: -45. rotate-z: 30.)
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (let ((matrix (case (bit-set data-id 3 #f)
                              ((0) (make-x-rotation-matrix PI))
                              ((1) (make-identity-matrix))
                              ((2) (make-x-rotation-matrix PI/2))
                              ((3) (make-x-rotation-matrix (- PI/2)))
                              ((4) (make-z-rotation-matrix (- PI/2)))
                              ((5) (make-z-rotation-matrix PI/2)))))
                (let ((left (- block-radius))
                      (right block-radius)
                      (bottom (- block-radius))
                      (top (if (bit-set? 3 data-id)
                               4m
                             block-radius))
                      (back (- block-radius))
                      (front block-radius)
                      (side-uv (if (bit-set? 3 data-id)
                                   (uv-rect uv 0. 4m 1. 1.)
                                 uv))
                      (top-uv (if (bit-set? 3 data-id)
                                  (cache-coordinates "piston_inner")
                                (cache-coordinates "piston_top_normal")))
                      (bottom-uv (cache-coordinates "piston_bottom")))
                  (add-face (left-generic   what i j k x y z left right bottom top back front side-uv   generic-coordinates lighting rendering block-id variant-id matrix) rendering category)
                  (add-face (right-generic  what i j k x y z left right bottom top back front side-uv   generic-coordinates lighting rendering block-id variant-id matrix) rendering category)
                  (add-face (bottom-generic what i j k x y z left right bottom top back front bottom-uv generic-coordinates lighting rendering block-id variant-id matrix) rendering category)
                  (add-face (top-generic    what i j k x y z left right bottom top back front top-uv    generic-coordinates lighting rendering block-id variant-id matrix) rendering category)
                  (add-face (back-generic   what i j k x y z left right bottom top back front side-uv   generic-coordinates lighting rendering block-id variant-id matrix) rendering category)
                  (add-face (front-generic  what i j k x y z left right bottom top back front side-uv   generic-coordinates lighting rendering block-id variant-id matrix) rendering category))))
  visual: add-data-visual
  physical: add-data-physical)


(define-block PistonHead
  34
  category: invalid
  texture: "piston_inner"
  opaque?: #f
  opaque-cube?: #f
  cube?: #f
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (let ((matrix (case (bit-set data-id 3 #f)
                              ((0) (make-x-rotation-matrix PI))
                              ((1) (make-identity-matrix))
                              ((2) (make-x-rotation-matrix PI/2))
                              ((3) (make-x-rotation-matrix (- PI/2)))
                              ((4) (make-z-rotation-matrix (- PI/2)))
                              ((5) (make-z-rotation-matrix PI/2)))))
                (let ((left (- block-radius))
                      (right block-radius)
                      (bottom 4m)
                      (top block-radius)
                      (back (- block-radius))
                      (front block-radius)
                      (side-uv (uv-rect (cache-coordinates "piston_side") 0. 0. 1. 4m))
                      (top-uv (if (bit-set? 3 data-id)
                                  (cache-coordinates "piston_top_sticky")
                                (cache-coordinates "piston_top_normal")))
                      (stick-top 4m)
                      (stick-bottom (- 12m))
                      (margin 2m))
                  (add-face (left-generic   what i j k x y z left right bottom top back front side-uv generic-coordinates lighting rendering block-id variant-id matrix) rendering category)
                  (add-face (right-generic  what i j k x y z left right bottom top back front side-uv generic-coordinates lighting rendering block-id variant-id matrix) rendering category)
                  (add-face (bottom-generic what i j k x y z left right bottom top back front uv      generic-coordinates lighting rendering block-id variant-id matrix) rendering category)
                  (add-face (top-generic    what i j k x y z left right bottom top back front top-uv  generic-coordinates lighting rendering block-id variant-id matrix) rendering category)
                  (add-face (back-generic   what i j k x y z left right bottom top back front side-uv generic-coordinates lighting rendering block-id variant-id matrix) rendering category)
                  (add-face (front-generic  what i j k x y z left right bottom top back front side-uv generic-coordinates lighting rendering block-id variant-id matrix) rendering category)
                  (add-face (left-generic   what i j k x y z (- margin) margin stick-bottom stick-top (- margin) margin side-uv rotate-coordinates lighting rendering block-id variant-id matrix) rendering category)
                  (add-face (right-generic  what i j k x y z (- margin) margin stick-bottom stick-top (- margin) margin side-uv rotate-coordinates lighting rendering block-id variant-id matrix) rendering category)
                  (add-face (back-generic   what i j k x y z (- margin) margin stick-bottom stick-top (- margin) margin side-uv rotate-coordinates lighting rendering block-id variant-id matrix) rendering category)
                  (add-face (front-generic  what i j k x y z (- margin) margin stick-bottom stick-top (- margin) margin side-uv rotate-coordinates lighting rendering block-id variant-id matrix) rendering category))))
  visual: add-data-visual
  physical: add-data-physical)


(define-block TNT
  46
  category: redstone
  kind: mechanism
  texture: "tnt_side"
  opaque?: #f
  opaque-cube?: #f
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (add-cube what i j k x y z uv uv (cache-coordinates "tnt_bottom") (cache-coordinates "tnt_top") uv uv lighting rendering category block-id variant-id add-face)))


(define-block RedstoneWire
  55
  category: redstone
  kind: transmission
  texture: "redstone_dust_line_0"
  rendering: transparent-rendering
  opaque?: #f
  opaque-cube?: #f
  cube?: #f
  physical?: #f
  ambient?: #t
  present: "redstone_dust_line_12"
  configurations: 256
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (define (data->key data)
                (case data
                  ((0) "none")
                  ((1) "side")
                  ((2) "up")))
              
              (let ((key (string-append
                           "east="   (data->key (bitwise-and config-id #b11))
                           ",north=" (data->key (arithmetic-shift-right (bitwise-and config-id #b1100) 2))
                           ",south=" (data->key (arithmetic-shift-right (bitwise-and config-id #b110000) 4))
                           ",west="  (data->key (arithmetic-shift-right (bitwise-and config-id #b11000000) 6)))))
                (with-block-state "redstone_wire.json" key
                  (lambda (model rotation-y rotation-x)
                    (let ((data-id (if (eq? what 'model) data-id 0)))
                      (add-json-model what model block-id variant-id data-id i j k x y z uv lighting rendering category add-face add-cube block-ref data-ref rotation-y rotation-x))))))
  visual: (lambda (block-id <fx> data-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> rendering category add-template add-opaque-cube add-translucent-cube add-liquid-cube add-texture-element block-ref data-ref)
            (let ((config-id (redstone-configuration i j k block-ref data-ref))
                  (depth-offset data-id))
              (add-visual-template block-id data-id config-id i j k x y z depth-offset rendering category add-template block-ref data-ref)))
  physical: (lambda (block-id <fx> data-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> add-template add-liquid-cube block-ref data-ref)
              (let ((config-id (redstone-configuration i j k block-ref data-ref)))
                (add-physical-template block-id data-id config-id i j k x y z add-template block-ref data-ref))))


(definition (redstone-configuration i <fx> j <fx> k <fx> block-ref data-ref) <fx>
  (let ((allow-top? (not (get-cube? (id->block (block-ref i (+ j 1) k))))) ;; + Glass Beacon Slab
        (block #f))
    (define (side-connection side-i side-k)
      (set! block (block-ref side-i j side-k))
      (cond ((or (id? block RedstoneWire RedstoneTorchOn RedstoneTorchOff Lever WoodenButton StoneButton WoodenPressurePlate StonePressurePlate)
                 (and (id? (block-ref side-i (- j 1) side-k) RedstoneWire) (not (get-cube? (id->block (block-ref side-i j side-k)))))
                 (and (id? block RedstoneRepeaterBlockOn RedstoneRepeaterBlockOff) (memq? (bitwise-and (data-ref side-i j side-k) #b11) (if (= side-i i) '(0 2) '(1 3)))))
             1)
            ((and allow-top? (id? (block-ref side-i (+ j 1) side-k) RedstoneWire))
             2)
            (else
             0)))
    
    (bitwise-ior
      (side-connection (+ i 1) k)
      (arithmetic-shift-left (side-connection i (- k 1)) 2)
      (arithmetic-shift-left (side-connection i (+ k 1)) 4)
      (arithmetic-shift-left (side-connection (- i 1) k) 6))))


(define-block WoodenDoorBlock
  64
  category: redstone
  kind: mechanism
  texture: "door_wood_lower"
  rendering: transparent-rendering
  opaque?: #f
  opaque-cube?: #f
  cube?: #f
  present: '(translate-y: -14. translate-z: -0. scaling: 22.  rotate-z: 30.)
  configurations: 32
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (choose-door-model what (if (eq? what 'physical) "wooden_door_p.json" "wooden_door.json") block-id variant-id data-id config-id i j k x y z uv lighting rendering category add-face add-cube block-ref data-ref))
  visual: (lambda (block-id <fx> data-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> rendering category add-template add-opaque-cube add-translucent-cube add-liquid-cube add-texture-element block-ref data-ref)
            (let ((config-id (door-configuration i j k data-id data-ref)))
              (add-visual-template block-id data-id config-id i j k x y z #f rendering category add-template block-ref data-ref)))
  physical: (lambda (block-id <fx> data-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> add-template add-liquid-cube block-ref data-ref)
              (let ((config-id (door-configuration i j k data-id data-ref)))
                (add-physical-template block-id data-id config-id i j k x y z add-template block-ref data-ref)))
  right-mouse: (lambda (section block-id data-id i j k x y z with-field block-ref block-set! data-ref data-set! blocklight-ref blocklight-set! skylight-ref skylight-set!)
                 (let ((zone (current-zone)))
                   (updating-sections zone
                     (lambda (add-section)
                       (define (door-sound open?)
                         (play-3d-sound
                           (if open?
                               "sound/minecraft/random/door_close"
                             "sound/minecraft/random/door_open")
                           (vertex x y z)))
                       
                       (cond ((bit-set? 3 data-id)
                              (with-field i (- j 1) k
                                (lambda (section index)
                                  (let ((data (data-ref section index)))
                                    (data-set! section index (bit-set data 2 (not (bit-set? 2 data))))
                                    (add-section section)))))
                             (else
                              (with-field i j k
                                (lambda (section index)
                                  (door-sound (bit-set? 2 data-id))
                                  (data-set! section index (bit-set data-id 2 (not (bit-set? 2 data-id))))
                                  (add-section section))))))))))


(define-block Lever
  69
  category: redstone
  kind: power
  texture: "lever"
  rendering: transparent-rendering
  opaque?: #f
  opaque-cube?: #f
  cube?: #f
  physical?: #f
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (lever-model what "lever.json" block-id variant-id data-id i j k x y z uv lighting rendering category add-face add-cube block-ref data-ref))
  visual: add-data-visual
  physical: add-data-physical
  right-mouse: (lambda (section block-id data-id i j k x y z with-field block-ref block-set! data-ref data-set! blocklight-ref blocklight-set! skylight-ref skylight-set!)
                 (with-field i j k
                   (lambda (section index)
                     (updating-sections (current-zone)
                       (lambda (add-section)
                         (add-section section)
                         (data-set! section index (bit-set data-id 3 (not (bit-set? 3 data-id))))
                         (world.redstone:redstone-update section (list i j k block-id) add-section with-field block-ref block-set! data-ref data-set! blocklight-ref blocklight-set!)))))))


(definition (lever-model what filename block-id variant-id data-id i j k x y z uv lighting rendering category add-face add-cube block-ref data-ref)
  (let ((key
          (string-append
            "facing="
            (case (bitwise-and data-id #b111)
              ((0) "down_z")
              ((1) "east")
              ((2) "west")
              ((3) "south")
              ((4) "north")
              ((5) "up_x")
              ((6) "up_z")
              ((7) "down_x"))
            ",powered="
            (if (bit-set? 3 data-id)
                "false"
              "true"))))
    (with-block-state filename key
      (lambda (model rotation-y rotation-x)
        (add-json-model what model block-id variant-id data-id i j k x y z uv lighting rendering category add-face add-cube block-ref data-ref rotation-y rotation-x)))))


(define-block StonePressurePlate
  70
  category: redstone
  kind: power
  texture: "stone_slab_top"
  opaque?: #f
  opaque-cube?: #f
  cube?: #f
  physical?: #t
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (let ((left (+ (- x block-radius) 1m))
                    (right (- (+ x block-radius) 1m))
                    (bottom (- y block-radius))
                    (top (+ (- y block-radius) (/ 1m (if (bit-set? 0 data-id) 2 1))))
                    (back (+ (- z block-radius) 1m))
                    (front (- (+ z block-radius) 1m)))
                (add-face (left-face   what i j k x y z left right bottom top back front uv generic-coordinates lighting rendering block-id variant-id) rendering category)
                (add-face (right-face  what i j k x y z left right bottom top back front uv generic-coordinates lighting rendering block-id variant-id) rendering category)
                (add-face (bottom-face what i j k x y z left right bottom top back front uv generic-coordinates lighting rendering block-id variant-id) rendering category)
                (add-face (top-face    what i j k x y z left right bottom top back front uv generic-coordinates lighting rendering block-id variant-id) rendering category)
                (add-face (back-face   what i j k x y z left right bottom top back front uv generic-coordinates lighting rendering block-id variant-id) rendering category)
                (add-face (front-face  what i j k x y z left right bottom top back front uv generic-coordinates lighting rendering block-id variant-id) rendering category))))


(define-block IronDoorBlock
  71
  category: redstone
  kind: mechanism
  texture: "door_iron_lower"
  rendering: transparent-rendering
  opaque?: #f
  opaque-cube?: #f
  cube?: #f
  present: '(translate-y: -14. translate-z: -0. scaling: 22.  rotate-z: 30.)
  configurations: 32
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (choose-door-model what (if (eq? what 'physical) "iron_door_p.json" "iron_door.json") block-id variant-id data-id config-id i j k x y z uv lighting rendering category add-face add-cube block-ref data-ref))
  visual: (lambda (block-id <fx> data-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> rendering category add-template add-opaque-cube add-translucent-cube add-liquid-cube add-texture-element block-ref data-ref)
            (let ((config-id (door-configuration i j k data-id data-ref)))
              (add-visual-template block-id data-id config-id i j k x y z #f rendering category add-template block-ref data-ref)))
  physical: (lambda (block-id <fx> data-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> add-template add-liquid-cube block-ref data-ref)
              (let ((config-id (door-configuration i j k data-id data-ref)))
                (add-physical-template block-id data-id config-id i j k x y z add-template block-ref data-ref))))


(define-block WoodenPressurePlate
  72
  category: redstone
  kind: power
  texture: "planks_oak"
  opaque?: #f
  opaque-cube?: #f
  cube?: #f
  physical?: #t
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (let ((left (+ (- x block-radius) 1m))
                    (right (- (+ x block-radius) 1m))
                    (bottom (- y block-radius))
                    (top (+ (- y block-radius) (/ 1m (if (bit-set? 0 data-id) 2 1))))
                    (back (+ (- z block-radius) 1m))
                    (front (- (+ z block-radius) 1m)))
                (add-face (left-face   what i j k x y z left right bottom top back front uv generic-coordinates lighting rendering block-id variant-id) rendering category)
                (add-face (right-face  what i j k x y z left right bottom top back front uv generic-coordinates lighting rendering block-id variant-id) rendering category)
                (add-face (bottom-face what i j k x y z left right bottom top back front uv generic-coordinates lighting rendering block-id variant-id) rendering category)
                (add-face (top-face    what i j k x y z left right bottom top back front uv generic-coordinates lighting rendering block-id variant-id) rendering category)
                (add-face (back-face   what i j k x y z left right bottom top back front uv generic-coordinates lighting rendering block-id variant-id) rendering category)
                (add-face (front-face  what i j k x y z left right bottom top back front uv generic-coordinates lighting rendering block-id variant-id) rendering category))))


(define-block RedstoneTorchOff
  75
  category: invalid
  texture: "redstone_torch_off"
  rendering: transparent-rendering
  opaque?: #f
  opaque-cube?: #f
  cube?: #f
  physical?: #f
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (redstone-torch-model what "unlit_redstone_torch.json" block-id variant-id data-id i j k x y z uv lighting rendering category add-face add-cube block-ref data-ref))
  visual: add-data-visual
  physical: add-data-physical)


(define-block RedstoneTorchOn
  76
  category: redstone
  kind: redstonetorch
  texture: "redstone_torch_on"
  rendering: transparent-rendering
  opaque?: #f
  opaque-cube?: #f
  cube?: #f
  physical?: #f
  brightness: 7
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (redstone-torch-model what "redstone_torch.json" block-id variant-id data-id i j k x y z uv lighting rendering category add-face add-cube block-ref data-ref))
  visual: add-data-visual
  physical: add-data-physical)

(definition (redstone-torch-model what filename block-id variant-id data-id i j k x y z uv lighting rendering category add-face add-cube block-ref data-ref)
  (let ((key (string-append
                 "facing="
                 (case data-id
                   ((1) "west")
                   ((2) "east")
                   ((3) "north")
                   ((4) "south")
                   (else "up")))))
    (with-block-state filename key
      (lambda (model rotation-y rotation-x)
        (add-json-model what model block-id variant-id data-id i j k x y z uv lighting rendering category add-face add-cube block-ref data-ref (+ rotation-y 180) rotation-x)))))


(define-block StoneButton
  77
  category: redstone
  kind: power
  texture: "cobblestone"
  opaque?: #f
  opaque-cube?: #f
  cube?: #f
  physical?: #f
  present: '(rotate-z: 30.)
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (add-button what block-id variant-id data-id i j k x y z uv lighting rendering category add-face add-cube block-ref data-ref))
  visual: add-data-visual
  physical: add-data-physical
  right-mouse: (lambda (section block-id data-id i j k x y z with-field block-ref block-set! data-ref data-set! blocklight-ref blocklight-set! skylight-ref skylight-set!)
                 (with-field i j k
                   (lambda (section index)
                     (updating-sections (current-zone)
                       (lambda (add-section)
                         (add-section section)
                         (unless (bit-set? 3 data-id)
                           (data-set! section index (bit-set data-id 3 #t))
                           (world.redstone:redstone-update section (list i j k block-id) add-section with-field block-ref block-set! data-ref data-set! blocklight-ref blocklight-set! #t))))))))


;; improve
(define-block RedstoneRepeaterBlockOff
  93
  category: redstone
  kind: transmission
  texture: "repeater_off"
  rendering: transparent-rendering
  opaque?: #f
  opaque-cube?: #f
  cube?: #f
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (let ((margin 2m)
                    (small 1m)
                    (matrix (make-y-rotation-matrix (* PI/2 (cast <fl> (bitwise-and data-id #b11))))))
                (let ((left (- block-radius))
                      (right (+ block-radius))
                      (bottom (- block-radius))
                      (top (+ margin (- block-radius)))
                      (back (- block-radius))
                      (front (+ block-radius))
                      (torch-back (+ (- 2m) (* (arithmetic-shift-right (bitwise-and data-id #b1100) 2) 2m))))
                  (let ((side-uv (uv-rect (cache-coordinates "stone")  0. .875 0. 1.))
                        (torch-uv (uv-rect (cache-coordinates "redstone_torch_off") 6m 5m 10m 11m))
                        (torch-top-uv (uv-rect (cache-coordinates "redstone_torch_off") 7m 6m 9m 8m)))
                    (add-face (left-generic   what i j k x y z left right bottom top back front side-uv generic-coordinates lighting rendering block-id variant-id matrix) rendering redstone)
                    (add-face (right-generic  what i j k x y z left right bottom top back front side-uv generic-coordinates lighting rendering block-id variant-id matrix) rendering redstone)
                    (add-face (bottom-generic what i j k x y z left right bottom top back front (cache-coordinates "stone") generic-coordinates lighting rendering block-id variant-id matrix) rendering redstone)
                    (add-face (top-generic    what i j k x y z left right bottom top back front uv generic-coordinates lighting rendering block-id variant-id matrix) rendering redstone)
                    (add-face (back-generic   what i j k x y z left right bottom top back front side-uv generic-coordinates lighting rendering block-id variant-id matrix) rendering redstone)
                    (add-face (front-generic  what i j k x y z left right bottom top back front side-uv generic-coordinates lighting rendering block-id variant-id matrix) rendering redstone)
                    (unless (eq? what 'physical)
                      (add-face (left-generic   what i j k x y z (- small) small top (+ top (* 3 margin)) (+ (- block-radius) margin) (- (* 2 margin)) torch-uv generic-coordinates lighting rendering block-id variant-id matrix) rendering redstone)
                      (add-face (right-generic  what i j k x y z (- small) small top (+ top (* 3 margin)) (+ (- block-radius) margin) (- (* 2 margin)) torch-uv generic-coordinates lighting rendering block-id variant-id matrix) rendering redstone)
                      (add-face (back-generic   what i j k x y z (- small) small top (+ top (* 3 margin)) (+ (- block-radius) margin) (- (* 2 margin)) torch-uv generic-coordinates lighting rendering block-id variant-id matrix) rendering redstone)
                      (add-face (front-generic  what i j k x y z (- small) small top (+ top (* 3 margin)) (+ (- block-radius) margin) (- (* 2 margin)) torch-uv generic-coordinates lighting rendering block-id variant-id matrix) rendering redstone)
                      (add-face (top-generic    what i j k x y z (- small) small top (+ top (* 3 margin)) (+ (- block-radius) margin) (- (* 2 margin)) torch-top-uv generic-coordinates lighting rendering block-id variant-id matrix) rendering redstone)
                      (add-face (left-generic   what i j k x y z (- small) small top (+ top (* 3 margin)) torch-back (+ torch-back 2m) torch-uv generic-coordinates lighting rendering block-id variant-id matrix) rendering redstone)
                      (add-face (right-generic  what i j k x y z (- small) small top (+ top (* 3 margin)) torch-back (+ torch-back 2m) torch-uv generic-coordinates lighting rendering block-id variant-id matrix) rendering redstone)
                      (add-face (back-generic   what i j k x y z (- small) small top (+ top (* 3 margin)) torch-back (+ torch-back 2m) torch-uv generic-coordinates lighting rendering block-id variant-id matrix) rendering redstone)
                      (add-face (front-generic  what i j k x y z (- small) small top (+ top (* 3 margin)) torch-back (+ torch-back 2m) torch-uv generic-coordinates lighting rendering block-id variant-id matrix) rendering redstone)
                      (add-face (top-generic    what i j k x y z (- small) small top (+ top (* 3 margin)) torch-back (+ torch-back 2m) torch-top-uv generic-coordinates lighting rendering block-id variant-id matrix) rendering redstone))))))
  visual: add-data-visual
  physical: add-data-physical
  right-mouse: (lambda (section block-id data-id i j k x y z with-field block-ref block-set! data-ref data-set! blocklight-ref blocklight-set! skylight-ref skylight-set!)
                 (updating-sections (current-zone)
                   (lambda (add-section)
                     (with-field i j k
                       (lambda (section index)
                         (let ((delay (arithmetic-shift-right (bitwise-and data-id #b1100) 2)))
                           (let ((ajust (if (= delay 3) -12 4)))
                             (add-section section)
                             (data-set! section index (+ data-id ajust))))))))))


;; improve
(define-block RedstoneRepeaterBlockOn
  94
  category: invalid
  texture: "repeater_on"
  rendering: transparent-rendering
  opaque?: #f
  opaque-cube?: #f
  cube?: #f
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (let ((margin 2m)
                    (small 1m)
                    (matrix (make-y-rotation-matrix (* PI/2 (cast <fl> (bitwise-and data-id #b11))))))
                (let ((left (- block-radius))
                      (right (+ block-radius))
                      (bottom (- block-radius))
                      (top (+ margin (- block-radius)))
                      (back (- block-radius))
                      (front (+ block-radius))
                      (torch-back (+ (- 2m) (* (arithmetic-shift-right (bitwise-and data-id #b1100) 2) 2m))))
                  (let ((side-uv (uv-rect (cache-coordinates "stone")  0. .875 0. 1.))
                        (torch-uv (uv-rect (cache-coordinates "redstone_torch_on") 6m 5m 10m 11m))
                        (torch-top-uv (uv-rect (cache-coordinates "redstone_torch_on") 7m 6m 9m 8m)))
                    (add-face (left-generic   what i j k x y z left right bottom top back front side-uv generic-coordinates lighting rendering block-id variant-id matrix) rendering redstone)
                    (add-face (right-generic  what i j k x y z left right bottom top back front side-uv generic-coordinates lighting rendering block-id variant-id matrix) rendering redstone)
                    (add-face (bottom-generic what i j k x y z left right bottom top back front (cache-coordinates "stone") generic-coordinates lighting rendering block-id variant-id matrix) rendering redstone)
                    (add-face (top-generic    what i j k x y z left right bottom top back front uv generic-coordinates lighting rendering block-id variant-id matrix) rendering redstone)
                    (add-face (back-generic   what i j k x y z left right bottom top back front side-uv generic-coordinates lighting rendering block-id variant-id matrix) rendering redstone)
                    (add-face (front-generic  what i j k x y z left right bottom top back front side-uv generic-coordinates lighting rendering block-id variant-id matrix) rendering redstone)
                    (unless (eq? what 'physical)
                      (add-face (left-generic   what i j k x y z (- small) small top (+ top (* 3 margin)) (+ (- block-radius) margin) (- (* 2 margin)) torch-uv generic-coordinates lighting rendering block-id variant-id matrix) rendering redstone)
                      (add-face (right-generic  what i j k x y z (- small) small top (+ top (* 3 margin)) (+ (- block-radius) margin) (- (* 2 margin)) torch-uv generic-coordinates lighting rendering block-id variant-id matrix) rendering redstone)
                      (add-face (back-generic   what i j k x y z (- small) small top (+ top (* 3 margin)) (+ (- block-radius) margin) (- (* 2 margin)) torch-uv generic-coordinates lighting rendering block-id variant-id matrix) rendering redstone)
                      (add-face (front-generic  what i j k x y z (- small) small top (+ top (* 3 margin)) (+ (- block-radius) margin) (- (* 2 margin)) torch-uv generic-coordinates lighting rendering block-id variant-id matrix) rendering redstone)
                      (add-face (top-generic    what i j k x y z (- small) small top (+ top (* 3 margin)) (+ (- block-radius) margin) (- (* 2 margin)) torch-top-uv generic-coordinates lighting rendering block-id variant-id matrix) rendering redstone)
                      (add-face (left-generic   what i j k x y z (- small) small top (+ top (* 3 margin)) torch-back (+ torch-back 2m) torch-uv generic-coordinates lighting rendering block-id variant-id matrix) rendering redstone)
                      (add-face (right-generic  what i j k x y z (- small) small top (+ top (* 3 margin)) torch-back (+ torch-back 2m) torch-uv generic-coordinates lighting rendering block-id variant-id matrix) rendering redstone)
                      (add-face (back-generic   what i j k x y z (- small) small top (+ top (* 3 margin)) torch-back (+ torch-back 2m) torch-uv generic-coordinates lighting rendering block-id variant-id matrix) rendering redstone)
                      (add-face (front-generic  what i j k x y z (- small) small top (+ top (* 3 margin)) torch-back (+ torch-back 2m) torch-uv generic-coordinates lighting rendering block-id variant-id matrix) rendering redstone)
                      (add-face (top-generic    what i j k x y z (- small) small top (+ top (* 3 margin)) torch-back (+ torch-back 2m) torch-top-uv generic-coordinates lighting rendering block-id variant-id matrix) rendering redstone))))))
  visual: add-data-visual
  physical: add-data-physical
  right-mouse: (lambda (section block-id data-id i j k x y z with-field block-ref block-set! data-ref data-set! blocklight-ref blocklight-set! skylight-ref skylight-set!)
                 (updating-sections (current-zone)
                   (lambda (add-section)
                     (with-field i j k
                       (lambda (section index)
                         (let ((delay (arithmetic-shift-right (bitwise-and data-id #b1100) 2)))
                           (let ((ajust (if (= delay 3) -12 4)))
                             (add-section section)
                             (data-set! section index (+ data-id ajust))))))))))


(define-block Trapdoor
  96
  category: redstone
  kind: cube
  texture: "trapdoor"
  opaque?: #f
  opaque-cube?: #f
  cube?: #f
  physical?: #f
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              )
  visual: add-data-visual
  physical: add-data-physical)

@momie
(define-block Trapdoor
  96
  category: redstone
  kind: mechanism
  texture: "trapdoor"
  rendering: transparent-rendering
  opaque?: #f
  opaque-cube?: #f
  cube?: #f
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (choose-trapdoor-model what (if (eq? what 'physical) "trapdoor_p.json" "trapdoor.json") block-id variant-id data-id i j k x y z uv lighting rendering category add-face add-cube block-ref data-ref))
  visual: add-data-visual
  physical: add-data-physical
  right-mouse: (lambda (section block-id data-id i j k x y z with-field block-ref block-set! data-ref data-set! blocklight-ref blocklight-set! skylight-ref skylight-set!)
                 (let ((zone (current-zone)))
                   (updating-sections zone
                     (lambda (add-section)
                       (with-field i j k
                         (lambda (section index)
                           (data-set! section index (bit-set data-id 2 (not (bit-set? 2 data-id))))
                           (add-section section))))))))


(definition (choose-trapdoor-model what filename block-id variant-id data-id i j k x y z uv lighting rendering category add-face add-cube block-ref data-ref)
  (let ((key
          (string-append
            "facing="
            (case (bitwise-and data-id #b11)
              ((0) "south,half=")
              ((1) "north,half=")
              ((2) "east,half=")
              ((3) "west,half="))
            (if (bit-set? 3 data-id)
                "top,open="
              "bottom,open=")
            (if (bit-set? 2 data-id)
                "true"
              "false"))))
    (with-block-state filename key
      (lambda (model rotation-y rotation-x)
        (add-json-model what model block-id variant-id data-id i j k x y z uv lighting rendering category add-face add-cube block-ref data-ref (+ rotation-y 180.) rotation-x)))))


(define-block FenceGate
  107
  ;; no category until we display fences
  ;; category: redstone
  ;; kind: mechanism
  texture: "planks_oak"
  rendering: transparent-rendering
  opaque?: #f
  opaque-cube?: #f
  cube?: #f
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              ;; quick hack to remove all fences
              #f
              @w
              (let ((matrix (make-lookat-matrix& (horizon-lookat&^ (case (bitwise-and data-id #b11)
                                                                     ((0 2) (vertex&  0. 0.  1.))
                                                                     ((1 3) (vertex& -1. 0.  0.))))))
                    (opened? (bit-set? 2 data-id)))
                (define (add-trunk left <fl> right <fl>)
                  (let ((bottom (+ (- block-radius) .35))
                        (top (+ block-radius))
                        (back (- .075))
                        (front (+ .075)))
                    (add-cuboid-generic what i j k x y z left right bottom top back front uv lighting rendering category block-id variant-id matrix add-face)))
                
                (define (add-branches left <fl> right <fl> back <fl> front <fl>)
                  ;; upper
                  (let ((bottom (- .35 .075))
                        (top (+ .35 .075)))
                    (add-cuboid-generic what i j k x y z left right bottom top back front uv lighting rendering category block-id variant-id matrix add-face))
                  ;; lower
                  (let ((bottom (- .075))
                        (top (+ .075)))
                    (add-cuboid-generic what i j k x y z left right bottom top back front uv lighting rendering category block-id variant-id matrix add-face)))
                
                (define (add-middle left <fl> right <fl> back <fl> front <fl>)
                  (let ((bottom -.075)
                        (top (+ .35 .075)))
                    (add-cuboid-generic what i j k x y z left right bottom top back front uv lighting rendering category block-id variant-id matrix add-face)))
                
                ;; trunk
                (add-trunk (- block-radius) (+ (- block-radius) .2))
                (add-trunk (- (+ block-radius) .2) (+ block-radius))
                ;; branches
                (cond (opened?
                       (add-branches (- block-radius) (+ (- block-radius) .2) .075 (- (+ block-radius) .2))
                       (add-branches (- (+ block-radius) .2) (+ block-radius) .075 (- (+ block-radius) .2)))
                      (else
                       (add-branches (+ (- block-radius) .2) -.1 (- .075) (+ .075))
                       (add-branches .1 (- (+ block-radius) .2) (- .075) (+ .075))))
                ;; middle
                (cond (opened?
                       (add-middle (- block-radius) (+ (- block-radius) .2) (- (+ block-radius) .2) (+ block-radius))
                       (add-middle (- (+ block-radius) .2) (+ block-radius) (- (+ block-radius) .2) (+ block-radius)))
                      (else
                       (add-middle -.1 0. (- .075) (+ .075))
                       (add-middle 0. .1 (- .075) (+ .075)))))
              
              @w(unless (eq? what 'physical)
                  (let ((key (string-append
                               "facing="
                               (case (bitwise-and data-id #b11)
                                 ((0) "south")
                                 ((1) "west")
                                 ((2) "north")
                                 (else "east"))
                               ",in_wall=false,open="
                               (if (bit-set? 2 data-id)
                                   "true"
                                 "false"))))
                    (with-block-state "fence_gate.json" key
                      (lambda (model rotation-y rotation-x)
                        (add-json-model what model block-id variant-id data-id i j k x y z uv lighting rendering category add-face add-cube block-ref data-ref rotation-y rotation-x))))))
  visual: add-data-visual
  physical: add-data-physical)


(define-block RedstoneLampOff
  123
  category: redstone
  kind: mechanism
  texture: "redstone_lamp_off"
  opaque?: #f
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (let ((top (cache-coordinates "redstone_lamp_top_off")))
                (add-cube what i j k x y z uv uv uv top uv uv lighting rendering category block-id variant-id add-face))))


(define-block RedstoneLampOn
  124
  category: invalid
  texture: "redstone_lamp_on"
  opaque?: #f
  brightness: 15
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (let ((top (cache-coordinates "redstone_lamp_top_on")))
                (add-cube what i j k x y z uv uv uv top uv uv lighting rendering category block-id variant-id add-face))))


;; improve
(define-block TripwireHook
  131
  category: waiting ;; redstone
  texture: "farmland_wet"
  opaque?: #f
  opaque-cube?: #f
  cube?: #f)


;; improve
(define-block Tripwire
  132
  category: waiting ;; redstone
  texture: "farmland_wet"
  opaque?: #f
  opaque-cube?: #f
  cube?: #f)


(define-block CommandBlock
  137
  category: redstone
  kind: mechanism
  texture: "command_block"
  opaque-cube?: #f
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (add-cube what i j k x y z uv uv uv uv uv uv lighting rendering category block-id variant-id add-face)))


;; improve
(define-block WoodenButton
  143
  category: redstone
  kind: power
  texture: "farmland_wet"
  opaque?: #f
  opaque-cube?: #f
  cube?: #f
  physical?: #f
  present: '(rotate-z: 30.)
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (add-button what block-id variant-id data-id i j k x y z uv lighting rendering category add-face add-cube block-ref data-ref))
  visual: add-data-visual
  physical: add-data-physical
  right-mouse: (lambda (section block-id data-id i j k x y z with-field block-ref block-set! data-ref data-set! blocklight-ref blocklight-set! skylight-ref skylight-set!)
                 (with-field i j k
                   (lambda (section index)
                     (updating-sections (current-zone)
                       (lambda (add-section)
                         (add-section section)
                         (unless (bit-set? 3 data-id)
                           (data-set! section index (bit-set data-id 3 #t))
                           (world.redstone:redstone-update section (list i j k block-id) add-section with-field block-ref block-set! data-ref data-set! blocklight-ref blocklight-set! #t))))))))


;; copy/paste of WoodenPressurePlate
(define-block LightWeightedPressurePlate
  147
  category: redstone
  kind: power
  texture: "gold_block"
  opaque?: #f
  opaque-cube?: #f
  cube?: #f
  physical?: #t
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (let ((left (+ (- x block-radius) 1m))
                    (right (- (+ x block-radius) 1m))
                    (bottom (- y block-radius))
                    (top (+ (- y block-radius) (/ 1m (if (bit-set? 0 data-id) 2 1))))
                    (back (+ (- z block-radius) 1m))
                    (front (- (+ z block-radius) 1m)))
                (add-face (left-face   what i j k x y z left right bottom top back front uv generic-coordinates lighting rendering block-id variant-id) rendering category)
                (add-face (right-face  what i j k x y z left right bottom top back front uv generic-coordinates lighting rendering block-id variant-id) rendering category)
                (add-face (bottom-face what i j k x y z left right bottom top back front uv generic-coordinates lighting rendering block-id variant-id) rendering category)
                (add-face (top-face    what i j k x y z left right bottom top back front uv generic-coordinates lighting rendering block-id variant-id) rendering category)
                (add-face (back-face   what i j k x y z left right bottom top back front uv generic-coordinates lighting rendering block-id variant-id) rendering category)
                (add-face (front-face  what i j k x y z left right bottom top back front uv generic-coordinates lighting rendering block-id variant-id) rendering category))))


;; copy/paste of WoodenPressurePlate
(define-block HeavyWeightedPressurePlate
  148
  category: redstone
  kind: power
  texture: "iron_block"
  opaque?: #f
  opaque-cube?: #f
  cube?: #f
  physical?: #t
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (let ((left (+ (- x block-radius) 1m))
                    (right (- (+ x block-radius) 1m))
                    (bottom (- y block-radius))
                    (top (+ (- y block-radius) (/ 1m (if (bit-set? 0 data-id) 2 1))))
                    (back (+ (- z block-radius) 1m))
                    (front (- (+ z block-radius) 1m)))
                (add-face (left-face   what i j k x y z left right bottom top back front uv generic-coordinates lighting rendering block-id variant-id) rendering category)
                (add-face (right-face  what i j k x y z left right bottom top back front uv generic-coordinates lighting rendering block-id variant-id) rendering category)
                (add-face (bottom-face what i j k x y z left right bottom top back front uv generic-coordinates lighting rendering block-id variant-id) rendering category)
                (add-face (top-face    what i j k x y z left right bottom top back front uv generic-coordinates lighting rendering block-id variant-id) rendering category)
                (add-face (back-face   what i j k x y z left right bottom top back front uv generic-coordinates lighting rendering block-id variant-id) rendering category)
                (add-face (front-face  what i j k x y z left right bottom top back front uv generic-coordinates lighting rendering block-id variant-id) rendering category))))


;; copy/paste of WoodenPressurePlate
(define-block DaylightSensor
  151
  category: redstone
  kind: power
  texture: "planks_oak" ;; quicky not the correct model / texture
  opaque?: #f
  opaque-cube?: #f
  cube?: #f
  physical?: #t
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (let ((left (+ (- x block-radius) 1m))
                    (right (- (+ x block-radius) 1m))
                    (bottom (- y block-radius))
                    (top (+ (- y block-radius) (/ 1m (if (bit-set? 0 data-id) 2 1))))
                    (back (+ (- z block-radius) 1m))
                    (front (- (+ z block-radius) 1m)))
                (add-face (left-face   what i j k x y z left right bottom top back front uv generic-coordinates lighting rendering block-id variant-id) rendering category)
                (add-face (right-face  what i j k x y z left right bottom top back front uv generic-coordinates lighting rendering block-id variant-id) rendering category)
                (add-face (bottom-face what i j k x y z left right bottom top back front uv generic-coordinates lighting rendering block-id variant-id) rendering category)
                (add-face (top-face    what i j k x y z left right bottom top back front uv generic-coordinates lighting rendering block-id variant-id) rendering category)
                (add-face (back-face   what i j k x y z left right bottom top back front uv generic-coordinates lighting rendering block-id variant-id) rendering category)
                (add-face (front-face  what i j k x y z left right bottom top back front uv generic-coordinates lighting rendering block-id variant-id) rendering category)))))
