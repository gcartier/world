;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Generation Models
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2016
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;    Edouard Hebert


(module world.generation.models jazz


(import (jazz.syntax (phase syntax))
        (world.block)
        (world.face)
        (world.generation)
        (world.generation.base)
        (world.generation.block)
        (world.generation.building)
        (world.generation.rendering)
        (world.model)
        (world.models)
        (world.syntax (phase syntax)))


;;;
;;;; Model
;;;


(definition (register-block-models)
  (loop (for n from 0 below (vector-length blockids))
        (let ((block <Block+> (vector-ref blockids n)))
          (when block
            (let ((name (get-name~ block)))
              (unless (or (get-generic?~ block) (= (get-id~ block) 0))
                (register-model name
                  (lambda ()
                    (create-block-model (if (eq? name 'Unknown)
                                            (id->block GoldOre)
                                          block)))
                  #t
                  'block)))))))


(definition protected (create-block-model block <Block>)
  (let ((faces '())
        (block-id (get-id~ block))
        (category (get-category~ block))
        (uv (block-texture-coordinates block))
        (generate (get-generate~ block))
        (rendering (cache-rendering~ block))
        (transparent-rendering (transparent-rendering)))
    (define (block-ref i <fx> j <fx> k <fx>) <fx>
      air-id)
    
    (define (data-ref i <fx> j <fx> k <fx>) <fx>
      0)
    
    (define (block-data-id) <fx>
      (case (get-name~ block)
        ((BedBlock) 1)
        ((WoodenButton StoneButton Vines) 2)
        ((WallSign Pumpkin Jack-O-Lantern) 3)
        ((Ladder Chest LockedChest) 4)
        ((Torch Piston StickyPiston Lever Furnace) 5)
        ((RedstoneWire) 12)
        ((DoublePlantPeony DoublePlantRose DoubleFern DoubleTallGrass DoublePlantLilac DoublePlantSunflower OakWood SpruceWood BirchWood JungleWood BlockOfQuartz PillarQuartzBlock ChiseledQuartzBlock) (get-variant-id~ block))
        (else 0)))
    
    (define (block-config-id) <fx>
      (case (get-name~ block)
        ((WoodenStairs CobblestoneStairs BrickStairs StoneBrickStairs NetherBrickStairs SandstoneStairs SpruceWoodStairs BirchWoodStairs JungleWoodStairs QuartzStairs) 3)
        (else 0)))
    
    (define (add-face face <Face> rendering <Rendering> category)
      (set! faces (cons face faces)))
    
    (define (add-cube what i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> left-uv <f32vector> right-uv <f32vector> bottom-uv <f32vector> top-uv <f32vector> back-uv <f32vector> front-uv <f32vector> lighting rendering category block-id variant-id add-face)
      (add-face (left-side   what i j k x y z left-uv lighting rendering block-id variant-id) rendering category)
      (add-face (right-side  what i j k x y z right-uv lighting rendering block-id variant-id) rendering category)
      (add-face (bottom-side what i j k x y z bottom-uv lighting rendering block-id variant-id) rendering category)
      (add-face (top-side    what i j k x y z top-uv lighting rendering block-id variant-id) rendering category)
      (add-face (back-side   what i j k x y z back-uv lighting rendering block-id variant-id) rendering category)
      (add-face (front-side  what i j k x y z front-uv lighting rendering block-id variant-id) rendering category))
    
    (define default-lighting
      (f32vector 0. 60. 4.))
    
    (define (no-lighting shade <fl> i <fx> j <fx> k <fx> ax <fx> ay <fx> az <fx> bx <fx> by <fx> bz <fx> cx <fx> cy <fx> cz <fx> dx <fx> dy <fx> dz <fx>)
      default-lighting)
    
    (let ((lighting no-lighting)
          (variant-id (or (get-variant-id~ block) -1))
          (data-id (block-data-id))
          (config-id (block-config-id)))
      (cond ((id? block-id Fence NetherBrickFence)
             (generate 'model block-id variant-id data-id 1 0 0 0 -.5 0. 0. uv lighting rendering category add-face add-cube block-ref data-ref)
             (generate 'model block-id variant-id data-id 2 0 0 0 .5 0. 0. uv lighting rendering category add-face add-cube block-ref data-ref))
            (generate
             (generate 'model block-id variant-id data-id config-id 0 0 0 0. 0. 0. uv lighting rendering category add-face add-cube block-ref data-ref))
            ((get-opaque-cube?~ block)
             (add-cube 'model 0 0 0 0. 0. 0. uv uv uv uv uv uv lighting rendering category block-id variant-id add-face))
            (else
             (add-cross-faces 'model 0 0 0 0. 0. 0. uv lighting transparent-rendering category block-id variant-id add-face))))
    (make-model faces class: Block-Model)))


(with-generate-mutex
  (lambda ()
    (register-block-models))))
