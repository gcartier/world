;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Generation Block
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;    Edouard Hebert


(module world.generation.block jazz


(import (world.autoload))


(proclaim (warn optimizations))


;;;
;;;; Block
;;;


(class Block extends Object
  
  
  (slot name                                          getter generate)
  (slot id                  <fx>                      getter generate)
  (slot variant-id          <fx+>                     getter generate)
  (slot category                                      getter generate)
  (slot kind                                          getter generate)
  (slot texture                                       getter generate)
  (slot texture-coordinates <f32vector+>              accessors generate)
  (slot rendering           <:Rendering>              getter generate)
  (slot rendering-cache     <Rendering+>              getter generate)
  (slot opaque-cube?        <bool>                    getter generate)
  (slot translucent-cube?   <bool>                    getter generate)
  (slot liquid-cube?        <bool>                    getter generate)
  (slot physical?           <bool>                    getter generate)
  (slot cube?               <bool>                    accessors generate)
  (slot ambient?            <bool>                    getter generate)
  (slot present                                       getter explicit)
  (slot brightness                                    getter generate)
  (slot opacity             <fx>                      getter generate)
  (slot configurations                                getter generate)
  (slot generate                                      getter generate)
  (slot visual                                        getter generate)
  (slot physical                                      getter generate)
  (slot right-mouse                                   getter explicit)
  (slot double-click                                  getter explicit)
  (slot generic?            <bool>                    getter generate)
  (slot variant-mask        <procedure>               getter generate)
  (slot visuals             <vector+>   initialize #f accessors generate)
  (slot physicals           <vector+>   initialize #f accessors generate)
  
  
  (method override (initialize self name id variant-id category kind texture rendering opaque-cube? translucent-cube? liquid-cube? physical? cube? ambient? present brightness opacity configurations generate visual physical right-mouse double-click generic? variant-mask)
    (set! self.name name)
    (set! self.id id)
    (set! self.variant-id variant-id)
    (set! self.category category)
    (set! self.kind kind)
    (set! self.texture texture)
    (set! self.texture-coordinates #f)
    (set! self.rendering (or rendering world.generation.rendering:opaque-rendering))
    (set! self.rendering-cache #f)
    (set! self.opaque-cube? opaque-cube?)
    (set! self.translucent-cube? translucent-cube?)
    (set! self.liquid-cube? liquid-cube?)
    (set! self.physical? physical?)
    (set! self.cube? cube?)
    (set! self.ambient? ambient?)
    (set! self.present present)
    (set! self.brightness brightness)
    (set! self.opacity opacity)
    (set! self.configurations configurations)
    (set! self.generate generate)
    (set! self.visual visual)
    (set! self.physical physical)
    (set! self.right-mouse right-mouse)
    (set! self.double-click double-click)
    (set! self.generic? generic?)
    (set! self.variant-mask variant-mask))
  
  
  (method override (print self output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{a}" name))))
  
  
  (method package (cache-rendering self) <Rendering>
    (or rendering-cache
        (let ((rend (rendering)))
          (set! rendering-cache rend)
          rend)))
  
  (method public (get-present self)
    (or present
        (and variant-id
             (begin
               (set! present (get-present (id->block id)))
               present))))
  
  (method public (get-right-mouse self)
    (or right-mouse
        (and variant-id
             (begin
               (set! right-mouse (get-right-mouse (id->block id)))
               right-mouse))))
  
  (method public (get-double-click self)
    (or double-click
        (and variant-id
             (begin
               (set! double-click (get-double-click (id->block id)))
               double-click)))))


;;;
;;;; Id
;;;


(constant block-variants <fx>
  17)


(definition protected blocks <table>
  (make-table test: eq?))

(definition protected blockids <vector>
  (make-vector (* 256 block-variants) #f))


(definition protected (register-block name id (category: category #f) (kind: kind #f) (texture: texture #f) (rendering: rendering #f) (opaque-cube?: opaque-cube? #t) (translucent-cube?: translucent-cube? #f) (liquid-cube?: liquid-cube? #f) (physical?: physical? #t) (cube?: cube? #t) (ambient?: ambient? #f) (present: present #f) (brightness: brightness #f) (opacity: opacity #f) (configurations: configurations 16) (generate: generate #f) (visual: visual #f) (physical: physical #f) (right-mouse: right-mouse #f) (double-click: double-click #f) (generic?: generic? #f) (variant-mask: variant-mask #b1111))
  (let ((id <fx> (if (pair? id) (car id) id))
        (variant-id <fx+> (if (pair? id) (cadr id) #f)))
    (define (inherit-block-attributes proc)
      (let ((parent (id->block id)))
        (if variant-id
            (proc (or category (get-category parent)) (or kind (get-kind parent)) (or rendering (get-rendering parent)) (get-opaque-cube? parent) (get-translucent-cube? parent) (get-liquid-cube? parent) (get-physical? parent) (get-cube? parent) (get-ambient? parent) (or opacity (get-opacity parent)) (or generate (get-generate parent)) (or visual (get-visual parent)) (or physical (get-physical parent)))
          (proc category kind rendering opaque-cube? translucent-cube? liquid-cube? physical? cube? ambient? (or opacity (if opaque-cube? 15 0)) generate visual physical))))
    
    (inherit-block-attributes
      (lambda (category kind rendering opaque-cube? translucent-cube? liquid-cube? physical? cube? ambient? opacity generate visual physical)
        (let ((block (new Block name id variant-id category kind texture rendering opaque-cube? translucent-cube? liquid-cube? physical? cube? ambient? present brightness opacity configurations generate visual physical right-mouse double-click generic? variant-mask)))
          (table-set! blocks name block)
          (vector-set! blockids (+ (* id block-variants) (if variant-id (+ variant-id 1) 0)) block)
          (unspecified))))))


(definition public inline (name->block name) <Block>
  (table-ref blocks name #f))


(definition public inline (encode-id id <fx> variant-id <fx>) <fx>
  (+ (* id block-variants) variant-id 1))

(definition public inline (decode-id id <fl>) <fx>
  (fxfloor/ (flonum->fixnum id) block-variants))

(definition public inline (decode-id/variant-id id <fl>) <values>
  (let ((id (flonum->fixnum id)))
    (values (fxfloor/ id block-variants) (- (modulo id block-variants) 1))))

(definition public inline (decode-fxid/variant-id id <fx>) <values>
  (values (fxfloor/ id block-variants) (- (modulo id block-variants) 1)))


(definition public inline (id->block id <fx>) <Block>
  (vector-ref blockids (* id block-variants)))

(definition public inline (id/variant-id->block id <fx> variant-id <fx>) <Block>
  (let ((block (id->block id)))
    (if (not (get-generic? block))
        block
      (vector-ref blockids (encode-id id variant-id)))))

(definition public inline (id/data-id->block id <fx> data-id <fx>) <Block>
  (let ((block (id->block id)))
    (if (not (get-generic? block))
        block
      (let ((variant-mask (get-variant-mask block)))
        (vector-ref blockids (encode-id id (if (fixnum? variant-mask) (bitwise-and data-id variant-mask) (or (and variant-mask (variant-mask data-id)) 0))))))))

(definition public (id/durability->block id <fx> durability <fx+>) <Block>
  (if (not durability)
      (id->block id)
    (id/variant-id->block id durability))))
