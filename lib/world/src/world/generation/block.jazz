;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Generation Block
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2016
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;    Edouard Hebert


(module world.generation.block jazz


;;;
;;;; Block
;;;


(class Block extends Object
  
  
  (slot name                                        getter generate)
  (slot id                  <fx>                    getter generate)
  (slot variant-id          <fx+>                   getter generate)
  (slot category                                    getter generate)
  (slot kind                                        getter generate)
  (slot texture                                     getter generate)
  (slot texture-coordinates                         accessors generate)
  (slot rendering                                   getter generate)
  (slot rendering-cache                             getter generate)
  (slot opaque-cube?        <bool>                  getter generate)
  (slot translucent-cube?   <bool>                  getter generate)
  (slot liquid-cube?        <bool>                  getter generate)
  (slot physical?           <bool>                  getter generate)
  (slot cube?               <bool>                  accessors generate)
  (slot ambient?            <bool>                  getter generate)
  (slot present                                     getter explicit)
  (slot brightness                                  getter generate)
  (slot configurations                              getter generate)
  (slot generate                                    getter generate)
  (slot visual                                      getter generate)
  (slot physical                                    getter generate)
  (slot right-mouse                                 getter explicit)
  (slot double-click                                getter explicit)
  (slot generic?            <bool>                  getter generate)
  (slot variant-mask        <fx>                    getter generate)
  (slot visuals             <vector+> initialize #f accessors generate)
  (slot physicals           <vector+> initialize #f accessors generate)
  
  
  (method override (initialize name id variant-id category kind texture rendering opaque-cube? translucent-cube? liquid-cube? physical? cube? ambient? present brightness configurations generate visual physical right-mouse double-click generic? variant-mask)
    (set! name~self name)
    (set! id~self id)
    (set! variant-id~self variant-id)
    (set! category~self category)
    (set! kind~self kind)
    (set! texture~self texture)
    (set! texture-coordinates~self #f)
    (set! rendering~self (or rendering world.generation.rendering:opaque-rendering))
    (set! rendering-cache~self #f)
    (set! opaque-cube?~self opaque-cube?)
    (set! translucent-cube?~self translucent-cube?)
    (set! liquid-cube?~self liquid-cube?)
    (set! physical?~self physical?)
    (set! cube?~self cube?)
    (set! ambient?~self ambient?)
    (set! present~self present)
    (set! brightness~self brightness)
    (set! configurations~self configurations)
    (set! generate~self generate)
    (set! visual~self visual)
    (set! physical~self physical)
    (set! right-mouse~self right-mouse)
    (set! double-click~self double-click)
    (set! generic?~self generic?)
    (set! variant-mask~self variant-mask))
  
  
  (method override (print output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{a}" name))))
  
  
  (method (cache-rendering)
    (or rendering-cache
        (let ((rend (rendering)))
          (set! rendering-cache rend)
          rend)))
  
  (method public (get-present)
    (or present
        (when variant-id
          (set! present (get-present~ (id->block id)))
          present)))
  
  (method public (get-right-mouse)
    (or right-mouse
        (when variant-id
          (set! right-mouse (get-right-mouse~ (id->block id)))
          right-mouse)))
  
  (method public (get-double-click)
    (or double-click
        (when variant-id
          (set! double-click (get-double-click~ (id->block id)))
          double-click))))


;;;
;;;; Id
;;;


(constant block-variants <fx>
  17)


(definition protected blocks <table>
  (make-table test: eq?))

(definition protected blockids <vector>
  (make-vector (* 256 block-variants) #f))


(definition protected (register-block name id (category: category #f) (kind: kind #f) (texture: texture #f) (rendering: rendering #f) (opaque-cube?: opaque-cube? #t) (translucent-cube?: translucent-cube? #f) (liquid-cube?: liquid-cube? #f) (physical?: physical? #t) (cube?: cube? #t) (ambient?: ambient? #f) (present: present #f) (brightness: brightness #f) (configurations: configurations 16) (generate: generate #f) (visual: visual #f) (physical: physical #f) (right-mouse: right-mouse #f) (double-click: double-click #f) (generic?: generic? #f) (variant-mask: variant-mask #b1111))
  (let ((id <fx> (if (pair? id) (car id) id))
        (variant-id (if (pair? id) (cadr id) #f)))
    (define (inherit-block-attributes proc)
      (let ((parent (id->block id)))
        (if variant-id
            (proc (or category (get-category~ parent)) (or kind (get-kind~ parent)) (or rendering (get-rendering~ parent)) (get-opaque-cube?~ parent) (get-translucent-cube?~ parent) (get-liquid-cube?~ parent) (get-physical?~ parent) (get-cube?~ parent) (get-ambient?~ parent) (or generate (get-generate~ parent)) (or visual (get-visual~ parent)) (or physical (get-physical~ parent)))
          (proc category kind rendering opaque-cube? translucent-cube? liquid-cube? physical? cube? ambient? generate visual physical))))
    
    (inherit-block-attributes
      (lambda (category kind rendering opaque-cube? translucent-cube? liquid-cube? physical? cube? ambient? generate visual physical)
        (let ((block (new Block name id variant-id category kind texture rendering opaque-cube? translucent-cube? liquid-cube? physical? cube? ambient? present brightness configurations generate visual physical right-mouse double-click generic? variant-mask)))
          (table-set! blocks name block)
          (vector-set! blockids (+ (* id block-variants) (if variant-id (+ variant-id 1) 0)) block)
          (unspecified))))))


(definition public inline (name->block name) <Block>
  (table-ref blocks name #f))


(definition public inline (encode-id id <fx> variant-id <fx>) <fx>
  (+ (* id block-variants) variant-id 1))

(definition public inline (decode-id id <fl>) <fx>
  (fxfloor/ (flonum->fixnum id) block-variants))

(definition public inline (decode-id/variant-id id <fl>) <values>
  (let ((id (flonum->fixnum id)))
    (values (fxfloor/ id block-variants) (- (modulo id block-variants) 1))))

(definition public inline (decode-fxid/variant-id id <fx>) <values>
  (values (fxfloor/ id block-variants) (- (modulo id block-variants) 1)))


(definition public inline (id->block id <fx>) <Block>
  (vector-ref blockids (* id block-variants)))

(definition public inline (id/variant-id->block id <fx> variant-id <fx>) <Block>
  (let ((block (id->block id)))
    (if (not (get-generic?~ block))
        block
      (vector-ref blockids (encode-id id variant-id)))))

(definition public inline (id/data-id->block id <fx> data-id <fx>) <Block>
  (let ((block (id->block id)))
    (if (not (get-generic?~ block))
        block
      (vector-ref blockids (encode-id id (bitwise-and data-id (get-variant-mask~ block)))))))

(definition public (id/durability->block id <fx> durability <fx+>) <Block>
  (if (not durability)
      (id->block id)
    (id/variant-id->block id durability))))
