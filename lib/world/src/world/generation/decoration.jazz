;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Generation Decoration
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;    Edouard Hebert


(module world.generation.decoration jazz


(import (jazz.audio)
        (jazz.geometry)
        (jazz.graphic)
        (jazz.io)
        (jazz.json)
        (world)
        (world.autoload)
        (world.biome)
        (world.context)
        (world.generation)
        (world.generation.base)
        (world.generation.block)
        (world.generation.categories)
        (world.generation.model)
        (world.generation.rendering)
        (world.geometry)
        (world.index)
        (world.interface.inventory)
        (world.interface.sign)
        (world.quad)
        (world.quad-texture)
        (world.sound)
        (world.syntax (phase syntax))
        (world.tag)
        (world.texture))


(define-block BedBlock
  26
  category: decoration
  texture: "bed_feet_side"
  rendering: transparent-rendering
  opaque?: #f
  opaque-cube?: #f
  cube?: #f
  present: '(translate-z: -4. scaling: 24. rotate-y: -45. rotate-z: 30.)
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (let ((matrix (make-lookat-matrix& (horizon-lookat&^ (case (bitwise-and data-id #b11)
                                                                     ((0) (vertex&  0. 0.  1.))
                                                                     ((1) (vertex& -1. 0.  0.))
                                                                     ((2) (vertex&  0. 0. -1.))
                                                                     ((3) (vertex&  1. 0.  0.))))))
                    (head? (bit-set? 3 data-id))
                    (left (- block-radius))
                    (right (+ block-radius))
                    (bottom (- block-radius))
                    (top 1m)
                    (back (- block-radius))
                    (front (+ block-radius))
                    (bedbottom (+ (- block-radius) 3m))
                    (bedtop (- 9m block-radius)))
                (if head?
                    (let ((uv-top (cache-coordinates "bed_head_top"))
                          (uv-side (cache-coordinates "bed_head_side"))
                          (uv-end (cache-coordinates "bed_head_end"))
                          (uv-bottom (cache-coordinates "planks_oak")))
                      (add-face (left-generic   what i j k x y z left right bottom top back front uv-side generic-coordinates lighting rendering block-id variant-id matrix) rendering category)
                      (add-face (right-generic  what i j k x y z left right bottom top back front uv-side transpose-coordinates lighting rendering block-id variant-id matrix) rendering category)
                      (add-face (bottom-generic what i j k x y z left right bedbottom top back front uv-bottom generic-coordinates lighting rendering block-id variant-id matrix) rendering category)
                      (add-face (top-generic    what i j k x y z left right bottom bedtop back front uv-top rotate-coordinates lighting rendering block-id variant-id matrix) rendering category)
                      (add-face (front-generic  what i j k x y z left right bottom top back front uv-end generic-coordinates lighting rendering block-id variant-id matrix) rendering category))
                  (let ((uv-top (cache-coordinates "bed_feet_top"))
                        (uv-side (cache-coordinates "bed_feet_side"))
                        (uv-end (cache-coordinates "bed_feet_end"))
                        (uv-bottom (cache-coordinates "planks_oak")))
                    (add-face (left-generic   what i j k x y z left right bottom top back front uv-side generic-coordinates lighting rendering block-id variant-id matrix) rendering category)
                    (add-face (right-generic  what i j k x y z left right bottom top back front uv-side transpose-coordinates lighting rendering block-id variant-id matrix) rendering category)
                    (add-face (bottom-generic what i j k x y z left right bedbottom top back front uv-bottom generic-coordinates lighting rendering block-id variant-id matrix) rendering category)
                    (add-face (top-generic    what i j k x y z left right bottom bedtop back front uv-top rotate-coordinates lighting rendering block-id variant-id matrix) rendering category)
                    (add-face (back-generic   what i j k x y z left right bottom top back front uv-end generic-coordinates lighting rendering block-id variant-id matrix) rendering category)
                    (when (eq? what 'model)
                      (set! uv-top (cache-coordinates "bed_head_top"))
                      (set! uv-side (cache-coordinates "bed_head_side"))
                      (set! uv-end (cache-coordinates "bed_head_end"))
                      (set! uv-bottom (cache-coordinates "planks_oak"))
                      (add-face (left-generic   what i j k (- x .5) y z left right bottom top back front uv-side generic-coordinates lighting rendering block-id variant-id matrix) rendering category)
                      (add-face (right-generic  what i j k (- x .5) y z left right bottom top back front uv-side transpose-coordinates lighting rendering block-id variant-id matrix) rendering category)
                      (add-face (bottom-generic what i j k (- x .5) y z left right bedbottom top back front uv-bottom generic-coordinates lighting rendering block-id variant-id matrix) rendering category)
                      (add-face (top-generic    what i j k (- x .5) y z left right bottom bedtop back front uv-top rotate-coordinates lighting rendering block-id variant-id matrix) rendering category)
                      (add-face (front-generic  what i j k (- x .5) y z left right bottom top back front uv-end generic-coordinates lighting rendering block-id variant-id matrix) rendering category))))))
  visual: add-data-visual
  physical: add-data-physical
  right-mouse: (lambda (section block-id data-id i j k x y z with-field block-ref block-set! data-ref data-set! blocklight-ref blocklight-set! skylight-ref skylight-set!)
                 (when (window?)
                   (let ((world (current-world))
                         (zone (current-zone))
                         (me (current-me)))
                     ;; we cannot spawn on top of the bed because some beds have too low a ceiling over them
                     (let ((spawnpoint (copy-vertex (get-position me))))
                       (set-player-spawnpoint zone spawnpoint)
                       (save-level-state zone))
                     (when (or (> (get-daytime zone) 18500.) (< (get-daytime zone) 6000.))
                       (goto-daytime zone 6000.))
                     (display-message world "Bedpoint set!")))))


(define-block PoweredRail
  27
  category: waiting ;; decoration
  texture: "rail_activator"
  rendering: transparent-rendering
  opaque?: #f
  opaque-cube?: #f
  cube?: #f
  present: 'texture
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (add-rail-gadget what block-id variant-id data-id i j k x y z uv (cache-coordinates "rail_activator_powered") lighting rendering category add-face))
  visual: add-data-visual
  physical: add-data-physical)


(define-block DetectorRail
  28
  category: waiting ;; decoration
  texture: "rail_detector"
  rendering: transparent-rendering
  opaque?: #f
  opaque-cube?: #f
  cube?: #f
  present: 'texture
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (add-rail-gadget what block-id variant-id data-id i j k x y z uv (cache-coordinates "rail_detector_powered") lighting rendering category add-face))
  visual: add-data-visual
  physical: add-data-physical)


(define-block Web
  30
  category: decoration ;; maybe
  kind: web
  texture: "web"
  rendering: transparent-rendering
  opaque?: #f
  opaque-cube?: #f
  cube?: #f
  physical?: #f
  ambient?: #t
  present: 'texture
  opacity: 1)


(define-block Bookshelf
  47
  category: decoration
  texture: "bookshelf"
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (let ((top (cache-coordinates "planks_jungle")))
                (add-cube what i j k x y z uv uv uv top uv uv lighting rendering category block-id variant-id add-face))))


(define-block Torch
  50
  category: decoration
  kind: torch
  texture: "torch_on"
  rendering: transparent-rendering
  opaque?: #f
  opaque-cube?: #f
  cube?: #f
  physical?: #f
  ambient?: #t
  present: '(rotate-y: 45.)
  brightness: 14
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (if (or (= data-id 0) ;; why is this still necessary???
                      (= data-id 5))
                  (add-json-model what "torch.json" block-id variant-id data-id i j k x y z uv lighting rendering category add-face add-cube block-ref data-ref 0. 0.)
                (let ((rot (case data-id
                             ((1) 0.)
                             ((2) 180.)
                             ((3) 90.)
                             ((4) 270.))))
                  (add-json-model what "torch_wall.json" block-id variant-id data-id i j k x y z uv lighting rendering category add-face add-cube block-ref data-ref rot 0.))))
  visual: add-data-visual
  physical: add-data-physical)


(define-block Lamp
  144 ;; head block in minecraft
  category: decoration
  kind: torch
  texture: "lamp_on"
  rendering: transparent-rendering
  opaque?: #f
  opaque-cube?: #f
  cube?: #f
  physical?: #f
  ambient?: #t
  present: '(rotate-y: 45.)
  brightness: 9
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (if (or (= data-id 0) ;; why is this still necessary???
                      (= data-id 5))
                  (add-json-model what "lamp.json" block-id variant-id data-id i j k x y z uv lighting rendering category add-face add-cube block-ref data-ref 0. 0.)
                (let ((rot (case data-id
                             ((1) 0.)
                             ((2) 180.)
                             ((3) 90.)
                             ((4) 270.))))
                  (add-json-model what "lamp_wall.json" block-id variant-id data-id i j k x y z uv lighting rendering category add-face add-cube block-ref data-ref rot 0.))))
  visual: add-data-visual
  physical: add-data-physical)


(define-block Fire
  51
  category: decoration
  kind: fire
  texture: "fire"
  rendering: transparent-rendering
  brightness: 15
  opaque?: #f
  opaque-cube?: #f
  cube?: #f
  physical?: #f
  ambient?: #t
  present: 'texture
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (add-cross-faces what i j k x y z uv lighting rendering category block-id variant-id add-face)
              @w(let ((r (random-integer-between 0 15)))
                (let ((uv (uv-rect (get-coordinates "fire_layer_0") 0. (* r 128.) 128. (* (+ r 1.) 128.))))
                  (add-cross-faces what i j k x y z uv lighting rendering category block-id variant-id add-face)))))


(define-block MonsterSpawner
  52
  category: decoration
  texture: "mob_spawner"
  rendering: transparent-rendering
  opaque?: #f
  opaque-cube?: #f
  translucent-cube?: #t
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (add-cube-faces what i j k x y z uv lighting rendering category block-id variant-id add-face)))


(define-block Chest
  54
  category: decoration
  texture: "chest_top"
  rendering: transparent-rendering
  opaque?: #f
  opaque-cube?: #f
  cube?: #f
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (let ((left (- x 7m))
                    (right (+ x 7m))
                    (bottom (- y block-radius))
                    (top (+ y 7m))
                    (back (- z 7m))
                    (front (+ z 7m)))
                (let ((side-uv (cache-coordinates "chest_side"))
                      (front-uv (cache-coordinates "chest_front"))
                      (back-uv (cache-coordinates "chest_back"))
                      (bottom-uv (cache-coordinates "chest_bottom"))
                      (top-uv uv))
                  (add-face (left-face   what i j k x y z left right bottom top back front side-uv generic-coordinates lighting rendering block-id variant-id) rendering category)
                  (add-face (right-face  what i j k x y z left right bottom top back front side-uv generic-coordinates lighting rendering block-id variant-id) rendering category)
                  (add-face (bottom-face what i j k x y z left right bottom top back front bottom-uv generic-coordinates lighting rendering block-id variant-id) rendering category)
                  (add-face (top-face    what i j k x y z left right bottom top back front top-uv generic-coordinates lighting rendering block-id variant-id) rendering category)
                  (add-face (back-face   what i j k x y z left right bottom top back front back-uv generic-coordinates lighting rendering block-id variant-id) rendering category)
                  (add-face (front-face  what i j k x y z left right bottom top back front front-uv generic-coordinates lighting rendering block-id variant-id) rendering category))))
  visual: add-data-visual
  physical: add-data-physical
  right-mouse: (lambda (section block-id data-id i j k x y z with-field block-ref block-set! data-ref data-set! blocklight-ref blocklight-set! skylight-ref skylight-set!)
                 (when (window?)
                   (with-field i j k
                     (lambda (section index)
                       (updating-sections (current-zone)
                         (lambda (add-section)
                           (add-section section)
                           (let ((world (current-world))
                                 (zone (current-zone))
                                 (index (get-index section))
                                 (coordinates (indexed i j k)))
                             (let ((chest (list section index coordinates))
                                   (data (if #f @wait (client?)
                                             (let ((region (get-region (get-chunk section))))
                                               #f
                                               @cant-find
                                               (retrieve-chest-content (current-client) (get-x region) (get-z region) (index-x index) (index-y index) (index-z index) i j k))
                                           (block-entity-data section coordinates))))
                               (cond ((not (get-opened-chest zone))
                                      (play-ambient-sound "minecraft/random/chestopen" volume: .5)
                                      (show-chest world section data)
                                      (show-character world)
                                      (show-bag world blocks?: #f)
                                      (set-opened-chest zone chest)
                                      (reset-inventory-chest))
                                     ((equal? chest (get-opened-chest zone))
                                      (play-ambient-sound "minecraft/random/chestclosed" volume: .5)
                                      (hide-chest world)
                                      (hide-character world)
                                      (hide-bag world)
                                      (set-opened-chest zone #f))
                                     (else
                                      (play-ambient-sound "minecraft/random/chestopen" volume: .5)
                                      (hide-chest world)
                                      (show-chest world section data)
                                      (hide-character world)
                                      (hide-bag world)
                                      (show-character world)
                                      (show-bag world blocks?: #f)
                                      (set-opened-chest zone chest)
                                      (reset-inventory-chest))))))))))))


(define-block WorkbenchBlock
  58
  category: decoration
  texture: "crafting_table_side"
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (add-cube what i j k x y z uv uv uv (cache-coordinates "crafting_table_top") uv (cache-coordinates "crafting_table_front") lighting rendering category block-id variant-id add-face))
  right-mouse: (lambda (section block-id data-id i j k x y z with-field block-ref block-set! data-ref data-set! blocklight-ref blocklight-set! skylight-ref skylight-set!)
                 (when (window?)
                   (crafting-panel (current-world)))))


(define-block Furnace
  61
  category: decoration
  texture: "furnace_side"
  opaque?: #f
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (let ((key (string-append
                           "facing="
                           (case (bitwise-and data-id #b111)
                             ((3) "south")
                             ((4) "west")
                             ((5) "east")
                             (else "north")))))
                (with-block-state "furnace.json" key
                  (lambda (model rotation-y rotation-x)
                    (add-json-model what model block-id variant-id data-id i j k x y z uv lighting rendering category add-face add-cube block-ref data-ref rotation-y rotation-x)))))
  visual: add-data-visual
  physical: add-data-physical)


(define-block BurningFurnace
  62
  category: waiting ;; technical
  texture: "furnace_front_on"
  opaque?: #f
  brightness: 13
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (let ((key (string-append
                           "facing="
                           (case (bitwise-and data-id #b111)
                             ((3) "south")
                             ((4) "west")
                             ((5) "east")
                             (else "north")))))
                (with-block-state "lit_furnace.json" key
                  (lambda (model rotation-y rotation-x)
                    (add-json-model what model block-id variant-id data-id i j k x y z uv lighting rendering category add-face add-cube block-ref data-ref rotation-y rotation-x)))))
  visual: add-data-visual
  physical: add-data-physical)


(class Sign-Element extends Element
  
  
  (property quad <Quad> initialize #f accessors generate)
  (property data        initialize #f accessors generate)
  
  
  (slot quad-texture <Quad-Texture+> initialize #f)
  
  
  (method override (destroy self)
    (nextmethod self)
    (when quad-texture
      (close quad-texture)))
  
  
  (method override (element-radiuses self)
    (vertex 1. 1. 1.))
  
  
  (method override (lens-center self)
    (matrix-transform matrix (quad-center (get-v1 quad)
                                          (get-v2 quad)
                                          (get-v3 quad)
                                          (get-v4 quad))))
  
  
  (method (sign-quad-texture self)
    (let ((quad-texture <Quad-Texture> (make-quad-texture 100 50 (get-v1 quad) (get-v2 quad) (get-v3 quad) (get-v4 quad))))
      (let ((texture (get-texture quad-texture)))
        (let ((surface (get-surface texture))
              (font {Font font-name: tahoma point-size: 11 antialias: none})
              (color {Color Black})
              (width (get-width texture)))
          (define (draw-line v text)
            (let ((text (effective-sign-text text)))
              (let ((w (get-text-width surface text)))
                (let ((h (fxceiling (/ (cast <fl> (- width w)) 2.))))
                  (draw-text surface h v text color)))))
          
          (clear surface)
          (set-font surface font)
          (draw-line 0 (tag-assoc "Text1" data))
          (draw-line 12 (tag-assoc "Text2" data))
          (draw-line 24 (tag-assoc "Text3" data))
          (draw-line 36 (tag-assoc "Text4" data))
          (flush surface)
          (map-texture texture)))
      quad-texture))
  
  
  (method override (render self)
    (when (not quad-texture)
      (set! quad-texture (sign-quad-texture self)))
    (allege quad-texture
      (draw-texture quad-texture))))


(definition (contains-text? data)
  (and data
       (or (not (equal? (tag-assoc "Text1" data) ""))
           (not (equal? (tag-assoc "Text2" data) ""))
           (not (equal? (tag-assoc "Text3" data) ""))
           (not (equal? (tag-assoc "Text4" data) "")))))


(definition (make-sign-element position v1 v2 v3 v4 matrix data)
  (let ((quad (make-quad #f v1 v2 v3 v4)))
    (let ((elem (new Sign-Element position: position quad: quad data: data))
          (matrix (matrix-multiply& (make-translation-matrix& position) matrix)))
      (set-matrix elem matrix)
      elem)))


;; hacks for minecraft 1.8 format
(definition public (effective-sign-text text)
  (cond ((equal? text "null")
         "")
        ((starts-with? text "\"")
         (substring text 1 (- (string-length text) 1)))
        (else
         text)))


(definition public (find-sign text)
  (let ((context (make-search-context text ignore-case?: #t)))
    (continuation-capture
      (lambda (return)
        (iterate-signs
          (lambda (sign)
            (let ((data (get-data sign)))
              (when (or (search (tag-assoc "Text1" data) context)
                        (search (tag-assoc "Text2" data) context)
                        (search (tag-assoc "Text3" data) context)
                        (search (tag-assoc "Text4" data) context))
                (continuation-return return sign)))))
        #f))))

(definition public (iterate-signs proc)
  (let ((zone (current-zone)))
    (iterate-sectors zone
      (lambda (sector)
        (for-each (lambda (element)
                    (when (is? element Sign-Element)
                      (proc element)))
                  (get-texture-elements sector))))))

(definition (section-position& section)
  (let ((section-y (get-y section))
        (chunk (get-chunk section)))
    (let ((region (get-region chunk)))
      (let ((region-x (get-x region))
            (region-z (get-z region))
            (chunk-x (get-x chunk))
            (chunk-z (get-z chunk)))
        (let ((position-x (cast <fl> (+ (* region-x 32 16) (* chunk-x 16))))
              (position-y (cast <fl> (+ (* section-y 16))))
              (position-z (cast <fl> (+ (* region-z 32 16) (* chunk-z 16)))))
          (vertex& position-x position-y position-z))))))


(define-block SignPost
  63
  category: decoration
  kind: signs
  texture: "planks_birch"
  rendering: transparent-rendering
  opaque?: #f
  opaque-cube?: #f
  cube?: #f
  physical?: #f
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (let ((matrix (make-lookat-matrix& (horizon-lookat&^ (rotate-vertex-upon& (- (* (cast <fl> data-id) PI/8)) (vertex& 0. 1. 0.) (vertex& 0. 0. 1.))))))
                ;; sign
                (let ((left (- block-radius))
                      (right (+ block-radius))
                      (bottom 0.)
                      (top (+ block-radius))
                      (back (- .05))
                      (front (+ .05)))
                  (add-cuboid-generic what i j k x y z left right bottom top back front uv lighting rendering category block-id variant-id matrix add-face)
                  ;; post
                  (let ((left (- .05))
                        (right (+ .05))
                        (bottom (- block-radius))
                        (top 0.)
                        (back (- .05))
                        (front (+ .05)))
                    (add-cuboid-generic what i j k x y z left right bottom top back front uv lighting rendering category block-id variant-id matrix add-face)))))
  visual: (lambda (block-id <fx> data-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> rendering category add-template add-opaque-cube add-translucent-cube add-liquid-cube add-texture-element block-ref data-ref)
            (add-visual-template block-id data-id data-id i j k x y z #f rendering category add-template block-ref data-ref)
            ;; text
            (add-texture-element
              (lambda (section adder)
                (let ((data (block-entity-data section (indexed i j k))))
                  (when (contains-text? data)
                    (let ((matrix (make-lookat-matrix& (horizon-lookat&^ (rotate-vertex-upon& (- (* (cast <fl> data-id) PI/8)) (vertex& 0. 1. 0.) (vertex& 0. 0. 1.))))))
                      (let ((left (- block-radius))
                            (right (+ block-radius))
                            (bottom 0.)
                            (top (+ block-radius))
                            (back (- .05))
                            (front (+ .05)))
                        (let ((front (+ front add-epsilon)))
                          (let ((v1 (vertex left top front))
                                (v2 (vertex left bottom front))
                                (v3 (vertex right bottom front))
                                (v4 (vertex right top front)))
                            (adder
                              (make-sign-element (vertex+& (section-position& section) (vertex& x y z)) v1 v2 v3 v4 matrix data)))))))))))
  physical: add-data-physical
  right-mouse: (lambda (section block-id data-id i j k x y z with-field block-ref block-set! data-ref data-set! blocklight-ref blocklight-set! skylight-ref skylight-set!)
                 (when (window?)
                   (invoke-block-hook (vertex x y z))))
  double-click: (lambda (section block-id data-id i j k x y z with-field block-ref block-set! data-ref data-set! blocklight-ref blocklight-set! skylight-ref skylight-set!)
                  (when (window?)
                    (edit-sign section (indexed i j k)))))


(define-block Ladder
  65
  category: decoration
  kind: ladder
  texture: "ladder"
  rendering: transparent-rendering
  opaque?: #f
  opaque-cube?: #f
  cube?: #f
  ambient?: #t
  present: 'texture
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (add-transparent what block-id variant-id (bitwise-and data-id #b111) 5 4 3 2 i j k x y z uv lighting rendering category add-face))
  visual: add-data-visual
  physical: add-data-physical)


(define-block Rail
  66
  category: decoration
  kind: transportation
  texture: "rail_normal"
  rendering: transparent-rendering
  opaque?: #f
  opaque-cube?: #f
  cube?: #f
  present: 'texture
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (add-rail what block-id variant-id data-id i j k x y z uv lighting rendering category add-face))
  visual: add-data-visual
  physical: add-data-physical)


(define-block WallSign
  68
  category: decoration
  kind: signs
  texture: "planks_birch"
  rendering: transparent-rendering
  opaque?: #f
  opaque-cube?: #f
  cube?: #f
  physical?: #f
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (let ((left (- block-radius))
                    (right (+ block-radius))
                    (bottom (- (/ block-radius 2.)))
                    (top (+ (/ block-radius 2.)))
                    (back (+ (- block-radius) .025))
                    (front (+ (- block-radius) .125)))
                (let ((matrix (make-lookat-matrix& (horizon-lookat&^ (case data-id
                                                                       ((2) (vertex&  0. 0. -1.))
                                                                       ((3) (vertex&  0. 0.  1.))
                                                                       ((4) (vertex& -1. 0.  0.))
                                                                       (else (vertex&  1. 0.  0.)))))))
                  ;; sign
                  (add-cuboid-generic what i j k x y z left right bottom top back front uv lighting rendering category block-id variant-id matrix add-face))))
  visual: (lambda (block-id <fx> data-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> rendering category add-template add-opaque-cube add-translucent-cube add-liquid-cube add-texture-element block-ref data-ref)
            (add-visual-template block-id data-id data-id i j k x y z #f rendering category add-template block-ref data-ref)
            ;; text
            (add-texture-element
              (lambda (section adder)
                (let ((data (block-entity-data section (indexed i j k))))
                  (when (contains-text? data)
                    (let ((matrix (make-lookat-matrix& (horizon-lookat&^ (case data-id
                                                                           ((2) (vertex&  0. 0. -1.))
                                                                           ((3) (vertex&  0. 0.  1.))
                                                                           ((4) (vertex& -1. 0.  0.))
                                                                           ((5) (vertex&  1. 0.  0.)))))))
                      (let ((left (- block-radius))
                            (right (+ block-radius))
                            (bottom (- (/ block-radius 2.)))
                            (top (+ (/ block-radius 2.)))
                            (back (+ (- block-radius) .025))
                            (front (+ (- block-radius) .125)))
                        (let ((front (+ front add-epsilon)))
                          (let ((v1 (vertex left top front))
                                (v2 (vertex left bottom front))
                                (v3 (vertex right bottom front))
                                (v4 (vertex right top front)))
                            (adder
                              (make-sign-element (vertex+& (section-position& section) (vertex& x y z)) v1 v2 v3 v4 matrix data)))))))))))
  physical: add-data-physical
  right-mouse: (lambda (section block-id data-id i j k x y z with-field block-ref block-set! data-ref data-set! blocklight-ref blocklight-set! skylight-ref skylight-set!)
                 (when (window?)
                   (invoke-block-hook (vertex x y z))))
  double-click: (lambda (section block-id data-id i j k x y z with-field block-ref block-set! data-ref data-set! blocklight-ref blocklight-set! skylight-ref skylight-set!)
                  (when (window?)
                    (edit-sign section (indexed i j k)))))


(definition (edit-sign section coordinates)
  (let ((data (block-entity-data section coordinates)))
    (let ((texts (if (contains-text? data)
                     (list (effective-sign-text (tag-assoc "Text1" data))
                           (effective-sign-text (tag-assoc "Text2" data))
                           (effective-sign-text (tag-assoc "Text3" data))
                           (effective-sign-text (tag-assoc "Text4" data)))
                   #f)))
      (open-sign
        initial-value: texts
        action: (lambda (texts)
                  (updating-sections (current-zone)
                    (lambda (add-section)
                      (add-section section)
                      (add-sign (get-chunk section) (section/coordinates->location section coordinates) texts))))))))


(define-block Cactus
  81
  category: decoration
  kind: veggieblock
  texture: "cactus_side"
  rendering: transparent-rendering
  opaque?: #f
  opaque-cube?: #f
  cube?: #f
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (let ((left (- x 7m))
                    (right (+ x 7m))
                    (bottom (- y block-radius))
                    (top (+ y block-radius))
                    (back (- z 7m))
                    (front (+ z 7m))
                    (far-left (if (eq? what 'physical) (- x 7m) (- x block-radius)))
                    (far-right (if (eq? what 'physical) (+ x 7m) (+ x block-radius)))
                    (far-front (if (eq? what 'physical) (+ z 7m) (+ z block-radius)))
                    (far-back (if (eq? what 'physical) (- z 7m) (- z block-radius)))
                    (top-uv (cache-coordinates "cactus_top"))
                    (bottom-uv (cache-coordinates "cactus_bottom")))
                (add-face (left-face   what i j k x y z left right bottom top far-back far-front uv generic-coordinates lighting rendering block-id variant-id) rendering category)
                (add-face (right-face  what i j k x y z left right bottom top far-back far-front uv generic-coordinates lighting rendering block-id variant-id) rendering category)
                (add-face (back-face   what i j k x y z far-left far-right bottom top back front uv generic-coordinates lighting rendering block-id variant-id) rendering category)
                (add-face (front-face  what i j k x y z far-left far-right bottom top back front uv generic-coordinates lighting rendering block-id variant-id) rendering category)
                (unless (bit-set? 1 config-id)
                  (add-face (top-face what i j k x y z far-left far-right bottom top far-back far-front top-uv generic-coordinates lighting rendering block-id variant-id) rendering category))
                (unless (bit-set? 0 config-id)
                  (add-face (bottom-face what i j k x y z far-left far-right bottom top far-back far-front bottom-uv generic-coordinates lighting rendering block-id variant-id) rendering category))))
  visual: (lambda (block-id <fx> data-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> rendering category add-template add-opaque-cube add-translucent-cube add-liquid-cube add-texture-element block-ref data-ref)
            (let ((config-id (cactus-configuration i j k block-ref)))
              (add-visual-template block-id data-id config-id i j k x y z #f rendering category add-template block-ref data-ref)))
  physical: (lambda (block-id <fx> data-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> add-template add-liquid-cube block-ref data-ref)
              (let ((config-id (cactus-configuration i j k block-ref)))
                (add-physical-template block-id data-id config-id i j k x y z add-template block-ref data-ref))))


(definition (cactus-configuration i j k block-ref)
  (define (connects? dj <fx>)
    (id? (block-ref i (+ j dj) k) Cactus))
  
  (bitwise-ior
    (if (connects? -1) 1 0)
    (if (connects?  1) 2 0)))


(definition jukebox-playing
  #f)

(definition (jukebox-change x y z)
  (if (not jukebox-playing)
      (jukebox-play x y z)
    (jukebox-stop)
    (jukebox-play x y z)))

(definition (jukebox-toggle x y z)
  (if (not jukebox-playing)
      (jukebox-play x y z)
    (jukebox-stop)))

(definition (jukebox-play x y z)
  (let ((world (current-world))
        (music (current-music)))
    (unless (processing?)
      (let ((asset (random-music music)))
        (if (not asset)
            (display-error world "No music found")
          (let ((file (effective-music music asset)))
            (let ((song (new-song file)))
              (set! jukebox-playing song)
              (play-3d-song song (vertex x y z) close?: #t))))))))

(definition (jukebox-stop)
  (when jukebox-playing
    (unregister-playing-song jukebox-playing)
    (unregister-3d-audible jukebox-playing)
    (close jukebox-playing)
    (set! jukebox-playing #f)))


(define-block Jukebox
  84
  category: decoration
  texture: "jukebox_side"
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (add-cube what i j k x y z uv uv uv (cache-coordinates "jukebox_top") uv uv lighting rendering category block-id variant-id add-face))
  right-mouse: (lambda (section block-id data-id i j k x y z with-field block-ref block-set! data-ref data-set! blocklight-ref blocklight-set! skylight-ref skylight-set!)
                 (jukebox-change x y z))
  double-click: (lambda (section block-id data-id i j k x y z with-field block-ref block-set! data-ref data-set! blocklight-ref blocklight-set! skylight-ref skylight-set!)
                  (jukebox-toggle x y z)))


(define-block Fence
  85
  category: decoration
  kind: fence
  texture: "planks_oak"
  rendering: transparent-rendering
  opaque?: #f
  opaque-cube?: #f
  cube?: #f
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (add-fence what block-id variant-id config-id i j k x y z uv lighting rendering category add-face block-ref))
  visual: (lambda (block-id <fx> data-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> rendering category add-template add-opaque-cube add-translucent-cube add-liquid-cube add-texture-element block-ref data-ref)
            (let ((config-id (fence-configuration i j k block-ref '(85 @quick-hack-to-remove-all-doors 107))))
              (add-visual-template block-id data-id config-id i j k x y z #f rendering category add-template block-ref data-ref)))
  physical: (lambda (block-id <fx> data-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> add-template add-liquid-cube block-ref data-ref)
              (let ((config-id (fence-configuration i j k block-ref '(85 @quick-hack-to-remove-all-doors 107))))
                (add-physical-template block-id data-id config-id i j k x y z add-template block-ref data-ref))))


(define-block Pumpkin
  86
  category: decoration
  kind: veggieblock
  texture: "pumpkin_side"
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (let ((key (string-append
                           "facing="
                           (case (bitwise-and data-id #b11)
                             ((0) "south")
                             ((1) "west")
                             ((2) "north")
                             (else "east")))))
                (with-block-state "pumpkin.json" key
                  (lambda (model rotation-y rotation-x)
                    (add-json-model what model block-id variant-id data-id i j k x y z uv lighting rendering category add-face add-cube block-ref data-ref rotation-y rotation-x)))))
  visual: add-data-visual
  physical: add-data-physical)


;; improve
(define-block Portal
  90
  category: decoration
  kind: portal
  ;rendering: multitexture-rendering
  texture: "portal"
  opaque?: #f
  opaque-cube?: #f
  cube?: #f
  ambient?: #t
  present: '(rotate-z: 30.))


(define-block JackOLantern
  91
  category: decoration
  kind: veggieblock
  texture: "pumpkin_top"
  opaque?: #f
  brightness: 15
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (let ((key (string-append
                           "facing="
                           (case (bitwise-and data-id #b11)
                             ((0) "south")
                             ((1) "west")
                             ((2) "north")
                             (else "east")))))
                (with-block-state "lit_pumpkin.json" key
                  (lambda (model rotation-y rotation-x)
                    (add-json-model what model block-id variant-id data-id i j k x y z uv lighting rendering category add-face add-cube block-ref data-ref rotation-y rotation-x)))))
  visual: add-data-visual
  physical: add-data-physical)


(define-block CakeBlock
  92
  category: decoration
  kind: cake
  texture: "cake_side"
  rendering: transparent-rendering
  opaque?: #f
  opaque-cube?: #f
  cube?: #f
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (let ((margin 1m)
                    (half (/ 1. 32.)))
                (let ((left (+ (- x block-radius) margin))
                      (right (- (+ x block-radius) margin))
                      (bottom (- y block-radius))
                      (top y)
                      (back (+ (- z block-radius) margin))
                      (front (- (+ z block-radius) margin))
                      (side-uv uv)
                      (bottom-uv (cache-coordinates "cake_bottom"))
                      (top-uv (cache-coordinates "cake_top")))
                  (add-face (left-face   what i j k x y z left right bottom top back front side-uv generic-coordinates lighting rendering block-id variant-id) rendering category)
                  (add-face (right-face  what i j k x y z left right bottom top back front side-uv generic-coordinates lighting rendering block-id variant-id) rendering category)
                  (add-face (bottom-face what i j k x y z left right bottom top back front bottom-uv generic-coordinates lighting rendering block-id variant-id) rendering category)
                  (add-face (top-face    what i j k x y z left right bottom top back front top-uv generic-coordinates lighting rendering block-id variant-id) rendering category)
                  (add-face (back-face   what i j k x y z left right bottom top back front side-uv generic-coordinates lighting rendering block-id variant-id) rendering category)
                  (add-face (front-face  what i j k x y z left right bottom top back front side-uv generic-coordinates lighting rendering block-id variant-id) rendering category)))))


;; improve
(define-block LockedChest
  95
  category: waiting ;; decoration
  texture: "piston_top_normal"
  cube?: #f)


(define-block BrownMushroomCap
  99
  category: decoration
  kind: veggieblock
  texture: "mushroom_block_skin_brown")


(define-block RedMushroomCap
  100
  category: decoration
  kind: veggieblock
  texture: "mushroom_block_skin_red")


(define-block MelonBlock
  103
  category: decoration
  kind: veggieblock
  texture: "melon_side"
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (let ((top (cache-coordinates "melon_top")))
                (add-cube what i j k x y z uv uv top top uv uv lighting rendering category block-id variant-id add-face))))


(define-block EnchantmentTable
  116
  category: decoration
  texture: "enchanting_table_side"
  opaque?: #f
  opaque-cube?: #f
  cube?: #f
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (let ((margin 4m))
                (let ((left (- x block-radius))
                      (right (+ x block-radius))
                      (bottom (- y block-radius))
                      (top (+ y margin))
                      (back (- z block-radius))
                      (front (+ z block-radius))
                      (top-uv (cache-coordinates "enchanting_table_top"))
                      (bottom-uv (cache-coordinates "enchanting_table_bottom")))
                  (add-face (top-face    what i j k x y z left right bottom top back front top-uv generic-coordinates lighting rendering block-id variant-id) rendering category)
                  (add-face (bottom-face what i j k x y z left right bottom top back front bottom-uv generic-coordinates lighting rendering block-id variant-id) rendering category)
                  (add-face (left-face   what i j k x y z left right bottom top back front uv generic-coordinates lighting rendering block-id variant-id) rendering category)
                  (add-face (right-face  what i j k x y z left right bottom top back front uv generic-coordinates lighting rendering block-id variant-id) rendering category)
                  (add-face (back-face   what i j k x y z left right bottom top back front uv generic-coordinates lighting rendering block-id variant-id) rendering category)
                  (add-face (front-face  what i j k x y z left right bottom top back front uv generic-coordinates lighting rendering block-id variant-id) rendering category)))))


(define-block BrewingStand
  117
  category: decoration
  texture: "brewing_stand"
  rendering: transparent-rendering
  opaque?: #f
  opaque-cube?: #f
  cube?: #f
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (let ((key (string-append
                           "has_bottle_0="
                           (if (bit-set? 0 data-id)
                               "true"
                             "false")
                           ",has_bottle_1="
                           (if (bit-set? 1 data-id)
                               "true"
                             "false")
                           ",has_bottle_2="
                           (if (bit-set? 2 data-id)
                               "true"
                             "false"))))
                (with-block-state (if (eq? what 'physical) "brewing_stand_p.json" "brewing_stand.json") key
                  (lambda (model rotation-y rotation-x)
                    (add-json-model what model block-id variant-id data-id i j k x y z uv lighting rendering category add-face add-cube block-ref data-ref rotation-y rotation-x)))))
  visual: add-data-visual
  physical: add-data-physical)


(define-block Cauldron
  118
  category: decoration
  texture: "cauldron_side"
  rendering: transparent-rendering
  opaque?: #f
  opaque-cube?: #f
  cube?: #f
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (let ((margin 4m)
                    (half 2m))
                (let ((left (- x block-radius))
                      (right (+ x block-radius))
                      (bottom (- y block-radius))
                      (top (+ y block-radius))
                      (back (- z block-radius))
                      (front (+ z block-radius))
                      (top-uv (cache-coordinates "cauldron_top"))
                      (bottom-uv (cache-coordinates "cauldron_bottom"))
                      (inner-uv (cache-coordinates "cauldron_inner")))
                  (add-face (top-face    what i j k x y z left right bottom top back front top-uv generic-coordinates lighting rendering block-id variant-id) rendering category)
                  (add-face (bottom-face what i j k x y z left right bottom top back front bottom-uv generic-coordinates lighting rendering block-id variant-id) rendering category)
                  (add-face (left-face   what i j k x y z left right bottom top back front uv generic-coordinates lighting rendering block-id variant-id) rendering category)
                  (add-face (right-face  what i j k x y z left right bottom top back front uv generic-coordinates lighting rendering block-id variant-id) rendering category)
                  (add-face (back-face   what i j k x y z left right bottom top back front uv generic-coordinates lighting rendering block-id variant-id) rendering category)
                  (add-face (front-face  what i j k x y z left right bottom top back front uv generic-coordinates lighting rendering block-id variant-id) rendering category)
                  (add-face (left-face   what i j k x y z (+ left half) (- right half) bottom top (+ back half) (- front half) uv generic-coordinates lighting rendering block-id variant-id) rendering category)
                  (add-face (right-face  what i j k x y z (+ left half) (- right half) bottom top (+ back half) (- front half) uv generic-coordinates lighting rendering block-id variant-id) rendering category)
                  (add-face (back-face   what i j k x y z (+ left half) (- right half) bottom top (+ back half) (- front half) uv generic-coordinates lighting rendering block-id variant-id) rendering category)
                  (add-face (front-face  what i j k x y z (+ left half) (- right half) bottom top (+ back half) (- front half) uv generic-coordinates lighting rendering block-id variant-id) rendering category)
                  (add-face (top-face    what i j k x y z left right bottom (+ bottom margin) back front inner-uv generic-coordinates lighting rendering block-id variant-id) rendering category)
                  (if (and (eq? what 'visual) (> data-id 0))
                      (let ((water-uv (cache-coordinates "water"))
                            (wtop (+ y (* 3m (- data-id 1)))))
                        (add-face (top-face what i j k x y z left right bottom wtop back front water-uv generic-coordinates lighting rendering block-id variant-id) rendering category))))))
  visual: add-data-visual
  physical: add-data-physical)


;; improve
(define-block EndPortal
  119
  category: waiting ;; decoration
  texture: "stone_slab_top"
  opaque?: #f
  opaque-cube?: #f
  cube?: #f
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (add-slab what i j k x y z uv uv lighting rendering category block-id variant-id add-face)))


(define-block EndPortalFrame
  120
  category: waiting ;; decoration
  texture: "endframe_side"
  rendering: transparent-rendering
  opaque?: #f
  opaque-cube?: #f
  cube?: #f
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (let ((margin 5m))
                (let ((left (- x block-radius))
                      (right (+ x block-radius))
                      (bottom (- y block-radius))
                      (top (+ y margin))
                      (back (- z block-radius))
                      (front (+ z block-radius))
                      (top-uv (cache-coordinates "endframe_top"))
                      (bottom-uv (cache-coordinates "end_stone")))
                  (add-face (top-face    what i j k x y z left right bottom top back front top-uv generic-coordinates lighting rendering block-id variant-id) rendering category)
                  (add-face (bottom-face what i j k x y z left right bottom top back front bottom-uv generic-coordinates lighting rendering block-id variant-id) rendering category)
                  (add-face (left-face   what i j k x y z left right bottom top back front uv generic-coordinates lighting rendering block-id variant-id) rendering category)
                  (add-face (right-face  what i j k x y z left right bottom top back front uv generic-coordinates lighting rendering block-id variant-id) rendering category)
                  (add-face (back-face   what i j k x y z left right bottom top back front uv generic-coordinates lighting rendering block-id variant-id) rendering category)
                  (add-face (front-face  what i j k x y z left right bottom top back front uv generic-coordinates lighting rendering block-id variant-id) rendering category)))
              (when (= data-id 4)
                (let ((margin 4m))
                  (let ((top (+ y block-radius))
                        (bottom (+ y 5m))
                        (left (- x margin))
                        (right (+ x margin))
                        (back (- z margin))
                        (front (+ z margin))
                        (side-uv (cache-coordinates "endframe_eye_side"))
                        (top-uv (cache-coordinates "endframe_eye")))
                    (add-face (left-face  what i j k x y z left right bottom top back front side-uv generic-coordinates lighting rendering block-id variant-id) rendering category)
                    (add-face (right-face what i j k x y z left right bottom top back front side-uv generic-coordinates lighting rendering block-id variant-id) rendering category)
                    (add-face (front-face what i j k x y z left right bottom top back front side-uv generic-coordinates lighting rendering block-id variant-id) rendering category)
                    (add-face (back-face  what i j k x y z left right bottom top back front side-uv generic-coordinates lighting rendering block-id variant-id) rendering category)
                    (add-face (top-face   what i j k x y z left right bottom top back front top-uv generic-coordinates lighting rendering block-id variant-id) rendering category)))))
  visual: add-data-visual
  physical: add-data-physical)


;; improve
(define-block EnderChest
  130
  category: waiting ;; decoration
  texture: "farmland_wet"
  opaque?: #f
  opaque-cube?: #f
  cube?: #f)


;; improve
(define-block BeaconBlock
  138
  category: decoration
  texture: "beacon"
  opaque?: #f
  cube?: #f
  brightness: 15)


;; improve
(define-block FlowerPot
  140
  category: waiting ;; decoration
  texture: "farmland_wet"
  opaque-cube?: #f
  cube?: #f)


;; improve
(define-block Carrots
  141
  category: waiting ;; decoration
  texture: "farmland_wet"
  rendering: transparent-rendering
  opaque-cube?: #f
  cube?: #f)


;; improve
(define-block Potatoes
  142
  category: waiting ;; decoration
  texture: "farmland_wet"
  rendering: transparent-rendering
  opaque-cube?: #f
  cube?: #f)


;; ugly copy/paste of chest
(define-block TrappedChest
  146
  category: decoration
  texture: "chest_top"
  rendering: transparent-rendering
  opaque?: #f
  opaque-cube?: #f
  cube?: #f
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (let ((left (- x 7m))
                    (right (+ x 7m))
                    (bottom (- y block-radius))
                    (top (+ y 7m))
                    (back (- z 7m))
                    (front (+ z 7m)))
                (let ((side-uv (cache-coordinates "chest_side"))
                      (front-uv (cache-coordinates "chest_front"))
                      (back-uv (cache-coordinates "chest_back"))
                      (bottom-uv (cache-coordinates "chest_bottom"))
                      (top-uv uv))
                  (add-face (left-face   what i j k x y z left right bottom top back front side-uv generic-coordinates lighting rendering block-id variant-id) rendering category)
                  (add-face (right-face  what i j k x y z left right bottom top back front side-uv generic-coordinates lighting rendering block-id variant-id) rendering category)
                  (add-face (bottom-face what i j k x y z left right bottom top back front bottom-uv generic-coordinates lighting rendering block-id variant-id) rendering category)
                  (add-face (top-face    what i j k x y z left right bottom top back front top-uv generic-coordinates lighting rendering block-id variant-id) rendering category)
                  (add-face (back-face   what i j k x y z left right bottom top back front back-uv generic-coordinates lighting rendering block-id variant-id) rendering category)
                  (add-face (front-face  what i j k x y z left right bottom top back front front-uv generic-coordinates lighting rendering block-id variant-id) rendering category))))
  visual: add-data-visual
  physical: add-data-physical
  right-mouse: (lambda (section block-id data-id i j k x y z with-field block-ref block-set! data-ref data-set! blocklight-ref blocklight-set! skylight-ref skylight-set!)
                 (when (window?)
                   (with-field i j k
                     (lambda (section index)
                       (updating-sections (current-zone)
                         (lambda (add-section)
                           (add-section section)
                           (let ((world (current-world))
                                 (zone (current-zone))
                                 (index (get-index section))
                                 (coordinates (indexed i j k)))
                             (let ((chest (list section index coordinates))
                                   (data (if #f @wait (client?)
                                             (let ((region (get-region (get-chunk section))))
                                               #f
                                               @cant-find
                                               (retrieve-chest-content (current-client) (get-x region) (get-z region) (index-x index) (index-y index) (index-z index) i j k))
                                           (block-entity-data section coordinates))))
                               (cond ((not (get-opened-chest zone))
                                      (play-ambient-sound "minecraft/random/chestopen" volume: .5)
                                      (show-chest world section data)
                                      (show-character world)
                                      (show-bag world blocks?: #f)
                                      (set-opened-chest zone chest)
                                      (reset-inventory-chest))
                                     ((equal? chest (get-opened-chest zone))
                                      (play-ambient-sound "minecraft/random/chestclosed" volume: .5)
                                      (hide-chest world)
                                      (hide-character world)
                                      (hide-bag world)
                                      (set-opened-chest zone #f))
                                     (else
                                      (play-ambient-sound "minecraft/random/chestopen" volume: .5)
                                      (hide-chest world)
                                      (show-chest world section data)
                                      (hide-character world)
                                      (hide-bag world)
                                      (show-character world)
                                      (show-bag world blocks?: #f)
                                      (set-opened-chest zone chest)
                                      (reset-inventory-chest))))))))))))


(define-block Hopper
  154
  category: decoration
  kind: veggieblock ;; not really!
  texture: "pumpkin_top" ;; quicky
  opaque?: #f
  brightness: 15
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (let ((key (string-append
                           "facing="
                           (case (bitwise-and data-id #b111)
                             ((0) "down")
                             ((2) "north")
                             ((3) "south")
                             ((4) "west")
                             ((5) "east")))))
                (with-block-state "hopper.json" key
                  (lambda (model rotation-y rotation-x)
                    (add-json-model what model block-id variant-id data-id i j k x y z uv lighting rendering category add-face add-cube block-ref data-ref rotation-y rotation-x)))))
  visual: add-data-visual
  physical: add-data-physical))
