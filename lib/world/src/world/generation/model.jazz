;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Generation Model
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;    Edouard Hebert


(module world.generation.model jazz


(import (jazz.audio)
        (jazz.geometry)
        (jazz.graphic)
        (jazz.io)
        (jazz.json)
        (world)
        (world.autoload)
        (world.biome)
        (world.context)
        (world.generation)
        (world.generation.base)
        (world.generation.block)
        (world.generation.categories)
        (world.generation.rendering)
        (world.geometry)
        (world.index)
        (world.interface.inventory)
        (world.interface.sign)
        (world.quad)
        (world.quad-texture)
        (world.sound)
        (world.syntax (phase syntax))
        (world.tag)
        (world.texture))


;;;
;;;; State
;;;


(definition block-states
  (make-table))

(definition block-states-dir
  {Directory Application-World "assets" "minecraft" "states"})

(definition protected (with-block-state filename key proc)
  (let ((variants (cache-block-states filename)))
    (let ((variant (table-ref variants key)))
      (let ((model (string-append (table-ref variant "model") ".json"))
            (rotation-y (table-ref variant "y" 0))
            (rotation-x (table-ref variant "x" 0)))
        (proc model rotation-y rotation-x)))))

(definition (cache-block-states filename)
  (or (table-ref block-states filename #f)
      (let ((file (new-file block-states-dir (list texture-dirname filename))))
        (if (exists? file)
            (let ((variants (table-ref (load-json file) "variants")))
              (table-set! block-states filename variants)
              variants)
          (let ((variants (table-ref (load-json (new-file block-states-dir (list "minecraft" filename))) "variants")))
            (table-set! block-states filename variants)
            variants)))))


;;;
;;;; Model
;;;


(definition block-models-dir
  {Directory Application-World "assets" "minecraft" "models"})


(definition protected (load-block-model filename)
  (let ((file (new-file block-models-dir (list texture-dirname filename))))
    (if (exists? file)
        (load-json file)
      (load-json (new-file block-models-dir (list "minecraft" filename))))))


(definition protected (read-json-model proc filename (previous-textures #f))
  (let ((models (load-block-model filename)))
    (let ((has-parent? (table-ref models "parent" #f))
          (textures (or (table-ref models "textures" #f) previous-textures)))
      (when (and previous-textures (table-ref models "textures" #f))
        (iterate-table textures
          (lambda (key value)
            (table-set! textures key (or (table-ref previous-textures (string-trailer value #\#) #f) value))))
        (table-iterate previous-textures
          (lambda (key value)
            (unless (table-ref textures key #f)
              (table-set! textures key value)))))
      (if has-parent?
          (read-json-model proc (string-append (string-trailer has-parent? #\/) ".json") textures)
        (iterate-table textures
          (lambda (key value)
            (table-set! textures key (string-trailer value #\/))))
        (proc (table-ref models "elements") textures)))))


(definition protected (add-json-model what filename block-id variant-id data-id i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv lighting rendering category add-face add-cube block-ref data-ref y-rotation x-rotation)
  (read-json-model
    (lambda (elements textures)
      (let ((matrix (matrix-multiply (make-y-rotation-matrix (degree->radian (cast <fl> y-rotation)))
                                     (make-x-rotation-matrix (degree->radian (cast <fl> x-rotation))))))
        (for-each (lambda (element)
                    (define (get-file-texture face-name)
                      (let ((face (table-ref (table-ref element "faces") face-name #f)))
                        (and face
                             (if (id? block-id 55)
                                 (let ((texture-name (string-trailer (table-ref face "texture") #\#)))
                                   (and (not (ends-with? texture-name "overlay"))
                                        (let ((texture (cache-coordinates (string-append (table-ref textures texture-name) "_" (->string data-id)))))
                                          (bind (l t r b) (map (lambda (x) (/ (cast <fl> x) 16.)) (table-ref face "uv"))
                                            (uv-rect texture l t r b)))))
                               (let ((texture (cache-coordinates (table-ref textures (string-trailer (table-ref face "texture") #\#)))))
                                 (bind (l t r b) (map (lambda (x) (/ (cast <fl> x) 16.)) (table-ref face "uv" '(0 0 16 16)))
                                   (uv-rect texture l t r b)))))))
                    
                    (define (get-texture-rotation face-name)
                      (let ((face (table-ref (table-ref element "faces") face-name #f)))
                        (and face
                             (let ((rot (or (table-ref face "rotation" #f) 0)))
                               (case rot
                                 ((0)   generic-coordinates)
                                 ((90)  rotate-inverse-coordinates)
                                 ((180) rotate-other-coordinates)
                                 ((270) rotate-coordinates))))))
                    
                    (define (get-element-matrix)
                      (let ((rotation (table-ref element "rotation" #f)))
                        (and rotation
                             (bind (x y z) (map (lambda (r) (/ (cast <fl> r) 16.)) (table-ref rotation "origin"))
                               (let ((origin (vertex (- .5 x) (- .5 y) (- .5 z)))
                                     (rotation-matrix (case (string->symbol (table-ref rotation "axis"))
                                                        ((x) (make-x-rotation-matrix (degree->radian (cast <fl> (table-ref rotation "angle")))))
                                                        ((y) (make-y-rotation-matrix (- (degree->radian (cast <fl> (table-ref rotation "angle"))))))
                                                        ((z) (make-z-rotation-matrix (- (degree->radian (cast <fl> (table-ref rotation "angle")))))))))
                                 (matrix-multiply (make-translation-matrix (vertex-negate origin))
                                                  (matrix-multiply rotation-matrix (make-translation-matrix origin))))))))
                    
                    (bind (a b c) (map (lambda (x) (/ (cast <fl> x) 16.)) (table-ref element "from"))
                      (bind (d e f) (map (lambda (x) (/ (cast <fl> x) 16.)) (table-ref element "to"))
                        (unless (and (= a d) (= b e) (= c f))
                          (let ((left (- a .5))
                                (right (- d .5))
                                (bottom (- b .5))
                                (top (- e .5))
                                (back (- c .5))
                                (front (- f .5))
                                (left-uv (get-file-texture "west"))
                                (right-uv (get-file-texture "east"))
                                (bottom-uv (get-file-texture "down"))
                                (top-uv (get-file-texture "up"))
                                (back-uv (get-file-texture "north"))
                                (front-uv (get-file-texture "south"))
                                (left-rotation (get-texture-rotation "west"))
                                (right-rotation (get-texture-rotation "east"))
                                (bottom-rotation (get-texture-rotation "down"))
                                (top-rotation (get-texture-rotation "up"))
                                (back-rotation (get-texture-rotation "north"))
                                (front-rotation (get-texture-rotation "south"))
                                (element-matrix (get-element-matrix)))
                            (let ((matrix (if element-matrix (matrix-multiply matrix element-matrix) matrix)))
                              (when left-uv   (add-face (left-generic   what i j k x y z left right bottom top back front left-uv left-rotation lighting rendering block-id variant-id matrix) rendering category))
                              (when right-uv  (add-face (right-generic  what i j k x y z left right bottom top back front right-uv right-rotation lighting rendering block-id variant-id matrix) rendering category))
                              (when bottom-uv (add-face (bottom-generic what i j k x y z left right bottom top back front bottom-uv bottom-rotation lighting rendering block-id variant-id matrix) rendering category))
                              (when top-uv    (add-face (top-generic    what i j k x y z left right bottom top back front top-uv top-rotation lighting rendering block-id variant-id matrix) rendering category))
                              (when back-uv   (add-face (back-generic   what i j k x y z left right bottom top back front back-uv back-rotation lighting rendering block-id variant-id matrix) rendering category))
                              (when front-uv  (add-face (front-generic  what i j k x y z left right bottom top back front front-uv front-rotation lighting rendering block-id variant-id matrix) rendering category))))))))
                  elements)))
    filename))


;;;
;;;; Door
;;;


(definition protected (door-configuration i j k data-id data-ref)
  (let ((top? (bit-set? 3 data-id)))
    (let ((top-data (if top? data-id (data-ref i (+ j 1) k)))
          (bottom-data (if top? (data-ref i (- j 1) k) data-id)))
      (bitwise-ior
        (bitwise-and bottom-data #b11)
        (if (bit-set? 0 top-data) 4 0)
        (if (bit-set? 2 bottom-data) 8 0)
        (if (bit-set? 3 data-id) 16 0)))))


(definition protected (choose-door-model what filename block-id variant-id data-id config-id i j k x y z uv lighting rendering category add-face add-cube block-ref data-ref)
  (let ((key (string-append
               "facing="
               (case (bitwise-and config-id #b11)
                 ((0) "east,half=")
                 ((1) "south,half=")
                 ((2) "west,half=")
                 ((3) "north,half="))
               (if (bit-set? 4 config-id)
                   "upper,hinge="
                 "lower,hinge=")
               (if (bit-set? 2 config-id)
                   "right,open="
                 "left,open=")
               (if (bit-set? 3 config-id)
                   "true"
                 "false"))))
    (with-block-state filename key
      (lambda (model rotation-y rotation-x)
        (add-json-model what model block-id variant-id data-id i j k x y z uv lighting rendering category add-face add-cube block-ref data-ref rotation-y rotation-x))))))
