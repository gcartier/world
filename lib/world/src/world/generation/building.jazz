;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Generation Building
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2016
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;    Edouard Hebert


(module world.generation.building jazz


(import (jazz.cairo)
        (jazz.geometry)
        (jazz.graphic)
        (jazz.io)
        (jazz.json)
        (jazz.opengl.glew)
        (jazz.syntax (phase syntax))
        (jazz.time)
        (profiler)
        (world)
        (world.album)
        (world.area)
        (world.atlas)
        (world.audio)
        (world.autoload)
        (world.biome)
        (world.block)
        (world.chunk)
        (world.configure)
        (world.creature)
        (world.draw)
        (world.dye)
        (world.entity)
        (world.face)
        (world.foreign)
        (world.generate)
        (world.generation)
        (world.generation.categories)
        (world.geometry)
        (world.history)
        (world.homogeneous)
        (world.index)
        (world.info)
        (world.interface.inventory)
        (world.interface.sign)
        (world.light-syntax)
        (world.lighting)
        (world.material)
        (world.mesh)
        (world.model)
        (world.models)
        (world.polygon)
        (world.profiling)
        (world.quad)
        (world.quad-texture)
        (world.region)
        (world.render)
        (world.renderers)
        (world.section)
        (world.sector)
        (world.settings)
        (world.support)
        (world.syntax (phase syntax))
        (world.tag)
        (world.task)
        (world.template)
        (world.texture)
        (world.triangle))


(definition inline (water? id)
  (id? id 8 9))

(definition inline (lava? id)
  (id? id 10 11))

(definition inline (glass? id)
  (id? id 20))


(definition (add-data-visual block-id <fx> data-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> rendering category add-template add-opaque-cube add-translucent-cube add-liquid-cube add-texture-element block-ref data-ref)
  (add-visual-template block-id data-id data-id i j k x y z #f rendering category add-template block-ref data-ref))


(definition (add-data-physical block-id <fx> data-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> add-template add-liquid-cube block-ref data-ref)
  (add-physical-template block-id data-id data-id i j k x y z add-template block-ref data-ref))


(define-block Air
  0
  opaque-cube?: #f
  cube?: #f)


(define-block Stone
  1
  category: building
  kind: cube
  texture: "stone")


(define-block Grass
  2
  category: building
  kind: cube
  texture: "grass_side"
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              ;; this is so much nicer than the grass in the texture pack
              (let ((side (get-coordinates "grass_side"))
                    (top (get-coordinates "wool_colored_green"))
                    (bottom (get-coordinates "dirt")))
                (add-cube what i j k x y z side side bottom top side side lighting rendering category block-id variant-id add-face))))


(define-block Dirt
  3
  category: building
  kind: cube
  texture: "dirt")


(define-block Cobblestone
  4
  category: building
  kind: cube
  texture: "cobblestone")


(define-block WoodenPlank
  5
  category: wood
  kind: cube
  texture: "planks_oak"
  generic?: #t)

(define-block OakPlank
  (5 0)
  texture: "planks_oak")

(define-block SprucePlank
  (5 1)
  texture: "planks_spruce")

(define-block BirchPlank
  (5 2)
  texture: "planks_birch")

(define-block JunglePlank
  (5 3)
  texture: "planks_jungle")

(define-block AcaciaPlank
  (5 4)
  texture: "planks_acacia")

(define-block DarkOakPlank
  (5 5)
  texture: "planks_big_oak")


(define-block Sapling
  6
  category: plants
  kind: vegetation
  generic?: #t
  variant-mask: #b111
  rendering: transparent-rendering
  opaque-cube?: #f
  cube?: #f
  physical?: #f
  ambient?: #t
  present: 'texture
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (add-cross-faces what i j k x y z uv lighting rendering category block-id variant-id add-face)))

(define-block OakSapling
  (6 0)
  texture: "sapling_oak")

(define-block SpruceSapling
  (6 1)
  texture: "sapling_spruce")

(define-block BirchSapling
  (6 2)
  texture: "sapling_birch")

(define-block JungleSapling
  (6 3)
  texture: "sapling_jungle")

(define-block AcaciaSapling
  (6 4)
  texture: "sapling_acacia")

(define-block DarkOakSapling
  (6 5)
  texture: "sapling_roofed_oak")


(define-block Bedrock
  7
  category: building
  kind: cube
  texture: "bedrock")


(definition (liquid-heights i <fx> j <fx> k <fx> data-id <fx> block-ref data-ref blocks proc)
  (define (side-data side-i <fx> side-k <fx>) <fx>
    (data-ref (+ i side-i) j (+ k side-k)))
  
  (define (data->height data-id <fx>) <fl>
    (if (< data-id 8)
        (- (* 2m (cast <fl> (- 8 data-id))) 1m)
      16m))
  
  (define (corner-height side-i <fx> side-k <fx> data-id <fx>)
    (let ((block1 <fx> (block-ref (+ i side-i) j k))
          (block2 <fx> (block-ref i j (+ k side-k)))
          (block3 <fx> (block-ref (+ i side-i) j (+ k side-k)))
          (data1 (side-data side-i 0))
          (data2 (side-data 0 side-k))
          (data3 (side-data side-i side-k)))
      (let ((height1 (if (memq? block1 blocks)
                         (if (or (< data1 data-id) (> data1 7))
                             (data->height data1)
                           (data->height data-id))
                       1m))
            (height2 (if (memq? block2 blocks)
                         (if (or (< data2 data-id) (> data2 7))
                             (data->height data2)
                           (data->height data-id))
                       1m))
            (height3 (if (memq? block3 blocks)
                         (if (or (< data3 data-id) (> data3 7))
                             (data->height data3)
                           (data->height data-id))
                       1m)))
        (- (max height1 height2 height3) block-radius))))
  
  (cond ((> data-id 7)
         (proc 8m 8m 8m 8m))
        ((= data-id 0)
         (proc 7m 7m 7m 7m))
        (else
         (let ((left-back   (corner-height -1 -1 data-id))
               (left-front  (corner-height -1  1 data-id))
               (right-front (corner-height  1  1 data-id))
               (right-back  (corner-height  1 -1 data-id)))
           (proc left-back left-front right-front right-back)))))


(definition (liquid-generator test blocks)
  (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
    (liquid-heights i j k data-id block-ref data-ref blocks
      (lambda (left-back left-front right-front right-back)
        (let ((left (- block-radius))
              (right block-radius)
              (bottom (if (test (block-ref i (- j 1) k)) (- (- block-radius) 1m) (- block-radius)))
              (back (- block-radius))
              (front block-radius))
          (define (liquid-opaque? id)
            (or (and (get-cube?~ (id->block id)) (not (glass? id)))
                (test id)))
          
          (unless (liquid-opaque? (block-ref (- i 1) j k))
            (add-face (left-generic-quad what i j k x y z left right bottom left-back left-front back front uv generic-coordinates lighting rendering block-id variant-id) rendering category))
          (unless (liquid-opaque? (block-ref (+ i 1) j k))
            (add-face (right-generic-quad what i j k x y z left right bottom right-front right-back back front uv generic-coordinates lighting rendering block-id variant-id) rendering category))
          (unless (liquid-opaque? (block-ref i (- j 1) k))
            (add-face (bottom-generic what i j k x y z left right bottom left-back back front uv generic-coordinates lighting rendering block-id variant-id (make-identity-matrix)) rendering category))
          (unless (let ((id (block-ref i (+ j 1) k)))
                    (or (test id) (glass? id)))
            (for-each (lambda (face)
                        (add-face face rendering category))
                      (top-sloped what i j k x y z left right bottom left-back left-front right-front right-back back front uv generic-coordinates lighting rendering block-id variant-id)))
          (unless (liquid-opaque? (block-ref i j (- k 1)))
            (add-face (back-generic-quad what i j k x y z left right bottom right-back left-back back front uv generic-coordinates lighting rendering block-id variant-id) rendering category))
          (unless (liquid-opaque? (block-ref i j (+ k 1)))
            (add-face (front-generic-quad what i j k x y z left right bottom left-front right-front back front uv generic-coordinates lighting rendering block-id variant-id) rendering category)))))))


(definition (cube-liquid-generator bottom top)
  (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
    (let ((left (- block-radius))
          (right block-radius)
          (back (- block-radius))
          (front block-radius))
      (add-face (left-face   what i j k x y z left right bottom top back front uv generic-coordinates lighting rendering block-id variant-id) rendering category)
      (add-face (right-face  what i j k x y z left right bottom top back front uv generic-coordinates lighting rendering block-id variant-id) rendering category)
      (add-face (bottom-face what i j k x y z left right bottom top back front uv generic-coordinates lighting rendering block-id variant-id) rendering category)
      (add-face (top-face    what i j k x y z left right bottom top back front uv generic-coordinates lighting rendering block-id variant-id) rendering category)
      (add-face (back-face   what i j k x y z left right bottom top back front uv generic-coordinates lighting rendering block-id variant-id) rendering category)
      (add-face (front-face  what i j k x y z left right bottom top back front uv generic-coordinates lighting rendering block-id variant-id) rendering category))))

(definition generate-partial-water
  (cube-liquid-generator (- 9m) 7m))

(definition generate-bottom-water
  (cube-liquid-generator (- 8m) 7m))


(definition (liquid-visual-adder blocks)
  (lambda (block-id <fx> data-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> rendering category add-template add-opaque-cube add-translucent-cube add-liquid-cube add-texture-element block-ref data-ref)
    (if (get-liquid-cube?~ (id->block (block-ref i (+ j 1) k)))
        (if (get-liquid-cube?~ (id->block (block-ref i (- j 1) k)))
            (let ((template (find-visual-template block-id data-id 0 generate-partial-water)))
              (add-liquid-cube i j k x y z rendering category template add-template))
          (let ((template (find-visual-template block-id data-id 1 generate-bottom-water)))
            (add-liquid-cube i j k x y z rendering category template add-template)))
      (liquid-heights i j k data-id block-ref data-ref blocks
        (lambda (left-back <fl> left-front <fl> right-front <fl> right-back <fl>)
          (if (and (= left-back 7m)
                   (= left-front 7m)
                   (= right-front 7m)
                   (= right-back 7m))
              (let ((template (find-visual-template block-id data-id 0 generate-partial-water)))
                (add-liquid-cube i j k x y z rendering category template add-template))
            (let ((block (id/data-id->block block-id data-id)))
              (dynamic-visual-template block data-id i j k block-ref data-ref
                (lambda (template)
                  (add-template i j k x y z template #f rendering category))))))))))


(definition (liquid-physical-adder blocks)
  (lambda (block-id <fx> data-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> add-template add-liquid-cube block-ref data-ref)
    (if (get-liquid-cube?~ (id->block (block-ref i (+ j 1) k)))
        (if (get-liquid-cube?~ (id->block (block-ref i (- j 1) k)))
            (let ((template (find-physical-template block-id data-id 0 generate-partial-water)))
              (add-liquid-cube i j k x y z template add-template))
          (let ((template (find-physical-template block-id data-id 1 generate-bottom-water)))
            (add-liquid-cube i j k x y z template add-template)))
      (liquid-heights i j k data-id block-ref data-ref blocks
        (lambda (left-back <fl> left-front <fl> right-front <fl> right-back <fl>)
          (if (and (= left-back 7m)
                   (= left-front 7m)
                   (= right-front 7m)
                   (= right-back 7m))
              (let ((template (find-physical-template block-id data-id 0 generate-partial-water)))
                (add-liquid-cube i j k x y z template add-template))
            (let ((block (id/data-id->block block-id data-id)))
              (dynamic-physical-template block data-id i j k block-ref data-ref
                (lambda (poly)
                  (add-template x y z poly))))))))))


(define-block Water
  8
  category: decoration
  kind: liquid
  opaque-cube?: #f
  liquid-cube?: #t
  cube?: #f
  rendering: water-rendering
  texture: "water"
  generate: (liquid-generator water? '(8 9))
  visual: (liquid-visual-adder '(8 9))
  physical: (liquid-physical-adder '(8 9)))


(define-block StationaryWater
  9
  category: waiting
  kind: liquid
  opaque-cube?: #f
  liquid-cube?: #t
  cube?: #f
  rendering: water-rendering
  texture: "water"
  generate: (liquid-generator water? '(8 9))
  visual: (liquid-visual-adder '(8 9))
  physical: (liquid-physical-adder '(8 9)))


(define-block Lava
  10
  category: decoration
  kind: liquid
  opaque-cube?: #f
  liquid-cube?: #t
  cube?: #f
  rendering: multitexture-rendering
  texture: "lava"
  generate: (liquid-generator lava? '(10 11))
  visual: (liquid-visual-adder '(10 11))
  physical: (liquid-physical-adder '(10 11)))


(define-block StationaryLava
  11
  category: waiting
  kind: liquid
  opaque-cube?: #f
  liquid-cube?: #t
  cube?: #f
  rendering: multitexture-rendering
  texture: "lava"
  generate: (liquid-generator lava? '(10 11))
  visual: (liquid-visual-adder '(10 11))
  physical: (liquid-physical-adder '(10 11)))


(define-block Sand
  12
  category: building
  kind: cube
  texture: "sand")


(define-block Gravel
  13
  category: building
  kind: cube
  texture: "gravel")


(define-block GoldOre
  14
  category: building
  kind: ore
  texture: "gold_ore")


(define-block IronOre
  15
  category: building
  kind: ore
  texture: "iron_ore")


(define-block CoalOre
  16
  category: building
  kind: ore
  texture: "coal_ore")


(define-block Wood
  17
  category: wood
  kind: bark
  generic?: #t
  variant-mask: #b11
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (let ((filename (string-append
                                (case (bitwise-and data-id #b11)
                                  ((0) "oak")
                                  ((1) "spruce")
                                  ((2) "birch")
                                  ((3) "jungle"))
                                "_log.json"))
                    (key (string-append
                           "axis="
                           (case (arithmetic-shift-right (bitwise-and data-id #b1100) 2)
                             ((0) "y")
                             ((1) "x")
                             ((2) "z")
                             ((3) "none")))))
                (with-block-state filename key
                  (lambda (model rotation-y rotation-x)
                    (add-json-model what model block-id variant-id data-id i j k x y z uv lighting rendering category add-face add-cube block-ref data-ref rotation-y rotation-x)))))
  visual: add-data-visual
  physical: add-data-physical)

(define-block OakWood
  (17 0)
  texture: "log_oak")

(define-block SpruceWood
  (17 1)
  texture: "log_spruce")

(define-block BirchWood
  (17 2)
  texture: "log_birch")

(define-block JungleWood
  (17 3)
  texture: "log_jungle")


(define-block Leaves
  18
  category: plants
  kind: leaves
  generic?: #t
  variant-mask: #b11
  rendering: transparent-rendering
  opaque-cube?: #f
  translucent-cube?: #t
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (add-cube-faces what i j k x y z uv lighting rendering category block-id variant-id add-face)))

(define-block OakLeaves
  (18 0)
  texture: "leaves_oak_green")

(define-block SpruceLeaves
  (18 1)
  texture: "leaves_spruce_green")

(define-block BirchLeaves
  (18 2)
  texture: "leaves_birch_green")

(define-block JungleLeaves
  (18 3)
  texture: "leaves_jungle_green")


(define-block Sponge
  19
  category: building
  kind: cube
  texture: "sponge")


(define-block Glass
  20
  category: decoration
  kind: glass
  texture: "glass"
  rendering: transparent-rendering
  opaque-cube?: #f
  translucent-cube?: #t
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (add-cube-faces what i j k x y z uv lighting rendering category block-id variant-id add-face)))


(define-block LapisOre
  21
  category: building
  kind: ore
  texture: "lapis_ore")


(define-block LapisBlock
  22
  category: building
  kind: cube
  texture: "lapis_block")


(define-block Dispenser
  23
  category: waiting ;; redstone
  texture: "dispenser_front_vertical"
  opaque-cube?: #f
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (let ((key (string-append
                           "facing="
                           (case (bitwise-and data-id #b111)
                             ((0) "down")
                             ((1) "up")
                             ((2) "north")
                             ((3) "south")
                             ((4) "west")
                             (else "east")))))
                (with-block-state "dispenser.json" key
                  (lambda (model rotation-y rotation-x)
                    (add-json-model what model block-id variant-id data-id i j k x y z uv lighting rendering category add-face add-cube block-ref data-ref rotation-y rotation-x)))))
  visual: add-data-visual
  physical: add-data-physical)


(define-block Sandstone
  24
  category: building
  kind: cube
  texture: "sandstone_top")


(define-block NoteBlock
  25
  category: waiting ;; redstone
  kind: mechanism
  texture: "noteblock")


(define-block BedBlock
  26
  category: decoration
  texture: "bed_feet_side"
  rendering: transparent-rendering
  opaque-cube?: #f
  cube?: #f
  present: '(translate-z: -4. scaling: 24. rotate-y: -45. rotate-z: 30.)
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (let ((matrix (make-lookat-matrix& (horizon-lookat&^ (case (bitwise-and data-id #b11)
                                                                     ((0) (vertex&  0. 0.  1.))
                                                                     ((1) (vertex& -1. 0.  0.))
                                                                     ((2) (vertex&  0. 0. -1.))
                                                                     ((3) (vertex&  1. 0.  0.))))))
                    (head? (bit-set? 3 data-id))
                    (left (- block-radius))
                    (right (+ block-radius))
                    (bottom (- block-radius))
                    (top 1m)
                    (back (- block-radius))
                    (front (+ block-radius))
                    (bedbottom (+ (- block-radius) 3m))
                    (bedtop (- 9m block-radius)))
                (if head?
                    (let ((uv-top (get-coordinates "bed_head_top"))
                          (uv-side (get-coordinates "bed_head_side"))
                          (uv-end (get-coordinates "bed_head_end"))
                          (uv-bottom (get-coordinates "planks_oak")))
                      (add-face (left-generic   what i j k x y z left right bottom top back front uv-side generic-coordinates lighting rendering block-id variant-id matrix) rendering category)
                      (add-face (right-generic  what i j k x y z left right bottom top back front uv-side transpose-coordinates lighting rendering block-id variant-id matrix) rendering category)
                      (add-face (bottom-generic what i j k x y z left right bedbottom top back front uv-bottom generic-coordinates lighting rendering block-id variant-id matrix) rendering category)
                      (add-face (top-generic    what i j k x y z left right bottom bedtop back front uv-top rotate-coordinates lighting rendering block-id variant-id matrix) rendering category)
                      (add-face (front-generic  what i j k x y z left right bottom top back front uv-end generic-coordinates lighting rendering block-id variant-id matrix) rendering category))
                  (let ((uv-top (get-coordinates "bed_feet_top"))
                        (uv-side (get-coordinates "bed_feet_side"))
                        (uv-end (get-coordinates "bed_feet_end"))
                        (uv-bottom (get-coordinates "planks_oak")))
                    (add-face (left-generic   what i j k x y z left right bottom top back front uv-side generic-coordinates lighting rendering block-id variant-id matrix) rendering category)
                    (add-face (right-generic  what i j k x y z left right bottom top back front uv-side transpose-coordinates lighting rendering block-id variant-id matrix) rendering category)
                    (add-face (bottom-generic what i j k x y z left right bedbottom top back front uv-bottom generic-coordinates lighting rendering block-id variant-id matrix) rendering category)
                    (add-face (top-generic    what i j k x y z left right bottom bedtop back front uv-top rotate-coordinates lighting rendering block-id variant-id matrix) rendering category)
                    (add-face (back-generic   what i j k x y z left right bottom top back front uv-end generic-coordinates lighting rendering block-id variant-id matrix) rendering category)
                    (when (eq? what 'model)
                      (set! uv-top (get-coordinates "bed_head_top"))
                      (set! uv-side (get-coordinates "bed_head_side"))
                      (set! uv-end (get-coordinates "bed_head_end"))
                      (set! uv-bottom (get-coordinates "planks_oak"))
                      (add-face (left-generic   what i j k (- x .5) y z left right bottom top back front uv-side generic-coordinates lighting rendering block-id variant-id matrix) rendering category)
                      (add-face (right-generic  what i j k (- x .5) y z left right bottom top back front uv-side transpose-coordinates lighting rendering block-id variant-id matrix) rendering category)
                      (add-face (bottom-generic what i j k (- x .5) y z left right bedbottom top back front uv-bottom generic-coordinates lighting rendering block-id variant-id matrix) rendering category)
                      (add-face (top-generic    what i j k (- x .5) y z left right bottom bedtop back front uv-top rotate-coordinates lighting rendering block-id variant-id matrix) rendering category)
                      (add-face (front-generic  what i j k (- x .5) y z left right bottom top back front uv-end generic-coordinates lighting rendering block-id variant-id matrix) rendering category))))))
  visual: add-data-visual
  physical: add-data-physical
  right-mouse: (lambda (region sector block-id data-id i j k x y z with-field block-ref block-set! data-ref data-set! blocklight-ref blocklight-set! skylight-ref skylight-set!)
                 (let ((world (current-world))
                       (zone (current-zone))
                       (me (current-me)))
                   ;; we cannot spawn on top of the bed because some beds have too low a ceiling over them
                   (let ((spawnpoint (copy-vertex (get-position~ me))))
                     (set-player-spawnpoint~ zone spawnpoint)
                     (save-level-state~ zone))
                   (when (or (> (get-daytime~ zone) 18500.) (< (get-daytime~ zone) 6000.))
                     (goto-daytime~ zone 6000.))
                   (display-message~ world "Bedpoint set!"))))


(define-block PoweredRail
  27
  category: waiting ;; decoration
  texture: "rail_activator"
  rendering: transparent-rendering
  opaque-cube?: #f
  cube?: #f
  present: 'texture
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (add-rail-gadget what block-id variant-id data-id i j k x y z uv (get-coordinates "rail_activator_powered") lighting rendering category add-face))
  visual: add-data-visual
  physical: add-data-physical)


(define-block DetectorRail
  28
  category: waiting ;; decoration
  texture: "rail_detector"
  rendering: transparent-rendering
  opaque-cube?: #f
  cube?: #f
  present: 'texture
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (add-rail-gadget what block-id variant-id data-id i j k x y z uv (get-coordinates "rail_detector_powered") lighting rendering category add-face))
  visual: add-data-visual
  physical: add-data-physical)


(define-block StickyPiston
  29
  category: redstone
  kind: mechanism
  texture: "piston_side"
  opaque-cube?: #f
  present: '(rotate-z: -90. rotate-y: -45. rotate-z: 30.)
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (let ((matrix (case (bit-set data-id 3 #f)
                              ((0) (make-x-rotation-matrix PI))
                              ((1) (make-identity-matrix))
                              ((2) (make-x-rotation-matrix PI/2))
                              ((3) (make-x-rotation-matrix (- PI/2)))
                              ((4) (make-z-rotation-matrix (- PI/2)))
                              ((5) (make-z-rotation-matrix PI/2)))))
                (let ((left (- block-radius))
                      (right block-radius)
                      (bottom (- block-radius))
                      (top (if (bit-set? 3 data-id)
                               4m
                             block-radius))
                      (back (- block-radius))
                      (front block-radius)
                      (side-uv (if (bit-set? 3 data-id)
                                   (uv-rect uv 0. 4m 1. 1.)
                                 uv))
                      (top-uv (if (bit-set? 3 data-id)
                                  (get-coordinates "piston_inner")
                                (get-coordinates "piston_top_sticky")))
                      (bottom-uv (get-coordinates "piston_bottom")))
                  (add-face (left-generic   what i j k x y z left right bottom top back front side-uv   generic-coordinates lighting rendering block-id variant-id matrix) rendering category)
                  (add-face (right-generic  what i j k x y z left right bottom top back front side-uv   generic-coordinates lighting rendering block-id variant-id matrix) rendering category)
                  (add-face (bottom-generic what i j k x y z left right bottom top back front bottom-uv generic-coordinates lighting rendering block-id variant-id matrix) rendering category)
                  (add-face (top-generic    what i j k x y z left right bottom top back front top-uv    generic-coordinates lighting rendering block-id variant-id matrix) rendering category)
                  (add-face (back-generic   what i j k x y z left right bottom top back front side-uv   generic-coordinates lighting rendering block-id variant-id matrix) rendering category)
                  (add-face (front-generic  what i j k x y z left right bottom top back front side-uv   generic-coordinates lighting rendering block-id variant-id matrix) rendering category))))
  visual: add-data-visual
  physical: add-data-physical)


(define-block Web
  30
  category: decoration ;; maybe
  kind: web
  texture: "web"
  rendering: transparent-rendering
  opaque-cube?: #f
  cube?: #f
  physical?: #f
  ambient?: #t
  present: 'texture)


(define-block TallGrass
  31
  category: plants
  kind: vegetation
  texture: "tallgrass_green"
  rendering: transparent-rendering
  opaque-cube?: #f
  cube?: #f
  physical?: #f
  ambient?: #t
  present: "tallgrass_green")


(define-block DeadBush
  32
  category: plants
  kind: vegetation
  texture: "deadbush"
  rendering: transparent-rendering
  opaque-cube?: #f
  cube?: #f
  physical?: #f
  ambient?: #t
  present: 'texture)


(define-block Piston
  33
  category: redstone
  kind: mechanism
  texture: "piston_side"
  opaque-cube?: #f
  present: '(rotate-z: -90. rotate-y: -45. rotate-z: 30.)
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (let ((matrix (case (bit-set data-id 3 #f)
                              ((0) (make-x-rotation-matrix PI))
                              ((1) (make-identity-matrix))
                              ((2) (make-x-rotation-matrix PI/2))
                              ((3) (make-x-rotation-matrix (- PI/2)))
                              ((4) (make-z-rotation-matrix (- PI/2)))
                              ((5) (make-z-rotation-matrix PI/2)))))
                (let ((left (- block-radius))
                      (right block-radius)
                      (bottom (- block-radius))
                      (top (if (bit-set? 3 data-id)
                               4m
                             block-radius))
                      (back (- block-radius))
                      (front block-radius)
                      (side-uv (if (bit-set? 3 data-id)
                                   (uv-rect uv 0. 4m 1. 1.)
                                 uv))
                      (top-uv (if (bit-set? 3 data-id)
                                  (get-coordinates "piston_inner")
                                (get-coordinates "piston_top_normal")))
                      (bottom-uv (get-coordinates "piston_bottom")))
                  (add-face (left-generic   what i j k x y z left right bottom top back front side-uv   generic-coordinates lighting rendering block-id variant-id matrix) rendering category)
                  (add-face (right-generic  what i j k x y z left right bottom top back front side-uv   generic-coordinates lighting rendering block-id variant-id matrix) rendering category)
                  (add-face (bottom-generic what i j k x y z left right bottom top back front bottom-uv generic-coordinates lighting rendering block-id variant-id matrix) rendering category)
                  (add-face (top-generic    what i j k x y z left right bottom top back front top-uv    generic-coordinates lighting rendering block-id variant-id matrix) rendering category)
                  (add-face (back-generic   what i j k x y z left right bottom top back front side-uv   generic-coordinates lighting rendering block-id variant-id matrix) rendering category)
                  (add-face (front-generic  what i j k x y z left right bottom top back front side-uv   generic-coordinates lighting rendering block-id variant-id matrix) rendering category))))
  visual: add-data-visual
  physical: add-data-physical)


(define-block PistonHead
  34
  category: invalid
  texture: "piston_inner"
  opaque-cube?: #f
  cube?: #f
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (let ((matrix (case (bit-set data-id 3 #f)
                              ((0) (make-x-rotation-matrix PI))
                              ((1) (make-identity-matrix))
                              ((2) (make-x-rotation-matrix PI/2))
                              ((3) (make-x-rotation-matrix (- PI/2)))
                              ((4) (make-z-rotation-matrix (- PI/2)))
                              ((5) (make-z-rotation-matrix PI/2)))))
                (let ((left (- block-radius))
                      (right block-radius)
                      (bottom 4m)
                      (top block-radius)
                      (back (- block-radius))
                      (front block-radius)
                      (side-uv (uv-rect (get-coordinates "piston_side") 0. 0. 1. 4m))
                      (top-uv (if (bit-set? 3 data-id)
                                  (get-coordinates "piston_top_sticky")
                                (get-coordinates "piston_top_normal")))
                      (stick-top 4m)
                      (stick-bottom (- 12m))
                      (margin 2m))
                  (add-face (left-generic   what i j k x y z left right bottom top back front side-uv generic-coordinates lighting rendering block-id variant-id matrix) rendering category)
                  (add-face (right-generic  what i j k x y z left right bottom top back front side-uv generic-coordinates lighting rendering block-id variant-id matrix) rendering category)
                  (add-face (bottom-generic what i j k x y z left right bottom top back front uv      generic-coordinates lighting rendering block-id variant-id matrix) rendering category)
                  (add-face (top-generic    what i j k x y z left right bottom top back front top-uv  generic-coordinates lighting rendering block-id variant-id matrix) rendering category)
                  (add-face (back-generic   what i j k x y z left right bottom top back front side-uv generic-coordinates lighting rendering block-id variant-id matrix) rendering category)
                  (add-face (front-generic  what i j k x y z left right bottom top back front side-uv generic-coordinates lighting rendering block-id variant-id matrix) rendering category)
                  (add-face (left-generic   what i j k x y z (- margin) margin stick-bottom stick-top (- margin) margin side-uv rotate-coordinates lighting rendering block-id variant-id matrix) rendering category)
                  (add-face (right-generic  what i j k x y z (- margin) margin stick-bottom stick-top (- margin) margin side-uv rotate-coordinates lighting rendering block-id variant-id matrix) rendering category)
                  (add-face (back-generic   what i j k x y z (- margin) margin stick-bottom stick-top (- margin) margin side-uv rotate-coordinates lighting rendering block-id variant-id matrix) rendering category)
                  (add-face (front-generic  what i j k x y z (- margin) margin stick-bottom stick-top (- margin) margin side-uv rotate-coordinates lighting rendering block-id variant-id matrix) rendering category))))
  visual: add-data-visual
  physical: add-data-physical)


(define-block Wool
  35
  category: wool
  kind: cube
  generic?: #t)

(define-block WhiteWool
  (35 0)
  texture: "wool_colored_white")

(define-block OrangeWool
  (35 1)
  texture: "wool_colored_orange")

(define-block MagentaWool
  (35 2)
  texture: "wool_colored_magenta")

(define-block LightBlueWool
  (35 3)
  texture: "wool_colored_light_blue")

(define-block YellowWool
  (35 4)
  texture: "wool_colored_yellow")

(define-block LimeWool
  (35 5)
  texture: "wool_colored_lime")

(define-block PinkWool
  (35 6)
  texture: "wool_colored_pink")

(define-block GrayWool
  (35 7)
  texture: "wool_colored_gray")

(define-block SilverWool
  (35 8)
  texture: "wool_colored_silver")

(define-block CyanWool
  (35 9)
  texture: "wool_colored_cyan")

(define-block PurpleWool
  (35 10)
  texture: "wool_colored_purple")

(define-block BlueWool
  (35 11)
  texture: "wool_colored_blue")

(define-block BrownWool
  (35 12)
  texture: "wool_colored_brown")

(define-block GreenWool
  (35 13)
  texture: "wool_colored_green")

(define-block RedWool
  (35 14)
  texture: "wool_colored_red")

(define-block BlackWool
  (35 15)
  texture: "wool_colored_black")


(define-block Dandelion
  37
  category: plants
  kind: vegetation
  texture: "flower_dandelion"
  rendering: transparent-rendering
  opaque-cube?: #f
  cube?: #f
  physical?: #f
  ambient?: #t
  present: 'texture)


(define-block Rose
  38
  category: plants
  kind: vegetation
  texture: "flower_rose"
  rendering: transparent-rendering
  opaque-cube?: #f
  cube?: #f
  physical?: #f
  ambient?: #t
  present: 'texture)


(define-block BrownMushroom
  39
  category: plants
  kind: vegetation
  texture: "mushroom_brown"
  rendering: transparent-rendering
  physical?: #f
  cube?: #f
  opaque-cube?: #f
  ambient?: #t
  present: 'texture)


(define-block RedMushroom
  40
  category: plants
  kind: vegetation
  texture: "mushroom_red"
  rendering: transparent-rendering
  physical?: #f
  cube?: #f
  opaque-cube?: #f
  ambient?: #t
  present: 'texture)


(define-block GoldBlock
  41
  category: building
  kind: cube
  texture: "gold_block")


(define-block IronBlock
  42
  category: building
  kind: cube
  texture: "iron_block")


(define-block DoubleStoneSlabs
  43
  category: building
  kind: slab
  generic?: #t
  variant-mask: #b111)

(define-block DoubleStoneSlab
  (43 0) ;; special generation
  texture: "stone_slab_side")

(define-block DoubleSandstoneSlab
  (43 1) ;; special
  texture: "sandstone_normal")

(define-block DoubleWoodenStoneSlab
  (43 2)
  category: invalid
  texture: "planks_oak")

(define-block DoubleCobblestoneSlab
  (43 3)
  texture: "cobblestone")

(define-block DoubleBrickSlab
  (43 4)
  texture: "brick")

(define-block DoubleStoneBrickSlab
  (43 5)
  texture: "stonebrick")

(define-block DoubleNetherBrickSlab
  (43 6)
  texture: "nether_brick")


(define-block StoneSlabs
  44
  category: building
  kind: slab
  generic?: #t
  variant-mask: #b111
  opaque-cube?: #f
  cube?: #f
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (if (< data-id 8)
                  (add-slab what i j k x y z uv (uv-rect uv 0. .5 1. 1.) lighting rendering category block-id variant-id add-face)
                (add-slab what i j k x (+ y block-radius) z uv (uv-rect uv 0. 0. 1. .5) lighting rendering category block-id variant-id add-face))))

(define-block StoneSlab
  (44 0)
  texture: "stone_slab_side")

(define-block SandstoneSlab
  (44 1)
  texture: "sandstone_normal")

(define-block WoodenStoneSlab
  (44 2)
  category: invalid
  texture: "planks_oak")

(define-block CobblestoneSlab
  (44 3)
  texture: "cobblestone")

(define-block BrickSlab
  (44 4)
  texture: "brick")

(define-block StoneBrickSlab
  (44 5)
  texture: "stonebrick")

(define-block NetherBrickSlab
  (44 6)
  texture: "nether_brick")


(define-block Brick
  45
  category: building
  kind: cube
  texture: "brick")


(define-block TNT
  46
  category: redstone
  kind: mechanism
  texture: "tnt_side"
  opaque-cube?: #f
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (add-cube what i j k x y z uv uv (get-coordinates "tnt_bottom") (get-coordinates "tnt_top") uv uv lighting rendering category block-id variant-id add-face)))


(define-block Bookshelf
  47
  category: decoration
  texture: "bookshelf"
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (let ((top (get-coordinates "planks_jungle")))
                (add-cube what i j k x y z uv uv uv top uv uv lighting rendering category block-id variant-id add-face))))


(define-block MossyCobblestone
  48
  category: building
  kind: cube
  texture: "cobblestone_mossy")


(define-block Obsidian
  49
  category: building
  kind: cube
  texture: "obsidian")


(define-block Torch
  50
  category: decoration
  kind: torch
  texture: "torch_on"
  rendering: transparent-rendering
  opaque-cube?: #f
  cube?: #f
  physical?: #f
  ambient?: #t
  present: '(rotate-y: 45.)
  brightness: 14
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (if (or (= data-id 0) ;; why is this still necessary???
                      (= data-id 5))
                  (add-json-model what "torch.json" block-id variant-id data-id i j k x y z uv lighting rendering category add-face add-cube block-ref data-ref 0. 0.)
                (let ((rot (case data-id
                             ((1) 0.)
                             ((2) 180.)
                             ((3) 90.)
                             ((4) 270.))))
                  (add-json-model what "torch_wall.json" block-id variant-id data-id i j k x y z uv lighting rendering category add-face add-cube block-ref data-ref rot 0.))))
  visual: add-data-visual
  physical: add-data-physical)


(define-block Fire
  51
  category: decoration
  kind: fire
  texture: "fire"
  rendering: transparent-rendering
  brightness: 15
  opaque-cube?: #f
  cube?: #f
  physical?: #f
  ambient?: #t
  present: 'texture
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (add-cross-faces what i j k x y z uv lighting rendering category block-id variant-id add-face)
              @w(let ((r (random-integer-between 0 15)))
                (let ((uv (uv-rect (get-coordinates "fire_layer_0") 0. (* r 128.) 128. (* (+ r 1.) 128.))))
                  (add-cross-faces what i j k x y z uv lighting rendering category block-id variant-id add-face)))))


(define-block MonsterSpawner
  52
  category: decoration
  texture: "mob_spawner"
  rendering: transparent-rendering
  opaque-cube?: #f
  translucent-cube?: #t
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (add-cube-faces what i j k x y z uv lighting rendering category block-id variant-id add-face)))


(define-block WoodenStairs
  53
  category: wood
  kind: stairs
  texture: "planks_oak"
  opaque-cube?: #f
  cube?: #f
  configurations: 40
  present: '(rotate-y: 135. rotate-z: 30.)
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (choose-stairs-model what "oak_stairs.json" block-id variant-id data-id config-id i j k x y z uv lighting rendering category add-face add-cube block-ref data-ref))
  visual: (lambda (block-id <fx> data-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> rendering category add-template add-opaque-cube add-translucent-cube add-liquid-cube add-texture-element block-ref data-ref)
            (let ((config-id (stairs-configuration i j k block-ref data-ref data-id)))
              (add-visual-template block-id data-id config-id i j k x y z #f rendering category add-template block-ref data-ref)))
  physical: (lambda (block-id <fx> data-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> add-template add-liquid-cube block-ref data-ref)
              (let ((config-id (stairs-configuration i j k block-ref data-ref data-id)))
                (add-physical-template block-id data-id config-id i j k x y z add-template block-ref data-ref))))


(definition (stairs-configuration i j k block-ref data-ref data-id)
  (define (get-shape)
    (let ((data (bit-set data-id 2 #f)))
      (define (shape-front other-data)
        (if (/= (fxfloor/ data 2) (fxfloor/ other-data 2))
            (if ((if (= (fxfloor/ other-data 2) 0) = /=) (modulo data 2) (modulo other-data 2))
                3
              4)
          0))
      
      (define (shape-back other-data)
        (if (/= (fxfloor/ data 2) (fxfloor/ other-data 2))
            (if ((if (= (fxfloor/ other-data 2) 0) = /=) (modulo data 2) (modulo other-data 2))
                1
              2)
          0))
      
      (let ((a (if (= data 1) -1 (if (= data 0) 1 0)))
            (c (if (= data 3) -1 (if (= data 2) 1 0))))
        (if (id? (block-ref (+ i a) j (+ k c)) WoodenStairs CobblestoneStairs SandstoneStairs BrickStairs StoneBrickStairs NetherBrickStairs BirchWoodStairs SpruceWoodStairs JungleWoodStairs)
            (shape-front (bit-set (data-ref (+ i a) j (+ k c)) 2 #f))
          (if (id? (block-ref (- i a) j (- k c)) WoodenStairs CobblestoneStairs SandstoneStairs BrickStairs StoneBrickStairs NetherBrickStairs BirchWoodStairs SpruceWoodStairs JungleWoodStairs)
              (shape-back (bit-set (data-ref (- i a) j (- k c)) 2 #f))
            0)))))
  
  (bitwise-ior
    data-id
    (arithmetic-shift-left (get-shape) 3)))


(definition (choose-stairs-model what filename block-id variant-id data-id config-id i j k x y z uv lighting rendering category add-face add-cube block-ref data-ref)
  (let ((key (string-append
               "facing="
               (case (bitwise-and config-id #b11)
                 ((0) "east")
                 ((1) "west")
                 ((2) "south")
                 ((3) "north"))
               ",half="
               (if (bit-set? 2 config-id)
                   "top"
                 "bottom")
               ",shape="
               (case (arithmetic-shift-right (bitwise-and config-id #b111000) 3)
                 ((0) "straight")
                 ((1) "inner_left")
                 ((2) "inner_right")
                 ((3) "outer_left")
                 ((4) "outer_right")))))
    (with-block-state filename key
      (lambda (model rotation-y rotation-x)
        (add-json-model what model block-id variant-id data-id i j k x y z uv lighting rendering category add-face add-cube block-ref data-ref rotation-y rotation-x)))))


(define-block Chest
  54
  category: decoration
  texture: "chest_top"
  rendering: transparent-rendering
  opaque-cube?: #f
  cube?: #f
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (let ((left (- x 7m))
                    (right (+ x 7m))
                    (bottom (- y block-radius))
                    (top (+ y 7m))
                    (back (- z 7m))
                    (front (+ z 7m)))
                (let ((side-uv (get-coordinates "chest_side"))
                      (front-uv (get-coordinates "chest_front"))
                      (back-uv (get-coordinates "chest_back"))
                      (bottom-uv (get-coordinates "chest_bottom"))
                      (top-uv uv))
                  (add-face (left-face   what i j k x y z left right bottom top back front side-uv generic-coordinates lighting rendering block-id variant-id) rendering category)
                  (add-face (right-face  what i j k x y z left right bottom top back front side-uv generic-coordinates lighting rendering block-id variant-id) rendering category)
                  (add-face (bottom-face what i j k x y z left right bottom top back front bottom-uv generic-coordinates lighting rendering block-id variant-id) rendering category)
                  (add-face (top-face    what i j k x y z left right bottom top back front top-uv generic-coordinates lighting rendering block-id variant-id) rendering category)
                  (add-face (back-face   what i j k x y z left right bottom top back front back-uv generic-coordinates lighting rendering block-id variant-id) rendering category)
                  (add-face (front-face  what i j k x y z left right bottom top back front front-uv generic-coordinates lighting rendering block-id variant-id) rendering category))))
  visual: add-data-visual
  physical: add-data-physical
  right-mouse: (lambda (region sector block-id data-id i j k x y z with-field block-ref block-set! data-ref data-set! blocklight-ref blocklight-set! skylight-ref skylight-set!)
                 (with-field i j k
                   (lambda (section index)
                     (updating-sectors~ (current-zone)
                       (lambda (add-sector)
                         (add-sector (get-sector~ section))
                         (let ((world (current-world))
                               (zone (current-zone))
                               (index (get-index~ sector)))
                           (let ((chest (list index i j k))
                                 (data (if (eq? tier-kind 'client)
                                           (retrieve-chest-content~ (client-tier) (get-x~ region) (get-z~ region) (vector-ref index 0) (vector-ref index 1) (vector-ref index 2) i j k)
                                         (block-entity-data region sector i j k))))
                             (cond ((not (get-opened-chest~ zone))
                                    (play-sound-file "sound/random/chestopen" volume: .5)
                                    (show-chest~ world section data)
                                    (show-character~ world)
                                    (show-bag~ world blocks?: #f)
                                    (set-opened-chest~ zone chest)
                                    (reset-inventory-chest))
                                   ((equal? chest (get-opened-chest~ zone))
                                    (play-sound-file "sound/random/chestclosed" volume: .5)
                                    (hide-chest~ world)
                                    (hide-character~ world)
                                    (hide-bag~ world)
                                    (set-opened-chest~ zone #f))
                                   (else
                                    (play-sound-file "sound/random/chestopen" volume: .5)
                                    (hide-chest~ world)
                                    (show-chest~ world section data)
                                    (hide-character~ world)
                                    (hide-bag~ world)
                                    (show-character~ world)
                                    (show-bag~ world blocks?: #f)
                                    (set-opened-chest~ zone chest)
                                    (reset-inventory-chest)))))))))))

(define-block RedstoneWire
  55
  category: redstone
  kind: transmission
  texture: "redstone_dust_line_0"
  rendering: transparent-rendering
  opaque-cube?: #f
  cube?: #f
  physical?: #f
  ambient?: #t
  present: "redstone_dust_line_12"
  configurations: 256
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (define (data->key data)
                (case data
                  ((0) "none")
                  ((1) "side")
                  ((2) "up")))
              
              (let ((key (string-append
                           "east="   (data->key (bitwise-and config-id #b11))
                           ",north=" (data->key (arithmetic-shift-right (bitwise-and config-id #b1100) 2))
                           ",south=" (data->key (arithmetic-shift-right (bitwise-and config-id #b110000) 4))
                           ",west="  (data->key (arithmetic-shift-right (bitwise-and config-id #b11000000) 6)))))
                (with-block-state "redstone_wire.json" key
                  (lambda (model rotation-y rotation-x)
                    (let ((data-id (if (eq? what 'model) data-id 0)))
                      (add-json-model what model block-id variant-id data-id i j k x y z uv lighting rendering category add-face add-cube block-ref data-ref rotation-y rotation-x))))))
  visual: (lambda (block-id <fx> data-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> rendering category add-template add-opaque-cube add-translucent-cube add-liquid-cube add-texture-element block-ref data-ref)
            (let ((config-id (redstone-configuration i j k block-ref data-ref))
                  (depth-offset data-id))
              (add-visual-template block-id data-id config-id i j k x y z depth-offset rendering category add-template block-ref data-ref)))
  physical: (lambda (block-id <fx> data-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> add-template add-liquid-cube block-ref data-ref)
              (let ((config-id (redstone-configuration i j k block-ref data-ref)))
                (add-physical-template block-id data-id config-id i j k x y z add-template block-ref data-ref))))

(definition (redstone-configuration i <fx> j <fx> k <fx> block-ref data-ref) <fx>
  (let ((allow-top? (not (get-cube?~ (id->block (block-ref i (+ j 1) k))))) ;; + Glass Beacon Slab
        (block #f))
    (define (side-connection side-i side-k)
      (set! block (block-ref side-i j side-k))
      (cond ((or (id? block RedstoneWire RedstoneTorchOn RedstoneTorchOff Lever WoodenButton StoneButton WoodenPressurePlate StonePressurePlate)
                 (and (id? (block-ref side-i (- j 1) side-k) RedstoneWire) (not (get-cube?~ (id->block (block-ref side-i j side-k)))))
                 (and (id? block RedstoneRepeaterBlockOn RedstoneRepeaterBlockOff) (memq? (bitwise-and (data-ref side-i j side-k) #b11) (if (= side-i i) '(0 2) '(1 3)))))
             1)
            ((and allow-top? (id? (block-ref side-i (+ j 1) side-k) RedstoneWire))
             2)
            (else
             0)))
    
    (bitwise-ior
      (side-connection (+ i 1) k)
      (arithmetic-shift-left (side-connection i (- k 1)) 2)
      (arithmetic-shift-left (side-connection i (+ k 1)) 4)
      (arithmetic-shift-left (side-connection (- i 1) k) 6))))


(define-block DiamondOre
  56
  category: building
  kind: ore
  texture: "diamond_ore")


(define-block DiamondBlock
  57
  category: building
  kind: cube
  texture: "diamond_block")


(define-block WorkbenchBlock
  58
  category: decoration
  texture: "crafting_table_side"
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (add-cube what i j k x y z uv uv uv (get-coordinates "crafting_table_top") uv (get-coordinates "crafting_table_front") lighting rendering category block-id variant-id add-face))
  right-mouse: (lambda (region sector block-id data-id i j k x y z with-field block-ref block-set! data-ref data-set! blocklight-ref blocklight-set! skylight-ref skylight-set!)
                 (crafting-pane~ (current-world))))


(define-block WheatCrops
  59
  category: plants
  kind: vegetation
  texture: "wheat_stage_7"
  rendering: transparent-rendering
  opaque-cube?: #f
  cube?: #f
  physical?: #f
  ambient?: #t
  present: 'texture)


(define-block Soil
  60
  category: building
  kind: cube
  texture: "dirt"
  opaque-cube?: #f
  cube?: #f
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (add-cube what i j k x y z uv uv uv (get-coordinates "farmland_dry") uv uv lighting rendering category block-id variant-id add-face)))


(define-block Furnace
  61
  category: decoration
  texture: "furnace_side"
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (let ((key (string-append
                           "facing="
                           (case (bitwise-and data-id #b111)
                             ((3) "south")
                             ((4) "west")
                             ((5) "east")
                             (else "north")))))
                (with-block-state "furnace.json" key
                  (lambda (model rotation-y rotation-x)
                    (add-json-model what model block-id variant-id data-id i j k x y z uv lighting rendering category add-face add-cube block-ref data-ref rotation-y rotation-x)))))
  visual: add-data-visual
  physical: add-data-physical)


(define-block BurningFurnace
  62
  category: waiting ;; technical
  texture: "furnace_front_on"
  brightness: 13
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (let ((key (string-append
                           "facing="
                           (case (bitwise-and data-id #b111)
                             ((3) "south")
                             ((4) "west")
                             ((5) "east")
                             (else "north")))))
                (with-block-state "lit_furnace.json" key
                  (lambda (model rotation-y rotation-x)
                    (add-json-model what model block-id variant-id data-id i j k x y z uv lighting rendering category add-face add-cube block-ref data-ref rotation-y rotation-x)))))
  visual: add-data-visual
  physical: add-data-physical)


(class Sign-Element extends Element
  
  (property quad <Quad> initialize #f accessors generate)
  (property data        initialize #f accessors generate)
  
  (slot quad-texture <Quad-Texture+> initialize #f)
  
  (method override (destroy)
    (nextmethod)
    (when quad-texture
      (close~ quad-texture)))
  
  (method override (element-radiuses)
    (vertex 1. 1. 1.))
  
  (method override (lens-center)
    (matrix-transform matrix (quad-center (get-v1~ quad)
                                          (get-v2~ quad)
                                          (get-v3~ quad)
                                          (get-v4~ quad))))
  
  (method (sign-quad-texture)
    (let ((quad-texture <Quad-Texture> (make-quad-texture 100 50 (get-v1~ quad) (get-v2~ quad) (get-v3~ quad) (get-v4~ quad))))
      (let ((texture (get-texture~ quad-texture)))
        (let ((surface (get-surface~ texture))
              (font {Font font-name: tahoma point-size: 11 antialias: none})
              (color {Color Black})
              (width (get-width~ texture)))
          (define (draw-line v text)
            (let ((text (effective-sign-text text)))
              (let ((w (get-text-width~ surface text)))
                (let ((h (fxceiling (/ (cast <fl> (- width w)) 2.))))
                  (draw-text~ surface h v text color)))))
          
          (clear~ surface)
          (set-font~ surface font)
          (draw-line 0 (tag-assoc "Text1" data))
          (draw-line 12 (tag-assoc "Text2" data))
          (draw-line 24 (tag-assoc "Text3" data))
          (draw-line 36 (tag-assoc "Text4" data))
          (map-texture~ texture)))
      quad-texture))
  
  (method override (draw)
    (when (not quad-texture)
      (set! quad-texture (sign-quad-texture)))
    (allege quad-texture
      (render-texture~ quad-texture))))


(definition (contains-text? data)
  (and data
       (or (not (equal? (tag-assoc "Text1" data) ""))
           (not (equal? (tag-assoc "Text2" data) ""))
           (not (equal? (tag-assoc "Text3" data) ""))
           (not (equal? (tag-assoc "Text4" data) "")))))


(definition (make-sign-element position v1 v2 v3 v4 matrix data)
  (let ((quad (make-quad #f v1 v2 v3 v4)))
    (let ((elem (new Sign-Element position: position quad: quad data: data))
          (matrix (matrix-multiply& (make-translation-matrix& position) matrix)))
      (set-matrix~ elem matrix)
      elem)))


;; hacks for minecraft 1.8 format
(definition public (effective-sign-text text)
  (cond ((equal? text "null")
         "")
        ((starts-with? text "\"")
         (substring text 1 (- (string-length text) 1)))
        (else
         text)))


(definition public (find-sign text)
  (let ((context (->search-context text)))
    (continuation-capture
      (lambda (return)
        (iterate-signs
          (lambda (sign)
            (let ((data (get-data~ sign)))
              (when (or (search (tag-assoc "Text1" data) context)
                        (search (tag-assoc "Text2" data) context)
                        (search (tag-assoc "Text3" data) context)
                        (search (tag-assoc "Text4" data) context))
                (continuation-return return sign)))))
        #f))))

(definition public (iterate-signs proc)
  (let ((zone (current-zone)))
    (iterate-table (get-sectors~ zone)
      (lambda (index sector)
        (for-each (lambda (element)
                    (when (is? element Sign-Element)
                      (proc element)))
                  (get-texture-elements~ sector))))))


(define-block SignPost
  63
  category: decoration
  kind: signs
  texture: "planks_birch"
  rendering: transparent-rendering
  opaque-cube?: #f
  cube?: #f
  physical?: #f
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (let ((matrix (make-lookat-matrix& (horizon-lookat&^ (rotate-upon& (- (* (cast <fl> data-id) PI/8)) (vertex& 0. 1. 0.) (vertex& 0. 0. 1.))))))
                ;; sign
                (let ((left (- block-radius))
                      (right (+ block-radius))
                      (bottom 0.)
                      (top (+ block-radius))
                      (back (- .05))
                      (front (+ .05)))
                  (add-cuboid-generic what i j k x y z left right bottom top back front uv lighting rendering category block-id variant-id matrix add-face)
                  ;; post
                  (let ((left (- .05))
                        (right (+ .05))
                        (bottom (- block-radius))
                        (top 0.)
                        (back (- .05))
                        (front (+ .05)))
                    (add-cuboid-generic what i j k x y z left right bottom top back front uv lighting rendering category block-id variant-id matrix add-face)))))
  visual: (lambda (block-id <fx> data-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> rendering category add-template add-opaque-cube add-translucent-cube add-liquid-cube add-texture-element block-ref data-ref)
            (add-visual-template block-id data-id data-id i j k x y z #f rendering category add-template block-ref data-ref)
            ;; text
            (add-texture-element
              (lambda (region sector adder)
                (let ((data (block-entity-data region sector i j k)))
                  (when (contains-text? data)
                    (let ((matrix (make-lookat-matrix& (horizon-lookat&^ (rotate-upon& (- (* (cast <fl> data-id) PI/8)) (vertex& 0. 1. 0.) (vertex& 0. 0. 1.))))))
                      (let ((left (- block-radius))
                            (right (+ block-radius))
                            (bottom 0.)
                            (top (+ block-radius))
                            (back (- .05))
                            (front (+ .05)))
                        (let ((front (+ front add-epsilon)))
                          (let ((v1 (vertex left top front))
                                (v2 (vertex left bottom front))
                                (v3 (vertex right bottom front))
                                (v4 (vertex right top front)))
                            (adder
                              (make-sign-element (vertex& x y z) v1 v2 v3 v4 matrix data)))))))))))
  physical: add-data-physical
  right-mouse: (lambda (region sector block-id data-id i j k x y z with-field block-ref block-set! data-ref data-set! blocklight-ref blocklight-set! skylight-ref skylight-set!)
                 (invoke-block-hook (vertex x y z)))
  double-click: (lambda (region sector block-id data-id i j k x y z with-field block-ref block-set! data-ref data-set! blocklight-ref blocklight-set! skylight-ref skylight-set!)
                  (edit-sign region sector i j k)))


(define-block WoodenDoorBlock
  64
  category: redstone
  kind: mechanism
  texture: "door_wood_lower"
  rendering: transparent-rendering
  opaque-cube?: #f
  cube?: #f
  present: '(translate-y: -14. translate-z: -0. scaling: 22.  rotate-z: 30.)
  configurations: 32
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (choose-door-model what (if (eq? what 'physical) "wooden_door_p.json" "wooden_door.json") block-id variant-id data-id config-id i j k x y z uv lighting rendering category add-face add-cube block-ref data-ref))
  visual: (lambda (block-id <fx> data-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> rendering category add-template add-opaque-cube add-translucent-cube add-liquid-cube add-texture-element block-ref data-ref)
            (let ((config-id (door-configuration i j k data-id data-ref)))
              (add-visual-template block-id data-id config-id i j k x y z #f rendering category add-template block-ref data-ref)))
  physical: (lambda (block-id <fx> data-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> add-template add-liquid-cube block-ref data-ref)
              (let ((config-id (door-configuration i j k data-id data-ref)))
                (add-physical-template block-id data-id config-id i j k x y z add-template block-ref data-ref)))
  right-mouse: (lambda (region sector block-id data-id i j k x y z with-field block-ref block-set! data-ref data-set! blocklight-ref blocklight-set! skylight-ref skylight-set!)
                 (let ((zone (current-zone)))
                   (updating-sectors~ zone
                     (lambda (add-sector)
                       (define (door-sound open?)
                         (play-3d-sound
                           (if open?
                               "sound/random/door_close"
                             "sound/random/door_open")
                           (vertex x y z)))
                       
                       (cond ((bit-set? 3 data-id)
                              (with-field i (- j 1) k
                                (lambda (section index)
                                  (let ((data (data-ref section index)))
                                    (data-set! section index (bit-set data 2 (not (bit-set? 2 data))))
                                    (add-sector sector)
                                    (add-sector (get-sector~ section))))))
                             (else
                              (with-field i j k
                                (lambda (section index)
                                  (door-sound (bit-set? 2 data-id))
                                  (data-set! section index (bit-set data-id 2 (not (bit-set? 2 data-id))))
                                  (add-sector sector)
                                  (add-sector (get-sector~ section)))))))))))


(definition block-states
  (make-table))

(definition (cache-block-states filename)
  (or (table-ref block-states filename #f)
      (begin
        (set-current-directory (new-directory~ {Directory Yownu-World "assets" "minecraft" "states"} texture-dir))
        (if (file-exists? filename)
            (let ((variants (table-ref (load-json (new-file~ {Directory Yownu-World "assets" "minecraft" "states"} (list texture-dir filename))) "variants")))
              (table-set! block-states filename variants)
              variants)
          (let ((variants (table-ref (load-json (new-file~ {Directory Yownu-World "assets" "minecraft" "states" "minecraft"} filename)) "variants")))
            (table-set! block-states filename variants)
            variants)))))

(definition (with-block-state filename key proc)
  (let ((variants (cache-block-states filename)))
    (let ((variant (table-ref variants key)))
      (let ((model (string-append (table-ref variant "model") ".json"))
            (rotation-y (table-ref variant "y" 0))
            (rotation-x (table-ref variant "x" 0)))
        (proc model rotation-y rotation-x)))))


(definition (door-configuration i j k data-id data-ref)
  (let ((top? (bit-set? 3 data-id)))
    (let ((top-data (if top? data-id (data-ref i (+ j 1) k)))
          (bottom-data (if top? (data-ref i (- j 1) k) data-id)))
      (bitwise-ior
        (bitwise-and bottom-data #b11)
        (if (bit-set? 0 top-data) 4 0)
        (if (bit-set? 2 bottom-data) 8 0)
        (if (bit-set? 3 data-id) 16 0)))))


(definition (choose-door-model what filename block-id variant-id data-id config-id i j k x y z uv lighting rendering category add-face add-cube block-ref data-ref)
  (let ((key (string-append
               "facing="
               (case (bitwise-and config-id #b11)
                 ((0) "east,half=")
                 ((1) "south,half=")
                 ((2) "west,half=")
                 ((3) "north,half="))
               (if (bit-set? 4 config-id)
                   "upper,hinge="
                 "lower,hinge=")
               (if (bit-set? 2 config-id)
                   "right,open="
                 "left,open=")
               (if (bit-set? 3 config-id)
                   "true"
                 "false"))))
    (with-block-state filename key
      (lambda (model rotation-y rotation-x)
        (add-json-model what model block-id variant-id data-id i j k x y z uv lighting rendering category add-face add-cube block-ref data-ref rotation-y rotation-x)))))


(define-block Ladder
  65
  category: decoration
  kind: ladder
  texture: "ladder"
  rendering: transparent-rendering
  opaque-cube?: #f
  cube?: #f
  ambient?: #t
  present: 'texture
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (add-transparent what block-id variant-id (bitwise-and data-id #b111) 5 4 3 2 i j k x y z uv lighting rendering category add-face))
  visual: add-data-visual
  physical: add-data-physical)


(define-block Rail
  66
  category: decoration
  kind: transportation
  texture: "rail_normal"
  rendering: transparent-rendering
  opaque-cube?: #f
  cube?: #f
  present: 'texture
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (add-rail what block-id variant-id data-id i j k x y z uv lighting rendering category add-face))
  visual: add-data-visual
  physical: add-data-physical)


(define-block CobblestoneStairs
  67
  category: building
  kind: stairs
  texture: "cobblestone"
  opaque-cube?: #f
  cube?: #f
  configurations: 40
  present: '(rotate-y: 135. rotate-z: 30.)
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (choose-stairs-model what "stone_stairs.json" block-id variant-id data-id config-id i j k x y z uv lighting rendering category add-face add-cube block-ref data-ref))
  visual: (lambda (block-id <fx> data-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> rendering category add-template add-opaque-cube add-translucent-cube add-liquid-cube add-texture-element block-ref data-ref)
            (let ((config-id (stairs-configuration i j k block-ref data-ref data-id)))
              (add-visual-template block-id data-id config-id i j k x y z #f rendering category add-template block-ref data-ref)))
  physical: (lambda (block-id <fx> data-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> add-template add-liquid-cube block-ref data-ref)
              (let ((config-id (stairs-configuration i j k block-ref data-ref data-id)))
                (add-physical-template block-id data-id config-id i j k x y z add-template block-ref data-ref))))


(define-block WallSign
  68
  category: decoration
  kind: signs
  texture: "planks_birch"
  rendering: transparent-rendering
  opaque-cube?: #f
  cube?: #f
  physical?: #f
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (let ((left (- block-radius))
                    (right (+ block-radius))
                    (bottom (- (/ block-radius 2.)))
                    (top (+ (/ block-radius 2.)))
                    (back (+ (- block-radius) .025))
                    (front (+ (- block-radius) .125)))
                (let ((matrix (make-lookat-matrix& (horizon-lookat&^ (case data-id
                                                                       ((2) (vertex&  0. 0. -1.))
                                                                       ((3) (vertex&  0. 0.  1.))
                                                                       ((4) (vertex& -1. 0.  0.))
                                                                       ((5) (vertex&  1. 0.  0.)))))))
                  ;; sign
                  (add-cuboid-generic what i j k x y z left right bottom top back front uv lighting rendering category block-id variant-id matrix add-face))))
  visual: (lambda (block-id <fx> data-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> rendering category add-template add-opaque-cube add-translucent-cube add-liquid-cube add-texture-element block-ref data-ref)
            (add-visual-template block-id data-id data-id i j k x y z #f rendering category add-template block-ref data-ref)
            ;; text
            (add-texture-element
              (lambda (region sector adder)
                (let ((data (block-entity-data region sector i j k)))
                  (when (contains-text? data)
                    (let ((matrix (make-lookat-matrix& (horizon-lookat&^ (case data-id
                                                                           ((2) (vertex&  0. 0. -1.))
                                                                           ((3) (vertex&  0. 0.  1.))
                                                                           ((4) (vertex& -1. 0.  0.))
                                                                           ((5) (vertex&  1. 0.  0.)))))))
                      (let ((left (- block-radius))
                            (right (+ block-radius))
                            (bottom (- (/ block-radius 2.)))
                            (top (+ (/ block-radius 2.)))
                            (back (+ (- block-radius) .025))
                            (front (+ (- block-radius) .125)))
                        (let ((front (+ front add-epsilon)))
                          (let ((v1 (vertex left top front))
                                (v2 (vertex left bottom front))
                                (v3 (vertex right bottom front))
                                (v4 (vertex right top front)))
                            (adder
                              (make-sign-element (vertex& x y z) v1 v2 v3 v4 matrix data)))))))))))
  physical: add-data-physical
  right-mouse: (lambda (region sector block-id data-id i j k x y z with-field block-ref block-set! data-ref data-set! blocklight-ref blocklight-set! skylight-ref skylight-set!)
                 (invoke-block-hook (vertex x y z)))
  double-click: (lambda (region sector block-id data-id i j k x y z with-field block-ref block-set! data-ref data-set! blocklight-ref blocklight-set! skylight-ref skylight-set!)
                  (edit-sign region sector i j k)))


(definition (edit-sign region sector i j k)
  (let ((data (block-entity-data region sector i j k)))
    (let ((texts (if (contains-text? data)
                     (list (effective-sign-text (tag-assoc "Text1" data))
                           (effective-sign-text (tag-assoc "Text2" data))
                           (effective-sign-text (tag-assoc "Text3" data))
                           (effective-sign-text (tag-assoc "Text4" data)))
                   #f)))
      (open-sign
        initial-value: texts
        action: (lambda (texts)
                  (let ((index (get-index~ sector)))
                    (let ((sector-x (vector-ref index 0))
                          (sector-z (vector-ref index 2)))
                      (updating-sectors~ (current-zone)
                        (lambda (add-sector)
                          (add-sector sector)
                          (add-sign~ (sector-chunk~ region sector-x sector-z) (sector/coordinates->location sector i j k) texts))))))))))


(define-block Lever
  69
  category: redstone
  kind: power
  texture: "lever"
  rendering: transparent-rendering
  opaque-cube?: #f
  cube?: #f
  physical?: #f
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (lever-model what "lever.json" block-id variant-id data-id i j k x y z uv lighting rendering category add-face add-cube block-ref data-ref))
  visual: add-data-visual
  physical: add-data-physical
  right-mouse: (lambda (region sector block-id data-id i j k x y z with-field block-ref block-set! data-ref data-set! blocklight-ref blocklight-set! skylight-ref skylight-set!)
                 (with-field i j k
                   (lambda (section index)
                     (updating-sectors~ (current-zone)
                       (lambda (add-sector)
                         (add-sector (get-sector~ section))
                         (data-set! section index (bit-set data-id 3 (not (bit-set? 3 data-id))))
                         (world.redstone:redstone-update sector (list i j k block-id) add-sector with-field block-ref block-set! data-ref data-set! blocklight-ref blocklight-set!)))))))


(definition (lever-model what filename block-id variant-id data-id i j k x y z uv lighting rendering category add-face add-cube block-ref data-ref)
  (let ((key
          (string-append
            "facing="
            (case (bitwise-and data-id #b111)
              ((0) "down_z")
              ((1) "east")
              ((2) "west")
              ((3) "south")
              ((4) "north")
              ((5) "up_x")
              ((6) "up_z")
              ((7) "down_x"))
            ",powered="
            (if (bit-set? 3 data-id)
                "false"
              "true"))))
    (with-block-state filename key
      (lambda (model rotation-y rotation-x)
        (add-json-model what model block-id variant-id data-id i j k x y z uv lighting rendering category add-face add-cube block-ref data-ref rotation-y rotation-x)))))


(define-block StonePressurePlate
  70
  category: redstone
  kind: power
  texture: "stone_slab_top"
  opaque-cube?: #f
  cube?: #f
  physical?: #t
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (let ((left (+ (- x block-radius) 1m))
                    (right (- (+ x block-radius) 1m))
                    (bottom (- y block-radius))
                    (top (+ (- y block-radius) (/ 1m (if (bit-set? 0 data-id) 2 1))))
                    (back (+ (- z block-radius) 1m))
                    (front (- (+ z block-radius) 1m)))
                (add-face (left-face   what i j k x y z left right bottom top back front uv generic-coordinates lighting rendering block-id variant-id) rendering category)
                (add-face (right-face  what i j k x y z left right bottom top back front uv generic-coordinates lighting rendering block-id variant-id) rendering category)
                (add-face (bottom-face what i j k x y z left right bottom top back front uv generic-coordinates lighting rendering block-id variant-id) rendering category)
                (add-face (top-face    what i j k x y z left right bottom top back front uv generic-coordinates lighting rendering block-id variant-id) rendering category)
                (add-face (back-face   what i j k x y z left right bottom top back front uv generic-coordinates lighting rendering block-id variant-id) rendering category)
                (add-face (front-face  what i j k x y z left right bottom top back front uv generic-coordinates lighting rendering block-id variant-id) rendering category))))


(define-block IronDoorBlock
  71
  category: redstone
  kind: mechanism
  texture: "door_iron_lower"
  rendering: transparent-rendering
  opaque-cube?: #f
  cube?: #f
  present: '(translate-y: -14. translate-z: -0. scaling: 22.  rotate-z: 30.)
  configurations: 32
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (choose-door-model what (if (eq? what 'physical) "iron_door_p.json" "iron_door.json") block-id variant-id data-id config-id i j k x y z uv lighting rendering category add-face add-cube block-ref data-ref))
  visual: (lambda (block-id <fx> data-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> rendering category add-template add-opaque-cube add-translucent-cube add-liquid-cube add-texture-element block-ref data-ref)
            (let ((config-id (door-configuration i j k data-id data-ref)))
              (add-visual-template block-id data-id config-id i j k x y z #f rendering category add-template block-ref data-ref)))
  physical: (lambda (block-id <fx> data-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> add-template add-liquid-cube block-ref data-ref)
              (let ((config-id (door-configuration i j k data-id data-ref)))
                (add-physical-template block-id data-id config-id i j k x y z add-template block-ref data-ref))))


(define-block WoodenPressurePlate
  72
  category: redstone
  kind: power
  texture: "planks_oak"
  opaque-cube?: #f
  cube?: #f
  physical?: #t
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (let ((left (+ (- x block-radius) 1m))
                    (right (- (+ x block-radius) 1m))
                    (bottom (- y block-radius))
                    (top (+ (- y block-radius) (/ 1m (if (bit-set? 0 data-id) 2 1))))
                    (back (+ (- z block-radius) 1m))
                    (front (- (+ z block-radius) 1m)))
                (add-face (left-face   what i j k x y z left right bottom top back front uv generic-coordinates lighting rendering block-id variant-id) rendering category)
                (add-face (right-face  what i j k x y z left right bottom top back front uv generic-coordinates lighting rendering block-id variant-id) rendering category)
                (add-face (bottom-face what i j k x y z left right bottom top back front uv generic-coordinates lighting rendering block-id variant-id) rendering category)
                (add-face (top-face    what i j k x y z left right bottom top back front uv generic-coordinates lighting rendering block-id variant-id) rendering category)
                (add-face (back-face   what i j k x y z left right bottom top back front uv generic-coordinates lighting rendering block-id variant-id) rendering category)
                (add-face (front-face  what i j k x y z left right bottom top back front uv generic-coordinates lighting rendering block-id variant-id) rendering category))))


(define-block RedstoneOre
  73
  category: building
  kind: ore
  texture: "redstone_ore")


(define-block GlowingRedstoneOre
  74
  category: building
  kind: ore
  texture: "repeater_on"
  brightness: 9)


(define-block RedstoneTorchOff
  75
  category: invalid
  texture: "redstone_torch_off"
  rendering: transparent-rendering
  opaque-cube?: #f
  cube?: #f
  physical?: #f
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (add-torch what block-id variant-id data-id i j k x y z uv lighting rendering category add-face add-cube block-ref data-ref "melon_top" "planks_spruce"))
  visual: add-data-visual
  physical: add-data-physical)


(define-block RedstoneTorchOn
  76
  category: redstone
  kind: redstonetorch
  texture: "redstone_torch_on"
  rendering: transparent-rendering
  opaque-cube?: #f
  cube?: #f
  physical?: #f
  brightness: 7
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (redstone-torch-model what "redstone_torch.json" block-id variant-id data-id i j k x y z uv lighting rendering category add-face add-cube block-ref data-ref))
  visual: add-data-visual
  physical: add-data-physical)

(definition (redstone-torch-model what filename block-id variant-id data-id i j k x y z uv lighting rendering category add-face add-cube block-ref data-ref)
  (let ((key (string-append
                 "facing="
                 (case data-id
                   ((1) "west")
                   ((2) "east")
                   ((3) "north")
                   ((4) "south")
                   (else "up")))))
    (with-block-state filename key
      (lambda (model rotation-y rotation-x)
        (add-json-model what model block-id variant-id data-id i j k x y z uv lighting rendering category add-face add-cube block-ref data-ref (+ rotation-y 180) rotation-x)))))


(define-block StoneButton
  77
  category: redstone
  kind: power
  texture: "cobblestone"
  opaque-cube?: #f
  cube?: #f
  physical?: #f
  present: '(rotate-z: 30.)
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (add-button what block-id variant-id data-id i j k x y z uv lighting rendering category add-face add-cube block-ref data-ref))
  visual: add-data-visual
  physical: add-data-physical
  right-mouse: (lambda (region sector block-id data-id i j k x y z with-field block-ref block-set! data-ref data-set! blocklight-ref blocklight-set! skylight-ref skylight-set!)
                 (with-field i j k
                   (lambda (section index)
                     (updating-sectors~ (current-zone)
                       (lambda (add-sector)
                         (add-sector (get-sector~ section))
                         (unless (bit-set? 3 data-id)
                           (data-set! section index (bit-set data-id 3 #t))
                           (world.redstone:redstone-update sector (list i j k block-id) add-sector with-field block-ref block-set! data-ref data-set! blocklight-ref blocklight-set! #t))))))))


(define-block Snow
  78
  category: building
  kind: snow
  texture: "snow"
  rendering: transparent-rendering
  opaque-cube?: #f
  cube?: #f
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (let ((left (- x block-radius))
                    (right (+ x block-radius))
                    (bottom (- y block-radius))
                    (top (+ (- y block-radius) (* (+ data-id 1) (/ 1. 8.))))
                    (back (- z block-radius))
                    (front (+ z block-radius)))
                (add-face (left-face   what i j k x y z left right bottom top back front uv generic-coordinates lighting rendering block-id variant-id) rendering category)
                (add-face (right-face  what i j k x y z left right bottom top back front uv generic-coordinates lighting rendering block-id variant-id) rendering category)
                (add-face (bottom-face what i j k x y z left right bottom top back front uv generic-coordinates lighting rendering block-id variant-id) rendering category)
                (add-face (top-face    what i j k x y z left right bottom top back front uv generic-coordinates lighting rendering block-id variant-id) rendering category)
                (add-face (back-face   what i j k x y z left right bottom top back front uv generic-coordinates lighting rendering block-id variant-id) rendering category)
                (add-face (front-face  what i j k x y z left right bottom top back front uv generic-coordinates lighting rendering block-id variant-id) rendering category)))
  visual: add-data-visual
  physical: add-data-physical)


(define-block Ice
  79
  category: building
  kind: ice
  texture: "ice")


(define-block SnowBlock
  80
  category: building
  kind: snow
  texture: "snow")


(define-block Cactus
  81
  category: decoration
  kind: veggieblock
  texture: "cactus_side"
  rendering: transparent-rendering
  opaque-cube?: #f
  cube?: #f
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (let ((left (- x 7m))
                    (right (+ x 7m))
                    (bottom (- y block-radius))
                    (top (+ y block-radius))
                    (back (- z 7m))
                    (front (+ z 7m))
                    (far-left (if (eq? what 'physical) (- x 7m) (- x block-radius)))
                    (far-right (if (eq? what 'physical) (+ x 7m) (+ x block-radius)))
                    (far-front (if (eq? what 'physical) (+ z 7m) (+ z block-radius)))
                    (far-back (if (eq? what 'physical) (- z 7m) (- z block-radius)))
                    (top-uv (get-coordinates "cactus_top"))
                    (bottom-uv (get-coordinates "cactus_bottom")))
                (add-face (left-face   what i j k x y z left right bottom top far-back far-front uv generic-coordinates lighting rendering block-id variant-id) rendering category)
                (add-face (right-face  what i j k x y z left right bottom top far-back far-front uv generic-coordinates lighting rendering block-id variant-id) rendering category)
                (add-face (back-face   what i j k x y z far-left far-right bottom top back front uv generic-coordinates lighting rendering block-id variant-id) rendering category)
                (add-face (front-face  what i j k x y z far-left far-right bottom top back front uv generic-coordinates lighting rendering block-id variant-id) rendering category)
                (unless (bit-set? 1 config-id)
                  (add-face (top-face what i j k x y z far-left far-right bottom top far-back far-front top-uv generic-coordinates lighting rendering block-id variant-id) rendering category))
                (unless (bit-set? 0 config-id)
                  (add-face (bottom-face what i j k x y z far-left far-right bottom top far-back far-front bottom-uv generic-coordinates lighting rendering block-id variant-id) rendering category))))
  visual: (lambda (block-id <fx> data-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> rendering category add-template add-opaque-cube add-translucent-cube add-liquid-cube add-texture-element block-ref data-ref)
            (let ((config-id (cactus-configuration i j k block-ref)))
              (add-visual-template block-id data-id config-id i j k x y z #f rendering category add-template block-ref data-ref)))
  physical: (lambda (block-id <fx> data-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> add-template add-liquid-cube block-ref data-ref)
              (let ((config-id (cactus-configuration i j k block-ref)))
                (add-physical-template block-id data-id config-id i j k x y z add-template block-ref data-ref))))

(definition (cactus-configuration i j k block-ref)
  (define (connects? dj <fx>)
    (id? (block-ref i (+ j dj) k) Cactus))
  
  (bitwise-ior
    (if (connects? -1) 1 0)
    (if (connects?  1) 2 0)))

(define-block Clay
  82
  category: building
  kind: cube
  texture: "clay")


(define-block SugarCane
  83
  category: plants
  kind: vegetation
  texture: "reeds"
  rendering: transparent-rendering
  opaque-cube?: #f
  cube?: #f
  physical?: #f
  ambient?: #t
  present: 'texture)


(define-block Jukebox
  84
  category: decoration
  texture: "jukebox_side"
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (add-cube what i j k x y z uv uv uv (get-coordinates "jukebox_top") uv uv lighting rendering category block-id variant-id add-face)))


(define-block Fence
  85
  category: decoration
  kind: fence
  texture: "planks_oak"
  rendering: transparent-rendering
  opaque-cube?: #f
  cube?: #f
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (add-fence what block-id variant-id config-id i j k x y z uv lighting rendering category add-face block-ref))
  visual: (lambda (block-id <fx> data-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> rendering category add-template add-opaque-cube add-translucent-cube add-liquid-cube add-texture-element block-ref data-ref)
            (let ((config-id (fence-configuration i j k block-ref '(85 @quick-hack-to-remove-all-doors 107))))
              (add-visual-template block-id data-id config-id i j k x y z #f rendering category add-template block-ref data-ref)))
  physical: (lambda (block-id <fx> data-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> add-template add-liquid-cube block-ref data-ref)
              (let ((config-id (fence-configuration i j k block-ref '(85 @quick-hack-to-remove-all-doors 107))))
                (add-physical-template block-id data-id config-id i j k x y z add-template block-ref data-ref))))


(define-block Pumpkin
  86
  category: decoration
  kind: veggieblock
  texture: "pumpkin_side"
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (let ((key (string-append
                           "facing="
                           (case (bitwise-and data-id #b11)
                             ((0) "south")
                             ((1) "west")
                             ((2) "north")
                             (else "east")))))
                (with-block-state "pumpkin.json" key
                  (lambda (model rotation-y rotation-x)
                    (add-json-model what model block-id variant-id data-id i j k x y z uv lighting rendering category add-face add-cube block-ref data-ref rotation-y rotation-x)))))
  visual: add-data-visual
  physical: add-data-physical)


(define-block Netherrack
  87
  category: building
  kind: cube
  rendering: water-rendering
  texture: "netherrack")


(define-block SoulSand
  88
  category: building
  kind: cube
  rendering: water-rendering
  texture: "soul_sand")


(define-block Glowstone
  89
  category: building
  kind: cube
  rendering: multitexture-rendering
  texture: "glowstone"
  brightness: 15)


;; improve
(define-block Portal
  90
  category: decoration
  kind: portal
  rendering: multitexture-rendering
  texture: "portal"
  opaque-cube?: #f
  cube?: #f
  ambient?: #t
  present: '(rotate-z: 30.))


(define-block Jack-O-Lantern
  91
  category: decoration
  kind: veggieblock
  texture: "pumpkin_top"
  brightness: 15
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (let ((key (string-append
                           "facing="
                           (case (bitwise-and data-id #b11)
                             ((0) "south")
                             ((1) "west")
                             ((2) "north")
                             (else "east")))))
                (with-block-state "lit_pumpkin.json" key
                  (lambda (model rotation-y rotation-x)
                    (add-json-model what model block-id variant-id data-id i j k x y z uv lighting rendering category add-face add-cube block-ref data-ref rotation-y rotation-x)))))
  visual: add-data-visual
  physical: add-data-physical)


(define-block CakeBlock
  92
  category: decoration
  kind: cake
  texture: "cake_side"
  rendering: transparent-rendering
  opaque-cube?: #f
  cube?: #f
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (let ((margin 1m)
                    (half (/ 1. 32.)))
                (let ((left (+ (- x block-radius) margin))
                      (right (- (+ x block-radius) margin))
                      (bottom (- y block-radius))
                      (top y)
                      (back (+ (- z block-radius) margin))
                      (front (- (+ z block-radius) margin))
                      (side-uv uv)
                      (bottom-uv (get-coordinates "cake_bottom"))
                      (top-uv (get-coordinates "cake_top")))
                  (add-face (left-face   what i j k x y z left right bottom top back front side-uv generic-coordinates lighting rendering block-id variant-id) rendering category)
                  (add-face (right-face  what i j k x y z left right bottom top back front side-uv generic-coordinates lighting rendering block-id variant-id) rendering category)
                  (add-face (bottom-face what i j k x y z left right bottom top back front bottom-uv generic-coordinates lighting rendering block-id variant-id) rendering category)
                  (add-face (top-face    what i j k x y z left right bottom top back front top-uv generic-coordinates lighting rendering block-id variant-id) rendering category)
                  (add-face (back-face   what i j k x y z left right bottom top back front side-uv generic-coordinates lighting rendering block-id variant-id) rendering category)
                  (add-face (front-face  what i j k x y z left right bottom top back front side-uv generic-coordinates lighting rendering block-id variant-id) rendering category)))))


;; improve
(define-block RedstoneRepeaterBlockOff
  93
  category: redstone
  kind: transmission
  texture: "repeater_off"
  rendering: transparent-rendering
  opaque-cube?: #f
  cube?: #f
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (let ((margin 2m)
                    (small 1m)
                    (matrix (make-y-rotation-matrix (* PI/2 (cast <fl> (bitwise-and data-id #b11))))))
                (let ((left (- block-radius))
                      (right (+ block-radius))
                      (bottom (- block-radius))
                      (top (+ margin (- block-radius)))
                      (back (- block-radius))
                      (front (+ block-radius))
                      (torch-back (+ (- 2m) (* (arithmetic-shift-right (bitwise-and data-id #b1100) 2) 2m))))
                  (let ((side-uv (uv-rect (get-coordinates "stone")  0. .875 0. 1.))
                        (torch-uv (uv-rect (get-coordinates "redstone_torch_off") 6m 5m 10m 11m))
                        (torch-top-uv (uv-rect (get-coordinates "redstone_torch_off") 7m 6m 9m 8m)))
                    (add-face (left-generic   what i j k x y z left right bottom top back front side-uv generic-coordinates lighting rendering block-id variant-id matrix) rendering redstone)
                    (add-face (right-generic  what i j k x y z left right bottom top back front side-uv generic-coordinates lighting rendering block-id variant-id matrix) rendering redstone)
                    (add-face (bottom-generic what i j k x y z left right bottom top back front (get-coordinates "stone") generic-coordinates lighting rendering block-id variant-id matrix) rendering redstone)
                    (add-face (top-generic    what i j k x y z left right bottom top back front uv generic-coordinates lighting rendering block-id variant-id matrix) rendering redstone)
                    (add-face (back-generic   what i j k x y z left right bottom top back front side-uv generic-coordinates lighting rendering block-id variant-id matrix) rendering redstone)
                    (add-face (front-generic  what i j k x y z left right bottom top back front side-uv generic-coordinates lighting rendering block-id variant-id matrix) rendering redstone)
                    (unless (eq? what 'physical)
                      (add-face (left-generic   what i j k x y z (- small) small top (+ top (* 3 margin)) (+ (- block-radius) margin) (- (* 2 margin)) torch-uv generic-coordinates lighting rendering block-id variant-id matrix) rendering redstone)
                      (add-face (right-generic  what i j k x y z (- small) small top (+ top (* 3 margin)) (+ (- block-radius) margin) (- (* 2 margin)) torch-uv generic-coordinates lighting rendering block-id variant-id matrix) rendering redstone)
                      (add-face (back-generic   what i j k x y z (- small) small top (+ top (* 3 margin)) (+ (- block-radius) margin) (- (* 2 margin)) torch-uv generic-coordinates lighting rendering block-id variant-id matrix) rendering redstone)
                      (add-face (front-generic  what i j k x y z (- small) small top (+ top (* 3 margin)) (+ (- block-radius) margin) (- (* 2 margin)) torch-uv generic-coordinates lighting rendering block-id variant-id matrix) rendering redstone)
                      (add-face (top-generic    what i j k x y z (- small) small top (+ top (* 3 margin)) (+ (- block-radius) margin) (- (* 2 margin)) torch-top-uv generic-coordinates lighting rendering block-id variant-id matrix) rendering redstone)
                      (add-face (left-generic   what i j k x y z (- small) small top (+ top (* 3 margin)) torch-back (+ torch-back 2m) torch-uv generic-coordinates lighting rendering block-id variant-id matrix) rendering redstone)
                      (add-face (right-generic  what i j k x y z (- small) small top (+ top (* 3 margin)) torch-back (+ torch-back 2m) torch-uv generic-coordinates lighting rendering block-id variant-id matrix) rendering redstone)
                      (add-face (back-generic   what i j k x y z (- small) small top (+ top (* 3 margin)) torch-back (+ torch-back 2m) torch-uv generic-coordinates lighting rendering block-id variant-id matrix) rendering redstone)
                      (add-face (front-generic  what i j k x y z (- small) small top (+ top (* 3 margin)) torch-back (+ torch-back 2m) torch-uv generic-coordinates lighting rendering block-id variant-id matrix) rendering redstone)
                      (add-face (top-generic    what i j k x y z (- small) small top (+ top (* 3 margin)) torch-back (+ torch-back 2m) torch-top-uv generic-coordinates lighting rendering block-id variant-id matrix) rendering redstone))))))
  visual: add-data-visual
  physical: add-data-physical
  right-mouse: (lambda (region sector block-id data-id i j k x y z with-field block-ref block-set! data-ref data-set! blocklight-ref blocklight-set! skylight-ref skylight-set!)
                 (updating-sectors~ (current-zone)
                   (lambda (add-sector)
                     (with-field i j k
                       (lambda (section index)
                         (let ((delay (arithmetic-shift-right (bitwise-and data-id #b1100) 2)))
                           (let ((ajust (if (= delay 3) -12 4)))
                             (add-sector (get-sector~ section))
                             (data-set! section index (+ data-id ajust))))))))))


;; improve
(define-block RedstoneRepeaterBlockOn
  94
  category: invalid
  texture: "repeater_on"
  rendering: transparent-rendering
  opaque-cube?: #f
  cube?: #f
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (let ((margin 2m)
                    (small 1m)
                    (matrix (make-y-rotation-matrix (* PI/2 (cast <fl> (bitwise-and data-id #b11))))))
                (let ((left (- block-radius))
                      (right (+ block-radius))
                      (bottom (- block-radius))
                      (top (+ margin (- block-radius)))
                      (back (- block-radius))
                      (front (+ block-radius))
                      (torch-back (+ (- 2m) (* (arithmetic-shift-right (bitwise-and data-id #b1100) 2) 2m))))
                  (let ((side-uv (uv-rect (get-coordinates "stone")  0. .875 0. 1.))
                        (torch-uv (uv-rect (get-coordinates "redstone_torch_on") 6m 5m 10m 11m))
                        (torch-top-uv (uv-rect (get-coordinates "redstone_torch_on") 7m 6m 9m 8m)))
                    (add-face (left-generic   what i j k x y z left right bottom top back front side-uv generic-coordinates lighting rendering block-id variant-id matrix) rendering redstone)
                    (add-face (right-generic  what i j k x y z left right bottom top back front side-uv generic-coordinates lighting rendering block-id variant-id matrix) rendering redstone)
                    (add-face (bottom-generic what i j k x y z left right bottom top back front (get-coordinates "stone") generic-coordinates lighting rendering block-id variant-id matrix) rendering redstone)
                    (add-face (top-generic    what i j k x y z left right bottom top back front uv generic-coordinates lighting rendering block-id variant-id matrix) rendering redstone)
                    (add-face (back-generic   what i j k x y z left right bottom top back front side-uv generic-coordinates lighting rendering block-id variant-id matrix) rendering redstone)
                    (add-face (front-generic  what i j k x y z left right bottom top back front side-uv generic-coordinates lighting rendering block-id variant-id matrix) rendering redstone)
                    (unless (eq? what 'physical)
                      (add-face (left-generic   what i j k x y z (- small) small top (+ top (* 3 margin)) (+ (- block-radius) margin) (- (* 2 margin)) torch-uv generic-coordinates lighting rendering block-id variant-id matrix) rendering redstone)
                      (add-face (right-generic  what i j k x y z (- small) small top (+ top (* 3 margin)) (+ (- block-radius) margin) (- (* 2 margin)) torch-uv generic-coordinates lighting rendering block-id variant-id matrix) rendering redstone)
                      (add-face (back-generic   what i j k x y z (- small) small top (+ top (* 3 margin)) (+ (- block-radius) margin) (- (* 2 margin)) torch-uv generic-coordinates lighting rendering block-id variant-id matrix) rendering redstone)
                      (add-face (front-generic  what i j k x y z (- small) small top (+ top (* 3 margin)) (+ (- block-radius) margin) (- (* 2 margin)) torch-uv generic-coordinates lighting rendering block-id variant-id matrix) rendering redstone)
                      (add-face (top-generic    what i j k x y z (- small) small top (+ top (* 3 margin)) (+ (- block-radius) margin) (- (* 2 margin)) torch-top-uv generic-coordinates lighting rendering block-id variant-id matrix) rendering redstone)
                      (add-face (left-generic   what i j k x y z (- small) small top (+ top (* 3 margin)) torch-back (+ torch-back 2m) torch-uv generic-coordinates lighting rendering block-id variant-id matrix) rendering redstone)
                      (add-face (right-generic  what i j k x y z (- small) small top (+ top (* 3 margin)) torch-back (+ torch-back 2m) torch-uv generic-coordinates lighting rendering block-id variant-id matrix) rendering redstone)
                      (add-face (back-generic   what i j k x y z (- small) small top (+ top (* 3 margin)) torch-back (+ torch-back 2m) torch-uv generic-coordinates lighting rendering block-id variant-id matrix) rendering redstone)
                      (add-face (front-generic  what i j k x y z (- small) small top (+ top (* 3 margin)) torch-back (+ torch-back 2m) torch-uv generic-coordinates lighting rendering block-id variant-id matrix) rendering redstone)
                      (add-face (top-generic    what i j k x y z (- small) small top (+ top (* 3 margin)) torch-back (+ torch-back 2m) torch-top-uv generic-coordinates lighting rendering block-id variant-id matrix) rendering redstone))))))
  visual: add-data-visual
  physical: add-data-physical
  right-mouse: (lambda (region sector block-id data-id i j k x y z with-field block-ref block-set! data-ref data-set! blocklight-ref blocklight-set! skylight-ref skylight-set!)
                 (updating-sectors~ (current-zone)
                   (lambda (add-sector)
                     (with-field i j k
                       (lambda (section index)
                         (let ((delay (arithmetic-shift-right (bitwise-and data-id #b1100) 2)))
                           (let ((ajust (if (= delay 3) -12 4)))
                             (add-sector (get-sector~ section))
                             (data-set! section index (+ data-id ajust))))))))))


;; improve
(define-block LockedChest
  95
  category: waiting ;; decoration
  texture: "piston_top_normal"
  cube?: #f)


(define-block Trapdoor
  96
  category: redstone
  kind: mechanism
  texture: "trapdoor"
  rendering: transparent-rendering
  opaque-cube?: #f
  cube?: #f
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (choose-trapdoor-model what (if (eq? what 'physical) "trapdoor_p.json" "trapdoor.json") block-id variant-id data-id i j k x y z uv lighting rendering category add-face add-cube block-ref data-ref))
  visual: add-data-visual
  physical: add-data-physical
  right-mouse: (lambda (region sector block-id data-id i j k x y z with-field block-ref block-set! data-ref data-set! blocklight-ref blocklight-set! skylight-ref skylight-set!)
                 (let ((zone (current-zone)))
                   (updating-sectors~ zone
                     (lambda (add-sector)
                       (with-field i j k
                         (lambda (section index)
                           (data-set! section index (bit-set data-id 2 (not (bit-set? 2 data-id))))
                           (add-sector sector))))))))


(definition (choose-trapdoor-model what filename block-id variant-id data-id i j k x y z uv lighting rendering category add-face add-cube block-ref data-ref)
  (let ((key
          (string-append
            "facing="
            (case (bitwise-and data-id #b11)
              ((0) "south,half=")
              ((1) "north,half=")
              ((2) "east,half=")
              ((3) "west,half="))
            (if (bit-set? 3 data-id)
                "top,open="
              "bottom,open=")
            (if (bit-set? 2 data-id)
                "true"
              "false"))))
    (with-block-state filename key
      (lambda (model rotation-y rotation-x)
        (add-json-model what model block-id variant-id data-id i j k x y z uv lighting rendering category add-face add-cube block-ref data-ref (+ rotation-y 180.) rotation-x)))))


;; improve with data
(define-block MonsterEgg
  97
  category: waiting
  kind: cube
  generic?: #t)

(define-block StoneSilverfish
  (97 0)
  texture: "stone")

(define-block CobblestoneSilverfish
  (97 1)
  texture: "cobblestone")

(define-block StoneBrickSilverfish
  (97 2)
  texture: "stonebrick")

(define-block MossyStoneBrickSilverfish
  (97 3)
  texture: "stonebrick_mossy")

(define-block CrackedStoneBrickSilverfish
  (97 4)
  texture: "stonebrick_cracked")

(define-block CarvedStoneBrickSilverfish
  (97 5)
  texture: "stonebrick_carved")


(define-block StoneBricks
  98
  category: building
  kind: cube
  generic?: #t
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (add-cube what i j k x y z uv uv uv uv uv uv lighting rendering category block-id variant-id add-face)))

(define-block StoneBrick
  (98 0)
  texture: "stonebrick")

(define-block MossyStoneBrick
  (98 1)
  texture: "stonebrick_mossy")

(define-block CrackedStoneBrick
  (98 2)
  texture: "stonebrick_cracked")

(define-block CarvedStoneBrick
  (98 3)
  texture: "stonebrick_carved")


(define-block BrownMushroomCap
  99
  category: decoration
  kind: veggieblock
  texture: "mushroom_block_skin_brown")


(define-block RedMushroomCap
  100
  category: decoration
  kind: veggieblock
  texture: "mushroom_block_skin_red")


(define-block IronBars
  101
  category: decoration
  kind: bars
  texture: "iron_bars"
  rendering: transparent-rendering
  opaque-cube?: #f
  cube?: #f
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (choose-fence-model what (if (eq? what 'physical) "iron_bars_p.json" "iron_bars.json") block-id variant-id data-id config-id i j k x y z uv lighting rendering category add-face add-cube block-ref data-ref))
  visual: (lambda (block-id <fx> data-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> rendering category add-template add-opaque-cube add-translucent-cube add-liquid-cube add-texture-element block-ref data-ref)
            (let ((config-id (fence-configuration i j k block-ref '(101))))
              (add-visual-template block-id data-id config-id i j k x y z #f rendering category add-template block-ref data-ref)))
  physical: (lambda (block-id <fx> data-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> add-template add-liquid-cube block-ref data-ref)
              (let ((config-id (fence-configuration i j k block-ref '(101))))
                (add-physical-template block-id data-id config-id i j k x y z add-template block-ref data-ref))))


(definition (choose-fence-model what filename block-id variant-id data-id config-id i j k x y z uv lighting rendering category add-face add-cube block-ref data-ref)  
  (let ((key (string-append
               "east="
               (if (bit-set? 0 config-id)
                   "true"
                 "false")
               ",north="
               (if (bit-set? 3 config-id)
                   "true"
                 "false")
               ",south="
               (if (bit-set? 2 config-id)
                   "true"
                 "false")
               ",west="
               (if (bit-set? 1 config-id)
                   "true"
                 "false"))))
    (with-block-state filename key
      (lambda (model rotation-y rotation-x)
        (add-json-model what model block-id variant-id data-id i j k x y z uv lighting rendering category add-face add-cube block-ref data-ref rotation-y rotation-x)))))


(define-block GlassPane
  102
  category: decoration
  kind: glass
  texture: "glass"
  rendering: transparent-rendering
  opaque-cube?: #f
  translucent-cube?: #t
  cube?: #f
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (add-cube-faces what i j k x y z uv lighting rendering category block-id variant-id add-face)))


(define-block MelonBlock
  103
  category: decoration
  kind: veggieblock
  texture: "melon_side"
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (let ((top (get-coordinates "melon_top")))
                (add-cube what i j k x y z uv uv top top uv uv lighting rendering category block-id variant-id add-face))))


(define-block PumpkinStem
  104
  category: plants
  kind: vegetation
  texture: "pumpkin_stem_disconnected_ochre"
  rendering: transparent-rendering
  opaque-cube?: #f
  cube?: #f
  physical?: #f
  ambient?: #t
  present: "pumpkin_stem_disconnected_ochre"
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (add-cross-faces what i j k x y z uv lighting rendering category block-id variant-id add-face)))


(define-block MelonStem
  105
  category: waiting ;; decoration ;; no need for two stems
  kind: vegetation
  texture: "melon_stem_disconnected_ochre"
  rendering: transparent-rendering
  opaque-cube?: #f
  cube?: #f
  physical?: #f
  ambient?: #t
  present: "melon_stem_disconnected_ochre"
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (add-cross-faces what i j k x y z uv lighting rendering category block-id variant-id add-face)))


(define-block Vines
  106
  category: plants
  kind: vegetation
  texture: "vine_green"
  rendering: transparent-rendering
  opaque-cube?: #f
  cube?: #f
  physical?: #f
  ambient?: #t
  present: "vine_green"
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (add-transparent what block-id variant-id data-id 2 8 4 1 i j k x y z uv lighting rendering category add-face))
  visual: add-data-visual
  physical: add-data-physical)


(define-block FenceGate
  107
  ;; no category until we display fences
  ;; category: redstone
  ;; kind: mechanism
  texture: "planks_oak"
  rendering: transparent-rendering
  opaque-cube?: #f
  cube?: #f
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              ;; quick hack to remove all fences
              #f
              @w
              (let ((matrix (make-lookat-matrix& (horizon-lookat&^ (case (bitwise-and data-id #b11)
                                                                     ((0 2) (vertex&  0. 0.  1.))
                                                                     ((1 3) (vertex& -1. 0.  0.))))))
                    (opened? (bit-set? 2 data-id)))
                (define (add-trunk left <fl> right <fl>)
                  (let ((bottom (+ (- block-radius) .35))
                        (top (+ block-radius))
                        (back (- .075))
                        (front (+ .075)))
                    (add-cuboid-generic what i j k x y z left right bottom top back front uv lighting rendering category block-id variant-id matrix add-face)))
                
                (define (add-branches left <fl> right <fl> back <fl> front <fl>)
                  ;; upper
                  (let ((bottom (- .35 .075))
                        (top (+ .35 .075)))
                    (add-cuboid-generic what i j k x y z left right bottom top back front uv lighting rendering category block-id variant-id matrix add-face))
                  ;; lower
                  (let ((bottom (- .075))
                        (top (+ .075)))
                    (add-cuboid-generic what i j k x y z left right bottom top back front uv lighting rendering category block-id variant-id matrix add-face)))
                
                (define (add-middle left <fl> right <fl> back <fl> front <fl>)
                  (let ((bottom -.075)
                        (top (+ .35 .075)))
                    (add-cuboid-generic what i j k x y z left right bottom top back front uv lighting rendering category block-id variant-id matrix add-face)))
                
                ;; trunk
                (add-trunk (- block-radius) (+ (- block-radius) .2))
                (add-trunk (- (+ block-radius) .2) (+ block-radius))
                ;; branches
                (cond (opened?
                       (add-branches (- block-radius) (+ (- block-radius) .2) .075 (- (+ block-radius) .2))
                       (add-branches (- (+ block-radius) .2) (+ block-radius) .075 (- (+ block-radius) .2)))
                      (else
                       (add-branches (+ (- block-radius) .2) -.1 (- .075) (+ .075))
                       (add-branches .1 (- (+ block-radius) .2) (- .075) (+ .075))))
                ;; middle
                (cond (opened?
                       (add-middle (- block-radius) (+ (- block-radius) .2) (- (+ block-radius) .2) (+ block-radius))
                       (add-middle (- (+ block-radius) .2) (+ block-radius) (- (+ block-radius) .2) (+ block-radius)))
                      (else
                       (add-middle -.1 0. (- .075) (+ .075))
                       (add-middle 0. .1 (- .075) (+ .075)))))
              
              @w(unless (eq? what 'physical)
                  (let ((key (string-append
                               "facing="
                               (case (bitwise-and data-id #b11)
                                 ((0) "south")
                                 ((1) "west")
                                 ((2) "north")
                                 (else "east"))
                               ",in_wall=false,open="
                               (if (bit-set? 2 data-id)
                                   "true"
                                 "false"))))
                    (with-block-state "fence_gate.json" key
                      (lambda (model rotation-y rotation-x)
                        (add-json-model what model block-id variant-id data-id i j k x y z uv lighting rendering category add-face add-cube block-ref data-ref rotation-y rotation-x))))))
  visual: add-data-visual
  physical: add-data-physical)


(define-block BrickStairs
  108
  category: building
  kind: stairs
  texture: "brick"
  opaque-cube?: #f
  cube?: #f
  configurations: 40
  present: '(rotate-y: 135. rotate-z: 30.)
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (choose-stairs-model what "brick_stairs.json" block-id variant-id data-id config-id i j k x y z uv lighting rendering category add-face add-cube block-ref data-ref))
  visual: (lambda (block-id <fx> data-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> rendering category add-template add-opaque-cube add-translucent-cube add-liquid-cube add-texture-element block-ref data-ref)
            (let ((config-id (stairs-configuration i j k block-ref data-ref data-id)))
              (add-visual-template block-id data-id config-id i j k x y z #f rendering category add-template block-ref data-ref)))
  physical: (lambda (block-id <fx> data-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> add-template add-liquid-cube block-ref data-ref)
              (let ((config-id (stairs-configuration i j k block-ref data-ref data-id)))
                (add-physical-template block-id data-id config-id i j k x y z add-template block-ref data-ref))))


(define-block StoneBrickStairs
  109
  category: building
  kind: stairs
  texture: "stonebrick"
  opaque-cube?: #f
  cube?: #f
  configurations: 40
  present: '(rotate-y: 135. rotate-z: 30.)
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (choose-stairs-model what "stone_brick_stairs.json" block-id variant-id data-id config-id i j k x y z uv lighting rendering category add-face add-cube block-ref data-ref))
  visual: (lambda (block-id <fx> data-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> rendering category add-template add-opaque-cube add-translucent-cube add-liquid-cube add-texture-element block-ref data-ref)
            (let ((config-id (stairs-configuration i j k block-ref data-ref data-id)))
              (add-visual-template block-id data-id config-id i j k x y z #f rendering category add-template block-ref data-ref)))
  physical: (lambda (block-id <fx> data-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> add-template add-liquid-cube block-ref data-ref)
              (let ((config-id (stairs-configuration i j k block-ref data-ref data-id)))
                (add-physical-template block-id data-id config-id i j k x y z add-template block-ref data-ref))))


(define-block Mycelium
  110
  category: building
  kind: cube
  texture: "mycelium_side"
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (let ((top (get-coordinates "mycelium_top")))
                (add-cube what i j k x y z uv uv uv top uv uv lighting rendering category block-id variant-id add-face))))


(define-block LilyPad
  111
  category: plants
  kind: vegetation
  texture: "waterlily_green"
  rendering: transparent-rendering
  opaque-cube?: #f
  cube?: #f
  ambient?: #t
  present: 'texture
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (add-bottom what i j k x y z uv generic-coordinates lighting rendering category block-id variant-id add-face)))


(define-block NetherBrick
  112
  category: building
  kind: cube
  texture: "nether_brick")


(define-block NetherBrickFence
  113
  category: decoration
  kind: fence
  texture: "bdc_fence_nether_side"
  rendering: transparent-rendering
  opaque-cube?: #f
  cube?: #f
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (add-fence what block-id variant-id config-id i j k x y z (get-coordinates "nether_brick") lighting rendering category add-face block-ref))
  visual: (lambda (block-id <fx> data-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> rendering category add-template add-opaque-cube add-translucent-cube add-liquid-cube add-texture-element block-ref data-ref)
            (let ((config-id (fence-configuration i j k block-ref '(107 113))))
              (add-visual-template block-id data-id config-id i j k x y z #f rendering category add-template block-ref data-ref)))
  physical: (lambda (block-id <fx> data-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> add-template add-liquid-cube block-ref data-ref)
              (let ((config-id (fence-configuration i j k block-ref '(107 113))))
                (add-physical-template block-id data-id config-id i j k x y z add-template block-ref data-ref))))


(define-block NetherBrickStairs
  114
  category: building
  kind: stairs
  texture: "nether_brick"
  opaque-cube?: #f
  cube?: #f
  configurations: 40
  present: '(rotate-y: 135. rotate-z: 30.)
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (choose-stairs-model what "nether_brick_stairs.json" block-id variant-id data-id config-id i j k x y z uv lighting rendering category add-face add-cube block-ref data-ref))
  visual: (lambda (block-id <fx> data-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> rendering category add-template add-opaque-cube add-translucent-cube add-liquid-cube add-texture-element block-ref data-ref)
            (let ((config-id (stairs-configuration i j k block-ref data-ref data-id)))
              (add-visual-template block-id data-id config-id i j k x y z #f rendering category add-template block-ref data-ref)))
  physical: (lambda (block-id <fx> data-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> add-template add-liquid-cube block-ref data-ref)
              (let ((config-id (stairs-configuration i j k block-ref data-ref data-id)))
                (add-physical-template block-id data-id config-id i j k x y z add-template block-ref data-ref))))

;; improve
(define-block NetherWart
  115
  category: plants
  kind: vegetation
  texture: "nether_wart_stage_1"
  rendering: transparent-rendering
  opaque-cube?: #f
  cube?: #f
  ambient?: #t
  present: 'texture)


(define-block EnchantmentTable
  116
  category: decoration
  texture: "enchanting_table_side"
  opaque-cube?: #f
  cube?: #f
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (let ((margin 4m))
                (let ((left (- x block-radius))
                      (right (+ x block-radius))
                      (bottom (- y block-radius))
                      (top (+ y margin))
                      (back (- z block-radius))
                      (front (+ z block-radius))
                      (top-uv (get-coordinates "enchanting_table_top"))
                      (bottom-uv (get-coordinates "enchanting_table_bottom")))
                  (add-face (top-face    what i j k x y z left right bottom top back front top-uv generic-coordinates lighting rendering block-id variant-id) rendering category)
                  (add-face (bottom-face what i j k x y z left right bottom top back front bottom-uv generic-coordinates lighting rendering block-id variant-id) rendering category)
                  (add-face (left-face   what i j k x y z left right bottom top back front uv generic-coordinates lighting rendering block-id variant-id) rendering category)
                  (add-face (right-face  what i j k x y z left right bottom top back front uv generic-coordinates lighting rendering block-id variant-id) rendering category)
                  (add-face (back-face   what i j k x y z left right bottom top back front uv generic-coordinates lighting rendering block-id variant-id) rendering category)
                  (add-face (front-face  what i j k x y z left right bottom top back front uv generic-coordinates lighting rendering block-id variant-id) rendering category)))))


(define-block BrewingStand
  117
  category: decoration
  texture: "brewing_stand"
  rendering: transparent-rendering
  opaque-cube?: #f
  cube?: #f
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (let ((key (string-append
                           "has_bottle_0="
                           (if (bit-set? 0 data-id)
                               "true"
                             "false")
                           ",has_bottle_1="
                           (if (bit-set? 1 data-id)
                               "true"
                             "false")
                           ",has_bottle_2="
                           (if (bit-set? 2 data-id)
                               "true"
                             "false"))))
                (with-block-state (if (eq? what 'physical) "brewing_stand_p.json" "brewing_stand.json") key
                  (lambda (model rotation-y rotation-x)
                    (add-json-model what model block-id variant-id data-id i j k x y z uv lighting rendering category add-face add-cube block-ref data-ref rotation-y rotation-x)))))
  visual: add-data-visual
  physical: add-data-physical)


(define-block Cauldron
  118
  category: decoration
  texture: "cauldron_side"
  rendering: transparent-rendering
  opaque-cube?: #f
  cube?: #f
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (let ((margin 4m)
                    (half 2m))
                (let ((left (- x block-radius))
                      (right (+ x block-radius))
                      (bottom (- y block-radius))
                      (top (+ y block-radius))
                      (back (- z block-radius))
                      (front (+ z block-radius))
                      (top-uv (get-coordinates "cauldron_top"))
                      (bottom-uv (get-coordinates "cauldron_bottom"))
                      (inner-uv (get-coordinates "cauldron_inner")))
                  (add-face (top-face    what i j k x y z left right bottom top back front top-uv generic-coordinates lighting rendering block-id variant-id) rendering category)
                  (add-face (bottom-face what i j k x y z left right bottom top back front bottom-uv generic-coordinates lighting rendering block-id variant-id) rendering category)
                  (add-face (left-face   what i j k x y z left right bottom top back front uv generic-coordinates lighting rendering block-id variant-id) rendering category)
                  (add-face (right-face  what i j k x y z left right bottom top back front uv generic-coordinates lighting rendering block-id variant-id) rendering category)
                  (add-face (back-face   what i j k x y z left right bottom top back front uv generic-coordinates lighting rendering block-id variant-id) rendering category)
                  (add-face (front-face  what i j k x y z left right bottom top back front uv generic-coordinates lighting rendering block-id variant-id) rendering category)
                  (add-face (left-face   what i j k x y z (+ left half) (- right half) bottom top (+ back half) (- front half) uv generic-coordinates lighting rendering block-id variant-id) rendering category)
                  (add-face (right-face  what i j k x y z (+ left half) (- right half) bottom top (+ back half) (- front half) uv generic-coordinates lighting rendering block-id variant-id) rendering category)
                  (add-face (back-face   what i j k x y z (+ left half) (- right half) bottom top (+ back half) (- front half) uv generic-coordinates lighting rendering block-id variant-id) rendering category)
                  (add-face (front-face  what i j k x y z (+ left half) (- right half) bottom top (+ back half) (- front half) uv generic-coordinates lighting rendering block-id variant-id) rendering category)
                  (add-face (top-face    what i j k x y z left right bottom (+ bottom margin) back front inner-uv generic-coordinates lighting rendering block-id variant-id) rendering category)
                  (if (and (eq? what 'visual) (> data-id 0))
                      (let ((water-uv (get-coordinates "water"))
                            (wtop (+ y (* 3m (- data-id 1)))))
                        (add-face (top-face what i j k x y z left right bottom wtop back front water-uv generic-coordinates lighting rendering block-id variant-id) rendering category))))))
  visual: add-data-visual
  physical: add-data-physical)


;; improve
(define-block EndPortal
  119
  category: waiting ;; decoration
  texture: "stone_slab_top"
  opaque-cube?: #f
  cube?: #f
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (add-slab what i j k x y z uv uv lighting rendering category block-id variant-id add-face)))


(define-block EndPortalFrame
  120
  category: waiting ;; decoration
  texture: "endframe_side"
  rendering: transparent-rendering
  opaque-cube?: #f
  cube?: #f
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (let ((margin 5m))
                (let ((left (- x block-radius))
                      (right (+ x block-radius))
                      (bottom (- y block-radius))
                      (top (+ y margin))
                      (back (- z block-radius))
                      (front (+ z block-radius))
                      (top-uv (get-coordinates "endframe_top"))
                      (bottom-uv (get-coordinates "end_stone")))
                  (add-face (top-face    what i j k x y z left right bottom top back front top-uv generic-coordinates lighting rendering block-id variant-id) rendering category)
                  (add-face (bottom-face what i j k x y z left right bottom top back front bottom-uv generic-coordinates lighting rendering block-id variant-id) rendering category)
                  (add-face (left-face   what i j k x y z left right bottom top back front uv generic-coordinates lighting rendering block-id variant-id) rendering category)
                  (add-face (right-face  what i j k x y z left right bottom top back front uv generic-coordinates lighting rendering block-id variant-id) rendering category)
                  (add-face (back-face   what i j k x y z left right bottom top back front uv generic-coordinates lighting rendering block-id variant-id) rendering category)
                  (add-face (front-face  what i j k x y z left right bottom top back front uv generic-coordinates lighting rendering block-id variant-id) rendering category)))
              (when (= data-id 4)
                (let ((margin 4m))
                  (let ((top (+ y block-radius))
                        (bottom (+ y 5m))
                        (left (- x margin))
                        (right (+ x margin))
                        (back (- z margin))
                        (front (+ z margin))
                        (side-uv (get-coordinates "endframe_eye_side"))
                        (top-uv (get-coordinates "endframe_eye")))
                    (add-face (left-face  what i j k x y z left right bottom top back front side-uv generic-coordinates lighting rendering block-id variant-id) rendering category)
                    (add-face (right-face what i j k x y z left right bottom top back front side-uv generic-coordinates lighting rendering block-id variant-id) rendering category)
                    (add-face (front-face what i j k x y z left right bottom top back front side-uv generic-coordinates lighting rendering block-id variant-id) rendering category)
                    (add-face (back-face  what i j k x y z left right bottom top back front side-uv generic-coordinates lighting rendering block-id variant-id) rendering category)
                    (add-face (top-face   what i j k x y z left right bottom top back front top-uv generic-coordinates lighting rendering block-id variant-id) rendering category)))))
  visual: add-data-visual
  physical: add-data-physical)


(define-block EndStone
  121
  category: building
  kind: cube
  texture: "end_stone")


;; improve
(define-block DragonEgg
  122
  category: waiting
  texture: "dragon_egg"
  opaque-cube?: #f
  cube?: #f)


(define-block RedstoneLampOff
  123
  category: redstone
  kind: mechanism
  texture: "redstone_lamp_off"
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (let ((top (get-coordinates "redstone_lamp_top_off")))
                (add-cube what i j k x y z uv uv uv top uv uv lighting rendering category block-id variant-id add-face))))


(define-block RedstoneLampOn
  124
  category: invalid
  texture: "redstone_lamp_on"
  brightness: 15
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (let ((top (get-coordinates "redstone_lamp_top_on")))
                (add-cube what i j k x y z uv uv uv top uv uv lighting rendering category block-id variant-id add-face))))


;; improve
(define-block DoubleWoodenSlab
  125
  category: waiting
  kind: slab
  generic?: #t
  opaque-cube?: #t
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (add-slab what i j k x y z uv (uv-rect uv 0. .5 1. 1.) lighting rendering category block-id variant-id add-face)
              (add-slab what i j k x (+ y block-radius) z uv (uv-rect uv 0. 0. 1. .5) lighting rendering category block-id variant-id add-face)))

(define-block DoubleOakSlab
  (125 0)
  texture: "planks_oak")

(define-block DoubleSpruceSlab
  (125 1)
  texture: "planks_spruce")

(define-block DoubleBirchSlab
  (125 2)
  texture: "planks_birch")

(define-block DoubleJungleSlab
  (125 3)
  texture: "planks_jungle")

(define-block DoubleAcaciaSlab
  (125 4)
  texture: "planks_acacia")

(define-block DoubleDarkOakSlab
  (125 5)
  texture: "planks_big_oak")


(define-block WoodenSlab
  126
  category: wood
  kind: slab
  generic?: #t
  variant-mask: #b111
  opaque-cube?: #f
  cube?: #f
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (if (< data-id 6)
                  (add-slab what i j k x y z uv (uv-rect uv 0. .5 1. 1.) lighting rendering category block-id variant-id add-face)
                (add-slab what i j k x (+ y block-radius) z uv (uv-rect uv 0. 0. 1. .5) lighting rendering category block-id variant-id add-face))))

(define-block OakSlab
  (126 0)
  texture: "planks_oak")

(define-block SpruceSlab
  (126 1)
  texture: "planks_spruce")

(define-block BirchSlab
  (126 2)
  texture: "planks_birch")

(define-block JungleSlab
  (126 3)
  texture: "planks_jungle")

(define-block AcaciaSlab
  (126 4)
  texture: "planks_acacia")

(define-block DarkOakSlab
  (126 5)
  texture: "planks_big_oak")


(define-block CocoaPlant
  127
  category: waiting ;; decoration
  texture: "cocoa_stage_2"
  opaque-cube?: #f
  cube?: #f)


(define-block SandstoneStairs
  128
  category: building
  kind: stairs
  texture: "sandstone_normal"
  opaque-cube?: #f
  cube?: #f
  configurations: 40
  present: '(rotate-y: 135. rotate-z: 30.)
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (choose-stairs-model what "sandstone_stairs.json" block-id variant-id data-id config-id i j k x y z uv lighting rendering category add-face add-cube block-ref data-ref))
  visual: (lambda (block-id <fx> data-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> rendering category add-template add-opaque-cube add-translucent-cube add-liquid-cube add-texture-element block-ref data-ref)
            (let ((config-id (stairs-configuration i j k block-ref data-ref data-id)))
              (add-visual-template block-id data-id config-id i j k x y z #f rendering category add-template block-ref data-ref)))
  physical: (lambda (block-id <fx> data-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> add-template add-liquid-cube block-ref data-ref)
              (let ((config-id (stairs-configuration i j k block-ref data-ref data-id)))
                (add-physical-template block-id data-id config-id i j k x y z add-template block-ref data-ref))))


(define-block EmeraldOre
  129
  category: building
  kind: ore
  texture: "emerald_ore")


;; improve
(define-block EnderChest
  130
  category: waiting ;; decoration
  texture: "farmland_wet"
  opaque-cube?: #f
  cube?: #f)


;; improve
(define-block TripwireHook
  131
  category: waiting ;; redstone
  texture: "farmland_wet"
  opaque-cube?: #f
  cube?: #f)


;; improve
(define-block Tripwire
  132
  category: waiting ;; redstone
  texture: "farmland_wet"
  opaque-cube?: #f
  cube?: #f)


(define-block EmeraldBlock
  133
  category: building
  kind: cube
  texture: "emerald_block")


(define-block SpruceWoodStairs
  134
  category: wood
  kind: stairs
  texture: "planks_spruce"
  opaque-cube?: #f
  cube?: #f
  configurations: 40
  present: '(rotate-y: 135. rotate-z: 30.)
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (choose-stairs-model what "spruce_stairs.json" block-id variant-id data-id config-id i j k x y z uv lighting rendering category add-face add-cube block-ref data-ref))
  visual: (lambda (block-id <fx> data-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> rendering category add-template add-opaque-cube add-translucent-cube add-liquid-cube add-texture-element block-ref data-ref)
            (let ((config-id (stairs-configuration i j k block-ref data-ref data-id)))
              (add-visual-template block-id data-id config-id i j k x y z #f rendering category add-template block-ref data-ref)))
  physical: (lambda (block-id <fx> data-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> add-template add-liquid-cube block-ref data-ref)
              (let ((config-id (stairs-configuration i j k block-ref data-ref data-id)))
                (add-physical-template block-id data-id config-id i j k x y z add-template block-ref data-ref))))


(define-block BirchWoodStairs
  135
  category: wood
  kind: stairs
  texture: "planks_birch"
  opaque-cube?: #f
  cube?: #f
  configurations: 40
  present: '(rotate-y: 135. rotate-z: 30.)
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (choose-stairs-model what "birch_stairs.json" block-id variant-id data-id config-id i j k x y z uv lighting rendering category add-face add-cube block-ref data-ref))
  visual: (lambda (block-id <fx> data-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> rendering category add-template add-opaque-cube add-translucent-cube add-liquid-cube add-texture-element block-ref data-ref)
            (let ((config-id (stairs-configuration i j k block-ref data-ref data-id)))
              (add-visual-template block-id data-id config-id i j k x y z #f rendering category add-template block-ref data-ref)))
  physical: (lambda (block-id <fx> data-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> add-template add-liquid-cube block-ref data-ref)
              (let ((config-id (stairs-configuration i j k block-ref data-ref data-id)))
                (add-physical-template block-id data-id config-id i j k x y z add-template block-ref data-ref))))


(define-block JungleWoodStairs
  136
  category: wood
  kind: stairs
  texture: "planks_jungle"
  opaque-cube?: #f
  cube?: #f
  configurations: 40
  present: '(rotate-y: 135. rotate-z: 30.)
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (choose-stairs-model what "jungle_stairs.json" block-id variant-id data-id config-id i j k x y z uv lighting rendering category add-face add-cube block-ref data-ref))
  visual: (lambda (block-id <fx> data-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> rendering category add-template add-opaque-cube add-translucent-cube add-liquid-cube add-texture-element block-ref data-ref)
            (let ((config-id (stairs-configuration i j k block-ref data-ref data-id)))
              (add-visual-template block-id data-id config-id i j k x y z #f rendering category add-template block-ref data-ref)))
  physical: (lambda (block-id <fx> data-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> add-template add-liquid-cube block-ref data-ref)
              (let ((config-id (stairs-configuration i j k block-ref data-ref data-id)))
                (add-physical-template block-id data-id config-id i j k x y z add-template block-ref data-ref))))


(define-block CommandBlock
  137
  category: redstone
  kind: mechanism
  texture: "command_block"
  opaque-cube?: #f
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (add-cube what i j k x y z uv uv uv uv uv uv lighting rendering category block-id variant-id add-face)))


;; improve
(define-block BeaconBlock
  138
  category: decoration
  texture: "beacon"
  cube?: #f
  brightness: 15)


;; improve
(define-block CobblestoneWall
  139
  category: waiting
  texture: "cobblestone"
  opaque-cube?: #f
  cube?: #f)


;; improve
(define-block FlowerPot
  140
  category: waiting ;; decoration
  texture: "farmland_wet"
  opaque-cube?: #f
  cube?: #f)


;; improve
(define-block Carrots
  141
  category: waiting ;; decoration
  texture: "farmland_wet"
  rendering: transparent-rendering
  opaque-cube?: #f
  cube?: #f)


;; improve
(define-block Potatoes
  142
  category: waiting ;; decoration
  texture: "farmland_wet"
  rendering: transparent-rendering
  opaque-cube?: #f
  cube?: #f)


;; improve
(define-block WoodenButton
  143
  category: redstone
  kind: power
  texture: "farmland_wet"
  opaque-cube?: #f
  cube?: #f
  physical?: #f
  present: '(rotate-z: 30.)
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (add-button what block-id variant-id data-id i j k x y z uv lighting rendering category add-face add-cube block-ref data-ref))
  visual: add-data-visual
  physical: add-data-physical
  right-mouse: (lambda (region sector block-id data-id i j k x y z with-field block-ref block-set! data-ref data-set! blocklight-ref blocklight-set! skylight-ref skylight-set!)
                 (with-field i j k
                   (lambda (section index)
                     (updating-sectors~ (current-zone)
                       (lambda (add-sector)
                         (add-sector (get-sector~ section))
                         (unless (bit-set? 3 data-id)
                           (data-set! section index (bit-set data-id 3 #t))
                           (world.redstone:redstone-update sector (list i j k block-id) add-sector with-field block-ref block-set! data-ref data-set! blocklight-ref blocklight-set! #t))))))))


(define-block Leaves2
  161
  category: plants
  kind: leaves
  generic?: #t
  variant-mask: #b11
  rendering: transparent-rendering
  opaque-cube?: #f
  translucent-cube?: #t
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (add-cube-faces what i j k x y z uv lighting rendering category block-id variant-id add-face)))

(define-block AcaciaLeaves
  (161 0)
  texture: "leaves_acacia_green")

(define-block DarkOakLeaves
  (161 1)
  texture: "leaves_big_oak_green")


(define-block Wood2
  162
  category: wood
  kind: bark
  generic?: #t
  variant-mask: #b11
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (add-cube what i j k x y z uv uv uv uv uv uv lighting rendering category block-id variant-id add-face)))

(define-block AcaciaWood
  (162 0)
  texture: "log_acacia")

(define-block DarkOakWood
  (162 1)
  texture: "log_big_oak")


(define-block DoublePlant
  175
  category: plants
  kind: vegetation
  generic?: #t
  variant-mask: #b111
  rendering: transparent-rendering
  cube?: #f
  opaque-cube?: #f
  physical?: #f
  ambient?: #t
  present: 'texture
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (let ((uv (if (bit-set? 3 data-id)
                            uv
                          (get-coordinates (case (bitwise-and data-id #b111)
                                             ((0) "double_plant_sunflower_bottom")
                                             ((1) "double_plant_syringa_bottom")
                                             ((2) "double_plant_grass_bottom_green")
                                             ((3) "double_plant_fern_bottom_green")
                                             ((4) "double_plant_rose_bottom")
                                             (else "double_plant_paeonia_bottom"))))))
                (add-cross-faces what i j k x y z uv lighting rendering category block-id variant-id add-face))))

(define-block DoublePlantSunflower
  (175 0)
  texture: "double_plant_sunflower_top")

(define-block DoublePlantLilac
  (175 1)
  texture: "double_plant_syringa_top")

(define-block DoubleTallGrass
  (175 2)
  texture: "double_plant_grass_top_green")

(define-block DoubleFern
  (175 3)
  texture: "double_plant_fern_top_green")

(define-block DoublePlantRose
  (175 4)
  texture: "double_plant_rose_top")

(define-block DoublePlantPeony
  (175 5)
  texture: "double_plant_paeonia_top")


;;;
;;;; Custom
;;;


;; quick test to use ids


(define-block Cube
  200
  category: sloped
  texture: "stone"
  ;; much slower version because it uses generic lighting
  ;; this can be a great test when optimizing generic lighting
  ;; generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
  ;;             (generate-model what 'Cube block-id variant-id i j k x y z uv generic-coordinates lighting rendering category add-face))
  )


(define-block Step-Big
  201
  category: sloped
  texture: "stone"
  opaque-cube?: #f
  cube?: #f
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (generate-model what 'Step-Big block-id variant-id i j k x y z uv generic-coordinates lighting rendering category add-face)))


(define-block Step-Small
  202
  category: sloped
  texture: "stone"
  opaque-cube?: #f
  cube?: #f
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (generate-model what 'Step-Small block-id variant-id i j k x y z uv generic-coordinates lighting rendering category add-face)))


(define-block Step
  203
  category: sloped
  texture: "stone"
  opaque-cube?: #f
  cube?: #f
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (generate-model what 'Step block-id variant-id i j k x y z uv generic-coordinates lighting rendering category add-face)))


(define-block Slope
  204
  category: sloped
  texture: "stone"
  opaque-cube?: #f
  cube?: #f
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (generate-model what 'Slope block-id variant-id i j k x y z uv generic-coordinates lighting rendering category add-face)))


(define-block Corner-Left
  205
  category: sloped
  texture: "stone"
  opaque-cube?: #f
  cube?: #f
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (generate-model what 'Corner-Left block-id variant-id i j k x y z uv generic-coordinates lighting rendering category add-face)))


(define-block Corner-Right
  206
  category: sloped
  texture: "stone"
  opaque-cube?: #f
  cube?: #f
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (generate-model what 'Corner-Right block-id variant-id i j k x y z uv generic-coordinates lighting rendering category add-face)))


(define-block Corner-Pyramid
  207
  category: sloped
  texture: "stone"
  opaque-cube?: #f
  cube?: #f
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (generate-model what 'Corner-Pyramid block-id variant-id i j k x y z uv generic-coordinates lighting rendering category add-face)))


(define-block Corner-Slope
  208
  category: sloped
  texture: "stone"
  opaque-cube?: #f
  cube?: #f
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (generate-model what 'Corner-Slope block-id variant-id i j k x y z uv generic-coordinates lighting rendering category add-face)))


(define-block Pyramid
  209
  category: sloped
  texture: "stone"
  opaque-cube?: #f
  cube?: #f
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (generate-model what 'Pyramid block-id variant-id i j k x y z uv generic-coordinates lighting rendering category add-face)))


@wait
(define-block Floor
  210
  category: sloped
  texture: "stone"
  opaque-cube?: #f
  cube?: #f
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (generate-model what 'Floor block-id variant-id i j k x y z uv generic-coordinates lighting rendering category add-face)))


@wait
(define-block Wall
  211
  category: sloped
  texture: "stone"
  opaque-cube?: #f
  cube?: #f
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (generate-model what 'Wall block-id variant-id i j k x y z uv generic-coordinates lighting rendering category add-face)))


@wait
(define-block Ceiling
  212
  category: sloped
  texture: "stone"
  opaque-cube?: #f
  cube?: #f
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (generate-model what 'Ceiling block-id variant-id i j k x y z uv generic-coordinates lighting rendering category add-face)))


;;;
;;;; Unknown
;;;


(let ((unknown-texture "gold_ore"))
  (loop (for id from 0 below 256)
        (unless (vector-ref blockids (* id block-variants))
          (register-block 'Unknown id
            texture: unknown-texture))))


;;;
;;;; Biomes
;;;


;; kinda hack around circular dependency
(iterate-table biome-names
  (lambda (name biome)
    (set-fill~ biome (get-id~ (name->block (get-fill~ biome))))
    (set-top~ biome (get-id~ (name->block (get-top~ biome)))))))
