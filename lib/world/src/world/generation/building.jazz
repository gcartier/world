;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Generation Building
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;    Edouard Hebert


(module world.generation.building jazz


(import (jazz.audio)
        (jazz.geometry)
        (jazz.graphic)
        (jazz.io)
        (jazz.json)
        (world)
        (world.autoload)
        (world.biome)
        (world.context)
        (world.generation)
        (world.generation.base)
        (world.generation.block)
        (world.generation.categories)
        (world.generation.model)
        (world.generation.rendering)
        (world.geometry)
        (world.index)
        (world.interface.inventory)
        (world.interface.sign)
        (world.quad)
        (world.quad-texture)
        (world.sound)
        (world.syntax (phase syntax))
        (world.tag)
        (world.texture))


(definition inline (water? id)
  (id? id 8 9))

(definition inline (lava? id)
  (id? id 10 11))

(definition inline (glass? id)
  (id? id 20))


(define-block Air
  0
  opaque?: #f
  opaque-cube?: #f
  cube?: #f)


(define-block Stone
  1
  category: building
  kind: cube
  texture: "stone")

@test
(define-block Stone
  1
  category: building
  kind: cube
  texture: "stone"
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (let ((matrix (make-identity-matrix&))
                    (left (- block-radius))
                    (right (+ block-radius))
                    (bottom (- block-radius))
                    (top (+ block-radius))
                    (back (- block-radius))
                    (front (+ block-radius)))
                (add-cuboid-generic what i j k x y z left right bottom top back front uv lighting rendering category block-id variant-id matrix add-face)))
  visual: add-data-visual
  physical: add-data-physical)

@test
(define-block Stone
  1
  category: building
  kind: cube
  texture: "stone"
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (add-json-model what "stone.json" block-id variant-id data-id i j k x y z uv lighting rendering category add-face add-cube block-ref data-ref 0 0))
  visual: add-data-visual
  physical: add-data-physical)


(define-block Grass
  2
  category: building
  kind: cube
  texture: "grass_side"
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              ;; this is so much nicer than the grass in the texture pack
              (let ((side (cache-coordinates "grass_side"))
                    (top (cache-coordinates "wool_colored_green"))
                    (bottom (cache-coordinates "dirt")))
                (add-cube what i j k x y z side side bottom top side side lighting rendering category block-id variant-id add-face))))


(define-block Dirt
  3
  category: building
  kind: cube
  texture: "dirt")


(define-block Cobblestone
  4
  category: building
  kind: cube
  texture: "cobblestone")


(define-block WoodenPlank
  5
  category: wood
  kind: cube
  texture: "planks_oak"
  generic?: #t)

(define-block OakPlank
  (5 0)
  texture: "planks_oak")

(define-block SprucePlank
  (5 1)
  texture: "planks_spruce")

(define-block BirchPlank
  (5 2)
  texture: "planks_birch")

(define-block JunglePlank
  (5 3)
  texture: "planks_jungle")

(define-block AcaciaPlank
  (5 4)
  texture: "planks_acacia")

(define-block DarkOakPlank
  (5 5)
  texture: "planks_big_oak")


(define-block Bedrock
  7
  category: building
  kind: cube
  texture: "bedrock")


(definition (liquid-heights i <fx> j <fx> k <fx> data-id <fx> block-ref data-ref blocks proc)
  (define (side-data side-i <fx> side-k <fx>) <fx>
    (data-ref (+ i side-i) j (+ k side-k)))
  
  (define (data->height data-id <fx>) <fl>
    (if (< data-id 8)
        (- (* 2m (cast <fl> (- 8 data-id))) 1m)
      16m))
  
  (define (corner-height side-i <fx> side-k <fx> data-id <fx>)
    (let ((block1 <fx> (block-ref (+ i side-i) j k))
          (block2 <fx> (block-ref i j (+ k side-k)))
          (block3 <fx> (block-ref (+ i side-i) j (+ k side-k)))
          (data1 (side-data side-i 0))
          (data2 (side-data 0 side-k))
          (data3 (side-data side-i side-k)))
      (let ((height1 (if (memq? block1 blocks)
                         (if (or (< data1 data-id) (> data1 7))
                             (data->height data1)
                           (data->height data-id))
                       1m))
            (height2 (if (memq? block2 blocks)
                         (if (or (< data2 data-id) (> data2 7))
                             (data->height data2)
                           (data->height data-id))
                       1m))
            (height3 (if (memq? block3 blocks)
                         (if (or (< data3 data-id) (> data3 7))
                             (data->height data3)
                           (data->height data-id))
                       1m)))
        (- (max height1 height2 height3) block-radius))))
  
  (cond ((> data-id 7)
         (proc 8m 8m 8m 8m))
        ((= data-id 0)
         (proc 7m 7m 7m 7m))
        (else
         (let ((left-back   (corner-height -1 -1 data-id))
               (left-front  (corner-height -1  1 data-id))
               (right-front (corner-height  1  1 data-id))
               (right-back  (corner-height  1 -1 data-id)))
           (proc left-back left-front right-front right-back)))))


(definition (liquid-generator test blocks)
  (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
    (liquid-heights i j k data-id block-ref data-ref blocks
      (lambda (left-back left-front right-front right-back)
        (let ((left (- block-radius))
              (right block-radius)
              (bottom (if (test (block-ref i (- j 1) k)) (- (- block-radius) 1m) (- block-radius)))
              (back (- block-radius))
              (front block-radius))
          (define (liquid-opaque? id)
            (or (and (get-cube? (id->block id)) (not (glass? id)))
                (test id)))
          
          (unless (liquid-opaque? (block-ref (- i 1) j k))
            (add-face (left-generic-quad what i j k x y z left right bottom left-back left-front back front uv generic-coordinates lighting rendering block-id variant-id) rendering category))
          (unless (liquid-opaque? (block-ref (+ i 1) j k))
            (add-face (right-generic-quad what i j k x y z left right bottom right-front right-back back front uv generic-coordinates lighting rendering block-id variant-id) rendering category))
          (unless (liquid-opaque? (block-ref i (- j 1) k))
            (add-face (bottom-generic what i j k x y z left right bottom left-back back front uv generic-coordinates lighting rendering block-id variant-id (make-identity-matrix)) rendering category))
          (unless (let ((id (block-ref i (+ j 1) k)))
                    (or (test id) (glass? id)))
            (for-each (lambda (face)
                        (add-face face rendering category))
                      (top-sloped what i j k x y z left right bottom left-back left-front right-front right-back back front uv generic-coordinates lighting rendering block-id variant-id)))
          (unless (liquid-opaque? (block-ref i j (- k 1)))
            (add-face (back-generic-quad what i j k x y z left right bottom right-back left-back back front uv generic-coordinates lighting rendering block-id variant-id) rendering category))
          (unless (liquid-opaque? (block-ref i j (+ k 1)))
            (add-face (front-generic-quad what i j k x y z left right bottom left-front right-front back front uv generic-coordinates lighting rendering block-id variant-id) rendering category)))))))


(definition (cube-liquid-generator bottom top)
  (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
    (let ((left (- block-radius))
          (right block-radius)
          (back (- block-radius))
          (front block-radius))
      (add-face (left-face   what i j k x y z left right bottom top back front uv generic-coordinates lighting rendering block-id variant-id) rendering category)
      (add-face (right-face  what i j k x y z left right bottom top back front uv generic-coordinates lighting rendering block-id variant-id) rendering category)
      (add-face (bottom-face what i j k x y z left right bottom top back front uv generic-coordinates lighting rendering block-id variant-id) rendering category)
      (add-face (top-face    what i j k x y z left right bottom top back front uv generic-coordinates lighting rendering block-id variant-id) rendering category)
      (add-face (back-face   what i j k x y z left right bottom top back front uv generic-coordinates lighting rendering block-id variant-id) rendering category)
      (add-face (front-face  what i j k x y z left right bottom top back front uv generic-coordinates lighting rendering block-id variant-id) rendering category))))

(definition generate-partial-water
  (cube-liquid-generator (- 9m) 7m))

(definition generate-bottom-water
  (cube-liquid-generator (- 8m) 7m))


(definition (liquid-visual-adder blocks)
  (lambda (block-id <fx> data-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> rendering category add-template add-opaque-cube add-translucent-cube add-liquid-cube add-texture-element block-ref data-ref)
    (if (get-liquid-cube? (id->block (block-ref i (+ j 1) k)))
        (if (get-liquid-cube? (id->block (block-ref i (- j 1) k)))
            (let ((template (find-visual-template block-id data-id 0 generate-partial-water)))
              (add-liquid-cube i j k x y z rendering category template add-template))
          (let ((template (find-visual-template block-id data-id 1 generate-bottom-water)))
            (add-liquid-cube i j k x y z rendering category template add-template)))
      (liquid-heights i j k data-id block-ref data-ref blocks
        (lambda (left-back <fl> left-front <fl> right-front <fl> right-back <fl>)
          (if (and (= left-back 7m)
                   (= left-front 7m)
                   (= right-front 7m)
                   (= right-back 7m))
              (let ((template (find-visual-template block-id data-id 0 generate-partial-water)))
                (add-liquid-cube i j k x y z rendering category template add-template))
            (let ((block (id/data-id->block block-id data-id)))
              (dynamic-visual-template block data-id i j k block-ref data-ref
                (lambda (template)
                  (add-template i j k x y z template #f rendering category))))))))))


(definition (liquid-physical-adder blocks)
  (lambda (block-id <fx> data-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> add-template add-liquid-cube block-ref data-ref)
    (if (get-liquid-cube? (id->block (block-ref i (+ j 1) k)))
        (if (get-liquid-cube? (id->block (block-ref i (- j 1) k)))
            (let ((template (find-physical-template block-id data-id 0 generate-partial-water)))
              (add-liquid-cube i j k x y z template add-template))
          (let ((template (find-physical-template block-id data-id 1 generate-bottom-water)))
            (add-liquid-cube i j k x y z template add-template)))
      (liquid-heights i j k data-id block-ref data-ref blocks
        (lambda (left-back <fl> left-front <fl> right-front <fl> right-back <fl>)
          (if (and (= left-back 7m)
                   (= left-front 7m)
                   (= right-front 7m)
                   (= right-back 7m))
              (let ((template (find-physical-template block-id data-id 0 generate-partial-water)))
                (add-liquid-cube i j k x y z template add-template))
            (let ((block (id/data-id->block block-id data-id)))
              (dynamic-physical-template block data-id i j k block-ref data-ref
                (lambda (poly)
                  (add-template x y z poly))))))))))


(define-block Water
  8
  category: decoration
  kind: liquid
  opaque?: #f
  opaque-cube?: #f
  liquid-cube?: #t
  cube?: #f
  rendering: water-rendering
  texture: "water"
  opacity: 3
  generate: (liquid-generator water? '(8 9))
  visual: (liquid-visual-adder '(8 9))
  physical: (liquid-physical-adder '(8 9)))


(define-block StationaryWater
  9
  category: waiting
  kind: liquid
  opaque?: #f
  opaque-cube?: #f
  liquid-cube?: #t
  cube?: #f
  rendering: water-rendering
  texture: "water"
  opacity: 3
  generate: (liquid-generator water? '(8 9))
  visual: (liquid-visual-adder '(8 9))
  physical: (liquid-physical-adder '(8 9)))


(define-block Lava
  10
  category: decoration
  kind: liquid
  opaque?: #f
  opaque-cube?: #f
  liquid-cube?: #t
  cube?: #f
  rendering: multitexture-rendering
  texture: "lava"
  generate: (liquid-generator lava? '(10 11))
  visual: (liquid-visual-adder '(10 11))
  physical: (liquid-physical-adder '(10 11)))


(define-block StationaryLava
  11
  category: waiting
  kind: liquid
  opaque?: #f
  opaque-cube?: #f
  liquid-cube?: #t
  cube?: #f
  rendering: multitexture-rendering
  texture: "lava"
  generate: (liquid-generator lava? '(10 11))
  visual: (liquid-visual-adder '(10 11))
  physical: (liquid-physical-adder '(10 11)))


(define-block SandBlock
  12
  category: building
  kind: cube
  generic?: #t)

(define-block Sand
  (12 0)
  texture: "sand")

(define-block RedSand
  (12 1)
  texture: "red_sand")

(define-block RedSand2
  (12 2)
  texture: "unknown")

(define-block RedSand3
  (12 3)
  texture: "unknown")

(define-block RedSand4
  (12 4)
  texture: "unknown")

(define-block RedSand5
  (12 5)
  texture: "unknown")

(define-block RedSand6
  (12 6)
  texture: "unknown")

(define-block RedSand7
  (12 7)
  texture: "unknown")

(define-block RedSand8
  (12 8)
  texture: "unknown")

(define-block RedSand9
  (12 9)
  texture: "unknown")

(define-block RedSand10
  (12 10)
  texture: "unknown")

(define-block RedSand11
  (12 11)
  texture: "unknown")

(define-block RedSand12
  (12 12)
  texture: "unknown")

(define-block RedSand13
  (12 13)
  texture: "unknown")

(define-block RedSand14
  (12 14)
  texture: "unknown")

(define-block RedSand15
  (12 15)
  texture: "unknown")


(define-block Gravel
  13
  category: building
  kind: cube
  texture: "gravel")


(define-block GoldOre
  14
  category: building
  kind: ore
  texture: "gold_ore")


(define-block IronOre
  15
  category: building
  kind: ore
  texture: "iron_ore")


(define-block CoalOre
  16
  category: building
  kind: ore
  texture: "coal_ore")


(define-block Wood
  17
  category: wood
  kind: bark
  generic?: #t
  variant-mask: #b11
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (let ((filename (string-append
                                (case (bitwise-and data-id #b11)
                                  ((0) "oak")
                                  ((1) "spruce")
                                  ((2) "birch")
                                  ((3) "jungle"))
                                "_log.json"))
                    (key (string-append
                           "axis="
                           (case (arithmetic-shift-right (bitwise-and data-id #b1100) 2)
                             ((0) "y")
                             ((1) "x")
                             ((2) "z")
                             ((3) "none")))))
                (with-block-state filename key
                  (lambda (model rotation-y rotation-x)
                    (add-json-model what model block-id variant-id data-id i j k x y z uv lighting rendering category add-face add-cube block-ref data-ref rotation-y rotation-x)))))
  visual: add-data-visual
  physical: add-data-physical)

(define-block OakWood
  (17 0)
  texture: "log_oak")

(define-block SpruceWood
  (17 1)
  texture: "log_spruce")

(define-block BirchWood
  (17 2)
  texture: "log_birch")

(define-block JungleWood
  (17 3)
  texture: "log_jungle")


(define-block Sponge
  19
  category: building
  kind: cube
  texture: "sponge")


(define-block Glass
  20
  category: decoration
  kind: glass
  texture: "glass"
  rendering: transparent-rendering
  opaque?: #f
  opaque-cube?: #f
  translucent-cube?: #t
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (add-cube-faces what i j k x y z uv lighting rendering category block-id variant-id add-face)))


(define-block LapisOre
  21
  category: building
  kind: ore
  texture: "lapis_ore")


(define-block LapisBlock
  22
  category: building
  kind: cube
  texture: "lapis_block")


(define-block Sandstone
  24
  category: building
  kind: cube
  texture: "sandstone_top"
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (let ((side (cache-coordinates "sandstone_normal"))
                    (top (cache-coordinates "sandstone_top"))
                    (bottom (cache-coordinates "sandstone_bottom")))
                (add-cube what i j k x y z side side bottom top side side lighting rendering category block-id variant-id add-face))))


(define-block Wool
  35
  category: wool
  kind: cube
  generic?: #t)

(define-block WhiteWool
  (35 0)
  texture: "wool_colored_white")

(define-block OrangeWool
  (35 1)
  texture: "wool_colored_orange")

(define-block MagentaWool
  (35 2)
  texture: "wool_colored_magenta")

(define-block LightBlueWool
  (35 3)
  texture: "wool_colored_light_blue")

(define-block YellowWool
  (35 4)
  texture: "wool_colored_yellow")

(define-block LimeWool
  (35 5)
  texture: "wool_colored_lime")

(define-block PinkWool
  (35 6)
  texture: "wool_colored_pink")

(define-block GrayWool
  (35 7)
  texture: "wool_colored_gray")

(define-block SilverWool
  (35 8)
  texture: "wool_colored_silver")

(define-block CyanWool
  (35 9)
  texture: "wool_colored_cyan")

(define-block PurpleWool
  (35 10)
  texture: "wool_colored_purple")

(define-block BlueWool
  (35 11)
  texture: "wool_colored_blue")

(define-block BrownWool
  (35 12)
  texture: "wool_colored_brown")

(define-block GreenWool
  (35 13)
  texture: "wool_colored_green")

(define-block RedWool
  (35 14)
  texture: "wool_colored_red")

(define-block BlackWool
  (35 15)
  texture: "wool_colored_black")


(define-block GoldBlock
  41
  category: building
  kind: cube
  texture: "gold_block")


(define-block IronBlock
  42
  category: building
  kind: cube
  texture: "iron_block")


(define-block DoubleStoneSlabs
  43
  category: building
  kind: slab
  generic?: #t
  variant-mask: #b111)

(define-block DoubleStoneSlab
  (43 0) ;; special generation
  texture: "stone_slab_side")

(define-block DoubleSandstoneSlab
  (43 1) ;; special
  texture: "sandstone_normal")

(define-block DoubleWoodenStoneSlab
  (43 2)
  category: invalid
  texture: "planks_oak")

(define-block DoubleCobblestoneSlab
  (43 3)
  texture: "cobblestone")

(define-block DoubleBrickSlab
  (43 4)
  texture: "brick")

(define-block DoubleStoneBrickSlab
  (43 5)
  texture: "stonebrick")

(define-block DoubleNetherBrickSlab
  (43 6)
  texture: "nether_brick")

(define-block DoubleQuartzSlab
  (43 7)
  texture: "quartz_block_side")


(define-block StoneSlabs
  44
  category: building
  kind: slab
  generic?: #t
  variant-mask: #b111
  opaque?: #t
  opaque-cube?: #f
  cube?: #f
  occlusion: .25
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (if (< data-id 8)
                  (add-slab what i j k x y z uv (uv-rect uv 0. .5 1. 1.) lighting rendering category block-id variant-id add-face)
                (add-slab what i j k x (+ y block-radius) z uv (uv-rect uv 0. 0. 1. .5) lighting rendering category block-id variant-id add-face))))

(define-block StoneSlab
  (44 0)
  texture: "stone_slab_side")

(define-block SandstoneSlab
  (44 1)
  texture: "sandstone_normal")

(define-block WoodenStoneSlab
  (44 2)
  category: invalid
  texture: "planks_oak")

(define-block CobblestoneSlab
  (44 3)
  texture: "cobblestone")

(define-block BrickSlab
  (44 4)
  texture: "brick")

(define-block StoneBrickSlab
  (44 5)
  texture: "stonebrick")

(define-block NetherBrickSlab
  (44 6)
  texture: "nether_brick")

(define-block QuartzSlab
  (44 7)
  texture: "quartz_block_side")


(define-block Brick
  45
  category: building
  kind: cube
  texture: "brick")


(define-block MossyCobblestone
  48
  category: building
  kind: cube
  texture: "cobblestone_mossy")


(define-block Obsidian
  49
  category: building
  kind: cube
  texture: "obsidian")


(define-block WoodenStairs
  53
  category: wood
  kind: stairs
  texture: "planks_oak"
  opaque?: #t
  opaque-cube?: #f
  cube?: #f
  configurations: 40
  present: '(rotate-y: 135. rotate-z: 30.)
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (choose-stairs-model what "oak_stairs.json" block-id variant-id data-id config-id i j k x y z uv lighting rendering category add-face add-cube block-ref data-ref))
  visual: (lambda (block-id <fx> data-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> rendering category add-template add-opaque-cube add-translucent-cube add-liquid-cube add-texture-element block-ref data-ref)
            (let ((config-id (stairs-configuration i j k block-ref data-ref data-id)))
              (add-visual-template block-id data-id config-id i j k x y z #f rendering category add-template block-ref data-ref)))
  physical: (lambda (block-id <fx> data-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> add-template add-liquid-cube block-ref data-ref)
              (let ((config-id (stairs-configuration i j k block-ref data-ref data-id)))
                (add-physical-template block-id data-id config-id i j k x y z add-template block-ref data-ref))))


(definition (stairs-configuration i j k block-ref data-ref data-id)
  (define (get-shape)
    (let ((data (bit-set data-id 2 #f)))
      (define (shape-front other-data)
        (if (/= (fxfloor/ data 2) (fxfloor/ other-data 2))
            (if ((if (= (fxfloor/ other-data 2) 0) = /=) (modulo data 2) (modulo other-data 2))
                3
              4)
          0))
      
      (define (shape-back other-data)
        (if (/= (fxfloor/ data 2) (fxfloor/ other-data 2))
            (if ((if (= (fxfloor/ other-data 2) 0) = /=) (modulo data 2) (modulo other-data 2))
                1
              2)
          0))
      
      (let ((a (if (= data 1) -1 (if (= data 0) 1 0)))
            (c (if (= data 3) -1 (if (= data 2) 1 0))))
        (if (id? (block-ref (+ i a) j (+ k c)) WoodenStairs CobblestoneStairs SandstoneStairs BrickStairs StoneBrickStairs NetherBrickStairs BirchWoodStairs SpruceWoodStairs JungleWoodStairs QuartzStairs)
            (shape-front (bit-set (data-ref (+ i a) j (+ k c)) 2 #f))
          (if (id? (block-ref (- i a) j (- k c)) WoodenStairs CobblestoneStairs SandstoneStairs BrickStairs StoneBrickStairs NetherBrickStairs BirchWoodStairs SpruceWoodStairs JungleWoodStairs QuartzStairs)
              (shape-back (bit-set (data-ref (- i a) j (- k c)) 2 #f))
            0)))))
  
  (bitwise-ior
    data-id
    (arithmetic-shift-left (get-shape) 3)))


(definition (choose-stairs-model what filename block-id variant-id data-id config-id i j k x y z uv lighting rendering category add-face add-cube block-ref data-ref)
  (let ((key (string-append
               "facing="
               (case (bitwise-and config-id #b11)
                 ((0) "east")
                 ((1) "west")
                 ((2) "south")
                 ((3) "north"))
               ",half="
               (if (bit-set? 2 config-id)
                   "top"
                 "bottom")
               ",shape="
               (case (arithmetic-shift-right (bitwise-and config-id #b111000) 3)
                 ((0) "straight")
                 ((1) "inner_left")
                 ((2) "inner_right")
                 ((3) "outer_left")
                 ((4) "outer_right")))))
    (with-block-state filename key
      (lambda (model rotation-y rotation-x)
        (add-json-model what model block-id variant-id data-id i j k x y z uv lighting rendering category add-face add-cube block-ref data-ref rotation-y rotation-x)))))


(define-block DiamondOre
  56
  category: building
  kind: ore
  texture: "diamond_ore")


(define-block DiamondBlock
  57
  category: building
  kind: cube
  texture: "diamond_block")


(define-block Soil
  60
  category: building
  kind: cube
  texture: "dirt"
  opaque?: #f
  opaque-cube?: #f
  cube?: #f
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (add-cube what i j k x y z uv uv uv (cache-coordinates "farmland_dry") uv uv lighting rendering category block-id variant-id add-face)))


(class Sign-Element extends Element
  
  
  (property quad <Quad> initialize #f accessors generate)
  (property data        initialize #f accessors generate)
  
  
  (slot quad-texture <Quad-Texture+> initialize #f)
  
  
  (method override (destroy self)
    (nextmethod self)
    (when quad-texture
      (close quad-texture)))
  
  
  (method override (element-radiuses self)
    (vertex 1. 1. 1.))
  
  
  (method override (lens-center self)
    (matrix-transform matrix (quad-center (get-v1 quad)
                                          (get-v2 quad)
                                          (get-v3 quad)
                                          (get-v4 quad))))
  
  
  (method (sign-quad-texture self)
    (let ((quad-texture <Quad-Texture> (make-quad-texture 100 50 (get-v1 quad) (get-v2 quad) (get-v3 quad) (get-v4 quad))))
      (let ((texture (get-texture quad-texture)))
        (let ((surface (get-surface texture))
              (font {Font font-name: tahoma point-size: 11 antialias: none})
              (color {Color Black})
              (width (get-width texture)))
          (define (draw-line v text)
            (let ((text (effective-sign-text text)))
              (let ((w (get-text-width surface text)))
                (let ((h (fxceiling (/ (cast <fl> (- width w)) 2.))))
                  (draw-text surface h v text color)))))
          
          (clear surface)
          (set-font surface font)
          (draw-line 0 (tag-assoc "Text1" data))
          (draw-line 12 (tag-assoc "Text2" data))
          (draw-line 24 (tag-assoc "Text3" data))
          (draw-line 36 (tag-assoc "Text4" data))
          (flush surface)
          (map-texture texture)))
      quad-texture))
  
  
  (method override (render self)
    (when (not quad-texture)
      (set! quad-texture (sign-quad-texture self)))
    (allege quad-texture
      (draw-texture quad-texture))))


(definition (contains-text? data)
  (and data
       (or (not (equal? (tag-assoc "Text1" data) ""))
           (not (equal? (tag-assoc "Text2" data) ""))
           (not (equal? (tag-assoc "Text3" data) ""))
           (not (equal? (tag-assoc "Text4" data) "")))))


(definition (make-sign-element position v1 v2 v3 v4 matrix data)
  (let ((quad (make-quad #f v1 v2 v3 v4)))
    (let ((elem (new Sign-Element position: position quad: quad data: data))
          (matrix (matrix-multiply& (make-translation-matrix& position) matrix)))
      (set-matrix elem matrix)
      elem)))


;; hacks for minecraft 1.8 format
(definition public (effective-sign-text text)
  (cond ((equal? text "null")
         "")
        ((starts-with? text "\"")
         (substring text 1 (- (string-length text) 1)))
        (else
         text)))


(definition public (find-sign text)
  (let ((context (->search-context text)))
    (continuation-capture
      (lambda (return)
        (iterate-signs
          (lambda (sign)
            (let ((data (get-data sign)))
              (when (or (search (tag-assoc "Text1" data) context)
                        (search (tag-assoc "Text2" data) context)
                        (search (tag-assoc "Text3" data) context)
                        (search (tag-assoc "Text4" data) context))
                (continuation-return return sign)))))
        #f))))

(definition public (iterate-signs proc)
  (let ((zone (current-zone)))
    (iterate-sectors zone
      (lambda (sector)
        (for-each (lambda (element)
                    (when (is? element Sign-Element)
                      (proc element)))
                  (get-texture-elements sector))))))

(definition (section-position& section)
  (let ((section-y (get-y section))
        (chunk (get-chunk section)))
    (let ((region (get-region chunk)))
      (let ((region-x (get-x region))
            (region-z (get-z region))
            (chunk-x (get-x chunk))
            (chunk-z (get-z chunk)))
        (let ((position-x (cast <fl> (+ (* region-x 32 16) (* chunk-x 16))))
              (position-y (cast <fl> (+ (* section-y 16))))
              (position-z (cast <fl> (+ (* region-z 32 16) (* chunk-z 16)))))
          (vertex& position-x position-y position-z))))))


(define-block SignPost
  63
  category: decoration
  kind: signs
  texture: "planks_birch"
  rendering: transparent-rendering
  opaque?: #f
  opaque-cube?: #f
  cube?: #f
  physical?: #f
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (let ((matrix (make-lookat-matrix& (horizon-lookat&^ (rotate-vertex-upon& (- (* (cast <fl> data-id) PI/8)) (vertex& 0. 1. 0.) (vertex& 0. 0. 1.))))))
                ;; sign
                (let ((left (- block-radius))
                      (right (+ block-radius))
                      (bottom 0.)
                      (top (+ block-radius))
                      (back (- .05))
                      (front (+ .05)))
                  (add-cuboid-generic what i j k x y z left right bottom top back front uv lighting rendering category block-id variant-id matrix add-face)
                  ;; post
                  (let ((left (- .05))
                        (right (+ .05))
                        (bottom (- block-radius))
                        (top 0.)
                        (back (- .05))
                        (front (+ .05)))
                    (add-cuboid-generic what i j k x y z left right bottom top back front uv lighting rendering category block-id variant-id matrix add-face)))))
  visual: (lambda (block-id <fx> data-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> rendering category add-template add-opaque-cube add-translucent-cube add-liquid-cube add-texture-element block-ref data-ref)
            (add-visual-template block-id data-id data-id i j k x y z #f rendering category add-template block-ref data-ref)
            ;; text
            (add-texture-element
              (lambda (section adder)
                (let ((data (block-entity-data section (indexed i j k))))
                  (when (contains-text? data)
                    (let ((matrix (make-lookat-matrix& (horizon-lookat&^ (rotate-vertex-upon& (- (* (cast <fl> data-id) PI/8)) (vertex& 0. 1. 0.) (vertex& 0. 0. 1.))))))
                      (let ((left (- block-radius))
                            (right (+ block-radius))
                            (bottom 0.)
                            (top (+ block-radius))
                            (back (- .05))
                            (front (+ .05)))
                        (let ((front (+ front add-epsilon)))
                          (let ((v1 (vertex left top front))
                                (v2 (vertex left bottom front))
                                (v3 (vertex right bottom front))
                                (v4 (vertex right top front)))
                            (adder
                              (make-sign-element (vertex+& (section-position& section) (vertex& x y z)) v1 v2 v3 v4 matrix data)))))))))))
  physical: add-data-physical
  right-mouse: (lambda (section block-id data-id i j k x y z with-field block-ref block-set! data-ref data-set! blocklight-ref blocklight-set! skylight-ref skylight-set!)
                 (when (window?)
                   (invoke-block-hook (vertex x y z))))
  double-click: (lambda (section block-id data-id i j k x y z with-field block-ref block-set! data-ref data-set! blocklight-ref blocklight-set! skylight-ref skylight-set!)
                  (when (window?)
                    (edit-sign section (indexed i j k)))))


(define-block CobblestoneStairs
  67
  category: building
  kind: stairs
  texture: "cobblestone"
  opaque?: #t
  opaque-cube?: #f
  cube?: #f
  configurations: 40
  present: '(rotate-y: 135. rotate-z: 30.)
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (choose-stairs-model what "stone_stairs.json" block-id variant-id data-id config-id i j k x y z uv lighting rendering category add-face add-cube block-ref data-ref))
  visual: (lambda (block-id <fx> data-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> rendering category add-template add-opaque-cube add-translucent-cube add-liquid-cube add-texture-element block-ref data-ref)
            (let ((config-id (stairs-configuration i j k block-ref data-ref data-id)))
              (add-visual-template block-id data-id config-id i j k x y z #f rendering category add-template block-ref data-ref)))
  physical: (lambda (block-id <fx> data-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> add-template add-liquid-cube block-ref data-ref)
              (let ((config-id (stairs-configuration i j k block-ref data-ref data-id)))
                (add-physical-template block-id data-id config-id i j k x y z add-template block-ref data-ref))))


(define-block WallSign
  68
  category: decoration
  kind: signs
  texture: "planks_birch"
  rendering: transparent-rendering
  opaque?: #f
  opaque-cube?: #f
  cube?: #f
  physical?: #f
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (let ((left (- block-radius))
                    (right (+ block-radius))
                    (bottom (- (/ block-radius 2.)))
                    (top (+ (/ block-radius 2.)))
                    (back (+ (- block-radius) .025))
                    (front (+ (- block-radius) .125)))
                (let ((matrix (make-lookat-matrix& (horizon-lookat&^ (case data-id
                                                                       ((2) (vertex&  0. 0. -1.))
                                                                       ((3) (vertex&  0. 0.  1.))
                                                                       ((4) (vertex& -1. 0.  0.))
                                                                       ((5) (vertex&  1. 0.  0.)))))))
                  ;; sign
                  (add-cuboid-generic what i j k x y z left right bottom top back front uv lighting rendering category block-id variant-id matrix add-face))))
  visual: (lambda (block-id <fx> data-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> rendering category add-template add-opaque-cube add-translucent-cube add-liquid-cube add-texture-element block-ref data-ref)
            (add-visual-template block-id data-id data-id i j k x y z #f rendering category add-template block-ref data-ref)
            ;; text
            (add-texture-element
              (lambda (section adder)
                (let ((data (block-entity-data section (indexed i j k))))
                  (when (contains-text? data)
                    (let ((matrix (make-lookat-matrix& (horizon-lookat&^ (case data-id
                                                                           ((2) (vertex&  0. 0. -1.))
                                                                           ((3) (vertex&  0. 0.  1.))
                                                                           ((4) (vertex& -1. 0.  0.))
                                                                           ((5) (vertex&  1. 0.  0.)))))))
                      (let ((left (- block-radius))
                            (right (+ block-radius))
                            (bottom (- (/ block-radius 2.)))
                            (top (+ (/ block-radius 2.)))
                            (back (+ (- block-radius) .025))
                            (front (+ (- block-radius) .125)))
                        (let ((front (+ front add-epsilon)))
                          (let ((v1 (vertex left top front))
                                (v2 (vertex left bottom front))
                                (v3 (vertex right bottom front))
                                (v4 (vertex right top front)))
                            (adder
                              (make-sign-element (vertex+& (section-position& section) (vertex& x y z)) v1 v2 v3 v4 matrix data)))))))))))
  physical: add-data-physical
  right-mouse: (lambda (section block-id data-id i j k x y z with-field block-ref block-set! data-ref data-set! blocklight-ref blocklight-set! skylight-ref skylight-set!)
                 (when (window?)
                   (invoke-block-hook (vertex x y z))))
  double-click: (lambda (section block-id data-id i j k x y z with-field block-ref block-set! data-ref data-set! blocklight-ref blocklight-set! skylight-ref skylight-set!)
                  (when (window?)
                    (edit-sign section (indexed i j k)))))


(definition (edit-sign section coordinates)
  (let ((data (block-entity-data section coordinates)))
    (let ((texts (if (contains-text? data)
                     (list (effective-sign-text (tag-assoc "Text1" data))
                           (effective-sign-text (tag-assoc "Text2" data))
                           (effective-sign-text (tag-assoc "Text3" data))
                           (effective-sign-text (tag-assoc "Text4" data)))
                   #f)))
      (open-sign
        initial-value: texts
        action: (lambda (texts)
                  (updating-sections (current-zone)
                    (lambda (add-section)
                      (add-section section)
                      (add-sign (get-chunk section) (section/coordinates->location section coordinates) texts))))))))


(define-block RedstoneOre
  73
  category: building
  kind: ore
  texture: "redstone_ore")


(define-block GlowingRedstoneOre
  74
  category: building
  kind: ore
  texture: "repeater_on"
  brightness: 9)


(define-block Snow
  78
  category: building
  kind: snow
  texture: "snow"
  rendering: transparent-rendering
  opaque?: #f
  opaque-cube?: #f
  cube?: #f
  opacity: 0
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (let ((left (- x block-radius))
                    (right (+ x block-radius))
                    (bottom (- y block-radius))
                    (top (+ (- y block-radius) (* (+ data-id 1) (/ 1. 8.))))
                    (back (- z block-radius))
                    (front (+ z block-radius)))
                (add-face (left-face   what i j k x y z left right bottom top back front uv generic-coordinates lighting rendering block-id variant-id) rendering category)
                (add-face (right-face  what i j k x y z left right bottom top back front uv generic-coordinates lighting rendering block-id variant-id) rendering category)
                (add-face (bottom-face what i j k x y z left right bottom top back front uv generic-coordinates lighting rendering block-id variant-id) rendering category)
                (add-face (top-face    what i j k x y z left right bottom top back front uv generic-coordinates lighting rendering block-id variant-id) rendering category)
                (add-face (back-face   what i j k x y z left right bottom top back front uv generic-coordinates lighting rendering block-id variant-id) rendering category)
                (add-face (front-face  what i j k x y z left right bottom top back front uv generic-coordinates lighting rendering block-id variant-id) rendering category)))
  visual: add-data-visual
  physical: add-data-physical)


(define-block Ice
  79
  category: building
  kind: ice
  texture: "ice"
  opaque?: #f
  opacity: 3)


(define-block SnowBlock
  80
  category: building
  kind: snow
  texture: "snow")


(define-block Clay
  82
  category: building
  kind: cube
  texture: "clay")


(define-block Netherrack
  87
  category: building
  kind: cube
  ;rendering: water-rendering
  texture: "netherrack")


(define-block SoulSand
  88
  category: building
  kind: cube
  ;rendering: water-rendering
  texture: "soul_sand")


(define-block Glowstone
  89
  category: building
  kind: cube
  ;rendering: multitexture-rendering
  texture: "glowstone"
  opaque?: #f
  brightness: 15)


;; improve with data
(define-block MonsterEgg
  97
  category: waiting
  kind: cube
  generic?: #t)

(define-block StoneSilverfish
  (97 0)
  texture: "stone")

(define-block CobblestoneSilverfish
  (97 1)
  texture: "cobblestone")

(define-block StoneBrickSilverfish
  (97 2)
  texture: "stonebrick")

(define-block MossyStoneBrickSilverfish
  (97 3)
  texture: "stonebrick_mossy")

(define-block CrackedStoneBrickSilverfish
  (97 4)
  texture: "stonebrick_cracked")

(define-block CarvedStoneBrickSilverfish
  (97 5)
  texture: "stonebrick_carved")


(define-block StoneBricks
  98
  category: building
  kind: cube
  generic?: #t
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (add-cube what i j k x y z uv uv uv uv uv uv lighting rendering category block-id variant-id add-face)))

(define-block StoneBrick
  (98 0)
  texture: "stonebrick")

(define-block MossyStoneBrick
  (98 1)
  texture: "stonebrick_mossy")

(define-block CrackedStoneBrick
  (98 2)
  texture: "stonebrick_cracked")

(define-block CarvedStoneBrick
  (98 3)
  texture: "stonebrick_carved")


(define-block IronBars
  101
  category: decoration
  kind: bars
  texture: "iron_bars"
  rendering: transparent-rendering
  opaque?: #f
  opaque-cube?: #f
  cube?: #f
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (choose-fence-model what (if (eq? what 'physical) "iron_bars_p.json" "iron_bars.json") block-id variant-id data-id config-id i j k x y z uv lighting rendering category add-face add-cube block-ref data-ref))
  visual: (lambda (block-id <fx> data-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> rendering category add-template add-opaque-cube add-translucent-cube add-liquid-cube add-texture-element block-ref data-ref)
            (let ((config-id (fence-configuration i j k block-ref '(101))))
              (add-visual-template block-id data-id config-id i j k x y z #f rendering category add-template block-ref data-ref)))
  physical: (lambda (block-id <fx> data-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> add-template add-liquid-cube block-ref data-ref)
              (let ((config-id (fence-configuration i j k block-ref '(101))))
                (add-physical-template block-id data-id config-id i j k x y z add-template block-ref data-ref))))


(definition (choose-fence-model what filename block-id variant-id data-id config-id i j k x y z uv lighting rendering category add-face add-cube block-ref data-ref)  
  (let ((key (string-append
               "east="
               (if (bit-set? 0 config-id)
                   "true"
                 "false")
               ",north="
               (if (bit-set? 3 config-id)
                   "true"
                 "false")
               ",south="
               (if (bit-set? 2 config-id)
                   "true"
                 "false")
               ",west="
               (if (bit-set? 1 config-id)
                   "true"
                 "false"))))
    (with-block-state filename key
      (lambda (model rotation-y rotation-x)
        (add-json-model what model block-id variant-id data-id i j k x y z uv lighting rendering category add-face add-cube block-ref data-ref rotation-y rotation-x)))))


(define-block GlassPane
  102
  category: decoration
  kind: glass
  texture: "glass"
  rendering: transparent-rendering
  opaque?: #f
  opaque-cube?: #f
  translucent-cube?: #t
  cube?: #f
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (add-cube-faces what i j k x y z uv lighting rendering category block-id variant-id add-face)))


(define-block BrickStairs
  108
  category: building
  kind: stairs
  texture: "brick"
  opaque?: #t
  opaque-cube?: #f
  cube?: #f
  configurations: 40
  present: '(rotate-y: 135. rotate-z: 30.)
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (choose-stairs-model what "brick_stairs.json" block-id variant-id data-id config-id i j k x y z uv lighting rendering category add-face add-cube block-ref data-ref))
  visual: (lambda (block-id <fx> data-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> rendering category add-template add-opaque-cube add-translucent-cube add-liquid-cube add-texture-element block-ref data-ref)
            (let ((config-id (stairs-configuration i j k block-ref data-ref data-id)))
              (add-visual-template block-id data-id config-id i j k x y z #f rendering category add-template block-ref data-ref)))
  physical: (lambda (block-id <fx> data-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> add-template add-liquid-cube block-ref data-ref)
              (let ((config-id (stairs-configuration i j k block-ref data-ref data-id)))
                (add-physical-template block-id data-id config-id i j k x y z add-template block-ref data-ref))))


(define-block StoneBrickStairs
  109
  category: building
  kind: stairs
  texture: "stonebrick"
  opaque?: #t
  opaque-cube?: #f
  cube?: #f
  configurations: 40
  present: '(rotate-y: 135. rotate-z: 30.)
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (choose-stairs-model what "stone_brick_stairs.json" block-id variant-id data-id config-id i j k x y z uv lighting rendering category add-face add-cube block-ref data-ref))
  visual: (lambda (block-id <fx> data-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> rendering category add-template add-opaque-cube add-translucent-cube add-liquid-cube add-texture-element block-ref data-ref)
            (let ((config-id (stairs-configuration i j k block-ref data-ref data-id)))
              (add-visual-template block-id data-id config-id i j k x y z #f rendering category add-template block-ref data-ref)))
  physical: (lambda (block-id <fx> data-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> add-template add-liquid-cube block-ref data-ref)
              (let ((config-id (stairs-configuration i j k block-ref data-ref data-id)))
                (add-physical-template block-id data-id config-id i j k x y z add-template block-ref data-ref))))


(define-block Mycelium
  110
  category: building
  kind: cube
  texture: "mycelium_side"
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (let ((top (cache-coordinates "mycelium_top")))
                (add-cube what i j k x y z uv uv uv top uv uv lighting rendering category block-id variant-id add-face))))


(define-block NetherBrick
  112
  category: building
  kind: cube
  texture: "nether_brick")


(define-block NetherBrickFence
  113
  category: decoration
  kind: fence
  texture: "bdc_fence_nether_side"
  rendering: transparent-rendering
  opaque?: #f
  opaque-cube?: #f
  cube?: #f
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (add-fence what block-id variant-id config-id i j k x y z (cache-coordinates "nether_brick") lighting rendering category add-face block-ref))
  visual: (lambda (block-id <fx> data-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> rendering category add-template add-opaque-cube add-translucent-cube add-liquid-cube add-texture-element block-ref data-ref)
            (let ((config-id (fence-configuration i j k block-ref '(107 113))))
              (add-visual-template block-id data-id config-id i j k x y z #f rendering category add-template block-ref data-ref)))
  physical: (lambda (block-id <fx> data-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> add-template add-liquid-cube block-ref data-ref)
              (let ((config-id (fence-configuration i j k block-ref '(107 113))))
                (add-physical-template block-id data-id config-id i j k x y z add-template block-ref data-ref))))


(define-block NetherBrickStairs
  114
  category: building
  kind: stairs
  texture: "nether_brick"
  opaque?: #t
  opaque-cube?: #f
  cube?: #f
  configurations: 40
  present: '(rotate-y: 135. rotate-z: 30.)
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (choose-stairs-model what "nether_brick_stairs.json" block-id variant-id data-id config-id i j k x y z uv lighting rendering category add-face add-cube block-ref data-ref))
  visual: (lambda (block-id <fx> data-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> rendering category add-template add-opaque-cube add-translucent-cube add-liquid-cube add-texture-element block-ref data-ref)
            (let ((config-id (stairs-configuration i j k block-ref data-ref data-id)))
              (add-visual-template block-id data-id config-id i j k x y z #f rendering category add-template block-ref data-ref)))
  physical: (lambda (block-id <fx> data-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> add-template add-liquid-cube block-ref data-ref)
              (let ((config-id (stairs-configuration i j k block-ref data-ref data-id)))
                (add-physical-template block-id data-id config-id i j k x y z add-template block-ref data-ref))))


(define-block EndStone
  121
  category: building
  kind: cube
  texture: "end_stone")


;; improve
(define-block DragonEgg
  122
  category: waiting
  texture: "dragon_egg"
  opaque?: #f
  opaque-cube?: #f
  cube?: #f)


;; improve
(define-block DoubleWoodenSlab
  125
  category: waiting
  kind: slab
  generic?: #t
  opaque?: #t
  opaque-cube?: #f
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (add-slab what i j k x y z uv (uv-rect uv 0. .5 1. 1.) lighting rendering category block-id variant-id add-face)
              (add-slab what i j k x (+ y block-radius) z uv (uv-rect uv 0. 0. 1. .5) lighting rendering category block-id variant-id add-face)))

(define-block DoubleOakSlab
  (125 0)
  texture: "planks_oak")

(define-block DoubleSpruceSlab
  (125 1)
  texture: "planks_spruce")

(define-block DoubleBirchSlab
  (125 2)
  texture: "planks_birch")

(define-block DoubleJungleSlab
  (125 3)
  texture: "planks_jungle")

(define-block DoubleAcaciaSlab
  (125 4)
  texture: "planks_acacia")

(define-block DoubleDarkOakSlab
  (125 5)
  texture: "planks_big_oak")


(define-block WoodenSlab
  126
  category: wood
  kind: slab
  generic?: #t
  variant-mask: #b111
  opaque?: #t
  opaque-cube?: #f
  cube?: #f
  occlusion: .25
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (if (< data-id 6)
                  (add-slab what i j k x y z uv (uv-rect uv 0. .5 1. 1.) lighting rendering category block-id variant-id add-face)
                (add-slab what i j k x (+ y block-radius) z uv (uv-rect uv 0. 0. 1. .5) lighting rendering category block-id variant-id add-face))))

(define-block OakSlab
  (126 0)
  texture: "planks_oak")

(define-block SpruceSlab
  (126 1)
  texture: "planks_spruce")

(define-block BirchSlab
  (126 2)
  texture: "planks_birch")

(define-block JungleSlab
  (126 3)
  texture: "planks_jungle")

(define-block AcaciaSlab
  (126 4)
  texture: "planks_acacia")

(define-block DarkOakSlab
  (126 5)
  texture: "planks_big_oak")


(define-block CocoaPlant
  127
  category: waiting ;; decoration
  texture: "cocoa_stage_2"
  opaque?: #f
  opaque-cube?: #f
  cube?: #f)


(define-block SandstoneStairs
  128
  category: building
  kind: stairs
  texture: "sandstone_normal"
  opaque?: #t
  opaque-cube?: #f
  cube?: #f
  occlusion: .5
  configurations: 40
  present: '(rotate-y: 135. rotate-z: 30.)
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (choose-stairs-model what "sandstone_stairs.json" block-id variant-id data-id config-id i j k x y z uv lighting rendering category add-face add-cube block-ref data-ref))
  visual: (lambda (block-id <fx> data-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> rendering category add-template add-opaque-cube add-translucent-cube add-liquid-cube add-texture-element block-ref data-ref)
            (let ((config-id (stairs-configuration i j k block-ref data-ref data-id)))
              (add-visual-template block-id data-id config-id i j k x y z #f rendering category add-template block-ref data-ref)))
  physical: (lambda (block-id <fx> data-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> add-template add-liquid-cube block-ref data-ref)
              (let ((config-id (stairs-configuration i j k block-ref data-ref data-id)))
                (add-physical-template block-id data-id config-id i j k x y z add-template block-ref data-ref))))


(define-block EmeraldOre
  129
  category: building
  kind: ore
  texture: "emerald_ore")


(define-block EmeraldBlock
  133
  category: building
  kind: cube
  texture: "emerald_block")


(define-block SpruceWoodStairs
  134
  category: wood
  kind: stairs
  texture: "planks_spruce"
  opaque?: #t
  opaque-cube?: #f
  cube?: #f
  configurations: 40
  present: '(rotate-y: 135. rotate-z: 30.)
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (choose-stairs-model what "spruce_stairs.json" block-id variant-id data-id config-id i j k x y z uv lighting rendering category add-face add-cube block-ref data-ref))
  visual: (lambda (block-id <fx> data-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> rendering category add-template add-opaque-cube add-translucent-cube add-liquid-cube add-texture-element block-ref data-ref)
            (let ((config-id (stairs-configuration i j k block-ref data-ref data-id)))
              (add-visual-template block-id data-id config-id i j k x y z #f rendering category add-template block-ref data-ref)))
  physical: (lambda (block-id <fx> data-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> add-template add-liquid-cube block-ref data-ref)
              (let ((config-id (stairs-configuration i j k block-ref data-ref data-id)))
                (add-physical-template block-id data-id config-id i j k x y z add-template block-ref data-ref))))


(define-block BirchWoodStairs
  135
  category: wood
  kind: stairs
  texture: "planks_birch"
  opaque?: #t
  opaque-cube?: #f
  cube?: #f
  configurations: 40
  present: '(rotate-y: 135. rotate-z: 30.)
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (choose-stairs-model what "birch_stairs.json" block-id variant-id data-id config-id i j k x y z uv lighting rendering category add-face add-cube block-ref data-ref))
  visual: (lambda (block-id <fx> data-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> rendering category add-template add-opaque-cube add-translucent-cube add-liquid-cube add-texture-element block-ref data-ref)
            (let ((config-id (stairs-configuration i j k block-ref data-ref data-id)))
              (add-visual-template block-id data-id config-id i j k x y z #f rendering category add-template block-ref data-ref)))
  physical: (lambda (block-id <fx> data-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> add-template add-liquid-cube block-ref data-ref)
              (let ((config-id (stairs-configuration i j k block-ref data-ref data-id)))
                (add-physical-template block-id data-id config-id i j k x y z add-template block-ref data-ref))))


(define-block JungleWoodStairs
  136
  category: wood
  kind: stairs
  texture: "planks_jungle"
  opaque?: #t
  opaque-cube?: #f
  cube?: #f
  configurations: 40
  present: '(rotate-y: 135. rotate-z: 30.)
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (choose-stairs-model what "jungle_stairs.json" block-id variant-id data-id config-id i j k x y z uv lighting rendering category add-face add-cube block-ref data-ref))
  visual: (lambda (block-id <fx> data-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> rendering category add-template add-opaque-cube add-translucent-cube add-liquid-cube add-texture-element block-ref data-ref)
            (let ((config-id (stairs-configuration i j k block-ref data-ref data-id)))
              (add-visual-template block-id data-id config-id i j k x y z #f rendering category add-template block-ref data-ref)))
  physical: (lambda (block-id <fx> data-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> add-template add-liquid-cube block-ref data-ref)
              (let ((config-id (stairs-configuration i j k block-ref data-ref data-id)))
                (add-physical-template block-id data-id config-id i j k x y z add-template block-ref data-ref))))


;; improve
@wait
(define-block CobblestoneWall
  139
  category: waiting
  kind: cube
  texture: "cobblestone"
  opaque?: #f)

;; quick hack for la momie
(define-block CobblestoneWall
  139
  category: building
  kind: cube
  texture: "sandstone_top"
  opaque?: #f
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (let ((side (cache-coordinates "sandstone_normal"))
                    (top (cache-coordinates "sandstone_top"))
                    (bottom (cache-coordinates "sandstone_bottom")))
                (add-cube what i j k x y z side side bottom top side side lighting rendering category block-id variant-id add-face))))


(define-block RedstoneBlock
  152
  category: building
  kind: ore
  texture: "redstone_block")


(define-block QuartzOre
  153
  category: building
  kind: ore
  texture: "quartz_ore")


(define-block QuartzBlock
  155
  category: building
  kind: cube
  generic?: #t
  variant-mask: (lambda (n) (min n 2))
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (let ((key (string-append
                           "type="
                           (case data-id
                             ((0) "normal")
                             ((1) "chiseled")
                             ((2) "pillar_y")
                             ((3) "pillar_z")
                             ((4) "pillar_x")))))
                (with-block-state "quartz_block.json" key
                  (lambda (model rotation-y rotation-x)
                    (add-json-model what model block-id variant-id data-id i j k x y z uv lighting rendering category add-face add-cube block-ref data-ref rotation-y rotation-x)))))
  visual: add-data-visual
  physical: add-data-physical)


(define-block BlockOfQuartz
  (155 0))


(define-block ChiseledQuartzBlock
  (155 1))


(define-block PillarQuartzBlock
  (155 2))


(define-block QuartzStairs
  156
  category: building
  kind: stairs
  texture: "quartz_block_side"
  opaque?: #t
  opaque-cube?: #f
  cube?: #f
  configurations: 40
  present: '(rotate-y: 135. rotate-z: 30.)
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (choose-stairs-model what "quartz_stairs.json" block-id variant-id data-id config-id i j k x y z uv lighting rendering category add-face add-cube block-ref data-ref))
  visual: (lambda (block-id <fx> data-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> rendering category add-template add-opaque-cube add-translucent-cube add-liquid-cube add-texture-element block-ref data-ref)
            (let ((config-id (stairs-configuration i j k block-ref data-ref data-id)))
              (add-visual-template block-id data-id config-id i j k x y z #f rendering category add-template block-ref data-ref)))
  physical: (lambda (block-id <fx> data-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> add-template add-liquid-cube block-ref data-ref)
              (let ((config-id (stairs-configuration i j k block-ref data-ref data-id)))
                (add-physical-template block-id data-id config-id i j k x y z add-template block-ref data-ref))))


(define-block StainedClay
  159
  category: wool
  kind: cube
  generic?: #t)


(define-block WhiteStainedClay
  (159 0)
  texture: "hardened_clay_stained_white")


(define-block OrangeStainedClay
  (159 1)
  texture: "hardened_clay_stained_orange")


(define-block MagentaStainedClay
  (159 2)
  texture: "hardened_clay_stained_magenta")


(define-block LightBlueStainedClay
  (159 3)
  texture: "hardened_clay_stained_light_blue")


(define-block YellowStainedClay
  (159 4)
  texture: "hardened_clay_stained_yellow")


(define-block LimeStainedClay
  (159 5)
  texture: "hardened_clay_stained_lime")


(define-block PinkStainedClay
  (159 6)
  texture: "hardened_clay_stained_pink")


(define-block GrayStainedClay
  (159 7)
  texture: "hardened_clay_stained_gray")


(define-block LightGrayStainedClay
  (159 8)
  texture: "hardened_clay_stained_silver")


(define-block CyanStainedClay
  (159 9)
  texture: "hardened_clay_stained_cyan")


(define-block PurpleStainedClay
  (159 10)
  texture: "hardened_clay_stained_purple")


(define-block BlueStainedClay
  (159 11)
  texture: "hardened_clay_stained_blue")


(define-block BrownStainedClay
  (159 12)
  texture: "hardened_clay_stained_brown")


(define-block GreenStainedClay
  (159 13)
  texture: "hardened_clay_stained_green")


(define-block RedStainedClay
  (159 14)
  texture: "hardened_clay_stained_red")


(define-block BlackStainedClay
  (159 15)
  texture: "hardened_clay_stained_black")


(define-block Wood2
  162
  category: wood
  kind: bark
  generic?: #t
  variant-mask: #b11
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (add-cube what i j k x y z uv uv uv uv uv uv lighting rendering category block-id variant-id add-face)))

(define-block AcaciaWood
  (162 0)
  texture: "log_acacia")

(define-block DarkOakWood
  (162 1)
  texture: "log_big_oak")


(define-block Carpet
  171
  category: wool
  @kind: carpet
  opaque?: #f
  opaque-cube?: #f
  cube?: #f
  physical?: #t
  generic?: #t
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (let ((left (- x block-radius))
                    (right (+ x block-radius))
                    (bottom (- y block-radius))
                    (top (+ (- y block-radius) (/ 1m (if (bit-set? 0 data-id) 2 1))))
                    (back (- z block-radius))
                    (front (+ z block-radius)))
                (add-face (left-face   what i j k x y z left right bottom top back front uv generic-coordinates lighting rendering block-id variant-id) rendering category)
                (add-face (right-face  what i j k x y z left right bottom top back front uv generic-coordinates lighting rendering block-id variant-id) rendering category)
                (add-face (bottom-face what i j k x y z left right bottom top back front uv generic-coordinates lighting rendering block-id variant-id) rendering category)
                (add-face (top-face    what i j k x y z left right bottom top back front uv generic-coordinates lighting rendering block-id variant-id) rendering category)
                (add-face (back-face   what i j k x y z left right bottom top back front uv generic-coordinates lighting rendering block-id variant-id) rendering category)
                (add-face (front-face  what i j k x y z left right bottom top back front uv generic-coordinates lighting rendering block-id variant-id) rendering category))))

(define-block WhiteCarpet
  (171 0)
  texture: "wool_colored_white")

(define-block OrangeCarpet
  (171 1)
  texture: "wool_colored_orange")

(define-block MagentaCarpet
  (171 2)
  texture: "wool_colored_magenta")

(define-block LightBlueCarpet
  (171 3)
  texture: "wool_colored_light_blue")

(define-block YellowCarpet
  (171 4)
  texture: "wool_colored_yellow")

(define-block LimeCarpet
  (171 5)
  texture: "wool_colored_lime")

(define-block PinkCarpet
  (171 6)
  texture: "wool_colored_pink")

(define-block GrayCarpet
  (171 7)
  texture: "wool_colored_gray")

(define-block SilverCarpet
  (171 8)
  texture: "wool_colored_silver")

(define-block CyanCarpet
  (171 9)
  texture: "wool_colored_cyan")

(define-block PurpleCarpet
  (171 10)
  texture: "wool_colored_purple")

(define-block BlueCarpet
  (171 11)
  texture: "wool_colored_blue")

(define-block BrownCarpet
  (171 12)
  texture: "wool_colored_brown")

(define-block GreenCarpet
  (171 13)
  texture: "wool_colored_green")

(define-block RedCarpet
  (171 14)
  texture: "wool_colored_red")

(define-block BlackCarpet
  (171 15)
  texture: "wool_colored_black")


(define-block HardenedClay
  172
  category: building
  kind: cube
  texture: "hardened_clay")


;; not showing in minecraft 1.12
(define-block CyanShulkerBox
  228
  category: wood
  kind: bark
  opaque?: #f
  opaque-cube?: #f
  cube?: #f
  physical?: #f
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              )
  visual: add-data-visual
  physical: add-data-physical)


;; not showing in minecraft 1.12
(define-block BrownGlazedTerracotta
  247
  category: building
  kind: cube
  opaque-cube?: #f
  cube?: #f
  physical?: #f
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              )
  visual: add-data-visual
  physical: add-data-physical))
