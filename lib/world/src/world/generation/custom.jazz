;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Generation Custom
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;    Edouard Hebert


(module world.generation.custom jazz


(import (jazz.audio)
        (jazz.geometry)
        (jazz.graphic)
        (jazz.io)
        (jazz.json)
        (world)
        (world.autoload)
        (world.biome)
        (world.context)
        (world.generation)
        (world.generation.base)
        (world.generation.block)
        (world.generation.categories)
        (world.generation.model)
        (world.generation.rendering)
        (world.geometry)
        (world.index)
        (world.interface.inventory)
        (world.interface.sign)
        (world.quad)
        (world.quad-texture)
        (world.sound)
        (world.syntax (phase syntax))
        (world.tag)
        (world.texture))


;; quick test to use ids


(define-block CubeBlock
  200
  category: sloped
  texture: "stone"
  ;; much slower version because it uses generic lighting
  ;; this can be a great test when optimizing generic lighting
  ;; generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
  ;;             (generate-model what 'Cube block-id variant-id i j k x y z uv generic-coordinates lighting rendering category add-face))
  )


(define-block StepBigBlock
  201
  category: sloped
  texture: "stone"
  opaque-cube?: #f
  cube?: #f
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (generate-model what 'StepBig block-id variant-id i j k x y z uv generic-coordinates lighting rendering category add-face)))


(define-block StepSmallBlock
  202
  category: sloped
  texture: "stone"
  opaque-cube?: #f
  cube?: #f
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (generate-model what 'StepSmall block-id variant-id i j k x y z uv generic-coordinates lighting rendering category add-face)))


(define-block StepBlock
  203
  category: sloped
  texture: "stone"
  opaque-cube?: #f
  cube?: #f
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (generate-model what 'Step block-id variant-id i j k x y z uv generic-coordinates lighting rendering category add-face)))


(define-block SlopeBlock
  204
  category: sloped
  texture: "stone"
  opaque-cube?: #f
  cube?: #f
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (generate-model what 'Slope block-id variant-id i j k x y z uv generic-coordinates lighting rendering category add-face)))


(define-block CornerLeftBlock
  205
  category: sloped
  texture: "stone"
  opaque-cube?: #f
  cube?: #f
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (generate-model what 'CornerLeft block-id variant-id i j k x y z uv generic-coordinates lighting rendering category add-face)))


(define-block CornerRightBlock
  206
  category: sloped
  texture: "stone"
  opaque-cube?: #f
  cube?: #f
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (generate-model what 'CornerRight block-id variant-id i j k x y z uv generic-coordinates lighting rendering category add-face)))


(define-block CornerPyramidBlock
  207
  category: sloped
  texture: "stone"
  opaque-cube?: #f
  cube?: #f
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (generate-model what 'CornerPyramid block-id variant-id i j k x y z uv generic-coordinates lighting rendering category add-face)))


(define-block CornerSlopeBlock
  208
  category: sloped
  texture: "stone"
  opaque-cube?: #f
  cube?: #f
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (generate-model what 'CornerSlope block-id variant-id i j k x y z uv generic-coordinates lighting rendering category add-face)))


(define-block PyramidBlock
  209
  category: sloped
  texture: "stone"
  opaque-cube?: #f
  cube?: #f
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (generate-model what 'Pyramid block-id variant-id i j k x y z uv generic-coordinates lighting rendering category add-face)))


@wait
(define-block FloorBlock
  210
  category: sloped
  texture: "stone"
  opaque-cube?: #f
  cube?: #f
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (generate-model what 'Floor block-id variant-id i j k x y z uv generic-coordinates lighting rendering category add-face)))


@wait
(define-block WallBlock
  211
  category: sloped
  texture: "stone"
  opaque-cube?: #f
  cube?: #f
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (generate-model what 'Wall block-id variant-id i j k x y z uv generic-coordinates lighting rendering category add-face)))


@wait
(define-block CeilingBlock
  212
  category: sloped
  texture: "stone"
  opaque-cube?: #f
  cube?: #f
  generate: (lambda (what block-id <fx> variant-id <fx> data-id <fx> config-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv <f32vector+> lighting rendering category add-face add-cube block-ref data-ref)
              (generate-model what 'Ceiling block-id variant-id i j k x y z uv generic-coordinates lighting rendering category add-face))))
