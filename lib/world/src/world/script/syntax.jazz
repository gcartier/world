;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; Script Syntax
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2016
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.script.syntax jazz


(import (scheme.syntax-rules (phase syntax)))


(syntax public %%instance
  (lambda (form-src usage-environment macro-environment)
    (let ((name (cadr (source-code form-src)))
          (body (cddr (source-code form-src))))
      (sourcify-if
        `(begin (%%define ,name (current-instance)) (%%define %%poll-script? #t) ,@body)
        form-src))))


(syntax public %%no-polling
  (lambda (form-src usage-environment macro-environment)
    (sourcify-if
      `(set! %%poll-script? #f)
      form-src)))


(definition protected events
  '(interact
    double-click
    power
    unpower
    teleport
    explode
    hit))


(syntax public handle
  (lambda (form-src usage-environment macro-environment)
    (let ((len (length (source-code form-src))))
      (assertion (>= len 2) (error "Wrong number of arguments for handle")
        (let ((form (cadr (source-code form-src)))
              (body (cddr (source-code form-src))))
          (assertion (pair? (source-code form)) (error "(Argument 1) PAIR expected{%}{s}" (list 'handle (desourcify-all form)))
            (let ((name (source-code (car (source-code form))))
                  (parameters (cdr (source-code form))))
              (assertion (memq? name events) (error "(Argument 1) EVENT expected{%}{s}" (list 'handle (desourcify-all form)))
                (let ((setter (string->symbol (string-append "set-" (symbol->string name) "-handler"))))
                  (sourcify-if
                    `(,setter me (lambda (me ,@parameters) ,@body))
                    form-src)))))))))))
