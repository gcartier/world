;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; Script Syntax
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.script.syntax jazz


(import (scheme.syntax-rules (phase syntax)))


(syntax public %%no-polling
  (lambda (form-src usage-environment macro-environment)
    (sourcify-deep-if
      `(set! %%poll-script? #f)
      form-src)))


(definition protected events
  '(interact
    double-click
    state-change
    power
    unpower
    teleport
    explode
    hit))


(syntax public handle
  (lambda (form-src usage-environment macro-environment)
    (let ((len (length (source-code form-src))))
      (assertion (>= len 2) (error "Wrong number of arguments for handle")
        (let ((form (cadr (source-code form-src)))
              (body (cddr (source-code form-src))))
          (assertion (pair? (source-code form)) (error "(Argument 1) PAIR expected{%}{s}" (list 'handle (desourcify-all form)))
            (let ((name (source-code (car (source-code form))))
                  (parameters (cdr (source-code form))))
              (assertion (memq? name events) (error "(Argument 1) EVENT expected{%}{s}" (list 'handle (desourcify-all form)))
                (sourcify-deep-if
                  `(begin
                     (register-script-handler me ',name (lambda (me ,@parameters) ,@body))
                     (unspecified))
                  form-src)))))))))


(syntax public check
  (lambda (form-src usage-environment macro-environment)
    (let ((expr (second (source-code form-src))))
      (let ((message (->string (desourcify expr) :text))
            (location (locat->container/line/col (source-locat form-src))))
        (sourcify-deep-if
          `(unless ,expr
             (validate-failed ,message))
          form-src)))))


(syntax public failed?
  (lambda (form-src usage-environment macro-environment)
    (let ((body (cdr (source-code form-src))))
      (sourcify-deep-if
        `(%%catch-exception-filter
           (lambda (exc)
             #t)
           (lambda (exc)
             #t)
           (lambda ()
             ,@body
             #f))
        form-src)))))
