;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Script Samples
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2016
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.script.sample jazz


(import (import (world.script)))


;;;
;;;; Move
;;;


#/Jazz/
(handle (tick)
  (move))
//#


;;;
;;;; Happy
;;;


#/Jazz/
(define happy?
  #f)

(handle (tick)
  (if (near-player? me)
      (begin
        (when (not happy?)
          (sound bark volume: .25))
        (lookat-player me)
        (jump)
        (set! happy? #t))
    (move)
    (set! happy? #f)))
//#


;;;
;;;; Speed
;;;


#/Jazz/
(when (get first-time? #t)
  (set-position me (vertex 0. -60. 0.))
  (set-lookat me (lookat-horizon (vertex 0. 0. 1.)))
  (set first-time? #f))

(set-motion me 'run)

(handle (tick)
  (let ((z (vertex-z (get-position me))))
    (cond ((> z 20.)
           (set-lookat me (lookat-horizon (vertex 0. 0. -1.))))
          ((< z 0.)
           (set-lookat me (lookat-horizon (vertex 0. 0. 1.))))))
  (move))
//#


;;;
;;;; Run
;;;


#/Jazz/
(when (not (get stage))
  (set stage 0))

(set stage (+ (get stage) 1))

(case (get stage)
  ((1)
   (set-all-motion 'walk))
  ((2)
   (set-all-motion 'run)
   (sound "sound/Rocky"))
  ((3)
   (handle (tick)
     (debug 'tick))))
//#


;;;
;;;; Dialog
;;;


#/Jazz/
(handle (tick)
  (if fly
      (my-people)
    (lookat-player)
    (if (near-player? self 3.)
        (stay)
      (move))
    (let ((time (current-seconds)))
      (let ((elapse (- time previous)))
        (set! previous time)
        (tick-msgs elapse)))))

(definition self
  (current-actor))

(definition previous
  0.)

(definition timer
  #f)

(definition (stop)
  (stay))

(definition fly
  #f)

(definition msg-index
  0)

(definition msgs
  (list (cons "Hi" 3.)
        (cons "I am Groot" 3.)
        (cons "My people need me!" 0.)))

(definition (tick-msgs elapse)
  (if (< msg-index (length msgs))
      (begin
        (when timer
          (decrease! timer elapse))
        (when (or (not timer) (< timer 0.))
          (message (car (list-ref msgs msg-index)))
          (set! timer (cdr (list-ref msgs msg-index)))
          (increase! msg-index)))
    (set! fly #t)))
//#
)
