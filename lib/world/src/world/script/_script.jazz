;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Scripts
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2016
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.script jazz


(export (jazz.optimize (phase syntax)) ;; for
        (world)
        (world.audio)
        (world.autoload)
        (world.commands)
        (world.draw)
        (world.dyes)
        (world.generation.building)
        (world.geometry)
        (world.mark)
        (world.scripting)
        (world.script.syntax (phase syntax))
        (world.syntax (phase syntax))
        (world.travel))

(import (jazz.event)
        (jazz.geometry)
        (jazz.graphic)
        (world)
        (world.actor)
        (world.audio)
        (world.autoload)
        (world.billboard)
        (world.commands)
        (world.contour)
        (world.creature)
        (world.draw)
        (world.dyes)
        (world.entity)
        (world.generation)
        (world.generation.block)
        (world.geometry)
        (world.mark)
        (world.homogeneous)
        (world.model)
        (world.scripter)
        (world.scripting)
        (world.syntax (phase syntax))
        (world.task)
        (world.travel))


;;;
;;;; Contour
;;;


;; script
(define-contour me)
(define-contour (current-player))

;; event
(define-contour (handle <event> <body>))
(define-contour (interact))
(define-contour (double-click))
(define-contour (power))
(define-contour (unpower))
(define-contour (teleport))
(define-contour (explode))
(define-contour (hit))

;; interface
(define-contour (message <msg>))
(define-contour (sound <path>))
(define-contour bark)

;; move
(define-contour (walk))
(define-contour (run))
(define-contour (sprint))
(define-contour (stay))
(define-contour (move <distance>))
(define-contour (move-to <target>))
(define-contour (rotate <angle>))
(define-contour (jump))

;; actor
(define-contour (near-player?))
(define-contour (set-billboard <actor> <name>))

;; block
(define-contour (add-block))
(define-contour (delete-block))
(define-contour (change-block))

;; trail
(define-contour (trail))
(define-contour (untrail))
(define-contour (trail-color <color>))
(define-contour (clear-trail))

;; plot
(define-contour (plot-axes))
(define-contour (plot-line <from> <to>))

;; language
(define-contour (looping))
(define-contour (lambda <arguments> <body>))
(define-contour stop)

;; development
(define-contour debug)


;;;
;;;; World
;;;


(definition public (message msg)
  (with-lock
    (lambda ()
      (%%message msg))))


;;;
;;;; Script
;;;


(definition public (current-player)
  (current-me))


(definition public (script-sleep period)
  (let ((task (current-task))
        (exit (current-exit)))
    (task-sleep task period 0. exit)))


;;;
;;;; Event
;;;


(definition public (event-me)
  (get-me~ (current-event)))

(definition public (event-time)
  (get-time~ (current-event)))

(definition public (event-elapse)
  (get-elapse~ (current-event)))


;;;
;;;; Actor
;;;


(definition public (current-actor)
  (let ((entity (%%current-entity)))
    (assert (is? entity Actor)
      entity)))


(definition public (near-player? (actor #f) (distance #f))
  (let ((actor (or actor (current-actor)))
        (distance (or distance 5.)))
    (%%near-player? actor distance)))


(definition public (hostile)
  (let ((event (current-event)))
    (tick-hostile~ (get-actor~ event)
      (get-time~ event)
      (get-elapse~ event))))


(definition public (get-position element)
  (assert (is? element Element))
  (with-lock
    (lambda ()
      (%%get-position element))))


(definition public (set-position element position)
  (assert (is? element Element))
  (with-lock
    (lambda ()
      (%%set-position element position))))


(definition public (set-lookat element direction/lookat)
  (assert (is? element Element))
  (let ((lookat (if (f64vector? direction/lookat)
                    (lookat-horizon direction/lookat)
                  direction/lookat)))
    (with-lock
      (lambda ()
        (%%set-lookat element lookat)))))


(definition public (set-speed element speed)
  (assert (is? element Element))
  (with-lock
    (lambda ()
      (%%set-speed element speed))))


(definition public (set-motion actor motion)
  (assert (is? actor Actor))
  (with-lock
    (lambda ()
      (%%set-motion actor motion))))


(definition public (walk)
  (let ((actor (current-actor)))
    (let ((script (get-script~ actor)))
      (set-sprint? actor #f)
      (set-motion actor 'walk))))


(definition public (run)
  (let ((actor (current-actor)))
    (let ((script (get-script~ actor)))
      (set-sprint? actor #f)
      (set-motion actor 'run))))


(definition public (sprint)
  (let ((actor (current-actor)))
    (let ((script (get-script~ actor)))
      (set-sprint? actor #t)
      (set-motion actor 'run))))


(definition public (set-sprint? actor flag)
  (assert (is? actor Actor))
  (with-lock
    (lambda ()
      (%%set-sprint? actor flag))))


(definition public (set-hover? actor flag)
  (assert (is? actor Actor))
  (with-lock
    (lambda ()
      (%%set-hover? actor flag))))


(definition public (set-billboard actor name)
  (with-lock
    (lambda ()
      (%%set-billboard actor name))))


(definition public (full-life)
  (with-lock
    (lambda ()
      (%%full-life))))


(definition public (teleport position)
  (with-lock
    (lambda ()
      (%%teleport position))))


(definition public (zone-in zone)
  (delay-event
    (lambda ()
      (change-zone~ (current-tier) zone))))


(definition public (zone-out)
  (delay-event
    (lambda ()
      (change-zone~ (current-tier) 'start))))


;;;
;;;; Model
;;;


(definition public (get-model entity)
  (assert (is? entity Entity))
  (with-lock
    (lambda ()
      (%%get-model entity))))


(definition public (set-run-speed model speed)
  (assert (is? model Model))
  (with-lock
    (lambda ()
      (%%set-run-speed model speed))))


;;;
;;;; Sound
;;;


(definition public bark
  "sound/random/dog_barking")


(definition public (sound path (volume: volume #f))
  (with-lock
    (lambda ()
      (%%sound path volume: volume))))


;;;
;;;; Tick
;;;


(definition public (looping proc)
  (declare (proper-tail-calls))
  (with-tick
    (lambda (actor script time elapse iter)
      (let ((stop? #f))
        (define (stop)
          (set! stop? #t))
        
        (proc stop)
        (unless stop?
          (iter))))))


(definition public (set-tick-handler actor handler)
  (with-lock
    (lambda ()
      (%%set-tick-handler actor handler))))

(definition public (set-interact-handler actor handler)
  (with-lock
    (lambda ()
      (%%set-interact-handler actor handler))))

(definition public (set-double-click-handler actor handler)
  (with-lock
    (lambda ()
      (%%set-double-click-handler actor handler))))

(definition public (set-power-handler actor handler)
  (with-lock
    (lambda ()
      (%%set-power-handler actor handler))))

(definition public (set-unpower-handler actor handler)
  (with-lock
    (lambda ()
      (%%set-unpower-handler actor handler))))

(definition public (set-teleport-handler actor handler)
  (with-lock
    (lambda ()
      (%%set-teleport-handler actor handler))))

(definition public (set-explode-handler actor handler)
  (with-lock
    (lambda ()
      (%%set-explode-handler actor handler))))

(definition public (set-hit-handler actor handler)
  (with-lock
    (lambda ()
      (%%set-hit-handler actor handler))))


;;;
;;;; Pause
;;;


(definition public (paused?)
  (%%paused?))


(definition public (pause)
  (%%pause))


(definition public (unpause)
  (%%unpause))


(definition public (toggle-paused)
  (%%toggle-paused))


;;;
;;;; LookAt
;;;


(definition public (lookat-horizon dir)
  (%%lookat-horizon dir))


(definition public (lookat-player (actor #f))
  (let ((actor (or actor (current-actor))))
    (with-lock
      (lambda ()
        (%%lookat-player actor)))))


(definition public (lookat-target target (actor #f))
  (let ((actor (or actor (current-actor))))
    (with-lock
      (lambda ()
        (%%lookat-target target actor)))))


(definition public (lookat-rotate element angle)
  (with-lock
    (lambda ()
      (%%lookat-rotate element angle))))


;;;
;;;; Move
;;;


(definition public (stay)
  (%%stay))


(definition public (move distance)
  (let ((distance (cast <fl> distance)))
    (%%move distance)))


(definition public (move-to . rest)
  (let ((target (if (= (length rest) 1)
                    (car rest)
                  (bind (x y z) rest
                    (vertex (cast <fl> x) (cast <fl> y) (cast <fl> z))))))
    (%%move-to target)))


(definition public (rotate angle)
  (let ((angle (degree->radian (cast <fl> angle))))
    (%%rotate angle)))


(definition public (jump (actor #f) (impulsion #f))
  (let ((actor (or actor (current-actor))))
    (with-lock
      (lambda ()
        (%%jump actor impulsion)))))


;;;
;;;; Block
;;;


(definition public (add-block position block-id)
  (with-lock
    (lambda ()
      (%%add-block position block-id))))


(definition public (delete-block position)
  (with-lock
    (lambda ()
      (%%delete-block position))))


(definition public (change-block position block-id)
  (with-lock
    (lambda ()
      (%%change-block position block-id))))


;;;
;;;; Trail
;;;


(definition public (trail (color #f))
  (with-lock
    (lambda ()
      (%%trail color))))


(definition public (untrail)
  (with-lock
    (lambda ()
      (%%untrail))))


(definition public (trail-color color)
  (with-lock
    (lambda ()
      (%%trail-color color))))


(definition public (clear-trail)
  (with-lock
    (lambda ()
      (%%clear-trail))))


(definition public (plot-axes (dx 0) (dz 0))
  (with-lock
    (lambda ()
      (%%plot-axes dx dz))))


(definition public (plot-line from to (color 'red))
  (with-lock
    (lambda ()
      (%%plot-line from to color))))


;;;
;;;; Various
;;;


(definition public (animate actor animation (next: next #f))
  (with-lock
    (lambda ()
      (%%animate actor animation next: next))))


(definition public (creatures)
  (with-lock
    (lambda ()
      (%%creatures))))


(definition public (block-interact a b c)
  (with-lock
    (lambda ()
      (%%block-interact a b c))))


(definition public (set-block-data a b c data)
  (with-lock
    (lambda ()
      (%%set-block-data a b c data)))))
