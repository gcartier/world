;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Scripts
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2016
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.script jazz


(export (world)
        (world.audio)
        (world.autoload)
        (world.commands)
        (world.geometry)
        (world.scripting)
        (world.script.syntax (phase syntax))
        (world.syntax (phase syntax)))

(import (jazz.graphic)
        (world)
        (world.actor)
        (world.audio)
        (world.autoload)
        (world.billboard)
        (world.commands)
        (world.creature)
        (world.entity)
        (world.generation)
        (world.geometry)
        (world.model)
        (world.scripting)
        (world.syntax (phase syntax)))


(definition public (animate actor animation (next: next #f))
  (assert (find-animation~ (cache-model~ actor) animation))
  (transition-morphing~ actor animation next: (or next "Idle"))
  (set-animation-active~ actor animation))


(definition public (creatures)
  (let ((zone (current-zone)))
    (get-creatures~ zone)))


(definition public (block-interact a b c)
  (let ((game (current-game)))
    (interact-at~ game (location->position (vector a b c)))))


;;;
;;;; World
;;;


(definition public (message msg)
  (let ((world (current-world)))
    (display-message~ world msg)))


;;;
;;;; Sound
;;;


(definition public bark
  "sound/random/dog_barking")


(definition public (sound path (volume: volume #f))
  (when sounds?
    (let ((sound (cache-stream-sound path)))
      (unless (playing?~ sound)
        (when volume
          (set-volume~ sound volume))
        (play~ sound)))))


;;;
;;;; Actor
;;;


(definition public (current-actor)
  (if (current-event)
      (get-actor~ (current-event))
    (current-instance)))


(definition public (event-me)
  (get-actor~ (current-event)))

(definition public (event-time)
  (get-time~ (current-event)))

(definition public (event-elapse)
  (get-elapse~ (current-event)))


(definition public (lookat-horizon dir)
  (horizon-lookat (vertex-normalize& (vertex& (vertex-x dir) 0. (vertex-z dir)))))


(definition public (near-player? (actor #f) (distance #f))
  (let ((actor (or actor (current-actor)))
        (distance (or distance 5.)))
    (<= (vertex-distance (get-position~ actor) (get-position~ (current-me))) distance)))


(definition public (lookat-player (actor #f))
  (let ((actor (or actor (current-actor))))
    (let ((dir (vertex- (get-position~ (current-me)) (get-position~ actor))))
      (set-lookat actor (lookat-horizon dir)))))


(definition public stay-commands
  (new Commands))

(definition public move-commands
  (let ((commands (new Commands)))
    (move-forward~ commands)
    commands))

(definition public jump-commands
  (let ((commands (new Commands)))
    (jump~ commands)
    commands))


(definition public (stay)
  (perform stay-commands))

(definition public (move)
  (perform move-commands))

(definition public (hover)
  (perform move-commands gravity?: #f))

(definition public (jump)
  (perform jump-commands))

(definition public (hostile)
  (let ((event (current-event)))
    (tick-hostile~ (get-actor~ event)
      (get-time~ event)
      (get-elapse~ event)
      (get-exit~ event))))


(definition public (get-position element)
  (assert (is? element Element))
  (get-position~ element))


(definition public (set-position element position)
  (assert (is? element Element))
  (set-position~ element position))

(definition public (set-lookat element lookat)
  (assert (is? element Element))
  (set-lookat~ element lookat))

(definition public (set-speed element speed)
  (assert (is? element Element))
  (set-speed~ element speed))


(definition public (set-motion actor motion)
  (assert (is? actor Actor))
  (set-motion~ actor motion))


(definition public (set-hover? actor flag)
  (assert (is? actor Actor))
  (set-hover?~ actor flag))


(definition public (set-tick-handler actor handler)
  (set-script-tick~ actor handler))

(definition public (set-interact-handler actor handler)
  (set-script-interact~ actor handler))


(definition public (perform commands (gravity?: gravity? #t))
  (assert (is? commands Commands))
  (let ((event (current-event)))
    (let ((actor (get-actor~ event))
          (time (get-time~ event))
          (elapse (get-elapse~ event))
          (exit (get-exit~ event)))
      (tick-actor~ actor commands time elapse exit gravity? 'slide))))


(definition public (set-billboard actor text)
  (set-billboard-texture~ actor (make-billboard-element (list text {Font font-name: tahoma point-size: 36 hint-style: slight hint-metrics: on} {Color World-Yellow} 2.))))


;;;
;;;; Model
;;;


(definition public (get-model entity)
  (assert (is? entity Entity))
  (cache-model~ entity))


(definition public (set-run-speed model speed)
  (assert (is? model Model))
  (set-run-speed~ model speed))


;;;
;;;; Move
;;;


#/Jazz/
(handle (tick)
  (move))
//#


;;;
;;;; Happy
;;;


#/Jazz/
(define happy?
  #f)

(handle (tick)
  (if (near-player? me)
      (begin
        (when (not happy?)
          (sound bark volume: .25))
        (lookat-player me)
        (jump)
        (set! happy? #t))
    (move)
    (set! happy? #f)))
//#


;;;
;;;; Speed
;;;


#/Jazz/
(when (get first-time? #t)
  (set-position me (vertex 0. -60. 0.))
  (set-lookat me (lookat-horizon (vertex 0. 0. 1.)))
  (set first-time? #f))

(set-motion me 'run)

(handle (tick)
  (let ((z (vertex-z (get-position me))))
    (cond ((> z 20.)
           (set-lookat me (lookat-horizon (vertex 0. 0. -1.))))
          ((< z 0.)
           (set-lookat me (lookat-horizon (vertex 0. 0. 1.))))))
  (move))
//#


;;;
;;;; Run
;;;


#/Jazz/
(when (not (get stage))
  (set stage 0))

(set stage (+ (get stage) 1))

(case (get stage)
  ((1)
   (set-all-motion 'walk))
  ((2)
   (set-all-motion 'run)
   (sound "sound/Rocky"))
  ((3)
   (handle (tick)
     (debug 'tick))))
//#
)
