;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Scripts
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.script jazz:


(require (gaea.types (phase syntax)))

(export (gambit (only random-integer random-real table->list list->table))
        (jazz (phase syntax) (only bind loop with when unless))
        (jazz (only between? class-of error debug tell terminal new close find ->string Object Object-Class Point Dimension Dimension$fl$ Rect construct-rect get-h get-v get-width get-height not-null? naturals format print-unreadable set-% make-table table-ref table-set! remove random-element random-sequence sleep continuation-capture continuation-return continuation-graft unspecified))
        (jazz.cairo)
        (jazz.geometry)
        (jazz.graphic (only Color Font registered-color registered-font cycle-debug-color! draw-text Image ellipse fill-image fill-rect rectangle line set-color set-font set-line-width get-context blit-surface frame-rect get-text-width Surface Image-Surface))
        (jazz.graphic.image (only create-cairo-surface-from-png))
        (jazz.graphic.literals (only construct-color construct-font))
        (jazz.io (only File Directory get-parent get-name get-base get-extension extension=?))
        (jazz.jpeg (only create-cairo-surface-from-jpeg))
        (jazz.json (only load-json))
        (jazz.view (only View))
        (gaea.geometry)
        (gaea.math)
        (world.creature (only Wolf Spider Jumper))
        (world.script.blocks)
        (world.script.syntax (phase syntax))
        (world.spawn (only spawn-creatures? set-spawn-creatures?))
        (world.video (only make-view make-event-view)))

(import (jazz (except random))
        (jazz.event)
        (jazz.geometry)
        (jazz.graphic)
        (jazz.io)
        (gaea.dye)
        (gaea.geometry)
        (gaea.lookat)
        (gaea.homogeneous)
        (world)
        (world.actor)
        (world.autoload)
        (world.context)
        (world.contour)
        (world.creature)
        (world.element)
        (world.entity)
        (world.folio)
        (world.index)
        (world.model)
        (world.scripting)
        (world.scriptum)
        (world.server.autoload)
        (world.syntax (phase syntax))
        (world.task))


(declare (proper-tail-calls))


;;;
;;;; Category
;;;


(define-contour-category interface   rank:  0)
(define-contour-category drawing     rank:  1)
(define-contour-category event       rank:  2)
(define-contour-category world       rank:  3)
(define-contour-category control     rank:  4)
(define-contour-category properties  rank:  5)
(define-contour-category emote       rank:  6)
(define-contour-category sound       rank:  7)
(define-contour-category move        rank:  8)
(define-contour-category lookat      rank:  10)
(define-contour-category actor       rank:  11)
(define-contour-category block       rank:  12)
(define-contour-category blocks      rank:  13)
(define-contour-category entity      rank:  14)
(define-contour-category trail       rank:  15)
(define-contour-category belt        rank:  17)
(define-contour-category random      rank:  30)
(define-contour-category geometry    rank:  35)
(define-contour-category scheme      rank:  40)


;;;
;;;; Contour
;;;


;; interface
(define-contour (announce <msg>)
  category: 'interface)

(define-contour show
  category: 'interface)


;; drawing
(define-contour (name <name>)
  category: 'drawing)

(define-contour (unname)
  category: 'drawing)

(define-contour (say <string>)
  category: 'drawing)

(define-contour (unsay)
  category: 'drawing)

(define-contour (picture <procedure>)
  category: 'drawing)

(define-contour (unpicture)
  category: 'drawing)


;; event
(define-name-contour interact
"(handle (interact)
   <body>)
"
  category: 'event)

(define-name-contour double-click
"(handle (double-click)
   <body>)
"
  category: 'event)

(define-name-contour power
"(handle (power)
   <body>)
"
  category: 'event)

(define-name-contour unpower
"(handle (unpower)
   <body>)
"
  category: 'event)

(define-name-contour teleport
"(handle (teleport)
   <body>)
"
  category: 'event)

(define-name-contour explode
"(handle (explode)
   <body>)
"
  category: 'event)

(define-name-contour hit
"(handle (hit)
   <body>)
"
  category: 'event)


;; world
(define-contour me
  category: 'world)

(define-contour (player)
  category: 'world)

(define-contour (creatures)
  category: 'world)

(define-contour (teleport-spawn)
  category: 'world)

(define-contour (daytime)
  category: 'world)

(define-contour (daytime-set! <daytime>)
  category: 'world)


;; control
(define-name-contour tick
"(tick
   (lambda (iter)
     <body>))"
  category: 'control)

(define-contour (wait <period>)
  category: 'control)

(define-contour (send <entity> <msg>)
  category: 'control)

(define-contour (accept)
  category: 'control)


;; properties
(define-contour (get <object> <property>)
  category: 'properties)

(define-contour (need <object> <property>)
  category: 'properties)

(define-contour (wait-for <object> <property> <value>)
  category: 'properties)

(define-contour (set <object> <property> <value>)
  category: 'properties)

(define-contour (clear <object> <property>)
  category: 'properties)


;; emote
(define-contour (emote <emote>)
  category: 'emote)

(define-contour (applaud)
  category: 'emote)

(define-contour (beg)
  category: 'emote)

(define-contour (cheer)
  category: 'emote)

(define-contour (cry)
  category: 'emote)

(define-contour (dance)
  category: 'emote)

(define-contour (kneel)
  category: 'emote)

(define-contour (laugh)
  category: 'emote)

(define-contour (no)
  category: 'emote)

(define-contour (point)
  category: 'emote)

(define-contour (wave)
  category: 'emote)

(define-contour (yes)
  category: 'emote)


;; sound
(define-contour (sound <path>)
  category: 'sound)

(define-contour (bark)
  category: 'sound)

(define-contour (music <path>)
  category: 'sound)

(define-contour (close-music)
  category: 'sound)


;; move
(define-contour (walk)
  category: 'move)

(define-contour (run)
  category: 'move)

(define-contour (sprint)
  category: 'move)

(define-contour (stay)
  category: 'move)

(define-contour (move <distance>)
  category: 'move)

(define-contour (move-to <target>)
  category: 'move)

(define-contour (rotate <angle>)
  category: 'move)

(define-contour (jump)
  category: 'move)

(define-contour (jump-player)
  category: 'move)

(define-contour (follow <target>)
  category: 'move)

(define-contour (follow-player)
  category: 'move)

(define-contour (path)
  category: 'move)


;; lookat
(define-contour (horizon-lookat <dir>)
  category: 'lookat)

(define-contour (lookat-player)
  category: 'lookat)

(define-contour (lookat-target <target>)
  category: 'lookat)


;; actor
(define-contour (near-player?)
  category: 'actor)

(define-contour (full-life)
  category: 'actor)

(define-contour (fire)
  category: 'actor)

(define-contour (fire-at <creature>)
  category: 'actor)

(define-contour (fire-random)
  category: 'actor)

(define-contour (nearest-spawned)
  category: 'actor)


;; block
(define-contour (location <i> <j> <k>)
  category: 'block)

(define-contour (add-block <location> <block-id>)
  category: 'block)

(define-contour (delete-block <location>)
  category: 'block)

(define-contour (change-block <location> <block-id>)
  category: 'block)

(define-contour (get-block <location>)
  category: 'block)

(define-contour (set-block <location> <block-id>)
  category: 'block)

(define-contour (set-block-data <location> <data-id>)
  category: 'block)

(define-contour (interact-block <location>)
  category: 'block)


;; blocks
(define-contour Dirt category: 'blocks)
(define-contour Stone category: 'blocks)
(define-contour Grass category: 'blocks)
(define-contour Dirt category: 'blocks)
(define-contour Cobblestone category: 'blocks)
(define-contour WoodenPlank category: 'blocks)
(define-contour Sapling category: 'blocks)
(define-contour Bedrock category: 'blocks)
(define-contour Water category: 'blocks)
(define-contour StationaryWater category: 'blocks)
(define-contour Lava category: 'blocks)
(define-contour StationaryLava category: 'blocks)
(define-contour SandBlock category: 'blocks)
(define-contour Gravel category: 'blocks)
(define-contour GoldOre category: 'blocks)
(define-contour IronOre category: 'blocks)
(define-contour CoalOre category: 'blocks)
(define-contour Wood category: 'blocks)
(define-contour Leaves category: 'blocks)
(define-contour Sponge category: 'blocks)
(define-contour Glass category: 'blocks)
(define-contour LapisOre category: 'blocks)
(define-contour LapisBlock category: 'blocks)
(define-contour Dispenser category: 'blocks)
(define-contour Sandstone category: 'blocks)
(define-contour NoteBlock category: 'blocks)
(define-contour BedBlock category: 'blocks)
(define-contour PoweredRail category: 'blocks)
(define-contour DetectorRail category: 'blocks)
(define-contour StickyPiston category: 'blocks)
(define-contour Web category: 'blocks)
(define-contour TallGrass category: 'blocks)
(define-contour DeadBush category: 'blocks)
(define-contour Piston category: 'blocks)
(define-contour PistonHead category: 'blocks)
(define-contour Wool category: 'blocks)
(define-contour Dandelion category: 'blocks)
(define-contour Rose category: 'blocks)
(define-contour BrownMushroom category: 'blocks)
(define-contour RedMushroom category: 'blocks)
(define-contour GoldBlock category: 'blocks)
(define-contour IronBlock category: 'blocks)
(define-contour DoubleStoneSlabs category: 'blocks)
(define-contour StoneSlabs category: 'blocks)
(define-contour Brick category: 'blocks)
(define-contour TNT category: 'blocks)
(define-contour Bookshelf category: 'blocks)
(define-contour MossyCobblestone category: 'blocks)
(define-contour Obsidian category: 'blocks)
(define-contour Torch category: 'blocks)
(define-contour Fire category: 'blocks)
(define-contour MonsterSpawner category: 'blocks)
(define-contour WoodenStairs category: 'blocks)
(define-contour Chest category: 'blocks)
(define-contour RedstoneWire category: 'blocks)
(define-contour DiamondOre category: 'blocks)
(define-contour DiamondBlock category: 'blocks)
(define-contour WorkbenchBlock category: 'blocks)
(define-contour WheatCrops category: 'blocks)
(define-contour Soil category: 'blocks)
(define-contour Furnace category: 'blocks)
(define-contour BurningFurnace category: 'blocks)
(define-contour SignPost category: 'blocks)
(define-contour WoodenDoorBlock category: 'blocks)
(define-contour Ladder category: 'blocks)
(define-contour Rail category: 'blocks)
(define-contour CobblestoneStairs category: 'blocks)
(define-contour WallSign category: 'blocks)
(define-contour Lever category: 'blocks)
(define-contour StonePressurePlate category: 'blocks)
(define-contour IronDoorBlock category: 'blocks)
(define-contour WoodenPressurePlate category: 'blocks)
(define-contour RedstoneOre category: 'blocks)
(define-contour GlowingRedstoneOre category: 'blocks)
(define-contour RedstoneTorchOff category: 'blocks)
(define-contour RedstoneTorchOn category: 'blocks)
(define-contour StoneButton category: 'blocks)
(define-contour Snow category: 'blocks)
(define-contour Ice category: 'blocks)
(define-contour SnowBlock category: 'blocks)
(define-contour Cactus category: 'blocks)
(define-contour Clay category: 'blocks)
(define-contour SugarCane category: 'blocks)
(define-contour Jukebox category: 'blocks)
(define-contour Fence category: 'blocks)
(define-contour Pumpkin category: 'blocks)
(define-contour Netherrack category: 'blocks)
(define-contour SoulSand category: 'blocks)
(define-contour Glowstone category: 'blocks)
(define-contour Portal category: 'blocks)
(define-contour Jack-O-Lantern category: 'blocks)
(define-contour CakeBlock category: 'blocks)
(define-contour RedstoneRepeaterBlockOff category: 'blocks)
(define-contour RedstoneRepeaterBlockOn category: 'blocks)
(define-contour LockedChest category: 'blocks)
(define-contour Trapdoor category: 'blocks)
(define-contour MonsterEgg category: 'blocks)
(define-contour StoneBricks category: 'blocks)
(define-contour BrownMushroomCap category: 'blocks)
(define-contour RedMushroomCap category: 'blocks)
(define-contour IronBars category: 'blocks)
(define-contour GlassPane category: 'blocks)
(define-contour MelonBlock category: 'blocks)
(define-contour PumpkinStem category: 'blocks)
(define-contour MelonStem category: 'blocks)
(define-contour Vines category: 'blocks)
(define-contour FenceGate category: 'blocks)
(define-contour BrickStairs category: 'blocks)
(define-contour StoneBrickStairs category: 'blocks)
(define-contour Mycelium category: 'blocks)
(define-contour LilyPad category: 'blocks)
(define-contour NetherBrick category: 'blocks)
(define-contour NetherBrickFence category: 'blocks)
(define-contour NetherBrickStairs category: 'blocks)
(define-contour NetherWart category: 'blocks)
(define-contour EnchantmentTable category: 'blocks)
(define-contour BrewingStand category: 'blocks)
(define-contour Cauldron category: 'blocks)
(define-contour EndPortal category: 'blocks)
(define-contour EndPortalFrame category: 'blocks)
(define-contour EndStone category: 'blocks)
(define-contour DragonEgg category: 'blocks)
(define-contour RedstoneLampOff category: 'blocks)
(define-contour RedstoneLampOn category: 'blocks)
(define-contour DoubleWoodenSlab category: 'blocks)
(define-contour WoodenSlab category: 'blocks)
(define-contour CocoaPlant category: 'blocks)
(define-contour SandstoneStairs category: 'blocks)
(define-contour EmeraldOre category: 'blocks)
(define-contour EnderChest category: 'blocks)
(define-contour TripwireHook category: 'blocks)
(define-contour Tripwire category: 'blocks)
(define-contour EmeraldBlock category: 'blocks)
(define-contour SpruceWoodStairs category: 'blocks)
(define-contour BirchWoodStairs category: 'blocks)
(define-contour JungleWoodStairs category: 'blocks)
(define-contour CommandBlock category: 'blocks)
(define-contour BeaconBlock category: 'blocks)
(define-contour CobblestoneWall category: 'blocks)
(define-contour FlowerPot category: 'blocks)
(define-contour Carrots category: 'blocks)
(define-contour Potatoes category: 'blocks)
(define-contour WoodenButton category: 'blocks)
(define-contour QuartzOre category: 'blocks)
(define-contour QuartzBlock category: 'blocks)
(define-contour QuartzStairs category: 'blocks)
(define-contour StainedClay category: 'blocks)
(define-contour Leaves2 category: 'blocks)
(define-contour Wood2 category: 'blocks)
(define-contour HardenedClay category: 'blocks)
(define-contour DoublePlant category: 'blocks)


;; entity
(define-contour (add-entity)
  category: 'entity)

(define-contour (remove-entity <entity>)
  category: 'entity)

(define-contour (find-entity <name>)
  category: 'entity)


;; trail
(define-contour (trail)
  category: 'trail)

(define-contour (untrail)
  category: 'trail)

(define-contour (trail-color)
  category: 'trail)

(define-contour (clear-trail)
  category: 'trail)

(define-contour (plot-axes)
  category: 'trail)

(define-contour (plot-line <from> <to>)
  category: 'trail)


;; belt
(define-contour (belt-id <rank>)
  category: 'belt)

(define-contour (belt-count <rank>)
  category: 'belt)

(define-contour (belt-add <rank> <id>)
  category: 'belt)

(define-contour (belt-remove <rank>)
  category: 'belt)

(define-contour (belt-empty)
  category: 'belt)


;; random
(define-contour (random <n>)
  category: 'random)

(define-contour (random-real)
  category: 'random)


;; geometry
(define-contour (vertex <x> <y> <z>)
  category: 'geometry)

(define-contour (vertex+ <v1> <v2>)
  category: 'geometry)

(define-contour (vertex- <v1> <v2>)
  category: 'geometry)


;; scheme
(define-contour (define <variable> <expression>)
  category: 'scheme)

(define-contour (lambda <parameters> <body>)
  category: 'scheme)

(define-contour (when <test> <body>)
  category: 'scheme)

(define-contour (unless <test> <body>)
  category: 'scheme)

(define-contour (if <test> <yes> <no>)
  category: 'scheme)

(define-contour (and <tests>)
  category: 'scheme)

(define-contour (or <tests>)
  category: 'scheme)

(define-contour (let <bindings> <body>)
  category: 'scheme)

(define-contour (let* <bindings> <body>)
  category: 'scheme)

(define-contour (letrec <bindings> <body>)
  category: 'scheme)

(define-contour (apply <procedure> <arguments>)
  category: 'scheme)

(define-contour (append <lists>)
  category: 'scheme)

(define-contour (assoc <object> <alist>)
  category: 'scheme)

(define-contour (assq <object> <alist>)
  category: 'scheme)

(define-contour (assv <object> <alist>)
  category: 'scheme)

(define-contour (begin <expressions>)
  category: 'scheme)

(define-contour (car <pair>)
  category: 'scheme)

(define-contour (cdr <pair>)
  category: 'scheme)

(define-contour (case <key> <clauses>)
  category: 'scheme)

(define-contour (cond <clauses>)
  category: 'scheme)

(define-contour (cons <object> <object>)
  category: 'scheme)

(define-contour (eq? <object> <object>)
  category: 'scheme)

(define-contour (equal? <object> <object>)
  category: 'scheme)

(define-contour (eqv? <object> <object>)
  category: 'scheme)

(define-contour (for-each <procedure> <lists>)
  category: 'scheme)

(define-contour (length <list>)
  category: 'scheme)

(define-contour (list <objects>)
  category: 'scheme)

(define-contour (list-ref <list> <n>)
  category: 'scheme)

(define-contour (map <procedure> <lists>)
  category: 'scheme)

(define-contour (member? <object> <list>)
  category: 'scheme)

(define-contour (memq? <object> <list>)
  category: 'scheme)

(define-contour (memv? <object> <list>)
  category: 'scheme)

(define-contour (not <object>)
  category: 'scheme)

(define-contour (null? <object>)
  category: 'scheme)

(define-contour (pair? <object>)
  category: 'scheme)

(define-contour (reverse <list>)
  category: 'scheme)

(define-contour (set! <variable> <value>)
  category: 'scheme)

(define-contour (string <characters>)
  category: 'scheme)

(define-contour (string-ref <string> <n>)
  category: 'scheme)

(define-contour (values <objects>)
  category: 'scheme)

(define-contour (vector <objects>)
  category: 'scheme)

(define-contour (vector-length <vector>)
  category: 'scheme)

(define-contour (vector-ref <vector> <n>)
  category: 'scheme)


;;;
;;;; Interface
;;;


(definition public (announce msg)
  (check-client announce
    (with-lock
      (lambda ()
        (%%announce msg)
        (unspecified)))))


(definition public (show . rest)
  (with-lock
    (lambda ()
      (let ((message (format "{l detail: :human}" rest)))
        (%%show message)))))


(definition public (show-clear)
  (check-client show-clear
    (with-lock
      (lambda ()
        (%%show-clear)))))


;;;
;;;; Drawing
;;;


(definition public (name name)
  (with-lock
    (lambda ()
      (%%name (->string name))
      (unspecified))))


(definition public (unname)
  (with-lock
    (lambda ()
      (%%unname)
      (unspecified))))


(definition public (say msg (size: size <integer+> #f))
  (with-lock
    (lambda ()
      (%%say msg size: size)
      (unspecified))))


(definition public (unsay)
  (with-lock
    (lambda ()
      (%%unsay)
      (unspecified))))


(definition public (picture proc (resolution: resolution #f) (expanse: expanse #f) (width: width <fl> +nan.0) (height: height <fl> +nan.0) (background: background #f) (slide?: slide? #f))
  (check-client picture
    (with-lock
      (lambda ()
        (if (client?)
            (%%client-picture proc resolution expanse width height background slide?)
          (%%picture proc background slide?))
        (unspecified)))))


(definition public (unpicture)
  (check-client unpicture
    (with-lock
      (lambda ()
        (if (client?)
            (%%client-unpicture)
          (%%unpicture))
        (unspecified)))))


(definition public (sketch pane proc)
  (check-client pane
    (with-lock
      (lambda ()
        (%%client-sketch pane proc)
        (unspecified)))))


(definition public (pane view (slide?: slide? #f))
  (check-client pane
    (with-lock
      (lambda ()
        (if (client?)
            (%%client-pane view slide?)
          (%%pane view slide?))
        (unspecified)))))


(definition public (unpane)
  (check-client unpane
    (with-lock
      (lambda ()
        (if (client?)
            (%%client-unpane)
          (%%unpane))
        (unspecified)))))


(definition public (cycle-color!)
  (check-client cycle-color!
    (with-lock
      (lambda ()
        (cycle-debug-color!)))))


(definition public (ask-string proc . rest)
  (check-client ask-string
    (call-event
      (lambda ()
        (with-task-mutex
          (lambda ()
            (apply world.interface.dialogs:ask-string
              action: proc
              rest)))))))


;;;
;;;; Asset
;;;


(definition public (retrieve path <string>)
  (with-lock
    (lambda ()
      (%%retrieve path))))


(definition public (directory-list dir <string>)
  (with-lock
    (lambda ()
      (%%directory-list dir))))


;;;
;;;; World
;;;


(definition public (player)
  (check-client player
    (current-me)))


(definition public (player-position)
  (check-client player-position
    (get-position (player))))


(definition public (creatures)
  (with-lock
    (lambda ()
      (%%creatures))))


(definition public (daytime)
  (with-lock
    (lambda ()
      (let ((zone (current-zone)))
        (fxround (get-daytime zone))))))


(definition public (daytime-set! time)
  (with-lock
    (lambda ()
      (let ((zone (current-zone)))
        (let ((effective-time (effective-daytime zone time)))
          (goto-daytime zone effective-time))))))


(definition public (missiles-destroy)
  (with-lock
    (lambda ()
      (let ((zone (current-zone)))
        (set-missile-behavior zone 'destroy)))))

(definition public (missiles-absorb)
  (with-lock
    (lambda ()
      (let ((zone (current-zone)))
        (set-missile-behavior zone 'absorb)))))


;;;
;;;; Control
;;;


(definition public (current-instance)
  (%%current-instance))


(definition public (wait period)
  (check-positive period 1 (wait period)
    (let ((timeout (+ (current-seconds) period)))
      (wait-to timeout))))


(definition public (wait-to timeout)
  (%%tick default-tick-period
    (lambda (actor script time elapse iter)
      (when (< (current-seconds) timeout)
        (%%perform-stay)
        (iter)))))


@huboo
(definition public (paused?)
  (%%paused?))


@huboo
(definition public (pause)
  (%%pause)
  (unspecified))


@huboo
(definition public (unpause)
  (%%unpause)
  (unspecified))


@huboo
(definition public (toggle-paused)
  (%%toggle-paused)
  (unspecified))


;;;
;;;; Mailbox
;;;


;; gambit's mailboxes are used internally
(definition protected mailboxes
  (make-table test: eq? weak-keys: #t))

(definition protected mailboxes-mutex
  (make-mutex 'mailboxes))


(definition protected (get-mailbox entity <Entity>)
  (mutex-lock! mailboxes-mutex)
  (prog1 (or (table-ref mailboxes entity #f)
             (let ((mailbox (open-vector)))
               (table-set! mailboxes entity mailbox)
               mailbox))
    (mutex-unlock! mailboxes-mutex)))


(definition public (send entity <Entity> msg)
  (let ((mailbox (get-mailbox entity)))
    (write msg mailbox)
    (force-output mailbox)
    (unspecified)))


(definition public (accept)
  (let ((entity (%%current-entity)))
    (let ((mailbox (get-mailbox entity)))
      (%%tick default-tick-period
        (lambda (actor script time elapse iter)
          (input-port-timeout-set! mailbox 0.)
          (let ((obj (read mailbox)))
            (if (eof-object? obj)
                (iter)
              obj)))))))


;;;
;;;; Properties
;;;


(definition public (get object property (default #f))
  (%%get object property default))


(definition public (need object property)
  (%%need object property))


(definition public (wait-for object property value)
  (%%wait-for object property value))


(definition public (set object property value)
  (%%set object property value))


@huboo
(definition public (clear object property)
  (%%clear object property))


;;;
;;;; State
;;;


(definition public (state-ref)
  (%%state-ref (current-actor)))


(definition public (state-set! state)
  (%%state-set! (current-actor) state))


(definition public (state-update)
  (%%state-update (current-actor)))


;;;
;;;; Message
;;;


(definition public (message recipient what (content #f))
  (%%message recipient what content))


(definition public (message-sender)
  (get-sender (%%current-event)))


;;;
;;;; Origin
;;;


(definition public (origin-no)
  (let ((origin (%%current-origin)))
    (and origin (find-delegate-by-no (current-tier) origin))))


(definition public (origin-name)
  (let ((origin (%%current-origin)))
    (and origin (let ((delegate (find-delegate-by-no (current-tier) origin)))
                  (and delegate
                       (get-name delegate))))))


;;;
;;;; Event
;;;


(definition public (event-me)
  (get-me (%%current-event)))

(definition public (event-time)
  (get-time (%%current-event)))

(definition public (event-elapse)
  (get-elapse (%%current-event)))


;;;
;;;; Actor
;;;


(definition public (current-actor)
  (%%current-actor))


(definition public (near-player? (distance <fl> 5.))
  (with-lock
    (lambda ()
      (%%near-player? distance))))


(definition public (hostile)
  (let ((event (%%current-event)))
    (tick-hostile (get-actor event)
      (get-time event)
      (get-elapse event))
    (unspecified)))


(definition public (idle)
  (let ((actor (current-actor)))
    (when actor
      (with-lock
        (lambda ()
          (%%idle actor)
          (unspecified))))))


(definition public (walk)
  (let ((actor (current-actor)))
    (when actor
      (with-lock
        (lambda ()
          (%%walk actor)
          (unspecified))))))


(definition public (run)
  (let ((actor (current-actor)))
    (when actor
      (with-lock
        (lambda ()
          (%%run actor)
          (unspecified))))))


(definition public (sprint)
  (let ((actor (current-actor)))
    (when actor
      (with-lock
        (lambda ()
          (%%sprint actor)
          (unspecified))))))


(definition public (full-life)
  (with-lock
    (lambda ()
      (%%full-life)
      (unspecified))))


@huboo
(definition public (animate animation (next: next #f))
  (with-lock
    (lambda ()
      (%%animate animation next: next)
      (unspecified))))


@huboo
(definition public (teleport position <vertex>)
  (with-lock
    (lambda ()
      (%%teleport position)
      (unspecified))))


(definition public (teleport-spawn)
  (with-lock
    (lambda ()
      (let ((zone (current-zone)))
        (%%teleport (find-spawnpoint zone))))))


(definition public (fire)
  (let ((actor (current-actor)))
    (with-lock
      (lambda ()
        (%%fire actor)
        (unspecified)))))


(definition public (fire-at creature)
  (let ((actor (current-actor)))
    (with-lock
      (lambda ()
        (%%fire-at actor creature)
        (unspecified)))))


(definition public (fire-random)
  (let ((actor (current-actor)))
    (with-lock
      (lambda ()
        (%%fire-random actor)
        (unspecified)))))


(definition public (nearest-spawned (target #f))
  (let ((actor (current-actor))
        (target (or target (player))))
    (with-lock
      (lambda ()
        (%%nearest-spawned actor target)))))


(definition public (trek)
  (let ((actor (current-actor)))
    (with-lock
      (lambda ()
        (%%trek actor)))))


(definition public (ride)
  (let ((world (current-world))
        (actor (current-actor)))
    (with-lock
      (lambda ()
        (%%ride actor (get-current (get-riders-folio world)))))))


(definition public (fly)
  (let ((world (current-world))
        (actor (current-actor)))
    (with-lock
      (lambda ()
        (%%fly actor (get-current (get-flyers-folio world)))))))


(definition public (wheels)
  (let ((actor (current-actor)))
    (with-lock
      (lambda ()
        (%%wheels actor)))))


(definition public (hummer)
  (let ((actor (current-actor)))
    (with-lock
      (lambda ()
        (%%hummer actor)))))


(definition public (saucer)
  (let ((actor (current-actor)))
    (with-lock
      (lambda ()
        (%%saucer actor)))))


(definition public (rocket)
  (let ((actor (current-actor)))
    (with-lock
      (lambda ()
        (%%rocket actor)))))


;;;
;;;; Emote
;;;


(definition public (emote emote <string>)
  (with-lock
    (lambda ()
      ;; quicky so a script can emote the current-me
      (let ((actor (or (current-actor) (current-me))))
        (when (find-animation (cache-model actor) emote)
          (set-animation-continuous actor emote))
        (unspecified)))))


(definition public (applaud)
  (emote "EmoteApplaud"))

(definition public (beg)
  (emote "EmoteBeg"))

(definition public (cheer)
  (emote "EmoteCheer"))

(definition public (cry)
  (emote "EmoteCry"))

(definition public (dance)
  (emote "EmoteDance"))

(definition public (kneel)
  (emote "EmoteKneel"))

(definition public (laugh)
  (emote "EmoteLaugh"))

(definition public (no)
  (emote "EmoteNo"))

(definition public (point)
  (emote "EmotePoint"))

(definition public (wave)
  (emote "EmoteWave"))

(definition public (yes)
  (emote "EmoteYes"))


(definition public (stand)
  (let ((actor (current-actor)))
    (set-animation-continuous actor #f)
    (unspecified)))


;;;
;;;; Sound
;;;


(definition public (sound path <string> . rest)
  (check-client sound
    (bind-keywords ((volume <fl+> #f)) rest
      (with-lock
        (lambda ()
          (%%sound path volume: volume)
          (unspecified))))))


(definition public (bark)
  (check-client bark
    (sound "world/random/dog_barking" volume: .25)))


(definition public (music path <string>)
  (check-client music
    (with-lock
      (lambda ()
        (%%music path)
        (unspecified)))))


@huboo
(definition public (close-music)
  (check-client close-music
    (with-lock
      (lambda ()
        (%%close-music)
        (unspecified)))))


;;;
;;;; Tick
;;;


(definition public (tick proc <procedure> . rest)
  (bind-keywords ((period default-tick-period)) rest
    (check-positive period 1 (tick period proc . rest)
      (%%tick period
        (lambda (actor script time elapse iter)
          (proc iter))))))


(definition public (register-script-handler entity <Entity> name handler <procedure>)
  (with-lock
    (lambda ()
      (%%register-script-handler entity name handler)
      (unspecified))))


;;;
;;;; Move
;;;


(definition public (stay)
  (%%stay)
  (unspecified))


@huboo
(definition public (move distance)
  (check-positive distance 1 (move distance)
    (let ((distance (cast <fl> distance)))
      (%%move distance)
      (unspecified))))


@huboo
(definition public (move-to target <vertex>)
  (%%move-to target)
  (unspecified))


@huboo
(definition public (rotate angle <fl>)
  (let ((angle (degree->radian angle)))
    (%%rotate angle)
    (unspecified)))


@huboo
(definition public (jump (impulsion <fl+> #f))
  (let ((actor (current-actor)))
    (%%jump actor impulsion)
    (unspecified)))


(definition public (jump-player (impulsion <fl+> #f))
  (let ((player (player)))
    (%%jump-player player impulsion)
    (unspecified)))


@huboo
(definition public (follow target <Actor>)
  (%%follow (current-actor) target))


@huboo
(definition public (follow-player)
  (%%follow (current-actor) (player)))


(definition public (leash (position: position #f) (length: length #f))
  (with-lock
    (lambda ()
      (%%leash position length))))


(definition public (unleash)
  (with-lock
    (lambda ()
      (%%unleash))))


(definition public (path (duration: duration #f))
  (%%path duration: duration))


(definition public (bot)
  (%%bot))


;;;
;;;; LookAt
;;;


@huboo
(definition public (horizon-lookat dir <vertex>)
  (%%horizon-lookat dir))


(definition public (lookat-player)
  (with-lock
    (lambda ()
      (%%lookat-player)
      (unspecified))))


(definition public (lookat-target target)
  (with-lock
    (lambda ()
      (%%lookat-target target)
      (unspecified))))


(definition public (direction dir)
  (with-lock
    (lambda ()
      (%%direction dir)
      (unspecified))))

(definition public (north)
  (direction 'north))

(definition public (south)
  (direction 'south))

(definition public (east)
  (direction 'east))

(definition public (west)
  (direction 'west))

(definition public (north-east)
  (direction 'north-east))

(definition public (north-west)
  (direction 'north-west))

(definition public (south-east)
  (direction 'south-east))

(definition public (south-west)
  (direction 'south-west))


;;;
;;;; Block
;;;


(definition public (location i <fx> j <fx> k <fx>)
  (indexed i j k))


@huboo
(definition public (add-block location <index> id <integer>)
  (with-lock
    (lambda ()
      (%%add-block location id)
      (unspecified))))


@huboo
(definition public (delete-block location <index>)
  (with-lock
    (lambda ()
      (%%delete-block location)
      (unspecified))))


(definition public (change-block location <index> id <integer>)
  (with-lock
    (lambda ()
      (%%change-block location id)
      (unspecified))))


(definition public (get-block location <index>)
  (with-lock
    (lambda ()
      (%%get-block location))))


(definition public (set-block location <index> id <integer>)
  (with-lock
    (lambda ()
      (%%set-block location id)
      (unspecified))))


(definition public (set-block-data location <index> data <integer>)
  (with-lock
    (lambda ()
      (%%set-block-data location data)
      (unspecified))))


(definition public (interact-block location <index>)
  (with-lock
    (lambda ()
      (%%interact-block location)
      (unspecified))))


;;;
;;;; Entity
;;;


@huboo
(definition public (add-entity . rest)
  (bind-keywords ((class #f) (name #f) (position #f) (lookat #f) (scale #f) (color #f) (model #f) (script #f)) rest
    (with-lock
      (lambda ()
        (let ((class (or class Creature))
              (position (position-arg position))
              (lookat (lookat-arg lookat))
              (scale (scale-arg scale))
              (color (or color (make-dye))))
          (%%add-entity class name position lookat scale color model script))))))


@huboo
(definition public (remove-entity entity <Entity>)
  (with-lock
    (lambda ()
      (%%remove-entity entity))))


(definition public (find-entity name <symbol>)
  (with-lock
    (lambda ()
      (%%find-entity name))))


;;;
;;;; Random
;;;


(definition public (random n <integer>)
  (%%random n))


(definition public (random-getter! lst)
  (let ((all lst)
        (remaining '()))
    (lambda ()
      (when (null? remaining)
        (set! remaining (copy all)))
      (if (null? remaining)
          #f
        (let ((elem (random-element remaining)))
          (set! remaining (remove! elem remaining))
          elem)))))


;;;
;;;; Trail
;;;


(definition public (trail (color #f))
  (with-lock
    (lambda ()
      (%%trail color)
      (unspecified))))


(definition public (untrail)
  (with-lock
    (lambda ()
      (%%untrail)
      (unspecified))))


(definition public (trail-color color)
  (with-lock
    (lambda ()
      (%%trail-color color)
      (unspecified))))


(definition public (clear-trail)
  (with-lock
    (lambda ()
      (%%clear-trail)
      (unspecified))))


(definition public (plot-axes (dx <fl> 0) (dz <fl> 0))
  (plot-line (vertex (+ -10. dx) 4. (+ 0. dz)) (vertex (+ 10. dx) 4. (+ 0. dz)) 'blue)
  (plot-line (vertex (+ 0. dx) 4. (+ -10. dz)) (vertex (+ 0. dx) 4. (+ 10. dz)) 'blue)
  @w (loop (for x <fl> from -10. to 10. by 1.)
        (plot-line (vertex (+ x dx) 4. (+ -.5 dz)) (vertex (+ x dx) 4. (+ .5 dz)) 'blue))
  @w (loop (for z <fl> from -10. to 10. by 1.)
        (plot-line (vertex (+ -.5 dx) 4. (+ z dz)) (vertex (+ .5 dx) 4. (+ z dz)) 'blue))
  (unspecified))


(definition public (plot-line from <vertex> to <vertex> (color 'red))
  (untrail)
  (move-to from)
  (trail color)
  (move-to to)
  (unspecified))


;;;
;;;; Belt
;;;


(definition public (belt-id rank)
  (%%belt-id rank))


(definition public (belt-count rank)
  (%%belt-count rank))


(definition public (belt-add rank id (count 1))
  (%%belt-add rank id count))


(definition public (belt-remove rank)
  (%%belt-remove rank))


(definition public (belt-empty)
  (%%belt-empty))


;;;
;;;; Media
;;;


(definition public (collect-images dir <string> (filter #f))
  (%%collect-images dir filter))


(definition public (background surface path <string> (mode: mode 'fit) (alpha: alpha #f) (resolution: resolution #f))
  (let ((resolution (or resolution {Dimension 1280 720})))
    (with ((image (new Image moniker: (%%retrieve path))))
      (fill-image surface
                  (new Rect 0 0 (get-width resolution) (get-height resolution))
                  image
                  mode: mode
                  alpha: alpha))))


(definition public (random-background surface path <string> (mode: mode 'fit) (alpha: alpha #f) (resolution: resolution #f))
  (let ((resolution (or resolution {Dimension 1280 720})))
    (with ((image (new Image moniker: (%%retrieve (random-element (directory-list path))))))
      (fill-image surface
                  (new Rect 0 0 (get-width resolution) (get-height resolution))
                  image
                  mode: mode
                  alpha: alpha))))


(definition public (slideshow directory <string> proc (filter: filter #f) (mode: mode 'fit) (alpha: alpha #f) (delay: delay #f) (name?: name? #f))
  (let ((instance (current-instance)))
    (let ((delay (or delay 60))
          (actual-directory (get instance 'slideshow-directory (unspecified)))
          (actual-filter (get instance 'slideshow-filter (unspecified)))
          (actual-delay (get instance 'slideshow-delay (unspecified))))
      (let ((update-directory? (or (unspecified? actual-directory) (not (filename=? directory actual-directory))))
            (update-filter? (or (unspecified? actual-filter) (not (equal? filter actual-filter))))
            (update-delay? (or (unspecified? actual-delay) (not (equal? delay actual-delay)))))
        (let ((slideshow-random!
                (or (and (not update-directory?) (not update-filter?) (not (get instance 'slideshow-force?)) (get instance 'slideshow-random!))
                    (let ((getter (random-getter! (collect-images directory filter))))
                      (set instance 'slideshow-random! getter)
                      (set instance 'slideshow-force? #f)
                      getter))))
          (set instance 'slideshow-directory directory)
          (set instance 'slideshow-filter filter)
          (set instance 'slideshow-delay delay)
          (let (iter (refresh? #f))
            (picture
              (lambda (surface resolution)
                (define (draw-random!)
                  (let ((current (get instance 'slideshow-image)))
                    (let ((image (if (or (and (run?) (not (get instance 'slideshow-stay?))) refresh? update-directory? update-filter? (not current)) (slideshow-random!) current)))
                      (when image
                        (background surface image
                          mode: (or (get instance 'slideshow-mode) mode)
                          alpha: alpha)
                        (set instance 'slideshow-image image)
                        (set instance 'slideshow-stay? #f)))))
                
                (draw-random!)
                (proc surface resolution)
                (when (get instance 'slideshow-name? name?)
                  (let ((current (get instance 'slideshow-image)))
                    (when current
                      (let ((name (filename-name current)))
                        (set-font surface {Font Heading2})
                        (let ((width (get-text-width surface name)))
                          (let ((h (center width (get-width resolution))))
                            (draw-text surface h 680 (filename-name current) {Color Red})))))))))
            (let ((now (current-seconds))
                  (to (get instance 'slideshow-to)))
              (if (or (not to) refresh? (run?) update-directory? update-delay?)
                  (let ((new-to (+ now delay)))
                    (set instance 'slideshow-to new-to)
                    (wait-to new-to))
                (wait-to to)))
            (iter #t)))))))


;;;
;;;; Test
;;;


(definition public (test)
  (%%test))


;;;
;;;; Validate
;;;


(definition public (validate-setup context)
  (let ((instance (current-instance)))
    (set instance 'validate-context context)
    (clear instance 'validate-failures)))


(definition public (validate-failed message)
  (let ((instance (current-instance)))
    (set instance 'validate-failures (cons message (get instance 'validate-failures '())))))


(definition public (validate-report)
  (let ((instance (current-instance)))
    (let ((context (get instance 'validate-context))
          (failures (get instance 'validate-failures)))
      (if failures
          (say `(<span>
                  (<paragraph>
                    (<text> color: World-Yellow "The following validations failed:"))
                  ""
                  ,@(reverse failures))
               size: 24)
        (name context))
      (clear instance 'validate-context)
      (clear instance 'validate-failures)))))
