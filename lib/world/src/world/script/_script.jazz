;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Scripts
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2016
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.script jazz.dialect


(export (world.script.syntax (phase syntax))
        (jazz (phase syntax) (only when unless))
        (jazz (phase syntax) (prefix %%))
        (jazz (only not-null? naturals)))

;; quicky for tests
(export (world.scripting
          (only perform-stay
                perform-move
                perform-move/jump
                perform-rotate-left
                perform-rotate-right
                perform-hover
                perform-jump)))

(import (jazz (except sleep))
        (jazz.event)
        (jazz.geometry)
        (jazz.graphic)
        (world)
        (world.actor)
        (world.audio)
        (world.autoload)
        (world.billboard)
        (world.commands)
        (world.contour)
        (world.creature)
        (world.draw)
        (world.dyes)
        (world.entity)
        (world.generation)
        (world.generation.block)
        (world.geometry)
        (world.index)
        (world.mark)
        (world.homogeneous)
        (world.model)
        (world.scripter)
        (world.scripting)
        (world.syntax (phase syntax))
        (world.task)
        (world.travel))


(declare (proper-tail-calls))


;;;
;;;; Category
;;;


(define-contour-category script      rank:  0)
(define-contour-category properties  rank:  1)
(define-contour-category handle      rank:  2)
(define-contour-category event       rank:  3)
(define-contour-category interface   rank:  4)
(define-contour-category zone        rank:  5)
(define-contour-category emote       rank:  6)
(define-contour-category move        rank:  7)
(define-contour-category lookat      rank:  10)
(define-contour-category actor       rank:  11)
(define-contour-category block       rank:  12)
(define-contour-category trail       rank:  13)
(define-contour-category plot        rank:  14)
(define-contour-category development rank:  15)
(define-contour-category language    rank:  16)


;;;
;;;; Contour
;;;


;; script
(define-contour me native
  category: 'script)

(define-contour (tick <period> <procedure>) native
  category: 'script)

@wait
(define-contour (current-player)
  category: 'script)

(define-contour (sleep <period>)
  category: 'script)


;; properties
@wait
(define-contour (get object property)
  category: 'properties)

@wait
(define-contour (set object property value)
  category: 'properties)


;; handle
(define-contour (handle <event> <body>) native
  category: 'handle)


;; event
(define-contour (interact)
  category: 'event)

(define-contour (double-click)
  category: 'event)

(define-contour (power)
  category: 'event)

(define-contour (unpower)
  category: 'event)

@wait
(define-contour (teleport)
  category: 'event)

@wait
(define-contour (explode)
  category: 'event)

(define-contour (hit)
  category: 'event)


;; interface
(define-contour (message <msg>)
  category: 'interface)

(define-contour (sound <path>)
  category: 'interface)

(define-contour bark
  category: 'interface)


;; zone
@wait
(define-contour (creatures)
  category: 'zone)


;; emote
(define-contour (emote <emote>)
  category: 'emote)

(define-contour applaud
  category: 'emote)

(define-contour beg
  category: 'emote)

(define-contour cheer
  category: 'emote)

(define-contour cry
  category: 'emote)

(define-contour dance
  category: 'emote)

(define-contour kneel
  category: 'emote)

(define-contour laugh
  category: 'emote)

(define-contour no
  category: 'emote)

(define-contour point
  category: 'emote)

(define-contour wave
  category: 'emote)

(define-contour yes
  category: 'emote)


;; move
(define-contour (walk)
  category: 'move)

(define-contour (run)
  category: 'move)

(define-contour (sprint)
  category: 'move)

(define-contour (stay)
  category: 'move)

(define-contour (move <distance>)
  category: 'move)

(define-contour (move-to <target>)
  category: 'move)

(define-contour (rotate <angle>)
  category: 'move)

(define-contour (jump)
  category: 'move)

@wait
(define-contour (path)
  category: 'move)


;; lookat
@wait
(define-contour lookat-horizon
  category: 'lookat)

@wait
(define-contour lookat-player
  category: 'lookat)

@wait
(define-contour lookat-target
  category: 'lookat)

@wait
(define-contour lookat-rotate
  category: 'lookat)


;; actor
@wait
(define-contour (near-player?)
  category: 'actor)

@wait
(define-contour (get-position <element>)
  category: 'actor)

@wait
(define-contour (set-sprint? <actor> <flag>)
  category: 'actor)

@wait
(define-contour (set-hover? <actor> <flag>)
  category: 'actor)

@wait
(define-contour (set-billboard <actor> <name>)
  category: 'actor)

(define-contour (full-life)
  category: 'actor)

(define-contour fire
  category: 'actor)

(define-contour fire-at
  category: 'actor)

(define-contour fire-random
  category: 'actor)

(define-contour nearest-spawned
  category: 'actor)

(define-contour (set-armor <armor>)
  category: 'actor)

(define-contour (set-power <power>)
  category: 'actor)


;; block
(define-contour (location <i> <j> <k>)
  category: 'block)

(define-contour (add-block <location> <block-id>)
  category: 'block)

(define-contour (delete-block <location>)
  category: 'block)

(define-contour (change-block <location> <block-id>)
  category: 'block)

@wait
(define-contour (get-block <location>)
  category: 'block)

@wait
(define-contour (set-block <location> <block-id>)
  category: 'block)

@wait
(define-contour (set-block-data <location> <data-id>)
  category: 'block)

(define-contour (interact-block <location>)
  category: 'block)


;; trail
(define-contour (trail)
  category: 'trail)

(define-contour (untrail)
  category: 'trail)

(define-contour (trail-color <color>)
  category: 'trail)

(define-contour (clear-trail)
  category: 'trail)


;; plot
(define-contour (plot-axes)
  category: 'plot)

(define-contour (plot-line <from> <to>)
  category: 'plot)


;; development
@wait
(define-contour debug
  category: 'development)


;; language
(define-contour define native
  category: 'language)

(define-contour (lambda <arguments> <body>) native
  category: 'language)

(define-contour when native
  category: 'language)

(define-contour unless native
  category: 'language)

(define-contour if native
  category: 'language)

(define-contour and native
  category: 'language)

(define-contour or native
  category: 'language)

(define-contour let native
  category: 'language)

(define-contour let* native
  category: 'language)

(define-contour letrec native
  category: 'language)

(define-contour apply native
  category: 'language)

(define-contour append native
  category: 'language)

(define-contour assoc native
  category: 'language)

(define-contour assq native
  category: 'language)

(define-contour assv native
  category: 'language)

(define-contour begin native
  category: 'language)

(define-contour car native
  category: 'language)

(define-contour cdr native
  category: 'language)

(define-contour case native
  category: 'language)

(define-contour cond native
  category: 'language)

(define-contour cons native
  category: 'language)

(define-contour eq? native
  category: 'language)

(define-contour equal? native
  category: 'language)

(define-contour eqv? native
  category: 'language)

(define-contour for-each native
  category: 'language)

(define-contour length native
  category: 'language)

(define-contour list native
  category: 'language)

(define-contour list-ref native
  category: 'language)

(define-contour map native
  category: 'language)

(define-contour member? native
  category: 'language)

(define-contour memq? native
  category: 'language)

(define-contour memv? native
  category: 'language)

(define-contour not native
  category: 'language)

(define-contour null? native
  category: 'language)

(define-contour pair? native
  category: 'language)

(define-contour reverse native
  category: 'language)

(define-contour set! native
  category: 'language)

(define-contour string native
  category: 'language)

(define-contour string-ref native
  category: 'language)

(define-contour values native
  category: 'language)

(define-contour vector native
  category: 'language)

(define-contour vector-ref native
  category: 'language)


;;;
;;;; World
;;;


(definition public (message msg)
  (with-lock
    (lambda ()
      (%%message msg)
      (unspecified))))


(definition public (say msg (size: size #f))
  (check-integer+ size size: (say msg size: size)
    (with-lock
      (lambda ()
        (%%say msg size: size)
        (unspecified)))))


(definition public (unsay)
  (with-lock
    (lambda ()
      (%%unsay)
      (unspecified))))


(definition public (name name)
  (with-lock
    (lambda ()
      (%%name (->string name))
      (unspecified))))


(definition public (unname)
  (with-lock
    (lambda ()
      (%%unname)
      (unspecified))))


;;;
;;;; Zone
;;;


(definition public (creatures)
  (with-lock
    (lambda ()
      (%%creatures))))


;;;
;;;; Script
;;;


(definition public (current-instance)
  (%%current-instance))


(definition public (current-player)
  (current-me))


(definition public (sleep period)
  (let ((period (if (integer? period) (cast <fl> period) period)))
    (let ((task (current-task))
          (exit (current-exit)))
      (when (and task exit)
        (task-sleep task period 0. exit)))))


;;;
;;;; Properties
;;;


(definition protected properties-mutex
  (make-mutex 'properties))


(definition protected *properties*
  (make-table test: eq? weak-keys: #t))


(definition protected (require-properties object)
  (or (table-ref *properties* object #f)
      (let ((properties (make-table test: eq?)))
        (table-set! *properties* object properties)
        properties)))


(definition public (get object property)
  (mutex-lock! properties-mutex)
  (prog1 (table-ref (require-properties object) property #f)
    (mutex-unlock! properties-mutex)))


(definition public (set object property value)
  (mutex-lock! properties-mutex)
  (table-set! (require-properties object) property value)
  (mutex-unlock! properties-mutex)
  (unspecified))


;;;
;;;; Event
;;;


(definition public (event-me)
  (get-me~ (%%current-event)))

(definition public (event-time)
  (get-time~ (%%current-event)))

(definition public (event-elapse)
  (get-elapse~ (%%current-event)))


;;;
;;;; Actor
;;;


(definition public (current-actor)
  (%%current-actor))


(definition public (near-player? (actor (current-actor)) (distance 5.))
  (check-actor actor 1 (near-player? actor distance)
    (check-real distance 2 (near-player? actor distance)
      (with-lock
        (lambda ()
          (%%near-player? actor distance))))))


(definition public (hostile)
  (let ((event (%%current-event)))
    (tick-hostile~ (get-actor~ event)
      (get-time~ event)
      (get-elapse~ event))
    (unspecified)))


(definition public (get-position element)
  (check-element element 1 (get-position element)
    (with-lock
      (lambda ()
        (%%get-position element)))))


(definition public (set-position element position)
  (check-element element 1 (set-position element position)
    (with-lock
      (lambda ()
        (%%set-position element position)
        (unspecified)))))


(definition public (set-lookat element direction/lookat)
  (check-element element 1 (set-lookat element direction/lookat)
    (let ((lookat (if (f64vector? direction/lookat)
                      (lookat-horizon direction/lookat)
                    direction/lookat)))
      (with-lock
        (lambda ()
          (%%set-lookat element lookat)
          (unspecified))))))


(definition public (set-speed element speed)
  (check-element element 1 (set-speed element speed)
    (with-lock
      (lambda ()
        (%%set-speed element speed)
        (unspecified)))))


(definition public (set-motion actor motion)
  (check-actor actor 1 (set-motion actor motion)
    (with-lock
      (lambda ()
        (%%set-motion actor motion)
        (unspecified)))))


(definition public (walk)
  (let ((actor (current-actor)))
    (let ((script (get-script~ actor)))
      (set-sprint? actor #f)
      (set-motion actor 'walk)
      (unspecified))))


(definition public (run)
  (let ((actor (current-actor)))
    (let ((script (get-script~ actor)))
      (set-sprint? actor #f)
      (set-motion actor 'run)
      (unspecified))))


(definition public (sprint)
  (let ((actor (current-actor)))
    (let ((script (get-script~ actor)))
      (set-sprint? actor #t)
      (set-motion actor 'run)
      (unspecified))))


(definition public (set-sprint? actor flag)
  (check-actor actor 1 (set-sprint? actor flag)
    (with-lock
      (lambda ()
        (%%set-sprint? actor flag)
        (unspecified)))))


(definition public (set-hover? actor flag)
  (check-actor actor 1 (set-hover? actor flag)
    (with-lock
      (lambda ()
        (%%set-hover? actor flag)
        (unspecified)))))


(definition public (set-billboard actor name)
  (check-actor actor 1 (set-billboard actor name)
    (with-lock
      (lambda ()
        (%%set-billboard actor name)
        (unspecified)))))


(definition public (full-life)
  (with-lock
    (lambda ()
      (%%full-life)
      (unspecified))))


(definition public (animate actor animation (next: next #f))
  (with-lock
    (lambda ()
      (%%animate actor animation next: next)
      (unspecified))))


(definition public (teleport position)
  (with-lock
    (lambda ()
      (%%teleport position)
      (unspecified))))


(definition public (zone-in zone)
  (delay-event
    (lambda ()
      (change-zone~ (current-tier) zone)))
  (unspecified))


(definition public (zone-out)
  (delay-event
    (lambda ()
      (change-zone~ (current-tier) 'start)))
  (unspecified))


(definition public (fire (actor #f))
  (let ((actor (or actor (current-actor))))
    (with-lock
      (lambda ()
        (%%fire actor)
        (unspecified)))))


(definition public (fire-at creature)
  (let ((actor (current-actor)))
    (with-lock
      (lambda ()
        (%%fire-at actor creature)
        (unspecified)))))


(definition public (fire-random)
  (let ((actor (current-actor)))
    (with-lock
      (lambda ()
        (%%fire-random actor)
        (unspecified)))))


(definition public (nearest-spawned (actor #f) (target #f))
  (let ((actor (or actor (current-actor)))
        (target (or target (current-player))))
    (with-lock
      (lambda ()
        (%%nearest-spawned actor target)))))


(definition public (set-armor armor)
  (check-real armor 1 (armor armor)
    (setup-armor~ (current-actor) armor)
    (unspecified)))


(definition public (set-power power)
  (check-real power 1 (power power)
    (setup-power~ (current-actor) power)
    (unspecified)))


;;;
;;;; Emote
;;;


(definition public applaud
  "EmoteApplaud")

(definition public beg
  "EmoteBeg")

(definition public cheer
  "EmoteCheer")

(definition public cry
  "EmoteCry")

(definition public dance
  "EmoteDance")

(definition public kneel
  "EmoteKneel")

(definition public laugh
  "EmoteLaugh")

(definition public no
  "EmoteNo")

(definition public point
  "EmotePoint")

(definition public wave
  "EmoteWave")

(definition public yes
  "EmoteYes")


(definition public (emote emote)
  (let ((actor (current-player)))
    (when (find-animation~ (cache-model~ actor) emote)
      (set-animation-continuous~ actor emote)))
  (unspecified))


;;;
;;;; Model
;;;


(definition public (get-model entity)
  (check-entity entity 1 (get-model entity)
    (with-lock
      (lambda ()
        (%%get-model entity)))))


(definition public (set-run-speed model speed)
  (check-model model 1 (set-run-speed model speed)
    (with-lock
      (lambda ()
        (%%set-run-speed model speed)
        (unspecified)))))


;;;
;;;; Sound
;;;


(definition public bark
  "sound/random/dog_barking")


(definition public (sound path . rest)
  (bind-keywords ((volume #f)) rest
    (check-string path 1 (sound path) rest
      (check-real+ volume volume: (sound path) rest
        (with-lock
          (lambda ()
            (%%sound path volume: volume)
            (unspecified)))))))


;;;
;;;; Tick
;;;


(definition public (tick proc . rest)
  (bind-keywords ((period default-tick-period)) rest
    (check-positive period 1 (tick period proc) rest
      (check-procedure proc 2 (tick period proc) rest
        (%%tick period
          (lambda (actor script time elapse iter)
            (proc iter)))))))


(definition public (set-tick-handler actor handler)
  (with-lock
    (lambda ()
      (%%set-tick-handler actor handler)
      (unspecified))))

(definition public (set-interact-handler actor handler)
  (with-lock
    (lambda ()
      (%%set-interact-handler actor handler)
      (unspecified))))

(definition public (set-double-click-handler actor handler)
  (with-lock
    (lambda ()
      (%%set-double-click-handler actor handler)
      (unspecified))))

(definition public (set-power-handler actor handler)
  (with-lock
    (lambda ()
      (%%set-power-handler actor handler)
      (unspecified))))

(definition public (set-unpower-handler actor handler)
  (with-lock
    (lambda ()
      (%%set-unpower-handler actor handler)
      (unspecified))))

(definition public (set-teleport-handler actor handler)
  (with-lock
    (lambda ()
      (%%set-teleport-handler actor handler)
      (unspecified))))

(definition public (set-explode-handler actor handler)
  (with-lock
    (lambda ()
      (%%set-explode-handler actor handler)
      (unspecified))))

(definition public (set-hit-handler actor handler)
  (with-lock
    (lambda ()
      (%%set-hit-handler actor handler)
      (unspecified))))


;;;
;;;; Pause
;;;


(definition public (paused?)
  (%%paused?))


(definition public (pause)
  (%%pause)
  (unspecified))


(definition public (unpause)
  (%%unpause)
  (unspecified))


(definition public (toggle-paused)
  (%%toggle-paused)
  (unspecified))


;;;
;;;; Move
;;;


(definition public (stay)
  (%%stay)
  (unspecified))


(definition public (move distance)
  (check-positive distance 1 (move distance) '()
    (let ((distance (cast <fl> distance)))
      (%%move distance)
      (unspecified))))


(definition public (move-to . rest)
  (let ((target (if (and (= (length rest) 1)
                         (f64vector? (car rest)))
                    (car rest)
                  (bind (x y z) rest
                    (vertex (cast <fl> x) (cast <fl> y) (cast <fl> z))))))
    (%%move-to target)
    (unspecified)))


(definition public (rotate angle)
  (let ((angle (degree->radian (cast <fl> angle))))
    (%%rotate angle)
    (unspecified)))


(definition public (jump (actor (current-actor)) (impulsion #f))
  (check-actor actor 1 (jump actor impulsion)
    (with-lock
      (lambda ()
        (%%jump actor impulsion)
        (unspecified)))))


(definition public (path (actor (current-actor)))
  (check-actor actor 1 (path actor)
    (%%path actor)))


(definition public (bot (actor (current-actor)))
  (check-actor actor 1 (path actor)
    (%%bot actor)))


;;;
;;;; LookAt
;;;


(definition public (lookat-horizon dir)
  (%%lookat-horizon dir)
  (unspecified))


(definition public (lookat-player (actor #f))
  (let ((actor (or actor (current-actor))))
    (with-lock
      (lambda ()
        (%%lookat-player actor)
        (unspecified)))))


(definition public (lookat-target target (actor #f))
  (let ((actor (or actor (current-actor))))
    (with-lock
      (lambda ()
        (%%lookat-target target actor)
        (unspecified)))))


(definition public (lookat-rotate element angle)
  (with-lock
    (lambda ()
      (%%lookat-rotate element angle)
      (unspecified))))


;;;
;;;; Block
;;;


(definition public (block i j k)
  (indexed i j k))


(definition public (add-block location id)
  (check-location location 1 (add-block location id) '()
    (check-integer id 2 (add-block location id)
      (with-lock
        (lambda ()
          (%%add-block location id)
          (unspecified))))))


(definition public (delete-block location)
  (check-location location 1 (delete-block location) '()
    (with-lock
      (lambda ()
        (%%delete-block location)
        (unspecified)))))


(definition public (change-block location id)
  (check-location location 1 (change-block location id) '()
    (check-integer id 2 (change-block location id)
      (with-lock
        (lambda ()
          (%%change-block location id)
          (unspecified))))))


(definition public (get-block location)
  (check-location location 1 (get-block location) '()
    (with-lock
      (lambda ()
        (%%get-block location)))))


(definition public (set-block location id)
  (check-location location 1 (set-block location id) '()
    (check-integer id 2 (set-block location id)
      (with-lock
        (lambda ()
          (%%set-block location id)
          (unspecified))))))


(definition public (set-block-data location data)
  (check-location location 1 (set-block-data location data) '()
    (check-integer data 2 (set-block-data location data)
      (with-lock
        (lambda ()
          (%%set-block-data location data)
          (unspecified))))))


(definition public (interact-block location)
  (check-location location 1 (interact-block location) '()
    (with-lock
      (lambda ()
        (%%interact-block location)
        (unspecified)))))


;;;
;;;; Entity
;;;


(definition public (add-entity class id pos lookat model (script #f))
  (with-lock
    (lambda ()
      (%%add-entity class id pos lookat model script)
      (unspecified))))


;;;
;;;; Trail
;;;


(definition public (trail (color #f))
  (with-lock
    (lambda ()
      (%%trail color)
      (unspecified))))


(definition public (untrail)
  (with-lock
    (lambda ()
      (%%untrail)
      (unspecified))))


(definition public (trail-color color)
  (with-lock
    (lambda ()
      (%%trail-color color)
      (unspecified))))


(definition public (clear-trail)
  (with-lock
    (lambda ()
      (%%clear-trail)
      (unspecified))))


;;;
;;;; Plot
;;;


(definition public (plot-axes (dx 0) (dz 0))
  (let ((dx (cast <fl> dx))
        (dz (cast <fl> dz)))
    (plot-line (vertex (+ -10. dx) 4. (+ 0. dz)) (vertex (+ 10. dx) 4. (+ 0. dz)) 'blue)
    (plot-line (vertex (+ 0. dx) 4. (+ -10. dz)) (vertex (+ 0. dx) 4. (+ 10. dz)) 'blue)
    (loop (for x <fl> from -10. to 10. by 1.)
          (plot-line (vertex (+ x dx) 4. (+ -.5 dz)) (vertex (+ x dx) 4. (+ .5 dz)) 'blue))
    (loop (for z <fl> from -10. to 10. by 1.)
          (plot-line (vertex (+ -.5 dx) 4. (+ z dz)) (vertex (+ .5 dx) 4. (+ z dz)) 'blue)))
  (unspecified))


(definition public (plot-line from to (color 'red))
  (untrail)
  (move-to from)
  (trail color)
  (move-to to)
  (unspecified)))
