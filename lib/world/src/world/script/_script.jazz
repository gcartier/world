;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Scripts
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2016
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.script jazz


(export (jazz.optimize (phase syntax)) ;; for
        (world)
        (world.audio)
        (world.autoload)
        (world.commands)
        (world.draw)
        (world.dyes)
        (world.generation.building)
        (world.geometry)
        (world.mark)
        (world.scripting)
        (world.script.syntax (phase syntax))
        (world.syntax (phase syntax))
        (world.travel))

(import (jazz.event)
        (jazz.geometry)
        (jazz.graphic)
        (world)
        (world.actor)
        (world.audio)
        (world.autoload)
        (world.billboard)
        (world.commands)
        (world.contour)
        (world.creature)
        (world.draw)
        (world.dyes)
        (world.entity)
        (world.generation)
        (world.generation.block)
        (world.geometry)
        (world.mark)
        (world.homogeneous)
        (world.model)
        (world.scripter)
        (world.scripting)
        (world.syntax (phase syntax))
        (world.task)
        (world.travel))


;;;
;;;; Contour
;;;


(define-contour handle)
(define-contour tick)
(define-contour interact)
(define-contour move)
(define-contour move-to)
(define-contour rotate)
(define-contour looping)
(define-contour lambda)
(define-contour stop)
(define-contour trail)
(define-contour run)
(define-contour sprint)


;;;
;;;; World
;;;


(definition public (message msg)
  (let ((world (current-world)))
    (display-message~ world (->string msg))))


;;;
;;;; Sound
;;;


(definition public bark
  "sound/random/dog_barking")


(definition public (sound path (volume: volume #f))
  (when sounds?
    (let ((sound (cache-stream-sound path)))
      (unless (playing?~ sound)
        (when volume
          (set-volume~ sound volume))
        (play~ sound)))))


;;;
;;;; Script
;;;


(definition public (script-sleep period)
  (let ((task (current-task))
        (exit (current-exit)))
    (task-sleep task period 0. exit)))


;;;
;;;; Event
;;;


(definition public (event-me)
  (get-actor~ (current-event)))

(definition public (event-time)
  (get-time~ (current-event)))

(definition public (event-elapse)
  (get-elapse~ (current-event)))


;;;
;;;; Actor
;;;


(definition public (current-actor)
  (%%current-actor))


(definition public (near-player? (actor #f) (distance #f))
  (let ((actor (or actor (current-actor)))
        (distance (or distance 5.)))
    (%%near-player? actor distance)))


(definition public (hostile)
  (let ((event (current-event)))
    (tick-hostile~ (get-actor~ event)
      (get-time~ event)
      (get-elapse~ event))))


(definition public (get-position element)
  (assert (is? element Element))
  (%%get-position element))


(definition public (set-position element position)
  (assert (is? element Element))
  (%%set-position element position))


(definition public (set-lookat element direction/lookat)
  (assert (is? element Element))
  (let ((lookat (if (f64vector? direction/lookat)
                    (lookat-horizon direction/lookat)
                  direction/lookat)))
    (%%set-lookat element lookat)))


(definition public (set-speed element speed)
  (assert (is? element Element))
  (%%set-speed element speed))


(definition public (set-motion actor motion)
  (assert (is? actor Actor))
  (%%set-motion actor motion))


(definition public (walk)
  (let ((actor (current-actor)))
    (let ((script (get-script~ actor)))
      (set-sprint?~ actor #f)
      (set-motion actor 'walk))))

(definition public (run)
  (let ((actor (current-actor)))
    (let ((script (get-script~ actor)))
      (set-sprint?~ actor #f)
      (set-motion actor 'run))))


(definition public (sprint)
  (let ((actor (current-actor)))
    (let ((script (get-script~ actor)))
      (set-sprint?~ actor #t)
      (set-motion actor 'run))))


(definition public (set-hover? actor flag)
  (assert (is? actor Actor))
  (set-hover?~ actor flag))


(definition public (set-tick-handler actor handler)
  (set-tick~ (get/create-script actor) handler))

(definition public (set-interact-handler actor handler)
  (set-interact~ (get/create-script actor) handler))

(definition public (set-double-click-handler actor handler)
  (set-double-click~ (get/create-script actor) handler))

(definition public (set-hit-handler actor handler)
  (set-hit~ (get/create-script actor) handler))


(definition public (set-billboard actor name)
  (set-billboard-name~ actor name))


(definition public (teleport position)
  (let ((zone (current-zone)))
    (teleport~ zone position)))


(definition public (jump (impulsion #f))
  (let ((me (current-me)))
    (set-jump?~ me #t)
    (set-jump-impulsion~ me impulsion)))


(definition public (zone-in zone)
  (delay-event
    (lambda ()
      (change-zone~ (current-tier) zone))))


(definition public (zone-out)
  (delay-event
    (lambda ()
      (change-zone~ (current-tier) 'start))))


;;;
;;;; Model
;;;


(definition public (get-model entity)
  (assert (is? entity Entity))
  (cache-model~ entity))


(definition public (set-run-speed model speed)
  (assert (is? model Model))
  (set-run-speed~ model speed))


;;;
;;;; Life
;;;


(definition public (full-life)
  (set-life~ (current-actor) 100.))


;;;
;;;; Pause
;;;


(definition public (paused?)
  (%%paused?))


(definition public (pause)
  (%%pause))


(definition public (unpause)
  (%%unpause))


(definition public (toggle-paused)
  (%%toggle-paused))


;;;
;;;; Tick
;;;


(definition public (looping proc)
  (declare (proper-tail-calls))
  (with-tick
    (lambda (actor script time elapse iter)
      (let ((stop? #f))
        (define (stop)
          (set! stop? #t))
        
        (proc stop)
        (unless stop?
          (iter))))))


;;;
;;;; LookAt
;;;


(definition public (lookat-horizon dir)
  (%%lookat-horizon dir))


(definition public (lookat-player (actor #f))
  (let ((actor (or actor (current-actor))))
    (%%lookat-player actor)))


(definition public (lookat-target target (actor #f))
  (let ((actor (or actor (current-actor))))
    (%%lookat-target target actor)))


(definition public (lookat-rotate element angle)
  (%%lookat-rotate element angle))


;;;
;;;; Move
;;;


(definition public (stay)
  (%%stay))


(definition public (move distance)
  (let ((distance (cast <fl> distance)))
    (%%move distance)))


(definition public (move-to . rest)
  (let ((target (if (= (length rest) 1)
                    (car rest)
                  (bind (x y z) rest
                    (vertex (cast <fl> x) (cast <fl> y) (cast <fl> z))))))
    (%%move-to target)))


(definition public (rotate angle)
  (let ((angle (degree->radian (cast <fl> angle))))
    (%%rotate angle)))


;;;
;;;; Block
;;;


(definition public (add-block position block-id)
  (%%add-block position block-id))


(definition public (delete-block position)
  (%%delete-block position))


(definition public (change-block position block-id)
  (%%change-block position block-id))


;;;
;;;; Trail
;;;


(definition public (trail (color #f))
  (%%trail color))


(definition public (untrail)
  (%%untrail))


(definition public (trail-color color)
  (%%trail-color color))


(definition public (clear-trail)
  (%%clear-trail))


(definition public (plot-axes (dx 0) (dz 0))
  (%%plot-axes dx dz))


(definition public (plot-line from to (color 'red))
  (%%plot-line from to color))


;;;
;;;; Various
;;;


(definition public (animate actor animation (next: next #f))
  (assert (find-animation~ (cache-model~ actor) animation))
  (transition-morphing~ actor animation next: (or next "Idle"))
  (set-animation-active~ actor animation))


(definition public (creatures)
  (let ((zone (current-zone)))
    (get-creatures~ zone)))


(definition public (block-interact a b c)
  (let ((game (current-game)))
    (interact-at~ game (location->position (vector a b c)))))


(definition public (set-block-data a b c data)
  (let ((game (current-game))
        (zone (current-zone)))
    (updating-sections~ zone
      (lambda (add-section)
        (call-with-position~ zone (location->position (vector a b c))
          (lambda (section block-id data-id i j k x y z with-field block-ref block-set! data-ref data-set! blocklight-ref blocklight-set! skylight-ref skylight-set!)
            (with-field i j k
              (lambda (section index)
                (data-set! section index data)
                (add-section section))))))))))
