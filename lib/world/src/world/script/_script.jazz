;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Scripts
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.script jazz:


(require (world.types))

(export (world.script.syntax (phase syntax))
        (jazz (phase syntax) (only when unless))
        (jazz (only debug terminal new Object Object-Class Rect get-width get-height not-null? naturals format remove random-element random-sequence continuation-capture continuation-return continuation-graft unspecified))
        (jazz.geometry)
        (jazz.graphic (only Color Image construct-color fill-image fill-rect))
        (jazz.io (only File Directory get-parent get-name get-base get-extension))
        (jazz.view (only View))
        (world.geometry)
        (world.video (only make-view make-event-view)))

;; quicky for tests
(export (world.scriptum
          (only perform-stay
                perform-move
                perform-move/jump
                perform-rotate-left
                perform-rotate-right
                perform-hover
                perform-jump
                run?)))

(export (world.generation.building
          (only Stone
                Grass
                Dirt
                Cobblestone
                WoodenPlank
                Sapling
                Bedrock
                Water
                StationaryWater
                Lava
                StationaryLava
                SandBlock
                Gravel
                GoldOre
                IronOre
                CoalOre
                Wood
                Leaves
                Sponge
                Glass
                LapisOre
                LapisBlock
                Dispenser
                Sandstone
                NoteBlock
                BedBlock
                PoweredRail
                DetectorRail
                StickyPiston
                Web
                TallGrass
                DeadBush
                Piston
                PistonHead
                Wool
                Dandelion
                Rose
                BrownMushroom
                RedMushroom
                GoldBlock
                IronBlock
                DoubleStoneSlabs
                StoneSlabs
                Brick
                TNT
                Bookshelf
                MossyCobblestone
                Obsidian
                Torch
                Fire
                MonsterSpawner
                WoodenStairs
                Chest
                RedstoneWire
                DiamondOre
                DiamondBlock
                WorkbenchBlock
                WheatCrops
                Soil
                Furnace
                BurningFurnace
                SignPost
                WoodenDoorBlock
                Ladder
                Rail
                CobblestoneStairs
                WallSign
                Lever
                StonePressurePlate
                IronDoorBlock
                WoodenPressurePlate
                RedstoneOre
                GlowingRedstoneOre
                RedstoneTorchOff
                RedstoneTorchOn
                StoneButton
                Snow
                Ice
                SnowBlock
                Cactus
                Clay
                SugarCane
                Jukebox
                Fence
                Pumpkin
                Netherrack
                SoulSand
                Glowstone
                Portal
                JackOLantern
                CakeBlock
                RedstoneRepeaterBlockOff
                RedstoneRepeaterBlockOn
                LockedChest
                Trapdoor
                MonsterEgg
                StoneBricks
                BrownMushroomCap
                RedMushroomCap
                IronBars
                GlassPane
                MelonBlock
                PumpkinStem
                MelonStem
                Vines
                FenceGate
                BrickStairs
                StoneBrickStairs
                Mycelium
                LilyPad
                NetherBrick
                NetherBrickFence
                NetherBrickStairs
                NetherWart
                EnchantmentTable
                BrewingStand
                Cauldron
                EndPortal
                EndPortalFrame
                EndStone
                DragonEgg
                RedstoneLampOff
                RedstoneLampOn
                DoubleWoodenSlab
                WoodenSlab
                CocoaPlant
                EmeraldOre
                EnderChest
                TripwireHook
                Tripwire
                EmeraldBlock
                SpruceWoodStairs
                BirchWoodStairs
                JungleWoodStairs
                CommandBlock
                BeaconBlock
                CobblestoneWall
                FlowerPot
                Carrots
                Potatoes
                WoodenButton
                QuartzOre
                QuartzBlock
                QuartzStairs
                StainedClay
                Leaves2
                Wood2
                HardenedClay
                DoublePlant)))

(export (world.generation.decoration
          (only SandstoneStairs)))

(export (world.interface.inventory
          (only IronShovelItem
                IronPickaxeItem
                IronAxeItem
                FlintAndSteelItem
                AppleItem
                BowStandbyItem
                ArrowItem
                CoalItem
                DiamondItem
                IronIngotItem
                GoldIngotItem
                IronSwordItem
                WoodSwordItem
                WoodShovelItem
                WoodPickaxeItem
                StoneSwordItem
                StoneShovelItem
                StonePickaxeItem
                StoneAxeItem
                DiamondSwordItem
                DiamondPickaxeItem
                StickItem
                BowlItem
                MushroomStewItem
                GoldSwordItem
                GoldShovelItem
                GoldAxeItem
                StringItem
                FeatherItem
                GunpowderItem
                IronHoeItem
                GoldHoeItem
                SeedsWheatItem
                WheatItem
                BreadItem
                LeatherHelmetItem
                LeatherChestplateItem
                LeatherLeggingsItem
                LeatherBootsItem
                ChainmailHelmetItem
                ChainmailChestplateItem
                ChainmailLeggingsItem
                ChainmailBootsItem
                IronHelmetItem
                IronChestplateItem
                IronLeggingsItem
                IronBootsItem
                DiamondHelmetItem
                DiamondChestplateItem
                DiamondLeggingsItem
                DiamondBootsItem
                GoldHelmetItem
                GoldChestplateItem
                GoldLeggingsItem
                GoldBootsItem
                FlintItem
                PorkchopRawItem
                PorkchopCookedItem
                PaintingItem
                AppleGoldenItem
                SignItem
                BucketEmptyItem
                BucketWaterItem
                BucketLavaItem
                MinecartNormalItem
                SaddleItem
                RedstoneDustItem
                LeatherItem
                BucketMilkItem
                BrickItem
                ClayBallItem
                ReedsItem
                PaperItem
                BookNormalItem
                SlimeballItem
                CompassItem
                ClockItem
                GlowstoneDustItem
                FishRawItem
                FishCookedItem
                DyePowderBlackItem
                BoneItem
                SugarItem
                BedItem
                RepeaterItem
                ShearsItem
                SeedsMelonItem
                BeefCookedItem
                ChickenRawItem
                RottenFleshItem
                EnderPearlItem
                GoldNuggetItem
                PotionBottleDrinkableItem
                PotionBottleEmptyItem
                SpiderEyeItem
                BlazePowderItem
                CauldronItem
                NetherStarItem
                NetherBrickItem
                Record13Item
                RecordCatItem
                RecordBlocksItem
                RecordChirpItem
                RecordFarItem
                RecordMallItem
                RecordMellohiItem
                RecordStalItem
                RecordStradItem
                RecordWardItem
                Record11Item)))

(import (world.script.import
          (except clear
                  draw
                  get-position
                  set-position
                  set-lookat
                  set-speed
                  set-motion
                  set-sprint?
                  set-hover?
                  animate
                  teleport
                  set-power
                  get-model
                  set-run-speed
                  close-music
                  tick
                  pause
                  unpause
                  move
                  move-to
                  rotate
                  jump
                  follow-player
                  location
                  add-block
                  delete-block
                  add-entity
                  remove-entity
                  random
                  show)))


(declare (proper-tail-calls))


;;;
;;;; Category
;;;


(define-contour-category script      rank:  0)
(define-contour-category properties  rank:  1)
(define-contour-category handle      rank:  2)
(define-contour-category event       rank:  3)
(define-contour-category interface   rank:  4)
(define-contour-category zone        rank:  5)
(define-contour-category emote       rank:  6)
(define-contour-category move        rank:  7)
(define-contour-category vertex      rank:  8)
(define-contour-category lookat      rank:  9)
(define-contour-category actor       rank:  10)
(define-contour-category block       rank:  11)
(define-contour-category blocks      rank:  12)
(define-contour-category entity      rank:  13)
(define-contour-category random      rank:  14)
(define-contour-category trail       rank:  15)
(define-contour-category plot        rank:  16)
(define-contour-category belt        rank:  17)
(define-contour-category development rank:  30)
(define-contour-category language    rank:  40)


;;;
;;;; Contour
;;;


;; script
(define-contour me
  category: 'script)

(define-name-contour tick
"(tick
   (lambda (iter)
     <body>))"
  category: 'script)

(define-contour (wait <period>)
  category: 'script)

(define-contour (send <entity> <msg>)
  category: 'script)

(define-contour (accept)
  category: 'script)


;; properties
(define-contour (get <object> <property>)
  category: 'properties)

(define-contour (need <object> <property>)
  category: 'properties)

(define-contour (wait-for <object> <property> <value>)
  category: 'properties)

(define-contour (set <object> <property> <value>)
  category: 'properties)

(define-contour (clear <object> <property>)
  category: 'properties)


;; event
(define-name-contour interact
"(handle (interact)
   <body>)
"
  category: 'event)

(define-name-contour double-click
"(handle (double-click)
   <body>)
"
  category: 'event)

(define-name-contour power
"(handle (power)
   <body>)
"
  category: 'event)

(define-name-contour unpower
"(handle (unpower)
   <body>)
"
  category: 'event)

@wait
(define-name-contour teleport
"(handle (teleport)
   <body>)
"
  category: 'event)

@wait
(define-name-contour explode
"(handle (explode)
   <body>)
"
  category: 'event)

(define-name-contour hit
"(handle (hit)
   <body>)
"
  category: 'event)


;; interface
(define-contour (message <msg>)
  category: 'interface)

(define-contour (sound <path>)
  category: 'interface)

(define-contour (bark)
  category: 'interface)

(define-contour ask-string
  category: 'interface)

(define-contour (daytime)
  category: 'interface)

(define-contour (daytime-set! <daytime>)
  category: 'interface)


;; zone
(define-contour (player)
  category: 'script)

(define-contour (creatures)
  category: 'zone)

(define-contour (spawnpoint)
  category: 'zone)

(define-contour (spawnpoint-set! <position>)
  category: 'zone)

(define-contour (teleport-spawn)
  category: 'zone)


;; emote
(define-contour (emote <emote>)
  category: 'emote)

(define-contour (applaud)
  category: 'emote)

(define-contour (beg)
  category: 'emote)

(define-contour (cheer)
  category: 'emote)

(define-contour (cry)
  category: 'emote)

(define-contour (dance)
  category: 'emote)

(define-contour (kneel)
  category: 'emote)

(define-contour (laugh)
  category: 'emote)

(define-contour (no)
  category: 'emote)

(define-contour (point)
  category: 'emote)

(define-contour (wave)
  category: 'emote)

(define-contour (yes)
  category: 'emote)


;; move
(define-contour (walk)
  category: 'move)

(define-contour (run)
  category: 'move)

@wait
(define-contour (sprint)
  category: 'move)

(define-contour (stay)
  category: 'move)

(define-contour (move <distance>)
  category: 'move)

@wait
(define-contour (move-to <target>)
  category: 'move)

(define-contour (rotate <angle>)
  category: 'move)

(define-contour (jump)
  category: 'move)

(define-contour (jump-player)
  category: 'move)

(define-contour (follow <target>)
  category: 'move)

(define-contour (follow-player)
  category: 'move)

(define-contour (path)
  category: 'move)


;; vertex
(define-contour (vertex <x> <y> <z>)
  category: 'vertex)

(define-contour (vertex+ <v1> <v2>)
  category: 'vertex)

(define-contour (vertex- <v1> <v2>)
  category: 'vertex)


;; lookat
@wait
(define-contour (lookat-horizon <dir>)
  category: 'lookat)

@wait
(define-contour (lookat-player)
  category: 'lookat)

@wait
(define-contour (lookat-target <target>)
  category: 'lookat)

@wait
(define-contour (lookat-rotate <element> <angle>)
  category: 'lookat)


;; actor
@wait
(define-contour (near-player?)
  category: 'actor)

@wait
(define-contour (get-position <element>)
  category: 'actor)

@wait
(define-contour (set-sprint? <actor> <flag>)
  category: 'actor)

@wait
(define-contour (set-hover? <actor> <flag>)
  category: 'actor)

@wait
(define-contour (set-billboard <actor> <name>)
  category: 'actor)

(define-contour (full-life)
  category: 'actor)

(define-contour (fire)
  category: 'actor)

(define-contour (fire-at <creature>)
  category: 'actor)

(define-contour (fire-random)
  category: 'actor)

(define-contour (nearest-spawned)
  category: 'actor)

(define-contour (set-armor <armor>)
  category: 'actor)

(define-contour (set-power <power>)
  category: 'actor)


;; block
(define-contour (location <i> <j> <k>)
  category: 'block)

(define-contour (add-block <location> <block-id>)
  category: 'block)

(define-contour (delete-block <location>)
  category: 'block)

(define-contour (change-block <location> <block-id>)
  category: 'block)

@wait
(define-contour (get-block <location>)
  category: 'block)

@wait
(define-contour (set-block <location> <block-id>)
  category: 'block)

@wait
(define-contour (set-block-data <location> <data-id>)
  category: 'block)

(define-contour (interact-block <location>)
  category: 'block)


;; blocks
(define-contour Dirt category: 'blocks)
(define-contour Stone category: 'blocks)
(define-contour Grass category: 'blocks)
(define-contour Dirt category: 'blocks)
(define-contour Cobblestone category: 'blocks)
(define-contour WoodenPlank category: 'blocks)
(define-contour Sapling category: 'blocks)
(define-contour Bedrock category: 'blocks)
(define-contour Water category: 'blocks)
(define-contour StationaryWater category: 'blocks)
(define-contour Lava category: 'blocks)
(define-contour StationaryLava category: 'blocks)
(define-contour SandBlock category: 'blocks)
(define-contour Gravel category: 'blocks)
(define-contour GoldOre category: 'blocks)
(define-contour IronOre category: 'blocks)
(define-contour CoalOre category: 'blocks)
(define-contour Wood category: 'blocks)
(define-contour Leaves category: 'blocks)
(define-contour Sponge category: 'blocks)
(define-contour Glass category: 'blocks)
(define-contour LapisOre category: 'blocks)
(define-contour LapisBlock category: 'blocks)
(define-contour Dispenser category: 'blocks)
(define-contour Sandstone category: 'blocks)
(define-contour NoteBlock category: 'blocks)
(define-contour BedBlock category: 'blocks)
(define-contour PoweredRail category: 'blocks)
(define-contour DetectorRail category: 'blocks)
(define-contour StickyPiston category: 'blocks)
(define-contour Web category: 'blocks)
(define-contour TallGrass category: 'blocks)
(define-contour DeadBush category: 'blocks)
(define-contour Piston category: 'blocks)
(define-contour PistonHead category: 'blocks)
(define-contour Wool category: 'blocks)
(define-contour Dandelion category: 'blocks)
(define-contour Rose category: 'blocks)
(define-contour BrownMushroom category: 'blocks)
(define-contour RedMushroom category: 'blocks)
(define-contour GoldBlock category: 'blocks)
(define-contour IronBlock category: 'blocks)
(define-contour DoubleStoneSlabs category: 'blocks)
(define-contour StoneSlabs category: 'blocks)
(define-contour Brick category: 'blocks)
(define-contour TNT category: 'blocks)
(define-contour Bookshelf category: 'blocks)
(define-contour MossyCobblestone category: 'blocks)
(define-contour Obsidian category: 'blocks)
(define-contour Torch category: 'blocks)
(define-contour Fire category: 'blocks)
(define-contour MonsterSpawner category: 'blocks)
(define-contour WoodenStairs category: 'blocks)
(define-contour Chest category: 'blocks)
(define-contour RedstoneWire category: 'blocks)
(define-contour DiamondOre category: 'blocks)
(define-contour DiamondBlock category: 'blocks)
(define-contour WorkbenchBlock category: 'blocks)
(define-contour WheatCrops category: 'blocks)
(define-contour Soil category: 'blocks)
(define-contour Furnace category: 'blocks)
(define-contour BurningFurnace category: 'blocks)
(define-contour SignPost category: 'blocks)
(define-contour WoodenDoorBlock category: 'blocks)
(define-contour Ladder category: 'blocks)
(define-contour Rail category: 'blocks)
(define-contour CobblestoneStairs category: 'blocks)
(define-contour WallSign category: 'blocks)
(define-contour Lever category: 'blocks)
(define-contour StonePressurePlate category: 'blocks)
(define-contour IronDoorBlock category: 'blocks)
(define-contour WoodenPressurePlate category: 'blocks)
(define-contour RedstoneOre category: 'blocks)
(define-contour GlowingRedstoneOre category: 'blocks)
(define-contour RedstoneTorchOff category: 'blocks)
(define-contour RedstoneTorchOn category: 'blocks)
(define-contour StoneButton category: 'blocks)
(define-contour Snow category: 'blocks)
(define-contour Ice category: 'blocks)
(define-contour SnowBlock category: 'blocks)
(define-contour Cactus category: 'blocks)
(define-contour Clay category: 'blocks)
(define-contour SugarCane category: 'blocks)
(define-contour Jukebox category: 'blocks)
(define-contour Fence category: 'blocks)
(define-contour Pumpkin category: 'blocks)
(define-contour Netherrack category: 'blocks)
(define-contour SoulSand category: 'blocks)
(define-contour Glowstone category: 'blocks)
(define-contour Portal category: 'blocks)
(define-contour Jack-O-Lantern category: 'blocks)
(define-contour CakeBlock category: 'blocks)
(define-contour RedstoneRepeaterBlockOff category: 'blocks)
(define-contour RedstoneRepeaterBlockOn category: 'blocks)
(define-contour LockedChest category: 'blocks)
(define-contour Trapdoor category: 'blocks)
(define-contour MonsterEgg category: 'blocks)
(define-contour StoneBricks category: 'blocks)
(define-contour BrownMushroomCap category: 'blocks)
(define-contour RedMushroomCap category: 'blocks)
(define-contour IronBars category: 'blocks)
(define-contour GlassPane category: 'blocks)
(define-contour MelonBlock category: 'blocks)
(define-contour PumpkinStem category: 'blocks)
(define-contour MelonStem category: 'blocks)
(define-contour Vines category: 'blocks)
(define-contour FenceGate category: 'blocks)
(define-contour BrickStairs category: 'blocks)
(define-contour StoneBrickStairs category: 'blocks)
(define-contour Mycelium category: 'blocks)
(define-contour LilyPad category: 'blocks)
(define-contour NetherBrick category: 'blocks)
(define-contour NetherBrickFence category: 'blocks)
(define-contour NetherBrickStairs category: 'blocks)
(define-contour NetherWart category: 'blocks)
(define-contour EnchantmentTable category: 'blocks)
(define-contour BrewingStand category: 'blocks)
(define-contour Cauldron category: 'blocks)
(define-contour EndPortal category: 'blocks)
(define-contour EndPortalFrame category: 'blocks)
(define-contour EndStone category: 'blocks)
(define-contour DragonEgg category: 'blocks)
(define-contour RedstoneLampOff category: 'blocks)
(define-contour RedstoneLampOn category: 'blocks)
(define-contour DoubleWoodenSlab category: 'blocks)
(define-contour WoodenSlab category: 'blocks)
(define-contour CocoaPlant category: 'blocks)
(define-contour SandstoneStairs category: 'blocks)
(define-contour EmeraldOre category: 'blocks)
(define-contour EnderChest category: 'blocks)
(define-contour TripwireHook category: 'blocks)
(define-contour Tripwire category: 'blocks)
(define-contour EmeraldBlock category: 'blocks)
(define-contour SpruceWoodStairs category: 'blocks)
(define-contour BirchWoodStairs category: 'blocks)
(define-contour JungleWoodStairs category: 'blocks)
(define-contour CommandBlock category: 'blocks)
(define-contour BeaconBlock category: 'blocks)
(define-contour CobblestoneWall category: 'blocks)
(define-contour FlowerPot category: 'blocks)
(define-contour Carrots category: 'blocks)
(define-contour Potatoes category: 'blocks)
(define-contour WoodenButton category: 'blocks)
(define-contour QuartzOre category: 'blocks)
(define-contour QuartzBlock category: 'blocks)
(define-contour QuartzStairs category: 'blocks)
(define-contour StainedClay category: 'blocks)
(define-contour Leaves2 category: 'blocks)
(define-contour Wood2 category: 'blocks)
(define-contour HardenedClay category: 'blocks)
(define-contour DoublePlant category: 'blocks)


;; entity
(define-contour (add-entity)
  category: 'entity)

(define-contour (remove-entity <entity>)
  category: 'entity)

(define-contour (find-entity <name>)
  category: 'entity)


;; random
(define-contour (random <n>)
  category: 'random)

(define-contour (random-real)
  category: 'random)


;; trail
(define-contour (trail)
  category: 'trail)

(define-contour (untrail)
  category: 'trail)

(define-contour (trail-color)
  category: 'trail)

(define-contour (clear-trail)
  category: 'trail)


;; plot
(define-contour (plot-axes)
  category: 'plot)

(define-contour (plot-line <from> <to>)
  category: 'plot)


;; belt
(define-contour (belt-id <rank>)
  category: 'belt)

(define-contour (belt-count <rank>)
  category: 'belt)

(define-contour (belt-add <rank> <id>)
  category: 'belt)

(define-contour (belt-remove <rank> <id>)
  category: 'belt)

(define-contour (belt-empty)
  category: 'belt)


;; development
(define-contour show
  category: 'development)


;; language
(define-contour define
  category: 'language)

(define-contour (lambda <arguments> <body>)
  category: 'language)

(define-contour when
  category: 'language)

(define-contour unless
  category: 'language)

(define-contour if
  category: 'language)

(define-contour and
  category: 'language)

(define-contour or
  category: 'language)

(define-contour let
  category: 'language)

(define-contour let*
  category: 'language)

(define-contour letrec
  category: 'language)

(define-contour apply
  category: 'language)

(define-contour append
  category: 'language)

(define-contour assoc
  category: 'language)

(define-contour assq
  category: 'language)

(define-contour assv
  category: 'language)

(define-contour begin
  category: 'language)

(define-contour car
  category: 'language)

(define-contour cdr
  category: 'language)

(define-contour case
  category: 'language)

(define-contour cond
  category: 'language)

(define-contour cons
  category: 'language)

(define-contour eq?
  category: 'language)

(define-contour equal?
  category: 'language)

(define-contour eqv?
  category: 'language)

(define-contour for-each
  category: 'language)

(define-contour length
  category: 'language)

(define-contour list
  category: 'language)

(define-contour list-ref
  category: 'language)

(define-contour map
  category: 'language)

(define-contour member?
  category: 'language)

(define-contour memq?
  category: 'language)

(define-contour memv?
  category: 'language)

(define-contour not
  category: 'language)

(define-contour null?
  category: 'language)

(define-contour pair?
  category: 'language)

(define-contour reverse
  category: 'language)

(define-contour set!
  category: 'language)

(define-contour string
  category: 'language)

(define-contour string-ref
  category: 'language)

(define-contour values
  category: 'language)

(define-contour vector
  category: 'language)

(define-contour vector-ref
  category: 'language)


;;;
;;;; Test
;;;


(definition public (test)
  (%%test))


;;;
;;;; Profile
;;;


(definition public (profile-report)
  (with-lock
    (lambda ()
      (%%profile-report)
      (unspecified))))


;;;
;;;; Interface
;;;


(definition public (ask-string . rest)
  (call-event
    (lambda ()
      (apply world.interface.dialogs:ask-string rest))))


(definition public (daytime)
  (with-lock
    (lambda ()
      (let ((zone (current-zone)))
        (fxround (get-daytime zone))))))


(definition public (daytime-set! time)
  (with-lock
    (lambda ()
      (let ((zone (current-zone)))
        (let ((effective-time (effective-daytime zone time)))
          (goto-daytime zone effective-time))))))


;;;
;;;; World
;;;


(definition public (message msg)
  (with-lock
    (lambda ()
      (%%message msg)
      (unspecified))))


(definition public (name name)
  (with-lock
    (lambda ()
      (%%name (->string name))
      (unspecified))))


(definition public (unname)
  (with-lock
    (lambda ()
      (%%unname)
      (unspecified))))


(definition public (say msg (size: size <integer+> #f))
  (with-lock
    (lambda ()
      (%%say msg size: size)
      (unspecified))))


(definition public (unsay)
  (with-lock
    (lambda ()
      (%%unsay)
      (unspecified))))


(definition public (draw proc (background: background #f) (slide?: slide? #f))
  (with-lock
    (lambda ()
      (%%draw proc background slide?)
      (unspecified))))


(definition public (undraw)
  (with-lock
    (lambda ()
      (%%undraw)
      (unspecified))))


(definition public (pane view (slide?: slide? #f))
  (with-lock
    (lambda ()
      (%%pane view slide?)
      (unspecified))))


(definition public (unpane)
  (with-lock
    (lambda ()
      (%%unpane)
      (unspecified))))


(definition public (cycle-color!)
  (with-lock
    (lambda ()
      (jazz.view:cycle-debug-color!))))


;;;
;;;; Zone
;;;


(definition public (player)
  (current-me))


(definition public (creatures)
  (with-lock
    (lambda ()
      (%%creatures))))


(definition public (spawnpoint)
  (with-lock
    (lambda ()
      (let ((zone (current-zone)))
        (find-spawnpoint zone)))))


(definition public (spawnpoint-set! pos <vertex>)
  (with-lock
    (lambda ()
      (let ((zone (current-zone)))
        (set-spawnpoint zone pos)))))


(definition public (teleport-spawn)
  (with-lock
    (lambda ()
      (let ((zone (current-zone)))
        (%%teleport (find-spawnpoint zone))))))


;;;
;;;; Script
;;;


(definition public (current-instance)
  (%%current-instance))


(definition public (wait period)
  (check-positive period 1 (wait period)
    (let ((timeout (+ (current-seconds) period)))
      (wait-to timeout))))


(definition public (wait-to timeout)
  (%%tick default-tick-period
    (lambda (actor script time elapse iter)
      (when (< (current-seconds) timeout)
        (%%perform-stay)
        (iter)))))


;;;
;;;; Mailbox
;;;


;; gambit's mailboxes are used internally
(definition protected mailboxes
  (make-table test: eq? weak-keys: #t))

(definition protected mailboxes-mutex
  (make-mutex 'mailboxes))


(definition protected (get-mailbox entity <Entity>)
  (mutex-lock! mailboxes-mutex)
  (prog1 (or (table-ref mailboxes entity #f)
             (let ((mailbox (open-vector)))
               (table-set! mailboxes entity mailbox)
               mailbox))
    (mutex-unlock! mailboxes-mutex)))


(definition public (send entity <Entity> msg)
  (let ((mailbox (get-mailbox entity)))
    (write msg mailbox)
    (force-output mailbox)
    (unspecified)))


(definition public (accept)
  (let ((entity (%%current-entity)))
    (let ((mailbox (get-mailbox entity)))
      (%%tick default-tick-period
        (lambda (actor script time elapse iter)
          (input-port-timeout-set! mailbox 0.)
          (let ((obj (read mailbox)))
            (if (eof-object? obj)
                (iter)
              obj)))))))


;;;
;;;; Properties
;;;


(definition public (get property (default #f))
  (%%get (%%current-instance) property default))


(definition public (need property)
  (%%need (%%current-instance) property))


(definition public (set property value)
  (%%set (%%current-instance) property value))


(definition public (clear property)
  (%%clear (%%current-instance) property))


;;;
;;;; Event
;;;


(definition public (event-me)
  (get-me (%%current-event)))

(definition public (event-time)
  (get-time (%%current-event)))

(definition public (event-elapse)
  (get-elapse (%%current-event)))


;;;
;;;; Actor
;;;


(definition public (current-actor)
  (%%current-actor))


(definition public (near-player? (actor <Actor> (current-actor)) (distance <fl> 5.))
  (with-lock
    (lambda ()
      (%%near-player? actor distance))))


(definition public (hostile)
  (let ((event (%%current-event)))
    (tick-hostile (get-actor event)
      (get-time event)
      (get-elapse event))
    (unspecified)))


(definition public (get-position element <Element>)
  (with-lock
    (lambda ()
      (%%get-position element))))


(definition public (set-position element <Element> position <vertex>)
  (with-lock
    (lambda ()
      (%%set-position element position)
      (unspecified))))


(definition public (set-lookat element <Element> lookat <LookAt>)
  (with-lock
    (lambda ()
      (%%set-lookat element lookat)
      (unspecified))))


@what-is-it?
(definition public (set-speed element <Element> speed <fl>)
  (with-lock
    (lambda ()
      (%%set-speed element speed)
      (unspecified))))


(definition public (set-motion actor <Actor> motion <symbol>)
  (with-lock
    (lambda ()
      (%%set-motion actor motion)
      (unspecified))))


(definition public (idle)
  (let ((actor (current-actor)))
    (when actor
      (with-lock
        (lambda ()
          (%%idle actor)
          (unspecified))))))


(definition public (walk)
  (let ((actor (current-actor)))
    (when actor
      (with-lock
        (lambda ()
          (%%walk actor)
          (unspecified))))))


(definition public (run)
  (let ((actor (current-actor)))
    (when actor
      (with-lock
        (lambda ()
          (%%run actor)
          (unspecified))))))


(definition public (sprint)
  (let ((actor (current-actor)))
    (when actor
      (with-lock
        (lambda ()
          (%%sprint actor)
          (unspecified))))))


(definition public (set-sprint? actor <Actor> flag <bool>)
  (with-lock
    (lambda ()
      (%%set-sprint? actor flag)
      (unspecified))))


(definition public (set-hover? actor <Actor> flag <bool>)
  (with-lock
    (lambda ()
      (%%set-hover? actor flag)
      (unspecified))))


(definition public (full-life)
  (with-lock
    (lambda ()
      (%%full-life)
      (unspecified))))


(definition public (animate actor <Actor> animation (next: next #f))
  (with-lock
    (lambda ()
      (%%animate actor animation next: next)
      (unspecified))))


(definition public (teleport position <vertex>)
  (with-lock
    (lambda ()
      (%%teleport position)
      (unspecified))))


(definition public (zone-in zone)
  (delay-event
    (lambda ()
      (change-zone (current-tier) zone)))
  (unspecified))


(definition public (zone-out)
  (delay-event
    (lambda ()
      (change-zone (current-tier) 'start)))
  (unspecified))


(definition public (fire)
  (let ((actor (current-actor)))
    (with-lock
      (lambda ()
        (%%fire actor)
        (unspecified)))))


(definition public (fire-at creature)
  (let ((actor (current-actor)))
    (with-lock
      (lambda ()
        (%%fire-at actor creature)
        (unspecified)))))


(definition public (fire-random)
  (let ((actor (current-actor)))
    (with-lock
      (lambda ()
        (%%fire-random actor)
        (unspecified)))))


(definition public (nearest-spawned (target #f))
  (let ((actor (current-actor))
        (target (or target (player))))
    (with-lock
      (lambda ()
        (%%nearest-spawned actor target)))))


@conflict
(definition public (set-armor armor <fl>)
  (setup-armor (current-actor) armor)
  (unspecified))


(definition public (set-power power <fl>)
  (setup-power (current-actor) power)
  (unspecified))


(definition public (trek)
  (let ((actor (current-actor)))
    (with-lock
      (lambda ()
        (%%trek actor)))))


(definition public (ride)
  (let ((world (current-world))
        (actor (current-actor)))
    (with-lock
      (lambda ()
        (%%ride actor (get-current (get-riders-folio world)))))))


(definition public (fly)
  (let ((world (current-world))
        (actor (current-actor)))
    (with-lock
      (lambda ()
        (%%fly actor (get-current (get-flyers-folio world)))))))


(definition public (wheels)
  (let ((actor (current-actor)))
    (with-lock
      (lambda ()
        (%%wheels actor)))))


(definition public (hummer)
  (let ((actor (current-actor)))
    (with-lock
      (lambda ()
        (%%hummer actor)))))


(definition public (saucer)
  (let ((actor (current-actor)))
    (with-lock
      (lambda ()
        (%%saucer actor)))))


(definition public (rocket)
  (let ((actor (current-actor)))
    (with-lock
      (lambda ()
        (%%rocket actor)))))


;;;
;;;; Emote
;;;


(definition public (emote emote <string>)
  (let ((actor (current-actor)))
    (when (find-animation (cache-model actor) emote)
      (set-animation-continuous actor emote))
    (unspecified)))


(definition public (applaud)
  (emote "EmoteApplaud"))

(definition public (beg)
  (emote "EmoteBeg"))

(definition public (cheer)
  (emote "EmoteCheer"))

(definition public (cry)
  (emote "EmoteCry"))

(definition public (dance)
  (emote "EmoteDance"))

(definition public (kneel)
  (emote "EmoteKneel"))

(definition public (laugh)
  (emote "EmoteLaugh"))

(definition public (no)
  (emote "EmoteNo"))

(definition public (point)
  (emote "EmotePoint"))

(definition public (wave)
  (emote "EmoteWave"))

(definition public (yes)
  (emote "EmoteYes"))


;;;
;;;; Model
;;;


(definition public (get-model entity <Entity>)
  (with-lock
    (lambda ()
      (%%get-model entity))))


(definition public (get-model-name entity <Entity>)
  (with-lock
    (lambda ()
      (%%get-model-name entity))))


(definition public (set-run-speed model <Model> speed <fl>)
  (with-lock
    (lambda ()
      (%%set-run-speed model speed)
      (unspecified))))


;;;
;;;; Sound
;;;


(definition public (sound path <string> . rest)
  (bind-keywords ((volume <fl+> #f)) rest
    (with-lock
      (lambda ()
        (%%sound path volume: volume)
        (unspecified)))))


(definition public (bark)
  (sound "sound/random/dog_barking" volume: .25))


;;;
;;;; Music
;;;


(definition public (close-music)
  (with-lock
    (lambda ()
      (%%close-music)
      (unspecified))))


;;;
;;;; Tick
;;;


(definition public (tick proc <procedure> . rest)
  (bind-keywords ((period default-tick-period)) rest
    (check-positive period 1 (tick period proc . rest)
      (%%tick period
        (lambda (actor script time elapse iter)
          (proc iter))))))


(definition public (set-tick-handler entity <Entity> handler <procedure>)
  (with-lock
    (lambda ()
      (%%set-tick-handler entity handler)
      (unspecified))))

(definition public (set-interact-handler entity <Entity> handler <procedure>)
  (with-lock
    (lambda ()
      (%%set-interact-handler entity handler)
      (unspecified))))

(definition public (set-double-click-handler entity <Entity> handler <procedure>)
  (with-lock
    (lambda ()
      (%%set-double-click-handler entity handler)
      (unspecified))))

(definition public (set-power-handler entity <Entity> handler <procedure>)
  (with-lock
    (lambda ()
      (%%set-power-handler entity handler)
      (unspecified))))

(definition public (set-unpower-handler entity <Entity> handler <procedure>)
  (with-lock
    (lambda ()
      (%%set-unpower-handler entity handler)
      (unspecified))))

(definition public (set-teleport-handler entity <Entity> handler <procedure>)
  (with-lock
    (lambda ()
      (%%set-teleport-handler entity handler)
      (unspecified))))

(definition public (set-explode-handler entity <Entity> handler <procedure>)
  (with-lock
    (lambda ()
      (%%set-explode-handler entity handler)
      (unspecified))))

(definition public (set-hit-handler entity <Entity> handler <procedure>)
  (with-lock
    (lambda ()
      (%%set-hit-handler entity handler)
      (unspecified))))


;;;
;;;; Pause
;;;


(definition public (paused?)
  (%%paused?))


(definition public (pause)
  (%%pause)
  (unspecified))


(definition public (unpause)
  (%%unpause)
  (unspecified))


(definition public (toggle-paused)
  (%%toggle-paused)
  (unspecified))


;;;
;;;; Move
;;;


(definition public (stay)
  (%%stay)
  (unspecified))


(definition public (move distance)
  (check-positive distance 1 (move distance)
    (let ((distance (cast <fl> distance)))
      (%%move distance)
      (unspecified))))


(definition public (move-to target <vertex>)
  (%%move-to target)
  (unspecified))


(definition public (rotate angle <fl>)
  (let ((angle (degree->radian angle)))
    (%%rotate angle)
    (unspecified)))


(definition public (jump (impulsion <fl+> #f))
  (let ((actor (current-actor)))
    (%%jump actor impulsion)
    (unspecified)))


(definition public (jump-player (impulsion <fl+> #f))
  (let ((player (player)))
    (%%jump-player player impulsion)
    (unspecified)))


(definition public (follow target <Actor>)
  (%%follow (current-actor) target))


(definition public (follow-player)
  (%%follow (current-actor) (player)))


(definition public (path (actor <Actor> (current-actor)))
  (%%path actor))


(definition public (bot (actor <Actor> (current-actor)))
  (%%bot actor))


;;;
;;;; LookAt
;;;


(definition public (lookat-horizon dir <vertex>)
  (%%lookat-horizon dir))


(definition public (lookat-player (actor <Actor> #f))
  (let ((actor (or actor (current-actor))))
    (with-lock
      (lambda ()
        (%%lookat-player actor)
        (unspecified)))))


(definition public (lookat-target target (actor <Actor> #f))
  (let ((actor (or actor (current-actor))))
    (with-lock
      (lambda ()
        (%%lookat-target target actor)
        (unspecified)))))


(definition public (lookat-rotate element <Element> angle <fl>)
  (with-lock
    (lambda ()
      (%%lookat-rotate element angle)
      (unspecified))))


;;;
;;;; Block
;;;


(definition public (location i <fx> j <fx> k <fx>)
  (indexed i j k))


(definition public (add-block location <index> id <integer>)
  (with-lock
    (lambda ()
      (%%add-block location id)
      (unspecified))))


(definition public (delete-block location <index>)
  (with-lock
    (lambda ()
      (%%delete-block location)
      (unspecified))))


(definition public (change-block location <index> id <integer>)
  (with-lock
    (lambda ()
      (%%change-block location id)
      (unspecified))))


(definition public (get-block location <index>)
  (with-lock
    (lambda ()
      (%%get-block location))))


(definition public (set-block location <index> id <integer>)
  (with-lock
    (lambda ()
      (%%set-block location id)
      (unspecified))))


(definition public (set-block-data location <index> data <integer>)
  (with-lock
    (lambda ()
      (%%set-block-data location data)
      (unspecified))))


(definition public (interact-block location <index>)
  (with-lock
    (lambda ()
      (%%interact-block location)
      (unspecified))))


;;;
;;;; Entity
;;;


(definition public (add-entity . rest)
  (bind-keywords ((class #f) (name #f) (position #f) (lookat #f) (scale #f) (model #f) (script #f)) rest
    (with-lock
      (lambda ()
        (let ((class (or class Creature))
              (position (position-arg position))
              (lookat (lookat-arg lookat))
              (scale (scale-arg scale)))
          (%%add-entity class name position lookat scale model script))))))


(definition public (remove-entity entity <Entity>)
  (with-lock
    (lambda ()
      (%%remove-entity entity))))


(definition public (find-entity name <symbol>)
  (with-lock
    (lambda ()
      (%%find-entity name))))


;;;
;;;; Random
;;;


(definition public (random n <integer>)
  (%%random n))


;;;
;;;; Trail
;;;


(definition public (trail (color #f))
  (with-lock
    (lambda ()
      (%%trail color)
      (unspecified))))


(definition public (untrail)
  (with-lock
    (lambda ()
      (%%untrail)
      (unspecified))))


(definition public (trail-color color)
  (with-lock
    (lambda ()
      (%%trail-color color)
      (unspecified))))


(definition public (clear-trail)
  (with-lock
    (lambda ()
      (%%clear-trail)
      (unspecified))))


;;;
;;;; Plot
;;;


(definition public (plot-axes (dx <fl> 0) (dz <fl> 0))
  (plot-line (vertex (+ -10. dx) 4. (+ 0. dz)) (vertex (+ 10. dx) 4. (+ 0. dz)) 'blue)
  (plot-line (vertex (+ 0. dx) 4. (+ -10. dz)) (vertex (+ 0. dx) 4. (+ 10. dz)) 'blue)
  (loop (for x <fl> from -10. to 10. by 1.)
        (plot-line (vertex (+ x dx) 4. (+ -.5 dz)) (vertex (+ x dx) 4. (+ .5 dz)) 'blue))
  (loop (for z <fl> from -10. to 10. by 1.)
        (plot-line (vertex (+ -.5 dx) 4. (+ z dz)) (vertex (+ .5 dx) 4. (+ z dz)) 'blue))
  (unspecified))


(definition public (plot-line from <vertex> to <vertex> (color 'red))
  (untrail)
  (move-to from)
  (trail color)
  (move-to to)
  (unspecified))


;;;
;;;; Belt
;;;


(definition public (belt-id rank)
  (%%belt-id rank))


(definition public (belt-count rank)
  (%%belt-count rank))


(definition public (belt-add rank id (count 1))
  (%%belt-add rank id count))


(definition public (belt-remove rank id (count 1))
  (%%belt-remove rank id count))


(definition public (belt-empty)
  (%%belt-empty))


;;;
;;;; Random
;;;


(definition public (random-getter! lst)
  (let ((all lst)
        (remaining '()))
    (lambda ()
      (when (null? remaining)
        (set! remaining (copy all)))
      (if (null? remaining)
          #f
        (let ((elem (random-element remaining)))
          (set! remaining (remove! elem remaining))
          elem)))))


;;;
;;;; Media
;;;


(definition public (collect-images dir (filter #f))
  (%%collect-images dir filter))


(definition public (background surface image (mode: mode 'fit) (alpha: alpha #f))
  (let ((size (get-size surface)))
    (fill-image surface
                (new Rect 0 0 (get-width size) (get-height size))
                (new Image moniker: image)
                mode: mode
                alpha: alpha)))


(definition public (slideshow directory proc (filter: filter #f) (mode: mode 'fit) (delay: delay #f) (name?: name? #f))
  (let ((delay (or delay 60))
        (actual-directory (get 'slideshow-directory (unspecified)))
        (actual-filter (get 'slideshow-filter (unspecified)))
        (actual-delay (get 'slideshow-delay (unspecified))))
    (let ((update-directory? (or (unspecified? actual-directory) (not (pathname=? directory actual-directory))))
          (update-filter? (or (unspecified? actual-filter) (not (equal? filter actual-filter))))
          (update-delay? (or (unspecified? actual-delay) (not (equal? delay actual-delay)))))
      (let ((slideshow-random!
              (or (and (not update-directory?) (not update-filter?) (not (get 'slideshow-force?)) (get 'slideshow-random!))
                  (let ((getter (random-getter! (collect-images directory filter))))
                    (set 'slideshow-random! getter)
                    (set 'slideshow-force? #f)
                    getter))))
        (set 'slideshow-directory directory)
        (set 'slideshow-filter filter)
        (set 'slideshow-delay delay)
        (let (iter (refresh? #f))
          (draw
            (lambda (surface resolution)
              (define (draw-random!)
                (let ((current (get 'slideshow-image)))
                  (let ((image (if (or (and (run?) (not (get 'slideshow-stay?))) refresh? update-directory? update-filter? (not current)) (slideshow-random!) current)))
                    (when image
                      (background surface image
                        mode: (or (get 'slideshow-mode) mode))
                      (set 'slideshow-image image)
                      (set 'slideshow-stay? #f)))))
              
              (draw-random!)
              (proc surface resolution)
              (when (get 'slideshow-name? name?)
                (let ((current (get 'slideshow-image)))
                  (when current
                    (let ((name (get-name current)))
                      (set-font surface {Font Label point-size: 20})
                      (let ((width (get-text-width surface name)))
                        (let ((h (center width (get-width resolution))))
                          (draw-text surface h 690 (get-name current) {Color Red})))))))))
          (let ((now (current-seconds))
                (to (get 'slideshow-to)))
            (if (or (not to) refresh? (run?) update-directory? update-delay?)
                (let ((new-to (+ now delay)))
                  (set 'slideshow-to new-to)
                  (wait-to new-to))
              (wait-to to)))
          (iter #t))))))


;;;
;;;; Development
;;;


(definition public (show . rest)
  (let ((interface (current-interface)))
    (let ((panel (child interface 'chat))
          (message (format "{l detail: :describe}" rest)))
      (show-message panel "show" 'show message))))


;;;
;;;; Validate
;;;


(definition public (validate-setup context)
  (set 'validate-context context)
  (clear 'validate-failures))


(definition public (validate-failed message)
  (set 'validate-failures (cons message (get 'validate-failures '()))))


(definition public (validate-report)
  (let ((context (get 'validate-context))
        (failures (get 'validate-failures)))
    (if failures
        (say `(<span>
                (<paragraph>
                  (<text> color: World-Yellow "The following validations failed:"))
                ""
                ,@(reverse failures))
             size: 24)
      (name context))
    (clear 'validate-context)
    (clear 'validate-failures))))
