;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Scripts
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2016
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.script jazz:


(export (world.script.syntax (phase syntax))
        (jazz (phase syntax) (only when unless))
        (jazz (only debug not-null? naturals format random-element random-sequence continuation-capture continuation-return continuation-graft unspecified)))

(export (world.generation.building
          (only Stone
                Grass
                Dirt
                Cobblestone
                WoodenPlank
                Sapling
                Bedrock
                Water
                StationaryWater
                Lava
                StationaryLava
                SandBlock
                Gravel
                GoldOre
                IronOre
                CoalOre
                Wood
                Leaves
                Sponge
                Glass
                LapisOre
                LapisBlock
                Dispenser
                Sandstone
                NoteBlock
                BedBlock
                PoweredRail
                DetectorRail
                StickyPiston
                Web
                TallGrass
                DeadBush
                Piston
                PistonHead
                Wool
                Dandelion
                Rose
                BrownMushroom
                RedMushroom
                GoldBlock
                IronBlock
                DoubleStoneSlabs
                StoneSlabs
                Brick
                TNT
                Bookshelf
                MossyCobblestone
                Obsidian
                Torch
                Fire
                MonsterSpawner
                WoodenStairs
                Chest
                RedstoneWire
                DiamondOre
                DiamondBlock
                WorkbenchBlock
                WheatCrops
                Soil
                Furnace
                BurningFurnace
                SignPost
                WoodenDoorBlock
                Ladder
                Rail
                CobblestoneStairs
                WallSign
                Lever
                StonePressurePlate
                IronDoorBlock
                WoodenPressurePlate
                RedstoneOre
                GlowingRedstoneOre
                RedstoneTorchOff
                RedstoneTorchOn
                StoneButton
                Snow
                Ice
                SnowBlock
                Cactus
                Clay
                SugarCane
                Jukebox
                Fence
                Pumpkin
                Netherrack
                SoulSand
                Glowstone
                Portal
                Jack-O-Lantern
                CakeBlock
                RedstoneRepeaterBlockOff
                RedstoneRepeaterBlockOn
                LockedChest
                Trapdoor
                MonsterEgg
                StoneBricks
                BrownMushroomCap
                RedMushroomCap
                IronBars
                GlassPane
                MelonBlock
                PumpkinStem
                MelonStem
                Vines
                FenceGate
                BrickStairs
                StoneBrickStairs
                Mycelium
                LilyPad
                NetherBrick
                NetherBrickFence
                NetherBrickStairs
                NetherWart
                EnchantmentTable
                BrewingStand
                Cauldron
                EndPortal
                EndPortalFrame
                EndStone
                DragonEgg
                RedstoneLampOff
                RedstoneLampOn
                DoubleWoodenSlab
                WoodenSlab
                CocoaPlant
                SandstoneStairs
                EmeraldOre
                EnderChest
                TripwireHook
                Tripwire
                EmeraldBlock
                SpruceWoodStairs
                BirchWoodStairs
                JungleWoodStairs
                CommandBlock
                BeaconBlock
                CobblestoneWall
                FlowerPot
                Carrots
                Potatoes
                WoodenButton
                QuartzOre
                QuartzBlock
                QuartzStairs
                StainedClay
                Leaves2
                Wood2
                HardenedClay
                DoublePlant)))

(export (world.interface.inventory
          (only IronShovelItem
                IronPickaxeItem
                IronAxeItem
                FlintAndSteelItem
                AppleItem
                BowStandbyItem
                ArrowItem
                CoalItem
                DiamondItem
                IronIngotItem
                GoldIngotItem
                IronSwordItem
                WoodSwordItem
                WoodShovelItem
                WoodPickaxeItem
                StoneSwordItem
                StoneShovelItem
                StonePickaxeItem
                StoneAxeItem
                DiamondSwordItem
                DiamondPickaxeItem
                StickItem
                BowlItem
                MushroomStewItem
                GoldSwordItem
                GoldShovelItem
                GoldAxeItem
                StringItem
                FeatherItem
                GunpowderItem
                IronHoeItem
                GoldHoeItem
                SeedsWheatItem
                WheatItem
                BreadItem
                LeatherHelmetItem
                LeatherChestplateItem
                LeatherLeggingsItem
                LeatherBootsItem
                ChainmailHelmetItem
                ChainmailChestplateItem
                ChainmailLeggingsItem
                ChainmailBootsItem
                IronHelmetItem
                IronChestplateItem
                IronLeggingsItem
                IronBootsItem
                DiamondHelmetItem
                DiamondChestplateItem
                DiamondLeggingsItem
                DiamondBootsItem
                GoldHelmetItem
                GoldChestplateItem
                GoldLeggingsItem
                GoldBootsItem
                FlintItem
                PorkchopRawItem
                PorkchopCookedItem
                PaintingItem
                AppleGoldenItem
                SignItem
                BucketEmptyItem
                BucketWaterItem
                BucketLavaItem
                MinecartNormalItem
                SaddleItem
                RedstoneDustItem
                LeatherItem
                BucketMilkItem
                BrickItem
                ClayBallItem
                ReedsItem
                PaperItem
                BookNormalItem
                SlimeballItem
                CompassItem
                ClockItem
                GlowstoneDustItem
                FishRawItem
                FishCookedItem
                DyePowderBlackItem
                BoneItem
                SugarItem
                BedItem
                RepeaterItem
                ShearsItem
                SeedsMelonItem
                BeefCookedItem
                ChickenRawItem
                RottenFleshItem
                EnderPearlItem
                GoldNuggetItem
                PotionBottleDrinkableItem
                PotionBottleEmptyItem
                SpiderEyeItem
                BlazePowderItem
                CauldronItem
                NetherStarItem
                NetherBrickItem
                Record13Item
                RecordCatItem
                RecordBlocksItem
                RecordChirpItem
                RecordFarItem
                RecordMallItem
                RecordMellohiItem
                RecordStalItem
                RecordStradItem
                RecordWardItem
                Record11Item)))

;; quicky for tests
(export (world.scriptum
          (only perform-stay
                perform-move
                perform-move/jump
                perform-rotate-left
                perform-rotate-right
                perform-hover
                perform-jump)))

(import (world.script.import
          (except clear
                  get-position
                  set-position
                  set-lookat
                  set-speed
                  set-motion
                  set-sprint?
                  set-hover?
                  animate
                  teleport
                  set-power
                  get-model
                  set-run-speed
                  close-music
                  tick
                  pause
                  unpause
                  move
                  move-to
                  rotate
                  jump
                  follow-player
                  location
                  add-block
                  delete-block
                  add-entity
                  remove-entity
                  random
                  show)))


(declare (proper-tail-calls))


;;;
;;;; Category
;;;


(define-contour-category script      rank:  0)
(define-contour-category properties  rank:  1)
(define-contour-category handle      rank:  2)
(define-contour-category event       rank:  3)
(define-contour-category interface   rank:  4)
(define-contour-category zone        rank:  5)
(define-contour-category emote       rank:  6)
(define-contour-category move        rank:  7)
(define-contour-category vertex      rank:  8)
(define-contour-category lookat      rank:  9)
(define-contour-category actor       rank:  10)
(define-contour-category block       rank:  11)
(define-contour-category blocks      rank:  12)
(define-contour-category entity      rank:  13)
(define-contour-category random      rank:  14)
(define-contour-category trail       rank:  15)
(define-contour-category plot        rank:  16)
(define-contour-category belt        rank:  17)
(define-contour-category development rank:  30)
(define-contour-category language    rank:  40)


;;;
;;;; Contour
;;;


;; script
(define-contour me native
  category: 'script)

(define-name-contour tick
"(tick
   (lambda (iter)
     <body>))"
  category: 'script)

(define-contour (wait <period>)
  category: 'script)

(define-contour (send <entity> <msg>)
  category: 'script)

(define-contour (receive)
  category: 'script)


;; properties
(define-contour (get <object> <property>)
  category: 'properties)

(define-contour (need <object> <property>)
  category: 'properties)

(define-contour (wait-for <object> <property> <value>)
  category: 'properties)

(define-contour (set <object> <property> <value>)
  category: 'properties)

(define-contour (clear <object> <property>)
  category: 'properties)


;; event
(define-name-contour interact
"(handle (interact)
   <body>)
"
  category: 'event)

(define-name-contour double-click
"(handle (double-click)
   <body>)
"
  category: 'event)

(define-name-contour power
"(handle (power)
   <body>)
"
  category: 'event)

(define-name-contour unpower
"(handle (unpower)
   <body>)
"
  category: 'event)

@wait
(define-name-contour teleport
"(handle (teleport)
   <body>)
"
  category: 'event)

@wait
(define-name-contour explode
"(handle (explode)
   <body>)
"
  category: 'event)

(define-name-contour hit
"(handle (hit)
   <body>)
"
  category: 'event)


;; interface
(define-contour (message <msg>)
  category: 'interface)

(define-contour (sound <path>)
  category: 'interface)

(define-contour (bark)
  category: 'interface)

(define-contour with-interface
  category: 'interface)

(define-contour ask-string
  category: 'interface)

(define-contour (daytime)
  category: 'interface)

(define-contour (daytime-set! <daytime>)
  category: 'interface)


;; zone
(define-contour (player)
  category: 'script)

(define-contour (creatures)
  category: 'zone)

(define-contour (spawnpoint)
  category: 'zone)

(define-contour (spawnpoint-set! <position>)
  category: 'zone)

(define-contour (teleport-spawn)
  category: 'zone)


;; emote
(define-contour (emote <emote>)
  category: 'emote)

(define-contour (applaud)
  category: 'emote)

(define-contour (beg)
  category: 'emote)

(define-contour (cheer)
  category: 'emote)

(define-contour (cry)
  category: 'emote)

(define-contour (dance)
  category: 'emote)

(define-contour (kneel)
  category: 'emote)

(define-contour (laugh)
  category: 'emote)

(define-contour (no)
  category: 'emote)

(define-contour (point)
  category: 'emote)

(define-contour (wave)
  category: 'emote)

(define-contour (yes)
  category: 'emote)


;; move
(define-contour (walk)
  category: 'move)

(define-contour (run)
  category: 'move)

@wait
(define-contour (sprint)
  category: 'move)

(define-contour (stay)
  category: 'move)

(define-contour (move <distance>)
  category: 'move)

@wait
(define-contour (move-to <target>)
  category: 'move)

(define-contour (rotate <angle>)
  category: 'move)

(define-contour (jump)
  category: 'move)

(define-contour (jump-player)
  category: 'move)

(define-contour (follow <target>)
  category: 'move)

(define-contour (follow-player)
  category: 'move)

(define-contour (path)
  category: 'move)


;; vertex
(define-contour (vertex <x> <y> <z>)
  category: 'vertex)

(define-contour (vertex+ <v1> <v2>)
  category: 'vertex)

(define-contour (vertex- <v1> <v2>)
  category: 'vertex)


;; lookat
@wait
(define-contour (lookat-horizon <dir>)
  category: 'lookat)

@wait
(define-contour (lookat-player)
  category: 'lookat)

@wait
(define-contour (lookat-target <target>)
  category: 'lookat)

@wait
(define-contour (lookat-rotate <element> <angle>)
  category: 'lookat)


;; actor
@wait
(define-contour (near-player?)
  category: 'actor)

@wait
(define-contour (get-position <element>)
  category: 'actor)

@wait
(define-contour (set-sprint? <actor> <flag>)
  category: 'actor)

@wait
(define-contour (set-hover? <actor> <flag>)
  category: 'actor)

@wait
(define-contour (set-billboard <actor> <name>)
  category: 'actor)

(define-contour (full-life)
  category: 'actor)

(define-contour (fire)
  category: 'actor)

(define-contour (fire-at <creature>)
  category: 'actor)

(define-contour (fire-random)
  category: 'actor)

(define-contour (nearest-spawned)
  category: 'actor)

(define-contour (set-armor <armor>)
  category: 'actor)

(define-contour (set-power <power>)
  category: 'actor)


;; block
(define-contour (location <i> <j> <k>)
  category: 'block)

(define-contour (add-block <location> <block-id>)
  category: 'block)

(define-contour (delete-block <location>)
  category: 'block)

(define-contour (change-block <location> <block-id>)
  category: 'block)

@wait
(define-contour (get-block <location>)
  category: 'block)

@wait
(define-contour (set-block <location> <block-id>)
  category: 'block)

@wait
(define-contour (set-block-data <location> <data-id>)
  category: 'block)

(define-contour (interact-block <location>)
  category: 'block)


;; blocks
(define-contour Dirt native category: 'blocks)
(define-contour Stone native category: 'blocks)
(define-contour Grass native category: 'blocks)
(define-contour Dirt native category: 'blocks)
(define-contour Cobblestone native category: 'blocks)
(define-contour WoodenPlank native category: 'blocks)
(define-contour Sapling native category: 'blocks)
(define-contour Bedrock native category: 'blocks)
(define-contour Water native category: 'blocks)
(define-contour StationaryWater native category: 'blocks)
(define-contour Lava native category: 'blocks)
(define-contour StationaryLava native category: 'blocks)
(define-contour SandBlock native category: 'blocks)
(define-contour Gravel native category: 'blocks)
(define-contour GoldOre native category: 'blocks)
(define-contour IronOre native category: 'blocks)
(define-contour CoalOre native category: 'blocks)
(define-contour Wood native category: 'blocks)
(define-contour Leaves native category: 'blocks)
(define-contour Sponge native category: 'blocks)
(define-contour Glass native category: 'blocks)
(define-contour LapisOre native category: 'blocks)
(define-contour LapisBlock native category: 'blocks)
(define-contour Dispenser native category: 'blocks)
(define-contour Sandstone native category: 'blocks)
(define-contour NoteBlock native category: 'blocks)
(define-contour BedBlock native category: 'blocks)
(define-contour PoweredRail native category: 'blocks)
(define-contour DetectorRail native category: 'blocks)
(define-contour StickyPiston native category: 'blocks)
(define-contour Web native category: 'blocks)
(define-contour TallGrass native category: 'blocks)
(define-contour DeadBush native category: 'blocks)
(define-contour Piston native category: 'blocks)
(define-contour PistonHead native category: 'blocks)
(define-contour Wool native category: 'blocks)
(define-contour Dandelion native category: 'blocks)
(define-contour Rose native category: 'blocks)
(define-contour BrownMushroom native category: 'blocks)
(define-contour RedMushroom native category: 'blocks)
(define-contour GoldBlock native category: 'blocks)
(define-contour IronBlock native category: 'blocks)
(define-contour DoubleStoneSlabs native category: 'blocks)
(define-contour StoneSlabs native category: 'blocks)
(define-contour Brick native category: 'blocks)
(define-contour TNT native category: 'blocks)
(define-contour Bookshelf native category: 'blocks)
(define-contour MossyCobblestone native category: 'blocks)
(define-contour Obsidian native category: 'blocks)
(define-contour Torch native category: 'blocks)
(define-contour Fire native category: 'blocks)
(define-contour MonsterSpawner native category: 'blocks)
(define-contour WoodenStairs native category: 'blocks)
(define-contour Chest native category: 'blocks)
(define-contour RedstoneWire native category: 'blocks)
(define-contour DiamondOre native category: 'blocks)
(define-contour DiamondBlock native category: 'blocks)
(define-contour WorkbenchBlock native category: 'blocks)
(define-contour WheatCrops native category: 'blocks)
(define-contour Soil native category: 'blocks)
(define-contour Furnace native category: 'blocks)
(define-contour BurningFurnace native category: 'blocks)
(define-contour SignPost native category: 'blocks)
(define-contour WoodenDoorBlock native category: 'blocks)
(define-contour Ladder native category: 'blocks)
(define-contour Rail native category: 'blocks)
(define-contour CobblestoneStairs native category: 'blocks)
(define-contour WallSign native category: 'blocks)
(define-contour Lever native category: 'blocks)
(define-contour StonePressurePlate native category: 'blocks)
(define-contour IronDoorBlock native category: 'blocks)
(define-contour WoodenPressurePlate native category: 'blocks)
(define-contour RedstoneOre native category: 'blocks)
(define-contour GlowingRedstoneOre native category: 'blocks)
(define-contour RedstoneTorchOff native category: 'blocks)
(define-contour RedstoneTorchOn native category: 'blocks)
(define-contour StoneButton native category: 'blocks)
(define-contour Snow native category: 'blocks)
(define-contour Ice native category: 'blocks)
(define-contour SnowBlock native category: 'blocks)
(define-contour Cactus native category: 'blocks)
(define-contour Clay native category: 'blocks)
(define-contour SugarCane native category: 'blocks)
(define-contour Jukebox native category: 'blocks)
(define-contour Fence native category: 'blocks)
(define-contour Pumpkin native category: 'blocks)
(define-contour Netherrack native category: 'blocks)
(define-contour SoulSand native category: 'blocks)
(define-contour Glowstone native category: 'blocks)
(define-contour Portal native category: 'blocks)
(define-contour Jack-O-Lantern native category: 'blocks)
(define-contour CakeBlock native category: 'blocks)
(define-contour RedstoneRepeaterBlockOff native category: 'blocks)
(define-contour RedstoneRepeaterBlockOn native category: 'blocks)
(define-contour LockedChest native category: 'blocks)
(define-contour Trapdoor native category: 'blocks)
(define-contour MonsterEgg native category: 'blocks)
(define-contour StoneBricks native category: 'blocks)
(define-contour BrownMushroomCap native category: 'blocks)
(define-contour RedMushroomCap native category: 'blocks)
(define-contour IronBars native category: 'blocks)
(define-contour GlassPane native category: 'blocks)
(define-contour MelonBlock native category: 'blocks)
(define-contour PumpkinStem native category: 'blocks)
(define-contour MelonStem native category: 'blocks)
(define-contour Vines native category: 'blocks)
(define-contour FenceGate native category: 'blocks)
(define-contour BrickStairs native category: 'blocks)
(define-contour StoneBrickStairs native category: 'blocks)
(define-contour Mycelium native category: 'blocks)
(define-contour LilyPad native category: 'blocks)
(define-contour NetherBrick native category: 'blocks)
(define-contour NetherBrickFence native category: 'blocks)
(define-contour NetherBrickStairs native category: 'blocks)
(define-contour NetherWart native category: 'blocks)
(define-contour EnchantmentTable native category: 'blocks)
(define-contour BrewingStand native category: 'blocks)
(define-contour Cauldron native category: 'blocks)
(define-contour EndPortal native category: 'blocks)
(define-contour EndPortalFrame native category: 'blocks)
(define-contour EndStone native category: 'blocks)
(define-contour DragonEgg native category: 'blocks)
(define-contour RedstoneLampOff native category: 'blocks)
(define-contour RedstoneLampOn native category: 'blocks)
(define-contour DoubleWoodenSlab native category: 'blocks)
(define-contour WoodenSlab native category: 'blocks)
(define-contour CocoaPlant native category: 'blocks)
(define-contour SandstoneStairs native category: 'blocks)
(define-contour EmeraldOre native category: 'blocks)
(define-contour EnderChest native category: 'blocks)
(define-contour TripwireHook native category: 'blocks)
(define-contour Tripwire native category: 'blocks)
(define-contour EmeraldBlock native category: 'blocks)
(define-contour SpruceWoodStairs native category: 'blocks)
(define-contour BirchWoodStairs native category: 'blocks)
(define-contour JungleWoodStairs native category: 'blocks)
(define-contour CommandBlock native category: 'blocks)
(define-contour BeaconBlock native category: 'blocks)
(define-contour CobblestoneWall native category: 'blocks)
(define-contour FlowerPot native category: 'blocks)
(define-contour Carrots native category: 'blocks)
(define-contour Potatoes native category: 'blocks)
(define-contour WoodenButton native category: 'blocks)
(define-contour QuartzOre native category: 'blocks)
(define-contour QuartzBlock native category: 'blocks)
(define-contour QuartzStairs native category: 'blocks)
(define-contour StainedClay native category: 'blocks)
(define-contour Leaves2 native category: 'blocks)
(define-contour Wood2 native category: 'blocks)
(define-contour HardenedClay native category: 'blocks)
(define-contour DoublePlant native category: 'blocks)


;; entity
(define-contour (add-entity)
  category: 'entity)

(define-contour (remove-entity <entity>)
  category: 'entity)

(define-contour (find-entity <name>)
  category: 'entity)


;; random
(define-contour (random <n>)
  category: 'random)

(define-contour (random-real)
  category: 'random)


;; trail
(define-contour (trail)
  category: 'trail)

(define-contour (untrail)
  category: 'trail)

(define-contour (trail-color <color>)
  category: 'trail)

(define-contour (clear-trail)
  category: 'trail)


;; plot
(define-contour (plot-axes)
  category: 'plot)

(define-contour (plot-line <from> <to>)
  category: 'plot)


;; belt
(define-contour (belt-id <rank>)
  category: 'belt)

(define-contour (belt-count <rank>)
  category: 'belt)

(define-contour (belt-add <rank> <id>)
  category: 'belt)

(define-contour (belt-remove <rank> <id>)
  category: 'belt)

(define-contour (belt-empty)
  category: 'belt)


;; development
(define-contour show
  category: 'development)


;; language
(define-contour define native
  category: 'language)

(define-contour (lambda <arguments> <body>) native
  category: 'language)

(define-contour when native
  category: 'language)

(define-contour unless native
  category: 'language)

(define-contour if native
  category: 'language)

(define-contour and native
  category: 'language)

(define-contour or native
  category: 'language)

(define-contour let native
  category: 'language)

(define-contour let* native
  category: 'language)

(define-contour letrec native
  category: 'language)

(define-contour apply native
  category: 'language)

(define-contour append native
  category: 'language)

(define-contour assoc native
  category: 'language)

(define-contour assq native
  category: 'language)

(define-contour assv native
  category: 'language)

(define-contour begin native
  category: 'language)

(define-contour car native
  category: 'language)

(define-contour cdr native
  category: 'language)

(define-contour case native
  category: 'language)

(define-contour cond native
  category: 'language)

(define-contour cons native
  category: 'language)

(define-contour eq? native
  category: 'language)

(define-contour equal? native
  category: 'language)

(define-contour eqv? native
  category: 'language)

(define-contour for-each native
  category: 'language)

(define-contour length native
  category: 'language)

(define-contour list native
  category: 'language)

(define-contour list-ref native
  category: 'language)

(define-contour map native
  category: 'language)

(define-contour member? native
  category: 'language)

(define-contour memq? native
  category: 'language)

(define-contour memv? native
  category: 'language)

(define-contour not native
  category: 'language)

(define-contour null? native
  category: 'language)

(define-contour pair? native
  category: 'language)

(define-contour reverse native
  category: 'language)

(define-contour set! native
  category: 'language)

(define-contour string native
  category: 'language)

(define-contour string-ref native
  category: 'language)

(define-contour values native
  category: 'language)

(define-contour vector native
  category: 'language)

(define-contour vector-ref native
  category: 'language)


;;;
;;;; Test
;;;


(definition public (test)
  (%%test))


;;;
;;;; Profile
;;;


(definition public (profile-report)
  (with-lock
    (lambda ()
      (%%profile-report)
      (unspecified))))


;;;
;;;; Interface
;;;


(definition public (with-interface thunk)
  (execute-event
    (lambda ()
      (with-task-mutex
        thunk))))


(definition public (ask-string . rest)
  (call-event
    (lambda ()
      (apply world.interface.dialogs:ask-string rest))))


(definition public (daytime)
  (with-lock
    (lambda ()
      (let ((zone (current-zone)))
        (fxround (get-daytime zone))))))


(definition public (daytime-set! time)
  (with-lock
    (lambda ()
      (let ((zone (current-zone)))
        (let ((effective-time (effective-daytime zone time)))
          (goto-daytime zone effective-time))))))


;;;
;;;; World
;;;


(definition public (message msg)
  (with-lock
    (lambda ()
      (%%message msg)
      (unspecified))))


(definition public (say msg (size: size #f))
  (check-integer+ size size: (say msg size: size)
    (with-lock
      (lambda ()
        (%%say msg size: size)
        (unspecified)))))


(definition public (unsay)
  (with-lock
    (lambda ()
      (%%unsay)
      (unspecified))))


(definition public (name name)
  (with-lock
    (lambda ()
      (%%name (->string name))
      (unspecified))))


(definition public (unname)
  (with-lock
    (lambda ()
      (%%unname)
      (unspecified))))


;;;
;;;; Zone
;;;


(definition public (player)
  (current-me))


(definition public (creatures)
  (with-lock
    (lambda ()
      (%%creatures))))


(definition public (spawnpoint)
  (with-lock
    (lambda ()
      (let ((zone (current-zone)))
        (find-spawnpoint zone)))))


(definition public (spawnpoint-set! pos)
  (with-lock
    (lambda ()
      (let ((zone (current-zone)))
        (set-spawnpoint zone pos)))))


(definition public (teleport-spawn)
  (with-lock
    (lambda ()
      (let ((zone (current-zone)))
        (%%teleport (find-spawnpoint zone))))))


;;;
;;;; Script
;;;


(definition public (current-instance)
  (%%current-instance))


(definition public (wait period)
  (check-positive period 1 (script-sleep period)
    (let ((timeout (+ (current-seconds) period)))
      (%%tick default-tick-period
        (lambda (actor script time elapse iter)
          (when (< (current-seconds) timeout)
            (%%perform-stay)
            (iter)))))))


;; gambit's mailboxes are used internally
(definition protected mailboxes
  (make-table test: eq? weak-keys: #t))

(definition protected mailboxes-mutex
  (make-mutex 'mailboxes))


(definition protected (get-mailbox entity)
  (mutex-lock! mailboxes-mutex)
  (prog1 (or (table-ref mailboxes entity #f)
             (let ((mailbox (open-vector)))
               (table-set! mailboxes entity mailbox)
               mailbox))
    (mutex-unlock! mailboxes-mutex)))


(definition public (send entity msg)
  (let ((mailbox (get-mailbox entity)))
    (write msg mailbox)
    (force-output mailbox)
    (unspecified)))


(definition public (receive)
  (let ((entity (%%current-entity)))
    (let ((mailbox (get-mailbox entity)))
      (%%tick default-tick-period
        (lambda (actor script time elapse iter)
          (input-port-timeout-set! mailbox 0.)
          (let ((obj (read mailbox)))
            (if (eof-object? obj)
                (iter)
              obj)))))))


;;;
;;;; Properties
;;;


(definition protected properties-mutex
  (make-mutex 'properties))


(definition protected *properties*
  (make-table test: eq? weak-keys: #t))

;; sejour quick hack to think through
(definition protected (reset-properties)
  (set! *properties* (make-table test: eq? weak-keys: #t)))


(definition protected (require-properties object)
  (or (table-ref *properties* object #f)
      (let ((properties (make-table test: eq?)))
        (table-set! *properties* object properties)
        properties)))


(definition public (get object property (default #f))
  (mutex-lock! properties-mutex)
  (prog1 (table-ref (require-properties object) property default)
    (mutex-unlock! properties-mutex)))


(definition public (need object property)
  (tick
    (lambda (iter)
      (or (get object property #f)
          (begin
            (perform-stay)
            (iter))))))


(definition public (wait-for object property value)
  (tick
    (lambda (iter)
      (unless (equal? (get object property #f) value)
        (perform-stay)
        (iter)))))


(definition public (set object property value)
  (mutex-lock! properties-mutex)
  (table-set! (require-properties object) property value)
  (mutex-unlock! properties-mutex)
  (unspecified))


(definition public (clear object property)
  (mutex-lock! properties-mutex)
  (prog1 (table-clear (require-properties object) property)
    (mutex-unlock! properties-mutex)))


;;;
;;;; Event
;;;


(definition public (event-me)
  (get-me (%%current-event)))

(definition public (event-time)
  (get-time (%%current-event)))

(definition public (event-elapse)
  (get-elapse (%%current-event)))


;;;
;;;; Actor
;;;


(definition public (current-actor)
  (%%current-actor))


(definition public (near-player? (actor (current-actor)) (distance 5.))
  (check-actor actor 1 (near-player? actor distance)
    (check-real distance 2 (near-player? actor distance)
      (with-lock
        (lambda ()
          (%%near-player? actor distance))))))


(definition public (hostile)
  (let ((event (%%current-event)))
    (tick-hostile (get-actor event)
      (get-time event)
      (get-elapse event))
    (unspecified)))


(definition public (get-position element)
  (check-element element 1 (get-position element)
    (with-lock
      (lambda ()
        (%%get-position element)))))


(definition public (set-position element position)
  (check-element element 1 (set-position element position)
    (with-lock
      (lambda ()
        (%%set-position element position)
        (unspecified)))))


(definition public (set-lookat element direction/lookat)
  (check-element element 1 (set-lookat element direction/lookat)
    (let ((lookat (if (f64vector? direction/lookat)
                      (lookat-horizon direction/lookat)
                    direction/lookat)))
      (check-lookat lookat 2 (set-lookat element direction/lookat)
        (with-lock
          (lambda ()
            (%%set-lookat element lookat)
            (unspecified)))))))


@what-is-it?
(definition public (set-speed element speed)
  (check-element element 1 (set-speed element speed)
    (with-lock
      (lambda ()
        (%%set-speed element speed)
        (unspecified)))))


(definition public (set-motion actor motion)
  (check-actor actor 1 (set-motion actor motion)
    (with-lock
      (lambda ()
        (%%set-motion actor motion)
        (unspecified)))))


(definition public (idle)
  (let ((actor (current-actor)))
    (when actor
      (with-lock
        (lambda ()
          (%%idle actor)
          (unspecified))))))


(definition public (walk)
  (let ((actor (current-actor)))
    (when actor
      (with-lock
        (lambda ()
          (%%walk actor)
          (unspecified))))))


(definition public (run)
  (let ((actor (current-actor)))
    (when actor
      (with-lock
        (lambda ()
          (%%run actor)
          (unspecified))))))


(definition public (sprint)
  (let ((actor (current-actor)))
    (when actor
      (with-lock
        (lambda ()
          (%%sprint actor)
          (unspecified))))))


(definition public (set-sprint? actor flag)
  (check-actor actor 1 (set-sprint? actor flag)
    (with-lock
      (lambda ()
        (%%set-sprint? actor flag)
        (unspecified)))))


(definition public (set-hover? actor flag)
  (check-actor actor 1 (set-hover? actor flag)
    (with-lock
      (lambda ()
        (%%set-hover? actor flag)
        (unspecified)))))


(definition public (full-life)
  (with-lock
    (lambda ()
      (%%full-life)
      (unspecified))))


(definition public (animate actor animation (next: next #f))
  (with-lock
    (lambda ()
      (%%animate actor animation next: next)
      (unspecified))))


(definition public (teleport position)
  (with-lock
    (lambda ()
      (%%teleport position)
      (unspecified))))


(definition public (zone-in zone)
  (delay-event
    (lambda ()
      (change-zone (current-tier) zone)))
  (unspecified))


(definition public (zone-out)
  (delay-event
    (lambda ()
      (change-zone (current-tier) 'start)))
  (unspecified))


(definition public (fire)
  (let ((actor (current-actor)))
    (with-lock
      (lambda ()
        (%%fire actor)
        (unspecified)))))


(definition public (fire-at creature)
  (let ((actor (current-actor)))
    (with-lock
      (lambda ()
        (%%fire-at actor creature)
        (unspecified)))))


(definition public (fire-random)
  (let ((actor (current-actor)))
    (with-lock
      (lambda ()
        (%%fire-random actor)
        (unspecified)))))


(definition public (nearest-spawned (target #f))
  (let ((actor (current-actor))
        (target (or target (player))))
    (with-lock
      (lambda ()
        (%%nearest-spawned actor target)))))


(definition public (set-armor armor)
  (check-real armor 1 (armor armor)
    (setup-armor (current-actor) armor)
    (unspecified)))


(definition public (set-power power)
  (check-real power 1 (power power)
    (setup-power (current-actor) power)
    (unspecified)))


(definition public (trek)
  (let ((actor (current-actor)))
    (with-lock
      (lambda ()
        (%%trek actor)))))


(definition public (ride)
  (let ((world (current-world))
        (actor (current-actor)))
    (with-lock
      (lambda ()
        (%%ride actor (get-current (get-riders-folio world)))))))


(definition public (fly)
  (let ((world (current-world))
        (actor (current-actor)))
    (with-lock
      (lambda ()
        (%%fly actor (get-current (get-flyers-folio world)))))))


(definition public (wheels)
  (let ((actor (current-actor)))
    (with-lock
      (lambda ()
        (%%wheels actor)))))


(definition public (hummer)
  (let ((actor (current-actor)))
    (with-lock
      (lambda ()
        (%%hummer actor)))))


(definition public (saucer)
  (let ((actor (current-actor)))
    (with-lock
      (lambda ()
        (%%saucer actor)))))


(definition public (rocket)
  (let ((actor (current-actor)))
    (with-lock
      (lambda ()
        (%%rocket actor)))))


;;;
;;;; Emote
;;;


(definition public (emote emote)
  (let ((actor (current-actor)))
    (check-actor actor 0 (emote emote)
      (check-string emote 1 (emote emote)
        (when (find-animation (cache-model actor) emote)
          (set-animation-continuous actor emote))
        (unspecified)))))


(definition public (applaud)
  (emote "EmoteApplaud"))

(definition public (beg)
  (emote "EmoteBeg"))

(definition public (cheer)
  (emote "EmoteCheer"))

(definition public (cry)
  (emote "EmoteCry"))

(definition public (dance)
  (emote "EmoteDance"))

(definition public (kneel)
  (emote "EmoteKneel"))

(definition public (laugh)
  (emote "EmoteLaugh"))

(definition public (no)
  (emote "EmoteNo"))

(definition public (point)
  (emote "EmotePoint"))

(definition public (wave)
  (emote "EmoteWave"))

(definition public (yes)
  (emote "EmoteYes"))


;;;
;;;; Model
;;;


(definition public (get-model entity)
  (check-entity entity 1 (get-model entity)
    (with-lock
      (lambda ()
        (%%get-model entity)))))


(definition public (set-run-speed model speed)
  (check-model model 1 (set-run-speed model speed)
    (with-lock
      (lambda ()
        (%%set-run-speed model speed)
        (unspecified)))))


;;;
;;;; Sound
;;;


(definition public (sound path . rest)
  (bind-keywords ((volume #f)) rest
    (check-string path 1 (sound path . rest)
      (check-real+ volume volume: (sound path . rest)
        (with-lock
          (lambda ()
            (%%sound path volume: volume)
            (unspecified)))))))


(definition public (bark)
  (sound "sound/random/dog_barking" volume: .25))


;;;
;;;; Music
;;;


(definition public (close-music)
  (with-lock
    (lambda ()
      (%%close-music)
      (unspecified))))


;;;
;;;; Tick
;;;


(definition public (tick proc . rest)
  (bind-keywords ((period default-tick-period)) rest
    (check-positive period 1 (tick period proc . rest)
      (check-procedure proc 2 (tick period proc . rest)
        (%%tick period
          (lambda (actor script time elapse iter)
            (proc iter)))))))


(definition public (set-tick-handler actor handler)
  (with-lock
    (lambda ()
      (%%set-tick-handler actor handler)
      (unspecified))))

(definition public (set-interact-handler actor handler)
  (with-lock
    (lambda ()
      (%%set-interact-handler actor handler)
      (unspecified))))

(definition public (set-double-click-handler actor handler)
  (with-lock
    (lambda ()
      (%%set-double-click-handler actor handler)
      (unspecified))))

(definition public (set-power-handler actor handler)
  (with-lock
    (lambda ()
      (%%set-power-handler actor handler)
      (unspecified))))

(definition public (set-unpower-handler actor handler)
  (with-lock
    (lambda ()
      (%%set-unpower-handler actor handler)
      (unspecified))))

(definition public (set-teleport-handler actor handler)
  (with-lock
    (lambda ()
      (%%set-teleport-handler actor handler)
      (unspecified))))

(definition public (set-explode-handler actor handler)
  (with-lock
    (lambda ()
      (%%set-explode-handler actor handler)
      (unspecified))))

(definition public (set-hit-handler actor handler)
  (with-lock
    (lambda ()
      (%%set-hit-handler actor handler)
      (unspecified))))


;;;
;;;; Pause
;;;


(definition public (paused?)
  (%%paused?))


(definition public (pause)
  (%%pause)
  (unspecified))


(definition public (unpause)
  (%%unpause)
  (unspecified))


(definition public (toggle-paused)
  (%%toggle-paused)
  (unspecified))


;;;
;;;; Move
;;;


(definition public (stay)
  (%%stay)
  (unspecified))


(definition public (move distance)
  (check-positive distance 1 (move distance)
    (let ((distance (cast <fl> distance)))
      (%%move distance)
      (unspecified))))


(definition public (move-to . rest)
  (let ((target (if (and (= (length rest) 1)
                         (f64vector? (car rest)))
                    (car rest)
                  (bind (x y z) rest
                    (vertex (cast <fl> x) (cast <fl> y) (cast <fl> z))))))
    (%%move-to target)
    (unspecified)))


(definition public (rotate angle)
  (let ((angle (degree->radian (cast <fl> angle))))
    (%%rotate angle)
    (unspecified)))


(definition public (jump (impulsion #f))
  (let ((actor (current-actor)))
    (%%jump actor impulsion)
    (unspecified)))


(definition public (jump-player (impulsion #f))
  (let ((player (player)))
    (%%jump-player player impulsion)
    (unspecified)))


(definition public (follow target)
  (check-actor target 1 (follow target)
    (%%follow (current-actor) target)))


(definition public (follow-player)
  (%%follow (current-actor) (player)))


(definition public (path (actor (current-actor)))
  (check-actor actor 1 (path actor)
    (%%path actor)))


(definition public (bot (actor (current-actor)))
  (check-actor actor 1 (bot actor)
    (%%bot actor)))


;;;
;;;; LookAt
;;;


(definition public (lookat-horizon dir)
  (%%lookat-horizon dir))


(definition public (lookat-player (actor #f))
  (let ((actor (or actor (current-actor))))
    (with-lock
      (lambda ()
        (%%lookat-player actor)
        (unspecified)))))


(definition public (lookat-target target (actor #f))
  (let ((actor (or actor (current-actor))))
    (with-lock
      (lambda ()
        (%%lookat-target target actor)
        (unspecified)))))


(definition public (lookat-rotate element angle)
  (with-lock
    (lambda ()
      (%%lookat-rotate element angle)
      (unspecified))))


;;;
;;;; Block
;;;


(definition public (location i j k)
  (indexed i j k))


(definition public (add-block location id)
  (check-location location 1 (add-block location id)
    (check-integer id 2 (add-block location id)
      (with-lock
        (lambda ()
          (%%add-block location id)
          (unspecified))))))


(definition public (delete-block location)
  (check-location location 1 (delete-block location)
    (with-lock
      (lambda ()
        (%%delete-block location)
        (unspecified)))))


(definition public (change-block location id)
  (check-location location 1 (change-block location id)
    (check-integer id 2 (change-block location id)
      (with-lock
        (lambda ()
          (%%change-block location id)
          (unspecified))))))


(definition public (get-block location)
  (check-location location 1 (get-block location)
    (with-lock
      (lambda ()
        (%%get-block location)))))


(definition public (set-block location id)
  (check-location location 1 (set-block location id)
    (check-integer id 2 (set-block location id)
      (with-lock
        (lambda ()
          (%%set-block location id)
          (unspecified))))))


(definition public (set-block-data location data)
  (check-location location 1 (set-block-data location data)
    (check-integer data 2 (set-block-data location data)
      (with-lock
        (lambda ()
          (%%set-block-data location data)
          (unspecified))))))


(definition public (interact-block location)
  (check-location location 1 (interact-block location)
    (with-lock
      (lambda ()
        (%%interact-block location)
        (unspecified)))))


;;;
;;;; Entity
;;;


(definition public (add-entity . rest)
  (bind-keywords ((class #f) (name #f) (position #f) (lookat #f) (scale #f) (model #f) (script #f)) rest
    (with-lock
      (lambda ()
        (let ((class (or class Creature))
              (position (position-arg position))
              (lookat (lookat-arg lookat))
              (scale (scale-arg scale)))
          ;; todo add checks
          (%%add-entity class name position lookat scale model script))))))


(definition public (remove-entity entity)
  ;; todo add checks
  (with-lock
    (lambda ()
      (%%remove-entity entity))))


(definition public (find-entity name)
  ;; todo add checks
  (with-lock
    (lambda ()
      (%%find-entity name))))


;;;
;;;; Random
;;;


(definition public (random n)
  (check-integer n 1 (random n)
    (%%random n)))


;;;
;;;; Trail
;;;


(definition public (trail (color #f))
  (with-lock
    (lambda ()
      (%%trail color)
      (unspecified))))


(definition public (untrail)
  (with-lock
    (lambda ()
      (%%untrail)
      (unspecified))))


(definition public (trail-color color)
  (with-lock
    (lambda ()
      (%%trail-color color)
      (unspecified))))


(definition public (clear-trail)
  (with-lock
    (lambda ()
      (%%clear-trail)
      (unspecified))))


;;;
;;;; Plot
;;;


(definition public (plot-axes (dx 0) (dz 0))
  (let ((dx (cast <fl> dx))
        (dz (cast <fl> dz)))
    (plot-line (vertex (+ -10. dx) 4. (+ 0. dz)) (vertex (+ 10. dx) 4. (+ 0. dz)) 'blue)
    (plot-line (vertex (+ 0. dx) 4. (+ -10. dz)) (vertex (+ 0. dx) 4. (+ 10. dz)) 'blue)
    (loop (for x <fl> from -10. to 10. by 1.)
          (plot-line (vertex (+ x dx) 4. (+ -.5 dz)) (vertex (+ x dx) 4. (+ .5 dz)) 'blue))
    (loop (for z <fl> from -10. to 10. by 1.)
          (plot-line (vertex (+ -.5 dx) 4. (+ z dz)) (vertex (+ .5 dx) 4. (+ z dz)) 'blue)))
  (unspecified))


(definition public (plot-line from to (color 'red))
  (untrail)
  (move-to from)
  (trail color)
  (move-to to)
  (unspecified))


;;;
;;;; Belt
;;;


(definition public (belt-id rank)
  (%%belt-id rank))


(definition public (belt-count rank)
  (%%belt-count rank))


(definition public (belt-add rank id (count 1))
  (%%belt-add rank id count))


(definition public (belt-remove rank id (count 1))
  (%%belt-remove rank id count))


(definition public (belt-empty)
  (%%belt-empty))


;;;
;;;; Development
;;;


(definition public (show . rest)
  (let ((interface (current-interface)))
    (let ((pane (child interface 'chat))
          (message (format "{l detail: :describe}" rest)))
      (show-message pane "show" 'show message))))


;;;
;;;; Validate
;;;


(definition public (validate-setup context)
  (let ((instance (current-instance)))
    (set instance 'validate-context context)
    (clear instance 'validate-failures)))


(definition public (validate-failed message)
  (let ((instance (current-instance)))
    (set instance 'validate-failures (cons message (get instance 'validate-failures '())))))


(definition public (validate-report)
  (let ((instance (current-instance)))
    (let ((context (get instance 'validate-context))
          (failures (get instance 'validate-failures)))
      (if failures
          (say `(<span>
                  (<paragraph>
                    (<text> color: World-Yellow "The following validations failed:"))
                  ""
                  ,@(reverse failures))
               size: 24)
        (name context))
      (clear instance 'validate-context)
      (clear instance 'validate-failures)))))
