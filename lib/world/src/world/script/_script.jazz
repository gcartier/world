;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Scripts
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2016
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.script jazz


(export (world.scripting (only current-instance startup-script fallthrough-script))
        (world.script.syntax (phase syntax)))


@w (
(export (jazz.optimize (phase syntax)) ;; for
        (world)
        (world.audio)
        (world.autoload)
        (world.commands)
        (world.creature)
        (world.draw)
        (world.dyes)
        (world.generation.building)
        (world.geometry)
        (world.mark)
        (world.scripting)
        (world.script.contour)
        (world.script.syntax (phase syntax))
        (world.syntax (phase syntax))
        (world.travel))

(import (jazz.event)
        (jazz.geometry)
        (jazz.graphic)
        (world)
        (world.actor)
        (world.audio)
        (world.autoload)
        (world.billboard)
        (world.commands)
        (world.contour)
        (world.creature)
        (world.draw)
        (world.dyes)
        (world.entity)
        (world.generation)
        (world.generation.block)
        (world.geometry)
        (world.index)
        (world.mark)
        (world.homogeneous)
        (world.model)
        (world.scripter)
        (world.scripting)
        (world.syntax (phase syntax))
        (world.task)
        (world.travel))


;;;
;;;; World
;;;


(definition public (message msg)
  (with-lock
    (lambda ()
      (%%message msg))))


(definition public (say msg (size: size #f))
  (with-lock
    (lambda ()
      (%%say msg size: size))))


(definition public (name name)
  (with-lock
    (lambda ()
      (%%name name))))


;;;
;;;; Zone
;;;


(definition public (creatures)
  (with-lock
    (lambda ()
      (%%creatures))))


;;;
;;;; Script
;;;


(definition public (current-player)
  (current-me))


(definition public (script-sleep period)
  (let ((task (current-task))
        (exit (current-exit)))
    (task-sleep task period 0. exit)))


;;;
;;;; Properties
;;;


(definition protected *properties*
  (make-table test: eq? weak-keys: #t))


(definition protected (require-properties object)
  (or (table-ref *properties* object)
      (let ((properties (make-table test: eq?)))
        (table-set! *properties* object properties)
        properties)))


(definition public (get object property)
  (table-ref (require-properties object) property #f))


(definition public (set object property value)
  (table-set! (require-properties object) property value))


;;;
;;;; Event
;;;


(definition public (event-me)
  (get-me~ (current-event)))

(definition public (event-time)
  (get-time~ (current-event)))

(definition public (event-elapse)
  (get-elapse~ (current-event)))


;;;
;;;; Entity
;;;


(definition public (near-player? (actor #f) (distance #f))
  (let ((actor (or actor (current-actor)))
        (distance (or distance 5.)))
    (with-lock
      (lambda ()
        (%%near-player? actor distance)))))


(definition public (hostile)
  (let ((event (current-event)))
    (tick-hostile~ (get-actor~ event)
      (get-time~ event)
      (get-elapse~ event))))


(definition public (get-position element)
  (assert (is? element Element))
  (with-lock
    (lambda ()
      (%%get-position element))))


(definition public (set-position element position)
  (assert (is? element Element))
  (with-lock
    (lambda ()
      (%%set-position element position))))


(definition public (set-lookat element direction/lookat)
  (assert (is? element Element))
  (let ((lookat (if (f64vector? direction/lookat)
                    (lookat-horizon direction/lookat)
                  direction/lookat)))
    (with-lock
      (lambda ()
        (%%set-lookat element lookat)))))


(definition public (set-speed element speed)
  (assert (is? element Element))
  (with-lock
    (lambda ()
      (%%set-speed element speed))))


(definition public (set-motion actor motion)
  (assert (is? actor Actor))
  (with-lock
    (lambda ()
      (%%set-motion actor motion))))


(definition public (walk)
  (let ((actor (current-actor)))
    (let ((script (get-script~ actor)))
      (set-sprint? actor #f)
      (set-motion actor 'walk))))


(definition public (run)
  (let ((actor (current-actor)))
    (let ((script (get-script~ actor)))
      (set-sprint? actor #f)
      (set-motion actor 'run))))


(definition public (sprint)
  (let ((actor (current-actor)))
    (let ((script (get-script~ actor)))
      (set-sprint? actor #t)
      (set-motion actor 'run))))


(definition public (set-sprint? actor flag)
  (assert (is? actor Actor))
  (with-lock
    (lambda ()
      (%%set-sprint? actor flag))))


(definition public (set-hover? actor flag)
  (assert (is? actor Actor))
  (with-lock
    (lambda ()
      (%%set-hover? actor flag))))


(definition public (set-billboard actor name)
  (with-lock
    (lambda ()
      (%%set-billboard actor name))))


(definition public (full-life)
  (with-lock
    (lambda ()
      (%%full-life))))


(definition public (animate actor animation (next: next #f))
  (with-lock
    (lambda ()
      (%%animate actor animation next: next))))


(definition public (teleport position)
  (with-lock
    (lambda ()
      (%%teleport position))))


(definition public (zone-in zone)
  (delay-event
    (lambda ()
      (change-zone~ (current-tier) zone))))


(definition public (zone-out)
  (delay-event
    (lambda ()
      (change-zone~ (current-tier) 'start))))


;;;
;;;; Actor
;;;


(definition public (current-actor)
  (%%current-actor))


(definition public (fire (actor #f))
  (let ((actor (or actor (current-actor))))
    (with-lock
      (lambda ()
        (%%fire actor)))))


(definition public (fire-at creature)
  (let ((actor (current-actor)))
    (with-lock
      (lambda ()
        (%%fire-at actor creature)))))


(definition public (fire-random)
  (let ((actor (current-actor)))
    (with-lock
      (lambda ()
        (%%fire-random actor)))))


(definition public (nearest-spawned (actor #f) (target #f))
  (let ((actor (or actor (current-actor)))
        (target (or target (current-player))))
    (with-lock
      (lambda ()
        (%%nearest-spawned actor target)))))


;;;
;;;; Emote
;;;


(definition public applaud
  "EmoteApplaud")

(definition public beg
  "EmoteBeg")

(definition public cheer
  "EmoteCheer")

(definition public cry
  "EmoteCry")

(definition public dance
  "EmoteDance")

(definition public kneel
  "EmoteKneel")

(definition public laugh
  "EmoteLaugh")

(definition public no
  "EmoteNo")

(definition public point
  "EmotePoint")

(definition public wave
  "EmoteWave")

(definition public yes
  "EmoteYes")


(definition public (emote emote)
  (let ((actor (current-player)))
    (when (find-animation~ (cache-model~ actor) emote)
      (set-animation-continuous~ actor emote))))


;;;
;;;; Model
;;;


(definition public (get-model entity)
  (assert (is? entity Entity))
  (with-lock
    (lambda ()
      (%%get-model entity))))


(definition public (set-run-speed model speed)
  (assert (is? model Model))
  (with-lock
    (lambda ()
      (%%set-run-speed model speed))))


;;;
;;;; Sound
;;;


(definition public bark
  "sound/random/dog_barking")


(definition public (sound path (volume: volume #f))
  (with-lock
    (lambda ()
      (%%sound path volume: volume))))


;;;
;;;; Tick
;;;


(definition public (looping proc)
  (with-tick
    (lambda (actor script time elapse iter)
      (proc iter))))


(definition public (set-tick-handler actor invocation handler)
  (with-lock
    (lambda ()
      (%%set-tick-handler actor invocation handler))))

(definition public (set-interact-handler actor invocation handler)
  (with-lock
    (lambda ()
      (%%set-interact-handler actor invocation handler))))

(definition public (set-double-click-handler actor invocation handler)
  (with-lock
    (lambda ()
      (%%set-double-click-handler actor invocation handler))))

(definition public (set-power-handler actor invocation handler)
  (with-lock
    (lambda ()
      (%%set-power-handler actor invocation handler))))

(definition public (set-unpower-handler actor invocation handler)
  (with-lock
    (lambda ()
      (%%set-unpower-handler actor invocation handler))))

(definition public (set-teleport-handler actor invocation handler)
  (with-lock
    (lambda ()
      (%%set-teleport-handler actor invocation handler))))

(definition public (set-explode-handler actor invocation handler)
  (with-lock
    (lambda ()
      (%%set-explode-handler actor invocation handler))))

(definition public (set-hit-handler actor invocation handler)
  (with-lock
    (lambda ()
      (%%set-hit-handler actor invocation handler))))


;;;
;;;; Pause
;;;


(definition public (paused?)
  (%%paused?))


(definition public (pause)
  (%%pause))


(definition public (unpause)
  (%%unpause))


(definition public (toggle-paused)
  (%%toggle-paused))


;;;
;;;; Move
;;;


(definition public (stay)
  (%%stay))


(definition public (move distance)
  (let ((distance (cast <fl> distance)))
    (assert (>= distance 0.)
      (%%move distance))))


(definition public (move-to . rest)
  (let ((target (if (= (length rest) 1)
                    (car rest)
                  (bind (x y z) rest
                    (vertex (cast <fl> x) (cast <fl> y) (cast <fl> z))))))
    (%%move-to target)))


(definition public (rotate angle)
  (let ((angle (degree->radian (cast <fl> angle))))
    (%%rotate angle)))


(definition public (jump (actor #f) (impulsion #f))
  (let ((actor (or actor (current-actor))))
    (assert (is? actor Actor))
    (with-lock
      (lambda ()
        (%%jump actor impulsion)))))


(definition public (path (actor #f))
  (let ((actor (or actor (current-actor))))
    (assert (is? actor Actor))
    (%%path actor)))


;;;
;;;; LookAt
;;;


(definition public (lookat-horizon dir)
  (%%lookat-horizon dir))


(definition public (lookat-player (actor #f))
  (let ((actor (or actor (current-actor))))
    (with-lock
      (lambda ()
        (%%lookat-player actor)))))


(definition public (lookat-target target (actor #f))
  (let ((actor (or actor (current-actor))))
    (with-lock
      (lambda ()
        (%%lookat-target target actor)))))


(definition public (lookat-rotate element angle)
  (with-lock
    (lambda ()
      (%%lookat-rotate element angle))))


;;;
;;;; Block
;;;


(definition public (block i <fx> j <fx> k <fx>) <index>
  (indexed i j k))


(definition public (add-block location <index> id <fx>)
  (with-lock
    (lambda ()
      (%%add-block location id))))


(definition public (delete-block location <index>)
  (with-lock
    (lambda ()
      (%%delete-block location))))


(definition public (change-block location <index> id <fx>)
  (with-lock
    (lambda ()
      (%%change-block location id))))


(definition public (get-block location <index>) <fx>
  (with-lock
    (lambda ()
      (%%get-block location))))


(definition public (set-block location <index> id <fx>)
  (with-lock
    (lambda ()
      (%%set-block location id))))


(definition public (set-block-data location <index> data <fx>)
  (with-lock
    (lambda ()
      (%%set-block-data location data))))


(definition public (interact-block location <index>)
  (with-lock
    (lambda ()
      (%%interact-block location))))


;;;
;;;; Entity
;;;


(definition public (add-entity class id pos lookat model (script #f))
  (with-lock
    (lambda ()
      (%%add-entity class id pos lookat model script))))


;;;
;;;; Trail
;;;


(definition public (trail (color #f))
  (with-lock
    (lambda ()
      (%%trail color))))


(definition public (untrail)
  (with-lock
    (lambda ()
      (%%untrail))))


(definition public (trail-color color)
  (with-lock
    (lambda ()
      (%%trail-color color))))


(definition public (clear-trail)
  (with-lock
    (lambda ()
      (%%clear-trail))))


;;;
;;;; Plot
;;;


(definition public (plot-axes (dx 0) (dz 0))
  (let ((dx (cast <fl> dx))
        (dz (cast <fl> dz)))
    (plot-line (vertex (+ -10. dx) 4. (+ 0. dz)) (vertex (+ 10. dx) 4. (+ 0. dz)) 'blue)
    (plot-line (vertex (+ 0. dx) 4. (+ -10. dz)) (vertex (+ 0. dx) 4. (+ 10. dz)) 'blue)
    (loop (for x <fl> from -10. to 10. by 1.)
          (plot-line (vertex (+ x dx) 4. (+ -.5 dz)) (vertex (+ x dx) 4. (+ .5 dz)) 'blue))
    (loop (for z <fl> from -10. to 10. by 1.)
          (plot-line (vertex (+ -.5 dx) 4. (+ z dz)) (vertex (+ .5 dx) 4. (+ z dz)) 'blue))))


(definition public (plot-line from to (color 'red))
  (untrail)
  (move-to from)
  (trail color)
  (move-to to)))
)