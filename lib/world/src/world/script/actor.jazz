;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; Script Actor
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2016
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.script.actor jazz


(import (jazz.graphic)
        (world)
        (world.actor)
        (world.audio)
        (world.autoload)
        (world.billboard)
        (world.commands)
        (world.enemy)
        (world.entity)
        (world.geometry)
        (world.model)
        (world.scripting)
        (world.syntax (phase syntax)))


(definition public (set-all-run? flag)
  (set-default-run? flag))


;;;
;;;; State
;;;


(definition (current-properties)
  (let ((actor (current-actor)))
    (or (get-script-properties~ actor)
        (let ((table (make-table test: eq?)))
          (set-script-properties~ actor table)
          table))))


(definition public (get property (default #f))
  (table-ref (current-properties) property default))


(definition public (set property value)
  (table-set! (current-properties) property value))


;;;
;;;; Sound
;;;


(definition public bark
  "sound/random/dog_barking")


(definition public (sound path (volume: volume #f))
  (when sounds?
    (let ((sound (cache-stream-sound path)))
      (unless (playing?~ sound)
        (when volume
          (set-volume~ sound volume))
        (play~ sound)))))


;;;
;;;; Actor
;;;


(definition public (current-actor)
  (if (current-event)
      (car (current-event))
    (current-instance)))


(definition public (lookat-horizon dir)
  (horizon-lookat (vertex-normalize& (vertex& (vertex-x dir) 0. (vertex-z dir)))))


(definition public (near-player? (actor #f) (distance #f))
  (let ((actor (or actor (current-actor)))
        (distance (or distance 5.)))
    (<= (vertex-distance (get-position~ actor) (get-position~ (current-me))) distance)))


(definition public (lookat-player (actor #f))
  (let ((actor (or actor (current-actor))))
    (let ((dir (vertex- (get-position~ (current-me)) (get-position~ actor))))
      (set-lookat actor (lookat-horizon dir)))))


(definition public stay-commands
  (new Commands))

(definition public move-commands
  (let ((commands (new Commands)))
    (move-forward~ commands)
    commands))

(definition public jump-commands
  (let ((commands (new Commands)))
    (jump~ commands)
    commands))


(definition public (stay)
  (perform stay-commands))

(definition public (move)
  (perform move-commands))

(definition public (jump)
  (perform jump-commands))


(definition public (get-position element)
  (assert (is? element Element))
  (get-position~ element))


(definition public (set-position element position)
  (assert (is? element Element))
  (set-position~ element position))

(definition public (set-lookat element lookat)
  (assert (is? element Element))
  (set-lookat~ element lookat))

(definition public (set-speed element speed)
  (assert (is? element Element))
  (set-speed~ element speed))


(definition public (set-run? actor flag)
  (assert (is? actor Actor))
  (set-run?~ actor flag))


(definition public (set-tick-handler actor handler)
  (set-script-tick~ actor handler))


(definition public (perform commands)
  (assert (is? commands Commands))
  (bind (actor time elapse exit) (current-event)
    (tick-actor~ actor commands time elapse exit #t 'slide)))


(definition public (set-billboard actor text)
  (set-billboard-texture~ actor (make-billboard-element (list text {Font font-name: tahoma point-size: 36 hint-style: slight hint-metrics: on} {Color World-Yellow} 2.))))


;;;
;;;; Model
;;;


(definition public (get-model entity)
  (assert (is? entity Entity))
  (cache-model~ entity))


(definition public (set-run-speed model speed)
  (assert (is? model Model))
  (set-run-speed~ model speed)))
