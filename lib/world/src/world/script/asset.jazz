;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Asset Scripts
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2016
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.script.asset jazz


(import (jazz.io)
        (world)
        (world.asset)
        (world.autoload)
        (world.entity)
        (world.scripter)
        (world.scripting)
        (world.scriptum)
        (world.syntax (phase syntax)))


(definition protected asset-entities
  (make-table test: asset=? hash: asset-hash))

  ;; sejour quick hack to think through
(definition protected (reset-asset-entities)
  (set! asset-entities (make-table test: asset=? hash: asset-hash)))


(definition public (find-asset-entity asset)
  (table-ref asset-entities asset #f))


;; quick hack
(definition public (unregister-asset asset)
  (table-clear asset-entities asset))


(definition public (register-asset-script asset)
  (or (table-ref asset-entities asset #f)
      (let ((entity (new Asset-Entity asset: asset)))
        (new Script parent: entity text: (load-asset-text asset))
        (table-set! asset-entities asset entity)
        entity)))


(definition public (launch-asset-script asset)
  (let ((entity (register-asset-script asset)))
    (let ((script (get-script~ entity)))
      (run-task~ entity script))))


(definition public (save-asset-script asset entity)
  (let ((file (get-file~ asset)))
    (call-with-output-file (path-settings file)
      (lambda (output)
        (display (get-text~ (get-script~ entity)) output)))))


;;;
;;;; Asset-Entity
;;;


(class Asset-Entity extends Entity
  
  
  (property asset initialize #f accessors generate)
  
  
  (method override (task-name)
    'asset)
  
  
  (method override (virtual?)
    #t)))
