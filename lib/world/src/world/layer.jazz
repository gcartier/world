;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Biome Layers
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2016
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


;; TODO
;; - straiten the for i = 0; i < areaHeight


(module world.layer jazz


(import (jazz.geometry)
        (world)
        (world.autoload)
        (world.biome)
        (world.foreign)
        (world.geometry)
        (world.syntax (phase syntax)))


;;;
;;;; Layer
;;;


(class Layer extends Object
  
  
  (slot parent    getter generate)
  (slot chunkSeed getter generate)
  
  
  (method override (initialize parent)
    (set! parent~self parent))
  
  
  (method public virtual (generate x y width height)
    ))


;;;
;;;; Ocean
;;;


(class Ocean-Layer extends Layer
  
  
  (method override (generate x y width height)
    (let ((layer (make-vector (* width height))))
      (loop (for i from 0 below height)
            (loop (for j from 0 below width)
                  (initChunkSeed (+ j x) (+ i y))
                  (vector-set! layer (+ j (* i width)) (if (= (nextInt 10) 0) 1 0))))
      layer)))


(class Remove-Too-Much-Ocean-Layer extends Layer
  
  
  (method override (generate x y width height)
    (let ((i (- x 1))
          (j (- y 1))
          (k (+ width 2))
          (l (+ height 2)))
      (let ((pint (generate~ parent i j k l))
            (aint (make-vector (* width height))))
        (loop (for i1 from 0 below height)
              (loop (for j1 from 0 below width)
                    (let ((k1 (vector-ref pint (+ j1 1 (* (- (+ i1 1) 1) (+ width 2)))))
                          (l1 (vector-ref pint (+ j1 1 1 (* (+ i1 1) (+ width 2)))))
                          (i2 (vector-ref pint (+ (- (+ j1 1) 1) (* (+ i1 1) (+ width 2)))))
                          (j2 (vector-ref pint (+ j1 1 (* (+ i1 1 1) (+ width 2)))))
                          (k2 (vector-ref pint (+ j1 1 (* (+ i1 1) k)))))
                      (vector-set! aint (+ j1 (* i1 width)) k2)
                      (initChunkSeed (+ j1 x) (+ i1 y))
                      (when (and (= k2 0)
                                 (= k1 0)
                                 (= l1 0)
                                 (= i2 0)
                                 (= j2 0)
                                 (= (nextInt 2) 0))
                        (vector-set! aint (+ j1 (* i1 width)) 1)))))
        aint))))


;;;
;;;; Zoom
;;;


(class Zoom-Layer extends Layer
  
  
  (method override (generate x y width height)
    (let ((i <fx> (arithmetic-shift x -1))
          (j <fx> (arithmetic-shift y -1))
          (k <fx> (+ (arithmetic-shift width -1) 2))
          (l <fx> (+ (arithmetic-shift height -1) 2)))
      (let ((pint (generate~ parent i j k l))
            (i1 <fx> (arithmetic-shift (- k 1) 1))
            (j1 <fx> (arithmetic-shift (- l 1) 1)))
        (let ((aint (make-vector (* i1 j1))))
          (loop (for k1 from 0 below (- l 1))
                (let ((l1 <fx> (* (arithmetic-shift k1 1) i1)))
                  (let ((i2 <fx> 0))
                    (let ((j2 <fx> (vector-ref pint (+ i2 0 (* (+ k1 0) k))))
                          (k2 <fx> (vector-ref pint (+ i2 0 (* (+ k1 1) k)))))
                      (loop (for i2 from 0 below (- k 1))
                            (initChunkSeed
                              (arithmetic-shift (+ i2 i) 1)
                              (arithmetic-shift (+ k1 j) 1))
                            (let ((l2 <fx> (vector-ref pint (+ i2 1 (* (+ k1 0) k)))))
                              (let ((m2 <fx> (vector-ref pint (+ i2 1 (* (+ k1 1) k)))))
                                (vector-set! aint l1 j2)
                                (vector-set! aint (+ l1 i1) (selectRandom j2 k2))
                                (increase! l1)
                                (vector-set! aint l1 (selectRandom j2 l2))
                                (vector-set! aint (+ l1 i1) (selectModeOrRandom j2 l2 k2 m2))
                                (increase! l1)
                                (set! j2 l2)
                                (set! k2 m2))))))))
          (let ((aint2 (make-vector (* width height))))
            (loop (for j3 from 0 below height)
                  (let ((src-start (+ (* (+ j3 (bitwise-and y 1)) i1) (bitwise-and x 1))))
                    (subvector-move! aint src-start (+ src-start width) aint2 (* j3 width))))
            aint2)))))
  
  
  (method (selectRandom a <fx> b) <fx>
    (vector-ref (vector a b) (nextInt 2)))
  
  
  (method protected virtual (selectModeOrRandom a <fx> b <fx> c <fx> d <fx>) <fx>
    (cond ((and (= b c) (= c d)) b)
          ((and (= a b) (= a c)) a)
          ((and (= a b) (= a d)) a)
          ((and (= a c) (= a d)) a)
          ((and (= a b) (/= c d)) a)
          ((and (= a c) (/= b d)) a)
          ((and (= a d) (/= b c)) a)
          ((and (= b c) (/= a d)) b)
          ((and (= b d) (/= a c)) b)
          ((and (= c d) (/= a b)) c)
          (else (vector-ref (vector a b c d) (nextInt 4))))))


(class Fuzzy-Zoom-Layer extends Zoom-Layer
  
  
  (method override (selectModeOrRandom a <fx> b <fx> c <fx> d <fx>) <fx>
    (vector-ref (vector a b c d) (nextInt 4))))


(definition public (magnify layer count)
  (loop (repeat count)
        (set! layer (new Zoom-Layer layer)))
  layer)


;;;
;;;; Zmooth
;;;


(class Zmooth-Layer extends Layer
  
  
  (method override (generate x y width height)
    (let ((i (- x 1))
          (j (- y 1))
          (k (+ width 2))
          (l (+ height 2)))
      (let ((pint (generate~ parent i j k l))
            (aint (make-vector (* width height))))
        (loop (for i1 from 0 below height)
              (loop (for j1 from 0 below width)
                    (let ((k1 (vector-ref pint (+ j1 0 (* (+ i1 1) k))))
                          (l1 (vector-ref pint (+ j1 2 (* (+ i1 1) k))))
                          (i2 (vector-ref pint (+ j1 1 (* (+ i1 0) k))))
                          (j2 (vector-ref pint (+ j1 1 (* (+ i1 2) k))))
                          (k2 (vector-ref pint (+ j1 1 (* (+ i1 1) k)))))
                      (cond ((and (= k1 l1) (= i2 j2))
                             (initChunkSeed (+ j1 x) (+ i1 y))
                             (if (= (nextInt 2) 0)
                                 (set! k2 k1)
                               (set! k2 i2)))
                            (else
                             (when (= k1 l1)
                               (set! k2 k1))
                             (when (= i2 j2)
                               (set! k2 i2))))
                      (vector-set! aint (+ j1 (* i1 width)) k2))))
          aint))))


;;;
;;;; River
;;;


(class Init-River-Layer extends Layer


  (method override (generate x y width height)
    (let ((pint (generate~ parent x y width height))
          (aint (make-vector (* width height))))
      (loop (for i from 0 below height)
            (loop (for j from 0 below width)
                  (initChunkSeed (+ j x) (+ i y))
                  (vector-set! aint (+ j (* i width))
                    (if (> (vector-ref pint (+ j (* i width))) 0)
                        (+ (nextInt 299999) 2)
                      0))))
      aint)))


(class River-Layer extends Layer
  
  
  (method override (generate x y width height)
    (define (filter val)
      (if (>= val 2)
          (+ 2 (bitwise-and val 1))
        val))
    
    (let ((i (- x 1))
          (j (- y 1))
          (k (+ width 2))
          (l (+ height 2)))
      (let ((pint (generate~ parent i j k l))
            (aint (make-vector (* width height))))
        (loop (for i1 from 0 below height)
              (loop (for j1 from 0 below width)
                    (let ((k1 (filter (vector-ref pint (+ j1 0 (* (+ i1 1) k)))))
                          (l1 (filter (vector-ref pint (+ j1 2 (* (+ i1 1) k)))))
                          (i2 (filter (vector-ref pint (+ j1 1 (* (+ i1 0) k)))))
                          (j2 (filter (vector-ref pint (+ j1 1 (* (+ i1 2) k)))))
                          (k2 (filter (vector-ref pint (+ j1 1 (* (+ i1 1) k))))))
                      (vector-set!
                        aint
                        (+ j1 (* i1 width))
                        (if (and (= k2 k1)
                                 (= k2 i2)
                                 (= k2 l1)
                                 (= k2 j2))
                            -1 ;; todo -1
                          River)))))
        aint))))


(class Mix-River-Layer extends Layer
  
  
  (slot biome-layer)
  (slot river-layer)
  
  
  (method override (initialize biome-layer river-layer)
    (set! biome-layer~self biome-layer)
    (set! river-layer~self river-layer))
  
  
  (method override (generate x y width height)
    (let ((biome (generate~ biome-layer x y width height))
          (river (generate~ river-layer x y width height))
          (aint (make-vector (* width height))))
      (loop (for i from 0 below (* width height))
            (do (if (and (/= (vector-ref biome i) Ocean)
                         (/= (vector-ref biome i) DeepOcean))
                    (if (= (vector-ref river i) River)
                        (if (= (vector-ref biome i) IcePlains)
                            (vector-set! aint i FrozenRiver)
                          (if (and (/= (vector-ref biome i) MushroomIsland)
                                   (/= (vector-ref biome i) MushroomIslandShore))
                              (vector-set! aint i (bitwise-and (vector-ref river i) 255))
                            (vector-set! aint i MushroomIslandShore)))
                      (vector-set! aint i (vector-ref biome i)))
                  (vector-set! aint i (vector-ref biome i)))))
      aint)))


;;;
;;;; Biomes
;;;


(class Biomes-Layer extends Layer
  
  
  (method override (generate x y width height)
    (let ((layer (make-vector (* width height))))
      (loop (for i from 0 below height)
            (loop (for j from 0 below width)
                  (initChunkSeed (+ j x) (+ i y))
                  (vector-set! layer (+ j (* i width)) (vector-ref Primary-Biomes (nextInt (vector-length Primary-Biomes))))))
      layer)))


;;;
;;;; Hills
;;;


(class Hills-Layer extends Layer
  
  
  (slot river-layer)
  
  
  (method override (initialize parent river-layer)
    (nextmethod parent)
    (set! river-layer~self river-layer))
  
  
  (method override (generate x y width height)
    (let ((pint (generate~ parent (- x 1) (- y 1) (+ width 2) (+ height 2)))
          (rint (generate~ river-layer (- x 1) (- y 1) (+ width 2) (+ height 2)))
          (aint (make-vector (* width height))))
      (loop (for i from 0 below height)
            (loop (for j from 0 below width)
                  (initChunkSeed (+ j x) (+ i y))
                  (let ((k (vector-ref pint (+ j 1 (* (+ i 1) (+ width 2)))))
                        (l (vector-ref rint (+ j 1 (* (+ i 1) (+ width 2))))))
                    (let ((flag (= (modulo (- l 2) 29) 0)))
                      (when (> k 255) (break))
                      (let ((biome (id->biome k)))
                        (let ((flag1 (and biome (mutation?~ biome))))
                          (if (and (/= k 0)
                                   (>= l 2)
                                   (= (modulo (- l 2) 29) 1)
                                   (not flag1))
                              (let ((biome3 (mutate~ biome)))
                                (vector-set!
                                  aint
                                  (+ j (* i width))
                                  (if (not biome3)
                                      k
                                    (get-id~ biome3))))
                            (if (and (/= (nextInt 3) 0) (not flag))
                                (vector-set! aint (+ j (* i width)) k)
                              (let ((biome1 biome))
                                (cond ((eq? biome DESERT)
                                       (set! biome1 DESERT_HILLS))
                                      ((eq? biome FOREST)
                                       (set! biome1 FOREST_HILLS))
                                      ((eq? biome BIRCH_FOREST)
                                       (set! biome1 BIRCH_FOREST_HILLS))
                                      ((eq? biome ROOFED_FOREST)
                                       (set! biome1 PLAINS))
                                      ((eq? biome TAIGA)
                                       (set! biome1 TAIGA_HILLS))
                                      ((eq? biome MEGA_TAIGA)
                                       (set! biome1 MEGA_TAIGA_HILLS))
                                      ((eq? biome COLD_TAIGA)
                                       (set! biome1 COLD_TAIGA_HILLS))
                                      ((eq? biome PLAINS)
                                       (if (= (nextInt 3) 0)
                                           (set! biome1 FOREST_HILLS)
                                         (set! biome1 FOREST)))
                                      ((eq? biome ICE_PLAINS)
                                       (set! biome1 ICE_MOUNTAINS))
                                      ((eq? biome JUNGLE)
                                       (set! biome1 JUNGLE_HILLS))
                                      ((eq? biome OCEAN)
                                       (set! biome1 DEEP_OCEAN))
                                      ((eq? biome EXTREME_HILLS)
                                       (set! biome1 EXTREME_HILLS_PLUS))
                                      ((eq? biome SAVANNA)
                                       (set! biome1 SAVANNA_PLATEAU))
                                      ((biomesEqualOrMesaPlateau k (get-id~ MESA_PLATEAU_F))
                                       (set! biome1 MESA))
                                      (else
                                       (when (and (eq? biome DEEP_OCEAN)
                                                  (= (nextInt 3) 0))
                                         (let ((i1 (nextInt 2)))
                                           (if (= i1 0)
                                               (set! biome1 PLAINS)
                                             (set! biome1 FOREST))))))
                                (let ((j2 (get-id~ biome1)))
                                  (when (and flag (/= j2 k))
                                    (let ((biome2 (mutate~ biome1)))
                                      (set! j2
                                            (if (not biome2)
                                                k
                                              (get-id~ biome2)))))
                                  (if (= j2 k)
                                      (vector-set! aint (+ j (* i width)) k)
                                    (let ((k2 (vector-ref pint (+ j 1 (* (+ i 0) (+ width 2)))))
                                          (j1 (vector-ref pint (+ j 2 (* (+ i 1) (+ width 2)))))
                                          (k1 (vector-ref pint (+ j 0 (* (+ i 1) (+ width 2)))))
                                          (l1 (vector-ref pint (+ j 1 (* (+ i 2) (+ width 2)))))
                                          (i2 0))
                                      (when (biomesEqualOrMesaPlateau k2 k) (increase! i2))
                                      (when (biomesEqualOrMesaPlateau j1 k) (increase! i2))
                                      (when (biomesEqualOrMesaPlateau k1 k) (increase! i2))
                                      (when (biomesEqualOrMesaPlateau l1 k) (increase! i2))
                                      (if (>= i2 3)
                                          (vector-set! aint (+ j (* i width)) j2)
                                        (vector-set! aint (+ j (* i width)) k))))))))))))))
      aint))
  
  
  (method (biomesEqualOrMesaPlateau biomeIDA biomeIDB)
    (if (= biomeIDA biomeIDB)
        #t
      (let ((biome (id->biome biomeIDA))
            (biome1 (id->biome biomeIDB)))
        (if (and biome biome1)
            (if (and (neq? biome MESA_PLATEAU_F) (neq? biome MESA_PLATEAU))
                (or (eq? biome biome1)
                    @todo
                    (eq? (getBiomeClass~ biome) (getBiomeClass~ biome1)))
              (or (eq? biome1 MESA_PLATEAU_F) (eq? biome1 MESA_PLATEAU)))
          #f)))))


;;;
;;;; World
;;;


(definition river-size <fx>
  4)


(definition public world-layer
  (let ((heightmap #f)
        (world #f))
    (lambda (heightmap?)
      (or (if heightmap? heightmap world) ;; ugly to fix
          (let ((ocean (new Ocean-Layer #f)))
            (let ((fuzzy-zoom-ocean (new Fuzzy-Zoom-Layer ocean)))
              (let ((zoom-ocean (new Zoom-Layer fuzzy-zoom-ocean)))
                (let ((remove-too-much-ocean (new Remove-Too-Much-Ocean-Layer zoom-ocean)))
                  (let ((init-river (new Init-River-Layer remove-too-much-ocean)))
                    (let ((magnify-init-river-2x (magnify init-river 2)))
                      (let ((magnify-init-river (magnify magnify-init-river-2x river-size)))
                        (let ((river (new River-Layer magnify-init-river)))
                          (let ((smooth-river (new Zmooth-Layer river))
                                (biomes (new Biomes-Layer remove-too-much-ocean)))
                            (let ((magnify-biomes-2x (magnify biomes 2)))
                              (let ((hills (new Hills-Layer magnify-biomes-2x magnify-init-river-2x)))
                                (let ((zoom-hills-4x (new Zoom-Layer (new Zoom-Layer (new Zoom-Layer (new Zoom-Layer hills))))))
                                  (let ((smooth-hills (new Zmooth-Layer zoom-hills-4x)))
                                    (let ((mix-river (new Mix-River-Layer smooth-hills smooth-river)))
                                      (set! heightmap mix-river)
                                      (set! world (new Zoom-Layer (new Zoom-Layer mix-river)))
                                      (if heightmap?
                                          heightmap
                                        world)))))))))))))))))))


(definition public (generate-heightmap-biomes region-x region-z chunk-x chunk-z) <vector>
  (let ((world (world-layer #t)))
    (generate~ world
      (+ (* region-x 128) (* chunk-x 4))
      (+ (* region-z 128) (* chunk-z 4))
      10 10)))


(definition public (generate-biomes region-x region-z chunk-x chunk-z) <vector>
  (let ((world (world-layer #f)))
    (generate~ world
      (+ (* region-x 512) (* chunk-x 16))
      (+ (* region-z 512) (* chunk-z 16))
      16 16)))


(definition public (generate-u8biomes region-x region-z chunk-x chunk-z) <u8vector>
  (let ((biomes (generate-biomes region-x region-z chunk-x chunk-z)))
    (let ((len (vector-length biomes)))
      (let ((vec (make-u8vector len)))
        (loop (for i from 0 below len)
              (u8vector-set! vec i (vector-ref biomes i)))
        vec)))))
