;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Biome Layers
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2016
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


;; TODO
;; - straiten the for i = 0; i < areaHeight


(module world.layer jazz


(import (jazz.geometry)
        (world)
        (world.autoload)
        (world.biome)
        (world.foreign)
        (world.geometry)
        (world.syntax (phase syntax)))


;;;
;;;; Layer
;;;


(class Layer extends Object
  
  
  (slot parent    getter generate)
  (slot chunkSeed getter generate)
  
  
  (method override (initialize parent)
    (set! parent~self parent))
  
  
  (method public virtual (generate x y width height)
    ))


;;;
;;;; Ocean
;;;


(class Ocean-Layer extends Layer
  
  
  (method override (generate x y width height)
    (let ((layer (make-u8vector (* width height))))
      (loop (for i from 0 below height)
            (loop (for j from 0 below width)
                  (initChunkSeed (+ j x) (+ i y))
                  (u8vector-set! layer (+ j (* i width)) (if (= (nextInt 10) 0) Plains Ocean))))
      layer)))


;;;
;;;; Biomes
;;;


(class Biomes-Layer extends Layer
  
  
  (method override (generate x y width height)
    (let ((layer (make-u8vector (* width height))))
      (loop (for i from 0 below height)
            (loop (for j from 0 below width)
                  (initChunkSeed (+ j x) (+ i y))
                  (u8vector-set! layer (+ j (* i width)) (vector-ref Primary-Biomes (nextInt (vector-length Primary-Biomes))))))
      layer)))


;;;
;;;; Zoom
;;;


(class Zoom-Layer extends Layer
  
  
  (method override (generate x y width height)
    (let ((i <fx> (arithmetic-shift x -1))
          (j <fx> (arithmetic-shift y -1))
          (k <fx> (+ (arithmetic-shift width -1) 2))
          (l <fx> (+ (arithmetic-shift height -1) 2)))
      (let ((pint (generate~ parent i j k l))
            (i1 <fx> (arithmetic-shift (- k 1) 1))
            (j1 <fx> (arithmetic-shift (- l 1) 1)))
        (let ((aint (make-u8vector (* i1 j1))))
          (loop (for k1 from 0 below (- l 1))
                (let ((l1 <fx> (* (arithmetic-shift k1 1) i1)))
                  (let ((i2 <fx> 0))
                    (let ((j2 <fx> (u8vector-ref pint (+ i2 0 (* (+ k1 0) k))))
                          (k2 <fx> (u8vector-ref pint (+ i2 0 (* (+ k1 1) k)))))
                      (loop (for i2 from 0 below (- k 1))
                            (initChunkSeed
                              (arithmetic-shift (+ i2 i) 1)
                              (arithmetic-shift (+ k1 j) 1))
                            (let ((l2 <fx> (u8vector-ref pint (+ i2 1 (* (+ k1 0) k)))))
                              (let ((m2 <fx> (u8vector-ref pint (+ i2 1 (* (+ k1 1) k)))))
                                (u8vector-set! aint l1 j2)
                                (u8vector-set! aint (+ l1 i1) (selectRandom j2 k2))
                                (increase! l1)
                                (u8vector-set! aint l1 (selectRandom j2 l2))
                                (u8vector-set! aint (+ l1 i1) (selectModeOrRandom j2 l2 k2 m2))
                                (increase! l1)
                                (set! j2 l2)
                                (set! k2 m2))))))))
          (let ((aint2 (make-u8vector (* width height))))
            (loop (for j3 from 0 below height)
                  (let ((src-start (+ (* (+ j3 (bitwise-and y 1)) i1) (bitwise-and x 1))))
                    (subu8vector-move! aint src-start (+ src-start width) aint2 (* j3 width))))
            aint2)))))
  
  
  (method (selectRandom a b)
    (vector-ref (vector a b) (nextInt 2)))
  
  
  ;; todo correct semantic
  (method (selectModeOrRandom a b c d)
    (vector-ref (vector a b c d) (nextInt 4))))


;;;
;;;; World
;;;


(definition public world-layer
  (let ((before #f)
        (world #f))
    (lambda (before?)
      (or (if before? before world) ;; ugly
          (let ((ocean (new Ocean-Layer #f)))
            (let ((biomes (new Biomes-Layer ocean)))
              (let ((zoom (new Zoom-Layer (new Zoom-Layer (new Zoom-Layer (new Zoom-Layer biomes))))))
                (set! before zoom)
                (set! world (new Zoom-Layer (new Zoom-Layer zoom)))
                (if before?
                    before
                  world))))))))


(definition public (generate-heightmap-biomes region-x region-z chunk-x chunk-z)
  (let ((world (world-layer #t)))
    (generate~ world
      (+ (* region-x 128) (* chunk-x 4))
      (+ (* region-z 128) (* chunk-z 4))
      10 10)))


(definition public (generate-biomes region-x region-z chunk-x chunk-z)
  (let ((world (world-layer #f)))
    (generate~ world
      (+ (* region-x 512) (* chunk-x 16))
      (+ (* region-z 512) (* chunk-z 16))
      16 16))))
