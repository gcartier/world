;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Capabilities
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.capabilities jazz


(import (jazz.io)
        (jazz.opengl.glew)
        (jazz.settings)
        (jazz.snapshot)
        (world))


(proclaim (not check)
          (warn optimizations))


(definition public caps-version
  1.2)


(definition public (estimate-computer-speed)
  (declare (proper-tail-calls))
  (declare (not safe))
  (declare (not interrupts-enabled))
  (let ((before (current-monotonic)))
    (let (loop (c <fx> 1000000))
      (when (>= c 0)
        (loop (- c 1))))
    (let ((after (current-monotonic)))
      (let ((elapse (- after before)))
        ;; this division makes my intel macbook pro get around 100
        (/ 1. elapse 33.)))))


(definition public (estimate-garbage-collect)
  (gc)
  (let ((before (current-monotonic)))
    (gc)
    (let ((after (current-monotonic)))
      (- after before))))


(definition protected (estimate-speed-profile speed)
  (cond ((>= speed 80.) 'high)
        ((>= speed 35.) 'medium)
        (else 'low)))


(definition public (estimate-graphic-profile speed)
  'standard
  @obsolete
  (case (estimate-speed-profile speed)
    ((high) 'standard)
    ((medium) 'medium)
    ((low) 'low)))


(definition public (describe-capabilities output (computer-speed: computer-speed #f))
  (let ((computer-speed (or computer-speed (estimate-computer-speed)))
        (garbage-collect (estimate-garbage-collect)))
    (let ((graphic-profile (estimate-graphic-profile computer-speed)))
      (format output "{a} {a}{%}" 'caps.version caps-version)
      (format output "{a} {r precision: 3}{%}" 'caps.computer-speed computer-speed)
      (format output "{a} {r precision: 3}{%}" 'caps.garbage-collect garbage-collect)
      (format output "{a} {a}{%}" 'caps.profile.graphic graphic-profile))))


(definition public (create-capabilities file (computer-speed: computer-speed #f))
  (create-directories file)
  (call-with-output-file (path-settings file)
    (lambda (output)
      (describe-capabilities output computer-speed: computer-speed))))


;;;
;;;; OpenGL
;;;


(definition public (check-extension ext)
  (format "{a} {a} supported"
          ext
          (if (glewIsSupported ext)
              "is"
            "not")))


(definition public (update-opengl-capabilities caps-settings)
  (unless (get-setting caps-settings 'caps.opengl.version)
    (set-setting caps-settings 'caps.opengl.version (glGetString GL_VERSION))
    (set-setting caps-settings 'caps.opengl.support.texture-array? (glewIsSupported "GL_EXT_texture_array"))
    (set-setting caps-settings 'caps.opengl.support.framebuffer-object? (glewIsSupported "GL_EXT_framebuffer_object"))
    (set-setting caps-settings 'caps.opengl.support.framebuffer-blit? (glewIsSupported "GL_EXT_framebuffer_blit"))
    (set-setting caps-settings 'caps.opengl.support.framebuffer-multisample? (glewIsSupported "GL_EXT_framebuffer_multisample"))
    (set-setting caps-settings 'caps.opengl.support.multisample? (glewIsSupported "GL_ARB_multisample"))
    (set-setting caps-settings 'caps.opengl.support.debug-output? (glewIsSupported "GL_ARB_debug_output"))
    (set-setting caps-settings 'caps.opengl.max-texture-size (glGetInteger* GL_MAX_TEXTURE_SIZE))
    (set-setting caps-settings 'caps.opengl.max-3d-texture-size (glGetInteger* GL_MAX_3D_TEXTURE_SIZE))
    (set-setting caps-settings 'caps.opengl.max-texture-image-units (glGetInteger* GL_MAX_TEXTURE_IMAGE_UNITS))
    (set-setting caps-settings 'caps.opengl.max-vertex-uniform-components (glGetInteger* GL_MAX_VERTEX_UNIFORM_COMPONENTS))
    (set-setting caps-settings 'caps.opengl.max-fragment-uniform-components (glGetInteger* GL_MAX_FRAGMENT_UNIFORM_COMPONENTS))
    (save-content caps-settings)))


;;;
;;;; Update
;;;


(definition public (update-capabilities caps-settings)
  (update-opengl-capabilities caps-settings))


;;;
;;;; Snapshot
;;;


(definition public (add-capabilities-to-snapshot caps-settings)
  (add-snapshot-settings caps-settings)))
