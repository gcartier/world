;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Capabilities
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.capabilities jazz


(import (jazz.io)
        (jazz.opengl.glew))


(definition public (check-extension ext)
  (format "{a} {a} supported"
          ext
          (if (glewIsSupported ext)
              "is"
            "not")))


(definition public estimate-computer-speed
  (let ((estimate #f))
    (lambda ()
      (declare (proper-tail-calls))
      (or estimate
          (let ((before (current-seconds)))
            (let (loop (c 10000))
              (when (>= c 0)
                (loop (- c 1))))
            (let ((after (current-seconds)))
              (let ((elapse (- after before)))
                ;; the division is so my macbook pro gets around 100
                (let ((speed (/ 1. elapse 3300.)))
                  (set! estimate speed)
                  speed))))))))


(definition public (estimate-garbage-collect)
  (gc)
  (let ((before (current-seconds)))
    (gc)
    (let ((after (current-seconds)))
      (- after before))))


(definition public (describe-capabilities output (opengl?: opengl? #t))
  (format output "Speed {a}{%}" (estimate-computer-speed))
  (format output "Garbage collect {a}{%}{%}" (estimate-garbage-collect))
  (when opengl?
    (format output "OpenGL {a}{%}{%}" (glGetString GL_VERSION))
    (format output "{a}{%}" (check-extension "GL_EXT_texture_array"))
    (format output "{a}{%}" (check-extension "GL_EXT_framebuffer_object"))
    (format output "{a}{%}" (check-extension "GL_EXT_framebuffer_blit"))
    (format output "{a}{%}" (check-extension "GL_EXT_framebuffer_multisample"))
    (format output "{a}{%}" (check-extension "GL_ARB_multisample"))
    (format output "{a}{%}{%}" (check-extension "GL_ARB_debug_output"))
    (format output "GL_MAX_TEXTURE_SIZE: {a}{%}" (glGetInteger* GL_MAX_TEXTURE_SIZE))
    (format output "GL_MAX_3D_TEXTURE_SIZE: {a}{%}" (glGetInteger* GL_MAX_3D_TEXTURE_SIZE))
    (format output "GL_MAX_TEXTURE_IMAGE_UNITS: {a}{%}" (glGetInteger* GL_MAX_TEXTURE_IMAGE_UNITS))
    (format output "GL_MAX_VERTEX_UNIFORM_COMPONENTS: {a}{%}" (glGetInteger* GL_MAX_VERTEX_UNIFORM_COMPONENTS))
    (format output "GL_MAX_FRAGMENT_UNIFORM_COMPONENTS: {a}{%}" (glGetInteger* GL_MAX_FRAGMENT_UNIFORM_COMPONENTS))))


(definition public (save-capabilities (name: name #f) (opengl?: opengl? #t))
  (let ((logs-dir {Directory Settings "work" "logs"}))
    (let ((capabilities (new-file logs-dir (or name "client.caps"))))
      (unless (exists? capabilities)
        (create-directories capabilities)
        (call-with-output-file (path-settings capabilities)
          (lambda (output)
            (describe-capabilities output opengl?: opengl?))))))))
