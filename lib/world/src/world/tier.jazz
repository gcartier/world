;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Tiers
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.tier jazz


(import (jazz.associative)
        (jazz.component)
        (jazz.io)
        (jazz.presence)
        (jazz.snapshot)
        (world)
        (world.assets)
        (world.autoload)
        (world.context)
        (world.history)
        (world.id)
        (world.io)
        (world.log)
        (world.settings))


(definition protected disconnect-marker
  '<<<disconnect>>>)


;;;
;;;; Tier
;;;


(class Tier extends Object
  
  
  (slot directory                     getter generate)
  (slot universe-assets initialize #f getter generate)
  (slot world-assets    initialize #f getter generate)
  
  
  ;; called before zone creation
  (method override (initialize self dir)
    (set! directory dir))
  
  
  (method protected virtual (prepare-assets self)
    )
  
  
  (method protected virtual (make-zone-assets self zone-dir)
    #f)
  
  
  (method (script-file self)
    (new-file directory "script.jazz"))
  
  
  (method package virtual (startup self)
    (world.id:reset-actors)
    ;; sejour quick hack to think through
    (world.generation:reset-block-actions)
    @commented-during-~-conversion-GAZOUM
    (world.script:reset-properties)
    (world.script.asset:reset-asset-entities)
    (world.spawn:initialize-spawned))
  
  
  ;; called during zone creation
  (method package virtual (enter self)
    )
  
  
  (method package virtual (shutdown self)
    )
  
  
  (method package virtual (get-udp-tier self)
    #f)
  
  
  ;;;
  ;;;; Register
  ;;;
  
  
  (method package virtual (tier-literal->id self literal)
    )
  
  
  (method package virtual (tier-id->literal self id)
    )
  
  
  ;;;
  ;;;; Player
  ;;;
  
  
  (method package virtual (setup-me self)
    )
  
  
  (method package virtual (save-me self)
    )
  
  
  (method protected virtual (player-file self name)
    )
  
  
  (method (setup-current-me self)
    (let ((zone (current-zone)))
      ;; hack to pass anonymous as name until login
      ;; and server tier do not require a current me
      (let ((file (player-file self "anonymous")))
        (let ((player (instantiate (read-form file))))
          (set-current-me player)
          (clear-snapshot-property 'live.player-mode)))))
  
  
  (method (save-current-me self)
    (let ((world (current-world))
          (me (current-me)))
      (let ((designer (new Former form: (get-form me) reference: me)))
        (define (save-camera)
          (let ((eye (get-eye world))
                (camera (player-camera me)))
            (set-property designer camera 'position (get-position eye))
            (set-property designer camera 'lookat (get-lookat eye))))
        
        (define (save-player)
          (set-property designer me 'position (get-position me))
          (set-property designer me 'lookat (get-lookat me))
          (set-property designer me 'avatar (get-avatar me))
          (set-property designer me 'mount (get-mount me)))
        
        (save-camera)
        (save-player)
        (save designer))))
  
  
  (method package virtual (anonymous self)
    "Me")
  
  
  ;;;
  ;;;; Players
  ;;;
  
  
  (method protected virtual (connected-player self no)
    )
  
  
  (method package virtual (connected-players self)
    )
  
  
  ;;;
  ;;;; Zones
  ;;;
  
  
  (method package virtual (available-templates self)
    )
  
  
  (method package virtual (available-zone-base self from)
    )
  
  
  (method package virtual (available-zone-base? self base)
    )
  
  
  (method package virtual (create-zone self from base)
    )
  
  
  (method package virtual (available-zones self)
    )
  
  
  (method package virtual (change-zone self zone)
    )
  
  
  ;;;
  ;;;; Pause
  ;;;
  
  
  (method package virtual (pause-tier self)
    )
  
  
  (method package virtual (unpause-tier self)
    )
  
  
  ;;;
  ;;;; Tile
  ;;;
  
  
  (method package virtual (tile self)
    )
  
  
  (method package virtual (restore self)
    )
  
  
  ;;;
  ;;;; Log
  ;;;
  
  
  (method package virtual (log-if self message)
    ))


;;;
;;;; Login
;;;


(class Login-Tier extends Tier
  
  
  (method override (initialize self dir)
    (nextmethod self dir)
    (snapshot-user #f)
    (prepare-assets self))
  
  
  ;;;
  ;;;; Player
  ;;;
  
  
  (method override (setup-me self)
    (setup-current-me self))
  
  
  (method override (player-file self name)
    (let ((zone (current-zone)))
      (new-file (get-directory zone) ".player")))))
