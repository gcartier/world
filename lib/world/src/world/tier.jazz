;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Tiers
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2016
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.tier jazz


(import (jazz.component)
        (jazz.jrm)
        (world)
        (world.autoload)
        (world.history)
        (world.syntax (phase syntax)))


;;;
;;;; Tier
;;;


(class Tier extends Object
  
  
  (slot directory getter generate)
  
  
  (method override (initialize dir)
    (set! directory dir))
  
  
  ;; called before zone creation
  (method protected virtual (setup)
    )
  
  
  ;; called during zone creation
  (method protected virtual (enter)
    )
  
  
  (method protected virtual (shutdown)
    )
  
  
  ;;;
  ;;;; Register
  ;;;
  
  
  (method protected virtual (tier-literal->id literal)
    )
  
  
  (method protected virtual (tier-id->literal id)
    )
  
  
  ;;;
  ;;;; Player
  ;;;
  
  
  (method protected virtual (setup-me)
    )
  
  
  (method protected virtual (save-me)
    )
  
  
  (method protected virtual (player-file)
    )
  
  
  (method (setup-current-me)
    (let ((zone (current-zone)))
      (let ((file (player-file)))
        (let ((player (instantiate~ (read-form file))))
          (add-child~ zone player)
          (set-current-me player)))))
  
  
  (method (save-current-me)
    (let ((world (current-world))
          (me (current-me)))
      (let ((file (player-file)))
        (let ((designer (new Former form: (get-form~ me) reference: me)))
          (define (save-camera)
            (let ((eye (get-eye~ world))
                  (camera (player-camera~ me)))
              (set-property~ designer camera 'position (get-position~ eye))
              (set-property~ designer camera 'lookat (get-lookat~ eye))))
          
          (define (save-player)
            (set-property~ designer me 'avatar (get-avatar~ me))
            (set-property~ designer me 'position (get-position~ me))
            (set-property~ designer me 'lookat (get-lookat~ me)))
          
          (save-camera)
          (save-player)
          (save~ designer)))))
  
  
  (method protected virtual (anonymous)
    "Me")
  
  
  ;;;
  ;;;; Players
  ;;;
  
  
  (method protected virtual (connected-players)
    )
  
  
  ;;;
  ;;;; Remote
  ;;;
  
  
  (method protected virtual (unimplemented-connected)
    ))


;;;
;;;; Local
;;;


(class Local-Tier extends Tier
  
  
  (method override (initialize dir)
    (nextmethod dir)
    (setup))
  
  
  (method override (setup)
    (set-client-id (next-unique-id!))
    ;; aec quicky
    (set-remote-problem-handler #f))
  
  
  ;;;
  ;;;; Register
  ;;;
  
  
  (method override (tier-literal->id literal)
    (next-literal-id!))
  
  
  (method override (tier-id->literal id)
    (error "Unregistered id: {s}" id))
  
  
  ;;;
  ;;;; Player
  ;;;
  
  
  (method override (setup-me)
    (setup-current-me))
  
  
  (method override (save-me)
    (save-current-me))
  
  
  (method override (player-file)
    (new-file~ directory ".player"))))
