;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Tiers
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2016
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.tier jazz


(import (jazz.component)
        (jazz.io)
        (jazz.jrm)
        (jazz.jrm.protocol)
        (world)
        (world.assets)
        (world.autoload)
        (world.history)
        (world.id)
        (world.log)
        (world.settings)
        (world.syntax (phase syntax))
        (world.task))


(definition protected disconnect-marker
  '<<<disconnect>>>)


;;;
;;;; Tier
;;;


(class Tier extends Object
  
  
  (slot directory getter generate)
  (slot assets    getter generate)
  
  
  ;; called before zone creation
  (method override (initialize self dir)
    (set! directory dir))
  
  
  (method (script-file self)
    (new-file directory "script.jazz"))
  
  
  ;; called during zone creation
  (method package virtual (enter self)
    )
  
  
  (method package virtual (shutdown self)
    )
  
  
  (method (simulate-protocol self setting)
    (set-simulated-protocol (world-setting setting #f)))
  
  
  ;;;
  ;;;; Register
  ;;;
  
  
  (method package virtual (tier-literal->id self literal)
    )
  
  
  (method package virtual (tier-id->literal self id)
    )
  
  
  ;;;
  ;;;; Player
  ;;;
  
  
  (method package virtual (setup-me self)
    )
  
  
  (method package virtual (save-me self)
    )
  
  
  (method protected virtual (player-file self)
    )
  
  
  (method (setup-current-me self)
    (let ((zone (current-zone)))
      (let ((file (player-file self)))
        (let ((player (instantiate (read-form file))))
          (set-current-me player)))))
  
  
  (method (save-current-me self)
    (let ((world (current-world))
          (me (current-me)))
      (let ((designer (new Former form: (get-form me) reference: me)))
        (define (save-camera)
          (let ((eye (get-eye world))
                (camera (player-camera me)))
            (set-property designer camera 'position (get-position eye))
            (set-property designer camera 'lookat (get-lookat eye))))
        
        (define (save-player)
          (set-property designer me 'position (get-position me))
          (set-property designer me 'lookat (get-lookat me))
          (set-property designer me 'avatar (get-avatar me))
          (set-property designer me 'mount (get-mount me)))
        
        (save-camera)
        (save-player)
        (save designer))))
  
  
  (method package virtual (anonymous self)
    "Me")
  
  
  ;;;
  ;;;; Players
  ;;;
  
  
  (method protected virtual (connected-player self no)
    )
  
  
  (method package virtual (connected-players self)
    )
  
  
  ;;;
  ;;;; Entities
  ;;;
  
  
  (method package virtual (retrieve-entity self id)
    )
  
  
  ;;;
  ;;;; Zones
  ;;;
  
  
  (method package virtual (available-templates self)
    )
  
  
  (method package virtual (available-zone-base self from)
    )
  
  
  (method package virtual (available-zone-base? self base)
    )
  
  
  (method package virtual (create-zone self from base)
    )
  
  
  (method package virtual (available-zones self)
    )
  
  
  (method package virtual (change-zone self zone)
    )
  
  
  ;;;
  ;;;; Remote
  ;;;
  
  
  (method package virtual (unimplemented-connected self)
    )
  
  
  ;;;
  ;;;; Tile
  ;;;
  
  
  (method package virtual (tile self)
    )
  
  
  (method package virtual (restore self)
    )
  
  
  ;;;
  ;;;; Log
  ;;;
  
  
  (method package virtual (log-if self message)
    ))


;;;
;;;; Local
;;;


(class Local-Tier extends Tier
  
  
  (method override (initialize self dir)
    (nextmethod self dir)
    (let ((id (make-unique-id)))
      (set-client-id/no id (literal->id id self)))
    ;; aec quicky
    (set-remote-problem-handler #f)
    (set! assets (gather-assets 'tier (new-directory directory "assets"))))
  
  
  ;;;
  ;;;; Register
  ;;;
  
  
  (method override (tier-literal->id self literal)
    (next-literal-id!))
  
  
  (method override (tier-id->literal self id)
    (error "Unregistered id: {s}" id))
  
  
  ;;;
  ;;;; Player
  ;;;
  
  
  (method override (setup-me self)
    (setup-current-me self)
    (register-id (current-me) (make-unique-id)))
  
  
  (method override (save-me self)
    (save-current-me self))
  
  
  (method override (player-file self)
    (let ((zone (current-zone)))
      (new-file (get-directory zone) ".player")))
  
  
  ;;;
  ;;;; Entities
  ;;;
  
  
  (method override (retrieve-entity self id)
    (find-entity id))
  
  
  ;;;
  ;;;; Zones
  ;;;
  
  
  (method override (available-templates self)
    (let ((world (current-world)))
      (collect-templates world)))
  
  
  (method override (available-zone-base self from)
    (let ((world (current-world)))
      (unique-zone-base world from)))
  
  
  (method override (available-zone-base? self base)
    (let ((world (current-world)))
      (zone-base-available? world base)))
  
  
  (method override (create-zone self from base)
    (let ((world (current-world)))
      (when (create-new-zone world from base)
        (let ((zone (current-zone)))
          (teleport zone (find-spawnpoint zone))))))
  
  
  ;;;
  ;;;; Log
  ;;;
  
  
  (method override (log-if self message)
    (when log?
      (server-log #f (current-seconds) message)))))
