;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Records
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.record-syntax jazz


(import (world.record))


(syntax public with-record
  (lambda (form-src usage-environment macro-environment)
    (bind (record-name . body) (cdr (source-code form-src))
      (sourcify-deep-if
        `(let-macro (,@(let ((queue (new-queue)))
                         (define (add name)
                           (let ((record (require-record name)))
                             (let ((ascendant (get-ascendant record)))
                               (when ascendant
                                 (add ascendant)))
                             (for-each (lambda (field-name)
                                         (let ((reader (string->symbol (format "read-{a}-{a}" name field-name)))
                                               (read (string->symbol (format "read-{a}-{a}^" name field-name)))
                                               (writer (string->symbol (format "write-{a}-{a}" name field-name)))
                                               (write (string->symbol (format "write-{a}-{a}^" name field-name))))
                                           (enqueue queue (list reader (list 'lambda '(data) (list 'quasiquote (list read ',data)))))
                                           (enqueue queue (list writer (list 'lambda '(data value) (list 'quasiquote (list write ',data ',value)))))))
                                       (get-field-names record))))
                         
                         (add (source-code record-name))
                         (queue-list queue)))
           ,@body)
        form-src)))))
