;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; Change Parts
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.parts jazz


(import (gaea.dye)
        (gaea.geometry)
        (gaea.lookat)
        (world)
        (world.autoload)
        (world.binary)
        (world.commands)
        (world.context)
        (world.entity)
        (world.history)
        (world.index)
        (world.part)
        (world.section)
        (world.syntax (phase syntax)))


(proclaim (not check bounds)
          (warn optimizations))


;;;
;;;; Flonum
;;;


(define-part flonum
  1)


(definition protected (push-flonum push val <fl>)
  (push val))


(definition protected (pop-flonum pop) <fl>
  (pop))


;;;
;;;; Fixnum
;;;


(define-part fixnum
  1)


(definition protected (push-fixnum push val <fx>)
  (push val))


(definition protected (pop-fixnum pop) <fx>
  (pop))


;;;
;;;; Boolean
;;;


(define-part boolean
  1)


(definition protected (push-boolean push val <bool>)
  (push val))


(definition protected (pop-boolean pop) <bool>
  (pop))


;;;
;;;; Vertex
;;;


(define-part vertex
  3)


(definition protected (push-vertex push vert <vertex>)
  (push (vertex-x vert))
  (push (vertex-y vert))
  (push (vertex-z vert)))


(definition protected (pop-vertex pop) <vertex>
  (pop-vertex! (make-vertex) pop))


(definition protected (pop-vertex! vert pop) <vertex>
  (let* ((x (pop))
         (y (pop))
         (z (pop)))
    (vertex! vert x y z)))


;;;
;;;; LookAt
;;;


(define-part lookat
  9)


(definition protected (push-lookat push lookat <LookAt>)
  (let ((sight (get-sight lookat))
        (up (get-up lookat))
        (right (get-right lookat)))
    (push (vertex-x sight))
    (push (vertex-y sight))
    (push (vertex-z sight))
    (push (vertex-x up))
    (push (vertex-y up))
    (push (vertex-z up))
    (push (vertex-x right))
    (push (vertex-y right))
    (push (vertex-z right))))


(definition protected (pop-lookat pop) <LookAt>
  (pop-lookat! (make-lookat) pop))


(definition protected (pop-lookat! lookat pop) <LookAt>
  (let* ((sx (pop))
         (sy (pop))
         (sz (pop))
         (ux (pop))
         (uy (pop))
         (uz (pop))
         (rx (pop))
         (ry (pop))
         (rz (pop)))
    (lookat! lookat
             (vertex& sx sy sz)
             (vertex& ux uy uz)
             (vertex& rx ry rz))))


;;;
;;;; Dye
;;;


(define-part dye
  4)


(definition protected (push-dye push dye <dye>)
  (push (dye-red dye))
  (push (dye-green dye))
  (push (dye-blue dye))
  (push (dye-alpha dye)))


(definition protected (pop-dye pop) <dye>
  (pop-dye! (make-dye) pop))


(definition protected (pop-dye! dye pop) <dye>
  (let* ((r (pop))
         (g (pop))
         (b (pop))
         (a (pop)))
    (dye! dye r g b a)
    dye))


;;;
;;;; Literal
;;;


(define-part literal
  1)


(definition protected (push-literal push literal)
  (push literal))


(definition protected (pop-literal pop)
  (pop))


;;;
;;;; Id
;;;


(define-part id
  1)


(definition protected (push-id push id)
  (push id))


(definition protected (pop-id pop)
  (pop))


;;;
;;;; Index
;;;


(define-part index
  3)


(definition protected (push-index push index <index>)
  (push (index-x index))
  (push (index-y index))
  (push (index-z index)))


(definition protected (pop-index pop) <index>
  (let* ((x (pop))
         (y (pop))
         (z (pop)))
    (indexed x y z)))


;;;
;;;; Digest
;;;


(define-part digest
  3)


(definition protected (push-digest push digest <u8vector>)
  (let ((vec (digest->f64vector digest)))
    (push (f64vector-ref vec 0))
    (push (f64vector-ref vec 1))
    (push (f64vector-ref vec 2))))


(definition protected (pop-digest pop) <u8vector>
  (let* ((d0 (pop))
         (d1 (pop))
         (d2 (pop)))
    (f64vector->digest (f64vector d0 d1 d2))))


(definition protected (digest->f64vector digest <u8vector>) <f64vector>
  (let ((bytes (make-u8vector 24 0)))
    (subu8vector-move! digest 0 20 bytes 0)
    (f64vector
      (scan-double bytes 0)
      (scan-double bytes 8)
      (scan-double bytes 16))))


(definition protected (f64vector->digest vec <f64vector>) <u8vector>
  (let ((bytes (make-u8vector 24 0)))
    (put-double bytes 0 (f64vector-ref vec 0))
    (put-double bytes 8 (f64vector-ref vec 1))
    (put-double bytes 16 (f64vector-ref vec 2))
    (let ((digest (make-u8vector 20 0)))
      (subu8vector-move! bytes 0 20 digest 0)
      digest)))


;;;
;;;; Class
;;;


(define-part class
  1)


(definition protected (push-class push class)
  (let ((world (current-world)))
    (push (class->class-name world class))))


(definition protected (pop-class pop)
  (let ((world (current-world)))
    (let ((class-name (pop)))
      (class-name->class world class-name))))


;;;
;;;; Entity
;;;


(define-part entity
  1)


(definition protected (push-entity push entity <Entity>)
  (let ((id (get-id entity)))
    (assert id
      (push-id push id))))


(definition protected (pop-entity pop) <Entity+>
  (let ((id (pop-id pop)))
    (registered-entity-id (current-zone) id)))


;;;
;;;; Actor
;;;


(define-part actor
  1)


(definition protected (push-actor push actor <Actor>)
  (let ((id (get-id actor)))
    (assert id
      (push-id push id))))


(definition protected (pop-actor pop) <Actor+>
  (let ((id (pop-id pop)))
    (registered-entity-id (current-zone) id)))


;;;
;;;; Commands
;;;


(define-part commands
  1)


(definition protected (push-commands push commands <Commands+>)
  (push ;; quick hack for track-ground
        (if commands
            (cast <fl> (encode commands))
          -1.)))


(definition protected (pop-commands pop) <Commands+>
  (let ((commands-encoded (pop)))
    ;; quick hack for track-ground
    (if (= commands-encoded -1.)
        #f
      (let ((commands (new Commands)))
        (decode commands (flonum->fixnum commands-encoded))
        commands)))))
