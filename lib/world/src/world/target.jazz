;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; World Target
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2013
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.target jazz


(import (jazz.geometry)
        (jazz.graphic)
        (jazz.graphic.opengl.glew)
        (world)
        (world.autoload)
        (world.draw)
        (world.dye)
        (world.dyes)
        (world.foreign)
        (world.geometry)
        (world.opengl)
        (world.quad)
        (world.shape)
        (world.syntax (phase syntax))
        (world.widget))


;;;
;;;; Widget
;;;


(class Target-Widget extends Widget
  
  
  (slot last-point initialize #f)
  
  
  (method (colorize-dye name default)
    (let ((world (current-world)))
      (let ((down (get-widget-down~ world))
            (part (get-widget-part~ world)))
        (gl-colorize-dye
          (if (and (eq? self down) (eq? part name))
              yellow-dye
            default))))))


;;;
;;;; Mover
;;;


(class Mover extends Target-Widget


  (method override (draw-widget)
    (let ((world (current-world)))
      (let ((target (first-target~ world)))
        (let ((x (get-x~ target))
              (y (get-y~ target))
              (z (get-z~ target))
              (sx (+ 1.5 (get-radius-x~ target)))
              (sy (+ 1.5 (get-radius-y~ target)))
              (sz (+ 1.5 (get-radius-z~ target)))
              (ps .5)
              (pa .4))
          (glLineWidth 2.)
          (glDisable GL_LIGHTING)
          (glDisable GL_DEPTH_TEST)
          (glBegin GL_LINES)
          ;; Axis X
          (gl-colorize-dye red-dye)
          (glVertex3f (+ x 0.0) y (+ z 0.0))
          (glVertex3f (+ x  sx) y (+ z 0.0))
          
          ;; Axis Y
          (gl-colorize-dye green-dye)
          (glVertex3f (+ x 0.0) (+ y 0.0) z)
          (glVertex3f (+ x 0.0) (+ y  sy) z)
          
          ;; Axis Z
          (gl-colorize-dye blue-dye)
          (glVertex3f (+ x 0.0) y (+ z 0.0))
          (glVertex3f (+ x 0.0) y (+ z  sz))
          (glEnd)
          (glLineWidth 1.)
          
          ;; Plane X
          (gl-colorize-dye (dye 1. 0. 0. pa))
          (glBegin GL_QUADS)
          (glVertex3f x y z)
          (glVertex3f x y (+ z ps))
          (glVertex3f x (+ y ps) (+ z ps))
          (glVertex3f x (+ y ps) z)
          (glEnd)
          (gl-colorize-dye red-dye)
          (glBegin GL_LINE_STRIP)
          (glVertex3f x y (+ z ps))
          (glVertex3f x (+ y ps) (+ z ps))
          (glVertex3f x (+ y ps) z)
          (glEnd)
          
          ;; Plane Y
          (gl-colorize-dye (dye 0. 1. 0. pa))
          (glBegin GL_QUADS)
          (glVertex3f x y z)
          (glVertex3f x y (+ z ps))
          (glVertex3f (+ x ps) y (+ z ps))
          (glVertex3f (+ x ps) y z)
          (glEnd)
          (gl-colorize-dye green-dye)
          (glBegin GL_LINE_STRIP)
          (glVertex3f x y (+ z ps))
          (glVertex3f (+ x ps) y (+ z ps))
          (glVertex3f (+ x ps) y z)
          (glEnd)
          
          ;; Plane Z
          (gl-colorize-dye (dye 0. 0. 1. pa))
          (glBegin GL_QUADS)
          (glVertex3f x y z)
          (glVertex3f x (+ y ps) z)
          (glVertex3f (+ x ps) (+ y ps) z)
          (glVertex3f (+ x ps) y z)
          (glEnd)
          (gl-colorize-dye blue-dye)
          (glBegin GL_LINE_STRIP)
          (glVertex3f x (+ y ps) z)
          (glVertex3f (+ x ps) (+ y ps) z)
          (glVertex3f (+ x ps) y z)
          (glEnd)
          
          ;; Cone X
          (glPushMatrix)
          (glTranslatef (+ x sx) y z)
          (glRotatef 90.0 0.0 1.0 0.0)
          (glScalef 0.1 0.1 0.1)
          (gl-colorize-dye red-dye)
          (gl-cylinder 1. 0. 2. 26 52)
          (glPopMatrix)
          
          ;; Cone Y
          (glPushMatrix)
          (glTranslatef x (+ y sy) z)
          (glRotatef -90.0 1.0 0.0 0.0)
          (glScalef 0.1 0.1 0.1)
          (gl-colorize-dye green-dye)
          (gl-cylinder 1. 0. 2. 26 52)
          (glPopMatrix)
          
          ;; Cone Z
          (glPushMatrix)
          (glTranslatef x y (+ z sz))
          (glRotatef -90.0 0.0 0.0 1.0)
          (glScalef 0.1 0.1 0.1)
          (gl-colorize-dye blue-dye)
          (gl-cylinder 1. 0. 2. 26 52)
          (glPopMatrix)
          (glEnable GL_LIGHTING)
          (glEnable GL_DEPTH_TEST)))))
  
  
  (method override (iterate-polygons proc)
    (let ((world (current-world)))
      (let ((target (first-target~ world)))
        (when target
          (let ((x (get-x~ target))
                (y (get-y~ target))
                (z (get-z~ target))
                (sx (+ 1.5 (get-radius-x~ target)))
                (sy (+ 1.5 (get-radius-y~ target)))
                (sz (+ 1.5 (get-radius-z~ target)))
                (ps .5)
                (cuboid (make-cuboid))
                (cr .1))
            (define (iterate x y z part)
              (cuboid-init! cuboid (- x cr) (- y cr) (- z cr) (+ x cr) (+ y cr) (+ z cr))
              (iterate-cuboid-quads cuboid #f #f proc (cons self part)))
            
            (define (iterate-plane v1 v2 v3 v4 part)
              (proc (make-quad (cons self part)
                               v1 v2 v3 v4)))
            
            (iterate (+ x sx) y z 'x)
            (iterate x (+ y sy) z 'y)
            (iterate x y (+ z sz) 'z)
            (iterate-plane (vertex x y z)
                           (vertex x y (+ z ps))
                           (vertex x (+ y ps) (+ z ps))
                           (vertex x (+ y ps) z)
                           'plane-x)
            (iterate-plane (vertex x y z)
                           (vertex x y (+ z ps))
                           (vertex (+ x ps) y (+ z ps))
                           (vertex (+ x ps) y z)
                           'plane-y)
            (iterate-plane (vertex x y z)
                           (vertex x (+ y ps) z)
                           (vertex (+ x ps) (+ y ps) z)
                           (vertex (+ x ps) y z)
                           'plane-z))))))
  
  
  (method override (widget-mouse-down h v)
    (set! last-point (new Point h v)))
  
  
  (method override (widget-mouse-move h v)
    @w
    (let ((world (current-world)))
      (let ((target (get-target~ world))
            (part (get-widget-part~ world)))
        (let ((delta (- h (get-h~ last-point))))
          (set! last-point (new Point h v))
          (move-target target delta part)))))
  
  
  (method (move-target target delta part)
    (for-each (lambda (elem)
                (move-element elem delta part))
              target))
  
  
  (method (move-element elem delta part)
    (let ((zone (current-zone)))
      (let ((designer (get-designer~ zone))
            (d (cast <fl> delta)))
        (let ((old-position (get-position~ elem))
              (dist (case part
                      ((x) (vertex d 0. 0.))
                      ((y) (vertex 0. d 0.))
                      ((z) (vertex 0. 0. d)))))
          (let ((new-position (vertex+ old-position dist)))
            (set-property~ designer elem 'position new-position)
            (update-area~ zone elem old-position)
            (update-sector~ zone elem old-position)
            (invalidate-lightmaps~ zone elem)))))))


;;;
;;;; Rotater
;;;


(class Rotater extends Target-Widget


  (method override (draw-widget)
    (let ((world (current-world)))
      (let ((target (first-target~ world)))
        (let ((x (get-x~ target))
              (y (get-y~ target))
              (z (get-z~ target))
              ;; quick hack
              (sx (+ 1.5 (get-radius-x~ target)))
              (sy (+ 1.5 (get-radius-y~ target)))
              (sz (+ 1.5 (get-radius-z~ target)))
              (radius (+ .5 (get-radius~ target))))
          (glLineWidth 2.)
          (glDisable GL_LIGHTING)
          (glDisable GL_DEPTH_TEST)
          @wait (
          ;; Rotate X
          (glPushMatrix)
          (glTranslatef x y z)
          (glRotatef 90.0 0.0 1.0 0.0)
          (gl-segment-circle {Point 0 0} radius {Color Red} 100)
          (glPopMatrix)
          
          ;; Rotate Y
          (glPushMatrix)
          (glTranslatef x y z)
          (glRotatef 90.0 1.0 0.0 0.0)
          (gl-segment-circle {Point 0 0} radius {Color Green} 100)
          (glPopMatrix)
          
          ;; Rotate Z
          (glPushMatrix)
          (glTranslatef x y z)
          (glRotatef 90.0 0.0 0.0 1.0)
          (gl-segment-circle {Point 0 0} radius {Color Blue} 100)
          (glPopMatrix))
          
          ;; quick hack
          (glBegin GL_LINES)
          
          ;; Axis X
          (colorize-dye 'x red-dye)
          (glVertex3f (+ x 0.0) y (+ z 0.0))
          (glVertex3f (+ x  sx) y (+ z 0.0))
          
          ;; Axis Y
          (colorize-dye 'y green-dye)
          (glVertex3f (+ x 0.0) (+ y 0.0) z)
          (glVertex3f (+ x 0.0) (+ y  sy) z)
          
          ;; Axis Z
          (colorize-dye 'z blue-dye)
          (glVertex3f (+ x 0.0) y (+ z 0.0))
          (glVertex3f (+ x 0.0) y (+ z  sz))
          (glEnd)
          ;(glEnable GL_LIGHTING)
          (glLineWidth 1.)
          
          ;; Sphere X
          (glPushMatrix)
          (glTranslatef (+ x sx) y z)
          (glRotatef 90.0 0.0 1.0 0.0)
          (glScalef 0.1 0.1 0.1)
          (colorize-dye 'x red-dye)
          (gl-sphere 1. 26 52)
          (glPopMatrix)
          
          ;; Sphere Y
          (glPushMatrix)
          (glTranslatef x (+ y sy) z)
          (glRotatef -90.0 1.0 0.0 0.0)
          (glScalef 0.1 0.1 0.1)
          (colorize-dye 'y green-dye)
          (gl-sphere 1. 26 52)
          (glPopMatrix)
          
          ;; Sphere Z
          (glPushMatrix)
          (glTranslatef x y (+ z sz))
          (glRotatef -90.0 0.0 0.0 1.0)
          (glScalef 0.1 0.1 0.1)
          (colorize-dye 'z blue-dye)
          (gl-sphere 1. 26 52)
          (glPopMatrix)
          
          (glEnable GL_LIGHTING)
          (glEnable GL_DEPTH_TEST)
          (glLineWidth 1.)))))
  
  
  ;; quick hack
  (method override (iterate-polygons proc)
    (let ((world (current-world)))
      (let ((target (first-target~ world)))
        (when target
          (let ((x (get-x~ target))
                (y (get-y~ target))
                (z (get-z~ target))
                (sx (+ 1.5 (get-radius-x~ target)))
                (sy (+ 1.5 (get-radius-y~ target)))
                (sz (+ 1.5 (get-radius-z~ target)))
                (cuboid (make-cuboid))
                (cr .1))
            (define (iterate x y z part)
              (cuboid-init! cuboid (- x cr) (- y cr) (- z cr) (+ x cr) (+ y cr) (+ z cr))
              (iterate-cuboid-quads cuboid #f #f proc (cons self part)))
            
            (iterate x y z 'global)
            (iterate (+ x sx) y z 'x)
            (iterate x (+ y sy) z 'y)
            (iterate x y (+ z sz) 'z))))))
  
  
  ;; quick hack
  (method override (widget-mouse-down h v)
    (set! last-point (new Point h v)))
  
  
  ;; quick hack
  (method override (widget-mouse-move h v)
    (let ((world (current-world)))
      (let ((target (get-target~ world))
            (part (get-widget-part~ world)))
        (let ((delta (- h (get-h~ last-point))))
          (set! last-point (new Point h v))
          (rotate-target target delta part)))))
  
  
  (method (rotate-target target delta part)
    (for-each (lambda (elem)
                (rotate-element elem delta part))
              target))
  
  
  (method (rotate-element elem delta part)
    (let ((zone (current-zone)))
      (let ((designer (get-designer~ zone))
            (d (cast <fl> delta)))
        (let ((inc (* d (/ PI/8 2.))))
          (case part
            ((x) (rotate-lookat! (get-lookat~ elem) inc (get-right~ (get-lookat~ elem))))
            ((y) (rotate-lookat! (get-lookat~ elem) inc (get-sight~ (get-lookat~ elem))))
            ((z) (rotate-lookat! (get-lookat~ elem) inc (get-up~ (get-lookat~ elem)))))
          (set-property~ designer elem 'lookat (get-lookat~ elem)))))))


;;;
;;;; Scaler
;;;


(class Scaler extends Target-Widget


  (method override (draw-widget)
    (let ((world (current-world)))
      (let ((target (first-target~ world)))
        (let ((x (get-x~ target))
              (y (get-y~ target))
              (z (get-z~ target))
              (sx (+ 1.5 (get-radius-x~ target)))
              (sy (+ 1.5 (get-radius-y~ target)))
              (sz (+ 1.5 (get-radius-z~ target))))
          (glLineWidth 2.)
          (glDisable GL_LIGHTING)
          (glDisable GL_DEPTH_TEST)
          (glBegin GL_LINES)
          
          ;; Axis X
          (colorize-dye 'x red-dye)
          (glVertex3f (+ x 0.0) y (+ z 0.0))
          (glVertex3f (+ x  sx) y (+ z 0.0))
          
          ;; Axis Y
          (colorize-dye 'y green-dye)
          (glVertex3f (+ x 0.0) (+ y 0.0) z)
          (glVertex3f (+ x 0.0) (+ y  sy) z)
          
          ;; Axis Z
          (colorize-dye 'z blue-dye)
          (glVertex3f (+ x 0.0) y (+ z 0.0))
          (glVertex3f (+ x 0.0) y (+ z  sz))
          (glEnd)
          (glLineWidth 1.)
          
          ;; Sphere X
          (glPushMatrix)
          (glTranslatef (+ x sx) y z)
          (glRotatef 90.0 0.0 1.0 0.0)
          (glScalef 0.1 0.1 0.1)
          (colorize-dye 'x red-dye)
          (gl-sphere 1. 26 52)
          (glPopMatrix)
          
          ;; Sphere Y
          (glPushMatrix)
          (glTranslatef x (+ y sy) z)
          (glRotatef -90.0 1.0 0.0 0.0)
          (glScalef 0.1 0.1 0.1)
          (colorize-dye 'y green-dye)
          (gl-sphere 1. 26 52)
          (glPopMatrix)
          
          ;; Sphere Z
          (glPushMatrix)
          (glTranslatef x y (+ z sz))
          (glRotatef -90.0 0.0 0.0 1.0)
          (glScalef 0.1 0.1 0.1)
          (colorize-dye 'z blue-dye)
          (gl-sphere 1. 26 52)
          (glPopMatrix)
          
          ;; Sphere Global
          (glPushMatrix)
          (glTranslatef x y z)
          (glRotatef 90.0 0.0 1.0 0.0)
          (glScalef 0.15 0.15 0.15)
          (colorize-dye 'global (dye .5 .5 .5 1.))
          (gl-sphere 1. 26 52)
          (glPopMatrix)
          (glEnable GL_LIGHTING)
          (glEnable GL_DEPTH_TEST)))))
  
  
  (method override (iterate-polygons proc)
    (let ((world (current-world)))
      (let ((target (first-target~ world)))
        (when target
          (let ((x (get-x~ target))
                (y (get-y~ target))
                (z (get-z~ target))
                (sx (+ 1.5 (get-radius-x~ target)))
                (sy (+ 1.5 (get-radius-y~ target)))
                (sz (+ 1.5 (get-radius-z~ target)))
                (cuboid (make-cuboid))
                (cr .1))
            (define (iterate x y z part)
              (cuboid-init! cuboid (- x cr) (- y cr) (- z cr) (+ x cr) (+ y cr) (+ z cr))
              (iterate-cuboid-quads cuboid #f #f proc (cons self part)))
            
            (iterate x y z 'global)
            (iterate (+ x sx) y z 'x)
            (iterate x (+ y sy) z 'y)
            (iterate x y (+ z sz) 'z))))))
  
  
  (method override (widget-mouse-down h v)
    (set! last-point (new Point h v)))
  
  
  (method override (widget-mouse-move h v)
    (let ((world (current-world)))
      (let ((target (get-target~ world))
            (part (get-widget-part~ world)))
        (let ((delta (- h (get-h~ last-point))))
          (set! last-point (new Point h v))
          (scale-target target delta part)))))
  
  
  (method (scale-target target delta part)
    (for-each (lambda (elem)
                (scale-element elem delta part))
              target))
  
  
  (method (scale-element elem delta part)
    (let ((zone (current-zone)))
      (let ((designer (get-designer~ zone))
            (d (cast <fl> delta))
            (f 1.025))
        (let ((factor (if (> d 0.) f (/ f))))
          (let ((s (case part
                     ((global) (vertex factor factor factor))
                     ((x) (vertex factor 1. 1.))
                     ((y) (vertex 1. factor 1.))
                     ((z) (vertex 1. 1. factor)))))
            (set-property~ designer elem 'scale (vertex* (get-scale~ elem) s)))))))))
