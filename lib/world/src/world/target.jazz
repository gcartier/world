;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Target
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.target jazz


(import (jazz.geometry)
        (jazz.opengl.glew)
        (jazz.platform)
        (gaea.dye)
        (gaea.geometry)
        (world)
        (world.animation)
        (world.autoload)
        (world.changes)
        (world.context)
        (world.draw)
        (world.dyes)
        (world.element)
        (world.generate)
        (world.model)
        (world.quad)
        (world.widget))


(definition max-radius <fl>
  1.)


(definition min-scaling <fl>
  .1)

(definition max-scaling <fl>
  10.)


;;;
;;;; Widget
;;;


(class Target-Widget extends Widget
  
  
  (slot last-point initialize #f)
  
  
  (method (widget-dye self name default (alpha #f))
    (let ((world (current-world)))
      (let ((down (get-widget-down world))
            (part (get-widget-part world)))
        (if (and (eq? self down) (eq? part name))
            (if alpha
                (dye 1. 1. 0. alpha)
              yellow-dye)
          default)))))


;;;
;;;; Mover
;;;


(class Mover extends Target-Widget
  
  
  (slot contact-offset)


  (method override (draw-widget self)
    (let ((world (current-world)))
      (let ((target (first-target world)))
        (let ((x (get-x target))
              (y (get-y target))
              (z (get-z target))
              (s (+ 1.5 (min (average-radius target) max-radius)))
              (ps .5)
              (pa .4)
              (width .01))
          (glDisable GL_DEPTH_TEST)
          ;; Axis X
          (render-line (vertex (+ x 0.) y (+ z 0.))
                       (vertex (+ x  s) y (+ z 0.))
                       width
                       (widget-dye self 'x red-dye))
          
          ;; Axis Y
          (render-line (vertex (+ x 0.) (+ y 0.) z)
                       (vertex (+ x 0.) (+ y  s) z)
                       width
                       (widget-dye self 'y green-dye))
          
          ;; Axis Z
          (render-line (vertex (+ x 0.) y (+ z 0.))
                       (vertex (+ x 0.) y (+ z  s))
                       width
                       (widget-dye self 'z blue-dye))
          
          ;; Plane X
          (render-quad (matrix-multiply& (make-translation-matrix& (vertex x (+ y .25) (+ z .25)))
                                         (make-euler-matrix& (vertex 0. 0. PI/2))
                                         (make-scaling-matrix& (vertex .5 .5 .5)))
                       wire-color: (widget-dye self 'plane-x red-dye)
                       fill-color: (widget-dye self 'plane-x (dye 1. 0. 0. pa) pa))
          
          ;; Plane Y
          (render-quad (matrix-multiply& (make-translation-matrix& (vertex (+ x .25) y (+ z .25)))
                                         (make-euler-matrix& (vertex 0. 0. 0.))
                                         (make-scaling-matrix& (vertex .5 .5 .5)))
                       wire-color: (widget-dye self 'plane-y green-dye)
                       fill-color: (widget-dye self 'plane-y (dye 0. 1. 0. pa) pa))
          
          ;; Plane Z
          (render-quad (matrix-multiply& (make-translation-matrix& (vertex (+ x .25) (+ y .25) z))
                                         (make-euler-matrix& (vertex PI/2 0. 0.))
                                         (make-scaling-matrix& (vertex .5 .5 .5)))
                       wire-color: (widget-dye self 'plane-z blue-dye)
                       fill-color: (widget-dye self 'plane-z (dye 0. 0. 1. pa) pa))
          
          ;; Arrow X
          (render-cone (matrix-multiply& (make-translation-matrix& (vertex (+ x s) y z))
                                         (make-euler-matrix& (vertex 0. PI/2 0.))
                                         (make-scaling-matrix& (vertex .1 .1 .1)))
                       color: (widget-dye self 'x red-dye))
          
          ;; Arrow Y
          (render-cone (matrix-multiply& (make-translation-matrix& (vertex x (+ y s) z))
                                         (make-euler-matrix& (vertex (- PI/2) 0. 0.))
                                         (make-scaling-matrix& (vertex .1 .1 .1)))
                       color: (widget-dye self 'y green-dye))
          
          ;; Arrow Z
          (render-cone (matrix-multiply& (make-translation-matrix& (vertex x y (+ z s)))
                                         (make-euler-matrix& (vertex 0. PI 0.))
                                         (make-scaling-matrix& (vertex .1 .1 .1)))
                       color: (widget-dye self 'z blue-dye))
          (glEnable GL_DEPTH_TEST)))))
  
  
  (method override (iterate-polygons self proc)
    (let ((world (current-world)))
      (let ((target (first-target world)))
        (when (and target (target-moveable? target))
          (let ((x (get-x target))
                (y (get-y target))
                (z (get-z target))
                (s (+ 1.5 (min (average-radius target) max-radius)))
                (ps .5)
                (cuboid (make-cuboid))
                (cr .1)
                (ar .05))
            (define (iterate-plane v1 v2 v3 v4 part)
              (proc (make-quad (cons self part)
                               v1 v2 v3 v4)))
            
            (define (iterate-arrow x y z part)
              (cuboid! cuboid (- x cr) (- y cr) (- z cr) (+ x cr) (+ y cr) (+ z cr))
              (iterate-cuboid-quads cuboid (cons self part) proc))
            
            (define (iterate-axis left bottom back right top front part)
              (cuboid! cuboid left bottom back right top front)
              (iterate-cuboid-quads cuboid (cons self part) proc))
            
            (iterate-plane (vertex x y z)
                           (vertex x y (+ z ps))
                           (vertex x (+ y ps) (+ z ps))
                           (vertex x (+ y ps) z)
                           'plane-x)
            (iterate-plane (vertex x y z)
                           (vertex x y (+ z ps))
                           (vertex (+ x ps) y (+ z ps))
                           (vertex (+ x ps) y z)
                           'plane-y)
            (iterate-plane (vertex x y z)
                           (vertex x (+ y ps) z)
                           (vertex (+ x ps) (+ y ps) z)
                           (vertex (+ x ps) y z)
                           'plane-z)
            (iterate-arrow (+ x s) y z 'x)
            (iterate-arrow x (+ y s) z 'y)
            (iterate-arrow x y (+ z s) 'z)
            (iterate-axis (+ x ps ar) (- y ar) (- z ar) (+ x s) (+ y ar) (+ z ar) 'x)
            (iterate-axis (- x ar) (+ y ps ar) (- z ar) (+ x ar) (+ y s) (+ z ar) 'y)
            (iterate-axis (- x ar) (- y ar) (+ z ps ar) (+ x ar) (+ y ar) (+ z s) 'z))))))
  
  
  (method (widget-contact self h v)
    (let ((world (current-world)))
      (let ((camera (current-camera))
            (pos (get-position (first-target world)))
            (part (get-widget-part world)))
        (bind-values (position direction) (screen->world camera h v)
          (bind-values (vertex normal) (case part
                                         ((plane-x) (ray-grid-intersection world position direction #t 'x (vertex-x pos)))
                                         ((plane-z) (ray-grid-intersection world position direction #t 'z (vertex-z pos)))
                                         ((x z plane-y) (ray-grid-intersection world position direction #t 'y (vertex-y pos)))
                                         ((y) (let ((sight (get-sight camera)))
                                                (if (> (vertex-z sight) (* 3. (vertex-x sight)))
                                                    (ray-grid-intersection world position direction #t 'x (vertex-x pos))
                                                  (ray-grid-intersection world position direction #t 'z (vertex-z pos))))))
            vertex)))))
  
  
  (method override (widget-mouse-down self h v)
    (let ((world (current-world)))
      (let ((target (first-target world)))
        (set! contact-offset (vertex- (widget-contact self h v) (get-position target))))))
  
  
  (method override (widget-mouse-move self h v)
    (let ((world (current-world)))
      (let ((contact (widget-contact self h v)))
        (when contact
          (let ((target (first-target world))
                (part (get-widget-part world)))
            (let ((new-position (vertex- contact contact-offset)))
              (let ((delta (vertex- new-position (get-position target))))
                (let ((projected-delta
                        (case part
                          ((plane-x plane-y plane-z) delta)
                          ((x) (vertex (vertex-x delta) 0. 0.))
                          ((y) (vertex 0. (vertex-y delta) 0.))
                          ((z) (vertex 0. 0. (vertex-z delta))))))
                  (move-selection self (get-selection world) projected-delta)))))))))
  
  
  (method package (move-selection self selection delta)
    (for-each (lambda (elem)
                (move-element self elem delta))
              selection))
  
  
  (method (move-element self elem delta)
    (let ((world (current-world))
          (zone (current-zone)))
      (let ((old-position (copy-vertex (get-position elem)))
            (new-position (vertex+ (get-position elem) delta))
            (truncate-y (get-truncate-y zone)))
        ;; quick hack around truncate-y
        (when (or (not truncate-y) (>= (vertex-y new-position) truncate-y))
          (position-property zone elem new-position)
          (position-property-change (current-seconds) elem old-position new-position)
          (bake-entity-lighting zone elem)
          (refresh-target world))))))


;;;
;;;; Rotater
;;;


(definition rotater-step <fl>
  PI/12)


(class Rotater extends Target-Widget
  
  
  (slot remain initialize 0. getter generate)


  (method override (draw-widget self)
    (let ((world (current-world)))
      (let ((target (first-target world)))
        (let ((s (+ 1.5 (min (average-radius target) max-radius)))
              (width .01)
              (matrix (unscaled-matrix target)))
          (glDisable GL_DEPTH_TEST)
          ;; Axis X
          (render-line (vertex 0. 0. 0.)
                       (vertex s  0. 0.)
                       width
                       (widget-dye self 'x red-dye)
                       matrix: matrix)
          
          ;; Axis Y
          (render-line (vertex 0. 0. 0.)
                       (vertex 0. s  0.)
                       width
                       (widget-dye self 'y green-dye)
                       matrix: matrix)
          
          ;; Axis Z
          (render-line (vertex 0. 0. 0.)
                       (vertex 0. 0. s)
                       width
                       (widget-dye self 'z blue-dye)
                       matrix: matrix)
          
          ;; Sphere X
          (render-sphere (matrix-multiply& matrix
                                           (make-translation-matrix& (vertex s 0. 0.))
                                           (make-scaling-matrix& (vertex .11 .11 .11)))
                         color: (widget-dye self 'x red-dye))
          
          ;; Sphere Y
          (render-sphere (matrix-multiply& matrix
                                           (make-translation-matrix& (vertex 0. s 0.))
                                           (make-scaling-matrix& (vertex .11 .11 .11)))
                         color: (widget-dye self 'y green-dye))
          
          ;; Sphere Z
          (render-sphere (matrix-multiply& matrix
                                           (make-translation-matrix& (vertex 0. 0. s))
                                           (make-scaling-matrix& (vertex .11 .11 .11)))
                         color: (widget-dye self 'z blue-dye))
          (glEnable GL_DEPTH_TEST)))))
  
  
  (method override (iterate-polygons self proc)
    (let ((world (current-world)))
      (let ((target (first-target world)))
        (when (and target (target-moveable? target))
          (let ((s (+ 1.5 (min (average-radius target) max-radius)))
                (matrix (unscaled-matrix target))
                (cuboid (make-cuboid))
                (cr .1))
            (define (iterate x y z part)
              (cuboid! cuboid (- x cr) (- y cr) (- z cr) (+ x cr) (+ y cr) (+ z cr))
              (iterate-cuboid-quads cuboid (cons self part) proc matrix: matrix))
            
            (iterate 0. 0. 0. 'global)
            (iterate s  0. 0. 'x)
            (iterate 0. s  0. 'y)
            (iterate 0. 0. s  'z))))))
  
  
  (method override (widget-mouse-down self h v)
    (set! last-point (new Point h v)))
  
  
  (method override (widget-mouse-move self h v)
    (let ((world (current-world)))
      (let ((selection (get-selection world))
            (part (get-widget-part world)))
        (let ((delta (- h (get-h last-point)))
              (shift? (shift-down?)))
          (set! last-point (new Point h v))
          (rotate-selection self selection delta part shift?)))))
  
  
  (method (rotate-selection self selection delta part shift?)
    (let ((d (cast <fl> delta)))
      (let ((inc (* d (/ PI/8 16.))))
        (let ((effective-inc (if shift?
                                 (cond ((>= inc 0.)
                                        (when (< remain 0.)
                                          (set! remain 0.))
                                        (let ((inc (+ inc remain)))
                                          (cond ((< inc rotater-step)
                                                 (set! remain inc)
                                                 #f)
                                                (else
                                                 (set! remain (- inc rotater-step))
                                                 rotater-step))))
                                       (else
                                        (when (> remain 0.)
                                          (set! remain 0.))
                                        (let ((inc (+ inc remain)))
                                          (cond ((> inc (- rotater-step))
                                                 (set! remain inc)
                                                 #f)
                                                (else
                                                 (set! remain (+ inc rotater-step))
                                                 (- rotater-step))))))
                               inc)))
          (when effective-inc
            (for-each (lambda (elem)
                        (rotate-element self elem effective-inc part shift?))
                      selection))))))
  
  
  (method (rotate-element self elem inc part shift?)
    (let ((zone (current-zone)))
      (let ((old-lookat (copy-lookat (get-lookat elem)))
            (new-lookat (case part
                          ((x) (rotate-lookat (get-lookat elem) inc (get-right (get-lookat elem))))
                          ((y) (rotate-lookat (get-lookat elem) inc (get-up (get-lookat elem))))
                          ((z) (rotate-lookat (get-lookat elem) inc (get-sight (get-lookat elem)))))))
        (with-designer zone elem
          (lambda (designer container)
            (set-property designer elem 'lookat new-lookat)))
        (lookat-property-change (current-seconds) elem old-lookat new-lookat)))))


;;;
;;;; Scaler
;;;


(class Scaler extends Target-Widget


  (method override (draw-widget self)
    (let ((world (current-world)))
      (let ((target (first-target world)))
        (let ((s (+ 1.5 (min (average-radius target) max-radius)))
              (width .01)
              (matrix (unscaled-matrix target)))
          (glDisable GL_DEPTH_TEST)
          ;; Axis X
          (render-line (vertex 0. 0. 0.)
                       (vertex s  0. 0.)
                       width
                       (widget-dye self 'x red-dye)
                       matrix: matrix)
          
          ;; Axis Y
          (render-line (vertex 0. 0. 0.)
                       (vertex 0. s  0.)
                       width
                       (widget-dye self 'y green-dye)
                       matrix: matrix)
          
          ;; Axis Z
          (render-line (vertex 0. 0. 0.)
                       (vertex 0. 0. s)
                       width
                       (widget-dye self 'z blue-dye)
                       matrix: matrix)
          
          ;; Sphere X
          (render-cube (matrix-multiply& matrix
                                         (make-translation-matrix& (vertex s 0. 0.))
                                         (make-scaling-matrix& (vertex .1 .1 .1)))
                       color: (widget-dye self 'x red-dye))
          
          ;; Sphere Y
          (render-cube (matrix-multiply& matrix
                                         (make-translation-matrix& (vertex 0. s 0.))
                                         (make-scaling-matrix& (vertex .1 .1 .1)))
                       color: (widget-dye self 'y green-dye))
          
          ;; Sphere Z
          (render-cube (matrix-multiply& matrix
                                         (make-translation-matrix& (vertex 0. 0. s))
                                         (make-scaling-matrix& (vertex .1 .1 .1)))
                       color: (widget-dye self 'z blue-dye))
          
          ;; Sphere Global
          (render-cube (matrix-multiply& matrix
                                         (make-scaling-matrix& (vertex .14 .14 .14)))
                       color: (widget-dye self 'global (dye .5 .5 .5 1.)))
          (glEnable GL_DEPTH_TEST)))))
  
  
  (method override (iterate-polygons self proc)
    (let ((world (current-world)))
      (let ((target (first-target world)))
        (when (and target (target-moveable? target))
          (let ((s (+ 1.5 (min (average-radius target) max-radius)))
                (matrix (unscaled-matrix target))
                (cuboid (make-cuboid))
                (cr .1))
            (define (iterate x y z part)
              (cuboid! cuboid (- x cr) (- y cr) (- z cr) (+ x cr) (+ y cr) (+ z cr))
              (iterate-cuboid-quads cuboid (cons self part) proc matrix: matrix))
            
            (iterate 0. 0. 0. 'global)
            (iterate s  0. 0. 'x)
            (iterate 0. s  0. 'y)
            (iterate 0. 0. s  'z))))))
  
  
  (method override (widget-mouse-down self h v)
    (set! last-point (new Point h v)))
  
  
  (method override (widget-mouse-move self h v)
    (let ((world (current-world)))
      (let ((selection (get-selection world))
            (part (get-widget-part world)))
        (let ((delta (- h (get-h last-point))))
          (set! last-point (new Point h v))
          (scale-selection self selection delta part)))))
  
  
  (method (scale-selection self selection delta part)
    (for-each (lambda (elem)
                (scale-element self elem delta part))
              selection))
  
  
  (method (scale-element self elem delta part)
    (let ((world (current-world))
          (zone (current-zone)))
      (let ((d (cast <fl> delta))
            (f 1.05))
        (unless (= d 0.)
          (let ((factor (if (> d 0.) f (/ f)))
                (scale (get-scale elem)))
            (let ((old-scale (copy-vertex scale))
                  (ox (vertex-x scale))
                  (oy (vertex-y scale))
                  (oz (vertex-z scale)))
              (let ((test (if (> factor 1.) > <))
                    (limit (if (> factor 1.) max-scaling min-scaling)))
                (define (cap old factor)
                  (let ((new (* old factor)))
                    (if (test new limit)
                        (/ limit old)
                      factor)))
                
                (unless (case part
                          ((global) (or (test ox limit)
                                        (test oy limit)
                                        (test oz limit)))
                          ((x) (test ox limit))
                          ((y) (test oy limit))
                          ((z) (test oz limit)))
                  (let ((new-scale (case part
                                     ((global) (let ((factor ((if (> factor 1.) min max)
                                                              (cap ox factor)
                                                              (cap oy factor)
                                                              (cap oz factor))))
                                                 (vertex-scalar* scale factor)))
                                     ((x) (vertex (* ox (cap ox factor)) oy oz))
                                     ((y) (vertex ox (* oy (cap oy factor)) oz))
                                     ((z) (vertex ox oy (* oz (cap oz factor)))))))
                    (with-designer zone elem
                      (lambda (designer container)
                        (set-property designer elem 'scale new-scale)))
                    (scale-property-change (current-seconds) elem old-scale new-scale)
                    (refresh-target world)))))))))))


;;;
;;;; Skeleton
;;;


(definition selected-bone
  #f)

(definition selected-chain
  #f)

(definition public (get-selected-bone)
  selected-bone)

(definition public (get-selected-chain)
  selected-chain)

(definition public (set-selected-bone bone)
  (set! selected-bone bone)
  (set! selected-chain (and bone (bone-chain (get-animation ?o) bone))))


(definition highlight-feet?
  #f)


(class Skeleton extends Target-Widget
  
  
  @xp
  (method override (draw-widget self)
    (let ((world (current-world)))
      (for-each (lambda (target)
                  (let ((morphing (get-morphing target)))
                    (when morphing
                      (let ((morphs (get-morphs morphing)))
                        (define (draw parent level)
                          (loop (for morph in-vector morphs)
                                (when (eq? (get-parent morph) parent)
                                  (let ((selected? (eqv? (get-index (get-bone morph)) selected-bone)))
                                    (let ((scaling .01 @w (if selected? .02 .004)))
                                      (let ((matrix (matrix-multiply& (effective-matrix& target) (get-global-skeleton-matrix (get-bone morph)) @w (get-global-matrix morph))))
                                        (render-sphere (matrix-multiply& matrix (make-scaling-matrix& (vertex& scaling scaling scaling))) color: (if selected? yellow-dye (if (not (get-parent morph)) green-dye red-dye)))
                                        (let ((head (matrix-transform& matrix (vertex& 0. 0. 0.)))
                                              (tail (matrix-transform& matrix (vertex-scalar*& (vertex& 0. 0. 1.) (get-length (get-bone morph))))))
                                          (render-line head tail .005 blue-dye)))))
                                  (draw morph (+ level 1)))))
                        
                        (glDisable GL_DEPTH_TEST)
                        (draw #f 0)
                        (glEnable GL_DEPTH_TEST)))))
                (get-selection world))))
  
  
  (method override (draw-widget self)
    (let ((world (current-world)))
      (for-each (lambda (target)
                  (let ((morphing (get-morphing target)))
                    (when morphing
                      (let ((morphs (get-morphs morphing))
                            (feet (or (and highlight-feet? (get-feet-bones (cache-model target))) '())))
                        (define (draw parent level)
                          (loop (for morph in-vector morphs)
                                (when (eq? (get-parent morph) parent)
                                  (let ((selected? (or (eqv? (get-index (get-bone morph)) selected-bone) (memv? (get-index (get-bone morph)) feet))))
                                    (let ((scaling (if selected? .02 .004)))
                                      (let ((matrix (matrix-multiply& (effective-matrix& target) (get-global-matrix morph) (make-scaling-matrix& (vertex& scaling scaling scaling)))))
                                        (render-sphere matrix color: (if selected? yellow-dye red-dye))
                                        (when parent
                                          (let ((parent-matrix (matrix-multiply& (effective-matrix& target) (get-global-matrix parent) (make-scaling-matrix& (vertex& scaling scaling scaling))))
                                                (parent-selected? (eqv? (get-index (get-bone parent)) selected-bone))
                                                (morph-selected? (and selected-chain (memv? (get-index (get-bone morph)) selected-chain))))
                                            (let ((pos (matrix-transform& matrix (vertex& 0. 0. 0.)))
                                                  (parent-pos (matrix-transform& parent-matrix (vertex& 0. 0. 0.))))
                                              (render-line parent-pos pos .0025 (if parent-selected? yellow-dye (if morph-selected? green-dye blue-dye)))))))))
                                  (draw morph (+ level 1)))))
                        
                        (glDisable GL_DEPTH_TEST)
                        (draw #f 0)
                        (glEnable GL_DEPTH_TEST)))))
                (get-selection world))))))
