;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; Simulate
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.simulate jazz


(import (jazz.geometry)
        (world.math))


(definition public (add-latency procedures)
  (lambda (time)
    (loop (for proc in procedures)
          (sum (proc time)))))


(definition public (rise-latency (max: max <fl> 1.) (duration: duration 60.))
  (let ((base #f))
    (lambda (time)
      (when (not base)
        (set! base time))
      (let ((elapse (- time base)))
        (* (/ (min elapse duration) duration) max)))))


(definition public (fall-latency (max: max <fl> 1.) (duration: duration 60.))
  (let ((base #f))
    (lambda (time)
      (when (not base)
        (set! base time))
      (let ((elapse (- time base)))
        (- max (* (/ (min elapse duration) duration) max))))))


(definition public (updown-latency (bottom: bottom <fl> 5.) (rise: rise <fl> 1.) (top: top <fl> 5.) (fall: fall <fl> 1.) (min: min <fl> 0.) (max: max <fl> 1.))
  (let ((base #f))
    (lambda (time)
      (when (not base)
        (set! base time))
      (let ((elapse (- time base)))
        (let ((a bottom)
              (b (+ bottom rise))
              (c (+ bottom rise top))
              (d (+ bottom rise top fall)))
          (let ((elapse (flmodulo elapse d)))
            (cond ((< elapse a)
                   min)
                  ((< elapse b)
                   (interpolate elapse a b min max))
                  ((< elapse c)
                   max)
                  ((< elapse d)
                   (interpolate elapse c d max min))
                  (else
                   min))))))))


(definition public (sin-latency (max: max <fl> 1.) (period: period <fl> 8.) (spikes: spikes #f))
  (let ((base #f))
    (lambda (time)
      (when (not base)
        (set! base time))
      (let ((elapse (- time base)))
        (let ((latency (/ (* (+ (sin (/ (* elapse PI*2) period)) 1.) max) 2.)))
          (if (and spikes (< (random-real) .01))
              (+ latency spikes)
            latency))))))


(definition public (no-latency)
  (lambda (time)
    0.))


(definition public (fixed-latency lat <fl>)
  (lambda (time)
    lat))


(definition public (random-latency (max: max <fl> .025) (change: change 50))
  (let ((count 0)
        (latency #f))
    (lambda (time)
      (cond ((or (not latency)
                 (= count 0))
             (set! latency (random-between 0. max))
             (set! count (random change))
             latency)
            (else
             (decrease! count)
             latency)))))


(definition public (recorded-latency lst)
  (lambda (time)
    (prog1 (car lst)
      (unless (null? (cdr lst))
        (set! lst (cdr lst)))))))
