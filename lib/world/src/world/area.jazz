;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Areas
;;;


(module world.area jazz


(import (jazz.geometry)
        (jazz.graphic)
        (jazz.graphic.opengl.glew)
        (jazz.io)
        (jazz.library)
        (jazz.literals)
        (jazz.media)
        (jazz.network)
        (jazz.platform)
        (jazz.platform.cairo)
        (jazz.runtime)
        (jazz.system)
        (jazz.ui)
        (jazz.ui.dialog)
        (jazz.ui.window)
        (time)
        (world)
        (world.actor)
        (world.autoload)
        (world.block)
        (world.element)
        (world.foreign)
        (world.geometry)
        (world.history)
        (world.texture)
        (world.window)
        (world.client.window))


;;;
;;;; Area
;;;


(class Area extends Object
  
  
  (slot index   <list>                getter generate)
  (slot tiles   <list> initialize '() accessors generate)
  (slot actors  <list> initialize '() accessors generate)
  (slot gadgets <list> initialize '() accessors generate)
  (slot visit   <fx>   initialize -1  accessors generate)
  
  
  (method override (initialize index)
    (set! index~self index))
  
  
  (method override (print output readably)
    (print-unreadable self output
      (lambda (output)
        (let ((tiles (length tiles))
              (actors (length actors))
              (gadgets (length gadgets)))
          (format output
                  "{a}{a}{a}{a}"
                  (format "{l}{a}" index (if (or (/= tiles 0) (/= actors 0)) " with " ""))
                  (if (= tiles 0) "" (format "{a} tile{a}" tiles (format-plural tiles)))
                  (if (= actors 0) "" (format "{a}{a} actor{a}" (if (= tiles 0) "" ", ") actors (format-plural actors)))
                  (if (= gadgets 0) "" (format "{a}{a} gadget{a}" (if (and (= tiles 0) (= actors 0)) "" ", ") gadgets (format-plural gadgets))))))))))
