;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; Areas
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.area jazz


(import (gaea.geometry)
        (world)
        (world.context)
        (world.expanse)
        (world.index)
        (world.polygon))


(proclaim (not check bounds zero)
          (warn optimizations))


;;;
;;;; Area
;;;


(class Area extends Object
  
  
  (slot index              <index>                     getter generate)
  (slot expanse            <Expanse>                   getter generate)
  (slot header             <table>                     getter generate)
  (slot polygons           <f64vector+> initialize #f  accessors generate)
  (slot polygons-elements  <vector+>    initialize #f  accessors generate)
  (slot physical-uptodate? <bool>       initialize #f  accessors generate)
  (slot physical-revision  <fx>         initialize -1  accessors generate)
  (slot visit              <u32vector>                 getter generate)
  
  
  (method override (initialize self index expanse)
    (set! self.index index)
    (set! self.expanse expanse)
    (set! self.header (make-table test: equal?))
    (set! self.visit (make-u32vector 512 0)))
  
  
  (method override (print self output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{a}, {a}, {a}" (index-x index) (index-y index) (index-z index)))))
  
  
  (method package inline (visit-ref self index <fx>)
    (u32vector-ref visit index))
  
  
  (method package inline (visit-set! self index <fx> value)
    (u32vector-set! visit index value))
  
  
  (method package (get-position& self) <vertex>
    (vertex& (* (cast <fl> (index-x index)) 16.)
             (* (cast <fl> (index-y index)) 16.)
             (* (cast <fl> (index-z index)) 16.)))
  
  
  (method package (update-physical self)
    (let ((zone (current-zone)))
      (let ((generator-revision (get-revision (get-generator zone))))
        (when (or (not physical-uptodate?)
                  (< physical-revision generator-revision))
          (generate-physical zone self physical-uptodate?))
        (set! physical-uptodate? #t)
        (set! physical-revision generator-revision))))
  
  
  (method (local-index self i <fx> j <fx> k <fx>) <fx>
    (+ (* j 64) (* k 8) i))
  
  
  (method (index->coordinates self index <fx>)
    (let ((i (modulo index 8))
          (k (modulo (quotient index 8) 8))
          (j (modulo (quotient (quotient index 8) 8) 8)))
      (vector i j k)))
  
  
  (method package (position-index self pos <vertex>) <fx>
    (let ((zone (current-zone)))
      (let ((size (get-area-size zone))
            (ratio (get-sector/area-ratio zone)))
        (local-index self
                     (between-interval 0 (fxfloor (/ (vertex-x pos) size)) ratio)
                     (between-interval 0 (fxfloor (/ (vertex-y pos) size)) ratio)
                     (between-interval 0 (fxfloor (/ (vertex-z pos) size)) ratio)))))
  
  
  (method package (subarea-index self i <fx> j <fx> k <fx>) <fx>
    (local-index self
                 (modulo i 8)
                 (modulo j 8)
                 (modulo k 8)))
  
  
  (method package (iterate-polygons self env index proc)
    (let ((polygons <f64vector+> (table-ref header index #f)))
      (when polygons
        (loop (for i from 0 below (fxround/ (f64vector-length polygons) polygon-float-size))
              (let ((offset (* i polygon-float-size)))
                (proc env
                      (and polygons-elements (vector-ref polygons-elements i))
                      polygons
                      offset))))))
  
  
  (method package (add-polygons self element index <fx> lst matrix)
    (define (add-at vect offset <fx>)
      (for-each (lambda (poly <Polygon>)
                  (polygon-move! poly vect offset matrix)
                  (increase! offset polygon-float-size))
                lst))
    
    (let ((count (length lst)))
      (let ((add (* count polygon-float-size)))
        (let ((vect (make-f64vector add)))
          (add-at vect 0)
          (table-set! header index vect)))))
  
  
  (method package (clear-polygons self)
    (set! header (make-table test: equal?))
    (set! polygons #f)
    (set! polygons-elements #f)))


;;;
;;;; Area Retainer
;;;


(definition public (with-area-retainer retainer proc)
  (let ((queue #f))
    (define (retain area)
      (when (not queue)
        (set! queue (new-queue)))
      (enqueue queue area))
    
    (proc retain)))


;;;
;;;; Area Cube
;;;


(proclaim (warn optimizations))


(class Area-Cube extends Object
  
  
  (slot cube-radius     <fx>     getter generate)
  (slot cube-diameter   <fx>     getter generate)
  (slot cube-diameter^2 <fx>     getter generate)
  (slot cube-diameter^3 <fx>     getter generate)
  (slot cube-areas      <vector> getter generate)
  (slot cube-indexes    <vector> getter generate)
  (slot cube-index      <index>  getter generate)
  (slot cube-inited?    <bool>   getter generate)
  
  
  (method override (initialize self radius)
    (set! cube-radius radius)
    (set! cube-diameter (+ cube-radius 1 cube-radius))
    (set! cube-diameter^2 (expt cube-diameter 2))
    (set! cube-diameter^3 (expt cube-diameter 3))
    (set! cube-areas (make-vector cube-diameter^3 #f))
    (set! cube-indexes (make-vector cube-diameter^3 #f))
    (set! cube-index (make-index))
    (set! cube-inited? #f))
  
  
  (method (areas-index self i <fx> j <fx> k <fx>) <fx>
    (+ (* j cube-diameter^2) (* k cube-diameter) i))
  
  
  (method package (update-cube self pos <vertex>) <void>
    (declare (proper-tail-calls))
    (declare (optimize-dead-local-variables))
    (declare (inline))
    (declare (inlining-limit 1000))
    (let ((zone (current-zone)))
      (let ((index (position-area-index zone pos)))
        (unless (and cube-inited? (equal? index cube-index))
          ;; update areas
          (let ((areas cube-areas)
                (indexes cube-indexes)
                (a (- (index-x index) cube-radius))
                (b (- (index-y index) cube-radius))
                (c (- (index-z index) cube-radius)))
            (define (area-new index <fx> i j k)
              (let ((area (indexed-area zone i j k)))
                (vector-set! areas index area)
                (vector-set! indexes index (subarea-index area i j k))))
            
            (define (area-free area)
              )
            
            (if (not cube-inited?)
                (begin
                  (loop (for i from 0 below cube-diameter)
                        (loop (for j from 0 below cube-diameter)
                              (loop (for k from 0 below cube-diameter)
                                    (area-new (areas-index self i j k)
                                              (+ a i)
                                              (+ b j)
                                              (+ c k)))))
                  (set! cube-inited? #t))
              (let ((last (- cube-diameter 1))
                    (dx (- (index-x index) (index-x cube-index)))
                    (dy (- (index-y index) (index-y cube-index)))
                    (dz (- (index-z index) (index-z cube-index))))
                (define (by delta <fx>)
                  (if (>= delta 0)
                      1
                    -1))
                
                (loop (for x start 0 end last by (by dx))
                      (let ((fx (+ x dx))
                            (tx x))
                        (loop (for y start 0 end last by (by dy))
                              (let ((fy (+ y dy))
                                    (ty y))
                                (loop (for z start 0 end last by (by dz))
                                      (let ((fz (+ z dz))
                                            (tz z))
                                        (let ((fi (and (between? fx 0 last)
                                                       (between? fy 0 last)
                                                       (between? fz 0 last)
                                                       (areas-index self fx fy fz)))
                                              (ti (areas-index self tx ty tz)))
                                          (let ((area (vector-ref areas ti)))
                                            (when area
                                              ;; free
                                              (area-free area)))
                                          (if fi
                                              (begin
                                                ;; move
                                                (vector-set! areas ti (vector-ref areas fi))
                                                (vector-set! areas fi #f)
                                                (vector-set! indexes ti (vector-ref indexes fi))
                                                (vector-set! indexes fi #f))
                                            ;; new
                                            (area-new ti (+ a tx) (+ b ty) (+ c tz)))))))))))))
          ;; update index
          (index-copy! cube-index index)))))
  
  
  (method package (iterate-neighbor-areas self pos distance <fx> proc)
    (declare (proper-tail-calls))
    (declare (optimize-dead-local-variables))
    (declare (inline))
    (declare (inlining-limit 1000))
    (let ((zone (current-zone)))
      (let ((pos-index (position-area-index zone pos)))
        (let ((di (- (index-x pos-index) (index-x cube-index)))
              (dj (- (index-y pos-index) (index-y cube-index)))
              (dk (- (index-z pos-index) (index-z cube-index)))
              (lower (-  distance))
              (upper distance)
              (last (- cube-diameter 1)))
          (loop (for i from lower to upper)
                (loop (for j from lower to upper)
                      (loop (for k from lower to upper)
                            (let ((a (+ cube-radius i di))
                                  (b (+ cube-radius j dj))
                                  (c (+ cube-radius k dk))
                                  (x (+ (index-x pos-index) i))
                                  (y (+ (index-y pos-index) j))
                                  (z (+ (index-z pos-index) k)))
                              (let ((in? (and (between? a 0 last)
                                              (between? b 0 last)
                                              (between? c 0 last))))
                                (let ((idx (and in? (areas-index self a b c))))
                                  (let ((area (if in?
                                                  (vector-ref cube-areas (allege idx))
                                                (indexed-area zone x y z))))
                                    (let ((index (if in?
                                                     (vector-ref cube-indexes (allege idx))
                                                   (subarea-index area x y z))))
                                      (update-physical area)
                                      (proc area index (not in?))))))))))))))))
