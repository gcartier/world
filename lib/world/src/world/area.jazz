;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Areas
;;;


(module world.area jazz


(import (jazz.geometry)
        (jazz.graphic)
        (jazz.graphic.opengl.glew)
        (jazz.io)
        (jazz.library)
        (jazz.literals)
        (jazz.media)
        (jazz.network)
        (jazz.platform)
        (jazz.platform.cairo)
        (jazz.runtime)
        (jazz.system)
        (jazz.ui)
        (jazz.ui.dialog)
        (jazz.ui.window)
        (time)
        (world)
        (world.actor)
        (world.autoload)
        (world.block)
        (world.foreign)
        (world.geometry)
        (world.history)
        (world.object)
        (world.sprite)
        (world.texture)
        (world.window)
        (world.client.window))


;;;
;;;; Area
;;;


(class Area extends Object
  
  
  (slot index   <list>                getter generate)
  (slot assets  <list> initialize '() accessors generate)
  (slot actors  <list> initialize '() accessors generate)
  (slot gadgets <list> initialize '() accessors generate)
  
  
  (method override (initialize index)
    (set! index~self index))
  
  
  (method override (print output readably)
    (print-unreadable self output
      (lambda (output)
        (let ((assets (length assets))
              (actors (length actors))
              (gadgets (length gadgets)))
          (format output
                  "{a}{a}{a}{a}"
                  (format "{l}{a}" index (if (or (/= assets 0) (/= actors 0)) " with " ""))
                  (if (= assets 0) "" (format "{a} asset{a}" assets (format-plural assets)))
                  (if (= actors 0) "" (format "{a}{a} actor{a}" (if (= assets 0) "" ", ") actors (format-plural actors)))
                  (if (= gadgets 0) "" (format "{a}{a} gadget{a}" (if (and (= assets 0) (= actors 0)) "" ", ") gadgets (format-plural gadgets))))))))))
