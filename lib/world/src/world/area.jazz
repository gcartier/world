;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Areas
;;;


(module world.area jazz


(import (jazz.geometry)
        (jazz.graphic)
        (jazz.graphic.opengl.glew)
        (jazz.io)
        (jazz.library)
        (jazz.literals)
        (jazz.media)
        (jazz.network)
        (jazz.platform)
        (jazz.platform.cairo)
        (jazz.runtime)
        (jazz.system)
        (jazz.ui)
        (jazz.ui.dialog)
        (jazz.ui.window)
        (time)
        (world)
        (world.actor)
        (world.autoload)
        (world.block)
        (world.element)
        (world.foreign)
        (world.geometry)
        (world.history)
        (world.syntax (phase syntax))
        (world.texture)
        (world.window)
        (world.client.window))


;;;
;;;; Area
;;;


(class Area extends Object
  
  
  (slot index    <vector>                 getter generate)
  (slot polygons <vector+> initialize #f  accessors generate)
  (slot tiles    <list>    initialize '() accessors generate)
  (slot actors   <list>    initialize '() accessors generate)
  (slot gadgets  <list>    initialize '() accessors generate)
  (slot visit    <fx>      initialize -1  accessors generate)
  
  
  (method override (initialize index)
    (set! index~self index))
  
  
  (method override (print output readably)
    (print-unreadable self output
      (lambda (output)
        (let ((tiles (length tiles))
              (actors (length actors))
              (gadgets (length gadgets)))
          (format output
                  "{a}{a}{a}{a}"
                  (format "{a}, {a}, {a}{a}" (vector-ref index 0) (vector-ref index 1) (vector-ref index 2) (if (or (/= tiles 0) (/= actors 0)) " with " ""))
                  (if (= tiles 0) "" (format "{a} tile{a}" tiles (format-plural tiles)))
                  (if (= actors 0) "" (format "{a}{a} actor{a}" (if (= tiles 0) "" ", ") actors (format-plural actors)))
                  (if (= gadgets 0) "" (format "{a}{a} gadget{a}" (if (and (= tiles 0) (= actors 0)) "" ", ") gadgets (format-plural gadgets))))))))
  
  
  (method (add-polygons lst)
    (if (not polygons)
        (set! polygons (list->vector lst))
      (set! polygons (list->vector (append! (vector->list polygons) lst)))))
  
  
  (method (remove-polygons element)
    (when polygons
      (set! polygons (list->vector (collect-if (lambda (poly)
                                                 (neq? (get-element~ poly) element))
                                               (vector->list polygons))))))))
