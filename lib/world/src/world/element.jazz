;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Elements
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2013
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.element jazz


(import (jazz.geometry)
        (jazz.graphic)
        (jazz.graphic.opengl.glew)
        (jazz.io)
        (jazz.library)
        (jazz.literals)
        (jazz.media)
        (jazz.network)
        (jazz.platform)
        (jazz.platform.cairo)
        (jazz.runtime)
        (jazz.system)
        (jazz.ui)
        (jazz.ui.dialog)
        (jazz.ui.window)
        (time)
        (world)
        (world.autoload)
        (world.draw)
        (world.dye)
        (world.dyes)
        (world.face)
        (world.foreign)
        (world.geometry)
        (world.history)
        (world.lookat)
        (world.opengl)
        (world.quad)
        (world.syntax (phase syntax))
        (world.texture)
        (world.triangle))


;;;
;;;; Element
;;;


(class Element extends Component
  
  
  (property position     <f64vector>  initialize (make-zero-vertex)     getter generate setter explicit)
  (property lookat       <LookAt>     initialize (make-standard-lookat) getter generate setter explicit)
  (property scale        <f64vector>  initialize (vertex 1. 1. 1.)      getter generate setter explicit)
  (property color        <f32vector>  initialize (make-dye)             getter generate setter explicit)
  (property hit-behavior <object>     initialize #f                     accessors generate)
  (property user-data    <object>     initialize #f                     accessors generate)
  
  
  (slot matrix   <f64vector>  initialize (make-identity-matrix) getter generate)
  (slot radiuses <f64vector+> initialize #f                     getter explicit)
  (slot radius   <fl+>        initialize #f                     getter explicit)
  (slot original <object>                                       getter generate)
  
  
  (method override (finish rest)
    (nextmethod rest)
    (set! original self))
  
  
  (method override (print output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{a}" (present-vertex position)))))
  
  
  (method public inline (get-x) <fl>
    (vertex-x position))
  
  (method public (set-x x <fl>) <void>
    (unless (= x (get-x))
      (vertex-x-set! position x)
      (update-matrix)))
  
  
  (method public inline (get-y) <fl>
    (vertex-y position))
  
  (method public (set-y y <fl>) <void>
    (unless (= y (get-y))
      (vertex-y-set! position y)
      (update-matrix)))
  
  
  (method public inline (get-z) <fl>
    (vertex-z position))
  
  (method public (set-z z <fl>) <void>
    (unless (= z (get-z))
      (vertex-z-set! position z)
      (update-matrix)))
  
  
  (method public (set-position v <f64vector>) <void>
    (unless (vertex-near? v position)
      (vertex-copy! position v)
      (update-matrix)))

  
  (method public (set-matrix mat <f64vector>) <void>
    (matrix-copy! matrix mat))
  
  
  (method public (set-lookat l <LookAt>) <void>
    (set-sight~ lookat (get-sight~ l))
    (set-up~ lookat (get-up~ l))
    (set-right~ lookat (get-right~ l))
    (update-matrix))
  
  
  (method public (init-lookat sight <f64vector> up <f64vector> (right #f)) <void>
    (set-sight~ lookat sight)
    (set-up~ lookat up)
    (set-right~ lookat (or right (cross-normal& sight up)))
    (update-matrix))
  
  
  (method public (realign-lookat new-up <f64vector>) <void>
    (realign-lookat! lookat new-up)
    (update-matrix))
  
  
  (method public (rotate angle <fl>) <void>
    (rotate-lookat! lookat angle (get-up~ lookat))
    (update-matrix))
  
  
  (method public (set-scale s <f64vector>) <void>
    (vertex-copy! scale s)
    (reset-radiuses)
    (update-matrix))
  
  (method public (set-scaling s <fl>) <void>
    (vertex-init! scale s s s)
    (reset-radiuses)
    (update-matrix))
  
  
  (method public inline (get-scale-x) <fl>
    (vertex-x (get-scale)))
  
  (method public inline (get-scale-y) <fl>
    (vertex-y (get-scale)))
  
  (method public inline (get-scale-z) <fl>
    (vertex-z (get-scale)))
  
  
  (method public (average-scaling) <fl>
    (let ((scale (get-scale)))
      (/ (+ (vertex-x scale)
            (vertex-y scale)
            (vertex-z scale))
         3.)))
  
  
  (method public (get-radiuses) <f64vector>
    (or radiuses
        (begin
          (update-radiuses)
          radiuses)))
  
  (method public (set-radiuses r <f64vector>) <void>
    (set! radiuses r)
    (set! radius (element-radius)))
  
  
  (method public inline (get-radius-x) <fl>
    (vertex-x (get-radiuses)))
  
  (method public inline (get-radius-y) <fl>
    (vertex-y (get-radiuses)))
  
  (method public inline (get-radius-z) <fl>
    (vertex-z (get-radiuses)))
  
  
  (method public inline (get-width) <fl>
    (* (get-radius-x) 2.))
  
  (method public inline (get-height) <fl>
    (* (get-radius-y) 2.))
  
  (method public inline (get-depth) <fl>
    (* (get-radius-z) 2.))
  
  
  (method public (get-radius) <fl>
    (or radius
        (begin
          (update-radiuses)
          radius)))
  
  (method public (set-radius r <fl>) <void>
    (set! radius r))
    
  
  (method public inline (get-red) <fl>
    (dye-red color))
  
  (method public inline (get-green) <fl>
    (dye-green color))
  
  (method public inline (get-blue) <fl>
    (dye-blue color))
  
  (method public inline (get-alpha) <fl>
    (dye-alpha color))

  
  (method protected virtual (gadget?)
    #f)
  
  
  (method protected virtual (inside? r vert)
    #f)
  
  
  (method protected virtual (element-faces)
    (cube-faces))
  
  
  (method protected virtual (element-polygons)
    (map get-polygon~ (element-faces)))
  
  
  (method public (cube-faces)
    (let ((world (current-world))
          (x (get-x))
          (y (get-y))
          (z (get-z))
          (bounds (make-cuboid&)))
      (get-bounds! bounds)
      (let ((material (get-block-opaque~ world))
            (left (cuboid-left bounds))
            (right (cuboid-right bounds))
            (bottom (cuboid-bottom bounds))
            (top (cuboid-top bounds))
            (back (cuboid-back bounds))
            (front (cuboid-front bounds)))
        (list
          ;; front face
          (make-face material
                     (f32vector 0. 1. 0. 0. 1. 0. 1. 1.)
                     0.
                     (make-quad self
                                (vertex left top front) (vertex left bottom front) (vertex right bottom front) (vertex right top front)))
          ;; back face
          (make-face material
                     (f32vector 1. 1. 1. 0. 0. 0. 0. 1.)
                     0.
                     (make-quad self
                                (vertex right top back) (vertex right bottom back) (vertex left bottom back) (vertex left top back)))
          ;; left face
          (make-face material
                     (f32vector 1. 0. 0. 0. 0. 1. 1. 1.)
                     0.
                     (make-quad self
                                (vertex left top back) (vertex left bottom back) (vertex left bottom front) (vertex left top front)))
          ;; right face
          (make-face material
                     (f32vector 1. 1. 0. 1. 0. 0. 1. 0.)
                     0.
                     (make-quad self
                                (vertex right top front) (vertex right bottom front) (vertex right bottom back) (vertex right top back)))
          ;; top face
          (make-face material
                     (f32vector 0. 0. 0. 1. 1. 1. 1. 0.)
                     0.
                     (make-quad self
                                (vertex left top back) (vertex left top front) (vertex right top front) (vertex right top back)))
          ;; bottom face
          (make-face material
                     (f32vector 0. 1. 0. 0. 1. 0. 1. 1.)
                     0.
                     (make-quad self
                                (vertex left bottom front) (vertex left bottom back) (vertex right bottom back) (vertex right bottom front)))))))
  
  
  (method public (find-face poly)
    (define (polygon=? p1 p2)
      (every? vertex=? (get-vertices~ p1) (get-vertices~ p2)))
    
    (continuation-capture
      (lambda (return)
        (let ((face-rank 0))
          (for-each (lambda (face)
                      (if (polygon=? (get-polygon~ face) poly)
                          (continuation-return return (values face face-rank))
                        (increase! face-rank)))
                    (element-faces)))
        (values #f #f))))
  
  
  (method public virtual (update-face-texture face face-rank texture)
    )
  
  
  (method public virtual (update-face-shader face face-rank shader)
    )
  
  
  (method protected virtual (element-radiuses)
    (error "Unable to get element radiuses"))
  
  
  (method protected virtual (element-radius)
    (vertex-norm (get-radiuses)))
  
  
  (method (reset-radiuses)
    (set! radiuses #f)
    (set! radius #f))
  
  
  (method (update-radiuses)
    (set-radiuses (element-radiuses)))
  
  
  (method protected virtual (target-radius)
    (get-radius))
  
  
  (method protected virtual (effective-matrix&)
    matrix)
  
  
  (method protected (update-matrix)
    (matrix-multiply! matrix (make-translation-matrix& position)
                             (matrix-multiply& (make-lookat-matrix& lookat)
                                               (make-scaling-matrix& scale))))
  
  
  (method public (get-bounds)
    (let ((bounds (make-cuboid)))
      (get-bounds! bounds)
      bounds))
  
  
  (method public (get-bounds! bounds <f64vector>) <f64vector>
    (let ((x (vertex-x position))
          (y (vertex-y position))
          (z (vertex-z position))
          (radius-x (get-radius-x))
          (radius-y (get-radius-y))
          (radius-z (get-radius-z)))
      (cuboid-init! bounds
                    (- x radius-x)
                    (- y radius-y)
                    (- z radius-z)
                    (+ x radius-x)
                    (+ y radius-y)
                    (+ z radius-z)))
    bounds)
  
  
  (method public virtual (transformed-bounds)
    (let ((bounds (get-bounds)))
      (let ((left (cuboid-left bounds))
            (right (cuboid-right bounds))
            (bottom (cuboid-bottom bounds))
            (top (cuboid-top bounds))
            (back (cuboid-back bounds))
            (front (cuboid-front bounds)))
        (parallelepiped (vertex left bottom back)
                        (vertex left bottom front)
                        (vertex left top back)
                        (vertex left top front)
                        (vertex right bottom back)
                        (vertex right bottom front)
                        (vertex right top back)
                        (vertex right top front)))))
  
  
  (method public virtual (transformed-center)
    (get-position))
  
  
  (method public virtual (transformed-radiuses)
    (get-radiuses))
  
  
  (method public (set-color col)
    (dye-copy! color col))
  
  
  (method public (contains-vertex? vert <f64vector>) <bool>
    (<= (vertex-distance position vert) (get-radius)))
  
  
  (method protected virtual (drawable?)
    #f)
  
  
  (method protected virtual (draw)
    (gl-colorize-dye color)
    (let ((bounds (make-cuboid&)))
      (get-bounds! bounds)
      (let ((x1 (cuboid-left bounds))
            (x2 (cuboid-right bounds))
            (y1 (cuboid-bottom bounds))
            (y2 (cuboid-top bounds))
            (z1 (cuboid-back bounds))
            (z2 (cuboid-front bounds)))
        (render-block x1 x2 y1 y2 z1 z2 GL_QUADS))))
  
  
  (method protected virtual (draw-target dye)
    (let ((world (current-world))
          (bounds (make-cuboid&)))
      (get-bounds! bounds)
      (let ((left (cuboid-left bounds))
            (right (cuboid-right bounds))
            (bottom (cuboid-bottom bounds))
            (top (cuboid-top bounds))
            (back (cuboid-back bounds))
            (front (cuboid-front bounds)))
        (case (get-projection~ (get-eye~ world))
          ((perspective)
           (gl-colorize-dye dye)
           (glLineWidth 2.)
           (glDisable GL_LIGHTING)
           (render-cube left bottom back right top front
             (lambda (proc)
               (glBegin GL_LINE_LOOP)
               (proc)
               (glEnd)))
           (glEnable GL_LIGHTING)
           (glLineWidth 1.))
          ((orthographic)
           (glNormal3f 0.0 0.0 1.0)
           (gl-colorize-dye dye)
           (glBegin GL_LINE_LOOP)
           (glVertex2f left bottom)
           (glVertex2f right bottom)
           (glVertex2f right top)
           (glVertex2f left top)
           (glEnd))))))
  
  
  (method protected virtual (draw-target-circle)
    (glLineWidth 2.)
    (glDisable GL_LIGHTING)
    (gl-horizontal-circle (vertex (get-x) (- (get-y) (* (get-scale-y) (get-radius-y))) (get-z)) (target-radius) (dye->color purple-dye))
    (glEnable GL_LIGHTING)
    (glLineWidth 1.))
  
  
  (method protected virtual (target-moveable?)
    #t)
  
  
  ;;;
  ;;;; Tick
  ;;;
  
  
  (method protected virtual (tick . rest)
    )
  
  
  ;;;
  ;;;; Designer
  ;;;
  
  
  (method public (set-property property value)
    (let ((zone (current-zone)))
      (let ((designer (get-designer~ zone)))
        (set-property~ designer self property value))))))
