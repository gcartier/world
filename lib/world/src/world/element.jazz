;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Elements
;;;


(module world.element jazz


(import (jazz.geometry)
        (jazz.graphic)
        (jazz.graphic.opengl.glew)
        (jazz.io)
        (jazz.library)
        (jazz.literals)
        (jazz.media)
        (jazz.network)
        (jazz.platform)
        (jazz.platform.cairo)
        (jazz.runtime)
        (jazz.system)
        (jazz.ui)
        (jazz.ui.dialog)
        (jazz.ui.window)
        (time)
        (world)
        (world.autoload)
        (world.draw)
        (world.dye)
        (world.dyes)
        (world.face)
        (world.foreign)
        (world.geometry)
        (world.history)
        (world.opengl)
        (world.quad)
        (world.syntax (phase syntax))
        (world.texture)
        (world.triangle)
        (world.window)
        (world.client.window))


;;;
;;;; Element
;;;


(class Element extends Component
  
  
  (property position     <f32vector> initialize (make-vertex) getter generate setter explicit)
  (property radiuses     <f32vector> initialize (make-vertex) getter generate setter explicit)
  (property radius       <fl>        initialize 0.            accessors generate)
  (property scale        <fl>        initialize 1.            accessors generate)
  (property color        <f32vector> initialize (make-dye)    getter generate setter explicit)
  (property texture      <object>    initialize #f            accessors generate)
  (property hit-behavior <object>    initialize #f            accessors generate)
  (property user-data    <object>    initialize #f            accessors generate)
  
  
  (slot origin <object> getter generate)
  
  
  (method override (finish rest)
    (nextmethod rest)
    (set! origin self)
    (position-update)
    (radiuses-update))
  
  
  (method override (print output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{a}" (present-vertex position)))))
  
  
  (method protected virtual (copy-from from)
    (set! position (clone-vertex (get-position~ from)))
    (set! radiuses (clone-vertex (get-radiuses~ from)))
    (set! color (copy-dye (get-color~ from))))
  
  
  (method public inline (get-x) <fl>
    (vertex-x position))
  
  (method public (set-x x <fl>) <void>
    (vertex-x-set! position x)
    (position-update))
  
  
  (method public inline (get-y) <fl>
    (vertex-y position))
  
  (method public (set-y y <fl>) <void>
    (vertex-y-set! position y)
    (position-update))
  
  
  (method public inline (get-z) <fl>
    (vertex-z position))
  
  (method public (set-z z <fl>) <void>
    (vertex-z-set! position z)
    (position-update))
  
  
  (method public (set-position v <f32vector>) <void>
    (vertex-copy! position v)
    (position-update))
  
  
  (method public (set-radiuses r <f32vector>) <void>
    (vertex-copy! radiuses r)
    (radiuses-update))
  
  
  (method public inline (get-radius-x) <fl>
    (vertex-x radiuses))
  
  (method public inline (get-radius-y) <fl>
    (vertex-y radiuses))
  
  (method public inline (get-radius-z) <fl>
    (vertex-z radiuses))
  
  
  (method public inline (get-width) <fl>
    (* (get-radius-x) 2.))
  
  (method public inline (get-height) <fl>
    (* (get-radius-y) 2.))
  
  (method public inline (get-depth) <fl>
    (* (get-radius-z) 2.))
    
  
  (method public inline (get-red) <fl>
    (dye-red color))
  
  (method public inline (get-green) <fl>
    (dye-green color))
  
  (method public inline (get-blue) <fl>
    (dye-blue color))
  
  (method public inline (get-alpha) <fl>
    (dye-alpha color))

  
  (method protected virtual (gadget?)
    #f)
  
  
  (method protected virtual (inside? r vert)
    #f)
  
  
  (method protected virtual (element-faces)
    (cube-faces))
  
  
  (method public (cube-faces)
    (let ((x (get-x))
          (y (get-y))
          (z (get-z))
          (bounds (make-cuboid&)))
      (get-bounds! bounds)
      (let ((l (cuboid-left bounds))
            (r (cuboid-right bounds))
            (b (cuboid-bottom bounds))
            (t (cuboid-top bounds))
            (f (cuboid-back bounds))
            (n (cuboid-front bounds)))
        (list
          ;; front face
          (make-face #f
                     (f32vector 0. 1. 1. 1. 1. 0. 0. 0.)
                     (make-quad self
                                (vertex 0. 0. 1.)
                                (vertex l t n) (vertex r t n) (vertex r b n) (vertex l b n)
                                radius))
          ;; back face
          (make-face #f
                     (f32vector 1. 1. 0. 1. 0. 0. 1. 0.)
                     (make-quad self
                                (vertex 0. 0. -1.)
                                (vertex r t f) (vertex l t f) (vertex l b f) (vertex r b f)
                                radius))
          ;; left face
          (make-face #f
                     (f32vector 1. 0. 1. 1. 0. 1. 0. 0.)
                     (make-quad self
                                (vertex -1. 0. 0.)
                                (vertex l t f) (vertex l t n) (vertex l b n) (vertex l b f)
                                radius))
          ;; right face
          (make-face #f
                     (f32vector 1. 1. 1. 0. 0. 0. 0. 1.)
                     (make-quad self
                                (vertex 1. 0. 0.)
                                (vertex r t n) (vertex r t f) (vertex r b f) (vertex r b n)
                                radius))
          ;; top face
          (make-face #f
                     (f32vector 0. 0. 1. 0. 1. 1. 0. 1.)
                     (make-quad self
                                (vertex 0. 1. 0.)
                                (vertex l t f) (vertex r t f) (vertex r t n) (vertex l t n)
                                radius))
          ;; bottom face
          (make-face #f
                     (f32vector 0. 1. 1. 1. 1. 0. 0. 0.)
                     (make-quad self
                                (vertex 0. -1. 0.)
                                (vertex l b n) (vertex r b n) (vertex r b f) (vertex l b f)
                                radius))))))
  
  
  @convert
  (method public virtual (update-face-texture face texture)
    )
  
  
  (method protected virtual (position-update)
    )
  
  
  (method protected virtual (radiuses-update)
    (set! radius (element-radius)))
  
  
  (method protected virtual (element-radius)
    (vertex-norm radiuses))
  
  
  (method public (get-bounds! bounds <f32vector>) <f32vector>
    (let ((x (vertex-x position))
          (y (vertex-y position))
          (z (vertex-z position))
          (radius-x (get-radius-x))
          (radius-y (get-radius-y))
          (radius-z (get-radius-z)))
      (cuboid-init! bounds
                    (- x radius-x)
                    (- y radius-y)
                    (- z radius-z)
                    (+ x radius-x)
                    (+ y radius-y)
                    (+ z radius-z)))
    bounds)
  
  
  (method public (set-color col)
    (dye-copy! color col))
  
  
  (method public (contains-vertex? vert <f32vector>) <bool>
    (<= (vertex-distance position vert) radius))
  
  
  (method protected virtual (draw)
    (let ((world (current-world)))
      (if (get-3d?~ world)
          (if texture
              (draw-3d-textured)
            (draw-3d))
        (if texture
            (draw-2d-textured)
          (draw-2d)))))
  
  
  (method protected virtual (draw-3d)
    (gl-colorize-dye color)
    (let ((bounds (make-cuboid&)))
      (get-bounds! bounds)
      (let ((x1 (cuboid-left bounds))
            (x2 (cuboid-right bounds))
            (y1 (cuboid-bottom bounds))
            (y2 (cuboid-top bounds))
            (z1 (cuboid-back bounds))
            (z2 (cuboid-front bounds)))
        (render-block x1 x2 y1 y2 z1 z2 GL_QUADS))))
  
  
  (method protected virtual (draw-3d-textured)
    (when texture
      (glPushMatrix)
      (glTranslatef (get-x) (get-y) (get-z))
      (let ((f -2.5)
            (t 2.5))
        ;; top
        (glNormal3f 0.0 1.0 0.0)
        (textured-quad~ texture
          (lambda () (glVertex3f t t f))
          (lambda () (glVertex3f f t f))
          (lambda () (glVertex3f f t t))
          (lambda () (glVertex3f t t t)))
        ;; bottom
        (glNormal3f 0.0 -1.0 0.0)
        (textured-quad~ texture
          (lambda () (glVertex3f t f t))
          (lambda () (glVertex3f f f t))
          (lambda () (glVertex3f f f f))
          (lambda () (glVertex3f t f f)))
        ;; front
        (glNormal3f 0.0 0.0 1.0)
        (textured-quad~ texture
          (lambda () (glVertex3f f f t))
          (lambda () (glVertex3f t f t))
          (lambda () (glVertex3f t t t))
          (lambda () (glVertex3f f t t)))
        ;; back
        (glNormal3f 0.0 0.0 -1.0)
        (textured-quad~ texture
          (lambda () (glVertex3f t f f))
          (lambda () (glVertex3f f f f))
          (lambda () (glVertex3f f t f))
          (lambda () (glVertex3f t t f)))
        ;; left
        (glNormal3f -1.0 0.0 0.0)
        (textured-quad~ texture
          (lambda () (glVertex3f f t t))
          (lambda () (glVertex3f f t f))
          (lambda () (glVertex3f f f f))
          (lambda () (glVertex3f f f t)))
        ;; right
        (glNormal3f 1.0 0.0 0.0)
        (textured-quad~ texture
          (lambda () (glVertex3f t t f))
          (lambda () (glVertex3f t t t))
          (lambda () (glVertex3f t f t))
          (lambda () (glVertex3f t f f))))
      (glPopMatrix)))
  
  
  (method (draw-2d)
    (if (in-history?)
        (draw-2d-history)
      (let ((bounds (make-cuboid&)))
        (get-bounds! bounds)
        (let ((x1 (cuboid-left bounds))
              (y1 (cuboid-top bounds))
              (x2 (cuboid-right bounds))
              (y2 (cuboid-bottom bounds)))
          (glNormal3f 0.0 0.0 1.0)
          (gl-colorize-dye color)
          (glBegin GL_QUADS)
          (glVertex2f x1 y1)
          (glVertex2f x2 y1)
          (glVertex2f x2 y2)
          (glVertex2f x1 y2)
          (glEnd)
          (glColor3f .41176 .23921 .00392)
          (glBegin GL_LINE_LOOP)
          (glVertex2f x1 y1)
          (glVertex2f x2 y1)
          (glVertex2f x2 y2)
          (glVertex2f x1 y2)
          (glEnd)))))
  
  
  (method (draw-2d-textured)
    (glPushMatrix)
    (glTranslatef (get-x) (get-y) (get-z))
    (let ((radius-x (get-radius-x))
          (radius-y (get-radius-y))
          (radius-z (get-radius-z)))
      (textured-quad~ texture
        (lambda () (glVertex3f (- radius-x) (- radius-y) (- radius-z)))
        (lambda () (glVertex3f radius-x (- radius-y) (- radius-z)))
        (lambda () (glVertex3f radius-x radius-y (- radius-z)))
        (lambda () (glVertex3f (- radius-x) radius-y (- radius-z)))))
    (glPopMatrix))
  
  
  @w
  (method (draw-2d-textured)
    (glPushMatrix)
    (glTranslatef (get-x) (get-y) (get-z))
    (textured-quad~ texture
      (lambda () (glVertex3f 0.0 0.0 0.0))
      (lambda () (glVertex3f 5.0 0.0 0.0))
      (lambda () (glVertex3f 5.0 5.0 0.0))
      (lambda () (glVertex3f 0.0 5.0 0.0)))
    (glPopMatrix))
  
  
  (method (draw-2d-history)
    (let ((bounds (make-cuboid&)))
      (get-bounds! bounds)
      (let ((x1 (cuboid-left bounds))
            (y1 (cuboid-top bounds))
            (x2 (cuboid-right bounds))
            (y2 (cuboid-bottom bounds)))
        (glNormal3f 0.0 0.0 1.0)
        (glColor3f .41176 .23921 .00392)
        (glBegin GL_LINE_LOOP)
        (glVertex2f x1 y1)
        (glVertex2f x2 y1)
        (glVertex2f x2 y2)
        (glVertex2f x1 y2)
        (glEnd))))
  
  
  (method protected virtual (draw-target)
    (let ((world (current-world))
          (bounds (make-cuboid&)))
      (get-bounds! bounds)
      (let ((left (cuboid-left bounds))
            (right (cuboid-right bounds))
            (bottom (cuboid-bottom bounds))
            (top (cuboid-top bounds))
            (back (cuboid-back bounds))
            (front (cuboid-front bounds)))
        (case (get-projection~ world)
          ((perspective)
           (gl-colorize-dye red-dye)
           (glLineWidth 2.)
           (render-cube left bottom back right top front
             (lambda (proc)
               (glBegin GL_LINE_LOOP)
               (proc)
               (glEnd)))
           (glLineWidth 1.))
          ((orthographic)
           (glNormal3f 0.0 0.0 1.0)
           (gl-colorize-dye red-dye)
           (glBegin GL_LINE_LOOP)
           (glVertex2f left bottom)
           (glVertex2f right bottom)
           (glVertex2f right top)
           (glVertex2f left top)
           (glEnd))))))
  
  
  ;;;
  ;;;; Tick
  ;;;
  
  
  (method protected virtual (tick . rest)
    )))
