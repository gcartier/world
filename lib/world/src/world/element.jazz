;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; Elements
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.element jazz


(import (jazz.component)
        (jazz.geometry)
        (gaea.dye)
        (gaea.geometry)
        (gaea.lookat)
        (world)
        (world.autoload)
        (world.context)
        (world.draw)
        (world.dyes)
        (world.face)
        (world.generation.block)
        (world.quad)
        (world.travel))


;;;
;;;; Element
;;;


(definition public (element? obj)
  (is? obj Element))


(definition protected (orb? name)
  (memq? name '(Orb OrbLong OrbWide OrbTall)))


(class Element extends Component
  
  
  (property position     <vertex>     initialize (make-zero-vertex)     getter generate setter explicit)
  (property lookat       <LookAt>     initialize (make-standard-lookat) getter generate setter explicit)
  (property scale        <vertex>     initialize (vertex 1. 1. 1.)      getter generate setter explicit)
  (property color        <dye>        initialize (make-dye)             getter generate setter explicit)
  (property user-data    <object>     initialize #f                     accessors generate)
  
  
  (slot matrix   <matrix>  initialize (make-identity-matrix) getter generate)
  (slot radiuses <vertex+> initialize #f                     getter explicit)
  (slot radius   <fl+>     initialize #f                     getter explicit)
  
  
  (method override (print self output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{a}" (present-vertex position)))))
  
  
  (method public inline (get-x self) <fl>
    (vertex-x position))
  
  (method public inline (get-y self) <fl>
    (vertex-y position))
  
  (method public inline (get-z self) <fl>
    (vertex-z position))
  
  
  (method public (set-position self vert <vertex>) <void>
    (unless (vertex=? vert position)
      (vertex-copy! position vert)
      (update-matrix self)
      (update-element self)))
  
  
  (method public (set-position-noupdate self vert <vertex>) <void>
    (unless (vertex=? vert position)
      (vertex-copy! position vert)
      (update-matrix self)))
  
  
  (method protected virtual (update-element self)
    )

  
  (method public (set-matrix self mat <matrix>) <void>
    (matrix-copy! matrix mat))
  
  
  (method package inline (get-sight self) <vertex>
    (get-sight lookat))
  
  (method package inline (get-up self) <vertex>
    (get-up lookat))
  
  (method package inline (get-right self) <vertex>
    (get-right lookat))
  
  
  (method public (set-lookat self l <LookAt>) <void>
    (unless (lookat=? l lookat)
      (lookat-copy! lookat l)
      (update-matrix self)
      (update-element self)))
  
  
  (method public (init-lookat self sight <vertex> up <vertex> (right #f)) <void>
    (lookat! lookat
             sight
             up
             (or right (cross-normal& sight up)))
    (update-matrix self))
  
  
  (method public (horizon-sight! self dir)
    (let ((world (current-world)))
      (init-lookat self
                   (vertex-normalize& dir)
                   (get-world-up world))))
  
  
  (method public (realign-lookat self new-up <vertex>) <void>
    (realign-lookat! lookat lookat new-up)
    (update-matrix self))
  
  
  (method public (remove-lookat-up-roll self dir <vertex> lookat <LookAt>) <void>
    (remove-up-roll! lookat dir lookat)
    (update-matrix self))
  
  
  (method public (without-roll self thunk)
    (let ((roll (vertical-angle (get-right lookat) (roll-free-up (get-sight lookat)))))
      ;; remove roll
      (set-lookat self (rotate-lookat& lookat (- roll) (get-sight lookat)))
      (thunk)
      ;; restore roll
      (set-lookat self (rotate-lookat& lookat roll (get-sight lookat)))))
  
  
  (method public (rotate self angle <fl>) <void>
    (set-lookat self (rotate-lookat& lookat angle (get-up lookat))))
  
  
  (method public (rotate-upon self angle <fl> axis <vertex>) <void>
    (set-lookat self (rotate-lookat& lookat angle axis)))
  
  
  (method public (set-scale self s <vertex>) <void>
    (vertex-copy! scale s)
    (reset-radiuses self)
    (update-matrix self)
    (update-element self))
  
  (method public (set-scaling self s <fl>) <void>
    (vertex! scale s s s)
    (reset-radiuses self)
    (update-matrix self)
    (update-element self))
  
  
  (method public inline (get-scale-x self) <fl>
    (vertex-x (get-scale self)))
  
  (method public inline (get-scale-y self) <fl>
    (vertex-y (get-scale self)))
  
  (method public inline (get-scale-z self) <fl>
    (vertex-z (get-scale self)))
  
  
  (method public (average-scaling self) <fl>
    (let ((scale (get-scale self)))
      (/ (+ (vertex-x scale)
            (vertex-y scale)
            (vertex-z scale))
         3.)))
  
  
  (method public (get-radiuses self) <vertex>
    (or radiuses
        (begin
          (update-radiuses self)
          radiuses)))
  
  (method public (set-radiuses self r <vertex>) <void>
    (set! radiuses r)
    (set! radius (element-radius self)))
  
  
  (method public inline (get-radius-x self) <fl>
    (vertex-x (get-radiuses self)))
  
  (method public inline (get-radius-y self) <fl>
    (vertex-y (get-radiuses self)))
  
  (method public inline (get-radius-z self) <fl>
    (vertex-z (get-radiuses self)))
  
  
  (method public (average-radius self) <fl>
    (let ((radiuses (get-radiuses self)))
      (/ (+ (vertex-x radiuses)
            (vertex-y radiuses)
            (vertex-z radiuses))
         3.)))
  
  
  (method public inline (get-width self) <fl>
    (* (get-radius-x self) 2.))
  
  (method public inline (get-height self) <fl>
    (* (get-radius-y self) 2.))
  
  (method public inline (get-depth self) <fl>
    (* (get-radius-z self) 2.))
  
  
  (method public (get-radius self) <fl>
    (or radius
        (begin
          (update-radiuses self)
          radius)))
  
  (method public (set-radius self r <fl>) <void>
    (set! radius r))
    
  
  (method public inline (get-red self) <fl>
    (dye-red color))
  
  (method public inline (get-green self) <fl>
    (dye-green color))
  
  (method public inline (get-blue self) <fl>
    (dye-blue color))
  
  (method public inline (get-alpha self) <fl>
    (dye-alpha color))

  
  (method protected virtual (gadget? self)
    #f)
  
  
  (method package virtual (inside? self r vert)
    #f)
  
  
  (method protected virtual (element-faces self)
    (cube-faces self))
  
  
  (method package virtual (element-polygons self)
    (map get-polygon (element-faces self)))
  
  
  (method public (cube-faces self)
    (let ((world (current-world))
          (x (get-x self))
          (y (get-y self))
          (z (get-z self))
          (bounds (make-cuboid&)))
      (get-bounds! self bounds)
      (let ((material (get-block-opaque world))
            (left (cuboid-left bounds))
            (right (cuboid-right bounds))
            (bottom (cuboid-bottom bounds))
            (top (cuboid-top bounds))
            (back (cuboid-back bounds))
            (front (cuboid-front bounds)))
        (list
          ;; front face
          (make-face material
                     (f32vector 0. 1. 0. 0. 1. 0. 1. 1.)
                     0.
                     (make-quad self
                                (vertex left top front) (vertex left bottom front) (vertex right bottom front) (vertex right top front)))
          ;; back face
          (make-face material
                     (f32vector 1. 1. 1. 0. 0. 0. 0. 1.)
                     0.
                     (make-quad self
                                (vertex right top back) (vertex right bottom back) (vertex left bottom back) (vertex left top back)))
          ;; left face
          (make-face material
                     (f32vector 1. 0. 0. 0. 0. 1. 1. 1.)
                     0.
                     (make-quad self
                                (vertex left top back) (vertex left bottom back) (vertex left bottom front) (vertex left top front)))
          ;; right face
          (make-face material
                     (f32vector 1. 1. 0. 1. 0. 0. 1. 0.)
                     0.
                     (make-quad self
                                (vertex right top front) (vertex right bottom front) (vertex right bottom back) (vertex right top back)))
          ;; top face
          (make-face material
                     (f32vector 0. 0. 0. 1. 1. 1. 1. 0.)
                     0.
                     (make-quad self
                                (vertex left top back) (vertex left top front) (vertex right top front) (vertex right top back)))
          ;; bottom face
          (make-face material
                     (f32vector 0. 1. 0. 0. 1. 0. 1. 1.)
                     0.
                     (make-quad self
                                (vertex left bottom front) (vertex left bottom back) (vertex right bottom back) (vertex right bottom front)))))))
  
  
  (method protected virtual (element-radiuses self)
    (error "Unable to get element radiuses"))
  
  
  (method protected virtual (element-radius self)
    (vertex-norm (get-radiuses self)))
  
  
  (method (reset-radiuses self)
    (set! radiuses #f)
    (set! radius #f))
  
  
  (method protected virtual (update-radiuses self)
    (set-radiuses self (element-radiuses self)))
  
  
  (method protected virtual (target-radius self)
    (get-radius self))
  
  
  (method package virtual (effective-matrix& self)
    matrix)
  
  ;; quicky
  (method protected virtual (effective-matrix2& self)
    matrix)
  
  
  (method public (unscaled-matrix self)
    (matrix-multiply matrix
                     (make-scaling-matrix& (vertex-inverse& scale))))
  
  
  (method package virtual (update-matrix self)
    (matrix-multiply! matrix (make-translation-matrix& position)
                             (make-lookat-matrix& lookat)
                             (make-scaling-matrix& scale)))
  
  
  (method public (get-bounds self)
    (let ((bounds (make-cuboid)))
      (get-bounds! self bounds)
      bounds))
  
  
  (method public (get-bounds! self bounds <cuboid>) <cuboid>
    (let ((x (vertex-x position))
          (y (vertex-y position))
          (z (vertex-z position))
          (radius-x (get-radius-x self))
          (radius-y (get-radius-y self))
          (radius-z (get-radius-z self)))
      (cuboid! bounds
               (- x radius-x)
               (- y radius-y)
               (- z radius-z)
               (+ x radius-x)
               (+ y radius-y)
               (+ z radius-z)))
    bounds)
  
  
  (method public virtual (transformed-bounds self)
    (get-bounds self))
  
  
  (method public virtual (transformed-parallelepiped self)
    (let ((bounds (get-bounds self)))
      (let ((left (cuboid-left bounds))
            (right (cuboid-right bounds))
            (bottom (cuboid-bottom bounds))
            (top (cuboid-top bounds))
            (back (cuboid-back bounds))
            (front (cuboid-front bounds)))
        (make-parallelepiped #f left right bottom top back front))))
  
  
  (method public virtual (selection-bounds self)
    (get-bounds self))
  
  
  (method public virtual (transformed-selection-bounds self)
    (transformed-parallelepiped self))
  
  
  (method public virtual (transformed-center self)
    (get-position self))
  
  
  (method public virtual (transformed-radiuses self)
    (get-radiuses self))
  
  
  (method public virtual (lens-center self)
    (transformed-center self))
  
  
  (method public (can-see? self elem view-radius accept?)
    (define (polygon-filter poly)
      (not (or (eq? (get-element poly) self)
               (get-liquid-cube? (id->block (decode-id (get-data1 poly)))))))
    
    (let ((position (lens-center self))
          (pos (lens-center elem)))
      (let ((dist (vertex-distance position pos)))
        (and (<= dist view-radius)
             (< (vector-angle (get-sight lookat) (vertex-& pos position)) PI/2)
             (let ((closest (ray-closest-polygon position (vertex-normalize (vertex-& pos position)) (+ view-radius (get-radius self) (get-radius elem)) filter: polygon-filter ignore-non-physical?: #f ignore-entities?: #t)))
               (and closest (accept? (first closest))))))))
  
  
  (method public (set-color self col)
    (dye-copy! color col))
  
  
  (method package virtual (element-visible? self)
    (get-visible? self))
  
  
  (method package virtual (virtual? self)
    #f)
  
  
  (method package virtual (simulated? self)
    #f)
  
  
  (method package virtual (render self)
    )
  
  
  (method package virtual (draw-target self color)
    (let ((bounds (selection-bounds self)))
      (let ((matrix (matrix-multiply (effective-matrix& self)
                                     (make-scaling-matrix (cuboid-radiuses bounds)))))
        (render-cube matrix wire-color: color))))
  
  
  (method package virtual (draw-target-circle self)
    (render-circle (vertex (get-x self) (- (get-y self) (* (get-scale-y self) (get-radius-y self))) (get-z self)) (target-radius self) purple-dye))
  
  
  (method package virtual (target-moveable? self)
    #t)
  
  
  ;;;
  ;;;; Tick
  ;;;
  
  
  (method package virtual (tick-action self . rest)
    )
  
  
  ;;;
  ;;;; Target
  ;;;
  
  
  (method package virtual (activate-target self)
    )
  
  
  (method package virtual (deactivate-target self)
    )
  
  
  (method package virtual (describe-target self showcase? add-header add-section add-info add-title add-target add-model)
    (add-title self showcase?)
    (unless showcase?
      (add-target self))
    (add-model self))
  
  
  ;;;
  ;;;; History
  ;;;
  
  
  (method package virtual (history-draw-now? self)
    #f)
  
  
  (method package virtual (history-draw-trail? self)
    #f)
  
  
  ;;;
  ;;;; Script
  ;;;
  
  
  (method protected virtual (scriptable? self)
    #f)
  
  
  ;;;
  ;;;; Designer
  ;;;
  
  
  (method public (set-property self property value)
    (let ((zone (current-zone)))
      (let ((designer (get-designer zone)))
        (set-property designer self property value))))))
