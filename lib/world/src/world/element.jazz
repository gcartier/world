;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; Elements
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is WorldScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2014
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See http://github.com/gcartier/world for details.


(module world.element jazz


(import (jazz.graphic.opengl.glew)
        (jazz.library)
        (world)
        (world.autoload)
        (world.draw)
        (world.dye)
        (world.dyes)
        (world.face)
        (world.foreign)
        (world.geometry)
        (world.lookat)
        (world.opengl)
        (world.quad)
        (world.syntax (phase syntax)))


;;;
;;;; Element
;;;


(class Element extends Component
  
  
  (property position     <f64vector>  initialize (make-zero-vertex)     getter generate setter explicit)
  (property lookat       <LookAt>     initialize (make-standard-lookat) getter generate setter explicit)
  (property scale        <f64vector>  initialize (vertex 1. 1. 1.)      getter generate setter explicit)
  (property color        <f32vector>  initialize (make-dye)             getter generate setter explicit)
  (property user-data    <object>     initialize #f                     accessors generate)
  
  
  (slot matrix   <f64vector>  initialize (make-identity-matrix) getter generate)
  (slot radiuses <f64vector+> initialize #f                     getter explicit)
  (slot radius   <fl+>        initialize #f                     getter explicit)
  (slot original <object>                                       getter generate)
  
  
  (method override (finish rest)
    (nextmethod rest)
    (set! original self))
  
  
  (method override (print output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{a}" (present-vertex position)))))
  
  
  (method public inline (get-x) <fl>
    (vertex-x position))
  
  (method public (set-x x <fl>) <void>
    (unless (= x (get-x))
      (vertex-x-set! position x)
      (update-matrix)))
  
  
  (method public inline (get-y) <fl>
    (vertex-y position))
  
  (method public (set-y y <fl>) <void>
    (unless (= y (get-y))
      (vertex-y-set! position y)
      (update-matrix)))
  
  
  (method public inline (get-z) <fl>
    (vertex-z position))
  
  (method public (set-z z <fl>) <void>
    (unless (= z (get-z))
      (vertex-z-set! position z)
      (update-matrix)))
  
  
  (method public (set-position v <f64vector>) <void>
    (unless (vertex-near? v position)
      (vertex-copy! position v)
      (update-matrix)))

  
  (method public (set-matrix mat <f64vector>) <void>
    (matrix-copy! matrix mat))
  
  
  (method inline (get-sight) <f64vector>
    (get-sight~ lookat))
  
  (method inline (get-up) <f64vector>
    (get-up~ lookat))
  
  (method inline (get-right) <f64vector>
    (get-right~ lookat))
  
  
  (method (set-sight sight <f64vector>) <void>
    (unless (vertex-near? sight (get-sight~ lookat))
      (set-sight~ lookat sight)
      (update-matrix)))
  
  (method (set-up up <f64vector>) <void>
    (unless (vertex-near? up (get-up~ lookat))
      (set-up~ lookat up)
      (update-matrix)))
  
  (method (set-right right <f64vector>) <void>
    (unless (vertex-near? right (get-right~ lookat))
      (set-right~ lookat right)
      (update-matrix)))
  
  
  (method public (set-lookat l <LookAt>) <void>
    (unless (lookat-near? l lookat)
      (lookat-copy! lookat l)
      (update-matrix)))
  
  
  (method public (init-lookat sight <f64vector> up <f64vector> (right #f)) <void>
    (set-sight~ lookat sight)
    (set-up~ lookat up)
    (set-right~ lookat (or right (cross-normal& sight up)))
    (update-matrix))
  
  
  (method public (realign-lookat new-up <f64vector>) <void>
    (realign-lookat! lookat lookat new-up)
    (update-matrix))
  
  
  (method public (rotate angle <fl>) <void>
    (set-lookat (rotate-lookat& lookat angle (get-up~ lookat))))
  
  
  (method public (set-scale s <f64vector>) <void>
    (vertex-copy! scale s)
    (reset-radiuses)
    (update-matrix))
  
  (method public (set-scaling s <fl>) <void>
    (vertex-init! scale s s s)
    (reset-radiuses)
    (update-matrix))
  
  
  (method public inline (get-scale-x) <fl>
    (vertex-x (get-scale)))
  
  (method public inline (get-scale-y) <fl>
    (vertex-y (get-scale)))
  
  (method public inline (get-scale-z) <fl>
    (vertex-z (get-scale)))
  
  
  (method public (average-scaling) <fl>
    (let ((scale (get-scale)))
      (/ (+ (vertex-x scale)
            (vertex-y scale)
            (vertex-z scale))
         3.)))
  
  
  (method public (get-radiuses) <f64vector>
    (or radiuses
        (begin
          (update-radiuses)
          radiuses)))
  
  (method public (set-radiuses r <f64vector>) <void>
    (set! radiuses r)
    (set! radius (element-radius)))
  
  
  (method public inline (get-radius-x) <fl>
    (vertex-x (get-radiuses)))
  
  (method public inline (get-radius-y) <fl>
    (vertex-y (get-radiuses)))
  
  (method public inline (get-radius-z) <fl>
    (vertex-z (get-radiuses)))
  
  
  (method public inline (get-width) <fl>
    (* (get-radius-x) 2.))
  
  (method public inline (get-height) <fl>
    (* (get-radius-y) 2.))
  
  (method public inline (get-depth) <fl>
    (* (get-radius-z) 2.))
  
  
  (method public (get-radius) <fl>
    (or radius
        (begin
          (update-radiuses)
          radius)))
  
  (method public (set-radius r <fl>) <void>
    (set! radius r))
    
  
  (method public inline (get-red) <fl>
    (dye-red color))
  
  (method public inline (get-green) <fl>
    (dye-green color))
  
  (method public inline (get-blue) <fl>
    (dye-blue color))
  
  (method public inline (get-alpha) <fl>
    (dye-alpha color))

  
  (method protected virtual (gadget?)
    #f)
  
  
  (method protected virtual (inside? r vert)
    #f)
  
  
  (method protected virtual (element-faces)
    (cube-faces))
  
  
  (method protected virtual (element-polygons)
    (map get-polygon~ (element-faces)))
  
  
  (method public (cube-faces)
    (let ((world (current-world))
          (x (get-x))
          (y (get-y))
          (z (get-z))
          (bounds (make-cuboid&)))
      (get-bounds! bounds)
      (let ((material (get-block-opaque~ world))
            (left (cuboid-left bounds))
            (right (cuboid-right bounds))
            (bottom (cuboid-bottom bounds))
            (top (cuboid-top bounds))
            (back (cuboid-back bounds))
            (front (cuboid-front bounds)))
        (list
          ;; front face
          (make-face material
                     (f32vector 0. 1. 0. 0. 1. 0. 1. 1.)
                     0.
                     (make-quad self
                                (vertex left top front) (vertex left bottom front) (vertex right bottom front) (vertex right top front)))
          ;; back face
          (make-face material
                     (f32vector 1. 1. 1. 0. 0. 0. 0. 1.)
                     0.
                     (make-quad self
                                (vertex right top back) (vertex right bottom back) (vertex left bottom back) (vertex left top back)))
          ;; left face
          (make-face material
                     (f32vector 1. 0. 0. 0. 0. 1. 1. 1.)
                     0.
                     (make-quad self
                                (vertex left top back) (vertex left bottom back) (vertex left bottom front) (vertex left top front)))
          ;; right face
          (make-face material
                     (f32vector 1. 1. 0. 1. 0. 0. 1. 0.)
                     0.
                     (make-quad self
                                (vertex right top front) (vertex right bottom front) (vertex right bottom back) (vertex right top back)))
          ;; top face
          (make-face material
                     (f32vector 0. 0. 0. 1. 1. 1. 1. 0.)
                     0.
                     (make-quad self
                                (vertex left top back) (vertex left top front) (vertex right top front) (vertex right top back)))
          ;; bottom face
          (make-face material
                     (f32vector 0. 1. 0. 0. 1. 0. 1. 1.)
                     0.
                     (make-quad self
                                (vertex left bottom front) (vertex left bottom back) (vertex right bottom back) (vertex right bottom front)))))))
  
  
  (method public (find-face poly)
    (define (polygon=? p1 p2)
      (every? vertex=? (get-vertices~ p1) (get-vertices~ p2)))
    
    (continuation-capture
      (lambda (return)
        (let ((face-rank 0))
          (for-each (lambda (face)
                      (if (polygon=? (get-polygon~ face) poly)
                          (continuation-return return (values face face-rank))
                        (increase! face-rank)))
                    (element-faces)))
        (values #f #f))))
  
  
  (method public virtual (update-face-texture face face-rank texture)
    )
  
  
  (method public virtual (update-face-shader face face-rank shader)
    )
  
  
  (method protected virtual (element-radiuses)
    (error "Unable to get element radiuses"))
  
  
  (method protected virtual (element-radius)
    (vertex-norm (get-radiuses)))
  
  
  (method (reset-radiuses)
    (set! radiuses #f)
    (set! radius #f))
  
  
  (method (update-radiuses)
    (set-radiuses (element-radiuses)))
  
  
  (method protected virtual (target-radius)
    (get-radius))
  
  
  (method protected virtual (effective-matrix&)
    matrix)
  
  
  (method protected virtual (update-matrix)
    (matrix-multiply! matrix (make-translation-matrix& position)
                             (matrix-multiply& (make-lookat-matrix& lookat)
                                               (make-scaling-matrix& scale))))
  
  
  (method public (get-bounds)
    (let ((bounds (make-cuboid)))
      (get-bounds! bounds)
      bounds))
  
  
  (method public (get-bounds! bounds <f64vector>) <f64vector>
    (let ((x (vertex-x position))
          (y (vertex-y position))
          (z (vertex-z position))
          (radius-x (get-radius-x))
          (radius-y (get-radius-y))
          (radius-z (get-radius-z)))
      (cuboid-init! bounds
                    (- x radius-x)
                    (- y radius-y)
                    (- z radius-z)
                    (+ x radius-x)
                    (+ y radius-y)
                    (+ z radius-z)))
    bounds)
  
  
  (method public virtual (transformed-bounds)
    (get-bounds))
  
  
  (method public virtual (transformed-parallelepiped)
    (let ((bounds (get-bounds)))
      (let ((left (cuboid-left bounds))
            (right (cuboid-right bounds))
            (bottom (cuboid-bottom bounds))
            (top (cuboid-top bounds))
            (back (cuboid-back bounds))
            (front (cuboid-front bounds)))
        (parallelepiped (vertex left bottom back)
                        (vertex left bottom front)
                        (vertex left top back)
                        (vertex left top front)
                        (vertex right bottom back)
                        (vertex right bottom front)
                        (vertex right top back)
                        (vertex right top front)))))
  
  
  (method public virtual (selection-bounds)
    (transformed-parallelepiped))
  
  
  (method public virtual (transformed-center)
    (get-position))
  
  
  (method public virtual (transformed-radiuses)
    (get-radiuses))
  
  
  (method public (set-color col)
    (dye-copy! color col))
  
  
  (method public (contains-vertex? vert <f64vector>) <bool>
    (<= (vertex-distance position vert) (get-radius)))
  
  
  (method protected virtual (element-visible?)
    (get-visible?))
  
  
  (method protected virtual (drawable?)
    #f)
  
  
  (method protected virtual (draw)
    (gl-colorize-dye color)
    (let ((bounds (make-cuboid&)))
      (get-bounds! bounds)
      (let ((x1 (cuboid-left bounds))
            (x2 (cuboid-right bounds))
            (y1 (cuboid-bottom bounds))
            (y2 (cuboid-top bounds))
            (z1 (cuboid-back bounds))
            (z2 (cuboid-front bounds)))
        (render-block x1 x2 y1 y2 z1 z2 GL_QUADS))))
  
  
  (method protected virtual (draw-target dye)
    (let ((world (current-world))
          (bounds (make-cuboid&)))
      (get-bounds! bounds)
      (let ((left (cuboid-left bounds))
            (right (cuboid-right bounds))
            (bottom (cuboid-bottom bounds))
            (top (cuboid-top bounds))
            (back (cuboid-back bounds))
            (front (cuboid-front bounds)))
       (gl-colorize-dye dye)
       (glLineWidth 2.)
       (glDisable GL_LIGHTING)
       (render-cube left bottom back right top front
         (lambda (proc)
           (glBegin GL_LINE_LOOP)
           (proc)
           (glEnd)))
       (glEnable GL_LIGHTING)
       (glLineWidth 1.))))
  
  
  (method protected virtual (draw-target-circle)
    (glLineWidth 2.)
    (glDisable GL_LIGHTING)
    (gl-horizontal-circle (vertex (get-x) (- (get-y) (* (get-scale-y) (get-radius-y))) (get-z)) (target-radius) (dye->color purple-dye))
    (glEnable GL_LIGHTING)
    (glLineWidth 1.))
  
  
  (method protected virtual (target-moveable?)
    #t)
  
  
  ;;;
  ;;;; Tick
  ;;;
  
  
  (method protected virtual (tick . rest)
    )
  
  
  ;;;
  ;;;; Target
  ;;;
  
  
  (method protected virtual (activate-target)
    )
  
  
  (method protected virtual (deactivate-target)
    )
  
  
  (method protected virtual (describe-target add-header add-section add-info add-title add-target add-model)
    (add-title self)
    (add-target self)
    (add-model self))
  
  
  ;;;
  ;;;; History
  ;;;
  
  
  (method protected virtual (history-draw-now?)
    #f)
  
  
  (method protected virtual (history-draw-trail?)
    #f)
  
  
  ;;;
  ;;;; Script
  ;;;
  
  
  (method protected virtual (scriptable?)
    #f)
  
  
  ;;;
  ;;;; Designer
  ;;;
  
  
  (method public (set-property property value)
    (let ((zone (current-zone)))
      (let ((designer (get-designer~ zone)))
        (set-property~ designer self property value))))))
