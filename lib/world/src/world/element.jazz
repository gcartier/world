;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Elements
;;;


(module world.element jazz


(import (jazz.geometry)
        (jazz.graphic)
        (jazz.graphic.opengl.glew)
        (jazz.io)
        (jazz.library)
        (jazz.literals)
        (jazz.media)
        (jazz.network)
        (jazz.platform)
        (jazz.platform.cairo)
        (jazz.runtime)
        (jazz.system)
        (jazz.ui)
        (jazz.ui.dialog)
        (jazz.ui.window)
        (time)
        (world)
        (world.autoload)
        (world.draw)
        (world.dye)
        (world.dyes)
        (world.face)
        (world.foreign)
        (world.geometry)
        (world.history)
        (world.opengl)
        (world.syntax (phase syntax))
        (world.texture)
        (world.triangle)
        (world.window)
        (world.client.window))


;;;
;;;; Element
;;;


(class Element extends Component
  
  
  (property position     <f32vector> initialize (make-vertex) getter generate setter explicit)
  (property size         <f32vector> initialize (make-vertex) getter generate setter explicit)
  (property radius       <fl>        initialize 0.            accessors generate)
  (property scale        <fl>        initialize 1.            accessors generate)
  (property color        <f32vector> initialize (make-dye)    getter generate setter explicit)
  (property texture      <object>    initialize #f            accessors generate)
  (property hit-behavior <object>    initialize #f            accessors generate)
  (property user-data    <object>    initialize #f            accessors generate)
  
  
  (slot origin    <object>    getter generate)
  (slot bounds    <f32vector> initialize (make-cuboid) getter generate)
  (slot radiuses  <f32vector> initialize (make-vertex) getter generate)
  (slot faces     <object>    getter explicit)
  
  
  (method override (finish rest)
    (nextmethod rest)
    (set! origin self)
    (update-position)
    (update-size)
    (reset-faces))
  
  
  (method override (print output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{a}" (present-vertex position)))))
  
  
  (method protected virtual (copy-from from)
    (set! position (clone-vertex (get-position~ from)))
    (set! size (clone-vertex (get-size~ from)))
    (set! color (copy-dye (get-color~ from)))
    (set! bounds (copy-cuboid (get-bounds~ from)))
    (set! radiuses (clone-vertex (get-radiuses~ from))))
  
  
  (method public inline (get-x) <fl>
    (vertex-x position))
  
  (method public (set-x x <fl>) <void>
    (vertex-x-set! position x)
    (update-position))
  
  
  (method public inline (get-y) <fl>
    (vertex-y position))
  
  (method public (set-y y <fl>) <void>
    (vertex-y-set! position y)
    (update-position))
  
  
  (method public inline (get-z) <fl>
    (vertex-z position))
  
  (method public (set-z z <fl>) <void>
    (vertex-z-set! position z)
    (update-position))
  
  
  (method public (set-position v <f32vector>) <void>
    (vertex-copy! position v)
    (update-position))
  
  
  (method public inline (get-width) <fl>
    (vertex-x size))
  
  (method public inline (get-height) <fl>
    (vertex-y size))
  
  (method public inline (get-depth) <fl>
    (vertex-z size))
  
  
  (method public (set-size s <f32vector>) <void>
    (vertex-copy! size s)
    (update-size))
  
  
  (method public inline (get-radius-x) <fl>
    (vertex-x radiuses))
  
  (method public inline (get-radius-y) <fl>
    (vertex-y radiuses))
  
  (method public inline (get-radius-z) <fl>
    (vertex-z radiuses))
  
  
  (method public inline (get-left) <fl>
    (cuboid-left bounds))
  
  (method public inline (get-bottom) <fl>
    (cuboid-bottom bounds))
  
  (method public inline (get-back) <fl>
    (cuboid-back bounds))
  
  (method public inline (get-right) <fl>
    (cuboid-right bounds))
  
  (method public inline (get-top) <fl>
    (cuboid-top bounds))
  
  (method public inline (get-front) <fl>
    (cuboid-front bounds))
    
  
  (method public inline (get-red) <fl>
    (dye-red color))
  
  (method public inline (get-green) <fl>
    (dye-green color))
  
  (method public inline (get-blue) <fl>
    (dye-blue color))
  
  (method public inline (get-alpha) <fl>
    (dye-alpha color))

  
  (method protected virtual (gadget?)
    #f)
  
  
  (method protected virtual (inside? r vert)
    #f)
  
  
  (method public (reset-faces)
    (set! faces #f))
  
  
  (method public (get-faces)
    (when (not faces)
      (set! faces (element-faces)))
    faces)
  
  
  (method protected virtual (element-faces)
    (let ((x (get-x))
          (y (get-y))
          (z (get-z))
          (l (get-left))
          (r (get-right))
          (b (get-bottom))
          (t (get-top))
          (f (get-back))
          (n (get-front)))
      (list
        ;; front face
        (make-face #f
                   (vertex x y n)
                   (make-triangle (vertex 0. 0. 1.)
                                  (vertex l t n) (vertex r t n) (vertex r b n)
                                  (vertex 0. 1. 1.) (vertex 1. 1. 1.) (vertex 1. 0. 1.))
                   (make-triangle (vertex 0. 0. 1.)
                                  (vertex r b n) (vertex l b n) (vertex l t n)
                                  (vertex 1. 0. 1.) (vertex 0. 0. 1.) (vertex 0. 1. 1.)))
        ;; back face
        (make-face #f
                   (vertex x y f)
                   (make-triangle (vertex 0. 0. -1.)
                                  (vertex r t f) (vertex l t f) (vertex l b f)
                                  (vertex 1. 1. 1.) (vertex 0. 1. 1.) (vertex 0. 0. 1.))
                   (make-triangle (vertex 0. 0. -1.)
                                  (vertex l b f) (vertex r b f) (vertex r t f)
                                  (vertex 0. 0. 1.) (vertex 1. 0. 1.) (vertex 1. 1. 1.)))
        ;; left face
        (make-face #f
                   (vertex l y z)
                   (make-triangle (vertex -1. 0. 0.)
                                  (vertex l t f) (vertex l t n) (vertex l b n)
                                  (vertex 1. 0. 1.) (vertex 1. 1. 1.) (vertex 0. 1. 1.))
                   (make-triangle (vertex -1. 0. 0.)
                                  (vertex l b n) (vertex l b f) (vertex l t f)
                                  (vertex 0. 1. 1.) (vertex 0. 0. 1.) (vertex 1. 0. 1.)))
        ;; right face
        (make-face #f
                   (vertex r y z)
                   (make-triangle (vertex 1. 0. 0.)
                                  (vertex r t n) (vertex r t f) (vertex r b f)
                                  (vertex 1. 1. 1.) (vertex 1. 0. 1.) (vertex 0. 0. 1.))
                   (make-triangle (vertex 1. 0. 0.)
                                  (vertex r b f) (vertex r b n) (vertex r t n)
                                  (vertex 0. 0. 1.) (vertex 0. 1. 1.) (vertex 1. 1. 1.)))
        ;; top face
        (make-face #f
                   (vertex x t z)
                   (make-triangle (vertex 0. 1. 0.)
                                  (vertex l t f) (vertex r t f) (vertex r t n)
                                  (vertex 0. 0. 1.) (vertex 1. 0. 1.) (vertex 1. 1. 1.))
                   (make-triangle (vertex 0. 1. 0.)
                                  (vertex r t n) (vertex l t n) (vertex l t f)
                                  (vertex 1. 1. 1.) (vertex 0. 1. 1.) (vertex 0. 0. 1.)))
        ;; bottom face
        (make-face #f
                   (vertex x b z)
                   (make-triangle (vertex 0. -1. 0.)
                                  (vertex l b n) (vertex r b n) (vertex r b f)
                                  (vertex 0. 1. 1.) (vertex 1. 1. 1.) (vertex 1. 0. 1.))
                   (make-triangle (vertex 0. -1. 0.)
                                  (vertex r b f) (vertex l b f) (vertex l b n)
                                  (vertex 1. 0. 1.) (vertex 0. 0. 1.) (vertex 0. 1. 1.))))))
  
  
  (method public virtual (update-face-texture face texture)
    )
  
  
  (method public (for-each-face proc)
    (for-each proc (get-faces)))
  
  
  (method public (for-each-triangle proc)
    (for-each (lambda (face)
                (for-each (lambda (triangle)
                            (proc face triangle))
                          (get-triangles~ face)))
              (get-faces)))
  
  
  (method public (ray-closest-triangle p <f32vector> d <f32vector> filter <procedure+>)
    (let ((closest #f)
          (distance -1.))
      (for-each-triangle
        (lambda (face triangle)
          (let ((normal (get-normal~ triangle)))
            (when (or (not filter)
                      (filter self normal))
              (let ((dist (ray-triangle-distance p d (get-v1~ triangle) (get-v2~ triangle) (get-v3~ triangle))))
                (when (and (/= dist -1.)
                           (or (= distance -1.)
                               (< dist distance)))
                  (set! closest (list face triangle dist))
                  (set! distance dist)))))))
      closest))
  
  
  (method protected virtual (update-size)
    (vertex-scalar*! radiuses size 0.5)
    (set! radius (element-radius)))
  
  
  (method protected virtual (update-position)
    (let ((x (vertex-x position))
          (y (vertex-y position))
          (z (vertex-z position))
          (radius-x (get-radius-x))
          (radius-y (get-radius-y))
          (radius-z (get-radius-z)))
      (cuboid-init! bounds
                    (- x radius-x)
                    (- y radius-y)
                    (- z radius-z)
                    (+ x radius-x)
                    (+ y radius-y)
                    (+ z radius-z))
      (reset-faces)))
  
  
  (method protected virtual (element-radius)
    (vertex-norm radiuses))
  
  
  (method public (set-color col)
    (dye-copy! color col))
  
  
  (method public (contains-vertex? vert <f32vector>) <bool>
    (<= (vertex-distance position vert) radius))
  
  
  (method protected virtual (draw)
    (let ((world (current-world)))
      (if (get-3d?~ world)
          (if texture
              (draw-3d-textured)
            (draw-3d))
        (if texture
            (draw-2d-textured)
          (draw-2d)))))
  
  
  (method protected virtual (draw-3d)
    (gl-colorize-dye color)
    (let ((x1 (get-left))
          (x2 (get-right))
          (y1 (get-bottom))
          (y2 (get-top))
          (z1 (get-back))
          (z2 (get-front)))
      (render-block x1 x2 y1 y2 z1 z2 GL_QUADS)))
  
  
  (method protected virtual (draw-3d-textured)
    (when texture
      (glPushMatrix)
      (glTranslatef (get-x) (get-y) (get-z))
      (let ((f -2.5)
            (t 2.5))
        ;; top
        (glNormal3f 0.0 1.0 0.0)
        (textured-quad~ texture
          (lambda () (glVertex3f t t f))
          (lambda () (glVertex3f f t f))
          (lambda () (glVertex3f f t t))
          (lambda () (glVertex3f t t t)))
        ;; bottom
        (glNormal3f 0.0 -1.0 0.0)
        (textured-quad~ texture
          (lambda () (glVertex3f t f t))
          (lambda () (glVertex3f f f t))
          (lambda () (glVertex3f f f f))
          (lambda () (glVertex3f t f f)))
        ;; front
        (glNormal3f 0.0 0.0 1.0)
        (textured-quad~ texture
          (lambda () (glVertex3f f f t))
          (lambda () (glVertex3f t f t))
          (lambda () (glVertex3f t t t))
          (lambda () (glVertex3f f t t)))
        ;; back
        (glNormal3f 0.0 0.0 -1.0)
        (textured-quad~ texture
          (lambda () (glVertex3f t f f))
          (lambda () (glVertex3f f f f))
          (lambda () (glVertex3f f t f))
          (lambda () (glVertex3f t t f)))
        ;; left
        (glNormal3f -1.0 0.0 0.0)
        (textured-quad~ texture
          (lambda () (glVertex3f f t t))
          (lambda () (glVertex3f f t f))
          (lambda () (glVertex3f f f f))
          (lambda () (glVertex3f f f t)))
        ;; right
        (glNormal3f 1.0 0.0 0.0)
        (textured-quad~ texture
          (lambda () (glVertex3f t t f))
          (lambda () (glVertex3f t t t))
          (lambda () (glVertex3f t f t))
          (lambda () (glVertex3f t f f))))
      (glPopMatrix)))
  
  
  (method (draw-2d)
    (if (in-history?)
        (draw-2d-history)
      (let ((x1 (get-left))
            (y1 (get-top))
            (x2 (get-right))
            (y2 (get-bottom)))
        (glNormal3f 0.0 0.0 1.0)
        (gl-colorize-dye color)
        (glBegin GL_QUADS)
        (glVertex2f x1 y1)
        (glVertex2f x2 y1)
        (glVertex2f x2 y2)
        (glVertex2f x1 y2)
        (glEnd)
        (glColor3f .41176 .23921 .00392)
        (glBegin GL_LINE_LOOP)
        (glVertex2f x1 y1)
        (glVertex2f x2 y1)
        (glVertex2f x2 y2)
        (glVertex2f x1 y2)
        (glEnd))))
  
  
  (method (draw-2d-textured)
    (glPushMatrix)
    (glTranslatef (get-x) (get-y) (get-z))
    (let ((radius-x (get-radius-x))
          (radius-y (get-radius-y))
          (radius-z (get-radius-z)))
      (textured-quad~ texture
        (lambda () (glVertex3f (- radius-x) (- radius-y) (- radius-z)))
        (lambda () (glVertex3f radius-x (- radius-y) (- radius-z)))
        (lambda () (glVertex3f radius-x radius-y (- radius-z)))
        (lambda () (glVertex3f (- radius-x) radius-y (- radius-z)))))
    (glPopMatrix))
  
  
  @w
  (method (draw-2d-textured)
    (glPushMatrix)
    (glTranslatef (get-x) (get-y) (get-z))
    (textured-quad~ texture
      (lambda () (glVertex3f 0.0 0.0 0.0))
      (lambda () (glVertex3f 5.0 0.0 0.0))
      (lambda () (glVertex3f 5.0 5.0 0.0))
      (lambda () (glVertex3f 0.0 5.0 0.0)))
    (glPopMatrix))
  
  
  (method (draw-2d-history)
    (let ((x1 (get-left))
          (y1 (get-top))
          (x2 (get-right))
          (y2 (get-bottom)))
      (glNormal3f 0.0 0.0 1.0)
      (glColor3f .41176 .23921 .00392)
      (glBegin GL_LINE_LOOP)
      (glVertex2f x1 y1)
      (glVertex2f x2 y1)
      (glVertex2f x2 y2)
      (glVertex2f x1 y2)
      (glEnd)))
  
  
  (method protected virtual (draw-target)
    (let ((world (current-world))
          (left (get-left))
          (right (get-right))
          (bottom (get-bottom))
          (top (get-top))
          (back (get-back))
          (front (get-front)))
      (case (get-projection~ world)
        ((perspective)
         (gl-colorize-dye red-dye)
         (glLineWidth 2.)
         (render-cube left bottom back right top front
           (lambda (proc)
             (glBegin GL_LINE_LOOP)
             (proc)
             (glEnd)))
         (glLineWidth 1.))
        ((orthographic)
         (glNormal3f 0.0 0.0 1.0)
         (gl-colorize-dye red-dye)
         (glBegin GL_LINE_LOOP)
         (glVertex2f left bottom)
         (glVertex2f right bottom)
         (glVertex2f right top)
         (glVertex2f left top)
         (glEnd)))))
  
  
  ;;;
  ;;;; Tick
  ;;;
  
  
  (method protected virtual (tick . rest)
    )))
