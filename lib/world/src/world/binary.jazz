;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Binary Read
;;;


(module world.binary jazz


(import (jazz.platform.types))


(definition public scan-s8
  (c-function (scheme-object int) int8
    #<<end-of-c-code
    char *ptr = ___CAST(char*,___BODY(___arg1));
    int index = ___arg2;
    ___result = * (___S8*) (ptr + index);
end-of-c-code
))


(definition public scan-u8
  (c-function (scheme-object int) unsigned-int8
    #<<end-of-c-code
    char *ptr = ___CAST(char*,___BODY(___arg1));
    int index = ___arg2;
    ___result = * (___U8*) (ptr + index);
end-of-c-code
))


(definition public scan-s16
  (c-function (scheme-object int) int16
    #<<end-of-c-code
    char *ptr = ___CAST(char*,___BODY(___arg1));
    int index = ___arg2;
    ___result = * (___S16*) (ptr + index);
end-of-c-code
))


(definition public scan-u16
  (c-function (scheme-object int) unsigned-int16
    #<<end-of-c-code
    char *ptr = ___CAST(char*,___BODY(___arg1));
    int index = ___arg2;
    ___result = * (___U16*) (ptr + index);
end-of-c-code
))


(definition public scan-s32
  (c-function (scheme-object int) int32
    #<<end-of-c-code
    char *ptr = ___CAST(char*,___BODY(___arg1));
    int index = ___arg2;
    ___result = * (___S32*) (ptr + index);
end-of-c-code
))


(definition public scan-float
  (c-function (scheme-object int) float
    #<<end-of-c-code
    char *ptr = ___CAST(char*,___BODY(___arg1));
    int index = ___arg2;
    ___result = * (float*) (ptr + index);
end-of-c-code
))


(definition public scan-floats!
  (c-function (scheme-object int scheme-object int) void
    #<<end-of-c-code
    char *ptr = ___CAST(char*,___BODY(___arg1));
    int index = ___arg2;
    float *scan = (float*) (ptr + index);
    float *dest = ___CAST(float*,___BODY(___arg3));
    int count = ___arg4;
    int i;
    for (i = 0; i < count; i++)
        *dest++ = *scan++;
end-of-c-code
))


(definition public scan-string
  (c-function (scheme-object int int) char-string
    #<<end-of-c-code
    char *ptr = ___CAST(char*,___BODY(___arg1));
    int index = ___arg2;
    int size = ___arg3;
    char str[size + 1];
    memcpy(str, ptr + index, size);
    str[size] = 0;
    ___result = str;
end-of-c-code
)))
