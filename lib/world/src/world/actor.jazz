;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Actors
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2013
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;    Alain Marcotte


(module world.actor jazz


(import (jazz.geometry)
        (jazz.graphic)
        (jazz.graphic.opengl.glew)
        (jazz.io)
        (jazz.library)
        (jazz.literals)
        (jazz.media)
        (jazz.network)
        (jazz.platform)
        (jazz.platform.cairo)
        (jazz.runtime)
        (jazz.system)
        (jazz.ui)
        (jazz.ui.dialog)
        (jazz.ui.window)
        (time)
        (world)
        (world.adjustment)
        (world.autoload)
        (world.collision)
        (world.draw)
        (world.dye)
        (world.dyes)
        (world.element)
        (world.entity)
        (world.foreign)
        (world.geometry)
        (world.history)
        (world.lookat)
        (world.opengl)
        (world.serialization)
        (world.spell)
        (world.syntax (phase syntax))
        (world.texture))


;;;
;;;; Actor
;;;


(definition *global-cooldown*
  0.5)

(definition protected max-fall-speed <fl>
  .36)

(definition protected die-bottom <fl>
  -6.)


(class Actor extends Entity
  
  
  (slot velocity                <f64vector>  initialize (make-zero-vertex)     getter generate)
  (slot fall-velocity           <f64vector>  initialize (make-zero-vertex)     getter generate)
  (slot direction               <f64vector+> initialize #f                     accessors generate)
  (slot life                    <fx>         initialize 100                    accessors generate)
  (slot global-cooldown         <fl>         initialize 0.                     accessors generate)
  (slot spell                   <Spell+>     initialize #f                     accessors generate)
  (slot adjustments             <list>       initialize '()                    accessors generate)
  (slot rapid-fire-acceleration <fl>         initialize 1.                     accessors generate)
  (slot rapid-fire-duration     <fl>         initialize 0.                     accessors generate)
  (slot rapid-fire-cooldown     <fl>         initialize 0.                     accessors generate)
  (slot last-missile            <fl+>        initialize #f                     accessors generate)
  (slot max-missiles            <fx>         initialize 10                     accessors generate)
  (slot missiles-count          <fx>         initialize 0                      accessors generate)
  (slot history-color           <object>     initialize #f                     accessors generate)
  (slot ready?                  <bool>       initialize #f                     accessors generate)
  (slot jumping?                <bool>       initialize #f                     accessors generate)
  (slot jump-grace?             <bool>       initialize #f                     accessors generate)
  (slot jump-time               <fl>         initialize 0.                     accessors generate)
  (slot floor?                  <bool>       initialize #f                     accessors generate)
  (slot movement                <f64vector>  initialize (make-vertex)          getter generate)
  (slot rotation                <fl>         initialize 0.                     accessors generate)
  (slot acceleration            <fl>         initialize 1.                     accessors generate)
  (slot animation-active        <object>     initialize #f                     accessors generate)
  (slot animation-start         <object>     initialize #f                     accessors generate)
  (slot animation-end           <object>     initialize #f                     accessors generate)
  (slot animation-next          <object>     initialize #f                     accessors generate)
  
  
  (method override (finish rest)
    (nextmethod rest)
    (let ((color (copy-dye color)))
      (dye-alpha-set! color .2)
      (set! history-color color)))
  
  
  (method meta override (marshall-object obj)
    (serialize-object (class-of obj)
                      (vector
                        ;; component
                        (serialize (get-name~ obj))
                        (serialize (get-visible?~ obj))
                        ;; element
                        (serialize (get-position~ obj))
                        (serialize (get-lookat~ obj))
                        (serialize (get-scale~ obj))
                        (serialize (get-radiuses~ obj))
                        (serialize (get-radius~ obj))
                        (serialize (get-color~ obj))
                        (serialize (get-hit-behavior~ obj))
                        (serialize (get-user-data~ obj))
                        ;; entity
                        (get-path~ obj)
                        (get-animate?~ obj)
                        (get-animation~ obj)
                        ;; actor
                        (serialize (get-velocity~ obj))
                        (serialize (get-fall-velocity~ obj))
                        (serialize (get-direction~ obj))
                        (serialize (get-life~ obj))
                        (serialize (get-global-cooldown~ obj))
                        (serialize (get-spell~ obj))
                        (serialize (get-adjustments~ obj))
                        (serialize (get-rapid-fire-acceleration~ obj))
                        (serialize (get-rapid-fire-duration~ obj))
                        (serialize (get-rapid-fire-cooldown~ obj))
                        (serialize (get-last-missile~ obj))
                        (serialize (get-max-missiles~ obj))
                        (serialize (get-missiles-count~ obj))
                        (serialize (get-history-color~ obj)))))
  
  
  (method meta override (unmarshall-object content)
    (bind-vector (;; component
                  name
                  visible?
                  ;; element
                  position
                  lookat
                  scale
                  radiuses
                  radius
                  color
                  hit-behavior
                  user-data
                  ;; entity
                  path
                  animate?
                  animation
                  ;; actor
                  velocity
                  fall-velocity
                  direction
                  life
                  global-cooldown
                  spell
                  adjustments
                  rapid-fire-acceleration
                  rapid-fire-duration
                  rapid-fire-cooldown
                  last-missile
                  max-missiles
                  missiles-count
                  history-color
                  ;; creature
                  path-duration
                  anim-duration
                  aggro-radius
                  aggro-target)
        content
      (let ((obj (new self name: name visible?: visible?)))
        ;; element
        (set-position~ obj (deserialize position))
        (set-lookat~ obj (deserialize lookat))
        (set-scale~ obj (deserialize scale))
        (set-radiuses~ obj (deserialize radiuses))
        (set-radius~ obj (deserialize radius))
        (set-color~ obj (deserialize color))
        (set-hit-behavior~ obj (deserialize hit-behavior))
        (set-user-data~ obj (deserialize user-data))
        ;; entity
        (set-path~ obj (deserialize path))
        (set-animate?~ obj (deserialize animate?))
        (set-animation~ obj (deserialize animation))
        ;; actor
        (set-velocity~ obj (deserialize velocity))
        (set-fall-velocity~ obj (deserialize fall-velocity))
        (set-direction~ obj (deserialize direction))
        (set-life~ obj (deserialize life))
        (set-global-cooldown~ obj (deserialize global-cooldown))
        (set-spell~ obj (deserialize spell))
        (set-adjustments~ obj (deserialize adjustments))
        (set-rapid-fire-acceleration~ obj (deserialize rapid-fire-acceleration))
        (set-rapid-fire-duration~ obj (deserialize rapid-fire-duration))
        (set-rapid-fire-cooldown~ obj (deserialize rapid-fire-cooldown))
        (set-last-missile~ obj (deserialize last-missile))
        (set-max-missiles~ obj (deserialize max-missiles))
        (set-missiles-count~ obj (deserialize missiles-count))
        (set-history-color~ obj (deserialize history-color)))))
  
  
  (method public inline (set-velocity vel <f64vector>) <void>
    (vertex-copy! velocity vel))
  
  
  (method public inline (set-fall-velocity vel <f64vector>) <void>
    (vertex-copy! fall-velocity vel))

  
  ;;;
  ;;;; Actions
  ;;;
  
  
  (definition missile-delay <fl>
    .1)

  
  ;(method (maybe-add-action name arguments)
  ;  (if (<= global-cooldown 0.)
  ;      (add-action~ commands name (arguments))
  ;    (set! global-cooldown (- global-cooldown 0.))))
  
  
  (method (maybe-fire commands kind)
    (let ((seconds (current-seconds)))
      (when (or (not last-missile)
                (> (- seconds last-missile) (/ missile-delay rapid-fire-acceleration)))
        (fire commands kind)
        (set! last-missile seconds))))
  
  
  (method (fire commands kind)
    (let ((direction (aim-direction)))
      (add-action~ commands 'fire (list direction kind))))
  
  
  (method (fire-missile direction kind)
    (let ((world (current-world))
          (zone (current-zone)))
      (when (< missiles-count max-missiles)
        (let ((lens (player-lens~ world self)))
          (let ((pos (vertex+ lens (vertex-scalar*& direction (- (get-radius) .1)))))
            (let ((missile (new (missile-class~ world) parent: world position: pos actor: self kind: kind)))
              (increase-missiles)
              (set-velocity~ missile (vertex-scalar*& direction (missile-speed~ missile)))
              (add-element~ zone missile)))))))
  
  
  (method (aim-direction)
    (let ((world (current-world)))
      (if (get-free-aim?~ world)
          (get-eye-sight~ world)
        (cross-normal (get-eye-up~ world) (get-right~ lookat)))))
  
  
  (method (start-rapid-fire)
    (set! rapid-fire-acceleration 3.)
    (set! rapid-fire-duration 15.)
    (set! rapid-fire-cooldown 45.))
  
  
  (method (warp (reversed? #f))
    (let ((world (current-world)))
      (set-position (vertex+& position (vertex-scalar*& (get-eye-sight~ world) (if reversed? -2. 2.))))
      (follow-player~ world)))
  
  
  (method (sprint)
    (set! acceleration 5.))
  
  
  (method public virtual (wound)
    (let ((world (current-world)))
      (let ((critical? (> (random-real) .5)))
        (play-sound-file~ world (if critical? (wound-critical-sound) (wound-sound)))
        (decrease! life (if critical? 20 10)))
      (when (<= life 0)
        (die))))
  
  
  (method public virtual (wound-sound)
    #f)
  
  
  (method public virtual (wound-critical-sound)
    #f)
  
  
  (method public virtual (die)
    (let ((world (current-world)))
      (play-sound-file~ world (death-sound))
      (remove-element~ world self)))
  
  
  (method public virtual (death-sound)
    #f)
  
  
  (method public virtual (stomp)
    #f)
  
  
  (method protected virtual (get-friction)
    .2)
  
  
  (method (tick-actor controller commands elapse exit gravity? response (ignore-entities?: ignore-entities? #t) (ignore-players?: ignore-players? #f))
    (let ((world (current-world))
          (zone (current-zone))
          (me (current-me)))
      (let ((gravity (if gravity? (compute-gravity~ world position) (make-zero-vertex)))
            ;; quicky
            (initial-gravity (if gravity? (compute-gravity~ world position) (make-zero-vertex)))
            (variable-up? (variable-up?~ zone))
            (factor (* elapse 65))
            (first-person? (get-first-person?~ world))
            (fly? (get-fly?~ world))
            (target-velocity (make-zero-vertex))
            (grace-slowdown .25)
            (grace-over? #f)
            (floor-level (get-floor-level~ zone))
            (blink-forward? (and commands (get-blink-forward?~ commands)))
            (blink-backward? (and commands (get-blink-backward?~ commands)))
            (history (get-history~ world)))
        (define (move proc)
          (cond ((or floor? fly? (or blink-forward? blink-backward?))
                 (proc world self (* factor acceleration) target-velocity))
                ((and jumping? jump-grace?)
                 (proc world self (* factor acceleration grace-slowdown) target-velocity)
                 (set! grace-over? #t))))
        
        (if (not commands)
            (begin
              (move move-player-forward~)
              (context-animation (if (< (vehicle-speed~ world self) .02) "Walk" "Run")))
          (when (and (get-modified?~ commands) (hook-commands~ world commands))
            (when (and history (get-command?~ commands))
              (log-commands~ history commands elapse))
            ;; move up
            (when (and (get-move-up?~ commands) first-person?)
              (move move-player-forward~)
              (context-animation "Run"))
            ;; move down
            (when (and (get-move-down?~ commands) first-person?)
              (move move-player-backward~)
              (context-animation "WalkBackwards"))
            ;; blink forward
            (when (and blink-forward? first-person?)
              (move blink-player-forward~)
              (context-animation "Run"))
            ;; blink backward
            (when (and blink-backward? first-person?)
              (move blink-player-backward~)
              (context-animation "WalkBackwards"))
            ;; strafe left
            (when (and (get-strafe-left?~ commands) first-person?)
              (move strafe-player-left~)
              (context-animation "Run"))
            ;; strafe right
            (when (and (get-strafe-right?~ commands) first-person?)
              (move strafe-player-right~)
              (context-animation "Run"))
            ;; strafe up
            (when (and (get-strafe-up?~ commands) fly?)
              (strafe-player-up~ world self factor))
            ;; strafe down
            (when (and (get-strafe-down?~ commands) fly?)
              (strafe-player-down~ world self factor))
            ;; rotate left
            (when (and (get-rotate-left?~ commands) first-person?)
              (rotate-player-left~ world self factor)
              (when (and controller (neq? controller self))
                (set-property 'lookat lookat)))
            ;; rotate right
            (when (and (get-rotate-right?~ commands) first-person?)
              (rotate-player-right~ world self factor)
              (when (and controller (neq? controller self))
                (set-property 'lookat lookat)))))
        (cond ((or floor? fly? (or blink-forward? blink-backward?))
               (vertex-copy! velocity target-velocity))
              (grace-over?
               (vertex-copy! velocity target-velocity)
               (set! jump-grace? #f))
              ((or (not jumping?)
                   (> (- (current-seconds) jump-time) 1.))
               (let ((friction (get-friction)))
                 (when friction
                   (let ((reduce (* friction elapse)))
                     (if (< (vertex-norm velocity) reduce)
                         (vertex-zero! velocity)
                       (vertex-decrease! velocity (vertex-scalar*& (vertex-normalize-safe& velocity) reduce))))))))
        (let ((normalized-gravity (vertex-normalize gravity)))
          (if (or (not commands) (not (get-jump?~ commands)))
              (set! ready? #t)
            (when (and floor? ready? (not jumping?))
              (set! ready? #f)
              (set! jumping? #t)
              (set! jump-grace? (vertex-zero? velocity))
              (set! jump-time (current-seconds))
              (vertex-copy! fall-velocity (vertex-scalar*& normalized-gravity (- (get-jump-impulsion~ world))))
              (context-animation "JumpStart")))
          (when (> (dot-product fall-velocity normalized-gravity) max-fall-speed)
            (vertex-copy! fall-velocity (vertex-scalar*& normalized-gravity max-fall-speed))))
        (let* ((pumps (and (eq? self me) (player-pumps~ zone)))
               (pumped-position (if pumps (vertex+ position pumps) position))
               (target-center (vertex+ pumped-position velocity))
               (collide (case response ((stop) collide&stop) ((slide) collide&slide)))
               ;; quicky for tests
               (radiuses (if (eq? self me) (get-radiuses) (vertex (get-radius-y) (get-radius-y) (get-radius-y))))
               (pumped-radiuses (if (eq? self me) (if pumps (vertex+ (get-radiuses) pumps) (get-radiuses)) (vertex (get-radius-y) (get-radius-y) (get-radius-y)))))
          (receive (new-center last-direction collisions) (collide pumped-position target-center lookat pumped-radiuses ignore-entities?: ignore-entities? ignore-players?: ignore-players?)
            (when pumps
              (set! new-center (vertex- new-center pumps)))
            (hit collisions exit)
            (let ((target-fall (copy-vertex new-center))
                  (gravity (if gravity? (compute-gravity~ world new-center) (make-zero-vertex))))
              (when (and floor-level (< (- (vertex-y target-center) (get-radius-y)) floor-level))
                (hit-floor
                  (lambda (y)
                    (vertex-y-set! target-center y))
                  exit))
              (when (and controller variable-up? (not fly?))
                (update-world-up~ world gravity)
                (realign-lookat (gravity-up gravity)))
              (unless fly?
                (let ((adjusted (* elapse 50.)))
                  (vertex+! fall-velocity fall-velocity (vertex-scalar*& gravity adjusted))
                  (vertex+! target-fall target-fall (vertex+& (vertex-scalar*& fall-velocity adjusted) (vertex-scalar*& gravity (* .5 adjusted adjusted))))))
              (receive (new-fall last-direction collisions) (collide&stop new-center target-fall lookat radiuses ignore-entities?: ignore-entities? ignore-players?: ignore-players?)
                (let ((floor-level (and floor-level (+ floor-level (get-radius-y)))))
                  (if (and floor-level (< (vertex-y new-fall) floor-level) (not fly?))
                      (begin
                        (vertex-y-set! new-fall floor-level)
                        ;; quick hack
                        (if (and (= (vertex-x gravity) 0.)
                                 (= (vertex-z gravity) 0.))
                            (vertex-init! fall-velocity 0. 0. 0.)
                          (vertex-y-set! fall-velocity 0.))
                        (set! jumping? #f)
                        (set! floor? #t))
                    (let ((fall-collided? (not-null? collisions)))
                      (if (not fall-collided?)
                          (set! floor? #f)
                        (vertex-init! fall-velocity 0. 0. 0.)
                        (set! jumping? #f)
                        (set! floor? #t)
                        @four-legged-on-slope
                        (when #t
                          (let ((c0 (car collisions)))
                            (let ((normal (get-normal~ (get-plane~ c0))))
                              (let ((up (remove-tilt normal (get-right~ lookat))))
                                (set-up~ lookat up)
                                (set-sight~ lookat (cross-normal& up (get-right~ lookat)))))))))))
                (let ((old-position (copy-vertex position)))
                  ;; adjust position quicky for tests
                  (vertex-copy! new-fall (vertex+ position (vertex- new-fall position)))
                  (if (or (not controller) (eq? self controller))
                      (set-position new-fall)
                    (set-property 'position new-fall))
                  @wait
                  (when (< (get-y) die-bottom)
                    (lose~ world self)
                    (continuation-return exit))
                  (update-area~ zone self old-position)
                  (update-sector~ zone self old-position)
                  (vertex-! movement position old-position)
                  (decrease! rotation (/ (dot-product (get-sight~ lookat) movement) radius))
                  (when (and controller
                             @to-redo-was-commented-after-conversion-for-mind-control (eq? self me)
                             (not (vertex=? old-position new-fall)))
                    (when (and variable-up? (not fly?))
                      (let ((final-gravity (compute-gravity~ world position)))
                        (realign-lookat-horizon! (get-eye-lookat~ world) (get-up~ lookat) initial-gravity final-gravity)))
                    (eye-center-player~ world))))))))))
  
  
  ;;;
  ;;;; Tick
  ;;;
  
  
  (method protected virtual (tick-actions commands)
    )
  
  
  (method (tick-actor-actions controller commands)
    (let ((world (current-world)))
      (when (get-modified?~ commands)
        (for-each (lambda (action)
                    (bind (name . arguments) action
                      (tick-actor-action controller name arguments)))
                  (get-actions~ commands)))))
  
  
  (method protected virtual (tick-actor-action controller name arguments)
    (let ((world (current-world)))
      (let ((history (get-history~ world)))
        (when history
          (log-action~ history name arguments)))
      (when (hook-action~ world name arguments)
        (case name
          ((track)
           (bind (dh dv eye-sight eye-up eye-right first?) arguments
             (track-actor~ world self dh dv eye-sight eye-up eye-right first?)
             (when (neq? controller self)
               (set-property 'lookat lookat))))
          ((add)
           (bind (mode grid? grid-plane grid-position floor-grid? eye direction stage) arguments
             (editor-add~ world mode grid? grid-plane grid-position floor-grid? eye direction stage)))
          ((delete)
           (bind (position) arguments
             (editor-delete~ world position)))
          ((fire)
           (let ((first-person? (get-first-person?~ world)))
             (bind (direction kind) arguments
               (when first-person?
                 (fire-missile direction kind)))))
          ((rapid-fire)
           (start-rapid-fire))))))
  
  
  (method protected virtual (hit collisions exit)
    )
  
  
  (method protected virtual (hit-floor reset exit)
    )
  
  
  (method protected virtual (ground-speed)
    0.1)
  
  
  ;;;
  ;;;; Player
  ;;;
  
  
  (method protected virtual (is-player?)
    #f)
  
  
  (method (idle-actor)
    (when floor?
      (set-velocity (make-zero-vertex)))
    (context-animation #f))
  
  
  (method protected virtual (context-animation name (duration: duration #f) (next: next #f))
    (let ((minimum-delay .15))
      (let ((elapsed (and animation-start (- (current-seconds) animation-start))))
        (unless (and elapsed (< elapsed minimum-delay))
          (let ((proposed-animation (cond ;fix me
                                      ;(jumping? (if (and elapsed (< elapsed 1.)) "JumpStart" "Jump"))
                                      ;((not floor?) "Fall")
                                      (else name))))
            (let ((effective-animation (and (find-animation~ model proposed-animation) proposed-animation)))
              (unless (equal? animation-active effective-animation)
                (set! animation-active effective-animation)
                (set! animation-start (current-seconds))
                (if (equal? animation-active "JumpStart")
                    (change-morphing animation-active frame: .5)
                  (transition-morphing animation-active))
                (process-idleness~ (current-world) #f))))))))
  
  
  ;;;
  ;;;; Missiles
  ;;;
  
  
  (method protected (increase-missiles)
    (increase! missiles-count))
  
  
  (method protected (decrease-missiles)
    (decrease! missiles-count))
  
  
  (method protected (get-self-wound-grace)
    .1)
  
  
  ;;;
  ;;;; Draw
  ;;;
  
  
  (method override (draw)
    (let ((world (current-world)))
      (cond ((in-history?)
             (when (get-draw-actors-history?~ world)
               (draw-history)))
            (else
             (nextmethod)))))
  
  
  (method override (draw-target dye)
    (let ((world (current-world)))
      (case (get-projection~ (get-eye~ world))
        ((perspective)
         (draw-target-circle))
        ((orthographic)
         (nextmethod dye)))))
  
  
  (method (draw-history)
    (let ((bounds (make-cuboid&)))
      (get-bounds! bounds)
      (let ((x1 (cuboid-left bounds))
            (x2 (cuboid-right bounds))
            (y1 (cuboid-bottom bounds))
            (y2 (cuboid-top bounds))
            (z1 (cuboid-back bounds))
            (z2 (cuboid-front bounds)))
        (glDisable GL_LIGHTING)
        (gl-colorize-dye history-color)
        (render-block x1 x2 y1 y2 z1 z2 GL_LINE_LOOP)
        (glEnable GL_LIGHTING))))))
