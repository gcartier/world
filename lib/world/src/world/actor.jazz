;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Actors
;;;


(module world.actor jazz


(import (jazz.geometry)
        (jazz.graphic)
        (jazz.graphic.opengl.glew)
        (jazz.io)
        (jazz.library)
        (jazz.literals)
        (jazz.media)
        (jazz.network)
        (jazz.platform)
        (jazz.platform.cairo)
        (jazz.runtime)
        (jazz.system)
        (jazz.ui)
        (jazz.ui.dialog)
        (jazz.ui.window)
        (time)
        (world)
        (world.adjustment)
        (world.autoload)
        (world.collision)
        (world.draw)
        (world.dye)
        (world.dyes)
        (world.element)
        (world.entity)
        (world.foreign)
        (world.geometry)
        (world.history)
        (world.lookat)
        (world.opengl)
        (world.serialization)
        (world.spell)
        (world.syntax (phase syntax))
        (world.texture)
        (world.window)
        (world.client.window))


;;;
;;;; Actor
;;;


(definition *global-cooldown*
  0.5)

(definition protected max-fall-vy <fl>
  -.36)

(definition protected die-bottom <fl>
  -6.)


(class Actor extends Entity
  
  
  (property lookat              <LookAt>     initialize (make-standard-lookat) getter generate setter explicit)
  
  
  (slot velocity                <f64vector>  initialize (make-zero-vertex)     getter generate)
  (slot fall-velocity           <f64vector>  initialize (make-zero-vertex)     getter generate)
  (slot direction               <f64vector+> initialize #f                     accessors generate)
  (slot life                    <fx>         initialize 100                    accessors generate)
  (slot global-cooldown         <fl>         initialize 0.                     accessors generate)
  (slot spell                   <Spell+>     initialize #f                     accessors generate)
  (slot adjustments             <list>       initialize '()                    accessors generate)
  (slot rapid-fire-acceleration <fl>         initialize 1.                     accessors generate)
  (slot rapid-fire-duration     <fl>         initialize 0.                     accessors generate)
  (slot rapid-fire-cooldown     <fl>         initialize 0.                     accessors generate)
  (slot last-missile            <fl+>        initialize #f                     accessors generate)
  (slot max-missiles            <fx>         initialize 10                     accessors generate)
  (slot missiles-count          <fx>         initialize 0                      accessors generate)
  (slot history-color           <object>     initialize #f                     accessors generate)
  (slot ready?                  <bool>       initialize #f                     accessors generate)
  (slot jumping?                <bool>       initialize #f                     accessors generate)
  (slot jump-grace?             <bool>       initialize #f                     accessors generate)
  (slot jump-time               <fl>         initialize 0.                     accessors generate)
  (slot floor?                  <bool>       initialize #f                     accessors generate)
  (slot movement                <f64vector>  initialize (make-vertex)          getter generate)
  (slot rotate                  <fl>         initialize 0.                     accessors generate)
  (slot acceleration            <fl>         initialize 1.                     accessors generate)
  (slot animation-active        <object>     initialize #f                     accessors generate)
  (slot animation-start         <object>     initialize #f                     accessors generate)
  (slot animation-end           <object>     initialize #f                     accessors generate)
  (slot animation-next          <object>     initialize #f                     accessors generate)
  
  
  (method override (finish rest)
    (nextmethod rest)
    (let ((color (copy-dye color)))
      (dye-alpha-set! color .2)
      (set! history-color color)))
  
  
  (method meta override (marshall-object obj)
    (serialize-object (class-of obj)
                      (vector
                        ;; component
                        (serialize (get-name~ obj))
                        (serialize (get-visible?~ obj))
                        ;; element
                        (serialize (get-position~ obj))
                        (serialize (get-radiuses~ obj))
                        (serialize (get-radius~ obj))
                        (serialize (get-scale~ obj))
                        (serialize (get-color~ obj))
                        (serialize (get-texture~ obj))
                        (serialize (get-hit-behavior~ obj))
                        (serialize (get-user-data~ obj))
                        ;; entity
                        (get-path~ obj)
                        (get-animate?~ obj)
                        (get-animation~ obj)
                        ;; actor
                        (serialize (get-lookat~ obj))
                        (serialize (get-velocity~ obj))
                        (serialize (get-fall-velocity~ obj))
                        (serialize (get-direction~ obj))
                        (serialize (get-life~ obj))
                        (serialize (get-global-cooldown~ obj))
                        (serialize (get-spell~ obj))
                        (serialize (get-adjustments~ obj))
                        (serialize (get-rapid-fire-acceleration~ obj))
                        (serialize (get-rapid-fire-duration~ obj))
                        (serialize (get-rapid-fire-cooldown~ obj))
                        (serialize (get-last-missile~ obj))
                        (serialize (get-max-missiles~ obj))
                        (serialize (get-missiles-count~ obj))
                        (serialize (get-history-color~ obj)))))
  
  
  (method meta override (unmarshall-object content)
    (bind-vector (;; component
                  name
                  visible?
                  ;; element
                  position
                  radiuses
                  radius
                  scale
                  color
                  texture
                  hit-behavior
                  user-data
                  ;; entity
                  path
                  animate?
                  animation
                  ;; actor
                  lookat
                  velocity
                  fall-velocity
                  direction
                  life
                  global-cooldown
                  spell
                  adjustments
                  rapid-fire-acceleration
                  rapid-fire-duration
                  rapid-fire-cooldown
                  last-missile
                  max-missiles
                  missiles-count
                  history-color
                  ;; creature
                  path-duration
                  anim-duration
                  aggro-radius
                  aggro-target)
        content
      (let ((obj (new self name: name visible?: visible?)))
        ;; element
        (set-position~ obj (deserialize position))
        (set-radiuses~ obj (deserialize radiuses))
        (set-radius~ obj (deserialize radius))
        (set-scale~ obj (deserialize scale))
        (set-color~ obj (deserialize color))
        (set-texture~ obj (deserialize texture))
        (set-hit-behavior~ obj (deserialize hit-behavior))
        (set-user-data~ obj (deserialize user-data))
        ;; entity
        (set-path~ obj (deserialize path))
        (set-animate?~ obj (deserialize animate?))
        (set-animation~ obj (deserialize animation))
        ;; actor
        (set-lookat~ obj (deserialize lookat))
        (set-velocity~ obj (deserialize velocity))
        (set-fall-velocity~ obj (deserialize fall-velocity))
        (set-direction~ obj (deserialize direction))
        (set-life~ obj (deserialize life))
        (set-global-cooldown~ obj (deserialize global-cooldown))
        (set-spell~ obj (deserialize spell))
        (set-adjustments~ obj (deserialize adjustments))
        (set-rapid-fire-acceleration~ obj (deserialize rapid-fire-acceleration))
        (set-rapid-fire-duration~ obj (deserialize rapid-fire-duration))
        (set-rapid-fire-cooldown~ obj (deserialize rapid-fire-cooldown))
        (set-last-missile~ obj (deserialize last-missile))
        (set-max-missiles~ obj (deserialize max-missiles))
        (set-missiles-count~ obj (deserialize missiles-count))
        (set-history-color~ obj (deserialize history-color)))))
  
  
  (method public (set-lookat l)
    (set-sight~ lookat (get-sight~ l))
    (set-up~ lookat (get-up~ l))
    (set-right~ lookat (get-right~ l)))
  
  
  (method public inline (set-velocity vel <f64vector>) <void>
    (vertex-copy! velocity vel))
  
  
  (method public inline (set-fall-velocity vel <f64vector>) <void>
    (vertex-copy! fall-velocity vel))
  
  
  (method override (rotation-matrix)
    (make-lookat-matrix& lookat))

  
  ;;;
  ;;;; Actions
  ;;;
  
  
  (definition public missile-speed <fl>
    1.)
  
  (definition public missile-delay <fl>
    .1)

  
  ;(method (maybe-add-action name arguments)
  ;  (if (<= global-cooldown 0.)
  ;      (add-action~ commands name (arguments))
  ;    (set! global-cooldown (- global-cooldown 0.))))
  
  
  (method (maybe-fire commands kind)
    (let ((seconds (time->seconds (current-time))))
      (when (or (not last-missile)
                (> (- seconds last-missile) (/ missile-delay rapid-fire-acceleration)))
        (fire commands kind)
        (set! last-missile seconds))))
  
  
  (method (fire commands kind)
    (let ((world (current-world))
          (fire-direction (find-setting 'world.fire-direction 'eye)))
      (let ((direction (case fire-direction
                         ((eye) (get-sight~ (get-eye-lookat~ world)))
                         ((player) (get-sight~ (get-lookat~ (current-me))))
                         (else (error "Invalid world.fire-direction: {s}" fire-direction)))))
        (add-action~ commands 'fire (list direction kind)))))
  
  
  (method (fire-missile direction kind)
    (let ((world (current-world))
          (zone (current-zone)))
      (when (< missiles-count max-missiles)
        (let ((target (player-target~ world self)))
          (let ((pos (vertex+ target (vertex-scalar* direction (- radius .1)))))
            (let ((missile (new (missile-class~ world) parent: world position: pos actor: self kind: kind)))
              (increase-missiles)
              (set-velocity~ missile (vertex-scalar* direction missile-speed))
              (add-element~ zone missile)))))))
  
  
  (method (start-rapid-fire)
    (set! rapid-fire-acceleration 3.)
    (set! rapid-fire-duration 15.)
    (set! rapid-fire-cooldown 45.))
  
  
  (method (warp (reversed? #f))
    (let ((world (current-world)))
      (set-position (vertex+ position (vertex-scalar* (get-sight~ (get-eye-lookat~ world)) (if reversed? -2. 2.))))
      (follow-player~ world)))
  
  
  (method (sprint)
    (set! acceleration 5.))
  
  
  (method public virtual (wound)
    (let ((world (current-world)))
      (let ((critical? (> (random-real) .5)))
        (play-sound-file~ world (if critical? (wound-critical-sound) (wound-sound)))
        (decrease! life (if critical? 20 10)))
      (when (<= life 0)
        (die))))
  
  
  (method public virtual (wound-sound)
    #f)
  
  
  (method public virtual (wound-critical-sound)
    #f)
  
  
  (method public virtual (die)
    (let ((world (current-world)))
      (play-sound-file~ world (death-sound))
      (remove-element~ world self)))
  
  
  (method public virtual (death-sound)
    #f)
  
  
  (method public virtual (stomp)
    #f)
  
  
  (method (tick-actor controller commands elapse exit)
    (let ((world (current-world))
          (zone (current-zone))
          (me (current-me)))
      (let ((factor (* elapse 65))
            (first-person? (get-first-person?~ world))
            (fly? (get-fly?~ world))
            (target-velocity (make-zero-vertex))
            (grace-slowdown .25)
            (grace-over? #f)
            (blink-forward? (get-blink-forward?~ commands))
            (blink-backward? (get-blink-backward?~ commands)))
        (define (move proc)
          (cond ((or floor? fly? (or blink-forward? blink-backward?))
                 (proc world self (* factor acceleration) target-velocity))
                ((and jumping? jump-grace?)
                 (proc world self (* factor acceleration grace-slowdown) target-velocity)
                 (set! grace-over? #t))))
        
        (when (get-modified?~ commands)
          (when (and (get-move-up?~ commands) first-person?)
            (move move-player-forward~)
            (increase! rotate (* 150. elapse))
            (context-animation "Run"))
          (when (and (get-move-down?~ commands) first-person?)
            (move move-player-backward~)
            (decrease! rotate (* 150. elapse))
            (context-animation "WalkBackwards"))
          (when (and blink-forward? first-person?)
            (move blink-player-forward~)
            (increase! rotate (* 150. elapse))
            (context-animation "Run"))
          (when (and blink-backward? first-person?)
            (move blink-player-backward~)
            (decrease! rotate (* 150. elapse))
            (context-animation "WalkBackwards"))
          (when (and (get-strafe-left?~ commands) first-person?)
            (move strafe-player-left~)
            (context-animation "Run"))
          (when (and (get-strafe-right?~ commands) first-person?)
            (move strafe-player-right~)
            (context-animation "Run"))
          (when (and (get-strafe-up?~ commands) fly?)
            (strafe-player-up~ world self factor))
          (when (and (get-strafe-down?~ commands) fly?)
            (strafe-player-down~ world self factor))
          (when (and (get-rotate-left?~ commands) first-person?)
            (rotate-player-left~ world self factor)
            (when (neq? controller self)
              (set-property 'lookat lookat)))
          (when (and (get-rotate-right?~ commands) first-person?)
            (rotate-player-right~ world self factor)
            (when (neq? controller self)
              (set-property 'lookat lookat)))
          (when (and fly?
                     (not (get-rotate-left?~ commands))
                     (not (get-rotate-right?~ commands)))
            (reset-player-tilt~ world self)))
        (cond ((or floor? fly? (or blink-forward? blink-backward?))
               (vertex-copy! velocity target-velocity))
              (grace-over?
               (vertex-copy! velocity target-velocity)
               (set! jump-grace? #f))
              ((or (not jumping?)
                   (> (- (time->seconds (current-time)) jump-time) 1.))
               (let ((reduce (* .2 elapse)))
                 (if (< (vertex-norm velocity) reduce)
                     (vertex-zero! velocity)
                   (vertex-decrease! velocity (vertex-scalar* (vertex-normalize-safe velocity) reduce))))))
        (if (not (get-jump?~ commands))
            (set! ready? #t)
          (when (and floor? ready? (not jumping?))
            (set! ready? #f)
            (set! jumping? #t)
            (set! jump-grace? (vertex-zero? velocity))
            (set! jump-time (time->seconds (current-time)))
            (vertex-y-set! fall-velocity (get-jump-impulsion~ world))
            (context-animation "JumpStart")))
        (when (< (vertex-y fall-velocity) max-fall-vy)
          (vertex-y-set! fall-velocity max-fall-vy))
        (let ((target-position (vertex+ position velocity)))
          (receive (new-position last-direction collisions) (collide&slide position target-position lookat radiuses)
            (hit collisions exit)
            (let ((target-fall (copy-vertex new-position)))
              (unless fly?
                (let ((gravity (get-gravity~ world))
                      (adjusted (* elapse 50.)))
                  (vertex-y-set! fall-velocity (- (vertex-y fall-velocity) (* gravity adjusted)))
                  (vertex-y-set! target-fall (+ (vertex-y target-fall) (- (* (vertex-y fall-velocity) adjusted) (* gravity .5 adjusted adjusted))))))
              (receive (new-fall last-direction collisions) (collide&stop new-position target-fall lookat radiuses)
                (let ((floor-level (+ (get-floor-level~ zone) (get-radius-y))))
                  (if (and (< (vertex-y new-fall) floor-level) (not fly?))
                      (begin
                        (vertex-y-set! new-fall floor-level)
                        (vertex-y-set! fall-velocity 0.)
                        (set! jumping? #f)
                        (set! floor? #t))
                    (let ((fall-collided? (not-null? collisions)))
                      (if (not fall-collided?)
                          (set! floor? #f)
                        (vertex-y-set! fall-velocity 0.)
                        (set! jumping? #f)
                        (set! floor? #t)
                        @alain
                        (when #t
                          (let ((c0 (car collisions)))
                            (let ((normal (get-normal~ (get-plane~ c0))))
                              (let ((up (remove-tilt normal (get-right~ lookat))))
                                (set-up~ lookat up)
                                (set-sight~ lookat (cross-product& up (get-right~ lookat)))))))))))
                (let ((old-position (copy-vertex position)))
                  (if (eq? self controller)
                      (set-position new-fall)
                    (set-property 'position new-fall))
                  @wait
                  (when (< (get-y) die-bottom)
                    (lose~ world self)
                    (continuation-return exit))
                  (update-area~ zone self old-position)
                  (update-sector~ zone self old-position)
                  (vertex-! movement position old-position)
                  (when (and @to-redo-was-commented-after-conversion-for-mind-control (eq? self me)
                          (not (vertex=? old-position new-fall)))
                    (camera-center-player~ world))))))))))
  
  
  ;;;
  ;;;; Tick
  ;;;
  
  
  (method protected virtual (tick-actions commands)
    )
  
  
  (method (tick-actor-actions controller commands)
    (let ((world (current-world)))
      (when (get-modified?~ commands)
        (for-each (lambda (action)
                    (bind (name . arguments) action
                      (tick-actor-action controller name arguments)))
                  (get-actions~ commands)))))
  
  
  (method protected virtual (tick-actor-action controller name arguments)
    (let ((world (current-world)))
      (case name
        ((track)
         (bind (dh dv eye-sight eye-up eye-right first?) arguments
           (track-actor~ world self dh dv eye-sight eye-up eye-right first?)
           (when (neq? controller self)
              (set-property 'lookat lookat))))
        ((edit)
         (bind (mode grid? grid-plane grid-position eye direction stage) arguments
           (editor-edit~ world mode grid? grid-plane grid-position eye direction stage)))
        ((delete)
         (bind (position) arguments
           (editor-delete~ world position)))
        ((fire)
         (let ((first-person? (get-first-person?~ world)))
           (bind (direction kind) arguments
             (when first-person?
               (fire-missile direction kind)))))
        ((rapid-fire)
         (start-rapid-fire)))))
  
  
  (method protected virtual (hit collisions exit)
    )
  
  
  ;;;
  ;;;; Player
  ;;;
  
  
  (method protected virtual (is-player?)
    #f)
  
  
  (method (idle-actor)
    (when floor?
      (set-velocity (make-zero-vertex)))
    (context-animation #f))
  
  
  (method protected virtual (context-animation name (duration: duration #f) (next: next #f))
    (when model
      (let ((minimum-delay .15))
        (let ((elapsed (and animation-start (- (time->seconds (current-time)) animation-start))))
          (unless (and elapsed (< elapsed minimum-delay))
            (let ((proposed-animation (cond (jumping? (if (and elapsed (< elapsed 1.)) "JumpStart" "Jump"))
                                            ((not floor?) "Fall")
                                            (else name))))
              (let ((effective-animation (and (find-animation~ model proposed-animation) proposed-animation)))
                (unless (equal? animation-active effective-animation)
                  (set! animation-active effective-animation)
                  (set! animation-start (time->seconds (current-time)))
                  (if (equal? animation-active "JumpStart")
                      (change-morphing animation-active frame: .5)
                    (transition-morphing animation-active))
                  (process-idle~ (current-world) #f)))))))))
  
  
  ;;;
  ;;;; Missiles
  ;;;
  
  
  (method protected (increase-missiles)
    (increase! missiles-count))
  
  
  (method protected (decrease-missiles)
    (decrease! missiles-count))
  
  
  ;;;
  ;;;; Draw
  ;;;
  
  
  (method override (draw-3d-textured)
    (draw-3d))
  
  
  (method override (draw-3d)
    (nextmethod)
    (when (find-setting 'world.debug-ellipsoid? #f)
      (draw-bounding-ellipsoid))
    @gazoum
    (let ((world (current-world)))
      (cond ((in-history?)
             (when (get-draw-actors-history?~ world)
               (draw-3d-history)))
            (else
             (glPushMatrix)
             (glTranslatef (get-x) (get-y) (get-z))
             (gl-colorize-dye color)
             (draw-as-cube)
             (glPopMatrix)))))
  
  
  (method override (draw-target)
    (let ((world (current-world)))
      (case (get-projection~ world)
        ((perspective)
         (glLineWidth 2.)
         (glDisable GL_LIGHTING)
         (gl-horizontal-circle (vertex (get-x) (get-y) (get-z)) (/ radius 1.8) (dye->color purple-dye @w color))
         (glEnable GL_LIGHTING)
         (glLineWidth 1.))
        ((orthographic)
         (nextmethod)))))
  
  
  (method (draw-3d-history)
    (let ((bounds (make-cuboid&)))
      (get-bounds! bounds)
      (let ((x1 (cuboid-left bounds))
            (x2 (cuboid-right bounds))
            (y1 (cuboid-bottom bounds))
            (y2 (cuboid-top bounds))
            (z1 (cuboid-back bounds))
            (z2 (cuboid-front bounds)))
        (glDisable GL_LIGHTING)
        (gl-colorize-dye history-color)
        (render-block x1 x2 y1 y2 z1 z2 GL_LINE_LOOP)
        (glEnable GL_LIGHTING))))
  
  
  (method (draw-bounding-ellipsoid)
    (let ((radius-x (get-radius-x))
          (radius-y (get-radius-y))
          (radius-z (get-radius-z)))
      (glPushMatrix)
      (glTranslatef (vertex-x center) (vertex-y center) (vertex-z center))
      (let ((sight (get-sight~ lookat))
            (up (get-up~ lookat))
            (right (get-right~ lookat)))
        (glMultMatrixv
          (vertex-x right) (vertex-x up) (vertex-x sight) 0.
          (vertex-y right) (vertex-y up) (vertex-y sight) 0.
          (vertex-z right) (vertex-z up) (vertex-z sight) 0.
          0. 0. 0. 1.))
      (glScalef radius-x radius-y radius-z)
      (glPolygonMode GL_FRONT_AND_BACK GL_LINE)
      (glLineWidth 1.)
      (gl-colorize-dye purple-dye)
      (gl-sphere 1. 26 52)
      (glPolygonMode GL_FRONT_AND_BACK GL_FILL)
      (glPopMatrix)))
  
  
  (method (draw-as-cube)
    (let ((x (get-radius-x))
          (y (get-radius-y))
          (z (get-radius-z)))
      (let ((x1 (- x))
            (x2 x)
            (y1 (- y))
            (y2 y)
            (z1 (- z))
            (z2 z))
        (render-block x1 x2 y1 y2 z1 z2 GL_QUADS))))
  
  
  (method (draw-as-sphere rotation (density 'high) (mode GL_LINE))
    (glPushMatrix)
    (when rotation
      (glRotatef rotation 1.0 0.0 0.0))
    (glRotatef 90.0 0.0 1.0 0.0)
    (glPolygonMode GL_FRONT_AND_BACK mode)
    (glLineWidth 1.)
    (case density
      ((low) (gl-sphere radius 13 26))
      ((high) (gl-sphere radius 26 52)))
    (glPolygonMode GL_FRONT_AND_BACK GL_FILL)
    (glPopMatrix))
  
  
  (method (draw-as-sphere-actor movement rotation mount (density 'high) (mode GL_LINE) (sphere-color #f) (eyes-color #f))
    (let ((world (current-world)))
      (define (draw-wheel x y z s)
        (glPushMatrix)
        (glTranslatef x y z)
        (glRotatef (* rotation 2) 1.0 0.0 0.0)
        (glRotatef 90.0 0.0 1.0 0.0)
        (glColor4f .5 .5 .5 (get-alpha))
        (gl-sphere s 15 30)
        (glPopMatrix))
      
      (glPushMatrix)
      (glTranslatef (get-x) (get-y) (get-z))
      (glScalef (vertex-x scale) (vertex-y scale) (vertex-z scale))
      (let ((was-cull-face? (glGetBoolean* GL_CULL_FACE)))
        (when (eq? mode GL_LINE)
          (glEnable GL_CULL_FACE)
          (glCullFace GL_BACK))
        ;; sphere
        (when lookat
          (let* ((sight (if #t @w (vertex-zero? movement) (get-sight~ lookat) (vertex-normalize (vertex (vertex-x movement) 0. (vertex-z movement)))))
                 (up @w (get-world-up~ world) (get-up~ lookat))
                 (right (get-right~ lookat)))
            (glMultMatrixv
              (vertex-x right) (vertex-x up) (vertex-x sight) 0.
              (vertex-y right) (vertex-y up) (vertex-y sight) 0.
              (vertex-z right) (vertex-z up) (vertex-z sight) 0.
              0. 0. 0. 1.)))
        (gl-colorize-dye (if (get-paused?~ world) (dye 1. 1. 1. .2) (or sphere-color color)))
        (draw-as-sphere (and (eq? mount 'none) rotation) density mode)
        ;; wheels
        (when (eq? mount 'wheels)
          (glPolygonMode GL_FRONT_AND_BACK GL_LINE)
          (let ((d .3)
                (s .1))
            (draw-wheel d (- d) d s)
            (draw-wheel d (- d) (- d) s)
            (draw-wheel (- d) (- d) d s)
            (draw-wheel (- d) (- d) (- d) s))
          (glPolygonMode GL_FRONT_AND_BACK GL_FILL))
        ;; eyes
        (glPushMatrix)
        (glRotatef 90.0 0.0 1.0 0.0)
        (glPolygonMode GL_FRONT_AND_BACK GL_FILL)
        (if eyes-color
            (gl-colorize-dye eyes-color)
          (glColor4f 0. 0. 1. (get-alpha)))
        (glPushMatrix)
        (let ((eye-distance (if (eq? mode GL_LINE) -.24 -.29))
              (eye-scale (if (eq? mode GL_LINE) .02 .03)))
          (glTranslatef eye-distance .16 -.18)
          (glScalef eye-scale eye-scale eye-scale)
          (gl-sphere 2. 26 52)
          (glPopMatrix)
          (glPushMatrix)
          (glTranslatef eye-distance .16 .18)
          (glScalef eye-scale eye-scale eye-scale)
          (gl-sphere 2. 26 52)
          (glPopMatrix)
          (glPolygonMode GL_FRONT_AND_BACK GL_FILL))
        (glPopMatrix)
        (when (eq? mode GL_LINE)
          (glCullFace GL_BACK)
          (when (not was-cull-face?)
            (glDisable GL_CULL_FACE))))
      (glPopMatrix)
      ;; fly
      (when (get-fly?~ world)
        (glPushMatrix)
        (glTranslatef (get-x) (get-y) (get-z))
        (let ((sight (get-sight~ lookat))
              (up (get-up~ lookat))
              (right (get-right~ lookat)))
          (glMultMatrixv
            (vertex-x right) (vertex-x up) (vertex-x sight) 0.
            (vertex-y right) (vertex-y up) (vertex-y sight) 0.
            (vertex-z right) (vertex-z up) (vertex-z sight) 0.
            0. 0. 0. 1.))
        (glColor4f .4 0. 0. 1.)
        (let ((width 4.)
              (depth 2.))
          (let ((x1 (- depth))
                (x2 depth)
                (y (- .4))
                (z1 (- width))
                (z2 width))
            ;; flying carpet
            (glNormal3f 0.0 -1.0 0.0)
            (glBegin GL_QUADS)
            (glVertex3f x2 y z2)
            (glVertex3f x1 y z2)
            (glVertex3f x1 y z1)
            (glVertex3f x2 y z1)
            (glEnd)))
        (glPopMatrix))))))
