;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Actors
;;;


(module world.actor jazz


(import (jazz.geometry)
        (jazz.graphic)
        (jazz.graphic.opengl.glew)
        (jazz.io)
        (jazz.library)
        (jazz.literals)
        (jazz.media)
        (jazz.network)
        (jazz.platform)
        (jazz.platform.cairo)
        (jazz.runtime)
        (jazz.system)
        (jazz.ui)
        (jazz.ui.dialog)
        (jazz.ui.window)
        (time)
        (world)
        (world.adjustment)
        (world.autoload)
        (world.draw)
        (world.dye)
        (world.dyes)
        (world.element)
        (world.entity)
        (world.foreign)
        (world.geometry)
        (world.history)
        (world.lookat)
        (world.opengl)
        (world.spell)
        (world.syntax (phase syntax))
        (world.texture)
        (world.window)
        (world.client.window))


;;;
;;;; Actor
;;;


(definition *global-cooldown*
  0.5)


(class Actor extends Entity
  
  
  (slot lookat                  <LookAt>     initialize (make-standard-lookat) getter generate)
  (slot velocity                <f32vector>  initialize (make-zero-vertex)     getter generate)
  (slot fall-velocity           <f32vector>  initialize (make-zero-vertex)     getter generate)
  (slot direction               <f32vector+> initialize #f                     accessors generate)
  (slot life                    <fx>         initialize 100                    accessors generate)
  (slot global-cooldown         <fl>         initialize 0.                     accessors generate)
  (slot spell                   <Spell+>     initialize #f                     accessors generate)
  (slot adjustments             <list>       initialize '()                    accessors generate)
  (slot rapid-fire-acceleration <fl>         initialize 1.                     accessors generate)
  (slot rapid-fire-duration     <fl>         initialize 0.                     accessors generate)
  (slot rapid-fire-cooldown     <fl>         initialize 0.                     accessors generate)
  (slot last-missile            <fl+>        initialize #f                     accessors generate)
  (slot max-missiles            <fx>         initialize 10                     accessors generate)
  (slot missiles-count          <fx>         initialize 0                      accessors generate)
  (slot history-color           <object>     initialize #f                     accessors generate)
  
  
  (method override (finish rest)
    (nextmethod rest)
    (let ((color (copy-dye color)))
      (dye-alpha-set! color .2)
      (set! history-color color)))
  
  
  (method public (set-lookat l)
    (set-sight~ lookat (get-sight~ l))
    (set-up~ lookat (get-up~ l))
    (set-right~ lookat (get-right~ l)))
  
  
  (method public inline (set-velocity vel <f32vector>) <void>
    (vertex-copy! velocity vel))
  
  
  (method public inline (set-fall-velocity vel <f32vector>) <void>
    (vertex-copy! fall-velocity vel))
  
  
  (method (sphere-matrices)
    (values
      (make-translation-matrix (- (get-x)) (- (get-y)) (- (get-z)))
      (make-translation-matrix (get-x) (get-y) (get-z)))
    @w
    (values
      (matrix-multiply (make-lookat-matrix& lookat)
                       (make-translation-matrix& (- (get-x)) (- (get-y)) (- (get-z))))
      (matrix-multiply (make-translation-matrix& (get-x) (get-y) (get-z))
                       (make-inverse-lookat-matrix& lookat)))
    @w
    (values
      (matrix-multiply (make-inverse-lookat-matrix2& lookat)
                       (make-translation-matrix& (- (get-x)) (- (get-y)) (- (get-z))))
      (matrix-multiply (make-translation-matrix& (get-x) (get-y) (get-z))
                       (make-lookat-matrix2& lookat))))

  
  ;;;
  ;;;; Actions
  ;;;
  
  
  (method public virtual (wound)
    (let ((world (current-world)))
      (let ((critical? (> (random-real) .5)))
        (play-sound-file~ world (if critical? (wound-critical-sound) (wound-sound)))
        (decrease! life (if critical? 20 10)))
      (when (<= life 0)
        (die))))
  
  
  (method public virtual (wound-sound)
    #f)
  
  
  (method public virtual (wound-critical-sound)
    #f)
  
  
  (method public virtual (die)
    (let ((world (current-world)))
      (play-sound-file~ world (death-sound))
      (remove-element~ world self)))
  
  
  (method public virtual (death-sound)
    #f)
  
  
  (method public virtual (stomp)
    #f)
  
  
  ;;;
  ;;;; Tick
  ;;;
  
  
  (method protected virtual (tick-actions commands)
    )
  
  
  (method protected virtual (hit collisions exit)
    )
  
  
  ;;;
  ;;;; Player
  ;;;
  
  
  (method protected virtual (is-player?)
    #f)
  
  
  ;;;
  ;;;; Missiles
  ;;;
  
  
  (method protected (increase-missiles)
    (increase! missiles-count))
  
  
  (method protected (decrease-missiles)
    (decrease! missiles-count))
  
  
  ;;;
  ;;;; Draw
  ;;;
  
  
  (method override (draw-3d-textured)
    (draw-3d))
  
  
  (method override (draw-3d)
    (let ((world (current-world)))
      (cond ((in-history?)
             (when (get-draw-actors-history?~ world)
               (draw-3d-history)))
            (else
             (glPushMatrix)
             (glTranslatef (get-x) (get-y) (get-z))
             (gl-colorize-dye color)
             (draw-as-cube)
             (glPopMatrix)))))
  
  
  (method override (draw-target)
    (let ((world (current-world)))
      (case (get-projection~ world)
        ((perspective)
         (glLineWidth 2.)
         (glDisable GL_LIGHTING)
         (gl-horizontal-circle (vertex (get-x) (- (get-y) (/ (get-height) 2)) (get-z)) (/ radius 1.4) color)
         (glEnable GL_LIGHTING)
         (glLineWidth 1.))
        ((orthographic)
         (nextmethod)))))
  
  
  (method (draw-3d-history)
    (let ((bounds (make-cuboid&)))
      (get-bounds! bounds)
      (let ((x1 (cuboid-left bounds))
            (x2 (cuboid-right bounds))
            (y1 (cuboid-bottom bounds))
            (y2 (cuboid-top bounds))
            (z1 (cuboid-back bounds))
            (z2 (cuboid-front bounds)))
        (glDisable GL_LIGHTING)
        (gl-colorize-dye history-color)
        (render-block x1 x2 y1 y2 z1 z2 GL_LINE_LOOP)
        (glEnable GL_LIGHTING))))
  
  
  (method (draw-as-cube)
    (let ((x (get-radius-x))
          (y (get-radius-y))
          (z (get-radius-z)))
      (let ((x1 (- x))
            (x2 x)
            (y1 (- y))
            (y2 y)
            (z1 (- z))
            (z2 z))
        (render-block x1 x2 y1 y2 z1 z2 GL_QUADS))))
  
  
  (method (draw-as-sphere rotation (density 'high) (mode GL_LINE))
    (glPushMatrix)
    (when rotation
      (glRotatef rotation 1.0 0.0 0.0))
    (glRotatef 90.0 0.0 1.0 0.0)
    (glPolygonMode GL_FRONT_AND_BACK mode)
    (glLineWidth 1.)
    (case density
      ((low) (gl-sphere 2. 13 26))
      ((high) (gl-sphere 2. 26 52)))
    (glPolygonMode GL_FRONT_AND_BACK GL_FILL)
    (glPopMatrix))
  
  
  (method (draw-as-sphere-actor movement rotation mount (density 'high) (mode GL_LINE) (sphere-color #f) (eyes-color #f))
    (let ((world (current-world)))
      (define (draw-weel x y z s)
        (glPushMatrix)
        (glTranslatef x y z)
        (glRotatef (* rotation 2) 1.0 0.0 0.0)
        (glRotatef 90.0 0.0 1.0 0.0)
        (glColor4f .5 .5 .5 (get-alpha))
        (gl-sphere s 15 30)
        (glPopMatrix))
      
      (glPushMatrix)
      (glTranslatef (get-x) (get-y) (get-z))
      (glScalef scale scale scale)
      (let ((was-cull-face? (glGetBoolean* GL_CULL_FACE)))
        (when (eq? mode GL_LINE)
          (glEnable GL_CULL_FACE)
          (glCullFace GL_BACK))
        ;; sphere
        (when lookat
          (let* ((sight (if #t @w (vertex-zero? movement) (get-sight~ lookat) (vertex-normalize (vertex (vertex-x movement) 0. (vertex-z movement)))))
                 (up @w (get-world-up~ world) (get-up~ lookat))
                 (right (get-right~ lookat)))
            (glMultMatrixv
              (vertex-x right) (vertex-x up) (vertex-x sight) 0.
              (vertex-y right) (vertex-y up) (vertex-y sight) 0.
              (vertex-z right) (vertex-z up) (vertex-z sight) 0.
              0. 0. 0. 1.)))
        (gl-colorize-dye (if (get-paused?~ world) (dye 1. 1. 1. .2) (or sphere-color color)))
        (draw-as-sphere (and (eq? mount 'none) rotation) density mode)
        ;; weels
        (when (eq? mount 'weels)
          (glPolygonMode GL_FRONT_AND_BACK GL_LINE)
          (let ((d 1.5)
                (s .5))
            (draw-weel d -1.5 d s)
            (draw-weel d -1.5 (- d) s)
            (draw-weel (- d) -1.5 d s)
            (draw-weel (- d) -1.5 (- d) s))
          (glPolygonMode GL_FRONT_AND_BACK GL_FILL))
        ;; eyes
        (glPushMatrix)
        (glRotatef 90.0 0.0 1.0 0.0)
        (glPolygonMode GL_FRONT_AND_BACK GL_FILL)
        (if eyes-color
            (gl-colorize-dye eyes-color)
          (glColor4f 0. 0. 1. (get-alpha)))
        (glPushMatrix)
        (let ((eye-distance (if (eq? mode GL_LINE) -1.2 -1.45))
              (eye-scale (if (eq? mode GL_LINE) .1 .15)))
          (glTranslatef eye-distance .8 -.9)
          (glScalef eye-scale eye-scale eye-scale)
          (gl-sphere 2. 26 52)
          (glPopMatrix)
          (glPushMatrix)
          (glTranslatef eye-distance .8 .9)
          (glScalef eye-scale eye-scale eye-scale)
          (gl-sphere 2. 26 52)
          (glPopMatrix)
          (glPolygonMode GL_FRONT_AND_BACK GL_FILL))
        (glPopMatrix)
        (when (eq? mode GL_LINE)
          (glCullFace GL_BACK)
          (when (not was-cull-face?)
            (glDisable GL_CULL_FACE))))
      (glPopMatrix)
      ;; fly
      (when (get-fly?~ world)
        (glPushMatrix)
        (glTranslatef (get-x) (get-y) (get-z))
        (let ((sight (get-sight~ lookat))
              (up (get-up~ lookat))
              (right (get-right~ lookat)))
          (glMultMatrixv
            (vertex-x right) (vertex-x up) (vertex-x sight) 0.
            (vertex-y right) (vertex-y up) (vertex-y sight) 0.
            (vertex-z right) (vertex-z up) (vertex-z sight) 0.
            0. 0. 0. 1.))
        (glColor4f .4 0. 0. 1.)
        (let ((width 16.)
              (depth 8.))
          (let ((x1 (- depth))
                (x2 depth)
                (y (- 2.))
                (z1 (- width))
                (z2 width))
            ;; flying carpet
            (glNormal3f 0.0 -1.0 0.0)
            (glBegin GL_QUADS)
            (glVertex3f x2 y z2)
            (glVertex3f x1 y z2)
            (glVertex3f x1 y z1)
            (glVertex3f x2 y z1)
            (glEnd)))
        (glPopMatrix))))))
