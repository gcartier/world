;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Actors
;;;


(module world.actor jazz


(import (jazz.geometry)
        (jazz.graphic)
        (jazz.graphic.opengl.glew)
        (jazz.io)
        (jazz.library)
        (jazz.literals)
        (jazz.media)
        (jazz.network)
        (jazz.platform)
        (jazz.platform.cairo)
        (jazz.runtime)
        (jazz.system)
        (jazz.ui)
        (jazz.ui.dialog)
        (jazz.ui.window)
        (time)
        (world)
        (world.autoload)
        (world.draw)
        (world.element)
        (world.entity)
        (world.foreign)
        (world.geometry)
        (world.texture)
        (world.window)
        (world.client.window))


;;;
;;;; Actor
;;;


(class Actor extends Entity
  
  
  (slot lookat               <LookAt>    initialize (make-lookat) getter generate)
  (slot velocity             <f32vector> initialize (make-vertex) getter generate)
  (slot wound-sound          <object>    initialize #f            getter generate)
  (slot wound-critical-sound <object>    initialize #f            getter generate)
  (slot death-sound          <object>    initialize #f            getter generate)
  (slot life                 <fx>        initialize 100           accessors generate)
  (slot max-missiles         <fx>        initialize 10            accessors generate)
  (slot missiles-count       <fx>        initialize 0             accessors generate)
  
  
  (method public (set-lookat l)
    (set-sight~ lookat (get-sight~ l))
    (set-up~ lookat (get-up~ l))
    (set-right~ lookat (get-right~ l)))
  
  
  (method public inline (set-velocity vel <f32vector>) <void>
    (vertex-copy! velocity vel))
  
  
  ;;;
  ;;;; Actions
  ;;;
  
  
  (method public virtual (wound)
    (let ((critical? (> (random-real) .5)))
      (play-sound-file~ world (if critical? wound-critical-sound wound-sound))
      (decrease! life (if critical? 20 10)))
    (when (<= life 0)
      (die)))
  
  
  (method public virtual (die)
    (play-sound-file~ world death-sound)
    (remove-element~ world self))
  
  
  (method public virtual (stomp)
    #f)
  
  
  ;;;
  ;;;; Tick
  ;;;
  
  
  (method protected virtual (tick-actions commands)
    )
  
  
  ;;;
  ;;;; Player
  ;;;
  
  
  (method protected virtual (is-player?)
    #f)
  
  
  ;;;
  ;;;; Missiles
  ;;;
  
  
  (method protected (increase-missiles)
    (increase! missiles-count))
  
  
  (method protected (decrease-missiles)
    (decrease! missiles-count))
  
  
  ;;;
  ;;;; Draw
  ;;;
  
  
  (method override (draw-3d-textured)
    (draw-3d))
  
  
  (method override (draw-3d)
    (glPushMatrix)
    (glTranslatef x y z)
    (glColor4f red green blue alpha)
    (draw-as-cube)
    (glPopMatrix))
  
  
  (method override (draw-target)
    (case (get-projection~ world)
      ((perspective)
       (glLineWidth 2.)
       (glDisable GL_LIGHTING)
       (gl-horizontal-circle (vertex x (- y (/ height 2)) z) (/ radius 1.4) color)
       (glEnable GL_LIGHTING)
       (glLineWidth 1.))
      ((orthographic)
       (nextmethod))))
  
  
  (method (draw-as-cube)
    (let ((x1 (- radius-x))
          (x2 radius-x)
          (y1 (- radius-y))
          (y2 radius-y)
          (z1 (- radius-z))
          (z2 radius-z))
      (render-block x1 x2 y1 y2 z1 z2 GL_QUADS)))
  
  
  (method (draw-as-sphere rotation (density 'high) (mode GL_LINE))
    (glPushMatrix)
    (when rotation
      (glRotatef rotation 1.0 0.0 0.0))
    (glRotatef 90.0 0.0 1.0 0.0)
    (glPolygonMode GL_FRONT_AND_BACK mode)
    (case density
      ((low) (gl-sphere radius-x 13 26))
      ((high) (gl-sphere radius-x 26 52)))
    (glPolygonMode GL_FRONT_AND_BACK GL_FILL)
    (glPopMatrix))
  
  
  (method (draw-as-sphere-actor movement rotation mount (density 'high) (mode GL_LINE) (eyes-color #f))
    (define (draw-weel x y z s)
      (glPushMatrix)
      (glTranslatef x y z)
      (glRotatef (* rotation 2) 1.0 0.0 0.0)
      (glRotatef 90.0 0.0 1.0 0.0)
      (glColor4f .5 .5 .5 alpha)
      (gl-sphere s 15 30)
      (glPopMatrix))
    
    (glPushMatrix)
    (glTranslatef x y z)
    (when (eq? mode GL_LINE)
      (glEnable GL_CULL_FACE)
      (glCullFace GL_FRONT))
    ;; sphere
    (when lookat
      (let* ((sight (if #t @w (vertex-zero? movement) (get-sight~ lookat) (vertex-normalize (vertex (vertex-x movement) 0. (vertex-z movement)))))
             (up @w (get-world-up~ world) (get-up~ lookat))
             (right (get-right~ lookat)))
        (glMultMatrixv
          (vertex-x right) (vertex-x up) (vertex-x sight) 0.
          (vertex-y right) (vertex-y up) (vertex-y sight) 0.
          (vertex-z right) (vertex-z up) (vertex-z sight) 0.
          0. 0. 0. 1.)))
    (glColor4f red green blue alpha)
    (draw-as-sphere (and (eq? mount 'none) rotation) density mode)
    ;; weels
    (when (eq? mount 'weels)
      (glPolygonMode GL_FRONT_AND_BACK GL_LINE)
      (let ((d 1.5)
            (s .5))
        (draw-weel d -1.5 d s)
        (draw-weel d -1.5 (- d) s)
        (draw-weel (- d) -1.5 d s)
        (draw-weel (- d) -1.5 (- d) s))
      (glPolygonMode GL_FRONT_AND_BACK GL_FILL))
    ;; eyes
    (glPushMatrix)
    (glRotatef 90.0 0.0 1.0 0.0)
    (glPolygonMode GL_FRONT_AND_BACK GL_FILL)
    (if eyes-color
        (gl-colorize eyes-color)
      (glColor4f 0. 0. 1. alpha))
    (glPushMatrix)
    (let ((eye-distance (if (eq? mode GL_LINE) (if (find-setting 'world.testing? #f) -.5 -1.2) -1.45))
          (eye-scale (if (eq? mode GL_LINE) .1 .15)))
      (glTranslatef eye-distance .8 -.9)
      (glScalef eye-scale eye-scale eye-scale)
      (gl-sphere radius-x 26 52)
      (glPopMatrix)
      (glPushMatrix)
      (glTranslatef eye-distance .8 .9)
      (glScalef eye-scale eye-scale eye-scale)
      (gl-sphere radius-x 26 52)
      (glPopMatrix)
      (glPolygonMode GL_FRONT_AND_BACK GL_FILL))
    (glPopMatrix)
    (when (eq? mode GL_LINE)
      (glCullFace GL_BACK)
      (glDisable GL_CULL_FACE))
    (glPopMatrix)
    ;; fly
    (when (get-fly?~ world)
      (glPushMatrix)
      (glTranslatef x y z)
      (let ((sight (get-sight~ lookat))
            (up (get-up~ lookat))
            (right (get-right~ lookat)))
        (glMultMatrixv
          (vertex-x right) (vertex-x up) (vertex-x sight) 0.
          (vertex-y right) (vertex-y up) (vertex-y sight) 0.
          (vertex-z right) (vertex-z up) (vertex-z sight) 0.
          0. 0. 0. 1.))
      (glColor4f .4 0. 0. 1.)
      (let ((width 16.)
            (depth 8.))
        (let ((x1 (- depth))
              (x2 depth)
              (y (- radius-y))
              (z1 (- width))
              (z2 width))
          ;; flying carpet
          (glNormal3f 0.0 -1.0 0.0)
          (glBegin GL_QUADS)
          (glVertex3f x2 y z2)
          (glVertex3f x1 y z2)
          (glVertex3f x1 y z1)
          (glVertex3f x2 y z1)
          (glEnd)))
      (glPopMatrix)))))
