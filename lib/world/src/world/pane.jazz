;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Panes
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.pane jazz


(import (jazz.application)
        (jazz.event)
        (jazz.geometry)
        (jazz.graphic)
        (jazz.menu)
        (jazz.opengl.glew)
        (jazz.opengl.texture)
        (jazz.process)
        (jazz.ui)
        (jazz.view)
        (jazz.window)
        (gaea.geometry)
        (world)
        (world.autoload)
        (world.configure)
        (world.context)
        (world.interface)
        (world.interface.sheet)
        (world.quad-texture)
        (world.support)
        (world.task))


(definition protected paint-now?
  (make-parameter #f))


;; gives time for all invalidates to come in
;; and also ensures paint is not called too often
(definition paint-wait-period <fl>
  (/ 1. 30.))


(definition public (clear-glass surface resolution (background: background #f))
  (let ((width (get-width resolution))
        (height (get-height resolution)))
    (let ((rect (new Rect 0 0 width height))
          (background (or background {Color red: .000 green: .000 blue: .200 alpha: .25})))
      (clear surface)
      (fill-rect surface rect background)
      (frame-rect surface rect background))))


(definition public (resolution->expanse resolution)
  (let ((width (cast <fl> (get-width resolution)))
        (height (cast <fl> (get-height resolution))))
    (let ((inner (new Dimension$fl$ width height))
          (outer {Dimension$fl$ 10. 5.625}))
      (let ((ratio (fit-dimensions$fl$ inner outer 'fit)))
        (new Dimension$fl$ (* width ratio) (* height ratio))))))


(definition public (aim-at target direction (complete #f))
  (let ((camera (current-camera)))
    (let ((v0 (copy-vertex (get-position camera)))
          (v1 target)
          (s0 (copy-vertex (get-sight (get-lookat camera))))
          (s1 direction)
          (inc .075))
      (thread-start!
        (new-thread
          (lambda ()
            (let (loop (t inc))
              (with-task-mutex
                (lambda ()
                  ;; bantoo
                  @not-sure-about-all-this
                  (when (>= t 1.)
                    (set-lookat camera (horizon-lookat s1))
                    (set-position camera v1)
                    (derive-target camera)
                    (camera-update camera))
                  ;; @need-correct-lookat-interpolation
                  ;; bantoo
                  (let ((t (min t 1.)))
                    (set-lookat camera (direction-lookat (vertex-normalize& (vertex-lerp s0 s1 t))))
                    (set-position camera (vertex-lerp v0 v1 t))
                    (derive-target camera)
                    (camera-update camera))))
              (if (>= t 1.)
                  (when complete
                    (complete))
                (sleep render-period)
                (loop (+ t inc)))))
          'aim)))))


;;;
;;;; Pane
;;;


(class World-Pane extends Element implements (Windowable Playable Mousable)
  
  
  (property title      initialize #f accessors generate)
  (property expanse    initialize #f accessors generate)
  (property resolution initialize #f accessors generate)
  (property texture    initialize #f accessors generate)
  (property fade       initialize #f accessors generate)
  (property render?    initialize #t accessors generate)
  (property flipped?   initialize #f accessors generate)
  (property hardware?  initialize #f accessors generate)
  ;; quick hack for the case of a purely 2d sheet
  (property pane?      initialize #t accessors generate)
  (property data       initialize #f accessors generate)
  ;; quicky for experiment
  (property mouse-down-handler initialize #f accessors generate)
  
  
  (slot quad-texture   <Quad-Texture+> initialize #f getter generate)
  (slot root           <View+>         initialize #f)
  (slot view-focus     <View+>         initialize #f)
  (slot pushed-focuses                 initialize '())
  (slot invalid-region <Region>        initialize (new Region) getter generate)
  ;; so we can invalidate from a thread
  (slot invalid-mutex                  initialize (make-mutex 'invalid) getter generate)
  (slot paint-waiter                   initialize #f getter generate)
  
  
  (method override (print self output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{a}" title))))
  
  
  (method override (destroy self)
    (when quad-texture
      (close quad-texture))
    (close invalid-region)
    (when (eq? root (get-captured-view))
      (release-captured-view))
    (set! root #f)
    (when (eq? self (get-window-focus))
      (focus-world))
    (nextmethod self))
  
  
  (method override (update-radiuses self)
    (when expanse
      (set-radiuses self (vertex (/ (get-width expanse) 2.) (/ (get-height expanse) 2.) .001))))
  
  
  (method package (new-quad-texture self (flipped?: flipped? #f) (hardware?: hardware? #f))
    (let ((w (get-width expanse))
          (h (get-height expanse))
          (width (get-width resolution))
          (height (get-height resolution)))
      (let ((v1 (vertex (/ w -2.) (/ h  2.) 0.))
            (v2 (vertex (/ w -2.) (/ h -2.) 0.))
            (v3 (vertex (/ w  2.) (/ h -2.) 0.))
            (v4 (vertex (/ w  2.) (/ h  2.) 0.)))
        (let ((quad-texture <Quad-Texture> (make-quad-texture width height v1 v2 v3 v4 texture: texture scale?: (scale? self) mipmap?: (mipmap? self) flipped?: flipped? hardware?: hardware?)))
          (let ((texture (get-texture quad-texture)))
            (when (is? texture Cairo-Texture)
              (let ((surface (get-surface texture)))
                (draw self surface)
                (flush surface)
                (map-texture texture))))
          quad-texture))))
  
  
  (method package virtual (scale? self)
    #f)
  
  
  (method package virtual (mipmap? self)
    #f)
  
  
  (method package virtual (draw self surface)
    )
  
  
  (method package (cache-quad-texture self)
    (when (not quad-texture)
      (set! quad-texture (new-quad-texture self flipped?: flipped? hardware?: hardware?))
      (set! texture (get-texture quad-texture)))
    quad-texture)
  
  
  (method override (render self)
    (draw-texture (cache-quad-texture self)))
  
  
  (method public (render-pane self)
    (let ((camera (current-camera))
          (quad-texture (cache-quad-texture self)))
      (let ((program (get-program quad-texture))
            (array (get-array quad-texture)))
        (if multisampling?
            (glEnable GL_SAMPLE_ALPHA_TO_COVERAGE_ARB)
          (glEnable GL_BLEND))
        (use program)
        (bind-uniforms program (get-projection-matrix camera) (get-view-matrix camera) matrix)
        (bind-entity-matrix program matrix)
        (bind-material program (get-id texture) (get-width texture) (get-height texture))
        (glBindVertexArray array)
        (glDrawArrays GL_TRIANGLES 0 6)
        (glBindVertexArray 0)
        (unuse program)
        (if multisampling?
            (glDisable GL_SAMPLE_ALPHA_TO_COVERAGE_ARB)
          (glDisable GL_BLEND)))))
  
  
  ;;;
  ;;;; Invalid
  ;;;
  
  
  (method public (surface-retrieve-invalid self)
    (if (empty? invalid-region)
        #f
      (prog1 (get-box invalid-region)
        (empty! invalid-region))))
  
  
  (method public (invalidate-surface-region self region)
    (combine-or! invalid-region region))
  
  
  (method public (invalidate-surface-rect self rect)
    (with ((region (new Region rect: rect)))
      (combine-or! invalid-region region)))
  
  
  (method public (paint-now self)
    (with-reentrant-task-mutex
      (lambda ()
        ;; root false indicates closed
        (when root
          (paint-texture self)))))
  
  
  (method public (post-paint self)
    (when (not paint-waiter)
      (let ((waiter (make-waiter 'paint)))
        (set! paint-waiter waiter)
        (in waiter paint-wait-period
          (lambda (again)
            (post-event
              (lambda ()
                (with-task-mutex
                  (lambda ()
                    (mutex-lock! invalid-mutex)
                    ;; root false indicates closed
                    (when root
                      (paint-texture self))
                    (set! paint-waiter #f)
                    (mutex-unlock! invalid-mutex))))))))))
  
  
  (method (paint-texture self)
    (define (clip/draw surface invalid)
      (set-clipper surface invalid)
      (draw self surface)
      (flush surface))
    
    (let ((texture (effective-texture self)))
      (let ((surface (get-surface texture)))
        (let ((invalid (surface-retrieve-invalid self)))
          (when invalid
            (if (not fade)
                (clip/draw surface invalid)
              (with ((memory-surface (new Image-Surface resolution scale?: #t)))
                (clip/draw memory-surface invalid)
                (set-clipper surface invalid)
                (clear surface)
                (blit-surface surface memory-surface alpha: fade)))
            (map-texture texture))))))
  
  
  (method (effective-texture self)
    (if pane?
        (get-texture (cache-quad-texture self))
      texture))
  
  
  ;;;
  ;;;; Mousable
  ;;;
  
  
  (method override (mousable? self)
    (or root mouse-down-handler))
  
  
  (method override (mousable-down self x y)
    (parameterize ((event-type 'mouse))
      (if (not root)
          (when mouse-down-handler
            (mouse-down-handler self (fxround x) (fxround y)))
        (root-mouse-down root (fxround x) (fxround y)))))
  
  
  (method override (mousable-moved self x y)
    (parameterize ((event-type 'mouse))
      (when root
        (dispatch-mouse-move root (fxround x) (fxround y)))))
  
  
  (method override (mousable-up self x y)
    (parameterize ((event-type 'mouse))
      (when root
        (root-mouse-up root (fxround x) (fxround y)))))
  
  
  (method override (mousable-double self x y)
    (parameterize ((event-type 'mouse))
      (when root
        (root-double-click root (fxround x) (fxround y)))))
  
  
  (method override (mousable-multiple self count x y)
    (parameterize ((event-type 'mouse))
      (when root
        (root-multiple-click root count (fxround x) (fxround y)))))
  
  
  (method override (mousable-right-down self x y)
    (parameterize ((event-type 'mouse))
      (when root
        (root-right-mouse-down root (fxround x) (fxround y)))))
  
  
  (method override (mousable-right-up self x y)
    (parameterize ((event-type 'mouse))
      (when root
        (root-right-mouse-up root (fxround x) (fxround y)))))
  
  
  (method override (mousable-wheel self x y delta)
    (when root
      (root-mouse-wheel root (fxround x) (fxround y) delta)))
  
  
  (method protected virtual (mousable-look-at? self)
    #t)
  
  
  (method (look-at self)
    (let ((world (current-world))
          (camera (current-camera)))
      (let ((pos (matrix-translation matrix))
            (sight (matrix-direction matrix))
            (distance (pane-distance camera (get-width resolution) (get-width expanse))))
        (let ((target (vertex+ pos (vertex-scalar* sight (- distance))))
              (direction (matrix-direction matrix)))
          (aim-at target direction
            (lambda ()
              (free-motion world feedback?: #f)
              (when root
                (with-task-mutex
                  (lambda ()
                    (focus-default root))))))))))
  
  
  (method (leave-pane self)
    (focus-world))
  
  
  ;;;
  ;;;; Windowable
  ;;;
  
  
  (method override (get-overlapped self)
    self)
  
  
  (method override (track-mouse-leave self)
    )
  
  
  (method override (cancel-mouse-leave-tracking self)
    )
  
  
  ;; TODO
  (method override (mouse-position self) <Point>
    {Point 0 0})
  
  
  (method override (get-focus self)
    self)
  
  
  (method override (set-focus self)
    (let ((window (current-window)))
      (set-playable-focus window self)
      (platform-set-focus (get-handle window))))
  
  
  (method override (acquire-capture self)
    )
  
  
  (method override (release-capture self)
    )
  
  
  (method override (acquire self window <Windowable> shape)
    shape)
  
  
  (method override (get-cursor-visible? self)
    #t)
  
  
  (method override (show-cursor self)
    #t)
  
  
  (method override (hide-cursor self)
    #t)


  (method override (scroll-window self delta rect clip-rect)
    ;; quick test
    (invalidate-rect self rect))
  
  
  (method override (invalidate-rect self rect)
    (cond ((paint-now?)
           (invalidate-surface-rect self rect)
           (paint-now self))
          (else
           (mutex-lock! invalid-mutex)
           (invalidate-surface-rect self rect)
           (post-paint self)
           (mutex-unlock! invalid-mutex))))
  
  
  (method override (invalidate-region self region)
    (cond ((paint-now?)
           (invalidate-surface-region self region)
           (paint-now self))
          (else
           (mutex-lock! invalid-mutex)
           (invalidate-surface-region self region)
           (post-paint self)
           (mutex-unlock! invalid-mutex))))
  
  
  (method override (redraw-window self (rect: rect #f) (region: region #f))
    (cond (rect (invalidate-rect self rect))
          (region (invalidate-region self region)))
    (update-window self))
  
  
  (method override (redraw-scrollbar self view)
    ;; copy/paste from cocoa
    (let ((rct (acquire (get-root view) view (get-bounds view))))
      ;; clear any invalidations
      (update-window self)
      (invalidate-rect self rct)
      (update-window self)))
  
  
  (method override (update-window self)
    )
  
  
  (method public (invalidate-texture self)
    (when root
      (invalidate-view root)))
  
  
  (method public (redraw-texture self)
    (let ((texture (effective-texture self)))
      (let ((surface (get-surface texture)))
        (reset-clipper surface)
        (draw self surface)
        (flush surface)
        (map-texture texture))))
  
  
  ;;;
  ;;;; Playable
  ;;;
  
  
  (method override (owner-window self)
    (current-window))
  
  
  (method override (get-root self)
    root)
  
  
  (method override (set-root self value (detach?: detach? #t))
    (when (neq? value root)
      (set! root value)
      (set-name root 'root)
      (set-player root self)))
  
  
  (method override (get-view-focus self)
    view-focus)
  
  
  (method override (set-view-focus self focus)
    (set! view-focus focus))
  
  
  (method override (get-pushed-focuses self)
    '())
  
  
  (method override (focus-gain self)
    (set-focused-window self)
    (when (and view-focus (in-player? view-focus))
      (parameterize ((activating-window? #t))
        (focus-view self view-focus)
        (focus-delegate view-focus)))
    processed)
  
  
  (method override (focus-lose self)
    (parameterize ((window-losing-focus? #t))
      (unfocus-view self))
    (set-focused-window #f)
    processed)
  
  
  (method override (focus-view self new-focus (process-focus-change? #t))
    (set! view-focus new-focus)
    (call-focus-gained view-focus)
    (when (and process-focus-change? (process-active?))
      (process-focus-change (current-application) view-focus)))
  
  
  (method override (unfocus-view self)
    (when view-focus
      (let ((focus view-focus))
        (call-focus-lose focus)
        (set! view-focus (focus-master focus))
        (call-focus-lost focus))))
  
  
  (method override (push-view-focus self new-focus)
    (when view-focus
      (set! pushed-focuses (cons view-focus pushed-focuses)))
    ;; quick hack to fix correctly
    (unless (is? view-focus Menubar)
      (let ((focus view-focus))
        (when focus
          (call-focus-lose focus))))
    (focus-view self new-focus #f))
  
  
  (method override (pop-view-focus self)
    (when (has-pushed-focuses? self)
      (let ((new-focus (car pushed-focuses)))
        (set! pushed-focuses (cdr pushed-focuses))
        (when view-focus
          (call-focus-lose view-focus))
        (parameterize ((activating-window? #t))
          (focus-view self new-focus #f)))))
  
  
  (method override (pop-view-focuses self popup)
    (let (iterate)
      (let ((focus view-focus))
        (when (and view-focus
                   (eq? (get-player view-focus) popup)
                   (has-pushed-focuses? self))
          (pop-view-focus self)
          (iterate)))))
  
  
  (method override (pop-all-view-focuses self)
    (let (iterate)
      (when (has-pushed-focuses? self)
        (pop-view-focus self)
        (iterate))))
  
  
  (method override (clear-pushed-focuses self)
    )
  
  
  (method package (has-pushed-focuses? self)
    (not-null? pushed-focuses))
  
  
  (method override (close-popups self . rest)
    ))


;;;
;;;; Sheet-Pane
;;;


(definition public (make-sheet-pane
                     (class: class #f)
                     (name: name #f)
                     (title: title #f)
                     (position: position #f)
                     (size: size #f)
                     (expanse: expanse #f)
                     (resolution: resolution #f)
                     (texture: texture #f)
                     (root: root #f)
                     (pane?: pane? #t)
                     (flipped?: flipped? #f)
                     (hardware?: hardware? #f))
  (let ((world (current-world)))
    (let ((sheet (make-world-sheet name World-Sheet size resolution: resolution texture: texture flipped?: flipped? hardware?: hardware?))
          (pane (new (or class Sheet-Pane)
                  title: title
                  expanse: expanse
                  resolution: resolution
                  texture: texture
                  pane?: pane?)))
      (make-orthographic-matrix! (get-projection-matrix sheet) 0. (get-width world) 0. (get-height world) 0. 10.)
      (set-position sheet position)
      (set-size sheet size)
      (set-sheet pane sheet)
      (set-flipped? pane flipped?)
      (set-hardware? pane hardware?)
      (when root
        (set-root-view sheet root)
        (set-root pane root))
      pane)))


(class Sheet-Pane extends World-Pane
  
  
  (property sheet initialize #f accessors generate)
  
  
  (method override (destroy self)
    (close sheet)
    (nextmethod self))
  
  
  @not-sure
  (method override (scale? self)
    #t)
  
  
  @not-sure
  (method override (mipmap? self)
    #t)
  
  
  (method override (draw self surface)
    (when root
      (clear surface)
      (paint-drawing root surface '())))))
