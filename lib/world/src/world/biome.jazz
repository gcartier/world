;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Biomes
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2016
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s): Édouard Hébert


(module world.biome jazz


(import (jazz.geometry)
        (jazz.graphic)
        (world)
        (world.autoload)
        (world.foreign)
        (world.geometry)
        (world.syntax (phase syntax)))


;;;
;;;; Biome
;;;


(class Biome extends Object
  
  
  (slot name                 getter generate)
  (slot title                getter generate)
  (slot id          <fx>     getter generate)
  (slot top                  accessors generate)
  (slot fill                 accessors generate)
  (slot color       <Color>  getter generate)
  (slot base        <fl>     getter generate)
  (slot variation   <fl>     getter generate)
  (slot temperature <fl>     getter generate)
  (slot rain        <fl>     getter generate)
  (slot decorator            getter generate)
  (slot type        <symbol> getter generate)
  
  
  (method override (initialize name title id top fill color base variation temperature rain type)
    (set! name~self name)
    (set! title~self title)
    (set! id~self id)
    (set! top~self top)
    (set! fill~self fill)
    (set! color~self color)
    (set! base~self base)
    (set! variation~self variation)
    (set! temperature~self temperature)
    (set! rain~self rain)
    (set! decorator (new Biome-Decorator))
    (set! type~self type)
    (setup-decorator))
  
  
  (method virtual (setup-decorator)
    )
  
  
  (method override (print output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{a}" name))))
  
  
  (method virtual (mutation?)
    #f)
  
  
  (method virtual (mutate) <Biome+>
    #f)
  
  
  (method virtual (get-tree-generation rand) <fx>
    (if (= (randomInt rand 10) 0) 0 1))
  
  
  (method virtual (replace-blocks x z rand block-ref block-set! blockstate-set!)
    (let ((replace-amount -1))
      (let (iter (y 255))
        (if (<= y (randomInt rand 5))
            (block-set! x y z 7)
          (let ((block-id <fx> (block-ref x y z)))
            (if (= block-id 0)
                (set! replace-amount -1)
              (when (= block-id 1)
                (if (= replace-amount -1)
                    (begin
                      (blockstate-set! x y z top)
                      (set! replace-amount (randomIntBetween rand 3 5)))
                  (when (> replace-amount 0)
                    (blockstate-set! x y z fill)
                    (decrease! replace-amount)))))))
        (when (> y 0)
          (iter (- y 1))))))
  
  
  (method (decorate-biome rand block-ref block-set! blockstate-set! get-height)
    (decorate~ decorator self rand block-ref block-set! blockstate-set! get-height)))


;;;
;;;; Biome decorator
;;;


(class Biome-Decorator extends Object
  
  
  (slot trees-per-chunk  <fx> initialize 0  accessors generate)
  (slot grass-per-chunk  <fx> initialize 0  accessors generate)
  (slot tree-generations      initialize #f getter generate)
  
  
  (method override (initialize)
    (set! tree-generations (list generate-tree generate-big-tree generate-spruce-tree generate-birch-tree)))
  
  
  (method (decorate biome <Biome> rand block-ref block-set! blockstate-set! get-height)
    (loop (for j2 from 0 below trees-per-chunk)
          (let ((k6 (+ (randomInt rand 16) 8))
                (l (+ (randomInt rand 16) 8)))
            (let ((height (get-height k6 l)))
              ((list-ref tree-generations (get-tree-generation~ biome rand)) k6 height l rand biome block-ref block-set! blockstate-set! get-height))))
    (loop (for i3 from 0 below grass-per-chunk)
          (let ((x (+ (randomInt rand 16) 8))
                (z (+ (randomInt rand 16) 8)))
            (let ((k14 (* (get-height x z) 2)))
              (let ((l17 (randomInt rand k14)))
                (generate-grass x l17 z rand block-ref block-set! blockstate-set!)))))
    (generate-ores rand block-ref block-set! blockstate-set!))
  
  
  (method (generate-tree x <fx> y <fx> z <fx> rand biome <Biome> block-ref block-set! blockstate-set! get-height)
    (let ((i (+ (randomInt rand 3) 4))
          (flag #t))
      (when (and (> y 0) (< (+ y i) 255))
        (loop (for j from y to (+ y i 1))
              (let ((k (if (>= j (+ y i -1)) 2 (if (= j y) 0 1))))
                (loop (for l init (- x k) test (and flag (<= l (+ x k))) iter (+ l 1))
                      (loop (for i1 init (- z k) test (and flag (<= i1 (+ z k))) iter (+ i1 1))
                            (unless (and (>= j 0) (< j 256) (id? (block-ref l j i1) 0 18 2 3 17 106))
                              (set! flag #f))))))
        (when (and flag (id? (block-ref x (- y 1) z) 2 3))
          (block-set! x (- y 1) z 3)
          (loop (for i3 from (+ y i -3) to (+ y i))
                (let ((i4 (- i3 (+ y i))))
                  (let ((j1 (- 1 (fxfloor/ (+ i4 1) 2))))
                    (loop (for k1 from (- x j1) to (+ x j1))
                          (loop (for i2 from (- z j1) to (+ z j1))
                                (do (when (or (/= (abs (- k1 x)) j1) (/= (abs (- i2 z)) j1) (and (randomBool rand) (/= i4 0)))
                                      (when (id? (block-ref k1 i3 i2) 0 18 106)
                                        (blockstate-set! k1 i3 i2 307)))))))))
          (loop (for j3 from 0 below i)
                (when (id? (block-ref x (+ y j3) z) 0 18 106)
                  (blockstate-set! x (+ y j3) z 290)))))))
  
  
  (method (generate-big-tree x <fx> y <fx> z <fx> rand biome <Biome> block-ref block-set! blockstate-set! get-height)
    (let ((i (+ (randomInt rand 3) 10))
          (flag #t))
      (when (and (> y 0) (< (+ y i) 255))
        (loop (for j from y to (+ y i 1))
              (let ((k (if (>= j (+ y i -1)) 2 (if (= j y) 0 1))))
                (loop (for l init (- x k) test (and flag (<= l (+ x k))) iter (+ l 1))
                      (loop (for i1 init (- z k) test (and flag (<= i1 (+ z k))) iter (+ i1 1))
                            (unless (and (>= j 0) (< j 256) (id? (block-ref l j i1) 0 18 2 3 17 106))
                              (set! flag #f))))))
        (when (and flag (id? (block-ref x (- y 1) z) 2 3))
          (block-set! x (- y 1) z 3)
          (loop (for i3 from (+ y i -3) to (+ y i))
                (let ((i4 (- i3 (+ y i))))
                  (let ((j1 (- 1 (fxfloor/ (+ i4 1) 2))))
                    (loop (for k1 from (- x j1) to (+ x j1))
                          (loop (for i2 from (- z j1) to (+ z j1))
                                (do (when (or (/= (abs (- k1 x)) j1) (/= (abs (- i2 z)) j1) (and (randomBool rand) (/= i4 0)))
                                      (when (id? (block-ref k1 i3 i2) 0 18 106)
                                        (blockstate-set! k1 i3 i2 307)))))))))
          (loop (for j3 from 0 below i)
                (when (id? (block-ref x (+ y j3) z) 0 18 106)
                  (blockstate-set! x (+ y j3) z 290)))))))
  
  
  (method (generate-birch-tree x <fx> y <fx> z <fx> rand biome <Biome> block-ref block-set! blockstate-set! get-height)
    (let ((i (+ (randomInt rand 3) 4))
          (flag #t))
      (when (and (> y 0) (< (+ y i) 255))
        (loop (for j from y to (+ y i 1))
              (let ((k (if (>= j (+ y i -1)) 2 (if (= j y) 0 1))))
                (loop (for l init (- x k) test (and flag (<= l (+ x k))) iter (+ l 1))
                      (loop (for i1 init (- z k) test (and flag (<= i1 (+ z k))) iter (+ i1 1))
                            (unless (and (>= j 0) (< j 256) (id? (block-ref l j i1) 0 18 2 3 17 106))
                              (set! flag #f))))))
        (when (and flag (id? (block-ref x (- y 1) z) 2 3))
          (block-set! x (- y 1) z 3)
          (loop (for i3 from (+ y i -3) to (+ y i))
                (let ((i4 (- i3 (+ y i))))
                  (let ((j1 (- 1 (fxfloor/ (+ i4 1) 2))))
                    (loop (for k1 from (- x j1) to (+ x j1))
                          (loop (for i2 from (- z j1) to (+ z j1))
                                (do (when (or (/= (abs (- k1 x)) j1) (/= (abs (- i2 z)) j1) (and (randomBool rand) (/= i4 0)))
                                      (when (id? (block-ref k1 i3 i2) 0 18 106)
                                        (blockstate-set! k1 i3 i2 309)))))))))
          (loop (for j3 from 0 below i)
                (when (id? (block-ref x (+ y j3) z) 0 18 106)
                  (blockstate-set! x (+ y j3) z 292)))))))
  
  
  (method (generate-spruce-tree x <fx> y <fx> z <fx> rand biome <Biome> block-ref block-set! blockstate-set! get-height)
    (let ((max-leaf-elevation (+ (randomInt rand 4) 6))
          (min-leaf-elevation (+ 1 (randomInt rand 2))))
      (let ((leaf-height (- max-leaf-elevation min-leaf-elevation))
            (max-radius (+ 2 (randomInt rand 2)))
            (flag #t)
            (flag2 #f))
        (when (and (> y 0) (< (+ y max-leaf-elevation) 255))
          (loop (for check-y init y test (and (<= check-y (+ y max-leaf-elevation 1)) flag) iter (+ check-y 1))
                (let ((check-radius (if (< (- check-y y) min-leaf-elevation) 0 1)))
                  (loop (for check-x init (- x check-radius) test (and flag (<= check-x (+ x check-radius))) iter (+ check-x 1))
                        (loop (for check-z init (- z check-radius) test (and flag (<= check-z (+ z check-radius))) iter (+ check-z 1))
                              (unless (and (>= check-y 0) (< check-y 256) (id? (block-ref check-x check-y check-z) 0 18 78))
                                (set! flag #f))))))
          (when (and flag (id? (block-ref x (- y 1) z) 2 3))
            (block-set! x (- y 1) z 3)
            (let ((radius <fx> (randomInt rand 2))
                  (max-intermediate-radius <fx> 1)
                  (radius-fallback <fx> 0)
                  (max-snow <fx> 0))
              (loop (for y-ref from 0 to leaf-height)
                    (let ((y-pos (- (+ y max-leaf-elevation) y-ref)))
                      (loop (for x-pos from (- x radius) to (+ x radius))
                            (let ((x-ref (- x-pos x)))
                              (loop (for z-pos from (- z radius) to (+ z radius))
                                    (let ((z-ref (- z-pos z)))
                                      (when (and (or (/= (abs x-ref) radius) (/= (abs z-ref) radius) (<= radius 0)) (id? (block-ref x-pos y-pos z-pos) 0 18 106))
                                        (blockstate-set! x-pos y-pos z-pos 308)
                                        (when (and (< (get-temperature~ biome) 0) (>= radius max-snow) (= (block-ref x-pos (+ y-pos 1) z-pos) 0))
                                          (blockstate-set! x-pos (+ y-pos 1) z-pos 1327)
                                          (block-set! x-pos (get-height x-pos z-pos) z-pos 0)
                                          (unless flag2 (set! flag2 #t))))))))
                      (when flag2 (set! flag2 #f) (set! max-snow (+ (max max-snow radius) 1)))
                      (if (>= radius max-intermediate-radius)
                          (begin
                            (set! radius radius-fallback)
                            (set! radius-fallback 1)
                            (increase! max-intermediate-radius)
                            (when (> max-intermediate-radius max-radius)
                              (set! max-intermediate-radius max-radius)))
                        (increase! radius))))
              (let ((i4 (randomInt rand 3)))
                (loop (for k4 from 0 below (- max-leaf-elevation i4))
                      (when (id? (block-ref x (+ y k4) z) 0 18 78)
                        (blockstate-set! x (+ y k4) z 291))))))))))
  
  
  (method (generate-grass x <fx> y <fx> z <fx> rand block-ref block-set! blockstate-set!)
    (while (id? (block-ref x y z) 0 18 161)
      (decrease! y))
    (loop (for i1 from 0 below 128)
          (let ((i (+ x (- (randomInt rand 8) (randomInt rand 8))))
                (j (+ y (- (randomInt rand 4) (randomInt rand 4))))
                (k (+ z (- (randomInt rand 8) (randomInt rand 8)))))
            (when (and (id? (block-ref i j k) 0) (id? (block-ref i (- j 1) k) 2 3))
              (block-set! i j k 31)))))
  
  
  (method (generate-ores rand block-ref block-set! blockstate-set!)
    (generate-standard-ore rand 0 255 13 8 33 block-ref block-set!) ;; gravel
    (generate-standard-ore rand 0 128 16 20 17 block-ref block-set!)) ;; coal
  
  
  (method (generate-standard-ore rand min-y max-y id tries size block-ref blockstate-set!)
    (if (< max-y min-y)
        (let ((i max-y))
          (set! max-y min-y)
          (set! min-y i))
      (when (= max-y min-y)
        (if (< max-y 255)
            (increase! max-y)
          (decrease! min-y))))
    (loop (for j0 from 0 below tries)
          (let ((x <fx> (+ (randomInt rand 16) 8))
                (y <fx> (+ min-y (randomInt rand (- max-y min-y))))
                (z <fx> (+ (randomInt rand 16) 8)))
            (let ((f0 (* (randomFloat rand) PI)))
              (let ((d0 <fl> (+ x (* (sin f0) (/ size 8.))))
                    (d1 <fl> (+ x (* (sin f0) (/ size 8.))))
                    (d2 <fl> (+ z (* (cos f0) (/ size 8.))))
                    (d3 <fl> (+ z (* (cos f0) (/ size 8.))))
                    (d4 <fl> (+ y (randomInt rand 3) -2.))
                    (d5 <fl> (+ y (randomInt rand 3) -2.)))
                (loop (for i from 0 below size)
                      (let ((f1 <fl> (/ i (cast <fl> size))))
                        (let ((d6 <fl> (+ d0 (* (- d1 d0) f1)))
                              (d7 <fl> (+ d4 (* (- d5 d4) f1)))
                              (d8 <fl> (+ d2 (* (- d3 d2) f1)))
                              (d9 <fl> (* (randomFloat rand) size 0.0625)))
                          (let ((d10 <fl> (/ (+ (* (+ (sin (* f1 PI)) 1.) d9) 1.) 2.)))
                            (loop (for l1 from (fxfloor (- d6 d10)) to (fxfloor (+ d6 d10)))
                                  (let ((d12 <fl> (expt (/ (- l1 -0.5 d6) d10) 2)))
                                    (when (< d12 1.)
                                      (loop (for i2 from (fxfloor (- d7 d10)) to (fxfloor (+ d7 d10)))
                                            (let ((d13 <fl> (expt (/ (- i2 -0.5 d7) d10) 2)))
                                              (when (< (+ d12 d13) 1.)
                                                (loop (for j2 from (fxfloor (- d8 d10)) to (fxfloor (+ d8 d10)))
                                                      (when (and (< (+ d12 d13 (expt (/ (- j2 -0.5 d8) d10) 2)) 1.) (id? (block-ref l1 i2 j2) 1))
                                                        (blockstate-set! l1 i2 j2 id)))))))))))))))))))
    


(definition protected biome-names <table>
  (make-table test: eq?))

(definition protected biome-ids <vector>
  (make-vector 256 #f))


(definition protected (register-biome name class title id top fill color (base: base 0.1) (variation: variation 0.2) (temperature: temperature 0.5) (rain: rain 0.5) (type: type 'default))
  (bind (red green blue) color
    (let ((color (new Color red: red green: green blue: blue)))
      (let ((biome (new class name title id top fill color base variation temperature rain type)))
        (table-set! biome-names name biome)
        (vector-set! biome-ids id biome)
        (unspecified)))))


(definition public (name->biome name) <Biome>
  (table-ref biome-names name #f))

(definition public (id->biome id <fx>) <Biome>
  (vector-ref biome-ids id))


;;;
;;;; Biome classes
;;;


(class BiomeMesa extends Biome
  
  
  (slot bands               <vector+> initialize #f    getter generate)
  (slot white-stained-clay  <fx>      initialize 2704 getter explicit)
  (slot orange-stained-clay <fx>      initialize 2705 getter explicit)
  (slot yellow-stained-clay <fx>      initialize 2708 getter explicit)
  (slot silver-stained-clay <fx>      initialize 2712 getter explicit)
  (slot brown-stained-clay  <fx>      initialize 2716 getter explicit)
  (slot red-stained-clay    <fx>      initialize 2718 getter explicit)
  (slot hardened-clay       <fx>      initialize 2924 getter explicit)
  
  
  (method (generate-bands)
    (let ((rand (newRandom (worldSeed))))
      (set! bands (make-vector 64 hardened-clay))
      (let ((i2 (+ (randomInt rand 4) 2))
            (j2 (+ (randomInt rand 4) 2))
            (l2 (+ (randomInt rand 4) 2))
            (k3 (+ (randomInt rand 3) 3))
            (j4 0))
        (loop (for l1 <fx> from 0 below 64)
              (increase! l1 (+ (randomInt rand 5) 1))
              (when (< l1 64)
                (vector-set! bands l1 orange-stained-clay)))
        (loop (for i <fx> from 0 below i2)
              (let ((j (+ (randomInt rand 3) 1))
                    (k (randomInt rand 64)))
                (loop (for l <fx> init 0 test (and (< (+ k l) 64) (< l j)) iter (+ l 1))
                      (vector-set! bands (+ k l) yellow-stained-clay))))
        (loop (for k2 <fx> from 0 below j2)
              (let ((i3 (+ (randomInt rand 3) 2))
                    (l3 (randomInt rand 64)))
                (loop (for i1 <fx> init 0 test (and (< (+ l3 i1) 64) (< i1 i3)) iter (+ i1 1))
                      (vector-set! bands (+ l3 i1) brown-stained-clay))))
        (loop (for j3 <fx> from 0 below l2)
              (let ((i4 (+ (randomInt rand 3) 1))
                    (k4 (randomInt rand 64)))
                (loop (for j1 <fx> init 0 test (and (< (+ k4 j1) 64) (< j1 i4)) iter (+ j1 1))
                      (vector-set! bands (+ k4 j1) red-stained-clay))))
        (loop (for l4 from 0 below k3)
              (do
                    (increase! j4 (+ (randomInt rand 16) 4))
                  (when (< j4 64)
                    (vector-set! bands j4 white-stained-clay)
                    (when (and (> j4 1) (randomBool rand))
                      (vector-set! bands (- j4 1) silver-stained-clay))
                    (when (and (< j4 63) (randomBool rand))
                      (vector-set! bands (+ j4 1) silver-stained-clay))))))))
  
  
  (method override (replace-blocks x z rand block-ref block-set! blockstate-set!)
    (unless bands
      (generate-bands))
    (let ((flag <bool> (randomBool rand))
          (l <fx> -1)
          (flag1 <bool> #f))
      (loop (for y from 255 downto 0)
            (if (< y (randomInt rand 5))
                (block-set! x y z 7)
              (let ((iblockstate1 (block-ref x y z)))
                (if (= iblockstate1 0)
                    (set! l -1)
                  (when (= iblockstate1 1)
                    (if (= l -1) ;; i. e. there is air above this stone block
                        (begin
                          (set! flag1 #f)
                          (set! l (+ 3 (max 0 (- y 63))))
                          (cond ((< y 62)
                                 (blockstate-set! x y z orange-stained-clay))
                                ((<= y 69)
                                 (blockstate-set! x y z top)
                                 (set! flag1 #t))
                                (else
                                 (let ((iblockstate2 orange-stained-clay))
                                   (when (and (>= y 64) (<= y 127))
                                     (set! iblockstate2 (if #f hardened-clay (vector-ref bands (modulo y 64)))))
                                   (blockstate-set! x y z iblockstate2)))))
                      (when (> l 0)
                        (decrease! l)
                        (blockstate-set! x y z (if flag1 orange-stained-clay (vector-ref bands (modulo y 64))))))))))))))


(class BiomeTaiga extends Biome
  
  
  (method override (setup-decorator)
    (set-trees-per-chunk~ decorator 10))
  
  
  (method override (get-tree-generation rand) <fx>
    2)
  
  
  (method override (replace-blocks x z rand block-ref block-set! blockstate-set!)
    (let ((replace-amount -1))
      (let (iter (y 255))
        (if (<= y (randomInt rand 5))
            (block-set! x y z 7)
          (let ((block-id <fx> (block-ref x y z)))
            (if (= block-id 0)
                (set! replace-amount -1)
              (when (= block-id 1)
                (if (= replace-amount -1)
                    (begin
                      (when (and (< y 255) (< temperature 0.) (= (block-ref x (+ y 1) z) 0))
                        (blockstate-set! x (+ y 1) z 1327))
                      (blockstate-set! x y z top)
                      (set! replace-amount (randomIntBetween rand 3 5)))
                  (when (> replace-amount 0)
                    (blockstate-set! x y z fill)
                    (decrease! replace-amount)))))))
        (when (> y 0)
          (iter (- y 1)))))))


(class BiomePlains extends Biome
  
  
  (method override (setup-decorator)
    (set-grass-per-chunk~ decorator 10)))


(class BiomeForest extends Biome
  
  
  (method override (setup-decorator)
    (set-trees-per-chunk~ decorator 10)
    (set-grass-per-chunk~ decorator 2))
  
  
  (method override (get-tree-generation rand) <fx>
    (if (and (neq? type 'birch) (/= (randomInt rand 5) 0))
        (if (= (randomInt rand 10) 0)
            1
          0)
      3)))


(class BiomeHills extends Biome
  
  
  (method override (setup-decorator)
    (set-trees-per-chunk~ decorator 1)))


(class BiomeOcean extends Biome
  )

(class BiomeDesert extends Biome
  )

(class BiomeSwamp extends Biome
  )

(class BiomeRiver extends Biome
  )

(class BiomeHell extends Biome
  )

(class BiomeEnd extends Biome
  )

(class BiomeSnow extends Biome
  
  
  (method override (replace-blocks x z rand block-ref block-set! blockstate-set!)
    (let ((replace-amount -1))
      (let (iter (y 255))
        (if (<= y (randomInt rand 5))
            (block-set! x y z 7)
          (let ((block-id <fx> (block-ref x y z)))
            (if (= block-id 0)
                (set! replace-amount -1)
              (when (= block-id 1)
                (if (= replace-amount -1)
                    (begin
                      (when (and (< y 255) (= (block-ref x (+ y 1) z) 0))
                        (blockstate-set! x (+ y 1) z 1327))
                      (blockstate-set! x y z top)
                      (set! replace-amount (randomIntBetween rand 3 5)))
                  (when (> replace-amount 0)
                    (blockstate-set! x y z fill)
                    (decrease! replace-amount)))))))
        (when (> y 0)
          (iter (- y 1)))))))

(class BiomeMushroomIsland extends Biome
  )

(class BiomeJungle extends Biome
  )

(class BiomeBeach extends Biome
  )

(class BiomeStoneBeach extends Biome
  )

(class BiomeSavanna extends Biome
  )

(class BiomeForestMutated extends Biome
  )

(class BiomeSavannaMutated extends Biome
  )

@not-necessary-for-now
(class BiomeVoid extends Biome
  )


;;;
;;;; Biomes
;;;


(define-biome Ocean                BiomeOcean          "Ocean"                        0  Gravel       Gravel            (0 0 112) base: -1.0 variation: 0.1)
(define-biome Plains               BiomePlains         "Plains"                       1  Grass        Dirt              (141 179 96) base: 0.125 variation: 0.05 temperature: 0.8 rain: 0.4)
(define-biome Desert               BiomeDesert         "Desert"                       2  Sand         Sand              (250 148 24) base: 0.125 variation: 0.05 temperature: 2.0 rain: 0.0)
(define-biome ExtremeHills         BiomeHills          "Extreme Hills"                3  Grass        Dirt              (96 96 96) base: 1.0 variation: 0.5 temperature: 0.2 rain: 0.3)
(define-biome Forest               BiomeForest         "Forest"                       4  Grass        Dirt              (5 102 33) temperature: 0.7 rain: 0.8)
(define-biome Taiga                BiomeTaiga          "Taiga"                        5  Grass        Dirt              (11 102 89) base: 0.2 variation: 0.2 temperature: -0.25 rain: 0.8)
(define-biome Swampland            BiomeSwamp          "Swampland"                    6  Grass        Dirt              (7 249 178) base: -0.2 variation: 0.1 temperature: 0.8 rain: 0.9)
(define-biome River                BiomeRiver          "River"                        7  Sand         Sand              (0 0 255) base: -0.5 variation: 0.0)
(define-biome Hell                 BiomeHell           "Hell"                         8  Grass        Dirt              (255 0 0) temperature: 2.0 rain: 0.0)
(define-biome Sky                  BiomeEnd            "End"                          9  Grass        Dirt              (128 128 255))
(define-biome FrozenOcean          BiomeOcean          "Frozen Ocean"                10  Gravel       Gravel            (144 144 160) base: -1.0 variation: 0.1 temperature: 0.0 rain: 0.5)
(define-biome FrozenRiver          BiomeRiver          "Frozen River"                11  Grass        Dirt              (160 160 255) base: -0.5 variation: 0.0 temperature: 0.0 rain: 0.5)
(define-biome IcePlains            BiomeSnow           "Ice Plains"                  12  Grass        Dirt              (255 255 255) base: 0.125 variation: 0.05 temperature: 0.0 rain: 0.5)
(define-biome IceMountains         BiomeSnow           "Ice Mountains"               13  Grass        Dirt              (160 160 160) base: 0.45 variation: 0.3 temperature: 0.0 rain: 0.5)
(define-biome MushroomIsland       BiomeMushroomIsland "Mushroom Island"             14  Mycelium     Dirt              (255 0 255) base: 0.2 variation: 0.3 temperature: 0.9 rain: 1.0)
(define-biome MushroomIslandShore  BiomeMushroomIsland "Mushroom Island Shore"       15  Mycelium     Dirt              (160 0 255) base: 0.0 variation: 0.025 temperature: 0.9 rain: 1.0)
(define-biome Beach                BiomeBeach          "Beach"                       16  Sand         Sand              (250 222 85) base: 0.0 variation: 0.025 temperature: 0.8 rain: 0.4)
(define-biome DesertHills          BiomeDesert         "Desert Hills"                17  Sand         Sand              (210 95 18) base: 0.45 variation: 0.3 temperature: 2.0 rain: 0.0)
(define-biome ForestHills          BiomeForest         "Forest Hills"                18  Grass        Dirt              (34 85 28) base: 0.45 variation: 0.3 temperature: 0.7 rain: 0.8)
(define-biome TaigaHills           BiomeTaiga          "Taiga Hills"                 19  Grass        Dirt              (22 57 51) temperature: 0.25 rain: 0.8 base: 0.45 variation: 0.3)
(define-biome ExtremeHillsEdge     BiomeHills          "Extreme Hills Edge"          20  Grass        Dirt              (114 120 154) base: 0.8 variation: 0.3 temperature: 0.2 rain: 0.3)
(define-biome Jungle               BiomeJungle         "Jungle"                      21  Grass        Dirt              (83 123 9) temperature: 0.95 rain: 0.9)
(define-biome JungleHills          BiomeJungle         "Jungle Hills"                22  Grass        Dirt              (44 66 5) base: 0.45 variation: 0.3 temperature: 0.95 rain: 0.9)
(define-biome JungleEdge           BiomeJungle         "Jungle Edge"                 23  Grass        Dirt              (98 139 23) temperature: 0.95 rain: 0.8)
(define-biome DeepOcean            BiomeOcean          "Deep Ocean"                  24  Gravel       Gravel            (0 0 48) base: -1.8 variation: 0.1)
(define-biome StoneBeach           BiomeStoneBeach     "Stone Beach"                 25  Stone        Stone             (162 162 132) base: 0.1 variation: 0.8 temperature: 0.2 rain: 0.3)
(define-biome ColdBeach            BiomeBeach          "Cold Beach"                  26  Sand         Sand              (250 240 192) base: 0.0 variation: 0.025 temperature: 0.05 rain: 0.3)
(define-biome BirchForest          BiomeForest         "Birch Forest"                27  Grass        Dirt              (48 116 68) temperature: 0.6 rain: 0.6)
(define-biome BirchForestHills     BiomeForest         "Birch Forest Hills"          28  Grass        Dirt              (31 95 50) base: 0.45 variation: 0.3 temperature: 0.6 rain: 0.6)
(define-biome RoofedForest         BiomeForest         "Roofed Forest"               29  Grass        Dirt              (64 81 26) temperature: 0.7 rain: 0.8)
(define-biome ColdTaiga            BiomeTaiga          "Cold Taiga"                  30  Grass        Dirt              (49 85 74) base: 0.2 variation: 0.2 temperature: -0.5 rain: 0.4)
(define-biome ColdTaigaHills       BiomeTaiga          "Cold Taiga Hills"            31  Grass        Dirt              (36 63 54) base: 0.45 variation: 0.3 temperature: -0.5 rain: 0.4)
(define-biome MegaTaiga            BiomeTaiga          "Mega Taiga"                  32  Grass        Dirt              (89 102 81) temperature: 0.3 rain: 0.8 base: 0.2 variation: 0.2)
(define-biome MegaTaigaHills       BiomeTaiga          "Mega Taiga Hills"            33  Grass        Dirt              (69 79 62) base: 0.45 variation: 0.3 temperature: 0.3 rain: 0.8)
(define-biome ExtremeHillsPlus     BiomeHills          "Extreme Hills+"              34  Grass        Dirt              (80 112 80) base: 1.0 variation: 0.5 temperature: 0.2 rain: 0.3)
(define-biome Savanna              BiomeSavanna        "Savanna"                     35  Grass        Dirt              (189 178 95) base: 0.125 variation: 0.05 temperature: 1.2 rain: 0.0)
(define-biome SavannaPlateau       BiomeSavanna        "Savanna Plateau"             36  Grass        Dirt              (167 157 100) base: 1.5 variation: 0.025 temperature: 1.0 rain: 0.0)
(define-biome Mesa                 BiomeMesa           "Mesa"                        37  RedSand      OrangeStainedClay (217 69 21) temperature: 2.0 rain: 0.0)
(define-biome MesaPlateauF         BiomeMesa           "Mesa Plateau F"              38  HardenedClay HardenedClay      (176 151 101) base: 1.5 variation: 0.025 temperature: 2.0 rain: 0.0)
(define-biome MesaPlateau          BiomeMesa           "Mesa Plateau"                39  HardenedClay HardenedClay      (202 140 101) base: 1.5 variation: 0.025 temperature: 2.0 rain: 0.0)
@w(define-biome Void               BiomeVoid           "Void"                       127  Grass        Dirt              (0 0 0))
(define-biome SunflowerPlains      BiomePlains         "Sunflower Plains"           129  Grass        Dirt              (141 179 96) base: 0.125 variation: 0.05 temperature: 0.8 rain: 0.4)
(define-biome DesertM              BiomeDesert         "Desert M"                   130  Sand         Sand              (250 148 24) base: 0.225 variation: 0.25 temperature: 2.0 rain: 0.0)
(define-biome ExtremeHillsM        BiomeHills          "Extreme Hills M"            131  Grass        Dirt              (96 96 96) base: 1.0 variation: 0.5 temperature: 0.2 rain: 0.3)
(define-biome FlowerForest         BiomeForest         "Flower Forest"              132  Grass        Dirt              (5 102 33) variation: 0.4 temperature: 0.7 rain: 0.8)
(define-biome TaigaM               BiomeTaiga          "Taiga M"                    133  Grass        Dirt              (11 102 89) base: 0.3 variation: 0.4 temperature: 0.25 rain: 0.8)
(define-biome SwamplandM           BiomeSwamp          "Swampland M"                134  Grass        Dirt              (7 249 178) base: -0.1 variation: 0.3 temperature: 0.8 rain: 0.9)
(define-biome IcePlainsSpikes      BiomeSnow           "Ice Plains Spikes"          140  Snow         Dirt              (140 180 180) base: 0.425 variation: 0.45 temperature: 0.0 rain: 0.5)
(define-biome JungleM              BiomeJungle         "Jungle M"                   149  Grass        Dirt              (83 123 9) base: 0.2 variation: 0.4 temperature: 0.95 rain: 0.9)
(define-biome JungleEdgeM          BiomeJungle         "Jungle Edge M"              151  Grass        Dirt              (98 139 23) base: 0.2 variation: 0.4 temperature: 0.95 rain: 0.8)
(define-biome BirchForestM         BiomeForestMutated  "Birch Forest M"             155  Grass        Dirt              (48 116 68) base: 0.2 variation: 0.4 temperature: 0.6 rain: 0.6)
(define-biome BirchForestHillsM    BiomeForestMutated  "Birch Forest Hills M"       156  Grass        Dirt              (31 95 50) base: 0.55 variation: 0.5 temperature: 0.6 rain: 0.6)
(define-biome RoofedForestM        BiomeForest         "Roofed Forest M"            157  Grass        Dirt              (64 81 26) base: 0.2 variation: 0.4 temperature: 0.7 rain: 0.8)
(define-biome ColdTaigaM           BiomeTaiga          "Cold Taiga M"               158  Grass        Dirt              (49 85 74) base: 0.3 variation: 0.4 temperature: -0.5 rain: 0.4)
(define-biome MegaSpruceTaiga      BiomeTaiga          "Mega Spruce Taiga"          160  Grass        Dirt              (89 102 81) base: 0.2 variation: 0.2 temperature: 0.25 rain: 0.8)
(define-biome MegaSpurceTaigaHills BiomeTaiga          "Mega Spruce Taiga (Hills)"  161  Grass        Dirt              (69 79 62) base: 0.2 variation: 0.2 temperature: 0.25 rain: 0.8)
(define-biome ExtremeHillsPlusM    BiomeHills          "Extreme Hills+ M"           162  Grass        Dirt              (80 112 80) base: 1.0 variation: 0.5 temperature: 0.2 rain: 0.3)
(define-biome SavannaM             BiomeSavannaMutated "Savanna M"                  163  Grass        Dirt              (189 178 95) base: 0.3625 variation: 1.225 temperature: 1.1 rain: 0.0)
(define-biome SavannaPlateauM      BiomeSavannaMutated "Savanna Plateau M"          164  Grass        Dirt              (167 157 100) base: 1.05 variation: 1.2125001 temperature: 1.0 rain: 0.0)
(define-biome MesaBryce            BiomeMesa           "Mesa (Bryce)"               165  HardenedClay HardenedClay      (217 69 21) temperature: 2.0 rain: 0.0)
(define-biome MesaPlateauFM        BiomeMesa           "Mesa Plateau F M"           166  HardenedClay HardenedClay      (176 151 101) base: 0.45 variation: 0.3 temperature: 2.0 rain: 0.0)
(define-biome MesaPlateauM         BiomeMesa           "Mesa Plateau M"             167  HardenedClay HardenedClay      (202 140 101) base: 0.45 variation: 0.3 temperature: 2.0 rain: 0.0)


;;;
;;;; Regions
;;;


(definition public Warm-Biomes <vector>
  (vector Desert Desert Desert Savanna Savanna Plains))

(definition public Medium-Biomes <vector>
  (vector Forest RoofedForest ExtremeHills Plains BirchForest Swampland))

(definition public Cold-Biomes <vector>
  (vector Forest ExtremeHills Taiga Plains))

(definition public Ice-Biomes <vector>
  (vector IcePlains IcePlains IcePlains ColdTaiga)))
