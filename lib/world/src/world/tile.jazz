;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Tiles
;;;


(module world.tile jazz


(import (jazz.geometry)
        (jazz.graphic)
        (jazz.graphic.opengl.glew)
        (jazz.io)
        (jazz.jml)
        (jazz.library)
        (jazz.literals)
        (jazz.media)
        (jazz.network)
        (jazz.platform)
        (jazz.platform.cairo)
        (jazz.runtime)
        (jazz.system)
        (jazz.ui)
        (jazz.ui.dialog)
        (jazz.ui.window)
        (time)
        (world)
        (world.autoload)
        (world.element)
        (world.face)
        (world.foreign)
        (world.geometry)
        (world.texture)
        (world.triangle)
        (world.window)
        (world.client.window))


;;;
;;;; Tile
;;;


(class Tile extends Element
  
  
  (method override (prepare rest)
    (nextmethod rest)
    (set-color {Color red: 134 green: 82 blue: 1}))
  
  
  ;;;
  ;;;; Faces
  ;;;
  
  
  (method (image-coordinates image)
    (let ((rect (image-rect~ (get-texture-atlas~ world) image)))
      (values (get-left~ rect)
              (get-top~ rect)
              (get-right~ rect)
              (get-bottom~ rect)))))


;;;
;;;; Triangle Tile
;;;


(class Triangle-Tile extends Tile
  
  
  (property v1    initialize #f accessors generate)
  (property v2    initialize #f accessors generate)
  (property v3    initialize #f accessors generate)
  (property image initialize #f accessors generate)
  
  
  (method override (prepare rest)
    (nextmethod rest)
    (set! x 0.)
    (set! y 0.)
    (set! z 0.)
    (set! width 5.)
    (set! height 5.)
    (set! depth 5.)
    (set-color {Color red: 134 green: 82 blue: 1}))
  
  
  (method override (finish rest)
    (nextmethod rest)
    (set-position (triangle-center v1 v2 v3)))
  
  
  (method override (element-faces)
    (let ((default-image (get-default-image~ world)))
      (receive (tl tt tr tb) (image-coordinates (or image default-image))
        (list
          (make-face image
                     position
                     (if (> (vertex-x v1) (vertex-x v2))
                         (make-triangle (plane-normal v1 v2 v3)
                                        v1 v2 v3
                                        (vertex tl tb 1.) (vertex tr tb 1.) (vertex tr tt 1.))
                       (make-triangle (plane-normal v1 v2 v3)
                                      v1 v2 v3
                                      (vertex tr tt 1.) (vertex tl tt 1.) (vertex tl tb 1.))))))))
  
  
  (method override (update-face-texture face texture)
    (let ((designer (get-designer~ zone)))
      (set-property~ designer self 'image texture)
      (reset-faces)
      (car (get-faces))))
  
  
  (method override (draw-3d)
    (glColor4f red green blue alpha)
    (glBegin GL_TRIANGLES)
    (glVertex3f (vertex-x v1) (vertex-y v1) (vertex-z v1))
    (glVertex3f (vertex-x v2) (vertex-y v2) (vertex-z v2))
    (glVertex3f (vertex-x v3) (vertex-y v3) (vertex-z v3))
    (glEnd))
  
  
  (method override (draw-target)
    (gl-colorize {Color Red})
    (glLineWidth 2.)
    (glBegin GL_LINE_LOOP)
    (glVertex3f (vertex-x v1) (vertex-y v1) (vertex-z v1))
    (glVertex3f (vertex-x v2) (vertex-y v2) (vertex-z v2))
    (glVertex3f (vertex-x v3) (vertex-y v3) (vertex-z v3))
    (glEnd)))


;;;
;;;; Quad Tile
;;;


(class Quad-Tile extends Tile
  
  
  (property v1    initialize #f accessors generate)
  (property v2    initialize #f accessors generate)
  (property v3    initialize #f accessors generate)
  (property v4    initialize #f accessors generate)
  (property image initialize #f accessors generate)
  
  
  (method override (prepare rest)
    (nextmethod rest)
    (set! x 0.)
    (set! y 0.)
    (set! z 0.)
    (set! width 5.)
    (set! height 5.)
    (set! depth 5.)
    (set-color {Color red: 134 green: 82 blue: 1}))
  
  
  (method override (finish rest)
    (nextmethod rest)
    (set-position (quad-center v1 v2 v3 v4)))
  
  
  (method override (element-faces)
    (let ((normal (plane-normal v1 v2 v3))
          (default-image (get-default-image~ world)))
      (list
        (receive (tl tt tr tb) (image-coordinates (or image default-image))
          (make-face image
                     position
                     (make-triangle normal
                                    v1 v2 v3
                                    (vertex tl tb 1.) (vertex tr tb 1.) (vertex tr tt 1.))
                     (make-triangle normal
                                    v3 v4 v1
                                    (vertex tr tt 1.) (vertex tl tt 1.) (vertex tl tb 1.)))))))
  
  
  (method override (update-face-texture face texture)
    (let ((designer (get-designer~ zone)))
      (set-property~ designer self 'image texture)
      (reset-faces)
      (car (get-faces))))
  
  
  (method override (draw-3d)
    (glColor4f red green blue alpha)
    (glBegin GL_QUADS)
    (glVertex3f (vertex-x v1) (vertex-y v1) (vertex-z v1))
    (glVertex3f (vertex-x v2) (vertex-y v2) (vertex-z v2))
    (glVertex3f (vertex-x v3) (vertex-y v3) (vertex-z v3))
    (glVertex3f (vertex-x v4) (vertex-y v4) (vertex-z v4))
    (glEnd))
  
  
  (method override (draw-target)
    (gl-colorize {Color Red})
    (glLineWidth 2.)
    (glBegin GL_LINE_LOOP)
    (glVertex3f (vertex-x v1) (vertex-y v1) (vertex-z v1))
    (glVertex3f (vertex-x v2) (vertex-y v2) (vertex-z v2))
    (glVertex3f (vertex-x v3) (vertex-y v3) (vertex-z v3))
    (glVertex3f (vertex-x v4) (vertex-y v4) (vertex-z v4))
    (glEnd)))


;;;
;;;; Square Tile
;;;


(class Square-Tile extends Quad-Tile
  
  
  (method override (element-faces)
    (let ((default-image (get-default-image~ world)))
      (list
        (receive (tl tt tr tb) (image-coordinates default-image)
          (let ((normal (plane-normal v1 v2 v3)))
            (make-face #f
                       position
                       (make-triangle normal
                                      v1 v2 v3
                                      (vertex 0. 1. 1.) (vertex 1. 1. 1.) (vertex 1. 0. 1.))
                       (make-triangle normal
                                      v3 v4 v1
                                      (vertex 1. 0. 1.) (vertex 0. 0. 1.) (vertex 0. 1. 1.)))))
        (receive (tl tt tr tb) (image-coordinates default-image)
          (let ((normal (plane-normal v3 v2 v1)))
            (make-face #f
                       position
                       (make-triangle normal
                                      v3 v2 v1
                                      (vertex 0. 1. 1.) (vertex 1. 1. 1.) (vertex 1. 0. 1.))
                       (make-triangle normal
                                      v1 v4 v3
                                      (vertex 1. 0. 1.) (vertex 0. 0. 1.) (vertex 0. 1. 1.))))))))))
