;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Tiles
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2013
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.tile jazz


(import (jazz.geometry)
        (jazz.graphic)
        (jazz.graphic.opengl.glew)
        (jazz.io)
        (jazz.jml)
        (jazz.library)
        (jazz.literals)
        (jazz.media)
        (jazz.network)
        (jazz.platform)
        (jazz.platform.cairo)
        (jazz.runtime)
        (jazz.system)
        (jazz.ui)
        (jazz.ui.dialog)
        (jazz.ui.window)
        (time)
        (world)
        (world.autoload)
        (world.dye)
        (world.dyes)
        (world.element)
        (world.face)
        (world.foreign)
        (world.geometry)
        (world.opengl)
        (world.polygon)
        (world.quad)
        (world.syntax (phase syntax))
        (world.texture)
        (world.triangle))


;;;
;;;; Tiles
;;;


(definition tiles <table>
  (make-table test: eq?))


(definition public (registered-tiles)
  tiles)

(definition public (registered-tile name)
  (let ((generate/model (table-ref tiles name #f)))
    (if (procedure? generate/model)
        (let ((model (generate/model)))
          (table-set! tiles name model)
          model)
      generate/model)))

(definition public (register-tile name generate)
  (table-set! tiles name generate))


;;;
;;;; Image
;;;


(definition public (image-coordinates image)
  (let ((world (current-world)))
    (if (get-tile-program-atlas?~ world)
        (image-rect~ (get-tile-atlas~ world) image)
      (uv 0. 0. 1. 1. 0.))))


;;;
;;;; Tile
;;;


(class Tile extends Element
  
  
  (slot model              initialize #f getter generate)
  (slot matrix <f64vector> initialize (make-identity-matrix) getter generate)
  
  
  (method override (prepare rest)
    (nextmethod rest)
    (set-color (dye .525 .321 .004 1.)))
  
  
  (method public (set-model mdl)
    (set! model mdl)
    (update-radiuses))
  
  
  (method override (position-update)
    (nextmethod)
    (update-matrix))
  
  
  (method override (scale-update)
    (nextmethod)
    (update-radiuses)
    (update-matrix))
  
  
  (method (update-radiuses)
    (when model
      (let ((bounds (get-bounds~ model)))
        (when bounds
          (set-radiuses (vertex* (cuboid-radiuses bounds) scale))))))
  
  
  (method override (update-matrix)
    (matrix-multiply! matrix (make-translation-matrix& (get-x) (get-y) (get-z)) (make-scaling-matrix& (vertex-x scale) (vertex-y scale) (vertex-z scale)))
    ;; needs cleanup
    (center-update))
  
  
  (method override (element-faces)
    (if (not model)
        (nextmethod)
      (map (lambda (face poly)
             (make-face (get-texture~ face) (get-texture-coordinates~ face) (get-texture-depth~ face) poly))
           (get-faces~ model)
           (element-polygons))))
  
  
  (method override (element-polygons)
    (if (not model)
        (nextmethod)
      (let ((polygons (get-polygons~ model))
            (queue (new-queue)))
        (for (i 0 (/ (f64vector-length polygons) polygon-float-size))
             (let ((offset (* i polygon-float-size)))
               (let ((poly (if (nan? (f64vector-ref polygons (+ offset 12)))
                               (make-triangle self (make-zero-vertex) (make-zero-vertex) (make-zero-vertex))
                             (make-quad self (make-zero-vertex) (make-zero-vertex) (make-zero-vertex) (make-zero-vertex)))))
                 (enqueue queue (polygon-extract!~ poly self polygons offset matrix)))))
        (queue-list queue))))
  
  
  #; ;; are we modyfing one tile or the model???
  (method override (update-face-texture face face-rank texture)
    (let ((faces (get-faces~ model)))
      (let ((face (list-ref faces face-rank)))
        )))
  
  
  (method (draw-tile)
    (let ((world (current-world)))
      (let ((mesh (get-mesh~ model))
            (program (find-mesh-program~ world (entity-program))))
        (use~ program)
        (bind-render-uniforms~ program (get-material~ mesh) matrix)
        (bind-uniforms~ program mesh matrix #f)
        (draw-mesh~ program mesh)
        (unbind-uniforms~ program)
        (unbind-render-uniforms~ program)
        (unuse~ program))))
  
  
  (method protected virtual (entity-program)
    'dynamic-phong))


;;;
;;;; Triangle Tile
;;;


(class Triangle-Tile extends Tile
  
  
  (property v1     initialize #f accessors generate)
  (property v2     initialize #f accessors generate)
  (property v3     initialize #f accessors generate)
  (property image  initialize #f accessors generate)
  
  
  (method override (prepare rest)
    (nextmethod rest)
    (set-radiuses (vertex .5 .5 .5))
    (set-color (dye .525 .321 .004 1.)))
  
  
  (method override (finish rest)
    (nextmethod rest)
    (set-position (triangle-center v1 v2 v3)))
  
  
  (method override (element-faces)
    (let ((world (current-world)))
      (let ((default-image (get-default-image~ world)))
        (let ((image (or image default-image)))
          (let ((uv (image-coordinates image)))
            (let ((tl (uv-left uv))
                  (tt (uv-top uv))
                  (tr (uv-right uv))
                  (tb (uv-bottom uv))
                  (texture-depth (uv-depth uv)))
              (list
                (if (> (vertex-x v1) (vertex-x v2))
                    (make-face image
                               (f32vector tl tb tr tb tr tt)
                               texture-depth
                               (make-triangle self
                                              v1 v2 v3))
                  (make-face image
                             (f32vector tr tt tl tt tl tb)
                             texture-depth
                             (make-triangle self
                                            v1 v2 v3))))))))))
  
  
  (method override (update-face-texture face face-rank texture)
    (let ((zone (current-zone)))
      (let ((designer (get-designer~ zone)))
        (set-property~ designer self 'image texture))))
  
  
  (method override (draw-3d)
    (gl-colorize-dye color)
    (glBegin GL_TRIANGLES)
    (glVertex3f (vertex-x v1) (vertex-y v1) (vertex-z v1))
    (glVertex3f (vertex-x v2) (vertex-y v2) (vertex-z v2))
    (glVertex3f (vertex-x v3) (vertex-y v3) (vertex-z v3))
    (glEnd))
  
  
  (method override (draw-target dye)
    (gl-colorize-dye dye)
    (glLineWidth 2.)
    (glDisable GL_LIGHTING)
    (glBegin GL_LINE_LOOP)
    (glVertex3f (vertex-x v1) (vertex-y v1) (vertex-z v1))
    (glVertex3f (vertex-x v2) (vertex-y v2) (vertex-z v2))
    (glVertex3f (vertex-x v3) (vertex-y v3) (vertex-z v3))
    (glEnd)
    (glEnable GL_LIGHTING)
    (glLineWidth 1.)))


;;;
;;;; Quad Tile
;;;


(class Quad-Tile extends Tile
  
  
  (property v1    initialize #f accessors generate)
  (property v2    initialize #f accessors generate)
  (property v3    initialize #f accessors generate)
  (property v4    initialize #f accessors generate)
  (property image initialize #f accessors generate)
  
  
  (method override (prepare rest)
    (nextmethod rest)
    (set-radiuses (vertex .5 .5 .5))
    (set-color (dye .525 .321 .004 1.)))
  
  
  (method override (finish rest)
    (nextmethod rest)
    (set-position (quad-center v1 v2 v3 v4)))
  
  
  (method override (element-faces)
    (let ((world (current-world)))
      (let ((default-image (get-default-image~ world)))
        (list
          (let ((image (or image default-image)))
            (let ((uv (image-coordinates image)))
              (let ((tl (uv-left uv))
                    (tt (uv-top uv))
                    (tr (uv-right uv))
                    (tb (uv-bottom uv))
                    (texture-depth (uv-depth uv)))
                (make-face image
                           (f32vector tl tb tr tb tr tt tl tt)
                           texture-depth
                           (make-quad self
                                      v1 v2 v3 v4)))))))))
  
  
  (method override (update-face-texture face face-rank texture)
    (let ((zone (current-zone)))
      (let ((designer (get-designer~ zone)))
        (set-property~ designer self 'image texture))))
  
  
  (method override (draw-3d)
    (gl-colorize-dye color)
    (glBegin GL_QUADS)
    (glVertex3f (vertex-x v1) (vertex-y v1) (vertex-z v1))
    (glVertex3f (vertex-x v2) (vertex-y v2) (vertex-z v2))
    (glVertex3f (vertex-x v3) (vertex-y v3) (vertex-z v3))
    (glVertex3f (vertex-x v4) (vertex-y v4) (vertex-z v4))
    (glEnd))
  
  
  (method override (draw-target dye)
    (gl-colorize-dye dye)
    (glLineWidth 2.)
    (glDisable GL_LIGHTING)
    (glBegin GL_LINE_LOOP)
    (glVertex3f (vertex-x v1) (vertex-y v1) (vertex-z v1))
    (glVertex3f (vertex-x v2) (vertex-y v2) (vertex-z v2))
    (glVertex3f (vertex-x v3) (vertex-y v3) (vertex-z v3))
    (glVertex3f (vertex-x v4) (vertex-y v4) (vertex-z v4))
    (glEnd)
    (glEnable GL_LIGHTING)
    (glLineWidth 1.)))


;;;
;;;; Square Tile
;;;


(class Square-Tile extends Quad-Tile
  
  
  (method override (element-faces)
    (let ((world (current-world)))
      (let ((default-image (get-default-image~ world)))
        (list
          (let ((image (or image default-image)))
            (let ((uv (image-coordinates image)))
              (let ((tl (uv-left uv))
                    (tt (uv-top uv))
                    (tr (uv-right uv))
                    (tb (uv-bottom uv))
                    (texture-depth (uv-depth uv)))
                (make-face image
                           (f32vector tl tb tr tb tr tt tl tt)
                           texture-depth
                           (make-quad self
                                      v1 v2 v3 v4)))))
          (let ((image (or image default-image)))
            (let ((uv (image-coordinates image)))
              (let ((tl (uv-left uv))
                    (tt (uv-top uv))
                    (tr (uv-right uv))
                    (tb (uv-bottom uv))
                    (texture-depth (uv-depth uv)))
                (make-face image
                           (f32vector tr tt tr tb tl tb tl tt)
                           texture-depth
                           (make-quad self
                                      v4 v3 v2 v1)))))))))))
