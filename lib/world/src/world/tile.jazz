;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Tiles
;;;


(module world.tile jazz


(import (jazz.geometry)
        (jazz.graphic)
        (jazz.graphic.opengl.glew)
        (jazz.io)
        (jazz.jml)
        (jazz.library)
        (jazz.literals)
        (jazz.media)
        (jazz.network)
        (jazz.platform)
        (jazz.platform.cairo)
        (jazz.runtime)
        (jazz.system)
        (jazz.ui)
        (jazz.ui.dialog)
        (jazz.ui.window)
        (time)
        (world)
        (world.autoload)
        (world.dye)
        (world.dyes)
        (world.element)
        (world.face)
        (world.foreign)
        (world.geometry)
        (world.opengl)
        (world.syntax (phase syntax))
        (world.texture)
        (world.triangle)
        (world.window)
        (world.client.window))


;;;
;;;; Tile
;;;


(class Tile extends Element
  
  
  (method override (prepare rest)
    (nextmethod rest)
    (set-color (dye .525 .321 .004 1.)))
  
  
  ;;;
  ;;;; Faces
  ;;;
  
  
  (method (image-coordinates image)
    (let ((world (current-world)))
      (if (get-tile-program-atlas?~ world)
          (let ((rect (image-rect~ (get-tile-atlas~ world) image)))
            (values (get-left~ rect)
                    (get-top~ rect)
                    (get-right~ rect)
                    (get-bottom~ rect)))
        (values 0. 0. 1. 1.)))))


;;;
;;;; Triangle Tile
;;;


(class Triangle-Tile extends Tile
  
  
  (property v1     initialize #f accessors generate)
  (property v2     initialize #f accessors generate)
  (property v3     initialize #f accessors generate)
  (property n1     initialize #f accessors generate)
  (property n2     initialize #f accessors generate)
  (property n3     initialize #f accessors generate)
  (property normal initialize #f accessors generate)
  (property image  initialize #f accessors generate)
  
  
  (method override (prepare rest)
    (nextmethod rest)
    (set-radiuses (vertex 2.5 2.5 2.5))
    (set-color (dye .525 .321 .004 1.)))
  
  
  (method override (finish rest)
    (nextmethod rest)
    (set-position (triangle-center v1 v2 v3))
    (set-normal (plane-normal v1 v2 v3)))
  
  
  (method override (element-faces)
    (let ((world (current-world)))
      (let ((default-image (get-default-image~ world)))
        (receive (tl tt tr tb) (image-coordinates (or image default-image))
          (list
            (make-face image
                       position
                       (if (> (vertex-x v1) (vertex-x v2))
                           (make-smooth-triangle normal
                                                 v1 v2 v3
                                                 (vertex tl tb 1.) (vertex tr tb 1.) (vertex tr tt 1.)
                                                 n1 n2 n3)
                         (make-smooth-triangle normal
                                               v1 v2 v3
                                               (vertex tr tt 1.) (vertex tl tt 1.) (vertex tl tb 1.)
                                               n1 n2 n3))))))))
  
  
  (method override (update-face-texture face texture)
    (let ((zone (current-zone)))
      (let ((designer (get-designer~ zone)))
        (set-property~ designer self 'image texture)
        (reset-faces)
        (car (get-faces)))))
  
  
  (method override (draw-3d)
    (gl-colorize-dye color)
    (glBegin GL_TRIANGLES)
    (glVertex3f (vertex-x v1) (vertex-y v1) (vertex-z v1))
    (glVertex3f (vertex-x v2) (vertex-y v2) (vertex-z v2))
    (glVertex3f (vertex-x v3) (vertex-y v3) (vertex-z v3))
    (glEnd))
  
  
  (method override (draw-target)
    (gl-colorize-dye red-dye)
    (glLineWidth 2.)
    (glBegin GL_LINE_LOOP)
    (glVertex3f (vertex-x v1) (vertex-y v1) (vertex-z v1))
    (glVertex3f (vertex-x v2) (vertex-y v2) (vertex-z v2))
    (glVertex3f (vertex-x v3) (vertex-y v3) (vertex-z v3))
    (glEnd)
    (glLineWidth 1.)))


;;;
;;;; Quad Tile
;;;


(class Quad-Tile extends Tile
  
  
  (property v1    initialize #f accessors generate)
  (property v2    initialize #f accessors generate)
  (property v3    initialize #f accessors generate)
  (property v4    initialize #f accessors generate)
  (property image initialize #f accessors generate)
  
  
  (method override (prepare rest)
    (nextmethod rest)
    (set-radiuses (vertex 2.5 2.5 2.5))
    (set-color (dye .525 .321 .004 1.)))
  
  
  (method override (finish rest)
    (nextmethod rest)
    (set-position (quad-center v1 v2 v3 v4)))
  
  
  (method override (element-faces)
    (let ((world (current-world)))
      (let ((normal (plane-normal v1 v2 v3))
            (default-image (get-default-image~ world)))
        (list
          (receive (tl tt tr tb) (image-coordinates (or image default-image))
            (make-face image
                       position
                       (make-triangle normal
                                      v1 v2 v3
                                      (vertex tl tb 1.) (vertex tr tb 1.) (vertex tr tt 1.))
                       (make-triangle normal
                                      v3 v4 v1
                                      (vertex tr tt 1.) (vertex tl tt 1.) (vertex tl tb 1.))))))))
  
  
  (method override (update-face-texture face texture)
    (let ((zone (current-zone)))
      (let ((designer (get-designer~ zone)))
        (set-property~ designer self 'image texture)
        (reset-faces)
        (car (get-faces)))))
  
  
  (method override (draw-3d)
    (gl-colorize-dye color)
    (glBegin GL_QUADS)
    (glVertex3f (vertex-x v1) (vertex-y v1) (vertex-z v1))
    (glVertex3f (vertex-x v2) (vertex-y v2) (vertex-z v2))
    (glVertex3f (vertex-x v3) (vertex-y v3) (vertex-z v3))
    (glVertex3f (vertex-x v4) (vertex-y v4) (vertex-z v4))
    (glEnd))
  
  
  (method override (draw-target)
    (gl-colorize-dye red-dye)
    (glLineWidth 2.)
    (glBegin GL_LINE_LOOP)
    (glVertex3f (vertex-x v1) (vertex-y v1) (vertex-z v1))
    (glVertex3f (vertex-x v2) (vertex-y v2) (vertex-z v2))
    (glVertex3f (vertex-x v3) (vertex-y v3) (vertex-z v3))
    (glVertex3f (vertex-x v4) (vertex-y v4) (vertex-z v4))
    (glEnd)))


;;;
;;;; Square Tile
;;;


(class Square-Tile extends Quad-Tile
  
  
  (method override (element-faces)
    (let ((world (current-world)))
      (let ((default-image (get-default-image~ world)))
        (list
          (receive (tl tt tr tb) (image-coordinates (or image default-image))
            (let ((normal (plane-normal v1 v2 v3)))
              (make-face #f
                         position
                         (make-triangle normal
                                        v1 v2 v3
                                        (vertex tl tb 1.) (vertex tr tb 1.) (vertex tr tt 1.))
                         (make-triangle normal
                                        v3 v4 v1
                                        (vertex tr tt 1.) (vertex tl tt 1.) (vertex tl tb 1.)))))
          (receive (tl tt tr tb) (image-coordinates (or image default-image))
            (let ((normal (plane-normal v3 v2 v1)))
              (make-face #f
                         position
                         (make-triangle normal
                                        v3 v2 v1
                                        (vertex tr tt 1.) (vertex tr tb 1.) (vertex tl tb 1.))
                         (make-triangle normal
                                        v1 v4 v3
                                        (vertex tl tb 1.) (vertex tl tt 1.) (vertex tr tt 1.)))))))))))
