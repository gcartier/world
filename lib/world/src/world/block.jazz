;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; Blocks
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2016
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.block jazz


(import (world)
        (world.autoload)
        (world.draw)
        (world.dye)
        (world.dyes)
        (world.entity)
        (world.face)
        (world.generate)
        (world.generation.base)
        (world.geometry)
        (world.model)
        (world.scriptum)
        (world.settings)
        (world.support)
        (world.syntax (phase syntax)))


;;;
;;;; Block-Model
;;;


(class Block-Model extends Model
  
  
  (slot flat? <bool> initialize #f accessors generate)
  
  
  (method override (block?)
    #t))


;;;
;;;; Block-Entity
;;;


(class Block-Entity extends Entity
  
  
  (property proxy? initialize #f accessors generate)
  
  
  ;; backward compatibility
  (method protected virtual (is-proxy?)
    proxy?)
  
  
  (method override (prepare rest)
    (nextmethod rest)
    (set-model 'Cube)
    (set-color (dye .525 .321 .004 1.)))

  
  (method override (finish rest)
    (nextmethod rest)
    (setup-actions))
  
  
  (method (setup-actions)
    (when (is-proxy?)
      (world.generation:register-block-action position 'power
        (lambda ()
          (let ((script (get-script)))
            (when script
              (let ((handler (get-power~ script)))
                (when handler
                  (running-handler~ script
                    (lambda ()
                      (parameterize ((%%current-event (new Script-Event self (current-seconds))))
                        (handler self))))))))))
      (world.generation:register-block-action position 'unpower
        (lambda ()
          (let ((script (get-script)))
            (when script
              (let ((handler (get-unpower~ script)))
                (when handler
                  (running-handler~ script
                    (lambda ()
                      (parameterize ((%%current-event (new Script-Event self (current-seconds))))
                        (handler self))))))))))))
  
  
  (method override (resolve-model)
    (registered-model model))
  
  
  (method override (element-faces)
    (let ((world (current-world))
          (model (cache-model)))
      (map (lambda (face poly)
             (make-face (get-material~ face) (get-texture-coordinates~ face) (get-texture-depth~ face) poly))
           (get-faces~ model)
           (element-polygons))))
  
  
  (method override (element-polygons)
    (let ((model (cache-model)))
      (polygons-extract self (get-polygons~ model) matrix)))
  
  
  (method (draw-polygons color)
    (for-each (lambda (poly)
                (draw-polygon poly color))
              (element-polygons)))
  
  
  (method (cube-polygons)
    (define (cube-cuboid)
      (let ((x (vertex-x position))
            (y (vertex-y position))
            (z (vertex-z position))
            (radius block-radius))
        (cuboid (- x radius)
                (- y radius)
                (- z radius)
                (+ x radius)
                (+ y radius)
                (+ z radius))))
    
    (let ((queue (new-queue)))
      (iterate-cuboid-quads (cube-cuboid) #f
        (lambda (quad)
          (enqueue queue quad)))
      (queue-list queue)))
  
  
  (method override (draw-target color)
    (for-each (lambda (poly)
                (draw-polygon poly red-dye))
              (cube-polygons)))
  
  
  (method override (target-moveable?)
    #f)
  
  
  (method override (task-name)
    'block)
  
  
  (method override (virtual?)
    (is-proxy?)))


;;;
;;;; Block-Proxy
;;;


;; backward compatibility
(class Block-Proxy extends Block-Entity
  
  
  (method override (is-proxy?)
    #t)))
