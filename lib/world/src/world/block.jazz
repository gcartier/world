;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Blocks
;;;


(module world.block jazz


(import (jazz.geometry)
        (jazz.graphic)
        (jazz.graphic.opengl.glew)
        (jazz.io)
        (jazz.jml)
        (jazz.library)
        (jazz.literals)
        (jazz.media)
        (jazz.network)
        (jazz.platform)
        (jazz.platform.cairo)
        (jazz.runtime)
        (jazz.system)
        (jazz.ui)
        (jazz.ui.dialog)
        (jazz.ui.window)
        (time)
        (world)
        (world.autoload)
        (world.draw)
        (world.dye)
        (world.element)
        (world.face)
        (world.foreign)
        (world.geometry)
        (world.object)
        (world.quad)
        (world.syntax (phase syntax))
        (world.texture)
        (world.tile)
        (world.triangle)
        (world.window)
        (world.client.window))


;;;
;;;; Block
;;;


(class Block extends Tile
  
  
  (property left-image   initialize #f accessors generate)
  (property right-image  initialize #f accessors generate)
  (property bottom-image initialize #f accessors generate)
  (property top-image    initialize #f accessors generate)
  (property back-image   initialize #f accessors generate)
  (property front-image  initialize #f accessors generate)
  
  
  (method override (prepare rest)
    (nextmethod rest)
    (set-radiuses (vertex 2.5 2.5 2.5))
    (set-color (dye .525 .321 .004 1.)))
  
  
  ;;;
  ;;;; Faces
  ;;;
  
  
  (method override (element-faces)
    (let ((world (current-world))
          (bounds (make-cuboid&)))
      (get-bounds! bounds)
      (let ((x (get-x))
            (y (get-y))
            (z (get-z))
            (l (cuboid-left bounds))
            (r (cuboid-right bounds))
            (b (cuboid-bottom bounds))
            (t (cuboid-top bounds))
            (f (cuboid-back bounds))
            (n (cuboid-front bounds))
            (default-image (get-default-image~ world)))
        (list
          ;; front face
          (let ((uv (image-coordinates (or front-image default-image))))
            (let ((tl (uv-left uv))
                  (tt (uv-top uv))
                  (tr (uv-right uv))
                  (tb (uv-bottom uv)))
              (make-face front-image
                         (f32vector tl tt tr tt tr tb tl tb)
                         (make-quad self
                                    (vertex 0. 0. 1.)
                                    (vertex l t n) (vertex r t n) (vertex r b n) (vertex l b n)))))
          ;; back face
          (let ((uv (image-coordinates (or back-image default-image))))
            (let ((tl (uv-left uv))
                  (tt (uv-top uv))
                  (tr (uv-right uv))
                  (tb (uv-bottom uv)))
              (make-face back-image
                         (f32vector tr tt tl tt tl tb tr tb)
                         (make-quad self
                                    (vertex 0. 0. -1.)
                                    (vertex r t f) (vertex l t f) (vertex l b f) (vertex r b f)))))
          ;; left face
          (let ((uv (image-coordinates (or left-image default-image))))
            (let ((tl (uv-left uv))
                  (tt (uv-top uv))
                  (tr (uv-right uv))
                  (tb (uv-bottom uv)))
              (make-face left-image
                         (f32vector tl tt tr tt tr tb tl tb)
                         (make-quad self
                                    (vertex -1. 0. 0.)
                                    (vertex l t f) (vertex l t n) (vertex l b n) (vertex l b f)))))
          ;; right face
          (let ((uv (image-coordinates (or right-image default-image))))
            (let ((tl (uv-left uv))
                  (tt (uv-top uv))
                  (tr (uv-right uv))
                  (tb (uv-bottom uv)))
              (make-face right-image
                         (f32vector tl tt tr tt tr tb tl tb)
                         (make-quad self
                                    (vertex 1. 0. 0.)
                                    (vertex r t n) (vertex r t f) (vertex r b f) (vertex r b n)))))
          ;; top face
          (let ((uv (image-coordinates (or top-image default-image))))
            (let ((tl (uv-left uv))
                  (tt (uv-top uv))
                  (tr (uv-right uv))
                  (tb (uv-bottom uv)))
              (make-face top-image
                         (f32vector tl tb tr tb tr tt tl tt)
                         (make-quad self
                                    (vertex 0. 1. 0.)
                                    (vertex l t f) (vertex r t f) (vertex r t n) (vertex l t n)))))
          ;; bottom face
          (let ((uv (image-coordinates (or bottom-image default-image))))
            (let ((tl (uv-left uv))
                  (tt (uv-top uv))
                  (tr (uv-right uv))
                  (tb (uv-bottom uv)))
              (make-face bottom-image
                         (f32vector tl tt tr tt tr tb tl tb)
                         (make-quad self
                                    (vertex 0. -1. 0.)
                                    (vertex l b n) (vertex r b n) (vertex r b f) (vertex l b f)))))))))
  
  
  @convert
  (method override (update-face-texture face texture)
    (let ((zone (current-zone)))
      (let ((designer (get-designer~ zone))
            (rank (find (element-faces) face return: 'position)))
        (case rank
          ((0) (set-property~ designer self 'front-image texture))
          ((1) (set-property~ designer self 'back-image texture))
          ((2) (set-property~ designer self 'left-image texture))
          ((3) (set-property~ designer self 'right-image texture))
          ((4) (set-property~ designer self 'top-image texture))
          ((5) (set-property~ designer self 'bottom-image texture)))
        (element (element-faces) rank))))))
