;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; Blocks
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.block jazz


(import (jazz.geometry)
        (world)
        (world.autoload)
        (world.draw)
        (world.dye)
        (world.entity)
        (world.face)
        (world.generate)
        (world.material)
        (world.model)
        (world.renderers)
        (world.syntax (phase syntax))
        (world.texture))


;;;
;;;; Block-Model
;;;


(class Block-Model extends Model
  
  
  (slot flat? <bool> initialize #f accessors generate)
  
  
  (method override (block?)
    #t))


;;;
;;;; Block-Entity
;;;


(class Block-Entity extends Entity
  
  
  (method override (prepare rest)
    (nextmethod rest)
    (set-model 'Cube)
    (set-color (dye .525 .321 .004 1.)))
  
  
  (method override (resolve-model)
    (registered-model model))
  
  
  (method override (element-faces)
    (let ((world (current-world))
          (model (cache-model)))
      (map (lambda (face poly)
             (make-face (get-material~ face) (get-texture-coordinates~ face) (get-texture-depth~ face) poly))
           (get-faces~ model)
           (element-polygons))))
  
  
  (method override (element-polygons)
    (let ((model (cache-model)))
      (polygons-extract self (get-polygons~ model) matrix)))
  
  
  (method override (draw-target color)
    (for-each (lambda (poly)
                (draw-polygon poly color))
              (element-polygons)))
  
  
  (method override (target-moveable?)
    #f)))
