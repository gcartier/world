;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Blocks
;;;


(module world.block jazz


(import (jazz.geometry)
        (jazz.graphic)
        (jazz.graphic.opengl.glew)
        (jazz.io)
        (jazz.jml)
        (jazz.library)
        (jazz.literals)
        (jazz.media)
        (jazz.network)
        (jazz.platform)
        (jazz.platform.cairo)
        (jazz.runtime)
        (jazz.system)
        (jazz.ui)
        (jazz.ui.dialog)
        (jazz.ui.window)
        (time)
        (world)
        (world.autoload)
        (world.draw)
        (world.dye)
        (world.element)
        (world.face)
        (world.foreign)
        (world.geometry)
        (world.object)
        (world.syntax (phase syntax))
        (world.texture)
        (world.tile)
        (world.triangle)
        (world.window)
        (world.client.window))


;;;
;;;; Block
;;;


(class Block extends Tile
  
  
  (property left-image   initialize #f accessors generate)
  (property right-image  initialize #f accessors generate)
  (property bottom-image initialize #f accessors generate)
  (property top-image    initialize #f accessors generate)
  (property back-image   initialize #f accessors generate)
  (property front-image  initialize #f accessors generate)
  
  
  (method override (prepare rest)
    (nextmethod rest)
    (set-size (vertex 5. 5. 5.))
    (set-color (dye .525 .321 .004 1.)))
  
  
  ;;;
  ;;;; Faces
  ;;;
  
  
  (method override (element-faces)
    (let ((world (current-world))
          (bounds (make-cuboid&)))
      (get-bounds! bounds)
      (let ((l (cuboid-left bounds))
            (r (cuboid-right bounds))
            (b (cuboid-bottom bounds))
            (t (cuboid-top bounds))
            (f (cuboid-back bounds))
            (n (cuboid-front bounds))
            (default-image (get-default-image~ world)))
        (list
          ;; front face
          (receive (tl tt tr tb) (image-coordinates (or front-image default-image))
            (make-face front-image
                       (vertex (get-x) (get-y) n)
                       (make-triangle (vertex 0. 0. 1.)
                                      (vertex l t n) (vertex r t n) (vertex r b n)
                                      (vertex tl tt 1.) (vertex tr tt 1.) (vertex tr tb 1.))
                       (make-triangle (vertex 0. 0. 1.)
                                      (vertex r b n) (vertex l b n) (vertex l t n)
                                      (vertex tr tb 1.) (vertex tl tb 1.) (vertex tl tt 1.))))
          ;; back face
          (receive (tl tt tr tb) (image-coordinates (or back-image default-image))
            (make-face back-image
                       (vertex (get-x) (get-y) f)
                       (make-triangle (vertex 0. 0. -1.)
                                      (vertex r t f) (vertex l t f) (vertex l b f)
                                      (vertex tr tt 1.) (vertex tl tt 1.) (vertex tl tb 1.))
                       (make-triangle (vertex 0. 0. -1.)
                                      (vertex l b f) (vertex r b f) (vertex r t f)
                                      (vertex tl tb 1.) (vertex tr tb 1.) (vertex tr tt 1.))))
          ;; left face
          (receive (tl tt tr tb) (image-coordinates (or left-image default-image))
            (make-face left-image
                       (vertex l (get-y) (get-z))
                       (make-triangle (vertex -1. 0. 0.)
                                      (vertex l t f) (vertex l t n) (vertex l b n)
                                      (vertex tl tt 1.) (vertex tr tt 1.) (vertex tr tb 1.))
                       (make-triangle (vertex -1. 0. 0.)
                                      (vertex l b n) (vertex l b f) (vertex l t f)
                                      (vertex tr tb 1.) (vertex tl tb 1.) (vertex tl tt 1.))))
          ;; right face
          (receive (tl tt tr tb) (image-coordinates (or right-image default-image))
            (make-face right-image
                       (vertex r (get-y) (get-z))
                       (make-triangle (vertex 1. 0. 0.)
                                      (vertex r t n) (vertex r t f) (vertex r b f)
                                      (vertex tl tt 1.) (vertex tr tt 1.) (vertex tr tb 1.))
                       (make-triangle (vertex 1. 0. 0.)
                                      (vertex r b f) (vertex r b n) (vertex r t n)
                                      (vertex tr tb 1.) (vertex tl tb 1.) (vertex tl tt 1.))))
          ;; top face
          (receive (tl tt tr tb) (image-coordinates (or top-image default-image))
            (make-face top-image
                       (vertex (get-x) t (get-z))
                       (make-triangle (vertex 0. 1. 0.)
                                      (vertex l t f) (vertex r t f) (vertex r t n)
                                      (vertex tl tb 1.) (vertex tr tb 1.) (vertex tr tt 1.))
                       (make-triangle (vertex 0. 1. 0.)
                                      (vertex r t n) (vertex l t n) (vertex l t f)
                                      (vertex tr tt 1.) (vertex tl tt 1.) (vertex tl tb 1.))))
          ;; bottom face
          (receive (tl tt tr tb) (image-coordinates (or bottom-image default-image))
            (make-face bottom-image
                       (vertex (get-x) b (get-z))
                       (make-triangle (vertex 0. -1. 0.)
                                      (vertex l b n) (vertex r b n) (vertex r b f)
                                      (vertex tl tt 1.) (vertex tr tt 1.) (vertex tr tb 1.))
                       (make-triangle (vertex 0. -1. 0.)
                                      (vertex r b f) (vertex l b f) (vertex l b n)
                                      (vertex tr tb 1.) (vertex tl tb 1.) (vertex tl tt 1.))))))))
  
  
  (method override (update-face-texture face texture)
    (let ((zone (current-zone)))
      (let ((designer (get-designer~ zone))
            (rank (position face (get-faces))))
        (case rank
          ((0) (set-property~ designer self 'front-image texture))
          ((1) (set-property~ designer self 'back-image texture))
          ((2) (set-property~ designer self 'left-image texture))
          ((3) (set-property~ designer self 'right-image texture))
          ((4) (set-property~ designer self 'top-image texture))
          ((5) (set-property~ designer self 'bottom-image texture)))
        (reset-faces)
        (element (get-faces) rank))))))
