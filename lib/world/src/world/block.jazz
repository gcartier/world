;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Blocks
;;;


(module world.block jazz


(import (jazz.geometry)
        (jazz.graphic)
        (jazz.graphic.opengl.glew)
        (jazz.io)
        (jazz.jml)
        (jazz.library)
        (jazz.literals)
        (jazz.media)
        (jazz.network)
        (jazz.platform)
        (jazz.platform.cairo)
        (jazz.runtime)
        (jazz.system)
        (jazz.ui)
        (jazz.ui.dialog)
        (jazz.ui.window)
        (time)
        (world)
        (world.autoload)
        (world.client.window)
        (world.face)
        (world.foreign)
        (world.geometry)
        (world.object)
        (world.sprite)
        (world.texture)
        (world.triangle)
        (world.window))


;;;
;;;; Block
;;;


(class Block extends Sprite
  
  
  (property front-image                 initialize #f accessors generate)
  (property back-image                  initialize #f accessors generate)
  (property left-image                  initialize #f accessors generate)
  (property right-image                 initialize #f accessors generate)
  (property top-image                   initialize #f accessors generate)
  (property bottom-image                initialize #f accessors generate)
  
  (slot block-location         <int>    initialize #f accessors generate)
  (slot block-texture-location <int>    initialize #f accessors generate)
  (slot block-shader           <Object> initialize #f accessors generate)
  
  
  (method override (prepare rest)
    (nextmethod rest)
    (set! width 5.)
    (set! height 5.)
    (set! depth 5.)
    (set! block-location (get-block-location~ world))
    (set! block-shader (get-block-shader~ world))
    (set! block-texture-location (get-block-texture-location~ world))
    (set-color (or (get-block-color~ zone) {Color red: 134 green: 82 blue: 1})))
  
  
  ;;;
  ;;;; Faces
  ;;;
  
  
  (method override (sprite-faces)
    (define (image-texture image)
      (let ((rect (get-image~ (get-texture-pack~ world) image)))
        (values (get-left~ rect)
                (get-top~ rect)
                (get-right~ rect)
                (get-bottom~ rect))))
    
    (let ((l (get-left))
          (r (get-right))
          (b (get-bottom))
          (t (get-top))
          (f (get-back))
          (n (get-front)))
      (list
        ;; front face
        (receive (tl tt tr tb) (image-texture front-image)
          (make-face front-image
                     (make-triangle (vertex 0. 0. 1.)
                                    (vertex l t n) (vertex tl tt 1.)
                                    (vertex r t n) (vertex tr tt 1.)
                                    (vertex r b n) (vertex tr tb 1.))
                     (make-triangle (vertex 0. 0. 1.)
                                    (vertex r b n) (vertex tr tb 1.)
                                    (vertex l b n) (vertex tl tb 1.)
                                    (vertex l t n) (vertex tl tt 1.))))
        ;; back face
        (receive (tl tt tr tb) (image-texture back-image)
          (make-face back-image
                     (make-triangle (vertex 0. 0. -1.)
                                    (vertex r t f) (vertex tr tt 1.)
                                    (vertex l t f) (vertex tl tt 1.)
                                    (vertex l b f) (vertex tl tb 1.))
                     (make-triangle (vertex 0. 0. -1.)
                                    (vertex l b f) (vertex tl tb 1.)
                                    (vertex r b f) (vertex tr tb 1.)
                                    (vertex r t f) (vertex tr tt 1.))))
        ;; left face
        (receive (tl tt tr tb) (image-texture left-image)
          (make-face left-image
                     (make-triangle (vertex -1. 0. 0.)
                                    (vertex l t f) (vertex tl tt 1.)
                                    (vertex l t n) (vertex tr tt 1.)
                                    (vertex l b n) (vertex tr tb 1.))
                     (make-triangle (vertex -1. 0. 0.)
                                    (vertex l b n) (vertex tr tb 1.)
                                    (vertex l b f) (vertex tl tb 1.)
                                    (vertex l t f) (vertex tl tt 1.))))
        ;; right face
        (receive (tl tt tr tb) (image-texture right-image)
          (make-face right-image
                     (make-triangle (vertex 1. 0. 0.)
                                    (vertex r t n) (vertex tl tt 1.)
                                    (vertex r t f) (vertex tr tt 1.)
                                    (vertex r b f) (vertex tr tb 1.))
                     (make-triangle (vertex 1. 0. 0.)
                                    (vertex r b f) (vertex tr tb 1.)
                                    (vertex r b n) (vertex tl tb 1.)
                                    (vertex r t n) (vertex tl tt 1.))))
        ;; top face
        (receive (tl tt tr tb) (image-texture top-image)
          (make-face top-image
                     (make-triangle (vertex 0. 1. 0.)
                                    (vertex l t f) (vertex tl tb 1.)
                                    (vertex r t f) (vertex tr tb 1.)
                                    (vertex r t n) (vertex tr tt 1.))
                     (make-triangle (vertex 0. 1. 0.)
                                    (vertex r t n) (vertex tr tt 1.)
                                    (vertex l t n) (vertex tl tt 1.)
                                    (vertex l t f) (vertex tl tb 1.))))
        ;; bottom face
        (receive (tl tt tr tb) (image-texture bottom-image)
          (make-face bottom-image
                     (make-triangle (vertex 0. -1. 0.)
                                    (vertex l b n) (vertex tl tt 1.)
                                    (vertex r b n) (vertex tr tt 1.)
                                    (vertex r b f) (vertex tr tb 1.))
                     (make-triangle (vertex 0. -1. 0.)
                                    (vertex r b f) (vertex tr tb 1.)
                                    (vertex l b f) (vertex tl tb 1.)
                                    (vertex l b n) (vertex tl tt 1.)))))))
  
  
  (method override (update-face-texture face texture)
    (let ((designer (get-designer~ zone))
          (rank (find (get-faces) face return: 'position)))
      (case rank
        ((0) (set-property~ designer self 'front-image texture))
        ((1) (set-property~ designer self 'back-image texture))
        ((2) (set-property~ designer self 'left-image texture))
        ((3) (set-property~ designer self 'right-image texture))
        ((4) (set-property~ designer self 'top-image texture))
        ((5) (set-property~ designer self 'bottom-image texture)))
      (set! faces #f)
      (element (get-faces) rank))))


;;;
;;;; Block-Red
;;;


(class Block-Red extends Block
  
  
  (form
    (<install> color: {Color Red})))


;;;
;;;; Block-Green
;;;


(class Block-Green extends Block
  
  
  (form
    (<install> color: {Color Green})))


;;;
;;;; Block-Blue
;;;


(class Block-Blue extends Block
  
  
  (form
    (<install> color: {Color Blue}))))
