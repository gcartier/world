;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; Blocks
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.block jazz


(import (world)
        (world.autoload)
        (world.context)
        (world.draw)
        (world.dye)
        (world.dyes)
        (world.entity)
        (world.face)
        (world.generate)
        (world.generation.base)
        (world.geometry)
        (world.model)
        (world.scriptum))


;;;
;;;; Block-Model
;;;


(class Block-Model extends Model
  
  
  (method override (block? self)
    #t))


;;;
;;;; Block-Entity
;;;


(class Block-Entity extends Entity
  
  
  (property proxy? initialize #f accessors generate)
  
  
  ;; backward compatibility
  (method protected virtual (is-proxy? self)
    proxy?)
  
  
  (method override (prepare self rest)
    (nextmethod self rest)
    (set-model self 'Cube)
    (set-color self (dye .525 .321 .004 1.)))

  
  (method override (finish self rest)
    (nextmethod self rest)
    (setup-actions self))
  
  
  (method package (setup-actions self)
    (when (is-proxy? self)
      (world.generation:register-block-action position 'power
        (lambda ()
          (let ((script (get-script self)))
            (when script
              (let ((handler (get-power script)))
                (when handler
                  (running-handler script
                    (lambda ()
                      (parameterize ((%%current-event (new Script-Event self (current-seconds))))
                        (handler self))))))))))
      (world.generation:register-block-action position 'unpower
        (lambda ()
          (let ((script (get-script self)))
            (when script
              (let ((handler (get-unpower script)))
                (when handler
                  (running-handler script
                    (lambda ()
                      (parameterize ((%%current-event (new Script-Event self (current-seconds))))
                        (handler self))))))))))))
  
  
  (method override (resolve-model self)
    (values (registered-model model) #f))
  
  
  (method override (element-faces self)
    (let ((world (current-world))
          (model (cache-model self)))
      (map (lambda (face poly)
             (make-face (get-material face) (get-texture-coordinates face) (get-texture-depth face) poly))
           (get-faces model)
           (element-polygons self))))
  
  
  (method override (element-polygons self)
    (let ((model (cache-model self)))
      (polygons-extract self (get-polygons model) matrix)))
  
  
  (method package (draw-polygons self color)
    (for-each (lambda (poly)
                (draw-polygon poly color))
              (element-polygons self)))
  
  
  (method (cube-polygons self)
    (define (cube-cuboid)
      (let ((x (vertex-x position))
            (y (vertex-y position))
            (z (vertex-z position))
            (radius block-radius))
        (cuboid (- x radius)
                (- y radius)
                (- z radius)
                (+ x radius)
                (+ y radius)
                (+ z radius))))
    
    (let ((queue (new-queue)))
      (iterate-cuboid-quads (cube-cuboid) #f
        (lambda (quad)
          (enqueue queue quad)))
      (queue-list queue)))
  
  
  (method override (draw-target self color)
    (for-each (lambda (poly)
                (draw-polygon poly red-dye))
              (cube-polygons self)))
  
  
  (method override (target-moveable? self)
    #f)
  
  
  (method override (task-name self)
    'block)
  
  
  (method override (virtual? self)
    (is-proxy? self)))


;;;
;;;; Block-Proxy
;;;


;; backward compatibility
(class Block-Proxy extends Block-Entity
  
  
  (method override (is-proxy? self)
    #t)))
