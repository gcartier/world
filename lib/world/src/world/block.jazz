;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; Blocks
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2016
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.block jazz


(import (jazz.component)
        (world)
        (world.autoload)
        (world.draw)
        (world.dye)
        (world.dyes)
        (world.entity)
        (world.face)
        (world.generate)
        (world.generation.base)
        (world.geometry)
        (world.material)
        (world.model)
        (world.renderers)
        (world.scripter)
        (world.scripting)
        (world.settings)
        (world.support)
        (world.syntax (phase syntax))
        (world.texture))


;;;
;;;; Block-Model
;;;


(class Block-Model extends Model
  
  
  (slot flat? <bool> initialize #f accessors generate)
  
  
  (method override (block?)
    #t))


;;;
;;;; Block-Entity
;;;


(class Block-Entity extends Entity
  
  
  (method override (prepare rest)
    (nextmethod rest)
    (set-model 'Cube)
    (set-color (dye .525 .321 .004 1.)))
  
  
  (method override (resolve-model)
    (registered-model model))
  
  
  (method override (element-faces)
    (let ((world (current-world))
          (model (cache-model)))
      (map (lambda (face poly)
             (make-face (get-material~ face) (get-texture-coordinates~ face) (get-texture-depth~ face) poly))
           (get-faces~ model)
           (element-polygons))))
  
  
  (method override (element-polygons)
    (let ((model (cache-model)))
      (polygons-extract self (get-polygons~ model) matrix)))
  
  
  (method (draw-polygons color)
    (for-each (lambda (poly)
                (draw-polygon poly color))
              (element-polygons)))
  
  
  (method (cube-polygons)
    (define (cube-cuboid)
      (let ((x (vertex-x position))
            (y (vertex-y position))
            (z (vertex-z position))
            (radius block-radius))
        (cuboid (- x radius)
                (- y radius)
                (- z radius)
                (+ x radius)
                (+ y radius)
                (+ z radius))))
    
    (let ((queue (new-queue)))
      (iterate-cuboid-quads (cube-cuboid) #f
        (lambda (quad)
          (enqueue queue quad)))
      (queue-list queue)))
  
  
  (method override (draw-target color)
    (for-each (lambda (poly)
                (draw-polygon poly red-dye))
              (cube-polygons)))
  
  
  (method override (target-moveable?)
    #f)
  
  
  (method (find-block-proxy)
    (let ((zone (current-zone)))
      (find-if (lambda (element)
                 (and (is? element Block-Proxy)
                      (vertex=? (get-position~ element) position)))
               (get-children~ zone)))))


;;;
;;;; Block-Proxy
;;;


(class Block-Proxy extends Block-Entity implements Scriptable

  
  (method override (finish rest)
    (nextmethod rest)
    (world.generation:register-block-action position
      (lambda ()
        (let ((script (get-script)))
          (when script
            (let ((interact (get-interact~ script)))
              (when interact
                (running-handler~ script
                  (lambda ()
                    (parameterize ((current-event (new Interact-Event self (current-seconds))))
                      (interact self)))))))))))
  
  
  (method override (virtual?)
    #t)
  
  
  (method override (cache-billboard)
    (unless (user?)
      (when interface-script?
        (let ((script (get-script)))
          (when script
            (let ((state (get-state~ script)))
              (if (and billboard (eq? (get-state~ billboard) state))
                  billboard
                (let ((board (make-billboard~ script)))
                  (set-billboard board)
                  board))))))))
  
  
  (method override (get-script)
    (find-type Script))))
