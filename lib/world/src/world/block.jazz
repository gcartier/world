;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Blocks
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2013
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.block jazz


(import (jazz.geometry)
        (jazz.graphic)
        (jazz.graphic.opengl.glew)
        (jazz.io)
        (jazz.jml)
        (jazz.library)
        (jazz.literals)
        (jazz.media)
        (jazz.network)
        (jazz.platform)
        (jazz.platform.cairo)
        (jazz.runtime)
        (jazz.system)
        (jazz.ui)
        (jazz.ui.dialog)
        (jazz.ui.window)
        (time)
        (world)
        (world.autoload)
        (world.dye)
        (world.dyes)
        (world.element)
        (world.entity)
        (world.face)
        (world.foreign)
        (world.geometry)
        (world.model)
        (world.opengl)
        (world.polygon)
        (world.quad)
        (world.syntax (phase syntax))
        (world.texture)
        (world.triangle))


;;;
;;;; Blocks
;;;


(definition blocks <table>
  (make-table test: eq?))


(definition public (registered-blocks)
  blocks)

(definition public (registered-block name)
  (let ((generate/model (table-ref blocks name #f)))
    (if (procedure? generate/model)
        (let ((model (generate/model)))
          (set-name~ model name)
          (table-set! blocks name model)
          model)
      generate/model)))

(definition public (register-block name generate)
  (table-set! blocks name generate))


;;;
;;;; Image
;;;


(definition public (image-coordinates image)
  (let ((world (current-world)))
    (if (get-block-program-atlas?~ world)
        (image-rect~ (get-block-atlas~ world) image)
      (uv 0. 0. 1. 1. 0.))))


;;;
;;;; Block-Model
;;;


(class Block-Model extends Model)


;;;
;;;; Block
;;;


(class Block extends Entity
  
  
  (property rotation initialize #f getter generate setter explicit)
  (property images   initialize #f accessors generate)
  
  
  (method override (prepare rest)
    (nextmethod rest)
    (set-color (dye .525 .321 .004 1.)))
  
  
  (method override (resolve-model)
    (registered-block (or path 'Dirty)))
  
  
  (method public (set-rotation rot)
    (set! rotation rot)
    (case rotation
      ((north))
      ((east) (rotate (- PI/2)))
      ((south) (rotate PI))
      ((west) (rotate PI/2))))
  
  
  (method override (update-matrix)
    (matrix-multiply! matrix (make-translation-matrix& (get-x) (get-y) (get-z))
                             (matrix-multiply& (make-lookat-matrix& lookat)
                                               (make-scaling-matrix& (vertex-x scales) (vertex-y scales) (vertex-z scales)))))
  
  
  (method override (element-faces)
    (let ((model (cache-model)))
      (if (not model)
          (nextmethod)
        (let ((rank 0))
          (map (lambda (face poly)
                 (prog1 (if (not images)
                            (make-face (get-texture~ face) (get-texture-coordinates~ face) (get-texture-depth~ face) poly)
                          (let ((image (list-ref images rank)))
                            (if (not image)
                                (make-face (get-texture~ face) (get-texture-coordinates~ face) (get-texture-depth~ face) poly)
                              (let ((uv (image-coordinates image)))
                                (let ((tl (uv-left uv))
                                      (tt (uv-top uv))
                                      (tr (uv-right uv))
                                      (tb (uv-bottom uv))
                                      (depth (uv-depth uv)))
                                  (let ((coordinates (f32vector tl tt tl tb tr tb tr tt)))
                                    ;; putting uv instead of coordinates
                                    ;; gives rise to a really nice looking bug!
                                    (make-face image coordinates depth poly)))))))
                   (increase! rank)))
               (get-faces~ model)
               (element-polygons))))))
  
  
  (method override (element-polygons)
    (let ((model (cache-model)))
      (if (not model)
          (nextmethod)
        (let ((polygons (get-polygons~ model)))
          (let ((queue (new-queue)))
            (for (i 0 (/ (f64vector-length polygons) polygon-float-size))
                 (let ((offset (* i polygon-float-size)))
                   (let ((poly (if (nan? (f64vector-ref polygons (+ offset 12)))
                                   (make-triangle self (make-zero-vertex) (make-zero-vertex) (make-zero-vertex))
                                 (make-quad self (make-zero-vertex) (make-zero-vertex) (make-zero-vertex) (make-zero-vertex)))))
                     (enqueue queue (polygon-extract!~ poly self polygons offset matrix)))))
            (queue-list queue))))))
  
  
  (method override (update-face-texture face face-rank texture)
    (let ((zone (current-zone)))
      (let ((designer (get-designer~ zone)))
        (let ((images (or images (make-list (length (get-faces~ model)) #f))))
          (list-set! images face-rank texture)
          (set-property~ designer self 'images images)))))
  
  
  (method override (draw-3d)
    (draw-block))
  
  
  (method (draw-block)
    (let ((world (current-world)))
      (let ((model (cache-model)))
        (let ((mesh (get-mesh~ model))
              (program (find-mesh-program~ world (entity-program))))
          (use~ program)
          (bind-render-uniforms~ program (get-material~ mesh) matrix)
          (bind-uniforms~ program mesh matrix #f)
          (draw-mesh~ program mesh)
          (unbind-uniforms~ program)
          (unbind-render-uniforms~ program)
          (unuse~ program)))))
  
  
  (method override (entity-program)
    'dynamic-phong))


;;;
;;;; Quad Block
;;;


(class Quad-Block extends Block
  
  
  (property v1    initialize #f accessors generate)
  (property v2    initialize #f accessors generate)
  (property v3    initialize #f accessors generate)
  (property v4    initialize #f accessors generate)
  (property image initialize #f accessors generate)
  
  
  (method override (prepare rest)
    (nextmethod rest)
    (set-color (dye .525 .321 .004 1.)))
  
  
  (method override (finish rest)
    (nextmethod rest)
    (set-position (quad-center v1 v2 v3 v4)))
  
  
  (method override (element-radiuses)
    (vertex .5 .5 .5))
  
  
  (method override (element-faces)
    (let ((world (current-world)))
      (let ((default-image (get-default-image~ world)))
        (list
          (let ((image (or image default-image)))
            (let ((uv (image-coordinates image)))
              (let ((tl (uv-left uv))
                    (tt (uv-top uv))
                    (tr (uv-right uv))
                    (tb (uv-bottom uv))
                    (texture-depth (uv-depth uv)))
                (make-face image
                           (f32vector tl tb tr tb tr tt tl tt)
                           texture-depth
                           (make-quad self
                                      v1 v2 v3 v4)))))))))
  
  
  (method override (update-face-texture face face-rank texture)
    (let ((zone (current-zone)))
      (let ((designer (get-designer~ zone)))
        (set-property~ designer self 'image texture))))
  
  
  (method override (draw-3d)
    (gl-colorize-dye color)
    (glBegin GL_QUADS)
    (glVertex3f (vertex-x v1) (vertex-y v1) (vertex-z v1))
    (glVertex3f (vertex-x v2) (vertex-y v2) (vertex-z v2))
    (glVertex3f (vertex-x v3) (vertex-y v3) (vertex-z v3))
    (glVertex3f (vertex-x v4) (vertex-y v4) (vertex-z v4))
    (glEnd))
  
  
  (method override (draw-target dye)
    (gl-colorize-dye dye)
    (glLineWidth 2.)
    (glDisable GL_LIGHTING)
    (glBegin GL_LINE_LOOP)
    (glVertex3f (vertex-x v1) (vertex-y v1) (vertex-z v1))
    (glVertex3f (vertex-x v2) (vertex-y v2) (vertex-z v2))
    (glVertex3f (vertex-x v3) (vertex-y v3) (vertex-z v3))
    (glVertex3f (vertex-x v4) (vertex-y v4) (vertex-z v4))
    (glEnd)
    (glEnable GL_LIGHTING)
    (glLineWidth 1.)))


;;;
;;;; Square Block
;;;


(class Square-Block extends Quad-Block
  
  
  (method override (element-faces)
    (let ((world (current-world)))
      (let ((default-image (get-default-image~ world)))
        (list
          (let ((image (or image default-image)))
            (let ((uv (image-coordinates image)))
              (let ((tl (uv-left uv))
                    (tt (uv-top uv))
                    (tr (uv-right uv))
                    (tb (uv-bottom uv))
                    (texture-depth (uv-depth uv)))
                (make-face image
                           (f32vector tl tb tr tb tr tt tl tt)
                           texture-depth
                           (make-quad self
                                      v1 v2 v3 v4)))))
          (let ((image (or image default-image)))
            (let ((uv (image-coordinates image)))
              (let ((tl (uv-left uv))
                    (tt (uv-top uv))
                    (tr (uv-right uv))
                    (tb (uv-bottom uv))
                    (texture-depth (uv-depth uv)))
                (make-face image
                           (f32vector tr tt tr tb tl tb tl tt)
                           texture-depth
                           (make-quad self
                                      v4 v3 v2 v1)))))))))))
