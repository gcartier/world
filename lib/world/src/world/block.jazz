;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Blocks
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2013
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.block jazz


(import (jazz.geometry)
        (jazz.graphic)
        (jazz.graphic.opengl.glew)
        (jazz.io)
        (jazz.jml)
        (jazz.library)
        (jazz.literals)
        (jazz.media)
        (jazz.network)
        (jazz.platform)
        (jazz.platform.cairo)
        (jazz.runtime)
        (jazz.system)
        (jazz.ui)
        (jazz.ui.dialog)
        (jazz.ui.window)
        (time)
        (world)
        (world.autoload)
        (world.draw)
        (world.dye)
        (world.element)
        (world.face)
        (world.foreign)
        (world.geometry)
        (world.object)
        (world.quad)
        (world.syntax (phase syntax))
        (world.texture)
        (world.tile)
        (world.triangle)
        (world.window)
        (world.client.window))


;;;
;;;; Block
;;;


(class Block extends Tile
  
  
  (property left-image   initialize #f accessors generate)
  (property right-image  initialize #f accessors generate)
  (property bottom-image initialize #f accessors generate)
  (property top-image    initialize #f accessors generate)
  (property back-image   initialize #f accessors generate)
  (property front-image  initialize #f accessors generate)
  
  
  (method override (prepare rest)
    (nextmethod rest)
    (set-radiuses (vertex .5 .5 .5))
    (set-color (dye .525 .321 .004 1.)))
  
  
  ;;;
  ;;;; Faces
  ;;;
  
  
  (method override (element-faces)
    (let ((world (current-world))
          (bounds (make-cuboid&)))
      (get-bounds! bounds)
      (let ((x (get-x))
            (y (get-y))
            (z (get-z))
            (left (cuboid-left bounds))
            (right (cuboid-right bounds))
            (bottom (cuboid-bottom bounds))
            (top (cuboid-top bounds))
            (back (cuboid-back bounds))
            (front (cuboid-front bounds))
            (default-image (get-default-image~ world)))
        (list
          ;; front face
          (let ((uv (image-coordinates (or front-image default-image))))
            (let ((tl (uv-left uv))
                  (tt (uv-top uv))
                  (tr (uv-right uv))
                  (tb (uv-bottom uv))
                  (texture-depth (uv-depth uv)))
              (make-face front-image
                         (f32vector tl tt tl tb tr tb tr tt)
                         texture-depth
                         (make-quad self
                                    (vertex left top front) (vertex left bottom front) (vertex right bottom front) (vertex right top front)))))
          ;; back face
          (let ((uv (image-coordinates (or back-image default-image))))
            (let ((tl (uv-left uv))
                  (tt (uv-top uv))
                  (tr (uv-right uv))
                  (tb (uv-bottom uv))
                  (texture-depth (uv-depth uv)))
              (make-face back-image
                         (f32vector tr tt tr tb tl tb tl tt)
                         texture-depth
                         (make-quad self
                                    (vertex right top back) (vertex right bottom back) (vertex left bottom back) (vertex left top back)))))
          ;; left face
          (let ((uv (image-coordinates (or left-image default-image))))
            (let ((tl (uv-left uv))
                  (tt (uv-top uv))
                  (tr (uv-right uv))
                  (tb (uv-bottom uv))
                  (texture-depth (uv-depth uv)))
              (make-face left-image
                         (f32vector tl tt tl tb tr tb tr tt)
                         texture-depth
                         (make-quad self
                                    (vertex left top back) (vertex left bottom back) (vertex left bottom front) (vertex left top front)))))
          ;; right face
          (let ((uv (image-coordinates (or right-image default-image))))
            (let ((tl (uv-left uv))
                  (tt (uv-top uv))
                  (tr (uv-right uv))
                  (tb (uv-bottom uv))
                  (texture-depth (uv-depth uv)))
              (make-face right-image
                         (f32vector tl tt tl tb tr tb tr tt)
                         texture-depth
                         (make-quad self
                                    (vertex right top front) (vertex right bottom front) (vertex right bottom back) (vertex right top back)))))
          ;; top face
          (let ((uv (image-coordinates (or top-image default-image))))
            (let ((tl (uv-left uv))
                  (tt (uv-top uv))
                  (tr (uv-right uv))
                  (tb (uv-bottom uv))
                  (texture-depth (uv-depth uv)))
              (make-face top-image
                         (f32vector tl tb tl tt tr tt tr tb)
                         texture-depth
                         (make-quad self
                                    (vertex left top back) (vertex left top front) (vertex right top front) (vertex right top back)))))
          ;; bottom face
          (let ((uv (image-coordinates (or bottom-image default-image))))
            (let ((tl (uv-left uv))
                  (tt (uv-top uv))
                  (tr (uv-right uv))
                  (tb (uv-bottom uv))
                  (texture-depth (uv-depth uv)))
              (make-face bottom-image
                         (f32vector tl tt tl tb tr tb tr tt)
                         texture-depth
                         (make-quad self
                                    (vertex left bottom front) (vertex left bottom back) (vertex right bottom back) (vertex right bottom front)))))))))
  
  
  @convert
  (method override (update-face-texture face texture)
    (let ((zone (current-zone)))
      (let ((designer (get-designer~ zone))
            (rank (find (element-faces) face return: 'position)))
        (case rank
          ((0) (set-property~ designer self 'front-image texture))
          ((1) (set-property~ designer self 'back-image texture))
          ((2) (set-property~ designer self 'left-image texture))
          ((3) (set-property~ designer self 'right-image texture))
          ((4) (set-property~ designer self 'top-image texture))
          ((5) (set-property~ designer self 'bottom-image texture)))
        (element (element-faces) rank))))))
