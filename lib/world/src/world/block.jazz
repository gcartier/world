;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Blocks
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2013
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.block jazz


(import (jazz.geometry)
        (jazz.graphic)
        (jazz.graphic.opengl.glew)
        (jazz.io)
        (jazz.jml)
        (jazz.library)
        (jazz.literals)
        (jazz.media)
        (jazz.network)
        (jazz.platform)
        (jazz.platform.cairo)
        (jazz.runtime)
        (jazz.system)
        (jazz.ui)
        (jazz.ui.dialog)
        (jazz.ui.window)
        (time)
        (world)
        (world.autoload)
        (world.dye)
        (world.dyes)
        (world.element)
        (world.entity)
        (world.face)
        (world.foreign)
        (world.generate)
        (world.geometry)
        (world.model)
        (world.opengl)
        (world.polygon)
        (world.quad)
        (world.syntax (phase syntax))
        (world.texture)
        (world.triangle))


;;;
;;;; Blocks
;;;


(definition blocks <table>
  (make-table test: eq?))

(definition block-id <fx>
  0)


(definition public (registered-blocks)
  blocks)

(definition public (registered-block name)
  (let ((generate/model (table-ref blocks name)))
    (if (is? generate/model Model)
        generate/model
      (bind (id . generate) generate/model
        (let ((model (generate)))
          (set-name~ model name)
          (set-id~ model id)
          (table-set! blocks name model)
          model)))))

(definition public (register-block name generate showcase?)
  (if (not showcase?)
      (table-set! blocks name (cons #f generate))
    (table-set! blocks name (cons block-id generate))
    (increase! block-id)))


;;;
;;;; Block-Model
;;;


(class Block-Model extends Model
  
  
  (slot flat? <bool> initialize #f accessors generate))


;;;
;;;; Block
;;;


(class Block extends Entity
  
  
  (property rotation initialize #f getter generate setter explicit)
  (property images   initialize #f accessors generate)
  (property shaders  initialize #f accessors generate)
  
  
  (method override (prepare rest)
    (nextmethod rest)
    (set-path 'Dirty)
    (set-color (dye .525 .321 .004 1.)))
  
  
  (method override (resolve-model)
    (registered-block path))
  
  
  (method public (set-rotation rot)
    (set! rotation rot)
    (case rotation
      ((north))
      ((east) (rotate (- PI/2)))
      ((south) (rotate PI))
      ((west) (rotate PI/2))))
  
  
  (method (image-ref n)
    (and images (list-ref images n)))
  
  
  (method (shader-ref n)
    (and shaders (list-ref shaders n)))
  
  
  ;; extract model polygons and create new faces with our images
  (method override (element-faces)
    (let ((world (current-world))
          (model (cache-model)))
      (let ((rank 0))
        (map (lambda (face poly)
               (prog1 (let ((image (image-ref rank))
                            (shader (shader-ref rank)))
                        (if (and (not image) (not shader))
                            (make-face (get-material~ face) (get-texture-coordinates~ face) (get-texture-depth~ face) poly)
                          (let ((uv (image-coordinates (or image "dirty"))))
                            (let ((tl (uv-left uv))
                                  (tt (uv-top uv))
                                  (tr (uv-right uv))
                                  (tb (uv-bottom uv))
                                  (depth (uv-depth uv)))
                              (let ((coordinates (f32vector tl tt tl tb tr tb tr tt)))
                                (let ((material (find-block-material~ world (or shader 'opaque))))
                                  (make-face material coordinates depth poly)))))))
                 (increase! rank)))
             (get-faces~ model)
             (element-polygons)))))
  
  
  (method override (element-polygons)
    (let ((model (cache-model)))
      (polygons-extract self (get-polygons~ model) matrix)))
  
  
  (method override (update-face-texture face face-rank texture)
    (let ((zone (current-zone)))
      (let ((designer (get-designer~ zone)))
        (let ((images (or images (make-list (length (get-faces~ model)) #f))))
          (list-set! images face-rank texture)
          (set-property~ designer self 'images images)))))
  
  
  (method override (update-face-shader face face-rank shader)
    (let ((zone (current-zone)))
      (let ((designer (get-designer~ zone)))
        (let ((shaders (or shaders (make-list (length (get-faces~ model)) #f))))
          (list-set! shaders face-rank shader)
          (set-property~ designer self 'shaders shaders)))))
  
  
  (method override (target-moveable?)
    #f)))
