;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Blocks
;;;


(module world.block jazz


(import (jazz.geometry)
        (jazz.graphic)
        (jazz.graphic.opengl.glew)
        (jazz.io)
        (jazz.jml)
        (jazz.library)
        (jazz.literals)
        (jazz.media)
        (jazz.network)
        (jazz.platform)
        (jazz.platform.cairo)
        (jazz.runtime)
        (jazz.system)
        (jazz.ui)
        (jazz.ui.dialog)
        (jazz.ui.window)
        (time)
        (world)
        (world.autoload)
        (world.client.window)
        (world.foreign)
        (world.geometry)
        (world.object)
        (world.sprite)
        (world.texture)
        (world.window))


;;;
;;;; Block
;;;


(class Block extends Sprite
  
  
  (property front-image                 initialize #f accessors generate)
  (property back-image                  initialize #f accessors generate)
  (property left-image                  initialize #f accessors generate)
  (property right-image                 initialize #f accessors generate)
  (property top-image                   initialize #f accessors generate)
  (property bottom-image                initialize #f accessors generate)
  
  (slot block-location         <int>    initialize #f accessors generate)
  (slot block-texture-location <int>    initialize #f accessors generate)
  (slot block-shader           <Object> initialize #f accessors generate)
  (slot w                               initialize #f accessors generate)
  
  
  (method override (prepare rest)
    (nextmethod rest)
    (set! width 5.)
    (set! height 5.)
    (set! depth 5.)
    (set! w world)
    (set! block-location (get-block-location~ world))
    (set! block-shader (get-block-shader~ world))
    (set! block-texture-location (get-block-texture-location~ world))
    (set-color (or (get-block-color~ zone) {Color red: 134 green: 82 blue: 1})))
  
  
  ;;;
  ;;;; Triangles
  ;;;
  
  
  (method override (sprite-triangles)
    (define (image-texture image)
      (let ((rect (get-image~ (get-texture-pack~ world) image)))
        (values (get-left~ rect)
                (get-top~ rect)
                (get-right~ rect)
                (get-bottom~ rect))))
    
    (let ((l (get-left))
          (r (get-right))
          (b (get-bottom))
          (t (get-top))
          (f (get-back))
          (n (get-front)))
      (receive (nl nt nr nb) (image-texture (or front-image "dirty"))
      (receive (fl ft fr fb) (image-texture (or back-image "dirty"))
      (receive (ll lt lr lb) (image-texture (or left-image "dirty"))
      (receive (rl rt rr rb) (image-texture (or right-image "dirty"))
      (receive (tl tt tr tb) (image-texture (or top-image "dirty"))
      (receive (bl bt br bb) (image-texture (or bottom-image "dirty"))
      (let ((vertices
              ;; vertex texture normal
              (list
                ;; front face
                (vertex l t n) (vertex nl nb 1.) (vertex 0. 0. 1.)
                (vertex r t n) (vertex nr nb 1.) (vertex 0. 0. 1.)
                (vertex r b n) (vertex nr nt 1.) (vertex 0. 0. 1.)
                (vertex r b n) (vertex nr nt 1.) (vertex 0. 0. 1.)
                (vertex l b n) (vertex nl nt 1.) (vertex 0. 0. 1.)
                (vertex l t n) (vertex nl nb 1.) (vertex 0. 0. 1.)
                ;; back face
                (vertex r t f) (vertex fr fb 1.) (vertex 0. 0. -1.)
                (vertex l t f) (vertex fl fb 1.) (vertex 0. 0. -1.)
                (vertex l b f) (vertex fl ft 1.) (vertex 0. 0. -1.)
                (vertex l b f) (vertex fl ft 1.) (vertex 0. 0. -1.)
                (vertex r b f) (vertex fr ft 1.) (vertex 0. 0. -1.)
                (vertex r t f) (vertex fr fb 1.) (vertex 0. 0. -1.)
                ;; left face
                (vertex l t f) (vertex lr lt 1.) (vertex -1. 0. 0.)
                (vertex l t n) (vertex lr lb 1.) (vertex -1. 0. 0.)
                (vertex l b n) (vertex ll lb 1.) (vertex -1. 0. 0.)
                (vertex l b n) (vertex ll lb 1.) (vertex -1. 0. 0.)
                (vertex l b f) (vertex ll lt 1.) (vertex -1. 0. 0.)
                (vertex l t f) (vertex lr lt 1.) (vertex -1. 0. 0.)
                ;; right face
                (vertex r t n) (vertex rr rb 1.) (vertex 1. 0. 0.)
                (vertex r t f) (vertex rr rt 1.) (vertex 1. 0. 0.)
                (vertex r b f) (vertex rl rt 1.) (vertex 1. 0. 0.)
                (vertex r b f) (vertex rl rt 1.) (vertex 1. 0. 0.)
                (vertex r b n) (vertex rl rb 1.) (vertex 1. 0. 0.)
                (vertex r t n) (vertex rr rb 1.) (vertex 1. 0. 0.)
                ;; top face
                (vertex l t f) (vertex tl tt 1.) (vertex 0. 1. 0.)
                (vertex r t f) (vertex tr tt 1.) (vertex 0. 1. 0.)
                (vertex r t n) (vertex tr tb 1.) (vertex 0. 1. 0.)
                (vertex r t n) (vertex tr tb 1.) (vertex 0. 1. 0.)
                (vertex l t n) (vertex tl tb 1.) (vertex 0. 1. 0.)
                (vertex l t f) (vertex tl tt 1.) (vertex 0. 1. 0.)
                ;; bottom face
                (vertex l b n) (vertex bl bb 1.) (vertex 0. -1. 0.)
                (vertex r b n) (vertex br bb 1.) (vertex 0. -1. 0.)
                (vertex r b f) (vertex br bt 1.) (vertex 0. -1. 0.)
                (vertex r b f) (vertex br bt 1.) (vertex 0. -1. 0.)
                (vertex l b f) (vertex bl bt 1.) (vertex 0. -1. 0.)
                (vertex l b n) (vertex bl bb 1.) (vertex 0. -1. 0.))))
        vertices))))))))))


;;;
;;;; Block-Red
;;;


(class Block-Red extends Block
  
  
  (form
    (<install> color: {Color Red})))


;;;
;;;; Block-Green
;;;


(class Block-Green extends Block
  
  
  (form
    (<install> color: {Color Green})))


;;;
;;;; Block-Blue
;;;


(class Block-Blue extends Block
  
  
  (form
    (<install> color: {Color Blue}))))
