;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Redstone
;;;
;;;  The Initial Developer of the Original Code is Edouard Hebert.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.redstone jazz


(import (jazz.syntax (phase syntax))
        (world)
        (world.autoload)
        (world.configure)
        (world.flow)
        (world.history)
        (world.generation)
        (world.support)
        (world.syntax (phase syntax))
        (world.task))


(definition public (redstone-task task <Task>)
  (declare (proper-tail-calls))
  (let ((game (current-game))
        (history (current-history)))
    (with-task task
      (lambda (exit)
        (let (iter (previous (current-seconds)))
          (let ((time (current-seconds))
                (duration 0.))
            (let ((elapse (- time previous)))
              (unless (get-paused?~ history)
                (with-task-mutex
                  (lambda ()
                    (unless (stopping?~ task)
                      (trace-task redstone "R")
                      (let ((current-repeaters (get-repeaters~ game)))
                        (unless (null? current-repeaters)
                          (set-repeaters~ game '())
                          (increase! duration (tick-repeaters elapse current-repeaters))))))))
              (task-sleep task redstone-period duration exit)
              (iter time))))))))


(definition (tick-repeaters elapse repeaters)
  (site (redstone on?: #t)
    (power-repeaters elapse repeaters)))


(definition (power-repeaters elapse repeater-list)
  (let ((zone (current-zone))
        (game (current-game))
        (duration 0.))
    (updating-sectors~ zone
      (lambda (add-sector)
        (let (iter (repeaters repeater-list))
          (unless (null? repeaters)
            (;with-task-mutex
             (lambda ()
               (let ((time (current-seconds))
                     (repeater (car repeaters)))
                 (let ((sector (get-sector~ repeater))
                       (i (get-i~ repeater))
                       (j (get-j~ repeater))
                       (k (get-k~ repeater))
                       (power? (if (is? repeater Pressure-Plate) #f (get-power?~ repeater)))
                       (delay (get-delay~ repeater)))
                   (if (< delay 0)
                       (call-with-sector~ zone sector i j k
                         (lambda (region sector block-id <fx> data-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv rendering with-field block-ref block-set! data-ref data-set! blocklight-ref blocklight-set! skylight-ref skylight-set!)
                           (when (id? block-id WoodenButton StoneButton WoodenPressurePlate StonePressurePlate)
                             (with-field i j k
                               (lambda (section index)
                                 (data-set! section index (bit-set data-id (if (id? block-id WoodenPressurePlate StonePressurePlate) 0 3) #f)))))
                           (redstone-update~ game sector (list i j k block-id) add-sector with-field block-ref block-set! data-ref data-set! blocklight-ref blocklight-set! power?)))
                     (begin
                       (set-delay~ repeater (- delay 1))
                       (set-repeaters~ game (cons repeater (get-repeaters~ game))))))
                 (increase! duration (- (current-seconds) time)))))
            (iter (cdr repeaters)))))
      delay-update?: #t)
    duration)))
