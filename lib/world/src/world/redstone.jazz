;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Redstone
;;;
;;;  The Initial Developer of the Original Code is Edouard Hebert.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2016
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.redstone jazz


(import (jazz.syntax (phase syntax))
        (world)
        (world.audio)
        (world.autoload)
        (world.configure)
        (world.flow)
        (world.history)
        (world.generation)
        (world.support)
        (world.syntax (phase syntax))
        (world.task))


;;;
;;;; Task
;;;


(definition public (redstone-task task <Task>)
  (declare (proper-tail-calls))
  (let ((zone (current-zone))
        (game (current-game))
        (history (current-history)))
    (with-task task
      (lambda (exit)
        (let (iter (previous (current-seconds)))
          (let ((time (current-seconds))
                (duration 0.))
            (let ((elapse (- time previous)))
              (unless (get-paused?~ history)
                (with-task-mutex
                  (lambda ()
                    (unless (stopping?~ task)
                      (let ((current-repeaters (get-repeaters~ game)))
                        (unless (null? current-repeaters)
                          (set-repeaters~ game '())
                          (increase! duration (tick-repeaters elapse current-repeaters))))))))
              (task-sleep task redstone-period duration exit)
              (iter time))))))))


(definition (tick-repeaters elapse repeaters)
  (site (redstone on?: #t)
    (power-repeaters elapse repeaters)))


(definition (power-repeaters elapse repeater-list)
  (let ((zone (current-zone))
        (game (current-game))
        (duration 0.))
    (updating-sectors~ zone
      (lambda (add-sector)
        (let (iter (repeaters repeater-list))
          (unless (null? repeaters)
            (;with-task-mutex
             (lambda ()
               (let ((time (current-seconds))
                     (repeater (car repeaters)))
                 (let ((sector (get-sector~ repeater))
                       (i (get-i~ repeater))
                       (j (get-j~ repeater))
                       (k (get-k~ repeater))
                       (power? (if (is? repeater Pressure-Plate) #f (get-power?~ repeater)))
                       (delay (get-delay~ repeater)))
                   (if (< delay 0)
                       (call-with-sector~ zone sector i j k
                         (lambda (region sector block-id <fx> data-id <fx> i <fx> j <fx> k <fx> x <fl> y <fl> z <fl> uv rendering with-field block-ref block-set! data-ref data-set! blocklight-ref blocklight-set! skylight-ref skylight-set!)
                           (when (id? block-id WoodenButton StoneButton WoodenPressurePlate StonePressurePlate)
                             (with-field i j k
                               (lambda (section index)
                                 (data-set! section index (bit-set data-id (if (id? block-id WoodenPressurePlate StonePressurePlate) 0 3) #f)))))
                           (redstone-update sector (list i j k block-id) add-sector with-field block-ref block-set! data-ref data-set! blocklight-ref blocklight-set! power?)))
                     (begin
                       (set-delay~ repeater (- delay 1))
                       (set-repeaters~ game (cons repeater (get-repeaters~ game))))))
                 (increase! duration (- (current-seconds) time)))))
            (iter (cdr repeaters)))))
      delay-update?: #t)
    duration))


;;;
;;;; Update
;;;


(definition redstone-power-components
  '(28 69 70 72 75 76 77 143)) ;; DetectorRail Lever StonePressurePlate WoodenPressurePlate RedstoneTorchOff RedstoneTorchOn StoneButton WoodenButton

(definition unmovable-objects
  '(7 23 25 34 49 52 54 61 63 84 90 116 117 119 120 130 138)) ;; Bedrock Dispenser NoteBlock PistonHead Obsidian MonsterSpawner Chest Furnace SignPost Jukebox Portal EnchantmentTable BrewingStand EndPortal EndPortalFrame EnderChest BeaconBlock

(definition break-extend
  '(0 8 9 10 11 18 26 30 37 38 39 40 50 51 55 59 64 70 71 72 75 76 77 81 83 86 91 92 93 94 103 122 140 141 142 143)) ;; Air Water StationaryWater Lava StationaryLava Leaves BedBlock Web Dandelion Rose BrownMushroom RedMushroom Torch Fire RedstoneWire WheatCrops WoodenDoorBlock StonePressurePlate IronDoorBlock WoodenPressurePlate RedstoneTorchOff RedstoneTorchOn StoneButton Cactus SugarCane Pumpkin Jack-O-Lantern CakeBlock RedstoneRepeaterBlockOff RedstoneRepeaterBlockOn MelonBlock DragonEgg FlowerPot Carrots Potatoes WoodenButton

(definition updatable-components
  '(29 33 34 46 55 64 71 75 76 93 94 123 124 137))

(definition double-abc
  '((-1 0 0) (0 0 1) (1 0 0) (0 0 -1) (0 -1 0) (0 1 0) (-2 0 0) (-1 0 -1) (0 0 2) (1 0 1) (2 0 0) (1 0 -1) (0 0 -2) (-1 0 1) (-1 -1 0) (0 -1 1) (1 -1 0) (0 -1 -1) (0 -2 0) (-1 1 0) (0 1 1) (1 1 0) (0 1 -1) (0 2 0)))

(definition single-abc
  '((-1 0 0) (0 0 1) (1 0 0) (0 0 -1) (0 -1 0) (0 1 0)))

(definition attached-abc
  #(((-1 0 0) (0 0 1) (1 0 0) (0 0 -1) (0 -1 0) (0 1 0) (-1 1 0) (0 1 1) (1 1 0) (0 1 -1) (0 2 0))
    ((-1 0 0) (0 0 1) (1 0 0) (0 0 -1) (0 -1 0) (0 1 0) (-2 0 0) (-1 0 1) (-1 0 -1) (-1 -1 0) (-1 1 0))
    ((-1 0 0) (0 0 1) (1 0 0) (0 0 -1) (0 -1 0) (0 1 0) (1 0 1) (2 0 0) (1 0 -1) (1 -1 0) (1 1 0))
    ((-1 0 0) (0 0 1) (1 0 0) (0 0 -1) (0 -1 0) (0 1 0) (-1 0 -1) (1 0 -1) (0 0 -2) (0 -1 -1) (0 1 -1))
    ((-1 0 0) (0 0 1) (1 0 0) (0 0 -1) (0 -1 0) (0 1 0) (-1 0 1) (0 0 2) (1 0 1) (0 -1 1) (0 1 1))
    ((-1 0 0) (0 0 1) (1 0 0) (0 0 -1) (0 -1 0) (0 1 0) (-1 -1 0) (0 -1 1) (1 -1 0) (0 -1 -1) (0 -2 0))))


(definition public (redstone-update sector item add-sector with-field block-ref effective-block-set! data-ref effective-data-set! blocklight-ref blocklight-set! (delayed? #f))
  (let ((game (current-game))
        (update-queue (new-queue))
        (first-call? #t)
        (change? #f))
    (define (add-queue i j k)
      (let ((component (list i j k (effective-block-ref i j k))))
        (unless (member? component (queue-list update-queue))
          (enqueue update-queue component))))
    
    (define (add-range lst)
      (for-each (lambda (component)
                  (apply add-queue component))
                lst))
    
    (define (effective-block-ref i j k)
      (with-field i j k
        (lambda (section index)
          (or
            (and section (block-ref section index))
            0))))
    
    (define (effective-data-ref i j k)
      (with-field i j k
        (lambda (section index)
          (or
            (and section (data-ref section index))
            0))))
    
    (define (block-set! i j k block)
      (with-field i j k
        (lambda (section index)
          (unless (or (not section) (= (block-ref section index) block))
            (set! change? #t)
            (effective-block-set! section index block)
            (add-sector (get-sector~ section))))))
    
    (define (data-set! i j k data)
      (with-field i j k
        (lambda (section index)
          (unless (or (not section) (= (data-ref section index) data))
            (set! change? #t)
            (effective-data-set! section index data)
            (add-sector (get-sector~ section))))))
    
    (define (piston-block-set! section index block)
      (unless (= (block-ref section index) block)
        (set! change? #t)
        (effective-block-set! section index block)
        (add-sector (get-sector~ section))))
    
    (define (piston-data-set! section index data)
      (unless (= (data-ref section index) data)
        (set! change? #t)
        (effective-data-set! section index data)
        (add-sector (get-sector~ section))))
    
    (define (with-block i j k proc)
      (with-field i j k
        (lambda (section index)
          (when section
            (proc section index (block-ref section index) (data-ref section index))))))
    
    (define (update-blocks i j k lst) ;; list of where to look for components
      (let ((blocks (new-queue))
            (block #f))
        (for-each (lambda (abc)
                    (bind (a b c) abc
                      (set! block (effective-block-ref (+ i a) (+ j b) (+ k c)))
                      (when block
                        (cond ((memq? block updatable-components)
                               (enqueue blocks (list (+ i a) (+ j b) (+ k c))))
                              ((id? block Water StationaryWater)
                               (enqueue (get-water-blocks~ game) (normalize-sector/coordinates sector (+ i a) (+ j b) (+ k c) with-field list)))
                              ((id? block Lava StationaryLava)
                               (enqueue (get-lava-blocks~ game) (normalize-sector/coordinates sector (+ i a) (+ j b) (+ k c) with-field list)))
                              ((id? block Gravel Sand)
                               (normalize-sector/coordinates sector (+ i a) (+ j b) (+ k c) with-field
                                 (lambda (sector i j k)
                                   (add-fall-block~ game sector i j k))))))))
                  lst)
        (add-range (queue-list blocks))))
    
    (define (opaque? block-id)
      (let ((block (id->block block-id)))
        (and (get-cube?~ block) (get-opaque-cube?~ block))))
    
    (define (powered-torch? i j k)
      (apply receives-power? (case (effective-data-ref i j k)
                               ((1) (list (- i 1) j k #t))
                               ((2) (list (+ i 1) j k #t))
                               ((3) (list i j (- k 1) #t))
                               ((4) (list i j (+ k 1) #t))
                               ((0 5) (list i (- j 1) k #t)))))
    
    (define (receives-power? i j k (check-block? #f) (ignore #f))
      (define (side-powered? side-i side-j side-k)
        (unless (and ignore (equal? ignore (list side-i side-j side-k)))
          (with-block side-i side-j side-k
            (lambda (side-section side-index block data)
              (or (and (not check-block?) (id? block WoodenPressurePlate StonePressurePlate) (bit-set? 0 data))
                  (and (id? block RedstoneWire) (> data 0) (connected-redstone-to? i j k side-i side-j side-k))
                  (and (id? block RedstoneRepeaterBlockOn) (= (bitwise-and data #b11) (repeater-data-in side-i side-k i k)))
                  (and (not check-block?) (id? block RedstoneTorchOn) (not (memq? data (attached-to-data i j k side-i side-j side-k))))
                  (and (id? block Lever StoneButton WoodenButton) (bit-set? 3 data) (or (not check-block?) (memq? (bitwise-and data #b111) (attached-to-data i j k side-i side-j side-k))))
                  (and (not check-block?) (opaque? block) (strong-powered-block? side-i side-j side-k i j k)))))))
      
      (define (top-powered?)
        (unless (and ignore (equal? ignore (list i (+ j 1) k)))
          (with-block i (+ j 1) k
            (lambda (top-section top-index block data)
              (or (and (id? block WoodenPressurePlate StonePressurePlate) (bit-set? 0 data) (opaque? (effective-block-ref i j k)))
                  (and (not check-block?) (id? block RedstoneTorchOn) (/= data 5))
                  (and (id? block RedstoneWire) (> data 0))
                  (and (id? block Lever StoneButton WoodenButton) (bit-set? 3 data) (or (not check-block?) (memq? (bitwise-and data #b111) (attached-to-data i j k i (+ j 1) k))))
                  (and (not check-block?) (opaque? block) (strong-powered-block? i (+ j 1) k i j k)))))))
      
      (define (bottom-powered?)
        (unless (and ignore (equal? ignore (list i (- j 1) k)))
          (with-block i (- j 1) k
            (lambda (bottom-section bottom-index block data)
              (or (id? block RedstoneTorchOn)
                  (and (not check-block?) (id? block WoodenPressurePlate StonePressurePlate) (bit-set? 0 data))
                  (and (id? block Lever StoneButton WoodenButton) (bit-set? 3 data) (or (not check-block?) (memq? (bitwise-and data #b111) (attached-to-data i j k i (- j 1) k))))
                  (and (not check-block?) (opaque? block) (strong-powered-block? i (- j 1) k i j k)))))))
      
      (and (or (not check-block?)
               (opaque? (effective-block-ref i j k)))
           (or (side-powered? (- i 1) j k)
               (side-powered? (+ i 1) j k)
               (side-powered? i j (- k 1))
               (side-powered? i j (+ k 1))
               (top-powered?)
               (bottom-powered?))))
    
    (define (strong-powered-block? i j k from-i from-j from-k (check-block? #f))
      (define (side-strong? side-i side-j side-k)
        (with-block side-i side-j side-k
          (lambda (section index block data)
            (or (and (id? block RedstoneRepeaterBlockOn) (= (bitwise-and data #b11) (repeater-data-in side-i side-k i k)))
                (and (id? block Lever StoneButton WoodenButton) (bit-set? 3 data) (memq? (bitwise-and data #b111) (attached-to-data i j k side-i side-j side-k)))
                (and (not check-block?) (id? block RedstoneWire) (> data 0) (connected-redstone-to? i j k side-i side-j side-k))))))
      
      (define (top-strong?)
        (unless (> from-j j)
          (with-block i (+ j 1) k
            (lambda (section index block data)
              (or (and (id? block WoodenPressurePlate StonePressurePlate) (bit-set? 0 data))
                  (and (not check-block?) (id? block RedstoneWire) (> data 0))
                  (and (id? block Lever StoneButton WoodenButton) (bit-set? 3 data) (memq? (bitwise-and data #b111) (attached-to-data i j k i (+ j 1) k))))))))
      
      (define (bottom-strong?)
        (unless (< from-j j)
          (with-block i (- j 1) k
            (lambda (section index block data)
              (or (id? block RedstoneTorchOn)
                  (and (id? block Lever StoneButton WoodenButton) (bit-set? 3 data) (memq? (bitwise-and data #b111) (attached-to-data i j k i (- j 1) k))))))))
      
      (and
        (or (not check-block?) (opaque? (effective-block-ref i j k)))
        (or (unless (< from-i i)
              (side-strong? (- i 1) j k))
            (unless (> from-i i)
              (side-strong? (+ i 1) j k))
            (unless (< from-k k)
              (side-strong? i j (- k 1)))
            (unless (> from-k k)
              (side-strong? i j (+ k 1)))
            (top-strong?)
            (bottom-strong?))))
    
    (define (wire-power i j k)
      (define (side-power side-i side-j side-k)
        (with-block side-i side-j side-k
          (lambda (section index block data)
            (or (and (id? block RedstoneWire)
                     (- data 1))
                (and (or (id? block RedstoneTorchOn) (and (id? block RedstoneRepeaterBlockOn) (= (bitwise-and data #b11) (repeater-data-in side-i side-k i k))) (and (id? block WoodenPressurePlate StonePressurePlate) (bit-set? 0 data)) (and (id? block Lever StoneButton WoodenButton) (bit-set? 3 data)))
                     15)
                (and (with-field i (+ j 1) k
                       (lambda (section index)
                         (and section (or (not (get-cube?~ (id->block (block-ref section index)))) (id? (block-ref section index) Glass BeaconBlock)))))
                     (with-block side-i (+ side-j 1) side-k
                       (lambda (section index up-block up-data)
                         (and (id? up-block RedstoneWire) (> up-data 0) (- up-data 1)))))
                (and (or (not (get-cube?~ (id->block block))) (id? (block-ref section index) Glass BeaconBlock))
                     (with-block side-i (- side-j 1) side-k
                       (lambda (section index block data)
                         (and (id? block RedstoneWire) (> data 0) (- data 1)))))
                (and (strong-powered-block? side-i side-j side-k i j k #t)
                     15)
                0))))
      
      (define (top-power)
        (with-block i (+ j 1) k
          (lambda (section index block data)
            (if (or (id? block RedstoneTorchOn) (and (id? block Lever StoneButton WoodenButton) (bit-set? 3 data)) (strong-powered-block? i (+ j 1) k i j k #t))
                15
              0))))
      
      (define (bottom-power)
        (if (strong-powered-block? i (- j 1) k i j k #t)
            15
          0))
      
      (max
        ;; the or are a quick fix to side-power sometimes returning false
        (or (side-power (- i 1) j k) 0)
        (or (side-power (+ i 1) j k) 0)
        (or (side-power i j (- k 1)) 0)
        (or (side-power i j (+ k 1)) 0)
        (top-power)
        (bottom-power)))
    
    (define (powered-repeater? i j k)
      (define (side-powered? a b c)
        (with-block (+ i a) (+ j b) (+ k c)
          (lambda (section index block data)
            (or (id? block RedstoneTorchOn)
                (and (id? block StonePressurePlate WoodenPressurePlate) (bit-set? 0 data))
                (and (id? block RedstoneWire) (> data 0))
                (and (id? block Lever StoneButton WoodenButton) (bit-set? 3 data))
                (and (id? block RedstoneRepeaterBlockOn) (= (bitwise-and data #b11) (repeater-data-in (+ i a) (+ k c) i k)))
                (receives-power? (+ i a) (+ j b) (+ k c) #t)))))
      
      (bind (a b c) (case (bitwise-and (effective-data-ref i j k) #b11)
                      ((0) (list  0 0  1))
                      ((1) (list -1 0  0))
                      ((2) (list  0 0 -1))
                      ((3) (list  1 0  0)))
        (side-powered? a b c)))
    
    (define (repeater-update-list data)
      (case (bitwise-and data #b11)
        ((0) (vector-ref attached-abc 3))
        ((1) (vector-ref attached-abc 2))
        ((2) (vector-ref attached-abc 4))
        ((3) (vector-ref attached-abc 1))))
    
    (define (powered-piston? i j k data)
      (or (receives-power? i (+ j 1) k)
          (receives-power? i j k #f (case (bitwise-and data #b111)
                                      ((0) (list i (- j 1) k))
                                      ((1) (list i (+ j 1) k))
                                      ((2) (list i j (- k 1)))
                                      ((3) (list i j (+ k 1)))
                                      ((4) (list (- i 1) j k))
                                      ((5) (list (+ i 1) j k))
                                      (else (list i j k))))))
    
    (define (piston-update-list data)
      (case (bitwise-and data #b111)
        ((0) (vector-ref attached-abc 5))
        ((1) (vector-ref attached-abc 0))
        ((2) (vector-ref attached-abc 3))
        ((3) (vector-ref attached-abc 4))
        ((4) (vector-ref attached-abc 1))
        ((5) (vector-ref attached-abc 2))
        (else '())))
    
    (define (piston-extend i j k data piston-data)
      (define (count-blocks a b c number)
        (let ((next (+ number 1)))
          (with-block (+ i (* a next)) (+ j (* b next)) (+ k (* c next))
            (lambda (section index block data)
              (cond ((or (memq? block unmovable-objects) (and (id? block Piston StickyPiston) (bit-set? 3 data)))
                     #f)
                    ((memq? block break-extend)
                     number)
                    (else
                     (if (= number 12)
                         #f
                       (count-blocks a b c next))))))))
      
      (let ((number (case data
                      ((0) (count-blocks  0 -1  0 0))
                      ((1) (count-blocks  0  1  0 0))
                      ((2) (count-blocks  0  0 -1 0))
                      ((3) (count-blocks  0  0  1 0))
                      ((4) (count-blocks -1  0  0 0))
                      ((5) (count-blocks  1  0  0 0)))))
        (when number
          (let ((block #f)
                (block-data #f)
                (temp #f)
                (temp-data #f))
            (data-set! i j k (bit-set data 3 #t))
            (loop (for x from 0 to number)
                  (bind (i j k) (case data
                                  ((0) (list i (- j (+ x 1)) k))
                                  ((1) (list i (+ j (+ x 1)) k))
                                  ((2) (list i j (- k (+ x 1))))
                                  ((3) (list i j (+ k (+ x 1))))
                                  ((4) (list (- i (+ x 1)) j k))
                                  ((5) (list (+ i (+ x 1)) j k)))
                    (with-field i j k
                      (lambda (section index)
                        (when section
                          (if (= x 0)
                              (begin
                                (set! block (block-ref section index))
                                (set! block-data (data-ref section index))
                                (piston-block-set! section index PistonHead)
                                (piston-data-set! section index piston-data)
                                (blocklight-set! section index 0))
                            (begin
                              (set! temp (block-ref section index))
                              (set! temp-data (data-ref section index))
                              (piston-block-set! section index block)
                              (piston-data-set! section index block-data)
                              (blocklight-set! section index 0)
                              (set! block temp)
                              (set! block-data temp-data))))
                        (update-blocks i j k single-abc))))))
          (with-field i j k
            (lambda (section index)
              (when section
                (play-3d-sound "sound/piston/out" (section/index->position section index))))))))
    
    (define (piston-retract i j k block-id data-id)
      (define (retract-direction a b c)
        (with-block (+ i a) (+ j b) (+ k c)
          (lambda (section index block data)
            (piston-block-set! section index 0)
            (piston-data-set! section index 0)
            (update-blocks (+ i a) (+ j b) (+ k c) single-abc)
            (when (= block-id 29)
              (with-block (+ i (* a 2)) (+ j (* b 2)) (+ k (* c 2))
                (lambda (fore-section fore-index fore-block fore-data)
                  (unless (or (memq? fore-block unmovable-objects) (memq? fore-block break-extend) (and (id? fore-block Piston StickyPiston) (bit-set? 3 fore-data)))
                    (piston-block-set! section index fore-block)
                    (piston-data-set! section index fore-data)
                    (piston-block-set! fore-section fore-index 0)
                    (piston-data-set! fore-section fore-index 0)
                    (update-blocks (+ i a) (+ j b) (+ k c) (piston-update-list data-id)))))))))
      
      (data-set! i j k (bit-set data-id 3 #f))
      (case (bitwise-and data-id #b111)
        ((0) (retract-direction  0 -1  0))
        ((1) (retract-direction  0  1  0))
        ((2) (retract-direction  0  0 -1))
        ((3) (retract-direction  0  0  1))
        ((4) (retract-direction -1  0  0))
        ((5) (retract-direction  1  0  0)))
      (with-field i j k
        (lambda (section index)
          (when section
            (play-3d-sound "sound/piston/in" (section/index->position section index))))))
    
    (define (update-piston-head i j k data)
      (bind (i j k) (case (bitwise-and data #b111)
                      ((0) (list i (+ j 1) k))
                      ((1) (list i (- j 1) k))
                      ((2) (list i j (+ k 1)))
                      ((3) (list i j (- k 1)))
                      ((4) (list (+ i 1) j k))
                      ((5) (list (- i 1) j k))
                      (else (list #f #f #f)))
        (when i
          (update-redstone-component i j k (effective-block-ref i j k)))))
    
    (define (update-redstone-component i j k block)
      (ccase block
        ((RedstoneLampOn RedstoneLampOff)
         (if (receives-power? i j k)
             (block-set! i j k RedstoneLampOn)
           (block-set! i j k RedstoneLampOff)))
        ((Piston StickyPiston)
         (let ((data (effective-data-ref i j k)))
           (if (powered-piston? i j k data)
               (unless (bit-set? 3 data)
                 (piston-extend i j k data (if (id? block StickyPiston) (bit-set data 3 #t) data)))
             (when (bit-set? 3 data)
               (piston-retract i j k block data)))))
        ((WoodenDoorBlock IronDoorBlock)
         (let ((data (effective-data-ref i j k)))
           (if (bit-set? 3 data)
               (begin
                 (data-set! i j k (bit-set data 1 (receives-power? i j k)))
                 (add-queue i (- j 1) k))
             (let ((open? (or (receives-power? i j k) (bit-set? 1 (effective-data-ref i (+ j 1) k)))))
               (data-set! i j k (bit-set data 2 open?))
               (when change?
                 (door-sound open?))))))))
    
    (define (door-sound open?)
      (play-sound-file
        (if open?
            "sound/random/door_open"
          "sound/random/door_close")
        volume: .5))                    
    
    (define (repeater-data-out r-i r-k from-i from-k)
      (cond ((< r-i from-i) 3)
            ((> r-i from-i) 1)
            ((< r-k from-k) 0)
            ((> r-k from-k) 2)
            (else -1)))
    
    (define (repeater-data-in r-i r-k from-i from-k)
      (cond ((< r-i from-i) 1)
            ((> r-i from-i) 3)
            ((< r-k from-k) 2)
            ((> r-k from-k) 0)
            (else -1)))
    
    (define (attached-to-data block-i block-j block-k comp-i comp-j comp-k)
      (cond ((> block-i comp-i) '(2))
            ((< block-i comp-i) '(1))
            ((> block-j comp-j) '(0 7))
            ((< block-j comp-j) '(5 6))
            ((> block-k comp-k) '(4))
            ((< block-k comp-k) '(3))))
    
    (define (attached-update-list data)
      (case (bitwise-and data #b111)
        ((0 7) (vector-ref attached-abc 0))
        ((1)   (vector-ref attached-abc 1))
        ((2)   (vector-ref attached-abc 2))
        ((3)   (vector-ref attached-abc 3))
        ((4)   (vector-ref attached-abc 4))
        ((5 6) (vector-ref attached-abc 5))))
    
    (define (connected-redstone-to? block-i block-j block-k wire-i wire-j wire-k)
      (define (side-connected? side-i side-j side-k)
        (with-block side-i side-j side-k
          (lambda (section index side-id side-data-id)
            (or (id? side-id RedstoneWire)
                (memq? side-id redstone-power-components)
                (and (id? side-id RedstoneRepeaterBlockOn RedstoneRepeaterBlockOff) (memq? (bitwise-and side-data-id #b11) (cond ((/= side-i wire-i) '(1 3))
                                                                                                                                 (else '(0 2)))))
                (and (or (not (get-cube?~ (id->block side-id))) 
                         (id? side-id Glass BeaconBlock))
                     (id? (effective-block-ref side-i (- side-j 1) side-k) RedstoneWire))
                (and (or (get-opaque-cube?~ (id->block side-id))
                         (id? side-id Glowstone)
                         (and (id? side-id StoneSlab WoodenSlab) (> side-data-id 7)))
                     (= (effective-block-ref side-i (+ side-j 1) side-k) RedstoneWire)
                     (or (not (get-cube?~ (id->block (effective-block-ref wire-i (+ wire-j 1) wire-k))))
                         (id? (effective-block-ref wire-i (+ wire-j 1) wire-k) Glass BeaconBlock)))))))
      
      (let ((wire-side (cond ((< block-i wire-i) 'left)
                             ((> block-i wire-i) 'right)
                             ((< block-k wire-k) 'back)
                             ((> block-k wire-k) 'front)))
            (left?  (side-connected? (- wire-i 1) wire-j wire-k))
            (right? (side-connected? (+ wire-i 1) wire-j wire-k))
            (back?  (side-connected? wire-i wire-j (- wire-k 1)))
            (front? (side-connected? wire-i wire-j (+ wire-k 1))))
        (or (not (or left? right? back? front?))
            (case wire-side
              ((left) (or left? (and right? (not back?) (not front?))))
              ((right) (or right? (and left? (not back?) (not front?))))
              ((back) (or back? (and front? (not left?) (not right?))))
              ((front) (or front? (and back? (not left?) (not right?))))))))
    
    (let (iter (component item))
      (bind (i j k block) component
        (let ((real-block (effective-block-ref i j k)))
          (ccase block
            ((RedstoneTorchOff RedstoneTorchOn)
             (when (= block real-block)
               (if (or delayed? first-call?)
                   (block-set! i j k (if (powered-torch? i j k) RedstoneTorchOff RedstoneTorchOn))
                 (let ((power? (powered-torch? i j k)))
                   (when (not (id? real-block (if power? RedstoneTorchOff RedstoneTorchOn)))
                     (set-repeaters~ game (cons (new-repeater sector i j k 1 (if power? 'off 'on) with-field) (get-repeaters~ game)))))))
             (when (or (and first-call? (not delayed?)) change?)
               (update-blocks i j k double-abc)))
            
            ((RedstoneWire)
             (when (= block real-block)
               (data-set! i j k (wire-power i j k)))
             (when (or first-call? change?)
               (update-blocks i j k double-abc)))
            
            ((RedstoneRepeaterBlockOn RedstoneRepeaterBlockOff)
             (when (= block real-block)
               (if delayed?
                   (block-set! i j k (if (eq? delayed? 'on) RedstoneRepeaterBlockOn RedstoneRepeaterBlockOff))
                 (let ((power? (powered-repeater? i j k)))
                   (when (not (id? real-block (if power? RedstoneRepeaterBlockOn RedstoneRepeaterBlockOff)))
                     (set-repeaters~ game (cons (new-repeater sector i j k (arithmetic-shift-right (bitwise-and (effective-data-ref i j k) #b1100) 2) (if power? 'on 'off) with-field) (get-repeaters~ game)))))))
             (when (or (and first-call? (not delayed?)) change?)
               (update-blocks i j k (repeater-update-list (effective-data-ref i j k)))))
            
            ((Lever)
             (update-blocks i j k (attached-update-list (effective-data-ref i j k))))
            
            ((WoodenButton StoneButton)
             (let ((data (effective-data-ref i j k)))
               (when (and delayed? (bit-set? 3 data))
                 (set-repeaters~ game (cons (new-repeater sector i j k (if (id? block WoodenButton) 15 10) #f with-field) (get-repeaters~ game))))
               (update-blocks i j k (attached-update-list data))))
            
            ((WoodenPressurePlate StonePressurePlate)
             (when delayed?
               (data-set! i j k 1))
             (update-blocks i j k (vector-ref attached-abc 5)))
            
            ((RedstoneLampOn RedstoneLampOff Piston StickyPiston WoodenDoorBlock IronDoorBlock)
             (when (= block real-block)
               (update-redstone-component i j k block))
             (when (or first-call? (and change? (id? block Piston StickyPiston)))
               (update-blocks i j k single-abc)))
            
            ((TNT)
             (when (receives-power? i j k)
               (with-field i j k
                 (lambda (section index)
                   (when section
                     (invoke-block-action (section/index->position section index))))))
             (when first-call?
               (update-blocks i j k single-abc)))
            
            ((CommandBlock)
             (let ((data (effective-data-ref i j k)))
               (if (bit-set? 0 data)
                   (unless (receives-power? i j k)
                     (data-set! i j k (bit-set data 0 #f)))
                 (when (receives-power? i j k)
                   (with-field i j k
                     (lambda (section index)
                       (when section
                         (data-set! i j k (bit-set data 0 #t))
                         (invoke-block-action (section/index->position section index))))))))
             (when first-call?
               (update-blocks i j k single-abc)))
            
            ((PistonHead)
             (when (= block real-block)
               (update-piston-head i j k (effective-data-ref i j k)))
             (when (or first-call? change?)
               (update-blocks i j k single-abc)))
            
            (else
             (unless delayed?
               (update-blocks i j k single-abc))))))
      (when first-call?
        (set! first-call? #f))
      (when change?
        (set! change? #f))
      (when delayed?
        (set! delayed? #f))
      (unless (queue-empty? update-queue)
        (iter (dequeue update-queue)))))))
