;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; World Tasks
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2013
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.task jazz


(import (gambit.log)
        (world.log))


;;;
;;;; Tasks
;;;


(definition package tasks
  (make-table test: eq?))


(definition public (get-tasks)
  tasks)


(definition public (register-task name context thunk)
  (let ((thread (new-thread thunk name)))
    (let ((task (new Task name context thread)))
      (table-set! tasks name task)
      task)))


(definition public (unregister-task name)
  (table-clear tasks name))


(definition public (iterate-tasks context proc)
  (iterate-table tasks
    (lambda (name task)
      (when (eq? (get-context~ task) context)
        (proc task)))))


(definition protected (start-tasks context)
  (iterate-tasks context
    (lambda (task)
      (start~ task))))


(definition protected (stop-tasks context)
  (iterate-tasks context
    (lambda (task)
      (stop~ task)
      (without-task-mutex
        (lambda ()
          (thread-join! (get-thread~ task))))
      (unregister-task (get-name~ task)))))


;;;
;;;; Task
;;;


(class Task extends Object
  
  
  (slot name    getter generate)
  (slot context getter generate)
  (slot thread  getter generate)
  
  
  (method override (initialize name context thread)
    (set! name~self name)
    (set! context~self context)
    (set! thread~self thread))
  
  
  (method protected (start)
    (thread-start! thread))
  
  
  (method protected (stop)
    (thread-send thread
      (lambda (exit)
        (continuation-return exit #f)))))


;;;
;;;; Mutex
;;;


(definition public task-mutex
  (make-mutex 'task))


(definition public (with-task-mutex state thunk)
  (let ((log-context (current-log-context)))
    (log-transition log-context waiting-state)
    (mutex-lock! task-mutex)
    (log-transition log-context state)
    (prog1 (thunk)
      (mutex-unlock! task-mutex))))


(definition public (without-task-mutex thunk)
  (mutex-unlock! task-mutex)
  (prog1 (thunk)
    (mutex-lock! task-mutex)))


;;;
;;;; Control
;;;


;; gives a safe way to exit thread or other needs
(definition public (task-sleep duration exit state)
  (let ((log-context (current-log-context)))
    (log-transition log-context waiting-state)
    (let ((proc (thread-receive duration #f)))
      (when proc
        (proc exit)))
    (when state
      (log-transition log-context state)))))
