;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Tasks
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is WorldScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2014
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See http://github.com/gcartier/world for details.


(module world.task jazz


(import (gambit.log)
        (jazz.debuggee)
        (world.log))


;;;
;;;; Tasks
;;;


(definition package tasks
  (make-table test: eq?))


(definition public (get-tasks)
  tasks)


(definition public (register-task name procedure)
  (let ((actual (table-ref tasks name #f)))
    (let ((actual-context (and actual (get-context~ actual))))
      (let ((task (new Task name procedure)))
        (when actual-context
          (set-context~ task actual-context))
        (table-set! tasks name task)
        task))))


(definition public (find-task name)
  (table-ref tasks name #f))


(definition public (require-task name)
  (table-ref tasks name))


(definition public (iterate-tasks proc)
  (iterate-table tasks
    (lambda (name task)
      (proc task))))


(definition protected (start-task name)
  (let ((task (find-task name)))
    (when task
      (start~ task))))


(definition protected (stop-task name (stop-thread #f))
  (let ((task (find-task name)))
    (when task
      (stop~ task stop-thread))))


(definition protected (dump-tasks)
  (iterate-tasks
    (lambda (task)
      (dump~ task))))


;;;
;;;; Task
;;;


(definition public task-stopping?
  (make-parameter #f))


(class Task extends Object
  
  
  (slot name      getter generate)
  (slot procedure getter generate)
  (slot ready     getter generate)
  (slot thread    getter generate)
  (slot context   accessors generate)
  
  
  (method override (initialize name procedure)
    (set! name~self name)
    (set! procedure~self procedure)
    (set! ready~self (make-mutex))
    (set! thread~self #f)
    (set! context~self #f))
  
  
  (method override (print output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{a}" name))))
  
  
  (method protected (start)
    (set! thread (new-thread (lambda ()
                               (procedure self))
                             name))
    (mutex-lock! ready)
    (thread-start! thread)
    (mutex-lock! ready))
  
  
  (method protected (ready-task)
    (mutex-unlock! ready))
  
  
  (method protected (stop stop-thread)
    (when thread
      (if stop-thread
          (stop-thread)
        (task-stop thread))
      (task-stopping? #t)
      (without-task-mutex
        (lambda ()
          (thread-join! thread)))
      (task-stopping? #f)
      (set! thread #f)))
  
  
  (method (dump)
    (log-stop context)
    (log-cleanup context)))


;;;
;;;; Mutex
;;;


(definition public task-mutex
  (make-mutex 'task))


(definition public (with-task-mutex state thunk)
  (let ((log-context (current-log-context)))
    (log-transition log-context waiting-state)
    (mutex-lock! task-mutex)
    (log-transition log-context state)
    (prog1 (thunk)
      (mutex-unlock! task-mutex))))


(definition public (without-task-mutex thunk)
  (mutex-unlock! task-mutex)
  (prog1 (thunk)
    (mutex-lock! task-mutex)))


(definition public (task-mutex-owner?)
  (eq? (mutex-owner task-mutex) (current-thread)))


(add-debugger-release 'task-mutex
  (lambda ()
    (when (task-mutex-owner?)
      (mutex-unlock! task-mutex))))


;;;
;;;; Control
;;;


(definition public (task-sleep duration exit state)
  (let ((log-context (current-log-context)))
    (log-transition log-context sleeping-state)
    (let ((proc (thread-receive duration #f)))
      (when proc
        (proc exit)))
    (when state
      (log-transition log-context state))))


(definition public (task-wakeup thread)
  (thread-send thread
    #f))


(definition public (task-stop thread)
  (thread-send thread
    (lambda (exit)
      (continuation-return exit #f)))))
