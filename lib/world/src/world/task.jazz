;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; World Tasks
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2013
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.task jazz


(import (gambit.log)
        (jazz.debuggee)
        (world.log))


;;;
;;;; Tasks
;;;


(definition package tasks
  (make-table test: eq?))


(definition public (get-tasks)
  tasks)


(definition public (register-task name procedure)
  (let ((actual (table-ref tasks name #f)))
    (let ((actual-context (and actual (get-context~ actual))))
      (let ((task (new Task name procedure)))
        (when actual-context
          (set-context~ task actual-context))
        (table-set! tasks name task)
        task))))


(definition public (find-task name)
  (table-ref tasks name #f))


(definition public (require-task name)
  (table-ref tasks name))


(definition public (iterate-tasks proc)
  (iterate-table tasks
    (lambda (name task)
      (proc task))))


(definition protected (start-task name)
  (let ((task (find-task name)))
    (when task
      (start~ task))))


(definition protected (stop-task name)
  (let ((task (find-task name)))
    (when task
      (stop~ task))))


(definition protected (dump-tasks)
  (iterate-tasks
    (lambda (task)
      (dump~ task))))


;;;
;;;; Task
;;;


(definition public task-stopping?
  (make-parameter #f))


(class Task extends Object
  
  
  (slot name      getter generate)
  (slot procedure getter generate)
  (slot ready     getter generate)
  (slot thread    getter generate)
  (slot context   accessors generate)
  
  
  (method override (initialize name procedure)
    (set! name~self name)
    (set! procedure~self procedure)
    (set! ready~self (make-mutex))
    (set! thread~self #f)
    (set! context~self #f))
  
  
  (method override (print output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{a}" name))))
  
  
  (method protected (start)
    (set! thread (new-thread (lambda ()
                               (procedure self))
                             name))
    (mutex-lock! ready)
    (thread-start! thread)
    (mutex-lock! ready))
  
  
  (method protected (ready-task)
    (mutex-unlock! ready))
  
  
  (method protected (stop)
    (when thread
      (task-stop thread)
      (task-stopping? #t)
      (without-task-mutex
        (lambda ()
          (thread-join! thread)))
      (task-stopping? #f)
      (set! thread #f)))
  
  
  (method (dump)
    (log-stop context)
    (log-cleanup context)))


;;;
;;;; Mutex
;;;


(definition public task-mutex
  (make-mutex 'task))


(definition public (with-task-mutex state thunk)
  (let ((log-context (current-log-context)))
    (log-transition log-context waiting-state)
    (mutex-lock! task-mutex)
    (log-transition log-context state)
    (prog1 (thunk)
      (mutex-unlock! task-mutex))))


(definition public (without-task-mutex thunk)
  (mutex-unlock! task-mutex)
  (prog1 (thunk)
    (mutex-lock! task-mutex)))


(add-debugger-release 'task-mutex
  (lambda ()
    (when (eq? (mutex-owner task-mutex) (current-thread))
      (mutex-unlock! task-mutex))))


;;;
;;;; Control
;;;


(definition public (task-sleep duration exit state)
  (let ((log-context (current-log-context)))
    (log-transition log-context sleeping-state)
    (let ((proc (thread-receive duration #f)))
      (when proc
        (proc exit)))
    (when state
      (log-transition log-context state))))


(definition public (task-wakeup thread)
  (thread-send thread
    #f))


(definition public (task-stop thread)
  (thread-send thread
    (lambda (exit)
      (continuation-return exit #f)))))
