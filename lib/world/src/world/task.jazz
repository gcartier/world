;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Tasks
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.task jazz


(import (jazz.debuggee)
        (world.configure)
        (world.log))


;;;
;;;; Tasks
;;;


(definition package tasks
  (make-table test: eq?))


(definition public (get-tasks)
  tasks)


(definition public (register-task name procedure)
  (let ((task (new Task name procedure)))
    (table-set! tasks name task)
    task))


(definition public (find-task name)
  (table-ref tasks name #f))


(definition public (require-task name)
  (table-ref tasks name))


(definition public (iterate-tasks proc)
  (iterate-table tasks
    (lambda (name task)
      (proc task))))


(definition protected (start-task name)
  (let ((task (find-task name)))
    (when task
      (start~ task))))


(definition protected (stop-task name (stop-thread #f))
  (let ((task (find-task name)))
    (when (and task (eq? (get-state~ task) 'started))
      (stop~ task stop-thread))))


(definition protected (task-thread name)
  (get-thread~ (find-task name)))


;;;
;;;; Task
;;;


(definition public task-stopping?
  (make-parameter #f))


(class Task extends Object
  
  
  (slot name      getter generate)
  (slot procedure getter generate)
  (slot ready     getter generate)
  (slot thread    getter generate)
  (slot state     getter generate)
  
  
  (method override (initialize name procedure)
    (set! name~self name)
    (set! procedure~self procedure)
    (set! ready~self (make-mutex))
    (set! thread~self #f)
    (set! state~self 'initialized))
  
  
  (method override (print output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{a}" name))))
  
  
  (method protected (start)
    (set! thread (new-thread (lambda ()
                               (procedure self))
                             name))
    (when quantum-interval
      (thread-quantum-set! thread quantum-interval))
    (mutex-lock! ready)
    (thread-start! thread)
    (set! state 'started)
    (mutex-lock! ready))
  
  
  (method protected (ready-task)
    (mutex-unlock! ready))
  
  
  (method protected (stop stop-thread)
    (when thread
      (if stop-thread
          (stop-thread)
        (task-stop thread))
      (task-stopping? #t)
      (thread-base-priority-set! thread +infinity)
      (without-task-mutex
        (lambda ()
          (thread-join! thread)))
      (task-stopping? #f)
      (set! thread #f)
      (set! state 'stopped))))


(definition public (with-task task proc)
  (continuation-capture
    (lambda (exit)
      (ready-task~ task)
      (let (restart-loop)
        (with-current-loop
          (lambda ()
            (with-restart-catcher 'resume-loop (present-current-loop-restart)
              (lambda ()
                (proc exit)))))
        (restart-loop)))))


;;;
;;;; Mutex
;;;


(definition public task-mutex
  (make-mutex 'task))


(definition public (with-task-mutex thunk)
  (mutex-lock! task-mutex)
  (prog1 (thunk)
    (mutex-unlock! task-mutex)))


(definition public (without-task-mutex thunk)
  (mutex-unlock! task-mutex)
  (prog1 (thunk)
    (mutex-lock! task-mutex)))


(definition public (assert-task-mutex)
  (assert (task-mutex-owner?)))


(definition public (task-mutex-owner?)
  (eq? (mutex-owner task-mutex) (current-thread)))


(add-debugger-release 'task-mutex
  (lambda ()
    (when (task-mutex-owner?)
      (mutex-unlock! task-mutex))))


;;;
;;;; Control
;;;


(definition public (task-sleep duration exit)
  (let ((proc (thread-receive duration #f)))
    (when proc
      (proc exit)))
  ;; iterate in case someone called task-wakeup and we where already runnable
  (let (iter)
    (let ((proc (thread-receive 0. #f)))
      (when proc
        (proc exit)
        (iter)))))


(definition public (task-stop thread)
  (thread-send thread
    (lambda (exit)
      (continuation-return exit #f)))))
