;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Tasks
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.task jazz


(import (jazz.debuggee)
        (jazz.event)
        (jazz.window)
        (world)
        (world.configure)
        (world.support))


;;;
;;;; Threads
;;;


(definition protected (setup-threads)
  ;; heartbeat
  (when heartbeat-interval
    (set-heartbeat-interval! heartbeat-interval))
  ;; event
  (thread-base-priority-set! (event-thread) event-priority)
  (when quantum-interval
    (thread-quantum-set! (event-thread) quantum-interval))
  (set-event-synchronizer
    (lambda (thunk)
      (send-event
        (lambda ()
          (with-task-mutex
            thunk)))))
  (set-assert-event-synchronized
    (lambda ()
      (assert (primordial-thread?))
      (assert-task-mutex)))
  ;; message
  (when (window?)
    (thread-base-priority-set! (message-thread) message-priority)
    (when quantum-interval
      (thread-quantum-set! (message-thread) quantum-interval))
    (message-period-set! message-period)
    (message-sleep-set! message-sleep)))


;;;
;;;; Tasks
;;;


(definition public current-task
  (make-parameter #f))


(definition public current-exit
  (make-parameter #f))


(definition package named-tasks
  (make-table test: eq?))


(definition public (registered-task name procedure)
  (let ((task (new Task name procedure)))
    (table-set! named-tasks name task)
    task))


(definition public (find-task name)
  (table-ref named-tasks name #f))


(definition protected (start-task name/task (synchronous?: synchronous? #f))
  (let ((task (if (symbol? name/task) (find-task name/task) name/task)))
    (when task
      (start task synchronous?))))


(definition protected (stop-task name/task (needs-stop? #t))
  (let ((task (if (symbol? name/task) (find-task name/task) name/task)))
    (when (and task (eq? (get-state task) 'started))
      (stop task needs-stop?))))


(definition protected (halt-task name/task)
  (let ((task (if (symbol? name/task) (find-task name/task) name/task)))
    (when (and task (eq? (get-state task) 'started))
      (halt task))))


(definition protected (task-thread name)
  (get-thread (find-task name)))


(definition public (with-task task proc)
  (continuation-capture
    (lambda (exit)
      (ready-task task)
      (let (restart-loop)
        (with-current-loop
          (lambda ()
            (with-restart-catcher 'resume-loop (present-current-loop-restart)
              (lambda ()
                (parameterize ((current-task task)
                               (current-exit exit))
                  (proc exit))))))
        (restart-loop))))
  (stopped task))


(definition public (with-script-task task proc)
  (continuation-capture
    (lambda (exit)
      (parameterize ((current-task task)
                     (current-exit exit))
        (ready-task task)
        (proc exit))))
  (stopped task))


;;;
;;;; Task
;;;


;; quick hack for together init script and
;; i should definitely investigate just running
;; the script code in the current thread instead
(definition protected synchronous-task?
  (make-parameter #f))


(class Task extends Object
  
  
  (slot name      getter generate)
  (slot procedure getter generate)
  (slot ready     getter generate)
  (slot mutex     getter generate)
  (slot thread    getter generate)
  (slot state     getter generate)
  
  
  (method override (initialize self name procedure (priority: priority #f))
    (set! self.name name)
    (set! self.procedure procedure)
    (set! self.ready (make-mutex))
    (set! self.mutex (make-mutex))
    (set! self.thread (new-thread (lambda ()
                                    (procedure self))
                                  name))
    (when quantum-interval
      (thread-quantum-set! thread quantum-interval))
    (when priority
      (thread-base-priority-set! thread priority))
    (set! self.state 'initialized))
  
  
  (method override (print self output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{a}" name))))
  
  
  (method package (with-mutex self thunk)
    (mutex-lock! mutex)
    (prog1 (thunk)
      (mutex-unlock! mutex)))
  
  
  (method package (start self synchronous?)
    (mutex-lock! ready)
    (thread-start! thread)
    (when synchronous?
      (thread-join! thread))
    (set! state 'started)
    (mutex-lock! ready)
    (mutex-unlock! ready))
  
  
  (method package (ready-task self)
    (mutex-unlock! ready))
  
  
  (method package (stop self needs-stop?)
    (mutex-lock! mutex)
    (unless (eq? state 'stop)
      (when needs-stop?
        (task-stop thread))
      (set! state 'stopping)
      (if (eq? thread (current-thread))
          (mutex-unlock! mutex)
        (assert (task-mutex-owner?))
        (thread-base-priority-set! thread +infinity)
        (set! task-stopping thread)
        (mutex-unlock! task-mutex)
        (mutex-unlock! mutex)
        (thread-join! thread)
        (mutex-lock! task-mutex)
        (set! task-stopping #f)
        (condition-variable-broadcast! task-condvar))))
  
  
  (method package (halt self)
    (mutex-lock! mutex)
    (unless (eq? state 'stop)
      (task-stop thread)
      (set! state 'stopping)
      (mutex-unlock! mutex)))
  
  
  (method package (stopped self)
    (with-mutex self
      (lambda ()
        (set! state 'stopped))))
  
  
  (method package (stopping? self)
    (with-mutex self
      (lambda ()
        (or shutdown?
            (eq? state 'stopping))))))


;;;
;;;; Mutex
;;;


(definition public task-mutex
  (make-mutex 'task))

(definition protected task-condvar
  (make-condition-variable 'task))

(definition protected task-stopping
  #f)


(definition public (with-task-mutex thunk)
  (declare (proper-tail-calls))
  (when debug-deadlocks?
    (assert (neq? (mutex-state task-mutex) (current-thread))))
  (unwind-protect
      (let (loop)
        (mutex-lock! task-mutex)
        (if task-stopping
            (if (eq? (current-thread) task-stopping)
                (thunk)
              (mutex-unlock! task-mutex task-condvar)
              (loop))
          (thunk)))
    (mutex-unlock! task-mutex)))


(definition public (with-reentrant-task-mutex thunk)
  (if (task-mutex-owner?)
      (thunk)
    (with-task-mutex thunk)))


(definition public (assert-task-mutex)
  (let ((thread (current-thread))
        (owner (mutex-state task-mutex)))
    (when (neq? owner thread)
      (error "Task mutex is owned by {a} instead of {a}" owner thread))))


(definition public (task-mutex-owner)
  (mutex-state task-mutex))


(definition public (task-mutex-owner?)
  (eq? (mutex-state task-mutex) (current-thread)))


;;;
;;;; Shutdown
;;;


(definition protected shutdown?
  #f)

(definition protected shutdown-mutex
  (make-mutex 'shutdown))


(definition protected (request-shutdown)
  (set! shutdown? #t))

(definition protected (reset-shutdown)
  (set! shutdown? #f))


(definition protected (shutting-down thunk)
  (when debug-deadlocks?
    (assert (neq? (mutex-state shutdown-mutex) (current-thread))))
  (dynamic-wind
    (lambda ()
      (mutex-lock! shutdown-mutex)
      (set! shutdown? #t))
    thunk
    (lambda ()
      (set! shutdown? #f)
      (mutex-unlock! shutdown-mutex))))


;;;
;;;; Control
;;;


(proclaim (warn optimizations))


;; hack around sleep having a huge drift on windows
(definition protected (adjust-wait wait)
  (cond-expand
    (windows (/ wait 2.))
    (else wait)))


;; rate = 60
;; period = 1/60
;; 0                      1/90             1/60
;; |-----------------------|----------------|-----------------------------
;;     period - duration       period / 3            duration / 10
(definition public (throttle-wait name period <fl> duration <fl>)
  (assert (>= duration 0.)
    (let ((remaining (- period duration))
          (period/3 (/ period 3.)))
      ;; waiting at least period / 3 ensures a 2 / 3 | 1 / 3 ratio
      ;; between running and sleeping so we never starve other tasks
      (if (>= remaining period/3)
          remaining
        ;; ignore large duration like coming back from computer sleep
        (let ((effective-duration (if (> duration max-elapse) max-elapse duration)))
          ;; this needs more thinking through
          ;; maybe we should only duration throttle the render task!?
          (let ((duration/10 (/ effective-duration 10.))) ;; start with a very conservative factor to make sure we do not
            ;; impact fast machines. until a more sophisticated algorithm...
            ;; waiting at least duration / 10 is essential on slow machines
            ;; where waiting period / 3 would be too small to be of consequence
            (if (>= duration/10 period/3)
                duration/10
              period/3)))))))


(definition public (message-sleep period <fl> duration <fl>)
  (let ((wait (throttle-wait 'message period duration)))
    (sleep (adjust-wait wait))))


(definition public (task-sleep task <Task> timeout <fl> exit)
  (let ((proc (thread-receive timeout #f)))
    (when proc
      (proc exit))))


(definition public (task-done task <Task> exit)
  (task-sleep task +inf.0 exit))


(definition public (task-halt task <Task> exit)
  (let ((proc (thread-receive 0 #f)))
    (when proc
      (proc exit))))


(definition public (task-wait task <Task> period <fl> duration <fl> exit)
  (let ((wait (throttle-wait (get-name task) period duration)))
    (task-sleep task wait exit)))


(definition public (task-wakeup thread proc)
  (thread-send thread
    proc))


(definition public (task-stop thread)
  (thread-send thread
    (lambda (exit)
      ;; trying to debug a crash as this should not happen
      (assert exit)
      (continuation-return exit #f))))


(proclaim (not warn optimizations))


;;;
;;;; Debug
;;;


(definition protected (snapshot-tasks)
  (define (snapshot name task)
    (let ((thread (get-thread task)))
      (list name (present-thread-state (thread-state thread)))))
  
  (define (snapshot-tasks)
    (let ((queue (new-queue)))
      (iterate-table named-tasks
        (lambda (name task)
          (enqueue queue (snapshot name task))))
      (queue-list queue)))
  
  (list
    (list 'task-mutex (mutex-state task-mutex))
    (list 'generate-mutex (mutex-state world.generation:generate-mutex))
    (list 'collide-mutex (mutex-state world.collision:collide-mutex))
    (snapshot-tasks))))
