;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Tasks
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2016
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.task jazz


(import (jazz.debuggee)
        (world.configure)
        (world.geometry.syntax (phase syntax))
        (world.homogeneous)
        (world.settings)
        (world.support))


;;;
;;;; Tasks
;;;


(definition package tasks
  (make-table test: eq?))


(definition public (get-tasks)
  tasks)


(definition public (register-task name procedure)
  (let ((task (new Task name procedure)))
    (table-set! tasks name task)
    task))


(definition public (find-task name)
  (table-ref tasks name #f))


(definition public (require-task name)
  (table-ref tasks name))


(definition public (iterate-tasks proc)
  (iterate-table tasks
    (lambda (name task)
      (proc task))))


(definition protected (start-task name/task)
  (let ((task (if (symbol? name/task) (find-task name/task) name/task)))
    (when task
      (start~ task))))


(definition protected (stop-task name/task (stop-thread #f))
  (let ((task (if (symbol? name/task) (find-task name/task) name/task)))
    (when (and task (eq? (get-state~ task) 'started))
      (stop~ task stop-thread))))


(definition protected (task-thread name)
  (get-thread~ (find-task name)))


(definition public (with-task task proc)
  (continuation-capture
    (lambda (exit)
      (ready-task~ task)
      (let (restart-loop)
        (with-current-loop
          (lambda ()
            (with-restart-catcher 'resume-loop (present-current-loop-restart)
              (lambda ()
                (proc exit)))))
        (restart-loop))))
  (stopped~ task))


(definition protected stopping-tasks?
  #f)


(definition protected (shutdown-tasks zone)
  (dynamic-wind
    (lambda ()
      (set! stopping-tasks? #t))
    (lambda ()
      (stop-tasks~ zone))
    (lambda ()
      (set! stopping-tasks? #f))))


;;;
;;;; Task
;;;


(class Task extends Object
  
  
  (slot name      getter generate)
  (slot procedure getter generate)
  (slot ready     getter generate)
  (slot mutex     getter generate)
  (slot thread    getter generate)
  (slot state     getter generate)
  
  
  (method override (initialize name procedure)
    (set! name~self name)
    (set! procedure~self procedure)
    (set! ready~self (make-mutex))
    (set! mutex~self (make-mutex))
    (set! thread~self #f)
    (set! state~self 'initialized))
  
  
  (method override (print output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{a}" name))))
  
  
  (method (with-mutex thunk)
    (mutex-lock! mutex)
    (prog1 (thunk)
      (mutex-unlock! mutex)))
  
  
  (method protected (start)
    (set! thread (new-thread (lambda ()
                               (procedure self))
                             name))
    (when quantum-interval
      (thread-quantum-set! thread quantum-interval))
    (mutex-lock! ready)
    (thread-start! thread)
    (set! state 'started)
    (mutex-lock! ready))
  
  
  (method protected (ready-task)
    (mutex-unlock! ready))
  
  
  (method protected (stop stop-thread)
    (mutex-lock! mutex)
    (unless (eq? state 'stop)
      (if stop-thread
          (stop-thread)
        (task-stop thread))
      (set! state 'stopping)
      (if (eq? thread (current-thread))
          (mutex-unlock! mutex)
        (thread-base-priority-set! thread +infinity)
        (without-task-mutex
          (lambda ()
            (mutex-unlock! mutex)
            (thread-join! thread))))))
  
  
  (method protected (stopped)
    (with-mutex
      (lambda ()
        (set! state 'stopped))))
  
  
  (method protected (stopping?)
    (with-mutex
      (lambda ()
        (or stopping-tasks?
            (eq? state 'stopping))))))


;;;
;;;; Mutex
;;;


(definition public task-mutex
  (make-mutex 'task))


(definition public (with-task-mutex thunk)
  (unwind-protect
      (begin
        (mutex-lock! task-mutex)
        (thunk))
    (mutex-unlock! task-mutex)))


(definition public (with-maybe-task-mutex thunk)
  (if (task-mutex-owner?)
      (thunk)
    (with-task-mutex thunk)))


(definition public (without-task-mutex thunk)
  (unwind-protect
      (begin
        (mutex-unlock! task-mutex)
        (thunk))
    (mutex-lock! task-mutex)))


(definition public (assert-task-mutex)
  (let ((thread (current-thread))
        (owner (mutex-owner task-mutex)))
    (when (neq? owner thread)
      (error "Mutex task is owned by {a} instead of {a}" owner thread))))


(definition public (task-mutex-owner?)
  (eq? (mutex-owner task-mutex) (current-thread)))


;;;
;;;; Control
;;;


(proclaim (warn optimizations))


;; hack around sleep having a huge drift on windows
(definition protected (adjust-wait wait)
  (cond-expand
    (windows (/ wait 2.))
    (else wait)))


;; rate = 60
;; period = 1/60
;; 0                      1/90             1/60
;; |-----------------------|----------------|-----------------------------
;;     period - duration       period / 3            duration / 3
(definition public (throttle-wait name period <fl> duration <fl>)
  (let ((objective (- period duration))
        (period/3 (/ period 3.)))
    ;; waiting at least period / 3 ensures a 2 / 3 | 1 / 3 ratio
    ;; between running and sleeping so we never starve other tasks
    (if (>= objective period/3)
        objective
      period/3
      ;; this needs more thinking through
      ;; maybe we should only duration throttle the render task!?
      (let ((duration/3 (/ duration 10.))) ;; start with a very conservative factor to make sure we do not
                                           ;; impact fast machines. until a more sophisticated algorithm...
        ;; waiting at least duration / 3 is essential on slow machines
        ;; where waiting period / 3 would be too small to be of consequence
        (if (>= period/3 duration/3)
            (begin
              (when debug-throttle?
                (terminal 'throttle name 'period duration))
              period/3)
          (when debug-throttle?
            (terminal 'throttle name 'duration duration))
          duration/3)))))


(definition public (message-sleep period <fl> duration <fl>)
  (let ((wait (throttle-wait 'message period duration)))
    (sleep (adjust-wait wait))))


(definition public (task-sleep task <Task> period <fl> duration <fl> exit)
  (let ((wait (throttle-wait (get-name~ task) period duration)))
    (let ((proc (thread-receive (adjust-wait wait) #f)))
      (when proc
        (proc exit)))))


(definition public (task-wakeup thread proc)
  (thread-send thread
    proc))


(definition public (task-stop thread)
  (thread-send thread
    (lambda (exit)
      (continuation-return exit #f))))


(proclaim (not warn optimizations))


;;;
;;;; Debug
;;;


(definition protected (snapshot-tasks)
  (define (snapshot name task)
    (let ((thread (get-thread~ task)))
      (list name (present-thread-state (thread-state thread)))))
  
  (define (snapshot-tasks)
    (let ((queue (new-queue)))
      (iterate-table tasks
        (lambda (name task)
          (enqueue queue (snapshot name task))))
      (queue-list queue)))
  
  (list
    (list 'task-mutex (mutex-owner task-mutex))
    (list 'generate-mutex (mutex-owner world.generation:generate-mutex))
    (list 'collide-mutex (mutex-owner world.collision:collide-mutex))
    (snapshot-tasks))))
