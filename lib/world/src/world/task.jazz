;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Tasks
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.task jazz


(import (jazz.debuggee)
        (jazz.event)
        (jazz.window)
        (world)
        (world.configure)
        (world.settings)
        (world.support))


(definition protected debug-smoothness?
  (world-setting 'world.debug-smoothness? #f))

(definition protected smoothness-threshold <fl>
  (world-setting 'world.smoothness-threshold .1))


;;;
;;;; Threads
;;;


(definition protected (setup-threads)
  ;; heartbeat
  (when heartbeat-interval
    (set-heartbeat-interval! heartbeat-interval)))


(definition protected (setup-events)
  ;; event
  (thread-base-priority-set! (event-thread) event-priority)
  (when quantum-interval
    (thread-quantum-set! (event-thread) quantum-interval))
  (set-event-synchronizer
    (lambda (thunk)
      (send-event
        (lambda ()
          (with-task-mutex
            thunk)))))
  (set-assert-event-synchronized
    (lambda ()
      (assert (primordial-thread?))
      (assert-task-mutex)))
  ;; message
  (when (window?)
    (thread-base-priority-set! (message-thread) message-priority)
    (when quantum-interval
      (thread-quantum-set! (message-thread) quantum-interval))
    (message-period-set! message-period)
    (message-period-inactive-set! message-period-inactive)
    (message-sleep-set! message-sleep)))


;;;
;;;; Tasks
;;;


(definition public current-task
  (make-parameter #f))


(definition public current-exit
  (make-parameter #f))


(definition protected (start-task task (synchronous?: synchronous? #f))
  (start task synchronous?))


(definition protected (stop-task task)
  (stop task))


(definition protected (halt-task task)
  (halt task))


(definition public (with-task task proc)
  (continuation-capture
    (lambda (exit)
      (ready-task task)
      (let (restart-loop)
        (with-current-loop
          (lambda ()
            (with-restart-catcher 'resume-loop (present-current-loop-restart)
              (lambda ()
                (parameterize ((current-task task)
                               (current-exit exit))
                  (proc exit))))))
        (restart-loop))))
  @debug-abandoned
  (check-mutexes task)
  (stopped task))


(definition public (with-script-task task proc)
  (continuation-capture
    (lambda (exit)
      (parameterize ((current-task task)
                     (current-exit exit))
        (ready-task task)
        (proc exit))))
  (stopped task))


@debug-abandoned
(definition (check-mutexes task)
  (let ((mutexes (thread-mutexes (current-thread))))
    (when (not-null? mutexes)
      (error "Task {a} is ending but still owns {l}" (get-name task) mutexes))))


;;;
;;;; Task
;;;


;; quick hack for together init script and
;; i should definitely investigate just running
;; the script code in the current thread instead
(definition protected synchronous-task?
  (make-parameter #f))


(class Task extends Object
  
  
  (slot name     getter generate)
  (slot run      getter generate)
  (slot exit     getter generate)
  (slot ready    getter generate)
  (slot mutex    getter generate)
  (slot priority getter generate)
  (slot thread   getter generate)
  (slot state    getter generate)
  
  
  (method override (initialize self name run (exit: exit #f) (priority: priority #f))
    (set! self.name name)
    (set! self.run run)
    (set! self.exit exit)
    (set! self.ready (make-mutex))
    (set! self.mutex (make-mutex))
    (set! self.priority priority)
    (set! self.state 'stopped))
  
  
  (method override (print self output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{a}" (present-thread-name name)))))
  
  
  (method package (start self synchronous?)
    (mutex-lock! mutex)
    (when (eq? state 'stopped)
      (mutex-lock! ready)
      (set! thread (new-thread (lambda ()
                                 (run self))
                               name))
      (when quantum-interval
        (thread-quantum-set! thread quantum-interval))
      (when priority
        (thread-base-priority-set! thread priority))
      (thread-start! thread)
      (when synchronous?
        (thread-join! thread))
      (set! state 'started)
      (mutex-lock! ready)
      (mutex-unlock! ready))
    (mutex-unlock! mutex))
  
  
  (method package (ready-task self)
    (mutex-unlock! ready))
  
  
  (method package (stop self)
    (mutex-lock! mutex)
    (when (eq? state 'started)
      (if exit
          (exit self)
        (task-exit self))
      (set! state 'stopping)
      (if (eq? thread (current-thread))
          (mutex-unlock! mutex)
        (assert (task-mutex-owner?))
        (thread-base-priority-set! thread +infinity)
        (set! task-stopping thread)
        (mutex-unlock! task-mutex)
        (mutex-unlock! mutex)
        (thread-join! thread)
        (set! thread #f)
        (mutex-lock! task-mutex)
        (set! task-stopping #f)
        (condition-variable-broadcast! task-condvar)))
    (mutex-unlock! mutex))
  
  
  (method package (halt self)
    (mutex-lock! mutex)
    (when (eq? state 'started)
      (task-exit self)
      (set! thread #f)
      (set! state 'stopping))
    (mutex-unlock! mutex))
  
  
  (method package (stopped self)
    (mutex-lock! mutex)
    (set! state 'stopped)
    (mutex-unlock! mutex))
  
  
  (method package (started? self)
    (mutex-lock! mutex)
    (prog1 (eq? state 'started)
      (mutex-unlock! mutex)))
  
  
  (method package (stopping? self)
    (mutex-lock! mutex)
    (prog1 (or shutdown?
               (eq? state 'stopping))
      (mutex-unlock! mutex))))


;;;
;;;; Site
;;;


;; experiment to improve profiling results
(definition protected serialize-sites?
  (world-setting 'world.serialize-sites? #f))


;; only serialize sites when profiler active
(definition protected profiler-active?
  #f)

(definition protected (set-profiler-active? active?)
  (set! profiler-active? active?))


;;;
;;;; Mutex
;;;


(definition public task-mutex
  (make-mutex 'task))

(definition protected task-condvar
  (make-condition-variable 'task))

(definition protected task-stopping
  #f)


(definition public (with-task-mutex thunk)
  (declare (proper-tail-calls))
  (when debug-deadlocks?
    (assert (neq? (mutex-state task-mutex) (current-thread))))
  (if (and profiler-active? serialize-sites? (task-mutex-owner?))
      (thunk)
    (mutex-lock! task-mutex)
    (let ((start (and debug-smoothness? (current-seconds))))
      (unwind-protect
          (let (loop)
            (if task-stopping
                (if (eq? (current-thread) task-stopping)
                    (thunk)
                  (mutex-unlock! task-mutex task-condvar)
                  (mutex-lock! task-mutex)
                  (loop))
              (thunk)))
        (when debug-smoothness?
          (let ((duration (- (current-seconds) start)))
            (when (> duration smoothness-threshold)
              (let ((name (thread-name (current-thread))))
                (tell name duration)
                (world.moment:debug-moment (format "{a} {r precision: 1}s" name duration) category: 'smoothness function: 'with-task-mutex)))))
        (mutex-unlock! task-mutex)))))


(definition public (with-reentrant-task-mutex thunk)
  (if (task-mutex-owner?)
      (thunk)
    (with-task-mutex thunk)))


(definition public (assert-task-mutex)
  (let ((thread (current-thread))
        (owner (mutex-state task-mutex)))
    (when (neq? owner thread)
      (error "Task mutex is owned by {a} instead of {a}" owner thread))))


(definition public (task-mutex-owner)
  (mutex-state task-mutex))


(definition public (task-mutex-owner?)
  (eq? (mutex-state task-mutex) (current-thread)))


;;;
;;;; Bailout
;;;


(definition protected bailout?
  #f)

(definition protected (set-bailout? flag)
  (set! bailout? flag))

(definition bailout-mutex
  (make-mutex 'bailout))

(definition protected (with-bailout-mutex thunk)
  (unwind-protect
      (begin
        (mutex-lock! bailout-mutex)
        (thunk))
    (mutex-unlock! bailout-mutex)))


;;;
;;;; Shutdown
;;;


(definition protected shutdown?
  #f)

(definition protected shutdown-mutex
  (make-mutex 'shutdown))


(definition protected (request-shutdown)
  (set! shutdown? #t))

(definition protected (reset-shutdown)
  (set! shutdown? #f))


(definition protected (shutting-down thunk)
  (when debug-deadlocks?
    (assert (neq? (mutex-state shutdown-mutex) (current-thread))))
  (dynamic-wind
    (lambda ()
      (mutex-lock! shutdown-mutex)
      (set! shutdown? #t))
    thunk
    (lambda ()
      (set! shutdown? #f)
      (mutex-unlock! shutdown-mutex))))


;;;
;;;; Control
;;;


(proclaim (warn optimizations))


;; hack around sleep having a huge drift on windows
(definition protected (adjust-wait wait)
  (cond-expand
    (windows (/ wait 2.))
    (else wait)))


;; rate = 60
;; period = 1/60
;; 0                      1/90             1/60
;; |-----------------------|----------------|-----------------------------
;;     period - duration       period / 3            duration / 10
(definition public (throttle-wait name period <fl> duration <fl>)
  (assert (>= duration 0.)
    (let ((remaining (- period duration))
          (period/3 (/ period 3.)))
      ;; waiting at least period / 3 ensures a 2 / 3 | 1 / 3 ratio
      ;; between running and sleeping so we never starve other tasks
      (if (>= remaining period/3)
          remaining
        ;; ignore large duration like coming back from computer sleep
        (let ((effective-duration (if (> duration max-elapse) max-elapse duration)))
          ;; this needs more thinking through
          ;; maybe we should only duration throttle the render task!?
          (let ((duration/10 (/ effective-duration 10.))) ;; start with a very conservative factor to make sure we do not
            ;; impact fast machines. until a more sophisticated algorithm...
            ;; waiting at least duration / 10 is essential on slow machines
            ;; where waiting period / 3 would be too small to be of consequence
            (if (>= duration/10 period/3)
                duration/10
              period/3)))))))


(definition public (message-sleep period <fl> duration <fl>)
  (let ((wait (throttle-wait 'message period duration)))
    (sleep (adjust-wait wait))))


(definition public (task-sleep task <Task> timeout <fl> exit)
  (let ((proc (thread-receive timeout #f)))
    (when proc
      (proc exit))))


(definition public (task-done task <Task> exit)
  (task-sleep task +inf.0 exit))


(definition public (task-halt task <Task> exit)
  (let ((proc (thread-receive 0 #f)))
    (when proc
      (proc exit))))


(definition public (task-wait task <Task> period <fl> duration <fl> exit)
  (let ((wait (throttle-wait (get-name task) period duration)))
    (task-sleep task wait exit)))


(definition public (task-wakeup task <Task> (proc #f))
  (thread-send (get-thread task)
    proc))


(definition public (task-exit task <Task>)
  (thread-send (get-thread task)
    (lambda (exit)
      (continuation-return exit #f)))))
