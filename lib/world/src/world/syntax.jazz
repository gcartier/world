;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; World Syntax
;;;


(module world.syntax jazz


;;;
;;;; Context
;;;


(syntax public current-world-window
  (lambda (form-src usage-environment macro-environment)
    (sourcify-if
      `(cast <World-Window> *current-world-window*)
      form-src)))


(syntax public current-world
  (lambda (form-src usage-environment macro-environment)
    (sourcify-if
      `(cast <World> *current-world*)
      form-src)))


(syntax public current-world+
  (lambda (form-src usage-environment macro-environment)
    (sourcify-if
      `(cast <World+> *current-world*)
      form-src)))


(syntax public current-zone
  (lambda (form-src usage-environment macro-environment)
    (sourcify-if
      `(cast <Zone> *current-zone*)
      form-src)))


(syntax public current-zone+
  (lambda (form-src usage-environment macro-environment)
    (sourcify-if
      `(cast <Zone+> *current-zone*)
      form-src)))


(syntax public current-me
  (lambda (form-src usage-environment macro-environment)
    (sourcify-if
      `(cast <Player+> *current-me*)
      form-src)))


;;;
;;;; Allocation
;;;


(definition debug-allocations?
  #f)


(syntax public debug-allocation
  (lambda (form-src usage-environment macro-environment)
    (let ((name (cadr (source-code form-src))))
      (sourcify-if
        (if debug-allocations?
            `(when (debug-memory?)
               (debug-memory-allocation ',name))
          `(begin))
        form-src))))


;;;
;;;; Finite
;;;


(define debug-finite?
  #t)


(syntax public assert-finite
  (lambda (form-src usage-environment macro-environment)
    (let ((value (cadr (source-code form-src)))
          (val (generate-symbol "val")))
      (sourcify-if
        (if debug-finite?
            `(let ((,val ,value))
               (assert (finite? ,val))
               ,val)
          value)
        form-src))))


(syntax public allocate-vertex
  (lambda (form-src usage-environment macro-environment)
    (sourcify-if
      (if debug-finite?
          `(make-f32vector 3 +nan.0)
        `(make-f32vector 3))
      form-src))))
