;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Syntax
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.syntax jazz


(require (world.types (phase syntax)))

(import (scheme.syntax-rules (phase syntax)))


;;;
;;;; Simulation
;;;


(syntax public simulable-base
  (lambda (form-src usage-environment macro-environment)
    (sourcify-deep-if
      `(cond-expand
         (devel (or (simulation-base) 0))
         (else 0))
      form-src)))


(syntax public simulable-time
  (lambda (form-src usage-environment macro-environment)
    (sourcify-deep-if
      `(cond-expand
         (devel (let ((sim (simulation-time)))
                  (if sim
                      (sim)
                    (current-seconds))))
         (else (current-seconds)))
      form-src)))


(syntax public simulable-timestamp
  (lambda (form-src usage-environment macro-environment)
    (sourcify-deep-if
      `(cond-expand
         (devel (let ((sim (simulation-timestamp)))
                  (if sim
                      (sim)
                    (current-timestamp))))
         (else (current-timestamp)))
      form-src)))


(syntax public simulable-elapse
  (lambda (form-src usage-environment macro-environment)
    (let ((elapse (cadr (source-code form-src)))
          (elap (generate-symbol "elap")))
      (sourcify-deep-if
        `(cond-expand
           (devel (let ((sim (simulation-elapse))
                        (,elap ,elapse))
                    (if sim
                        (sim ,elap)
                      ,elap)))
           (else ,elapse))
        form-src))))


(syntax public simulable-evolution
  (lambda (form-src usage-environment macro-environment)
    (sourcify-deep-if
      `(cond-expand
         (devel (or (simulation-evolution) (current-evolution)))
         (else (current-evolution)))
      form-src)))


(syntax public simulable-off
  (lambda (form-src usage-environment macro-environment)
    (sourcify-deep-if
      `(cond-expand
         (devel (let ((sim (simulation-off)))
                  (when sim
                    (sim))))
         (else))
      form-src)))


(syntax public simulable-present
  (lambda (form-src usage-environment macro-environment)
    (let ((packet (cadr (source-code form-src)))
          (dts (caddr (source-code form-src)))
          (duration (cadddr (source-code form-src))))
      (sourcify-deep-if
        `(cond-expand
           (devel (let ((sim (simulation-present)))
                    (when sim
                      (sim ,packet ,dts ,duration))))
           (else))
        form-src))))


(syntax public simulable-flush
  (lambda (form-src usage-environment macro-environment)
    (let ((packet (cadr (source-code form-src))))
      (sourcify-deep-if
        `(cond-expand
           (devel (let ((sim (simulation-flush)))
                    (when sim
                      (sim ,packet))))
           (else))
        form-src))))


;;;
;;;; Bind
;;;


(syntax public bind-index
  (lambda (form-src usage-environment macro-environment)
    (let ((bindings (cadr (source-code form-src)))
          (index (caddr (source-code form-src)))
          (body (cdddr (source-code form-src))))
      (bind (x y z) (source-code bindings)
        (let ((idx (generate-symbol "idx")))
          (sourcify-deep-if
            `(let ((,idx ,index))
               (let ((,x (index-x ,idx))
                     (,y (index-y ,idx))
                     (,z (index-z ,idx)))
                 ,@body))
            form-src))))))


;;;
;;;; Case
;;;


;; placeholder until a real ccase in the code walker
(syntax public ccase
  (syntax-rules ()
    ((ccase target clause ...)
     (ecase target clause ...))))


(syntax public id?
  (lambda (form-src usage-environment macro-environment)
    (if (null? (cdr (source-code form-src)))
        (error "Ill-formed id?")
      (let ((target (cadr (source-code form-src)))
            (values (cddr (source-code form-src))))
        (sourcify-deep-if
          (with-uniqueness target
            (lambda (symbol)
              (case (length values)
                ((0)
                 (error "Ill-formed id?"))
                ((1)
                 `(= ,symbol ,(car values)))
                (else
                 `(or ,@(map (lambda (value)
                               `(= ,symbol ,value))
                             values))))))
          form-src)))))


;;;
;;;; Parameter
;;;


(syntax public define-parameter
  (lambda (form-src usage-environment macro-environment)
    (let ((name (cadr (source-code form-src)))
          (parameter (caddr (source-code form-src))))
      (sourcify-deep-if
        `(register-parameter ',name ,parameter)
        form-src))))


;;;
;;;; Area
;;;


(macro public (loop-polygons area element polygons offset . body)
  (let ((i (generate-symbol "i")))
    `(let ((,polygons (get-polygons ,area)))
       (when ,polygons
         (loop (for ,i from 0 below (fxround/ (f64vector-length ,polygons) polygon-float-size))
               (let ((,offset (* ,i polygon-float-size))
                     (,element (let ((polygons-elements (get-polygons-elements ,area))) (and polygons-elements (vector-ref polygons-elements ,i)))))
                 ,@body))))))


;;;
;;;; Model
;;;


(macro public (define-model name generate (showcase?: showcase? #t))
  `(register-model ',name
                   ,generate
                   ,showcase?))


(syntax public define-block-category
  (lambda (form-src usage-environment macro-environment)
    (bind (name . rest) (cdr (source-code form-src))
      (sourcify-deep-if
        `(definition protected ,name
           (register-block-category ',name ,@rest))
        form-src))))


(syntax public define-block-kind
  (lambda (form-src usage-environment macro-environment)
    (bind (name . rest) (cdr (source-code form-src))
      (sourcify-deep-if
        `(definition protected ,name
           (register-block-kind ',name ,@rest))
        form-src))))


(syntax public define-block
  (lambda (form-src usage-environment macro-environment)
    (let ((name (cadr (source-code form-src)))
          (id (caddr (source-code form-src)))
          (rest (cdddr (source-code form-src))))
      (sourcify-deep-if
        `(begin
           ,@(if (pair? (source-code id))
                 '()
               `((constant ,name ,id)))
           (register-block ',name ',id
             ,@rest))
        form-src))))


(syntax public define-biome
  (lambda (form-src usage-environment macro-environment)
    (bind (name class title id top fill color . rest) (cdr (source-code form-src))
      (let ((upcase-name (string->symbol (upcase-capitalized (symbol->string (source-code name))))))
        (sourcify-deep-if
          `(begin
             (constant ,name <fx> ,id)
             (register-biome ',name ,class ',title ',id ',top ',fill ',color
               ,@rest)
             ;; kinda quick hack
             (constant ,upcase-name <Biome> (id->biome ,id)))
          form-src)))))


(syntax public define-crafting-recipe
  (lambda (form-src usage-environment macro-environment)
    (let ((input (cadr (source-code form-src)))
          (output (caddr (source-code form-src)))
          (rest (cdddr (source-code form-src))))
      (sourcify-deep-if
        `(register-crafting-recipe ,input ,output ,@rest)
        form-src))))


(macro public (smooth/floor a b c offset . body)
  (let ((off 'off @todo (generate-symbol "off"))
        (x 'x @todo (generate-symbol "x"))
        (diff 'diff @todo (generate-symbol "diff")))
    `(let ((,off ,offset))
       (let ((,x (fxfloor ,off)))
         (let ((,diff (- ,off (cast <fl> ,x))))
           (let ((,a (bitwise-and ,x 255))
                 (,b ,diff)
                 (,c (smooth ,diff)))
             ,@body))))))


(macro public (permute x)
  `(s32vector-ref permutations ,x))


;;;
;;;; Part
;;;


(syntax public define-part
  (lambda (form-src usage-environment macro-environment)
    (let ((name (cadr (source-code form-src)))
          (rest (cddr (source-code form-src))))
      (sourcify-deep-if
        `(register-part ',name
           ,@rest)
        form-src))))


;;;
;;;; Change
;;;


(syntax public define-change
  (lambda (form-src usage-environment macro-environment)
    (let ((name (cadr (source-code form-src)))
          (rest (cddr (source-code form-src))))
      (sourcify-deep-if
        `(register-change ',name
           ,@rest)
        form-src))))


;;;
;;;; Contour
;;;


(macro public (define-contour-category name . rest)
  `(register-contour-category ',name ,@rest))


(macro public (define-contour signature . rest)
  (let ((name (if (symbol? signature) signature (car signature))))
    `(register-contour ',name ',signature ,@rest)))


(macro public (define-name-contour name signature . rest)
  `(begin
     (export ,name)
     (register-contour ',name ',signature ,@rest)))


;;;
;;;; Finite
;;;


(syntax public assert-finite
  (lambda (form-src usage-environment macro-environment)
    (let ((value (cadr (source-code form-src)))
          (val (generate-symbol "val")))
      (sourcify-deep-if
        (cond-expand
          (finite
           `(let ((,val ,value))
              (assert (finite? ,val))
              ,val))
          (else
           value))
        form-src))))


(syntax public allocate-vertex
  (lambda (form-src usage-environment macro-environment)
    (sourcify-deep-if
      (cond-expand
        (finite
         `(f64vector +nan.0 +nan.0 +nan.0))
        (else
         `(f64vector 0. 0. 0.)))
      form-src)))


;;;
;;;; History
;;;


(syntax public break-logic
  (lambda (form-src usage-environment macro-environment)
    (let ((name (cadr (source-code form-src))))
      (sourcify-deep-if
        `(break-logic-at ',name)
        form-src))))


(syntax public break-action
  (lambda (form-src usage-environment macro-environment)
    (let ((body (cdr (source-code form-src))))
      (sourcify-deep-if
        `(break-logic-action
           (lambda ()
             ,@body))
        form-src))))


;;;
;;;; Check
;;;


(definition (reconstruct-call call)
  (receive (proper rest) (split-list call)
    (if (not rest)
        `(list ',(car call) ,@(cdr call))
      `(append (list ',(car proper) ,@(cdr proper)) ,rest))))


(syntax public check-positive
  (lambda (form-src usage-environment macro-environment)
    (bind (name rank call . body) (cdr (source-code form-src))
      (let ((name (source-code name))
            (rank (source-code rank))
            (call (desourcify-all call)))
        (sourcify-deep-if
          `(if (not (>= ,name 0.))
               (error "(Argument {s}) POSITIVE NUMBER expected{%}{s}" ',rank ,(reconstruct-call call))
             ,@body)
          form-src))))))
