;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Syntax
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.syntax jazz


(import (scheme.syntax-rules (phase syntax)))


;;;
;;;; Context
;;;


(syntax public current-world-window
  (lambda (form-src usage-environment macro-environment)
    (sourcify-if
      `(cast <World-Window> *current-world-window*)
      form-src)))


(syntax public current-world-window+
  (lambda (form-src usage-environment macro-environment)
    (sourcify-if
      `(cast <World-Window+> *current-world-window*)
      form-src)))


(syntax public current-world
  (lambda (form-src usage-environment macro-environment)
    (sourcify-if
      `(cast <World> *current-world*)
      form-src)))


(syntax public current-world+
  (lambda (form-src usage-environment macro-environment)
    (sourcify-if
      `(cast <World+> *current-world*)
      form-src)))


(syntax public current-zone
  (lambda (form-src usage-environment macro-environment)
    (sourcify-if
      `(cast <Zone> *current-zone*)
      form-src)))


(syntax public current-zone+
  (lambda (form-src usage-environment macro-environment)
    (sourcify-if
      `(cast <Zone+> *current-zone*)
      form-src)))


(syntax public current-game
  (lambda (form-src usage-environment macro-environment)
    (sourcify-if
      `(cast <World-Game> *current-game*)
      form-src)))


(syntax public current-me
  (lambda (form-src usage-environment macro-environment)
    (sourcify-if
      `(cast <Player> *current-me*)
      form-src)))


(syntax public current-camera
  (lambda (form-src usage-environment macro-environment)
    (sourcify-if
      `(cast <Camera> *current-camera*)
      form-src)))


(syntax public current-motion
  (lambda (form-src usage-environment macro-environment)
    (sourcify-if
      `(cast <Motion> *current-motion*)
      form-src)))


(syntax public current-ambience
  (lambda (form-src usage-environment macro-environment)
    (sourcify-if
      `(cast <World-Ambience> *current-ambience*)
      form-src)))


(syntax public current-music
  (lambda (form-src usage-environment macro-environment)
    (sourcify-if
      `(cast <World-Music> *current-music*)
      form-src)))


(syntax public current-history
  (lambda (form-src usage-environment macro-environment)
    (sourcify-if
      `(cast <History> *current-history*)
      form-src)))


(syntax public current-tutorial
  (lambda (form-src usage-environment macro-environment)
    (sourcify-if
      '*current-tutorial*
      form-src)))


;;;
;;;; Case
;;;


;; placeholder until a real ccase in the code walker
(syntax public ccase
  (syntax-rules ()
    ((ccase target clause ...)
     (ecase target clause ...))))


(syntax public id?
  (lambda (form-src usage-environment macro-environment)
    (if (null? (cdr (source-code form-src)))
        (error "Ill-formed id?")
      (let ((target (cadr (source-code form-src)))
            (values (cddr (source-code form-src))))
        (sourcify-if
          (with-uniqueness target
            (lambda (symbol)
              (case (length values)
                ((0)
                 (error "Ill-formed id?"))
                ((1)
                 `(= ,symbol ,(car values)))
                (else
                 `(or ,@(map (lambda (value)
                               `(= ,symbol ,value))
                             values))))))
          form-src)))))


;;;
;;;; Parameter
;;;


(syntax public define-parameter
  (lambda (form-src usage-environment macro-environment)
    (let ((name (cadr (source-code form-src)))
          (parameter (caddr (source-code form-src))))
      (sourcify-if
        `(register-parameter ',name ,parameter)
        form-src))))


;;;
;;;; Properties
;;;


(macro public (properties . form)
  (let ((properties (cdr form)))
    `(begin
       ,@(expand-properties-marshalling form)
       ,@properties)))


(definition (expand-properties-marshalling form)
  (define (call-getter property)
    (string->symbol (string-append "get-" (symbol->string property) "~")))
  
  (define (call-setter property)
    (string->symbol (string-append "set-" (symbol->string property) "~")))
  
  (define (parse-direct form proc)
    (let ((direct (new-queue))
          (custom-marshalling? #f))
      (for-each (lambda (expr)
                  (if (eq? expr :custom-marshalling)
                      (set! custom-marshalling? #t)
                    (assert (and (pair? expr) (memq? (car expr) '(slot property)))
                      (enqueue direct (cadr expr)))))
                form)
      (proc (queue-list direct)
            custom-marshalling?)))
  
  (let ((inherited (car form)))
    (parse-direct (cdr form)
      (lambda (direct custom-marshalling?)
        (let ((properties (append inherited direct)))
          (if (not custom-marshalling?)
              `((method meta override (marshall-object obj)
                  (serialize-object (class-of obj)
                                    (vector ,@(map (lambda (property)
                                                     `(serialize (,(call-getter property) obj)))
                                                   properties))))
                (method meta override (unmarshall-object content)
                  (let ((obj (new self)))
                    ,@(map (lambda (property n)
                             `(,(call-setter property) obj (deserialize (vector-ref content ,n))))
                           properties
                           (naturals 0 (length properties)))
                    obj)))
            `((method meta override (marshall-size)
                ,(length properties))
              (method meta override (marshall-to obj content)
                ,@(map (lambda (property n)
                         `(vector-set! content ,n (serialize (,(call-getter property) obj))))
                       properties
                       (naturals 0 (length properties))))
              (method meta override (unmarshall-from obj content)
                ,@(map (lambda (property n)
                         `(,(call-setter property) obj (deserialize (vector-ref content ,n))))
                       properties
                       (naturals 0 (length properties)))))))))))


;;;
;;;; Task
;;;


(macro public (trace-task name str)
  `(when (and (or always-trace? (tracing?)) (memq? ',name task-trace))
     (debug-string ,str)))


;;;
;;;; Model
;;;


(macro public (define-model name generate (showcase?: showcase? #t))
  `(register-model ',name
                   ,generate
                   ,showcase?))


(macro public (define-block-model name generate (showcase?: showcase? #t))
  `(register-model ',name
                   ,generate
                   ,showcase?
                   'block))


(macro public (define-block-category name . rest)
  `(definition ,name
     (register-block-category ',name
                              ,@rest)))


(syntax public define-block
  (lambda (form-src usage-environment macro-environment)
    (let ((name (cadr (source-code form-src)))
          (id (caddr (source-code form-src)))
          (rest (cdddr (source-code form-src))))
      (sourcify-if
        `(begin
           ,@(if (pair? (source-code id))
                 '()
               `((constant ,name ,id)))
           (register-block ',name ',id
             ,@rest))
        form-src))))


;;;
;;;; Checkpoint
;;;


(syntax public checkpoint
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (let ((name (and (not-null? rest) (source-code (car rest)))))
        (sourcify-if
          (let ((checkpoint (generate-symbol "checkpoint")))
            `(let ((,checkpoint <Checkpoint> (static (register-checkpoint ',name))))
               (call-checkpoint ,checkpoint)))
          form-src)))))


;;;
;;;; Allocation
;;;


(definition debug-allocation?
  #f)


(syntax public debug-allocation
  (lambda (form-src usage-environment macro-environment)
    (let ((name (cadr (source-code form-src))))
      (sourcify-if
        (if debug-allocation?
            `(when (debug-memory?)
               (debug-memory-allocation ',name))
          `(begin))
        form-src))))


;;;
;;;; Finite
;;;


(syntax public assert-finite
  (lambda (form-src usage-environment macro-environment)
    (let ((value (cadr (source-code form-src)))
          (val (generate-symbol "val")))
      (sourcify-if
        (cond-expand
          (finite
            `(let ((,val ,value))
               (assert (finite? ,val))
               ,val))
          (else
            value))
        form-src))))


(syntax public allocate-vertex
  (lambda (form-src usage-environment macro-environment)
    (sourcify-if
      (cond-expand
        (finite
          `(make-f64vector 3 +nan.0))
        (else
          `(make-f64vector 3)))
      form-src)))


;;;
;;;; History
;;;


(syntax public break-logic
  (lambda (form-src usage-environment macro-environment)
    (let ((name (cadr (source-code form-src))))
      (sourcify-if
        `(break-logic-at ',name)
        form-src))))


(syntax public break-action
  (lambda (form-src usage-environment macro-environment)
    (let ((body (cdr (source-code form-src))))
      (sourcify-if
        `(break-logic-action
           (lambda ()
             ,@body))
        form-src)))))
