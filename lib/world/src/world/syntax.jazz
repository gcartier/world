;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; World Syntax
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2013
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.syntax jazz


;;;
;;;; Context
;;;


(syntax public current-world-window
  (lambda (form-src usage-environment macro-environment)
    (sourcify-if
      `(cast <World-Window> *current-world-window*)
      form-src)))


(syntax public current-world-window+
  (lambda (form-src usage-environment macro-environment)
    (sourcify-if
      `(cast <World-Window+> *current-world-window*)
      form-src)))


(syntax public current-world
  (lambda (form-src usage-environment macro-environment)
    (sourcify-if
      `(cast <World> *current-world*)
      form-src)))


(syntax public current-world+
  (lambda (form-src usage-environment macro-environment)
    (sourcify-if
      `(cast <World+> *current-world*)
      form-src)))


(syntax public current-zone
  (lambda (form-src usage-environment macro-environment)
    (sourcify-if
      `(cast <Zone> *current-zone*)
      form-src)))


(syntax public current-zone+
  (lambda (form-src usage-environment macro-environment)
    (sourcify-if
      `(cast <Zone+> *current-zone*)
      form-src)))


(syntax public current-me
  (lambda (form-src usage-environment macro-environment)
    (sourcify-if
      `(cast <Player+> *current-me*)
      form-src)))


(syntax public current-tutorial
  (lambda (form-src usage-environment macro-environment)
    (sourcify-if
      '*current-tutorial*
      form-src)))


;;;
;;;; Parameter
;;;


(syntax public define-parameter
  (lambda (form-src usage-environment macro-environment)
    (let ((name (cadr (source-code form-src)))
          (parameter (caddr (source-code form-src))))
      (sourcify-if
        `(register-parameter ',name ,parameter)
        form-src))))


;;;
;;;; Properties
;;;


(macro public (properties . form)
  (let ((properties (cdr form)))
    `(begin
       ,@(expand-properties form)
       ,@properties)))


(definition (expand-properties form)
  (define (call-getter property)
    (string->symbol (string-append "get-" (symbol->string property) "~")))
  
  (define (call-setter property)
    (string->symbol (string-append "set-" (symbol->string property) "~")))
  
  (let ((inherited (car form))
        (direct (map cadr (cdr form))))
    (let ((properties (append inherited direct)))
      `((method meta override (marshall-object obj)
          (serialize-object (class-of obj)
                            (vector ,@(map (lambda (property)
                                             `(serialize (,(call-getter property) obj)))
                                           properties))))
        (method meta override (unmarshall-object content)
          (let ((obj (new self)))
            ,@(map (lambda (property n)
                     `(,(call-setter property) obj (deserialize (vector-ref content ,n))))
                   properties
                   (naturals 0 (length properties)))))))))


;;;
;;;; Model
;;;


(macro public (define-model name generate (showcase?: showcase? #t))
  `(register-model ',name
                   ,generate
                   ,showcase?))


(macro public (define-block-model name generate (showcase?: showcase? #t))
  `(register-model ',name
                   ,generate
                   ,showcase?
                   'block))


;;;
;;;; Checkpoint
;;;


(syntax public checkpoint
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (let ((name (and (not-null? rest) (source-code (car rest)))))
        (sourcify-if
          (let ((checkpoint (generate-symbol "checkpoint")))
            `(let ((,checkpoint <Checkpoint> (static (register-checkpoint ',name))))
               (call-checkpoint ,checkpoint)))
          form-src)))))


;;;
;;;; Allocation
;;;


(definition debug-allocation?
  #f)


(syntax public debug-allocation
  (lambda (form-src usage-environment macro-environment)
    (let ((name (cadr (source-code form-src))))
      (sourcify-if
        (if debug-allocation?
            `(when (debug-memory?)
               (debug-memory-allocation ',name))
          `(begin))
        form-src))))


;;;
;;;; Finite
;;;


(define debug-finite?
  #f)


(syntax public assert-finite
  (lambda (form-src usage-environment macro-environment)
    (let ((value (cadr (source-code form-src)))
          (val (generate-symbol "val")))
      (sourcify-if
        (if debug-finite?
            `(let ((,val ,value))
               (assert (finite? ,val))
               ,val)
          value)
        form-src))))


(syntax public allocate-vertex
  (lambda (form-src usage-environment macro-environment)
    (sourcify-if
      (if debug-finite?
          `(make-f64vector 3 +nan.0)
        `(make-f64vector 3))
      form-src)))


;;;
;;;; History
;;;


(syntax public break-logic
  (lambda (form-src usage-environment macro-environment)
    (let ((name (cadr (source-code form-src)))
          (body (cddr (source-code form-src))))
      (sourcify-if
        `(when (break-logic? ',name)
           ,@body
           (mutex-unlock! task-mutex)
           (dynamic-wind (lambda () (breaked-logic-at ',name))
                         (lambda () (break))
                         (lambda () (breaked-logic-at #f))))
        form-src)))))
