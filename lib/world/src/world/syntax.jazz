;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Syntax
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2016
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.syntax jazz


(import (scheme.syntax-rules (phase syntax)))


;;;
;;;; Types
;;;


(class S32 extends S32Vector)
(class F32 extends F32Vector)
(class F64 extends F64Vector)
(class Vertex extends F64Vector)
(class Quaternion extends F64Vector)
(class Cuboid extends F64Vector)
(class Matrix extends F64Vector)
(class Index extends S32Vector)
(class Planar-Index extends S32Vector)
(class Dye extends F32Vector)


(add-primitive-type 's32 S32)
(add-primitive-type 'f32 F32)
(add-primitive-type 'f64 F64)
(add-primitive-type 'vertex Vertex)
(add-primitive-type 'quaternion Quaternion)
(add-primitive-type 'cuboid Cuboid)
(add-primitive-type 'matrix Matrix)
(add-primitive-type 'index Index)
(add-primitive-type 'planar-index Planar-Index)
(add-primitive-type 'dye Dye)


;;;
;;;; Context
;;;


(syntax public current-world-window
  (lambda (form-src usage-environment macro-environment)
    (sourcify-if
      `(cast <World-Window> *current-world-window*)
      form-src)))


(syntax public current-world-window+
  (lambda (form-src usage-environment macro-environment)
    (sourcify-if
      `(cast <World-Window+> *current-world-window*)
      form-src)))


(syntax public current-interface
  (lambda (form-src usage-environment macro-environment)
    (sourcify-if
      `(cast <World-Interface> *current-interface*)
      form-src)))


(syntax public current-interface+
  (lambda (form-src usage-environment macro-environment)
    (sourcify-if
      `(cast <World-Interface+> *current-interface*)
      form-src)))


(syntax public current-tier
  (lambda (form-src usage-environment macro-environment)
    (sourcify-if
      `(cast <Tier> *current-tier*)
      form-src)))


(syntax public current-tier+
  (lambda (form-src usage-environment macro-environment)
    (sourcify-if
      `(cast <Tier+> *current-tier*)
      form-src)))


(syntax public local-tier
  (lambda (form-src usage-environment macro-environment)
    (sourcify-if
      ;; too critical to only be tested in debug
      `(assert (is? *current-tier* Local-Tier)
         (cast <Local-Tier> *current-tier*))
      form-src)))


(syntax public client-tier
  (lambda (form-src usage-environment macro-environment)
    (sourcify-if
      ;; too critical to only be tested in debug
      `(assert (is? *current-tier* Client-Tier)
         (cast <Client-Tier> *current-tier*))
      form-src)))


(syntax public server-tier
  (lambda (form-src usage-environment macro-environment)
    (sourcify-if
      ;; too critical to only be tested in debug
      `(assert (is? *current-tier* Server-Tier)
         (cast <Server-Tier> *current-tier*))
      form-src)))


(syntax public processor-tier
  (lambda (form-src usage-environment macro-environment)
    (sourcify-if
      ;; too critical to only be tested in debug
      `(assert (is? *current-tier* Processor-Tier)
         (cast <Processor-Tier> *current-tier*))
      form-src)))


(syntax public current-processor
  (lambda (form-src usage-environment macro-environment)
    (sourcify-if
      `(cast <Processor> *current-processor*)
      form-src)))


(syntax public current-world
  (lambda (form-src usage-environment macro-environment)
    (sourcify-if
      `(cast <World> *current-world*)
      form-src)))


(syntax public current-world+
  (lambda (form-src usage-environment macro-environment)
    (sourcify-if
      `(cast <World+> *current-world*)
      form-src)))


(syntax public current-zone
  (lambda (form-src usage-environment macro-environment)
    (sourcify-if
      `(cast <Zone> *current-zone*)
      form-src)))


(syntax public current-zone+
  (lambda (form-src usage-environment macro-environment)
    (sourcify-if
      `(cast <Zone+> *current-zone*)
      form-src)))


(syntax public current-game
  (lambda (form-src usage-environment macro-environment)
    (sourcify-if
      `(cast <World-Game> *current-game*)
      form-src)))


(syntax public current-me
  (lambda (form-src usage-environment macro-environment)
    (sourcify-if
      `(cast <Player> *current-me*)
      form-src)))


(syntax public current-me+
  (lambda (form-src usage-environment macro-environment)
    (sourcify-if
      `(cast <Player+> *current-me*)
      form-src)))


(syntax public current-camera
  (lambda (form-src usage-environment macro-environment)
    (sourcify-if
      `(cast <Camera> *current-camera*)
      form-src)))


(syntax public current-motion
  (lambda (form-src usage-environment macro-environment)
    (sourcify-if
      `(cast <Motion> *current-motion*)
      form-src)))


(syntax public current-ambience
  (lambda (form-src usage-environment macro-environment)
    (sourcify-if
      `(cast <World-Ambience> *current-ambience*)
      form-src)))


(syntax public current-music
  (lambda (form-src usage-environment macro-environment)
    (sourcify-if
      `(cast <World-Music> *current-music*)
      form-src)))


(syntax public current-history
  (lambda (form-src usage-environment macro-environment)
    (sourcify-if
      `(cast <History> *current-history*)
      form-src)))


(syntax public current-tutorial
  (lambda (form-src usage-environment macro-environment)
    (sourcify-if
      '*current-tutorial*
      form-src)))


;;;
;;;; Bind
;;;


(syntax public bind-index
  (lambda (form-src usage-environment macro-environment)
    (let ((bindings (cadr (source-code form-src)))
          (index (caddr (source-code form-src)))
          (body (cdddr (source-code form-src))))
      (bind (x y z) (source-code bindings)
        (let ((idx (generate-symbol "idx")))
          (sourcify-if
            `(let ((,idx ,index))
               (let ((,x (index-x ,idx))
                     (,y (index-y ,idx))
                     (,z (index-z ,idx)))
                 ,@body))
            form-src))))))


;;;
;;;; Case
;;;


;; placeholder until a real ccase in the code walker
(syntax public ccase
  (syntax-rules ()
    ((ccase target clause ...)
     (ecase target clause ...))))


(syntax public id?
  (lambda (form-src usage-environment macro-environment)
    (if (null? (cdr (source-code form-src)))
        (error "Ill-formed id?")
      (let ((target (cadr (source-code form-src)))
            (values (cddr (source-code form-src))))
        (sourcify-if
          (with-uniqueness target
            (lambda (symbol)
              (case (length values)
                ((0)
                 (error "Ill-formed id?"))
                ((1)
                 `(= ,symbol ,(car values)))
                (else
                 `(or ,@(map (lambda (value)
                               `(= ,symbol ,value))
                             values))))))
          form-src)))))


;;;
;;;; Parameter
;;;


(syntax public define-parameter
  (lambda (form-src usage-environment macro-environment)
    (let ((name (cadr (source-code form-src)))
          (parameter (caddr (source-code form-src))))
      (sourcify-if
        `(register-parameter ',name ,parameter)
        form-src))))


;;;
;;;; Area
;;;


(macro public (loop-polygons area element polygons offset . body)
  (let ((i (generate-symbol "i")))
    `(let ((,polygons (get-polygons~ ,area)))
       (when ,polygons
         (loop (for ,i from 0 below (fxround/ (f64vector-length ,polygons) polygon-float-size))
               (let ((,offset (* ,i polygon-float-size))
                     (,element (let ((polygons-elements (get-polygons-elements~ ,area))) (and polygons-elements (vector-ref polygons-elements ,i)))))
                 ,@body))))))


;;;
;;;; Model
;;;


(macro public (define-model name generate (showcase?: showcase? #t))
  `(register-model ',name
                   ,generate
                   ,showcase?))


(macro public (define-block-model name generate (showcase?: showcase? #t))
  `(register-model ',name
                   ,generate
                   ,showcase?
                   'block))


(macro public (define-block-category name . rest)
  `(definition protected ,name
     (register-block-category ',name ,@rest)))


(macro public (define-block-kind name . rest)
  `(definition protected ,name
     (register-block-kind ',name ,@rest)))


(syntax public define-block
  (lambda (form-src usage-environment macro-environment)
    (let ((name (cadr (source-code form-src)))
          (id (caddr (source-code form-src)))
          (rest (cdddr (source-code form-src))))
      (sourcify-if
        `(begin
           ,@(if (pair? (source-code id))
                 '()
               `((constant ,name ,id)))
           (register-block ',name ',id
             ,@rest))
        form-src))))


(syntax public define-biome
  (lambda (form-src usage-environment macro-environment)
    (bind (name class title id top fill color . rest) (cdr (source-code form-src))
      (let ((upcase-name (string->symbol (upcase-capitalized (symbol->string (source-code name))))))
        (sourcify-if
          `(begin
             (constant ,name <fx> ,id)
             (register-biome ',name ,class ',title ',id ',top ',fill ',color
               ,@rest)
             ;; kinda quick hack
             (constant ,upcase-name <Biome> (id->biome ,id)))
          form-src)))))


(syntax public define-crafting-recipe
  (lambda (form-src usage-environment macro-environment)
    (let ((input (cadr (source-code form-src)))
          (output (caddr (source-code form-src)))
          (rest (cdddr (source-code form-src))))
      (sourcify-if
        `(register-crafting-recipe ,input ,output ,@rest)
        form-src))))


(macro public (smooth/floor a b c offset . body)
  (let ((off 'off @todo (generate-symbol "off"))
        (x 'x @todo (generate-symbol "x"))
        (diff 'diff @todo (generate-symbol "diff")))
    `(let ((,off ,offset))
       (let ((,x (fxfloor ,off)))
         (let ((,diff (- ,off (cast <fl> ,x))))
           (let ((,a (bitwise-and ,x 255))
                 (,b ,diff)
                 (,c (smooth ,diff)))
             ,@body))))))


(macro public (permute x)
  `(s32vector-ref permutations ,x))


;;;
;;;; Change
;;;


(syntax public define-change
  (lambda (form-src usage-environment macro-environment)
    (let ((name (cadr (source-code form-src)))
          (rest (cddr (source-code form-src))))
      (sourcify-if
        `(register-change ',name
           ,@rest)
        form-src))))


;;;
;;;; Contour
;;;


(macro public (define-contour name . rest)
  `(register-contour ',name))


;;;
;;;; Finite
;;;


(syntax public assert-finite
  (lambda (form-src usage-environment macro-environment)
    (let ((value (cadr (source-code form-src)))
          (val (generate-symbol "val")))
      (sourcify-if
        (cond-expand
          (finite
            `(let ((,val ,value))
               (assert (finite? ,val))
               ,val))
          (else
            value))
        form-src))))


(syntax public allocate-vertex
  (lambda (form-src usage-environment macro-environment)
    (sourcify-if
      (cond-expand
        (finite
          `(f64vector +nan.0 +nan.0 +nan.0))
        (else
          `(f64vector 0. 0. 0.)))
      form-src)))


;;;
;;;; History
;;;


(syntax public break-logic
  (lambda (form-src usage-environment macro-environment)
    (let ((name (cadr (source-code form-src))))
      (sourcify-if
        `(break-logic-at ',name)
        form-src))))


(syntax public break-action
  (lambda (form-src usage-environment macro-environment)
    (let ((body (cdr (source-code form-src))))
      (sourcify-if
        `(break-logic-action
           (lambda ()
             ,@body))
        form-src)))))
