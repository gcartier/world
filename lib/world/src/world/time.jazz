;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Time
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;    Barbara Samson


(module world.time jazz


(import (world.event))


;;;
;;;; Time-Base
;;;


(class Time-Base extends Object
  
  
  (slot base         getter generate)
  (slot latency      getter generate)
  (slot last-latency getter generate)
  
  
  (method override (initialize self)
    (nextmethod self)
    (set! self.base #f)
    (set! self.latency 0.)
    (set! self.last-latency 0.))
  
  
  (method protected (reset self)
    (set! self.base #f)
    (set! self.latency 0.)
    (set! self.last-latency 0.))
  
  
  (method override (print self output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{a} {a}" base latency))))
  
  
  (method protected (visualizer-update self base latency)
    (set! self.base base)
    (set! self.latency latency))
  
  
  (method public (update-time self new-local new-remote update-proc)
    (case (simulation-update-time)
      ((latest) (update-latest self new-local new-remote update-proc))
      ((lowest) (update-lowest self new-local new-remote update-proc))
      ;; lowest needs more work to adapt to fluctuating latency
      (else (update-latest self new-local new-remote update-proc))))
  
  
  (method (update-lowest self new-local new-remote update-proc)
    (define (update new-base current-latency effective-latency)
      (set! base new-base)
      (set! latency effective-latency)
      (set! last-latency current-latency)
      (update-proc current-latency effective-latency))
    
    (let ((new-base (- new-local new-remote)))
      (if (not base)
          (update new-base 0. 0.)
        (let ((current-latency (- new-base base)))
          (let ((change (- current-latency latency))
                (effective-change -.01))
            (if (< change effective-change)
                (let ((effective-latency (+ latency effective-change)))
                  (update base current-latency effective-latency))
              (set! last-latency current-latency)))))))
  
  
  (method (update-latest self new-local new-remote update-proc)
    (define (update new-base current-latency effective-latency)
      (set! base new-base)
      (set! latency effective-latency)
      (set! last-latency current-latency)
      (update-proc current-latency effective-latency))
    
    (let ((new-base (- new-local new-remote)))
      (if (not base)
          (update new-base 0. 0.)
        (let ((current-latency (- new-base base)))
          (update base current-latency current-latency)
          @wait
          (let ((max-change .1))
            (let ((change (- current-latency last-latency)))
              (let ((effective-latency (cond ((> change max-change)
                                              (terminal '>>> change)
                                              (+ last-latency max-change))
                                             ((< change (- max-change))
                                              (terminal '<<< change)
                                              (- last-latency max-change))
                                             (else
                                              current-latency))))
                (update base effective-latency effective-latency))))))))
  
  
  @wait
  (method (update-latency self now timestamp thunk)
    (define (update new-base new-latency)
      (set! base new-base)
      (set! latency new-latency)
      (thunk))
    
    (when timestamp
      (let ((new-base (- now timestamp)))
        (if (not base)
            (update new-base 0.)
          (let ((new-latency (- new-base base)))
            (let ((latency-change (- new-latency latency)))
              (cond ((< latency-change (- udp-latency-threshold))
                     (let ((new-latency (- base udp-latency-decrement)))
                       (update new-base)))
                    ((> latency-change udp-latency-threshold)
                     (let ((new-base (+ base udp-latency-increment)))
                       (update base))))))))))
  
  
  (method public (update-start self new-local new-remote)
    (when (not base)
      (let ((new-base (- new-local new-remote)))
        (set! base new-base)
        (set! latency 0.))))
  
  
  (method public (remote->local self remote)
    (+ base latency remote)))


;;;
;;;; Rate
;;;


(class Rate extends Object
  
  
  (slot start     initialize #f getter generate)
  (slot count     initialize #f getter generate)
  (slot frequency initialize #f getter generate)
  
  
  (method protected (update self sampling)
    (if (not start)
        (begin
          (set! start (current-monotonic))
          (set! count 0))
      (increase! count)
      (when (= count sampling)
        (let ((now (current-monotonic)))
          (let ((elapse (- now start)))
            (set! start now)
            (set! count 0)
            (set! frequency (/ (cast <fl> sampling) elapse)))))))))
