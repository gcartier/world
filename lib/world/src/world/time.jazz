;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Time
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;    Barbara Samson


(module world.time jazz


(import (jazz.stream)
        (jazz.time)
        (world.event))


;;;
;;;; Epoch
;;;


(definition public (assert-epoch obj)
  (assert (and (pair? obj)
               (eq? (car obj) 'epoch))
    obj))


(definition (extract-epoch obj)
  (assert (and (pair? obj)
               (eq? (car obj) 'epoch))
    (second obj)))


(definition public (flonum->epoch x)
  (list 'epoch (flonum->timestamp x)))

(definition public (epoch->flonum x)
  (timestamp->flonum (extract-epoch x)))


(definition public (timestamp->epoch x)
  (list 'epoch x))

(definition public (epoch->timestamp x)
  (extract-epoch x))


(definition public (epoch= x y)
  (= (extract-epoch x) (extract-epoch y)))


(definition public (epoch+ epoch duration)
  (timestamp->epoch (+ (extract-epoch epoch) (extract-duration duration))))


(definition public (epoch- . rest)
  (timestamp->duration (apply - (map extract-epoch rest))))


(definition public (epoch-max . rest)
  (timestamp->epoch (apply max (map extract-epoch rest))))


(definition public epoch0
  (timestamp->epoch 0))


;;;
;;;; Duration
;;;


(definition public (assert-duration obj)
  (assert (and (pair? obj)
               (eq? (car obj) 'duration))
    obj))


(definition (extract-duration obj)
  (assert (and (pair? obj)
               (eq? (car obj) 'duration))
    (second obj)))


(definition public (flonum->duration x)
  (list 'duration (flonum->timestamp x)))

(definition public (duration->flonum x)
  (timestamp->flonum (extract-duration x)))


(definition public (timestamp->duration x)
  (list 'duration x))

(definition public (duration->timestamp x)
  (extract-duration x))


(definition public (duration+ . rest)
  (timestamp->duration (apply + (map extract-duration rest))))


(definition public (duration- . rest)
  (timestamp->duration (apply - (map extract-duration rest))))


(definition public duration0
  (timestamp->duration 0))


;;;
;;;; Present
;;;


(definition public (present-duration duration (compact?: compact? #f))
  (let ((integer-duration (fxround duration)))
    (let ((date (time-monotonic->date (make-time 'time-monotonic 0 integer-duration) 0))
          (day (* 24 60 60)))
      (let ((days (quotient integer-duration day))
            (hours (date-hour date))
            (minutes (date-minute date))
            (seconds (date-second date))
            (spacing (if compact? "" " ")))
        (cond ((and (= days 0)
                    (= hours 0)
                    (= minutes 0))
               (format "{a}s" seconds))
              ((and (= days 0)
                    (= hours 0))
               (format "{a}m{a}{a}s" minutes spacing seconds))
              ((= days 0)
               (format "{a}h{a}{a}m" hours spacing minutes))
              (else
               (format "{a}d{a}{a}h{a}{a}m" days spacing hours spacing minutes)))))))


;;;
;;;; Time-Base
;;;


(definition protected udp-latency-no-change
  0.)

(definition protected udp-latency-raw
  1.)

(definition protected udp-latency-max
  2.)

(definition protected udp-latency-nack-up
  3.)

(definition protected udp-latency-up
  4.)

(definition protected udp-latency-down
  5.)


(class Time-Base extends Object
  
  
  (slot base        <fl+> getter generate)
  (slot raw-latency <fl>  getter generate)
  (slot latency     <fl>  getter generate)
  
  
  (method override (initialize self)
    (nextmethod self)
    (reset self))
  
  
  (method protected (reset self)
    (reset-base self))
  
  
  (method protected virtual (reset-base self)
    (set! self.base #f)
    (set! self.raw-latency 0.)
    (set! self.latency 0.))

  
  (method override (print self output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{a} {a}" base latency))))
  
  
  (method protected virtual (effective-latency self)
    latency)
  
  
  (method protected (visualizer-update self base latency)
    (set! self.base base)
    (set! self.latency latency))
  
  
  (method public (update-start self new-local new-remote)
    (when (not base)
      (let ((new-base (- new-local new-remote)))
        (set! base new-base)
        (set! raw-latency 0.)
        (set! latency 0.))))
  
  
  (method public virtual (update-time self new-local new-remote duration update-proc)
    (let ((new-base (duration->flonum (epoch- new-local new-remote))))
      (if (not base)
          (begin
            (set! base new-base)
            (set! raw-latency 0.)
            (set! latency 0.))
        (let ((raw (- new-base base)))
          (set! raw-latency raw)
          (set! latency raw))))
    (update-proc raw-latency latency udp-latency-raw))
  
  
  (method public virtual (update-past self new-local new-remote update-proc)
    )
  
  
  (method public virtual (remote->local self remote) <fl>
    ;; quicky to support streaming that I don't want
    ;; to convert to epoch / duration yet
    (if (flonum? remote)
        (+ base remote latency)
      (+ base (epoch->flonum remote) latency))))


;;;
;;;; Rate
;;;


(class Rate extends Object
  
  
  (slot last-time     initialize #f getter generate)
  (slot moving-period initialize #f getter generate)
  
  
  (method protected (reset self)
    (set! self.last-time #f)
    (set! self.moving-period #f))
  
  
  (method protected (update self)
    (if (not last-time)
        (begin
          (set! last-time (current-monotonic))
          (set! moving-period 0.))
      (let ((now (current-monotonic)))
        (let ((period (- now last-time)))
          (set! last-time now)
          (set! moving-period (/ (+ (* 63. moving-period) period) 64.))))))
  
  
  (method public (get-frequency self)
    (and moving-period (/ moving-period)))))
