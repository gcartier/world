;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Time
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;    Barbara Samson


(module world.time jazz


(import (jazz.time)
        (world.event))


(definition public (present-duration duration (compact?: compact? #f))
  (let ((integer-duration (fxround duration)))
    (let ((date (time-monotonic->date (make-time 'time-monotonic 0 integer-duration) 0))
          (day (* 24 60 60)))
      (let ((days (quotient integer-duration day))
            (hours (date-hour date))
            (minutes (date-minute date))
            (seconds (date-second date))
            (spacing (if compact? "" " ")))
        (cond ((and (= days 0)
                    (= hours 0)
                    (= minutes 0))
               (format "{a}s" seconds))
              ((and (= days 0)
                    (= hours 0))
               (format "{a}m{a}{a}s" minutes spacing seconds))
              ((= days 0)
               (format "{a}h{a}{a}m" hours spacing minutes))
              (else
               (format "{a}d{a}{a}h{a}{a}m" days spacing hours spacing minutes)))))))


;;;
;;;; Time-Base
;;;


(class Time-Base extends Object
  
  
  (slot base         <fl+> getter generate)
  (slot raw-latency  <fl>  getter generate)
  (slot latency      <fl>  getter generate)
  (slot short-moving <fl>  getter generate)
  (slot long-moving  <fl>  getter generate)
  
  
  (method override (initialize self)
    (nextmethod self)
    (reset self))
  
  
  (method protected (reset self)
    (set! self.base #f)
    (set! self.raw-latency 0.)
    (set! self.latency 0.)
    (set! self.short-moving 0.)
    (set! self.long-moving 0.))
  
  
  (method override (print self output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{a} {a}" base latency))))
  
  
  (method protected (visualizer-update self base latency)
    (set! self.base base)
    (set! self.latency latency))
  
  
  (method protected (update-moving-averages self source-kind raw)
    (set! self.raw-latency raw)
    (case source-kind
      ((live)
       (let ((old-short-moving short-moving)
             (old-long-moving long-moving))
         (let ((new-short-moving (/ (+ (* short-moving 15.) raw) 16.))
               (new-long-moving (/ (+ (* long-moving 1001.) raw) 1002.)))
           (set! short-moving new-short-moving)
           (set! long-moving new-long-moving)
           (cond ((and (> short-moving old-short-moving) (> short-moving long-moving))
                  (set! self.long-moving short-moving)
                  (set! self.latency short-moving))
                 ((and (< short-moving old-short-moving) (< short-moving long-moving))
                  (set! self.short-moving long-moving)
                  (set! self.latency long-moving))))))
      (else
       (set! self.latency (max raw self.latency)))))
  
  
  (method public (update-time self source-kind new-local new-remote update-proc)
    (let ((new-base (- new-local new-remote)))
      (if (not base)
          (begin
            (set! base new-base)
            (set! raw-latency 0.)
            (set! latency 0.))
        (let ((raw (- new-base base)))
          (update-moving-averages self source-kind raw)
          (update-proc raw-latency latency)))))
  
  
  (method public (update-past self source-kind new-local new-remote update-proc)
    (case source-kind
      ((live))
      (else
       (let ((new-base (- new-local new-remote)))
         (let ((raw (- new-base base)))
           (when (> raw latency)
             (set! latency raw)))))))
  
  
  (method public (update-start self new-local new-remote)
    (when (not base)
      (let ((new-base (- new-local new-remote)))
        (set! base new-base)
        (set! latency 0.))))
  
  
  (method public (remote->local self remote) <fl>
    (+ base latency remote)))


;;;
;;;; Rate
;;;


(class Rate extends Object
  
  
  (slot start     initialize #f getter generate)
  (slot count     initialize #f getter generate)
  (slot frequency initialize #f getter generate)
  
  
  (method protected (update self sampling)
    (if (not start)
        (begin
          (set! start (current-monotonic))
          (set! count 0))
      (increase! count)
      (when (= count sampling)
        (let ((now (current-monotonic)))
          (let ((elapse (- now start)))
            (set! start now)
            (set! count 0)
            (set! frequency (/ (cast <fl> sampling) elapse)))))))))
