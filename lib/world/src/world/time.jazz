;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Time
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;    Barbara Samson


(module world.time jazz


(class Time-Base extends Object
  
  
  (slot base    getter generate)
  (slot latency getter generate)
  
  
  (method override (initialize self)
    (nextmethod self)
    (set! self.base #f)
    (set! self.latency #f))
  
  
  (method override (print self output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{a} {a}" base latency))))
  
  
  (method protected (update-base self base)
    (set! self.base base))
  
  
  (method public (update-time self new-local new-remote thunk)
    (define (update new-base new-latency)
      (set! base new-base)
      (set! latency new-latency)
      (thunk new-latency))
    
    (let ((new-base (- new-local new-remote)))
      (if (not base)
          (update new-base 0.)
        (let ((new-latency (- new-base base)))
          (let ((change (- new-latency latency))
                (effective-change -.01))
            (when (< change effective-change)
              (let ((effective-latency (+ latency effective-change)))
                (update base effective-latency))))))))
  
  
  @wait
  (method public (update-latency self now timestamp thunk)
    (define (update new-base new-latency)
      (set! base new-base)
      (set! latency new-latency)
      (thunk))
    
    (when timestamp
      (let ((new-base (- now timestamp)))
        (if (not base)
            (update new-base 0.)
          (let ((new-latency (- new-base base)))
            (let ((latency-change (- new-latency latency)))
              (cond ((< latency-change (- udp-latency-threshold))
                     (let ((new-latency (- base udp-latency-decrement)))
                       (update new-base)))
                    ((> latency-change udp-latency-threshold)
                     (let ((new-base (+ base udp-latency-increment)))
                       (update base))))))))))
  
  
  (method public (update-start self new-local new-remote)
    (when (not base)
      (let ((new-base (- new-local new-remote)))
        (set! base new-base)
        (set! latency 0.))))
  
  
  (method public (remote->local self remote)
    (+ base latency remote))))
