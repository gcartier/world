;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Time
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;    Barbara Samson


(module world.time jazz


(import (jazz.stream)
        (jazz.time)
        (world.event))


;;;
;;;; Present
;;;


(definition public (present-duration duration (compact?: compact? #f))
  (let ((integer-duration (fxround duration)))
    (let ((date (time-monotonic->date (make-time 'time-monotonic 0 integer-duration) 0))
          (day (* 24 60 60)))
      (let ((days (quotient integer-duration day))
            (hours (date-hour date))
            (minutes (date-minute date))
            (seconds (date-second date))
            (spacing (if compact? "" " ")))
        (cond ((and (= days 0)
                    (= hours 0)
                    (= minutes 0))
               (format "{a}s" seconds))
              ((and (= days 0)
                    (= hours 0))
               (format "{a}m{a}{a}s" minutes spacing seconds))
              ((= days 0)
               (format "{a}h{a}{a}m" hours spacing minutes))
              (else
               (format "{a}d{a}{a}h{a}{a}m" days spacing hours spacing minutes)))))))


;;;
;;;; Time-Base
;;;


(class Time-Base extends Object
  
  
  (slot base        <fl+> getter generate)
  (slot raw-latency <fl>  getter generate)
  (slot latency     <fl>  accessors generate)
  
  
  (method override (initialize self)
    (nextmethod self)
    (reset self))
  
  
  (method protected virtual (reset self)
    (set! self.base #f)
    (set! self.raw-latency 0.)
    (set! self.latency 0.))

  
  (method override (print self output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{a} {a}" base latency))))
  
  
  (method public (update-start self local remote)
    (when (not base)
      (let ((new-base (- local remote)))
        (set! base new-base)
        (set! raw-latency 0.)
        (set! latency 0.))))
  
  
  (method public virtual (update-time self local remote update-proc)
    (let ((new-base (timestamp->flonum (- local remote))))
      (if (not base)
          (begin
            (set! base new-base)
            (set! raw-latency 0.)
            (set! latency 0.))
        (let ((raw (- new-base base)))
          (set! raw-latency raw)
          (set! latency raw))))
    (update-proc raw-latency latency))
  
  
  (method public virtual (remote->local self remote) <fl>
    (+ base remote latency)))


;;;
;;;; Rate
;;;


(class Rate extends Object
  
  
  (slot last-time     initialize #f getter generate)
  (slot moving-period initialize #f getter generate)
  
  
  (method package (reset self)
    (set! self.last-time #f)
    (set! self.moving-period #f))
  
  
  (method package (update self)
    (if (not last-time)
        (begin
          (set! last-time (current-monotonic))
          (set! moving-period 0.))
      (let ((now (current-monotonic)))
        (let ((period (- now last-time)))
          (set! last-time now)
          (set! moving-period (/ (+ (* 63. moving-period) period) 64.))))))
  
  
  (method public (get-frequency self)
    (and moving-period (/ moving-period)))))
