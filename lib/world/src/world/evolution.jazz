;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Evolution
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.evolution jazz


(proclaim (not check bounds zero))


;;;
;;;; Evolution
;;;


(definition sample-size <fx>
  6)


(class Evolution-Class extends Class
  
  
  (method override (marshall-object self object)
    (serialize-object (class-of object)
                      (vector (serialize (get-size object))
                              (serialize (get-content-size object))
                              (serialize (get-content object))
                              (serialize (get-now object))
                              (serialize (get-head object))
                              (serialize (get-count object)))))
  
  
  (method override (unmarshall-object self content)
    (bind-vector (size content-size content now head count) content
      (allocate self
                (deserialize size)
                (deserialize content-size)
                (deserialize content)
                (deserialize now)
                (deserialize head)
                (deserialize count)))))


(class Evolution metaclass Evolution-Class extends Object
  
  
  (slot size         <fx>        getter generate)
  (slot content-size <fx>        getter generate)
  (slot content      <f64vector> getter generate)
  (slot now          <fx>        accessors generate)
  (slot head         <fx>        accessors generate)
  (slot count        <fx>        accessors generate)
  
  
  (method override (initialize self size <fx>)
    (nextmethod self)
    (set! self.size size)
    (set! content-size (* size sample-size))
    (set! content (make-f64vector content-size))
    (set! now 0)
    (set! head 0)
    (set! count 0))

  
  (method package (start-position self) <fx>
    0)
  
  
  (method package (end-position self) <fx>
    count)
  
  
  (method package (first-position self) <fx>
    0)
  
  
  (method package (last-position self) <fx>
    (- (end-position self) 1))
  
  
  (method package (index self n <fx>) <fx>
    (modulo (+ head (* n sample-size)) content-size))
  
  
  (method package (index-now self) <fx>
    (index self now))
  
  
  (method package (evolutionary-time self n <fx>) <fl>
    (f64vector-ref content (+ (index self n) 0)))
  
  (method package (evolutionary-id self n <fx>) <fl>
    (f64vector-ref content (+ (index self n) 1)))
  
  (method package (evolutionary-data1 self n <fx>) <fl>
    (f64vector-ref content (+ (index self n) 2)))
  
  (method package (evolutionary-data2 self n <fx>) <fl>
    (f64vector-ref content (+ (index self n) 3)))
  
  (method package (evolutionary-data3 self n <fx>) <fl>
    (f64vector-ref content (+ (index self n) 4)))
  
  (method package (evolutionary-data4 self n <fx>) <fl>
    (f64vector-ref content (+ (index self n) 5)))
  
  
  (method package (advance! self)
    (if (< count size)
        (begin
          (increase! count)
          (increase! now))
      (set! head (modulo (+ head sample-size) content-size)))))


(definition protected evolution <Evolution>
  (new Evolution 10000))


(definition public (current-evolution) <Evolution>
  evolution)


(definition protected (copy-evolution evolution <Evolution>) <Evolution>
  (let ((copy (new Evolution (get-size evolution))))
    (subf64vector-move! (get-content evolution) 0 (get-content-size evolution) (get-content copy) 0)
    (set-now copy (get-now evolution))
    (set-head copy (get-head evolution))
    (set-count copy (get-count evolution))
    copy)))
