;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Evolution
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.evolution jazz


(import (jazz.io)
        (jazz.markup)
        (jazz.zlib)
        (world)
        (world.configure)
        (world.context)
        (world.task)
        (world.timeline))


(proclaim (not check bounds zero)
          (warn optimizations))

(declare (optimize-dead-local-variables))


;;;
;;;; Evolution
;;;


(definition sample-size <fx>
  9)


(class Evolution-Class extends Class
  
  
  (method override (marshall-object self object)
    (serialize-object (class-of object)
                      (vector (serialize (get-size object))
                              (serialize (get-content-size object))
                              (serialize (get-content object))
                              (serialize (get-now object))
                              (serialize (get-head object))
                              (serialize (get-count object)))))
  
  
  (method override (unmarshall-object self content <vector>)
    (bind-vector (size content-size content now head count) content
      (allocate self
                (deserialize size)
                (deserialize content-size)
                (deserialize content)
                (make-mutex 'evolution)
                (deserialize now)
                (deserialize head)
                (deserialize count)))))


(class Evolution metaclass Evolution-Class extends Object
  
  
  (slot size         <fx>        getter generate)
  (slot content-size <fx>        getter generate)
  (slot content      <f64vector> getter generate)
  (slot mutex        <object>    getter generate)
  (slot now          <fx>        accessors generate)
  (slot head         <fx>        accessors generate)
  (slot count        <fx>        accessors generate)
  
  
  (method override (initialize self size <fx>)
    (nextmethod self)
    (set! self.size size)
    (set! content-size (* size sample-size))
    (set! content (make-f64vector content-size))
    (set! mutex (make-mutex 'evolution))
    (set! now 0)
    (set! head 0)
    (set! count 0))
  
  
  (method package (reset self)
    (mutex-lock! mutex)
    (f64vector-fill! content 0.)
    (set! now 0)
    (set! head 0)
    (set! count 0)
    (mutex-unlock! mutex))
  
  
  (method package (empty? self)
    (= count 0))
  
  
  (method package (with-mutex self thunk)
    (mutex-lock! mutex)
    (prog1 (thunk)
      (mutex-unlock! mutex)))

  
  (method package inline (start-position self) <fx>
    0)
  
  
  (method package inline (end-position self) <fx>
    count)
  
  
  (method package inline (first-position self) <fx>
    0)
  
  
  (method package inline (last-position self) <fx>
    (- count 1))
  
  
  (method package inline (index self n <fx>) <fx>
    (modulo (+ head (* n sample-size)) content-size))
  
  
  (method package inline (index-now self) <fx>
    (index self now))
  
  
  (method package inline (evolutionary-time self n <fx>) <fl>
    (f64vector-ref content (+ (index self n) 0)))
  
  (method package inline (evolutionary-id self n <fx>) <fl>
    (f64vector-ref content (+ (index self n) 1)))
  
  (method package inline (evolutionary-data1 self n <fx>) <fl>
    (f64vector-ref content (+ (index self n) 2)))
  
  (method package inline (evolutionary-data2 self n <fx>) <fl>
    (f64vector-ref content (+ (index self n) 3)))
  
  (method package inline (evolutionary-data3 self n <fx>) <fl>
    (f64vector-ref content (+ (index self n) 4)))
  
  (method package inline (evolutionary-data4 self n <fx>) <fl>
    (f64vector-ref content (+ (index self n) 5)))
  
  (method package inline (evolutionary-data5 self n <fx>) <fl>
    (f64vector-ref content (+ (index self n) 6)))
  
  (method package inline (evolutionary-data6 self n <fx>) <fl>
    (f64vector-ref content (+ (index self n) 7)))
  
  (method package inline (evolutionary-data7 self n <fx>) <fl>
    (f64vector-ref content (+ (index self n) 8)))
  
  
  (method package inline (evolutionary-ref self n <fx> offset <fx>) <fl>
    (f64vector-ref content (+ (index self n) offset)))
  
  
  (method package inline (advance! self)
    (if (< count size)
        (begin
          (increase! count)
          (increase! now))
      (set! head (modulo (+ head sample-size) content-size)))))


;; about one minute of recorded evolution
(definition evolution <Evolution>
  (new Evolution 150000))


(definition public inline (current-evolution) <Evolution>
  evolution)


(definition protected (iterate-evolution evolution <Evolution> proc)
  (loop (for n from (first-position evolution) to (last-position evolution))
        (proc n)))


(definition protected (copy-evolution evolution <Evolution>) <Evolution>
  (mutex-lock! (get-mutex evolution))
  (let ((copy (new Evolution (get-size evolution))))
    (mutex-lock! (get-mutex copy))
    (subf64vector-move! (get-content evolution) 0 (get-content-size evolution) (get-content copy) 0)
    (set-now copy (get-now evolution))
    (set-head copy (get-head evolution))
    (set-count copy (get-count evolution))
    (mutex-unlock! (get-mutex copy))
    (mutex-unlock! (get-mutex evolution))
    copy))


(definition protected (reset-evolution)
  (reset (current-evolution)))


(definition protected (evolution-start evolution <Evolution>) <fl>
  (with-mutex evolution
    (lambda ()
      (assert (not (empty? evolution))
        (evolutionary-time evolution (first-position evolution))))))

(definition protected (evolution-end evolution <Evolution>) <fl>
  (with-mutex evolution
    (lambda ()
      (assert (not (empty? evolution))
        (evolutionary-time evolution (last-position evolution))))))


(definition protected (evolution-duration evolution <Evolution>) <fl+>
  (with-mutex evolution
    (lambda ()
      (if (= (get-count evolution) 0)
          #f
        (let ((first (first-position evolution))
              (last (last-position evolution)))
          (- (evolutionary-time evolution last)
             (evolutionary-time evolution first)))))))


(proclaim (not warn optimizations))


;;;
;;;; Replay
;;;


(definition protected (read-replay file)
  (let ((content (load-binary file)))
    (u8vector->object (zlib-inflate content) deserialize)))


(definition protected (read-moments file)
  (let ((content (load-binary file)))
    (u8vector->object (zlib-inflate content) deserialize)))


(definition protected (collect-replays dir)
  (let ((files (collect-files dir (lambda (file)
                                    (extension=? (get-extension file) "replay")))))
    (let ((names (make-table test: eqv?))
          (metadatas (make-table test: eqv?))
          (chronologies (make-table test: eqv?))
          (evolutions (make-table test: eqv?))
          (channels (make-table test: eqv?))
          (audios (make-table test: eqv?))
          (videos (make-table test: eqv?))
          (moments (make-table test: eqv?)))
      (for-each (lambda (file)
                  (bind (metadata chronology evolution) (read-replay file)
                    (bind (id name) metadata
                      (table-set! names id name)
                      (table-set! metadatas id metadata)
                      (table-set! chronologies id chronology)
                      (table-set! evolutions id evolution)
                      (let ((send-streams (third metadata)))
                        (for-each (lambda (send-stream)
                                    (bind (sender name no origin source-kind video-levels send-channels) send-stream
                                      (for-each (lambda (send-channel)
                                                  (bind (no media-kind source-kind) send-channel
                                                    (define (media-file extension)
                                                      (let ((base (get-base file)))
                                                        (let ((media-base (if (eq? source-kind 'live)
                                                                              base
                                                                            (format "{a}.{a}" base name))))
                                                          (get-brother file (add-extension media-base extension)))))
                                                    
                                                    (unless (table-ref channels no #f)
                                                      (table-set! channels no send-channel))
                                                    (case media-kind
                                                      ((5) ;; udp-audio fix me quicky to break circular dependency
                                                       (let ((audio-file (media-file "replayaudio")))
                                                         (when (exists? audio-file)
                                                           (let ((content (load-binary audio-file)))
                                                             (let ((ring (u8vector->object content deserialize)))
                                                               (table-set! audios no ring))))))
                                                      ((6) ;; udp-video fix me quicky to break circular dependency
                                                       (let ((video-file (media-file "replayvideo")))
                                                         (when (exists? video-file)
                                                           (let ((content (load-binary video-file)))
                                                             (let ((ring (u8vector->object content deserialize)))
                                                               (table-set! videos no ring)))))))))
                                                send-channels)))
                                  send-streams))
                      (let ((moments-file (get-brother file (add-extension name "moments"))))
                        (when (exists? moments-file)
                          (let ((moments-list (read-moments moments-file))
                                (index (make-table test: eqv?)))
                            (for-each (lambda (moment)
                                        (let ((id (get-id moment)))
                                          (table-set! index id moment)))
                                      moments-list)
                            (table-set! moments id index)))))))
                files)
      (values names metadatas chronologies evolutions channels audios videos moments))))


(definition protected (process-replay-threaded dir)
  (let ((thread
          (new-thread
            (lambda ()
              (let ((world (current-world)))
                (with-task-mutex
                  (lambda ()
                    (display-message world "Processing..." duration: 60.)))
                (process-replay dir #f)
                (with-task-mutex
                  (lambda ()
                    (display-message world "Done")))))
            'process)))
    (thread-base-priority-set! thread background-priority)
    (thread-start! thread)))


(definition protected (process-replay dir local?)
  (let ((files (collect-files dir (lambda (file)
                                    (extension=? (get-extension file) "replay")))))
    (let ((names (make-table test: eqv?))
          (evolutions (make-table test: eqv?))
          (base #f))
      (define (present-tier tier)
        (or (table-ref names tier #f)
            "<unknown>"))
      
      (define (present-channel channel)
        channel)
      
      (define (present-origin origin)
        (if (= origin -1.)
            origin
          ;; tier-no
          (or (table-ref names (flonum->fixnum origin) #f)
              origin)))
      
      (define (present-kind media-kind)
        (cond ((= media-kind 5.)
               "audio")
              ((= media-kind 6.)
               "video")
              (else
               media-kind)))
      
      ;; extract
      (for-each (lambda (file)
                  (bind (metadata chronology evolution) (read-replay file)
                    (bind (id name) metadata
                      (when (= id 0)
                        (set! base (metadata-base-time metadata)))
                      (table-set! names id name)
                      (table-set! evolutions id evolution))))
                files)
      ;; generate
      (iterate-table evolutions
        (lambda (id evolution)
          (let ((name (table-ref names id #f)))
            (call-with-output-file (path-settings (new-file dir (add-extension name "txt")))
              (lambda (output)
                (let ((first? #t))
                  (iterate-evolution evolution
                    (lambda (n)
                      (let ((time (evolutionary-time evolution n))
                            (id (evolutionary-id evolution n))
                            (channel (evolutionary-data1 evolution n))
                            (origin (evolutionary-data2 evolution n))
                            (media-kind (evolutionary-data3 evolution n))
                            (data1 (evolutionary-data4 evolution n))
                            (data2 (evolutionary-data5 evolution n))
                            (data3 (evolutionary-data6 evolution n))
                            (data4 (evolutionary-data7 evolution n)))
                        (let ((effective-time (- time base)))
                          (when #t @quick-hack-to-export-less (and (between? effective-time 1390. 1401.)
                                                                   (or (= id 52.)   ;; udp-id-update-time
                                                                       (= id 50.)   ;; udp-id-insert-packet
                                                                       (= id 60.))) ;; udp-id-play-frame
                            (if first?
                                (set! first? #f)
                              (format output "{%}"))
                            (format output "{r precision: 6},{a},{a},{a},{a},{a},{a},{a},{a}"
                              effective-time
                              (world.event:evolution-id->name id)
                              (present-channel channel)
                              (present-origin origin)
                              (present-kind media-kind)
                              data1
                              data2
                              data3
                              data4))))))))))))
      ;; unified
      @wait
      (when local?
        (let ((evolutions (apply append (table-values evolutions))))
          (let ((sorted (sort < evolutions key: get-time)))
            (let ((base (if local? (get-time (car sorted)) 0.)))
              (call-with-output-file (path-settings (new-file dir (add-extension "<unified>" "txt")))
                (lambda (output)
                  (let ((first? #t))
                    (for-each (lambda (entry)
                                (if first?
                                    (set! first? #f)
                                  (format output "{%}"))
                                (let ((tier (get-tier entry))
                                      (time (get-time entry))
                                      (id (get-id entry))
                                      (origin (get-origin entry))
                                      (media-kind (get-media-kind entry))
                                      (data1 (get-data1 entry))
                                      (data2 (get-data2 entry))
                                      (data3 (get-data3 entry))
                                      (data4 (get-data4 entry)))
                                  (format output "{a},{r precision: 6},{a},{a},{a},{a},{a},{a},{a}"
                                    (present-tier tier)
                                    time @wait (- time base)
                                    (world.event:evolution-id->name id)
                                    (present-origin origin)
                                    (present-kind media-kind)
                                    data1
                                    data2
                                    data3
                                    data4)))
                              sorted))))))))))))
