;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; Planes
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2016
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;    Alain Marcotte


(module world.plane jazz


(import (world.geometry.base)
        (world.geometry.classes)
        (world.syntax (phase syntax)))


(proclaim (warn optimizations))

(declare (optimize-dead-local-variables))


;;;
;;;; Plane
;;;


(proclaim (not warn optimizations))


(class Plane-Class extends (:class Object)
  
  
  (method override (marshall-object object)
    (serialize-object (class-of object)
                      (vector (serialize (get-origin~ object))
                              (serialize (get-normal~ object)))))
  
  
  (method override (unmarshall-object content)
    (bind-vector (origin normal) content
      (allocate self
                (deserialize origin)
                (deserialize normal)))))


(proclaim (warn optimizations))


(class Plane metaclass Plane-Class extends Object
  
  
  (slot origin <f64vector> initialize (make-vertex) getter generate)
  (slot normal <f64vector> initialize (make-vertex) getter generate)
  
  
  (method override (initialize origin normal)
    (nextmethod)
    (vertex-copy! origin~self origin)
    (vertex-copy! normal~self normal))
  
  
  (method override (assemble origin normal)
    (vertex-copy! origin~self origin)
    (vertex-copy! normal~self normal))
  
  
  (method override (print output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{a} {a}" (present-vertex origin) (present-vertex normal)))))
  
  
  (method public (set-origin orig)
    (vertex-copy! origin orig))
  
  
  (method public (set-normal nrm)
    (vertex-copy! normal nrm))
  
  
  (method public (set-vector vec)
    (vertex-normalize! normal vec)))


(definition public (allocate-plane)
  (allocate Plane
            (make-vertex)
            (make-vertex)))


;;;
;;;; Pool
;;;


(definition protected planes-pool <vector>
  (make-vector 128 #f))

(definition protected planes-allocated <fx>
  0)

(definition protected planes-available <fx>
  0)


(definition protected (alloc-plane$) <Plane>
  (if (= planes-available 0)
      (assert (< planes-allocated 128)
        (increase! planes-allocated)
        (allocate-plane))
    (decrease! planes-available)
    (let ((plane (vector-ref planes-pool planes-available)))
      (vector-set! planes-pool planes-available #f)
      plane)))


(definition protected (make-plane$ origin normal) <Plane>
  (let ((plane (alloc-plane$)))
    (assemble~ plane origin normal)
    plane))


(definition protected (free-plane$ plane <Plane>) <void>
  (assert (< planes-available 128))
  (vector-set! planes-pool planes-available plane)
  (increase! planes-available)))
