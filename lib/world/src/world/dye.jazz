;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; World Dyes
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2013
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.dye jazz


(import (jazz.graphic))


(proclaim (warn optimizations))

(declare (optimize-dead-local-variables))


;;;
;;;; Dye
;;;


(definition public Dye
  F32Vector)


(definition public inline (dye red <fl> green <fl> blue <fl> alpha <fl>) <f32vector>
  (f32vector red green blue alpha))


(definition public inline (make-dye) <f32vector>
  (make-f32vector 4))


(definition public inline (dye? obj <object>) <bool>
  (f32vector? obj))


(definition public (copy-dye dye <f32vector>) <f32vector>
  (let ((copy (make-dye)))
    (dye-copy! copy dye)
    copy))


(definition public inline (dye-red dye <f32vector>) <fl>
  (f32vector-ref dye 0))

(definition public inline (dye-green dye <f32vector>) <fl>
  (f32vector-ref dye 1))

(definition public inline (dye-blue dye <f32vector>) <fl>
  (f32vector-ref dye 2))

(definition public inline (dye-alpha dye <f32vector>) <fl>
  (f32vector-ref dye 3))


(definition public inline (dye-red-set! dye <f32vector> red <fl>) <void>
  (f32vector-set! dye 0 red))

(definition public inline (dye-green-set! dye <f32vector> green <fl>) <void>
  (f32vector-set! dye 1 green))

(definition public inline (dye-blue-set! dye <f32vector> blue <fl>) <void>
  (f32vector-set! dye 2 blue))

(definition public inline (dye-alpha-set! dye <f32vector> alpha <fl>) <void>
  (f32vector-set! dye 3 alpha))


(definition public (dye=? c1 <f32vector> c2 <f32vector>) <bool>
  (and (= (dye-red c1) (dye-red c2))
       (= (dye-green c1) (dye-green c2))
       (= (dye-blue c1) (dye-blue c2))
       (= (dye-alpha c1) (dye-alpha c2))))


(definition public (dye-init! dye <f32vector> red <fl> green <fl> blue <fl> alpha <fl>) <void>
  (dye-red-set! dye red)
  (dye-green-set! dye green)
  (dye-blue-set! dye blue)
  (dye-alpha-set! dye alpha))


(definition public (dye-copy! dst <f32vector> src <f32vector>) <void>
  (dye-red-set! dst (dye-red src))
  (dye-green-set! dst (dye-green src))
  (dye-blue-set! dst (dye-blue src))
  (dye-alpha-set! dst (dye-alpha src)))


(definition public (color->dye color <Color>) <f32vector>
  (dye (get-red~ color)
       (get-green~ color)
       (get-blue~ color)
       (get-alpha~ color)))


(definition public (dye->color dye <f32vector>) <Color>
  (new Color
    red: (dye-red dye)
    green: (dye-green dye)
    blue: (dye-blue dye)
    alpha: (dye-alpha dye)))


(definition public (present-dye dye <f32vector>) <string>
  (format "~{Dye {r precision: 3} {r precision: 3} {r precision: 3} {r precision: 3}}"
          (dye-red dye)
          (dye-green dye)
          (dye-blue dye)
          (dye-alpha dye))))
