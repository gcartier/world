;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; World 3D Format
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2013
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.w3d jazz


(import (jazz.geometry)
        (jazz.graphic)
        (jazz.graphic.opengl.glew)
        (jazz.io)
        (jazz.library)
        (jazz.system)
        (world)
        (world.animation)
        (world.atlas)
        (world.binary)
        (world.dye)
        (world.external)
        (world.foreign)
        (world.geometry)
        (world.homogeneous)
        (world.material)
        (world.mesh)
        (world.model)
        (world.renderer)
        (world.support)
        (world.texture)
        (world.triangle))


(proclaim (warn optimizations))


;;;
;;;; Vertex
;;;


(class W3D-Vertex extends Object
  
  
  (slot position     <object> accessors generate)
  (slot normal       <object> accessors generate)
  (slot texcoord     <object> accessors generate)
  (slot blendweight0 <object> accessors generate)
  (slot blendweight1 <object> accessors generate)
  (slot blendweight2 <object> accessors generate)
  (slot blendweight3 <object> accessors generate))


;;;
;;;; Node
;;;


(class W3D-Node extends Object
  
  
  (slot id          <object> accessors generate)
  (slot translation <object> accessors generate)
  (slot rotation    <object> accessors generate)
  (slot scale       <object> accessors generate)
  (slot parts       <object> accessors generate)
  (slot children    <object> accessors generate)
  
  
  (method override (initialize id translation rotation scale parts children)
    (set! id~self id)
    (set! translation~self translation)
    (set! rotation~self rotation)
    (set! scale~self scale)
    (set! parts~self parts)
    (set! children~self children))
  
  
  (method override (print output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{a}" id)))))


;;;
;;;; Node-Part
;;;


(class W3D-Node-Part extends Object
  
  
  (slot meshpartid <object> accessors generate)
  (slot materialid <object> accessors generate)
  (slot uvMapping  <object> accessors generate)
  
  
  (method override (initialize meshpartid materialid uvMapping)
    (set! meshpartid~self meshpartid)
    (set! materialid~self materialid)
    (set! uvMapping~self uvMapping)))


;;;
;;;; Material
;;;


(class W3D-Material extends Object
  
  
  (slot id       <object> accessors generate)
  (slot ambient  <object> accessors generate)
  (slot diffuse  <object> accessors generate)
  (slot specular <object> accessors generate)
  (slot textures <object> accessors generate)
  
  
  (method override (initialize id ambient diffuse specular textures)
    (set! id~self id)
    (set! ambient~self ambient)
    (set! diffuse~self diffuse)
    (set! specular~self specular)
    (set! textures~self textures))
  
  
  (method override (print output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{a}" id)))))


;;;
;;;; Texture
;;;


(class W3D-Texture extends Object
  
  
  (slot id       <object> accessors generate)
  (slot filename <object> accessors generate)
  (slot type     <object> accessors generate)
  
  
  (method override (initialize id filename type)
    (set! id~self id)
    (set! filename~self filename)
    (set! type~self type))
  
  
  (method override (print output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{a}" id)))))


;;;
;;;; Mesh
;;;


(class W3D-Mesh extends Object
  
  
  (slot vertices   <object> accessors generate)
  (slot parts      <object> accessors generate)
  
  
  (method override (initialize vertices parts)
    (set! vertices~self vertices)
    (set! parts~self parts)))


;;;
;;;; Mesh-Part
;;;


(class W3D-Mesh-Part extends Object
  
  
  (slot id      <object> accessors generate)
  (slot indices <object> accessors generate)
  
  
  (method override (initialize id indices)
    (set! id~self id)
    (set! indices~self indices))
  
  
  (method override (print output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{a}" id)))))


;;;
;;;; Model
;;;


(class W3D-Model extends Object
  
  
  (slot meshes     <object> accessors generate)
  (slot materials  <object> accessors generate)
  (slot nodes      <object> accessors generate)
  (slot animations <object> accessors generate)
  
  
  @WAIT
  (method public (extract-atlas file)
    (define (triangle-ref index)
      (vector-ref triangles index))
    
    (define (material-ref index)
      (vector-ref materials index))
    
    (let ((atlas (new Atlas mipmap?: #f repeat?: #t pad?: #f normalize?: #f))
          (textures (remove-duplicates (remove-empty (map get-texture~ (vector->list materials))) test: filename=?)))
      (for-each (lambda (texture)
                  (add-file~ atlas (new-brother~ file texture)))
                textures)
      (complete~ atlas)
      (loop (for group in-vector groups)
            (let ((material (material-ref (get-material-index~ group))))
              (let ((uv (image-rect~ atlas (extract-base (get-texture~ material)))))
                (let ((left (uv-left uv))
                      (top (uv-top uv))
                      (texture-depth (uv-depth uv)))
                  (let ((width (- (uv-right uv) left))
                        (height (- (uv-bottom uv) top)))
                    ;; adjust texture coordinates
                    (loop (for triangle-index in-vector (get-triangles~ group))
                          (let ((triangle (triangle-ref triangle-index)))
                            (let ((s (get-s~ triangle))
                                  (t (get-t~ triangle))
                                  (d (get-d~ triangle)))
                              (vertex-x-set! s (+ left (* (vertex-x s) width)))
                              (vertex-y-set! s (+ left (* (vertex-y s) width)))
                              (vertex-z-set! s (+ left (* (vertex-z s) width)))
                              (vertex-x-set! t (+ top (* (- 1. (vertex-x t)) height)))
                              (vertex-y-set! t (+ top (* (- 1. (vertex-y t)) height)))
                              (vertex-z-set! t (+ top (* (- 1. (vertex-z t)) height)))
                              (vertex-x-set! d texture-depth)
                              (vertex-y-set! d texture-depth)
                              (vertex-z-set! d texture-depth)))))))))
      atlas))
  
  
  @w
  (method public (extract-geometry groups)
    (generate-mesh
      (lambda (setup-proc triangle-proc quad-proc)
        (define (add-triangle triangle)
          (let ((indices (get-vertex-indices~ triangle))
                (normals (get-vertex-normals~ triangle))
                (s (get-s~ triangle))
                (t (get-t~ triangle))
                (d (get-d~ triangle)))
            (let ((v1 (vertex-ref (first indices)))
                  (v2 (vertex-ref (second indices)))
                  (v3 (vertex-ref (third indices))))
              (triangle-proc (get-vertex~ v1) (get-vertex~ v2) (get-vertex~ v3)
                (get-vertex~ v1) (first  normals) (vertex (vertex-x s) (vertex-x t) (vertex-x d)) (get-bone-id~ v1)
                (get-vertex~ v2) (second normals) (vertex (vertex-y s) (vertex-y t) (vertex-y d)) (get-bone-id~ v2)
                (get-vertex~ v3) (third  normals) (vertex (vertex-z s) (vertex-z t) (vertex-z d)) (get-bone-id~ v3)))))
        
        (setup-proc (vector-length triangles) 0)
        (loop (for triangle in-vector triangles)
              (add triangle)))))
  
  
  @WAIT
  (method public (extract-geometry groups)
    (define (count-triangles)
      (let ((count 0))
        (loop (for group in groups)
              (increase! count (vector-length (get-triangles~ group))))
        count))
    
    (let ((vertex-floats 10))
      (let ((triangle-floats (* 3 vertex-floats))
            (triangle-neighbors-floats (* 3 7))
            (triangles-count (count-triangles)))
        (let ((content (make-f32vector (* triangles-count triangle-floats)))
              (neighbors (make-f32vector (* triangles-count triangle-neighbors-floats)))
              (n 0)
              (m 0))
          (define (vertex-ref index)
            (vector-ref vertices index))
          
          (define (add-triangle triangle)
            (let ((indices (get-vertex-indices~ triangle))
                  (normals (get-vertex-normals~ triangle))
                  (s (get-s~ triangle))
                  (t (get-t~ triangle))
                  (d (get-d~ triangle)))
              (let ((v1 (vertex-ref (first indices)))
                    (v2 (vertex-ref (second indices)))
                    (v3 (vertex-ref (third indices))))
                (add
                  (get-vertex~ v1) (first  normals) (vertex (vertex-x s) (vertex-x t) (vertex-x d)) (get-bone-id~ v1)
                  (get-vertex~ v2) (second normals) (vertex (vertex-y s) (vertex-y t) (vertex-y d)) (get-bone-id~ v2)
                  (get-vertex~ v3) (third  normals) (vertex (vertex-z s) (vertex-z t) (vertex-z d)) (get-bone-id~ v3)))))
          
          (define (add v1 n1 t1 b1 v2 n2 t2 b2 v3 n3 t3 b3)
            (add-vertex v1) (add-normal n1) (add-texture t1) (add-bone b1) (add-neighbors 0. v2 v3)
            (add-vertex v2) (add-normal n2) (add-texture t2) (add-bone b2) (add-neighbors 1. v1 v3)
            (add-vertex v3) (add-normal n3) (add-texture t3) (add-bone b3) (add-neighbors 2. v1 v2))
          
          (define (add-vertex vert)
            (f32vector-set! content n (vertex-x vert))
            (f32vector-set! content (+ n 1) (vertex-y vert))
            (f32vector-set! content (+ n 2) (vertex-z vert))
            (set! n (+ n 3)))
          
          (define (add-normal normal)
            (f32vector-set! content n (vertex-x normal))
            (f32vector-set! content (+ n 1) (vertex-y normal))
            (f32vector-set! content (+ n 2) (vertex-z normal))
            (set! n (+ n 3)))
          
          (define (add-texture tex)
            (f32vector-set! content n (vertex-x tex))
            (f32vector-set! content (+ n 1) (vertex-y tex))
            (f32vector-set! content (+ n 2) (vertex-z tex))
            (set! n (+ n 3)))
          
          (define (add-bone bone-id)
            (f32vector-set! content n (cast <fl> bone-id))
            (set! n (+ n 1)))
          
          (define (add-neighbors rank n1 n2)
            (f32vector-set! neighbors m rank)
            (set! m (+ m 1))
            (f32vector-set! neighbors m (vertex-x n1))
            (f32vector-set! neighbors (+ m 1) (vertex-y n1))
            (f32vector-set! neighbors (+ m 2) (vertex-z n1))
            (set! m (+ m 3))
            (f32vector-set! neighbors m (vertex-x n2))
            (f32vector-set! neighbors (+ m 1) (vertex-y n2))
            (f32vector-set! neighbors (+ m 2) (vertex-z n2))
            (set! m (+ m 3)))
          
          (loop (for group in groups)
                (loop (for triangle-index in-vector (get-triangles~ group))
                      (add-triangle (vector-ref triangles triangle-index))))
          (values content neighbors)))))
  
  
  @WAIT
  (method public (extract-bounds)
    (define (vertex-ref index)
      (get-vertex~ (vector-ref vertices index)))
    
    (let ((bounds (let ((vert (vertex-ref 0)))
                    (let ((x (vertex-x vert))
                          (y (vertex-y vert))
                          (z (vertex-z vert)))
                      (cuboid x y z x y z)))))
      (loop (for n from 1 below (vector-length vertices))
            (let ((vertex (vertex-ref n)))
              (let ((x (vertex-x vertex))
                    (y (vertex-y vertex))
                    (z (vertex-z vertex)))
                (when (< x (cuboid-left bounds))
                  (cuboid-left-set! bounds x))
                (when (> x (cuboid-right bounds))
                  (cuboid-right-set! bounds x))
                (when (< y (cuboid-bottom bounds))
                  (cuboid-bottom-set! bounds y))
                (when (> y (cuboid-top bounds))
                  (cuboid-top-set! bounds y))
                (when (< z (cuboid-back bounds))
                  (cuboid-back-set! bounds z))
                (when (> z (cuboid-front bounds))
                  (cuboid-front-set! bounds z)))))
      bounds))
  
  
  @WAIT
  (method public (extract-animation name)
    (let ((animation (new Animation name animation-fps total-frames bones)))
      (setup-bones~ animation)
      animation)))


;;;
;;;; Import
;;;


(definition public (load-w3ds file (metadata: metadata #f))
  (let ((name (get-base~ file))
        (render (or (model-metadata-render metadata) '(transparent)))
        (mask (model-metadata-mask metadata)))
    (define (add-animations model)
      (let ((dir (get-parent~ file)))
        (iterate-directory~ dir
          (lambda (file)
            (when (extension=? (get-extension~ file) "w3ds")
              (let ((base (get-base~ file)))
                (unless (filename=? base name)
                  (assert (starts-with? base (concatenate name "_")))
                  (let ((name (subseq base (+ (cardinality name) 1) (cardinality base)))
                        (w3d (load-model file)))
                    (add-animation~ model name (extract-animation~ w3d name)))))))
          files?: #t
          directories?: #f)))
    
    ;; necessary as animations come from distinct files
    (define (validate-animations model)
      (unless (apply = (map (lambda (anim)
                              (vector-length (get-bones~ anim)))
                            (all-animations~ model)))
        (error "Inconsistant bones in model: {a}" name)))
    
    (let ((model (new Model name: name rotation: (vertex 0. PI/2 0.))))
      (set-metadata~ model metadata)
      ;; for tests
      (set-native~ model (load-model file))
      @WAIT
      (let ((w3d (load-model file)))
        (when (get-debug-w3d?)
          (set-native~ model w3d))
        ;; order is important as extract-atlas adjusts texture coordinates
        (let ((atlas (extract-atlas~ w3d file)))
          (when (get-debug-meshes?)
            (set-atlas~ model atlas))
          (let ((texture (get-texture~ atlas)))
            (define (extract-mesh groups renderer)
              (let ((mesh (new Mesh material: (new Material atlas: atlas texture: texture renderer: renderer))))
                (receive (data neighbors) (extract-geometry~ w3d groups)
                  (allocate-vertices~ mesh)
                  (set-data~ (get-vertices-buffer~ mesh) data 10)
                  (when (get-debug-meshes?)
                    (set-vertices-data~ mesh data))
                  (allocate-neighbors~ mesh)
                  (set-data~ (get-neighbors-buffer~ mesh) neighbors 6))
                mesh))
            
            (define (iterate-groups proc)
              (let ((renderer (require-renderer (car render)))
                    (render? (if (not mask) #t (car mask)))
                    (renderscan (cdr render))
                    (maskscan (and mask (cdr mask))))
                (loop (for group in-vector (get-groups~ w3d))
                      (do (proc group renderer render?)
                          (unless (null? renderscan)
                            (set! renderer (require-renderer (car renderscan)))
                            (set! renderscan (cdr renderscan)))
                          (unless (or (not maskscan) (null? maskscan))
                            (set! render? (car maskscan))
                            (set! maskscan (cdr maskscan)))))))
            
            (if (get-debug-meshes?)
                (let ((queue (new-queue)))
                  (iterate-groups
                    (lambda (group renderer render?)
                      (when render?
                        (enqueue queue (extract-mesh (list group) renderer)))))
                  (set-meshes~ model (list->vector (queue-list queue))))
              (let ((render-groups (make-table test: eq?)))
                (iterate-groups
                  (lambda (group renderer render?)
                    (when render?
                      (table-add render-groups renderer group))))
                (let ((queue (new-queue)))
                  (iterate-table render-groups
                    (lambda (renderer groups)
                      (enqueue queue (extract-mesh groups renderer))))
                  (set-meshes~ model (list->vector (queue-list queue))))))))
        (set-bounds~ model (extract-bounds~ w3d))
        (set-anchor~ model 'origin)
        (set-animation~ model (extract-animation~ w3d #f))
        (add-animations model)
        (validate-animations model))
      model)))


(definition (load-model file)
  (load-w3ds-model file))


;; temp protected for tests
(definition protected (load-w3ds-model file)
  (define (process w3ds)
    (let ((model (new W3D-Model))
          (meshes (getp w3ds "meshes"))
          (materials (getp w3ds "materials"))
          (nodes (getp w3ds "nodes"))
          (animations (getp w3ds "animations")))
      (set-meshes~ model (process-meshes meshes))
      (set-materials~ model (process-materials materials))
      (set-nodes~ model (process-nodes nodes))
      (set-animations~ model (process-animations animations))
      model))
  
  (define (process-meshes meshes)
    (define (process-vertices attributes vertices)
      (define (symbolize-attributes attributes)
        (loop (for attribute in-vector attributes)
              (collect (string->symbol attribute))))
      
      (let ((attributes (symbolize-attributes attributes))
            (count (vector-length vertices))
            (queue (new-queue)))
        (let (iter (scan 0))
          (if (>= scan count)
              (queue-list queue)
            (let ((vert (new W3D-Vertex)))
              (define (read-vertex)
                (prog1 (vertex (vector-ref vertices scan)
                               (vector-ref vertices (+ scan 1))
                               (vector-ref vertices (+ scan 2)))
                  (increase! scan 3)))
              
              (define (read-uv)
                (prog1 (vertex (vector-ref vertices scan)
                               (vector-ref vertices (+ scan 1))
                               0.)
                  (increase! scan 2)))
              
              (define (read-blendweight)
                (prog1 (f64vector (vector-ref vertices scan)
                                  (vector-ref vertices (+ scan 1)))
                  (increase! scan 2)))
              
              (for-each (lambda (attribute)
                          (case attribute
                            ((POSITION) (set-position~ vert (read-vertex)))
                            ((NORMAL) (set-normal~ vert (read-vertex)))
                            ((TEXCOORD0) (set-texcoord~ vert (read-uv)))
                            ((BLENDWEIGHT0) (set-blendweight0~ vert (read-blendweight)))
                            ((BLENDWEIGHT1) (set-blendweight1~ vert (read-blendweight)))
                            ((BLENDWEIGHT2) (set-blendweight2~ vert (read-blendweight)))
                            ((BLENDWEIGHT3) (set-blendweight3~ vert (read-blendweight)))))
                        attributes)
              (enqueue queue vert)
              (iter scan))))))
    
    (define (process-parts parts)
      (define (process-part part)
        (let ((id (getp part "id"))
              (type (getp part "type"))
              (indices (getp part "indices")))
          (assert (equal? type "TRIANGLES"))
          (new W3D-Mesh-Part id indices)))
      
      (loop (for part in-vector parts)
            (collect (process-part part))))
    
    (loop (for mesh in-vector meshes)
          (collect (let ((vertices (process-vertices (getp mesh "attributes") (getp mesh "vertices")))
                         (parts (process-parts (getp mesh "parts"))))
                     (new W3D-Mesh vertices parts)))))
  
  (define (process-materials materials)
    (define (process-material material)
      (define (process-textures textures)
        (when textures
          (loop (for texture in-vector textures)
                (collect (let ((id (getp texture "id"))
                               (filename (getp texture "filename"))
                               (type (getp texture "type")))
                           (new W3D-Texture id filename type))))))
      
      (let ((id (getp material "id"))
            (ambient (getp material "ambient"))
            (diffuse (getp material "diffuse"))
            (specular (getp material "specular"))
            (textures (process-textures (getp material "textures"))))
        (new W3D-Material id ambient diffuse specular textures)))
    
    (loop (for material in-vector materials)
          (collect (process-material material))))
  
  (define (process-nodes nodes)
    (define (process-node node)
      (define (process-parts parts)
        (when parts
          (loop (for part in-vector parts)
                (collect (let ((meshpartid (getp part "meshpartid"))
                               (materialid (getp part "materialid"))
                               (uvMapping (getp part "uvMapping")))
                           (new W3D-Node-Part meshpartid materialid uvMapping))))))
      
      (let ((id (getp node "id"))
            (translation (process-vertex+ (getp node "translation")))
            (rotation (process-rotation (getp node "rotation")))
            (scale (process-vertex+ (getp node "scale")))
            (parts (process-parts (getp node "parts")))
            (children (getp node "children")))
        (new W3D-Node id translation rotation scale parts (and children (process-nodes children)))))
    
    (loop (for node in-vector nodes)
          (collect (process-node node))))
  
  (define (process-animations animations)
    (define (process-animation animation)
      animation)
    
    (loop (for animation in-vector animations)
          (collect (process-animation animation))))
  
  (define (process-vertex+ vert)
    (and vert (process-vertex vert)))
  
  (define (process-vertex vert)
    (vertex (vector-ref vert 0)
            (vector-ref vert 1)
            (vector-ref vert 2)))
  
  (define (process-rotation rot)
    rot)
  
  (define (getp expr prop)
    (getf expr prop test: equal?))
  
  (let ((w3ds (call-with-input-file (path-settings file) read)))
    (process w3ds))))
