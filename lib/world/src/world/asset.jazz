;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Asset
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.asset jazz


(import (jazz.io)
        (world))


(class Asset extends Object
  
  
  (slot assets getter generate)
  (slot root   getter generate)
  (slot spine  getter generate)
  (slot file   getter generate)
  
  
  (method override (initialize self assets root spine)
    (set! self.assets assets)
    (set! self.root (listify root))
    (set! self.spine spine)
    (set! self.file (new-file (get-directory assets) (append self.root spine))))
  
  
  (method override (print self output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{l}" spine))))
  
  
  (method public (get-name self)
    (get-name file))
  
  
  (method public (get-base self)
    (get-base file))
  
  
  (method public (get-path self)
    (filename-spine (join spine "/")))
  
  
  (method public (get-unique-spine self (extension #f))
    (let ((unique-spine (append (get-unique-spine assets) root spine)))
      (if (not extension)
          unique-spine
        (append (butlast unique-spine) (list (add-extension (last unique-spine) extension))))))
  
  
  (method public (make-brother self extension)
    (make-file assets (append root (butlast spine) (list (add-extension (last spine) extension)))))
  
  
  (method protected (load-text self)
    ;; quick test for events
    (if (not (exists? file))
        ""
      (call-with-input-file (path-settings file)
        (lambda (input)
          (read-content-string input))))))


(definition public inline (asset=? x <Asset> y <Asset>)
  (pathname=? (get-file x) (get-file y)))


(definition public (asset-hash asset <Asset>)
  (pathname-hash (get-file asset))))
