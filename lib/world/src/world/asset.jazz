;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Asset
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.asset jazz


(import (jazz.io)
        (world))


(definition protected (estimate-asset-size path)
  (cond ((starts-with? path "model/") 250)
        ((starts-with? path "icon/") 4)
        ((starts-with? path "item/") 4)
        ((starts-with? path "ambience/") 50)
        ((starts-with? path "sound/") 50)
        ((starts-with? path "texture/") 50)
        ((starts-with? path "skybox/") 3000)
        (else 10)))


(definition protected (critical-assets avatar)
  (define (animation-asset base)
    (string-append "model/" avatar "/" base ".ms3d"))
  
  `(,(animation-asset "Fall")
    ,(animation-asset "Jump")
    ,(animation-asset "JumpStart")
    ,(animation-asset "JumpEnd")
    ,(animation-asset "JumpLandRun")
    ,(animation-asset "Run")
    ,(animation-asset "WalkBackwards")
    ,(animation-asset "SwimIdle")
    ,(animation-asset "Swim")
    
    "skybox/world/earth/ft.png"
    "skybox/world/earth/bk.png"
    "skybox/world/earth/lf.png"
    "skybox/world/earth/rt.png"
    "skybox/world/earth/up.png"
    "skybox/world/earth/dn.png"
    
    @wait (
    "sound/warcraft/step/mFootSmallDirtA.wav"
    "sound/warcraft/step/mFootSmallDirtB.wav"
    "sound/warcraft/step/mFootSmallDirtC.wav"
    "sound/warcraft/step/mFootSmallDirtD.wav"
    "sound/warcraft/step/mFootSmallDirtE.wav"
    "sound/warcraft/step/mFootSmallGrassA.wav"
    "sound/warcraft/step/mFootSmallGrassB.wav"
    "sound/warcraft/step/mFootSmallGrassC.wav"
    "sound/warcraft/step/mFootSmallGrassD.wav"
    "sound/warcraft/step/mFootSmallGrassE.wav"
    "sound/warcraft/step/mFootSmallSnowA.wav"
    "sound/warcraft/step/mFootSmallSnowB.wav"
    "sound/warcraft/step/mFootSmallSnowC.wav"
    "sound/warcraft/step/mFootSmallSnowD.wav"
    "sound/warcraft/step/mFootSmallSnowE.wav"
    "sound/warcraft/step/mFootSmallStoneA.wav"
    "sound/warcraft/step/mFootSmallStoneB.wav"
    "sound/warcraft/step/mFootSmallStoneC.wav"
    "sound/warcraft/step/mFootSmallStoneD.wav"
    "sound/warcraft/step/mFootSmallStoneE.wav"
    "sound/warcraft/step/mFootSmallWaterA.wav"
    "sound/warcraft/step/mFootSmallWaterB.wav"
    "sound/warcraft/step/mFootSmallWaterC.wav"
    "sound/warcraft/step/mFootSmallWaterD.wav"
    "sound/warcraft/step/mFootSmallWaterE.wav"
    "sound/warcraft/step/mFootSmallWoodA.wav"
    "sound/warcraft/step/mFootSmallWoodB.wav"
    "sound/warcraft/step/mFootSmallWoodC.wav"
    "sound/warcraft/step/mFootSmallWoodD.wav"
    "sound/warcraft/step/mFootSmallWoodE.wav")
    
    "icon/world/Beliefs Symbols/Bahae.png"
    "icon/world/Beliefs Symbols/Hinduism.png"
    "icon/world/Created/RedX.png"
    "icon/world/Games/Visual.png"
    "icon/world/Interface/Blocks-Showcase.png"
    "icon/world/Interface/Models-Showcase.png"
    "icon/world/Interface/No-Showcase.png"
    "icon/world/Landmarks/Japanese-Gate.png"
    "icon/world/Logogram/Circles-Half.png"
    "icon/world/Logogram/Circular-Logogram.png"
    "icon/world/Logogram/Flower-Floral.png"
    "icon/world/Logogram/Logogram-Five.png"
    "icon/world/Logogram/Logogram-Shapes-Three.png"
    "icon/world/Logogram/Logogram-Waves-One.png"
    "icon/world/Logogram/Seeker.png"
    "icon/world/Logogram/Tornado.png"
    "icon/world/Logogram/Two-Shaped-Circle.png"
    "icon/world/Network/Bluetooth.png"
    "icon/world/Network/Medium-WiFi.png"
    "icon/world/Photography UI/Lens.png"
    "icon/world/Sacred Geometry/Hexahedron.png"
    "icon/world/Symbol/Circles-Symbol-Twelve.png"
    "icon/world/Symbol/Circles-Symbol-Two.png"
    "icon/world/Symbol/Cultural-Symbol-Eight.png"
    "icon/world/Symbol/Symbol-Two.png"
    "icon/world/Symbol/Two-Circles-Symbol-Two.png"
    
    @wait-liquid (
    "ambience/warcraft/water/Underwater.ogg"
    "sound/warcraft/water/EnterWaterSmallA.wav")
    
    "sound/warcraft/user/selectTarget.wav"
    "sound/warcraft/user/deselectTarget.wav"
    "sound/warcraft/user/iPlayerInviteA.ogg"
    "sound/warcraft/user/LevelUp.ogg"
    "sound/warcraft/user/MapPing.wav"
    
    "sound/together/message.wav"
    
    "sound/minecraft/random/door_open.wav"
    "sound/minecraft/random/door_close.wav"
    "sound/minecraft/random/chestopen.wav"
    "sound/minecraft/random/chestclosed.wav"
    "sound/minecraft/piston/in.wav"
    "sound/minecraft/piston/out.wav"
    
    "texture/world/black.png"))


(definition protected (optimal-assets)
  '("icon/world/Games/Circles.png"
    "icon/world/Logogram/Shapes.png"
    "icon/world/Logogram/Flower-Floral.png"
    "icon/world/Logistic Delivery/Open-Warehouse.png"
    "icon/world/Chemistry/Science.png"
    "icon/world/Chemistry/Chemistry.png"
    "icon/world/Photography UI/Lens.png"
    "icon/world/Network/Medium-WiFi.png"
    "icon/world/Photography UI/Sunny.png"
    "icon/world/Symbol/Two-Circles-Symbol-Two.png"
    "icon/world/Network/Bluetooth.png"
    "icon/world/Interface/Gadgets-Showcase.png"
    "icon/world/Symbol/Cultural-Symbol-Eight.png"
    "icon/world/Created/RedX.png"
    "icon/world/Symbol/Floral.png"
    "icon/world/Sacred Geometry/Line-Icosahedron.png"
    "icon/world/Games/Visual.png"
    "icon/world/Games/Tetris.png"
    "icon/world/Photography UI/Flower.png"
    "icon/world/Interface/No-Showcase.png"
    "icon/world/Interface/Blocks-Showcase.png"
    "icon/world/Interface/Models-Showcase.png"
    "icon/world/Logogram/Minimilist-Logogram.png"
    "icon/world/Logogram/Logogram-Windmill.png"
    "icon/world/Logogram/Parts.png"
    "icon/world/Photography UI/Grid.png"
    "icon/world/Web and Apps/Pointer.png"
    "icon/world/Symbol/Symbol-Twelve.png"
    "icon/world/Symbol/Cancer.png"
    "icon/world/Interface/Toggle-Fullscreen.png"
    "icon/world/Symbol/Plus.png"
    "icon/world/Sacred Geometry/Tetrahedron.png"
    "icon/world/Symbol/Waves-.png"
    "icon/world/Photography UI/No-Flash.png"
    "icon/world/Web and Apps/Light.png"
    "icon/world/Audio/Specifics.png"
    "icon/world/Audio/Music-Specifics.png"
    "icon/world/Audio/Round-Dial.png"
    
    "item/netherbrick.png"
    "item/stick.png"
    "item/bed.png"
    "item/reeds.png"
    "item/nether_star.png"
    "item/redstone_dust.png"
    "item/iron_ingot.png"
    
    ;; idle models
    
    ;; skyboxes (just the sample texture!?)
    ))


(class Asset-Not-Found-Error extends Error)


;; kind of a quick hack
(definition package (asset-path asset)
  (if (is? (get-assets asset) world.assets:Catalog-Assets)
      (string-path asset)
    (let ((path (cdr (get-path asset))))
      (join (append (butlast path) (list (filename-base (last path)))) "/"))))


(class Asset extends Object
  
  
  (slot assets getter generate)
  (slot path   getter generate)
  
  
  (method override (initialize self assets path)
    (set! self.assets assets)
    (set! self.path (if (string? path) (tokenise-filename path) path)))
  
  
  (method override (print self output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{l}" path))))
  
  
  (method public (get-parent self)
    (butlast path))
  
  
  (method public (get-name self)
    (filename-name (last path)))
  
  
  (method public (get-base self)
    (filename-base (last path)))
  
  
  (method public (string-path self)
    (join path "/"))
  
  
  (method public (brother-path self name)
    (append (butlast path) (list name)))
  
  
  (method public (brother-asset self name)
    (new Asset assets (brother-path self name)))
  
  
  (method public (make-brother self name)
    (make-file assets (brother-path self name)))
  
  
  (method public (request-file self)
    (request-file assets (string-path self)))
  
  
  (method public (request-directory self)
    (request-directory assets (string-path self)))
  
  
  (method public (retrieve-file self)
    (retrieve-file assets (string-path self)))
  
  
  (method public (retrieve-directory self)
    (retrieve-directory assets (string-path self)))
  
  
  (method protected (load-text self)
    ;; quick test for events
    (let ((file (retrieve-file self)))
      (if (not (exists? file))
          ""
        (call-with-input-file (path-settings file)
          (lambda (input)
            (read-content-string input)))))))


(definition public inline (asset=? x <Asset> y <Asset>)
  (equal? (get-path x) (get-path y)))


(definition public (asset-hash asset <Asset>)
  (equal?-hash (get-path asset))))
