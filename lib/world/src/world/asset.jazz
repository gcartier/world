;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Asset
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.asset jazz


(import (jazz.io)
        (world))


;; kind of a quick hack
(definition package (asset-path asset)
  (if (is? (get-assets asset) world.assets:Catalog-Assets)
      (string-path asset)
    (let ((path (cdr (get-path asset))))
      (join (append (butlast path) (list (filename-base (last path)))) "/"))))


(class Asset extends Object
  
  
  (slot assets getter generate)
  (slot path   getter generate)
  
  
  (method override (initialize self assets path)
    (set! self.assets assets)
    (set! self.path (if (string? path) (tokenise-filename path) path)))
  
  
  (method override (print self output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{l}" path))))
  
  
  (method public (get-parent self)
    (butlast path))
  
  
  (method public (get-name self)
    (filename-name (last path)))
  
  
  (method public (get-base self)
    (filename-base (last path)))
  
  
  (method public (string-path self)
    (join path "/"))
  
  
  (method public (brother-path self name)
    (append (butlast path) (list name)))
  
  
  (method public (brother-asset self name)
    (new Asset assets (brother-path self name)))
  
  
  (method public (make-brother self name)
    (make-file assets (brother-path self name)))
  
  
  (method public (retrieve-directory self)
    (retrieve-directory assets (string-path self)))
  
  
  (method public (retrieve-file self)
    (retrieve-file assets (string-path self)))
  
  
  (method protected (load-text self)
    ;; quick test for events
    (let ((file (retrieve-file self)))
      (if (not (exists? file))
          ""
        (call-with-input-file (path-settings file)
          (lambda (input)
            (read-content-string input)))))))


(definition public inline (asset=? x <Asset> y <Asset>)
  (equal? (get-path x) (get-path y)))


(definition public (asset-hash asset <Asset>)
  (equal?-hash (get-path asset))))
