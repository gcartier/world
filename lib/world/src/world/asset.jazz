;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Asset
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.asset jazz


(import (jazz.associative)
        (jazz.io)
        (world)
        (world.context)
        (world.settings))


(definition protected (estimate-asset-size path)
  (cond ((starts-with? path "model/") 250)
        ((starts-with? path "icon/") 4)
        ((starts-with? path "item/") 4)
        ((starts-with? path "ambience/") 50)
        ((starts-with? path "sound/") 50)
        ((starts-with? path "texture/") 50)
        ((starts-with? path "skybox/") 3000)
        (else 10)))


(definition protected (critical-assets avatar)
  (define (animation-asset base)
    (string-append "model/" avatar "/" base ".ms3d"))
  
  `(,(animation-asset "Fall")
    ,(animation-asset "Jump")
    ,(animation-asset "JumpStart")
    ,(animation-asset "JumpEnd")
    ,(animation-asset "JumpLandRun")
    ,(animation-asset "Run")
    ,(animation-asset "WalkBackwards")
    ,(animation-asset "SwimIdle")
    ,(animation-asset "Swim")
    
    "skybox/world/earth/ft.png"
    "skybox/world/earth/bk.png"
    "skybox/world/earth/lf.png"
    "skybox/world/earth/rt.png"
    "skybox/world/earth/up.png"
    "skybox/world/earth/dn.png"
    
    "sound/warcraft/step/mFootSmallDirtA.wav"
    "sound/warcraft/step/mFootSmallDirtB.wav"
    "sound/warcraft/step/mFootSmallDirtC.wav"
    "sound/warcraft/step/mFootSmallDirtD.wav"
    "sound/warcraft/step/mFootSmallDirtE.wav"
    "sound/warcraft/step/mFootSmallGrassA.wav"
    "sound/warcraft/step/mFootSmallGrassB.wav"
    "sound/warcraft/step/mFootSmallGrassC.wav"
    "sound/warcraft/step/mFootSmallGrassD.wav"
    "sound/warcraft/step/mFootSmallGrassE.wav"
    "sound/warcraft/step/mFootSmallSnowA.wav"
    "sound/warcraft/step/mFootSmallSnowB.wav"
    "sound/warcraft/step/mFootSmallSnowC.wav"
    "sound/warcraft/step/mFootSmallSnowD.wav"
    "sound/warcraft/step/mFootSmallSnowE.wav"
    "sound/warcraft/step/mFootSmallStoneA.wav"
    "sound/warcraft/step/mFootSmallStoneB.wav"
    "sound/warcraft/step/mFootSmallStoneC.wav"
    "sound/warcraft/step/mFootSmallStoneD.wav"
    "sound/warcraft/step/mFootSmallStoneE.wav"
    "sound/warcraft/step/mFootSmallWaterA.wav"
    "sound/warcraft/step/mFootSmallWaterB.wav"
    "sound/warcraft/step/mFootSmallWaterC.wav"
    "sound/warcraft/step/mFootSmallWaterD.wav"
    "sound/warcraft/step/mFootSmallWaterE.wav"
    "sound/warcraft/step/mFootSmallWoodA.wav"
    "sound/warcraft/step/mFootSmallWoodB.wav"
    "sound/warcraft/step/mFootSmallWoodC.wav"
    "sound/warcraft/step/mFootSmallWoodD.wav"
    "sound/warcraft/step/mFootSmallWoodE.wav"
    
    "icon/world/Beliefs Symbols/Bahae.png"
    "icon/world/Beliefs Symbols/Hinduism.png"
    "icon/world/Created/RedX.png"
    "icon/world/Games/Visual.png"
    "icon/world/Interface/Blocks-Showcase.png"
    "icon/world/Interface/Models-Showcase.png"
    "icon/world/Interface/No-Showcase.png"
    "icon/world/Landmarks/Japanese-Gate.png"
    "icon/world/Logogram/Circles-Half.png"
    "icon/world/Logogram/Circular-Logogram.png"
    "icon/world/Logogram/Flower-Floral.png"
    "icon/world/Logogram/Logogram-Five.png"
    "icon/world/Logogram/Logogram-Shapes-Three.png"
    "icon/world/Logogram/Logogram-Waves-One.png"
    "icon/world/Logogram/Seeker.png"
    "icon/world/Logogram/Tornado.png"
    "icon/world/Logogram/Two-Shaped-Circle.png"
    "icon/world/Network/Bluetooth.png"
    "icon/world/Network/Medium-WiFi.png"
    "icon/world/Photography UI/Lens.png"
    "icon/world/Sacred Geometry/Hexahedron.png"
    "icon/world/Symbol/Circles-Symbol-Twelve.png"
    "icon/world/Symbol/Circles-Symbol-Two.png"
    "icon/world/Symbol/Cultural-Symbol-Eight.png"
    "icon/world/Symbol/Symbol-Two.png"
    "icon/world/Symbol/Two-Circles-Symbol-Two.png"
    
    "ambience/warcraft/water/Underwater.ogg"
    "sound/warcraft/water/EnterWaterSmallA.wav"
    
    "sound/warcraft/user/selectTarget.wav"
    "sound/warcraft/user/deselectTarget.wav"
    "sound/warcraft/user/iPlayerInviteA.ogg"
    "sound/warcraft/user/LevelUp.ogg"
    "sound/warcraft/user/MapPing.wav"
    
    "sound/together/message.wav"
    
    "sound/minecraft/random/door_open.wav"
    "sound/minecraft/random/door_close.wav"
    "sound/minecraft/random/chestopen.wav"
    "sound/minecraft/random/chestclosed.wav"
    "sound/minecraft/piston/in.wav"
    "sound/minecraft/piston/out.wav"
    
    "texture/world/black.png"))


(definition protected (optimal-assets)
  '("icon/world/Games/Circles.png"
    "icon/world/Logogram/Shapes.png"
    "icon/world/Logogram/Flower-Floral.png"
    "icon/world/Logistic Delivery/Open-Warehouse.png"
    "icon/world/Chemistry/Science.png"
    "icon/world/Chemistry/Chemistry.png"
    "icon/world/Photography UI/Lens.png"
    "icon/world/Network/Medium-WiFi.png"
    "icon/world/Photography UI/Sunny.png"
    "icon/world/Symbol/Two-Circles-Symbol-Two.png"
    "icon/world/Network/Bluetooth.png"
    "icon/world/Interface/Gadgets-Showcase.png"
    "icon/world/Symbol/Cultural-Symbol-Eight.png"
    "icon/world/Created/RedX.png"
    "icon/world/Symbol/Floral.png"
    "icon/world/Sacred Geometry/Line-Icosahedron.png"
    "icon/world/Games/Visual.png"
    "icon/world/Games/Tetris.png"
    "icon/world/Photography UI/Flower.png"
    "icon/world/Interface/No-Showcase.png"
    "icon/world/Interface/Blocks-Showcase.png"
    "icon/world/Interface/Models-Showcase.png"
    "icon/world/Logogram/Minimilist-Logogram.png"
    "icon/world/Logogram/Logogram-Windmill.png"
    "icon/world/Logogram/Parts.png"
    "icon/world/Photography UI/Grid.png"
    "icon/world/Web and Apps/Pointer.png"
    "icon/world/Symbol/Symbol-Twelve.png"
    "icon/world/Symbol/Cancer.png"
    "icon/world/Interface/Toggle-Fullscreen.png"
    "icon/world/Symbol/Plus.png"
    "icon/world/Sacred Geometry/Tetrahedron.png"
    "icon/world/Symbol/Waves-.png"
    "icon/world/Photography UI/No-Flash.png"
    "icon/world/Web and Apps/Light.png"
    "icon/world/Audio/Specifics.png"
    "icon/world/Audio/Music-Specifics.png"
    "icon/world/Audio/Round-Dial.png"
    
    "item/netherbrick.png"
    "item/stick.png"
    "item/bed.png"
    "item/reeds.png"
    "item/nether_star.png"
    "item/redstone_dust.png"
    "item/iron_ingot.png"
    
    ;; idle models
    
    ;; skyboxes (just the sample texture!?)
    ))


(class Asset-Not-Found-Error extends Error)


;; kind of a quick hack
(definition package (asset-path asset)
  (if (is? (get-assets asset) world.asset:Catalog-Assets)
      (string-path asset)
    (let ((path (cdr (get-path asset))))
      (join (append (butlast path) (list (filename-base (last path)))) "/"))))


(class Asset extends Object
  
  
  (slot assets getter generate)
  (slot path   getter generate)
  
  
  (method override (initialize self assets path)
    (set! self.assets assets)
    (set! self.path (if (string? path) (tokenise-filename path) path)))
  
  
  (method override (print self output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{l}" path))))
  
  
  (method public (get-parent self)
    (butlast path))
  
  
  (method public (get-name self)
    (filename-name (last path)))
  
  
  (method public (get-base self)
    (filename-base (last path)))
  
  
  (method public (string-path self)
    (join path "/"))
  
  
  (method public (brother-path self name)
    (append (butlast path) (list name)))
  
  
  (method public (brother-asset self name)
    (new Asset assets (brother-path self name)))
  
  
  (method public (make-brother self name)
    (make-file assets (brother-path self name)))
  
  
  (method public (request-file self)
    (request-file assets (string-path self)))
  
  
  (method public (request-directory self)
    (request-directory assets (string-path self)))
  
  
  (method public (retrieve-file self)
    (retrieve-file assets (string-path self)))
  
  
  (method public (retrieve-directory self)
    (retrieve-directory assets (string-path self)))
  
  
  (method package (load-text self)
    ;; quick test for events
    (let ((file (retrieve-file self)))
      (if (not (exists? file))
          ""
        (call-with-input-file (path-settings file)
          (lambda (input)
            (read-content-string input)))))))


(definition public inline (asset=? x <Asset> y <Asset>)
  (equal? (get-path x) (get-path y)))


(definition public (asset-hash asset <Asset>)
  (equal?-hash (get-path asset)))


;;;
;;;; Assets
;;;


(class Assets extends Object
  
  
  (slot where getter generate)
  
  
  (method override (initialize self where)
    (set! self.where where))
  
  
  (method override (print self output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{a}" where))))
  
  
  (method protected virtual (cache-index self)
    )
  
  
  (method protected virtual (request-file self path)
    (lambda ()
      (retrieve-file self path)))
  
  
  (method protected virtual (retrieve-file self path)
    )
  
  
  (method protected virtual (request-directory self path . rest)
    (lambda ()
      (apply retrieve-directory self path rest)))
  
  
  (method protected virtual (retrieve-directory self path . rest)
    )
  
  
  (method package virtual (make-directory self path)
    )
  
  
  (method package virtual (make-file self path)
    )
  
  
  (method protected (listify-path self path)
    (if (string? path)
        (tokenise-filename path)
      path))
  
  
  (method public virtual (iterate-entries self proc)
    (let ((index (cache-index self)))
      (for-each (lambda (entry)
                  (proc (get-path entry)))
                (get-entries index))))
  
  
  (method public virtual (contains-file? self filename)
    (find-entry (cache-index self) filename))
  
  
  (method public virtual (contains-directory? self dirname)
    (let ((dirname (normalize-directory dirname)))
      (continuation-capture
        (lambda (return)
          (iterate-entries self
            (lambda (path)
              (when (starts-with? path dirname)
                (continuation-return return #t))))
          #f))))
  
  
  (method public virtual (directory-list self dirpath)
    (let ((dirpath (normalize-directory dirpath))
          (queue (new-queue)))
      (iterate-entries self
        (lambda (path)
          (when (starts-with? path dirpath)
            (enqueue queue path))))
      (queue-list queue))))


;;;
;;;; Local
;;;


(definition debug-retrieve?
  (world-setting 'world.debug-retrieve? #f))


(class Local-Assets extends Assets
  
  
  (slot repository   getter generate)
  (slot remote-index getter generate)
  
  
  (method override (initialize self where directory)
    (nextmethod self where)
    (set! self.repository (new Associative-Repository directory init?: #t))
    (set! self.remote-index (new Associative-Index #f #f)))
  
  
  (method override (cache-index self)
    (get-index repository))
  
  
  (method package (setup-remote-index self entries)
    (setup-entries remote-index entries)
    (setup-removed self))
  
  
  ;; removed special handling to ensure consistency
  ;; of local assets being a subset of remote assets
  (method package (setup-removed self)
    (let ((removed (collect (lambda (entry)
                              (let ((path (get-path entry)))
                                (and (not (find-entry remote-index path))
                                     (list 'removed path))))
                            (get-entries (cache-index self)))))
      (when (not-null? removed)
        (removed-update self removed))))
  
  
  ;; removed special handling to ensure consistency
  ;; of local assets being a subset of remote assets
  (method package (removed-update self changes)
    (let ((removed (collect-if (lambda (change)
                                 (eq? (car change) 'removed))
                               changes)))
      (when (not-null? removed)
        (let ((index (cache-index self)))
          (update-changes index removed)
          (discarding-directories repository
            (lambda (discard-directory)
              (for-each (lambda (change)
                          (let ((path (cadr change)))
                            (let ((file (new-file (get-working repository) (tokenise-filename path))))
                              (when (exists? file)
                                (delete file)
                                (discard-directory (get-parent file))))))
                        removed)))))))
  
  
  (method override (request-file self path)
    (let ((index (cache-index self)))
      (let ((entry (find-entry index path))
            (remote-entry (find-entry remote-index path))
            (file (new-file (get-working repository) (tokenise-filename path))))
        (if (not remote-entry)
            (signal (new Asset-Not-Found-Error message: (format "Asset not found: {a}" path)))
          (if (and entry (equal? (get-digest entry) (get-digest remote-entry))
                ;; this test is a fail safe against someone deleting
                ;; a file from their assets directory without the jas
                ;; index being updated
                (exists? file))
              file
            (let ((block (request-asset self path)))
              (lambda ()
                (bind (content digest flags) (block)
                  (store-object repository content digest)
                  (retrieve-file repository digest file flags)
                  (update index path 'file (list remote-entry))
                  (save-to-file index)
                  file))))))))
  
  
  (method override (retrieve-file self path)
    (let ((block/file (request-file self path)))
      (if (procedure? block/file)
          (working self
            (lambda ()
              (block/file)))
        block/file)))
  
  
  (method override (request-directory self dirpath)
    (let ((dirpath (normalize-directory dirpath)))
      (let ((blocks (new-queue)))
        (iterate-entries self
          (lambda (path)
            (when (starts-with? path dirpath)
              (let ((block/file (request-file self path)))
                (when (procedure? block/file)
                  (enqueue blocks block/file))))))
        (let ((blocks (queue-list blocks)))
          (if (null? blocks)
              (make-directory self dirpath)
            (lambda ()
              (for-each (lambda (block)
                          (block))
                        blocks)
              (make-directory self dirpath)))))))
  
  
  (method override (retrieve-directory self dirpath (progress: progress #f))
    (let ((dirpath (normalize-directory dirpath)))
      (define (count-entries)
        (let ((count 0))
          (iterate-entries self
            (lambda (path)
              (when (starts-with? path dirpath)
                (increase! count))))
          count))
      
      (let ((count (and progress (count-entries))))
        (working self
          (lambda ()
            (let ((n 0)
                  (blocks (new-queue)))
              (iterate-entries self
                (lambda (path)
                  (when (starts-with? path dirpath)
                    (when count
                      (working-progress self progress (percentage n count)))
                    (let ((block/file (request-file self path)))
                      (when (procedure? block/file)
                        (enqueue blocks block/file)))
                    (increase! n))))
              (for-each (lambda (block)
                          (block))
                        (queue-list blocks))
              (when count
                (working-progress self progress (percentage n count)))
              (make-directory self dirpath)))))))
  
  
  (method protected virtual (request-asset self path)
    (lambda ()
      (retrieve-asset self path)))
  
  
  (method protected virtual (retrieve-asset self path)
    )
  
  
  (method override (make-directory self path) <Directory>
    (new-directory (get-working repository) (listify-path self path)))
  
  
  (method override (make-file self path) <File>
    (new-file (get-working repository) (listify-path self path)))
  
  
  (method protected virtual (working self thunk)
    (thunk))
  
  
  (method protected virtual (working-progress self message percentage)
    )
  
  
  (method override (iterate-entries self proc)
    (for-each (lambda (entry)
                (proc (get-path entry)))
              (get-entries remote-index)))
  
  
  (method override (contains-file? self filename)
    (find-entry remote-index filename)))


;;;
;;;; Remote
;;;


(class Remote-Assets extends Assets
  
  
  (slot repository getter generate)
  
  
  (method override (initialize self where directory)
    (nextmethod self where)
    (set! self.repository (new Associative-Repository directory init?: #t)))
  
  
  (method override (cache-index self)
    (get-index repository))
  
  
  (method override (retrieve-file self path)
    (let ((entry (find-entry repository path))
          (file (new-file (get-working repository) (tokenise-filename path))))
      (assert entry
        (let ((digest (get-digest entry))
              (flags (get-flags entry)))
          (retrieve-file repository digest file flags)
          file))))
  
  
  (method override (retrieve-directory self dirpath . rest)
    (let ((dirpath (normalize-directory dirpath)))
      (iterate-entries self
        (lambda (path)
          (when (starts-with? path dirpath)
            (retrieve-file self path))))
      (make-directory self dirpath)))
  
  
  (method override (make-directory self path) <Directory>
    (new-directory (get-working repository) (listify-path self path)))
  
  
  (method override (make-file self path) <File>
    (new-file (get-working repository) (listify-path self path))))


;;;
;;;; Directory
;;;


(definition public (make-directory-assets where dir)
  (new Directory-Assets where dir))


(class Directory-Assets extends Assets
  
  
  (slot directory               getter generate)
  (slot index     initialize #f getter generate)
  
  
  (method override (initialize self where directory)
    (nextmethod self where)
    (set! self.directory directory))
  
  
  (method override (cache-index self)
    (or index
        (let ((entries (scanning-directory "" directory
                         (lambda (path file base)
                           (new Associative-Entry path #f #f 0 #f #f)))))
          (let ((idx (new Associative-Index #f directory entries: entries)))
            (set! index idx)
            idx))))
  
  
  (method override (retrieve-file self path)
    (make-file self path))
  
  
  (method override (retrieve-directory self path . rest)
    (make-directory self path))
  
  
  (method override (make-directory self path) <Directory>
    (new-directory directory (listify-path self path)))
  
  
  (method override (make-file self path) <File>
    (new-file directory (listify-path self path))))


;;;
;;;; Catalog
;;;


(class Catalog-Assets extends Directory-Assets))
