;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Assets
;;;


(module world.asset jazz


(import (jazz.geometry)
        (jazz.graphic)
        (jazz.graphic.opengl.glew)
        (jazz.io)
        (jazz.jml)
        (jazz.library)
        (jazz.literals)
        (jazz.media)
        (jazz.network)
        (jazz.platform)
        (jazz.platform.cairo)
        (jazz.runtime)
        (jazz.system)
        (jazz.ui)
        (jazz.ui.dialog)
        (jazz.ui.window)
        (time)
        (world)
        (world.autoload)
        (world.face)
        (world.foreign)
        (world.geometry)
        (world.object)
        (world.sprite)
        (world.texture)
        (world.triangle)
        (world.window)
        (world.client.window))


;;;
;;;; Asset
;;;


(class Asset extends Sprite
  
  
  (method override (prepare rest)
    (nextmethod rest)
    (set-color (or (get-asset-color~ zone) {Color red: 134 green: 82 blue: 1})))
  
  
  ;;;
  ;;;; Faces
  ;;;
  
  
  (method (image-texture image)
    (let ((rect (get-image~ (get-texture-pack~ world) image)))
      (values (get-left~ rect)
              (get-top~ rect)
              (get-right~ rect)
              (get-bottom~ rect)))))


;;;
;;;; Triangle Asset
;;;


(class Triangle-Asset extends Asset
  
  
  (property v1 initialize #f accessors generate)
  (property v2 initialize #f accessors generate)
  (property v3 initialize #f accessors generate)
  
  
  (method override (prepare rest)
    (nextmethod rest)
    (set! x 0.)
    (set! y 0.)
    (set! z 0.)
    (set! width 5.)
    (set! height 5.)
    (set! depth 5.)
    (set-color {Color red: 134 green: 82 blue: 1}))
  
  
  (method override (finish rest)
    (nextmethod rest)
    (set-position (triangle-center v1 v2 v3)))
  
  
  (method override (sprite-faces)
    (list
      (make-face #f
                 position
                 (make-triangle (plane-normal v1 v2 v3)
                                v1 (vertex 0. 1. 1.)
                                v2 (vertex 1. 1. 1.)
                                v3 (vertex 1. 0. 1.)))))
  
  
  (method override (draw-3d)
    (glColor4f red green blue alpha)
    (glBegin GL_TRIANGLES)
    (glVertex3f (vertex-x v1) (vertex-y v1) (vertex-z v1))
    (glVertex3f (vertex-x v2) (vertex-y v2) (vertex-z v2))
    (glVertex3f (vertex-x v3) (vertex-y v3) (vertex-z v3))
    (glEnd))
  
  
  (method override (draw-target)
    (gl-colorize {Color Red})
    (glLineWidth 2.)
    (glBegin GL_LINE_LOOP)
    (glVertex3f (vertex-x v1) (vertex-y v1) (vertex-z v1))
    (glVertex3f (vertex-x v2) (vertex-y v2) (vertex-z v2))
    (glVertex3f (vertex-x v3) (vertex-y v3) (vertex-z v3))
    (glEnd)))


;;;
;;;; Quad Asset
;;;


(class Quad-Asset extends Asset
  
  
  (property v1 initialize #f accessors generate)
  (property v2 initialize #f accessors generate)
  (property v3 initialize #f accessors generate)
  (property v4 initialize #f accessors generate)
  
  
  (method override (prepare rest)
    (nextmethod rest)
    (set! x 0.)
    (set! y 0.)
    (set! z 0.)
    (set! width 5.)
    (set! height 5.)
    (set! depth 5.)
    (set-color {Color red: 134 green: 82 blue: 1}))
  
  
  (method override (finish rest)
    (nextmethod rest)
    (set-position (quad-center v1 v2 v3 v4)))
  
  
  (method override (sprite-faces)
    (let ((normal (plane-normal v1 v2 v3)))
      (list
        (receive (tl tt tr tb) (image-texture #f)
          (make-face #f
                     position
                     (make-triangle normal
                                    v1 (vertex 0. 1. 1.)
                                    v2 (vertex 1. 1. 1.)
                                    v3 (vertex 1. 0. 1.))
                     (make-triangle normal
                                    v3 (vertex 1. 0. 1.)
                                    v4 (vertex 0. 0. 1.)
                                    v1 (vertex 0. 1. 1.)))))))
  
  
  (method override (draw-3d)
    (glColor4f red green blue alpha)
    (glBegin GL_QUADS)
    (glVertex3f (vertex-x v1) (vertex-y v1) (vertex-z v1))
    (glVertex3f (vertex-x v2) (vertex-y v2) (vertex-z v2))
    (glVertex3f (vertex-x v3) (vertex-y v3) (vertex-z v3))
    (glVertex3f (vertex-x v4) (vertex-y v4) (vertex-z v4))
    (glEnd))
  
  
  (method override (draw-target)
    (gl-colorize {Color Red})
    (glLineWidth 2.)
    (glBegin GL_LINE_LOOP)
    (glVertex3f (vertex-x v1) (vertex-y v1) (vertex-z v1))
    (glVertex3f (vertex-x v2) (vertex-y v2) (vertex-z v2))
    (glVertex3f (vertex-x v3) (vertex-y v3) (vertex-z v3))
    (glVertex3f (vertex-x v4) (vertex-y v4) (vertex-z v4))
    (glEnd))))
