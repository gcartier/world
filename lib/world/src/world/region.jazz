;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Regions
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.region jazz


(import (jazz.geometry)
        (jazz.io)
        (jazz.syntax (phase syntax))
        (jazz.zlib)
        (world)
        (world.autoload)
        (world.binary)
        (world.chunk)
        (world.context)
        (world.index)
        (world.layer)
        (world.section)
        (world.support)
        (world.tag))


(proclaim (not check bounds zero)
          (warn optimizations))


(constant inline region-size <fx>
  32)

(constant inline region-header-size <fx>
  8192
  @wait-constant-folding
  (* 8 1024))

(constant inline chunk-padding <fx>
  4096
  @wait-constant-folding
  (* 4 1024))

(constant inline chunk-header-size <fx>
  5)

(constant inline zlib-header-size <fx>
  2)

(constant inline zlib-footer-size <fx>
  4)


(definition protected chunk-buffer
  (make-u8vector 262144))


;; looks like we don't need to adjust for negative values like stated on the wiki
(definition protected inline (section->chunk x/z <fx>) <fx>
  (modulo x/z 32))


(definition protected (section->chunk-index index <planar-index>) <planar-index>
  (section->chunk-index! (make-planar-index) index))


(definition protected (section->chunk-index! result <planar-index> index <planar-index>) <planar-index>
  (planar-index! result
                 (section->chunk (planar-index-x index))
                 (section->chunk (planar-index-z index))))


;;;
;;;; Pool
;;;


(constant sections-cardinality <fx>
  (* 6 32))

(definition protected sections-pool <vector>
  (make-vector sections-cardinality #f))

(definition protected sections-allocated <fx>
  0)

(definition protected sections-available <fx>
  0)


(definition protected (make-section$ section-y) <World-Section>
  (if (= sections-available 0)
      (assert (< sections-allocated sections-cardinality)
        (increase! sections-allocated)
        (make-section section-y))
    (decrease! sections-available)
    (let ((section (vector-ref sections-pool sections-available)))
      (set-y section section-y)
      (vector-set! sections-pool sections-available #f)
      section)))


(definition protected (free-section$ section <World-Section>) <void>
  (assert (< sections-available sections-cardinality))
  (vector-set! sections-pool sections-available section)
  (increase! sections-available))


(definition protected (keep-section$ section)
  (assert (> sections-allocated 0))
  (decrease! sections-allocated))


;;;
;;;; Dimension
;;;


(class World-Dimension extends Object
  
  
  (slot directory             <Directory>                                   getter generate)
  (slot generator             <object>                                      getter generate)
  (slot truncate-y            <fx+>                                         getter generate)
  (slot zone                  <object>                                      getter generate)
  (slot regions-mutex         <object>     initialize (make-mutex 'regions) getter generate)
  (slot region-access-mutexes <table>      initialize #f                    getter generate)
  (slot regions               <table>      initialize #f                    getter generate)
  
  
  (method override (initialize self directory generator truncate-y (zone #f))
    (set! self.directory directory)
    (set! self.generator generator)
    (set! self.truncate-y truncate-y)
    (set! self.zone zone)
    (with-regions-mutex self
      (lambda ()
        (set! region-access-mutexes (make-table test: equal?))
        ;; temporary simplification by having processor retain everything
        (set! regions (make-table test: equal? weak-values: #f @wait-client-caching-chunks (not (processing?)))))))
  
  
  (method (with-regions-mutex self thunk)
    (mutex-lock! regions-mutex)
    (prog1 (thunk)
      (mutex-unlock! regions-mutex)))
  
  
  (method (with-region-access-mutex self index thunk)
    (define (region-access-mutex index)
      (with-regions-mutex self
        (lambda ()
          (or (table-ref region-access-mutexes index #f)
              (let ((mutex (make-mutex 'region-access)))
                (table-set! region-access-mutexes index mutex)
                mutex)))))
    
    (let ((mutex (region-access-mutex index)))
      (mutex-lock! mutex)
      (prog1 (thunk)
        (mutex-unlock! mutex))))
  
  
  (method package (iterate-regions self proc)
    (with-regions-mutex self
      (lambda ()
        (iterate-table regions
          (lambda (index region)
            (proc region))))))
  
  
  (method package (find-region self index <index>) <World-Region+>
    (with-regions-mutex self
      (lambda ()
        (table-ref regions index #f))))
  
  
  (method package (load-region self index <index>) <World-Region>
    (or (find-region self index)
        (with-region-access-mutex self index
          (lambda ()
            (let ((index (copy-index index)))
              (let ((region (create-region self index)))
                (with-regions-mutex self
                  (lambda ()
                    (table-set! regions index region)))
                region))))))
  
  
  (method package (load-region-if self index <index>) <World-Region+>
    (and (or (not truncate-y)
             (>= (index-y index) (fxfloor/ truncate-y region-size)))
         (load-region self index)))
  
  
  (method (create-region self index <index>) <World-Region>
    (let ((region-x (index-x index))
          (region-y (index-y index))
          (region-z (index-z index)))
      (define (region-name)
        (if (= region-y 0)
            (format "r.{a}.{a}.mca" region-x region-z)
          (format "r.{a}.{a}.{a}.mca" region-x region-z region-y)))
      
      (define (create-file file)
        (create-directories file)
        (call-with-output-file (path-settings file)
          (lambda (port)
            (let ((locations/timestamps (make-u8vector 4096 0)))
              (write-subu8vector locations/timestamps 0 4096 port)
              (write-subu8vector locations/timestamps 0 4096 port)))))
      
      (let ((name (region-name)))
        (let ((file (new-file directory name)))
          (if (exists? file)
              (new World-Region self index file generator truncate-y)
            (create-file file)
            (new World-Region self index file generator truncate-y))))))
  
  
  (method package (iterate-regions-dir self proc)
    (iterate-directory directory
      (lambda (file <File>)
        (when (extension=? (get-extension file) "mca")
          (let ((base <string> (get-base file)))
            (bind (x z . rest) (split (substring base 2 (string-length base)) ".")
              (let ((x (string->number x))
                    (z (string->number z))
                    (y (if (null? rest) 0 (string->number (car rest)))))
                (proc file (indexed x y z)))))))))
  
  
  (method package (unlink-region self region)
    (with-regions-mutex self
      (lambda ()
        (let ((index (get-index region)))
          (table-clear region-access-mutexes index)
          (table-clear regions index)))))
  
  
  (method package (free-regions self)
    (iterate-regions self
      (lambda (region)
        (with-mutex region
          (lambda ()
            (close region)))))
    (set! zone #f)))


;;;
;;;; Region
;;;


(class World-Region extends Object
  
  
  (slot dimension            <World-Dimension>                               getter generate)
  (slot index                <index>                                         getter generate)
  (slot mutex                <object>                                        getter generate)
  (slot file                 <File>                                          getter generate)
  (slot port                 <port>                                          getter generate)
  (slot header               <u8vector>                                      getter generate)
  (slot generator            <object>                                        getter generate)
  (slot truncate-y           <fx+>                                           getter generate)
  (slot chunks-mutex         <object>   initialize (make-mutex 'chunks)      getter generate)
  (slot chunk-access-mutexes <object>   initialize (make-table test: equal?) getter generate)
  (slot chunks               <table>    initialize #f                        getter generate)
  (slot modified?            <bool>     initialize #f                        accessors generate)
  (slot compact?             <bool>     initialize #f                        accessors generate)
  
  
  (method override (initialize self dimension index file generator truncate-y)
    (set! self.dimension dimension)
    (set! self.index index)
    (set! self.mutex (make-mutex 'region))
    (set! self.file file)
    (set! self.port (open-file (path-settings file)))
    (set! self.header (read-header self))
    (set! self.generator generator)
    (set! self.truncate-y truncate-y)
    ;; temporary simplification by having processor retain everything
    (set! self.chunks (make-table test: equal? weak-values: #f @wait-client-caching-chunks (not (processing?))))
    (make-will self
      (lambda (obj)
        ;; because of the will, the object will only be recycled on
        ;; the next garbage collection, so we have to remove it from
        ;; table ourself to make sure it cannot be referenced anymore
        (when dimension ;; test dimension in case we got gced after dimension destruction
          (unlink-region dimension obj)
          (close-port port)))))
  
  
  (method override (print self output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{a} {a} {a}" (get-x self) (get-y self) (get-z self)))))
  
  
  (method override (destroy self)
    (compact-region self)
    (nextmethod self))
  
  
  (method package (get-x self) <fx>
    (index-x index))
  
  (method package (get-y self) <fx>
    (index-y index))
  
  (method package (get-z self) <fx>
    (index-z index))
  
  
  (method package (with-mutex self thunk)
    (mutex-lock! mutex)
    (prog1 (thunk)
      (mutex-unlock! mutex)))
  
  
  (method package (read-header self)
    (let ((size region-header-size))
      (let ((content (make-u8vector size)))
        (read-subu8vector content 0 size port)
        content)))
  
  
  (method (with-chunks-mutex self thunk)
    (mutex-lock! chunks-mutex)
    (prog1 (thunk)
      (mutex-unlock! chunks-mutex)))
  
  
  (method package (chunk-access-mutex self index)
    (with-chunks-mutex self
      (lambda ()
        (or (table-ref chunk-access-mutexes index #f)
            (let ((mutex (make-mutex 'chunk-access)))
              (table-set! chunk-access-mutexes index mutex)
              mutex)))))
  
  
  (method package (iterate-chunks self proc)
    (with-chunks-mutex self
      (lambda ()
        (iterate-table chunks
          (lambda (index chunk)
            (proc chunk))))))
  
  
  (method package (count-chunks self)
    (with-chunks-mutex self
      (lambda ()
        (table-length chunks))))
  
  
  ;; protecting the generation code makes sense
  ;; as it is mostly C so uninterruptible anyways
  (definition protected shapings-mutex
    (make-mutex 'shapings))
  
  
  (definition protected (with-shapings-mutex thunk)
    (prog1 (begin
             (mutex-lock! shapings-mutex)
             (thunk))
      (mutex-unlock! shapings-mutex)))
  
  
  (method (setup-shapings self shapings <vector> chunk <World-Chunk>)
    (let ((table (get-sections-table chunk)))
      (when table
        (iterate-table table
          (lambda (y section)
            (let ((actual <World-Section+> (vector-ref shapings y)))
              (when actual
                (free-section$ actual))
              (vector-set! shapings y section))))))
    (loop (for y from 0 below 32)
          (let ((section <World-Section+> (vector-ref shapings y)))
            (if section
                (set-touched section 0)
              (vector-set! shapings y (make-section$ y)))))
    (vector-set! shapings 32 chunk))
  
  
  (method (extract-shapings self shapings <vector> chunk <World-Chunk>)
    (loop (for y from 0 below 32)
          (let ((section <World-Section> (vector-ref shapings y)))
            (if (= (get-touched section) 0)
                (when (get-chunk section)
                  (vector-set! shapings y #f))
              (if (get-chunk section)
                  (modified chunk)
                (keep-section$ section)
                (setup-section chunk section))
              (vector-set! shapings y #f)))))
  
  
  (definition shape-shapings <vector>
    (make-vector 33 #f))
  
  
  ;; quick try for read-chunk receiving false from server
  (method (make-chunk self index <planar-index>) <World-Chunk>
    (let ((biomes (make-tag "Biomes" TAG_Byte_Array (generate-u8biomes (get-x self) (get-z self) (planar-index-x index) (planar-index-z index))))
          (heightmap (make-tag "HeightMap" TAG_Int_Array (make-vector 256 0)))
          (entities (make-tag "Entities" TAG_List (make-list-payload 0 '())))
          (block-entities (make-tag "TileEntities" TAG_List (make-list-payload 0 '())))
          (sections (make-tag "Sections" TAG_List (make-list-payload TAG_Compound '()))))
      (let ((tag (make-tag "" TAG_Compound
                   (list
                     (make-tag "Level" TAG_Compound
                       (list
                         biomes heightmap entities block-entities sections))))))
        (let ((chunk (new World-Chunk index Shaped #f #f self tag (tag-value biomes) (tag-value heightmap) (tag-value entities) (tag-value block-entities) (tag-value sections) #f)))
          (with-shapings-mutex
            (lambda ()
              (setup-shapings self shape-shapings chunk)
              (shape generator chunk shape-shapings)
              (extract-shapings self shape-shapings chunk)))
          (generated chunk)
          (modified chunk)
          chunk))))
  
  
  (method package (shape-chunk self index <planar-index>) <World-Chunk>
    (let ((chunk (with-chunks-mutex self
                   (lambda ()
                     (table-ref chunks index #f)))))
      (if chunk
          (begin
            (when (< (get-generator-revision chunk) (get-revision generator))
              (error "GAZOUM")
              @cant-find
              (regenerate chunk))
            chunk)
        (let ((read-chunk (if (not load-corrupted-chunks?)
                              (read-chunk self index)
                            (continuation-capture
                              (lambda (corrupted)
                                (read-chunk self index corrupted))))))
          (let ((chunk (or read-chunk (make-chunk self index))))
            (with-chunks-mutex self
              (lambda ()
                (table-set! chunks (copy-planar-index index) chunk)))
            chunk)))))
  
  
  (definition chunk-shapings <vector>
    (make-vector 33 #f))
  
  (definition front-shapings <vector>
    (make-vector 33 #f))
  
  (definition corner-shapings <vector>
    (make-vector 33 #f))
  
  (definition right-shapings <vector>
    (make-vector 33 #f))
  
  
  (method package (populate-chunk self index <planar-index> i <fx> k <fx> shaped-chunks <vector>) <World-Chunk>
    (let ((access-index (neighbor-index i k)))
      (let ((chunk (vector-ref shaped-chunks access-index)))
        (if (>= (get-state chunk) Populated)
            chunk
          (let ((region-x (get-x self))
                (region-y (get-y self))
                (region-z (get-z self))
                (chunk-x (planar-index-x index))
                (chunk-z (planar-index-z index)))
            (define (shaped-chunk a <fx> c <fx>) <World-Chunk>
              (vector-ref shaped-chunks (neighbor-index (+ i a) (+ k c))))
            
            (let ((front (shaped-chunk 0 1))
                  (corner (shaped-chunk 1 1))
                  (right (shaped-chunk 1 0)))
              (with-shapings-mutex
                (lambda ()
                  (setup-shapings self chunk-shapings chunk)
                  (setup-shapings self front-shapings front)
                  (setup-shapings self corner-shapings corner)
                  (setup-shapings self right-shapings right)
                  (populate generator chunk-shapings front-shapings corner-shapings right-shapings)
                  (extract-shapings self chunk-shapings chunk)
                  (extract-shapings self front-shapings front)
                  (extract-shapings self corner-shapings corner)
                  (extract-shapings self right-shapings right)))
              (change-state chunk Populated)
              (modified chunk)
              chunk))))))
  
  
  ;;  +-------+-------+-------+   +-------+-------+-------+   +-------+-------+-------+
  ;;  |       |       |       |   |       |       |       |   |       |       |       |
  ;;  |       |       |       |   |   P   |   P   |       |   |  P S  |  P S  |   S   |
  ;;  |       |       |       |   |       |       |       |   |       |       |       |
  ;;  +-------+-------+-------+   +-------+-------+-------+   +-------+-------+-------+
  ;;  |       |       |       |   |       |       |       |   |       |       |       |
  ;;  |       |   G   |       |   |   P   |  G P  |       |   |  P S  | G P S |   S   |
  ;;  |       |       |       |   |       |       |       |   |       |       |       |
  ;;  +-------+-------+-------+   +-------+-------+-------+   +-------+-------+-------+
  ;;  |       |       |       |   |       |       |       |   |       |       |       |
  ;;  |       |       |       |   |       |       |       |   |   S   |   S   |   S   |
  ;;  |       |       |       |   |       |       |       |   |       |       |       |
  ;;  +-------+-------+-------+   +-------+-------+-------+   +-------+-------+-------+
  

  (definition generate-shapings <vector>
    (make-vector 33 #f))
  
  
  (method package (generate-chunk self index <planar-index>) <World-Chunk>
    (if (empty? generator)
        (shape-chunk self index)
      (let ((chunk (with-chunks-mutex self
                     (lambda ()
                       (table-ref chunks index #f)))))
        (if (and chunk (>= (get-state chunk) Generated))
            chunk
          (site (generate)
            (let ((region-x (get-x self))
                  (region-y (get-y self))
                  (region-z (get-z self))
                  (chunk-x (planar-index-x index))
                  (chunk-z (planar-index-z index))
                  (access-mutexes (make-vector 9 #f))
                  (shaped-chunks (make-vector 9 #f)))
              (loop (for i from -1 to 1)
                    (loop (for k from -1 to 1)
                          (let ((x (+ chunk-x i))
                                (z (+ chunk-z k)))
                            (let ((region (load-region dimension (indexed (+ region-x (fxfloor/ x 32)) region-y (+ region-z (fxfloor/ z 32)))))
                                  (index (planar-index (modulo x 32) (modulo z 32))))
                              (let ((mutex (chunk-access-mutex region index))
                                    (chunk (shape-chunk region index))
                                    (access-index (neighbor-index i k)))
                                (vector-set! access-mutexes access-index mutex)
                                (vector-set! shaped-chunks access-index chunk))))))
              (let ((chunk (populate-chunk self index 0 0 shaped-chunks)))
                (define (populate i <fx> k <fx>) <World-Chunk>
                  (let ((x (+ chunk-x i))
                        (z (+ chunk-z k)))
                    (let ((region (load-region dimension (indexed (+ region-x (fxfloor/ x 32)) region-y (+ region-z (fxfloor/ z 32))))))
                      (populate-chunk region (planar-index (modulo x 32) (modulo z 32)) i k shaped-chunks))))
                
                (populate -1 0)
                (populate 0 -1)
                (populate -1 -1)
                (with-shapings-mutex
                  (lambda ()
                    (setup-shapings self generate-shapings chunk)
                    ;; should move out of generator
                    (generate-skylight generator chunk generate-shapings)
                    (extract-shapings self generate-shapings chunk)))
                (change-state chunk Generated)
                (modified chunk)
                (loop (for i from -1 to 1)
                      (loop (for k from -1 to 1)
                            (mutex-unlock! (vector-ref access-mutexes (neighbor-index i k)))))
                (site (save on?: #f parent: generate)
                  (save-region self))
                chunk)))))))
  
  
  (method package (load-chunk self index <planar-index>) <World-Chunk>
    (if (client?)
        (or (with-chunks-mutex self
              (lambda ()
                (table-ref chunks index #f)))
            (let ((chunk (read-chunk self index)))
              (with-chunks-mutex self
                (lambda ()
                  (table-set! chunks (copy-planar-index index) chunk)))
              (instantiate-elements chunk)
              chunk))
      (let ((chunk (generate-chunk self index)))
        (instantiate-elements chunk)
        chunk)))
  
  @reintegrate
  (when (< (get-generator-revision chunk) (get-revision generator))
    (regenerate chunk))

  
  (method package (load-section-chunk self section-index <planar-index>) <World-Chunk>
    (load-chunk self (section->chunk-index section-index)))
  
  
  (method package (find-chunk self section-index <planar-index>) <World-Chunk+>
    (table-ref chunks (section->chunk-index section-index) #f))
  
  
  (method (chunk-header-offset self chunk-x <fx> chunk-z <fx>) <fx>
    (* 4 (+ chunk-x (* chunk-z 32))))
  
  
  (method (get-chunk-offset self header-offset <fx>) <fx+>
    (let ((b1 (u8vector-ref header header-offset))
          (b2 (u8vector-ref header (+ header-offset 1)))
          (b3 (u8vector-ref header (+ header-offset 2)))
          (b4 (u8vector-ref header (+ header-offset 3))))
      (if (and (= b1 0)
               (= b2 0)
               (= b3 0)
               (= b4 0))
          #f
        (* (+ (arithmetic-shift-left b1 16)
              (arithmetic-shift-left b2 8)
              b3)
           chunk-padding))))
  
  
  (method (get-chunk-size self header-offset <fx>) <fx+>
    (* (u8vector-ref header (+ header-offset 3)) chunk-padding))
  
  
  (method (set-chunk-offset self header-offset <fx> offset <fx+>)
    (if (not offset)
        (begin
          (u8vector-set! header header-offset 0)
          (u8vector-set! header (+ header-offset 1) 0)
          (u8vector-set! header (+ header-offset 2) 0)
          (u8vector-set! header (+ header-offset 3) 0))
      (assert (= (modulo offset chunk-padding) 0))
      (let ((offset <fx> (/ offset chunk-padding)))
        (let ((b1 (modulo (arithmetic-shift offset -16) 256))
              (b2 (modulo (arithmetic-shift offset -8) 256))
              (b3 (modulo offset 256)))
          (u8vector-set! header header-offset b1)
          (u8vector-set! header (+ header-offset 1) b2)
          (u8vector-set! header (+ header-offset 2) b3)))))
  
  
  (method (set-chunk-size self header-offset <fx> size <fx>)
    (let ((count (/ size chunk-padding)))
      (assert (fixnum? count))
      (u8vector-set! header (+ header-offset 3) count)))
  
  
  (method package (read-chunk self chunk-index <planar-index> (corrupted #f)) <World-Chunk+>
    (let ((chunk-x (planar-index-x chunk-index))
          (chunk-z (planar-index-z chunk-index)))
      (let ((header-offset (chunk-header-offset self chunk-x chunk-z)))
        (assert (<= header-offset 4092))
        ;; quick hack to always retrieve until bugs fixed
        (if (client?)
            (let ((server-chunk-raw (retrieve-chunk (current-client) index chunk-index #f)))
              (if server-chunk-raw
                  (let ((digest #f @always-retrieve (object->u8vector (digest-u8vector server-chunk-raw 'SHA-1))))
                    (deserialize-chunk self chunk-x chunk-z digest server-chunk-raw))
                ;; quick try
                (make-chunk self chunk-index)))
          (let ((offset (get-chunk-offset self header-offset)))
            (if (not offset)
                (let ((server-chunk-raw (and (client?) (error "not now") (retrieve-chunk (current-client) index chunk-index #f))))
                  (if server-chunk-raw
                      (let ((digest #f @always-retrieve (object->u8vector (digest-u8vector server-chunk-raw 'SHA-1))))
                        (deserialize-chunk self chunk-x chunk-z digest server-chunk-raw))
                    #f))
              (input-port-byte-position port offset)
              (let ((chunk-header (u8vector 0 0 0 0 0)))
                (read-subu8vector chunk-header 0 5 port)
                (let ((deflated-size <fx> (scan-u32-big-endian chunk-header 0))
                      (compression-type (u8vector-ref chunk-header 4)))
                  (if (/= compression-type 2)
                      (if corrupted
                          (continuation-return corrupted #f)
                        (assert (= compression-type 2)))
                    (let ((chunk-raw (make-u8vector deflated-size)))
                      (read-subu8vector chunk-raw 0 deflated-size port)
                      (let ((digest #f @always-retrieve (object->u8vector (digest-u8vector chunk-raw 'SHA-1))))
                        (let ((server-chunk-raw (and (client?) (error "not now") (retrieve-chunk (current-client) index chunk-index digest))))
                          (if server-chunk-raw
                              (let ((digest #f @always-retrieve (object->u8vector (digest-u8vector server-chunk-raw 'SHA-1))))
                                (let ((chunk (deserialize-chunk self chunk-x chunk-z digest server-chunk-raw)))
                                  (modified chunk)
                                  chunk))
                            (deserialize-chunk self chunk-x chunk-z digest chunk-raw))))))))))))))
  
  
  (definition inflate-mutex
    (make-mutex 'inflate))
  
  (definition (with-inflate-mutex thunk)
    (mutex-lock! inflate-mutex)
    (prog1 (thunk)
      (mutex-unlock! inflate-mutex)))
  
  
  (method (deserialize-chunk self chunk-x chunk-z digest raw) <World-Chunk>
    (define (inflate-chunk chunk-raw)
      (with-inflate-mutex
        (lambda ()
          (let (iter)
            (let ((inflated (zlib-inflate! chunk-buffer chunk-raw)))
              (or inflated
                  (begin
                    (set! chunk-buffer (make-u8vector (fxround (* (u8vector-length chunk-buffer) GOLDEN_GROWTH))))
                    (iter))))))))
    
    (let ((chunk-data <u8vector> (inflate-chunk raw)))
      (with ((reader <NBT-Reader> (new NBT-Reader chunk-data)))
        (let ((tag (read-tag reader)))
          (let ((compound (tag-assoc "Level" (tag-value tag))))
            (let ((state (or (tag-assoc "State" compound) Generated))
                  (biomes (tag-assoc "Biomes" compound))
                  (heightmap (tag-assoc "HeightMap" compound))
                  (entities (tag-assoc "Entities" compound))
                  (block-entities (tag-assoc "TileEntities" compound))
                  (sections (tag-assoc "Sections" compound))
                  (elements (tag-assoc "Elements" compound)))
              (let ((chunk (new World-Chunk (planar-index chunk-x chunk-z) state digest (and (processing?) raw) self tag biomes heightmap entities block-entities sections elements)))
                (when sections
                  (for-each (lambda (section)
                              (let ((yPos (cast <fx> (tag-assoc "Y" section)))
                                    (blocks (tag-assoc "Blocks" section))
                                    (data (tag-assoc "Data" section))
                                    (blocklight (tag-assoc "BlockLight" section))
                                    (skylight (tag-assoc "SkyLight" section)))
                                (when (or (not truncate-y)
                                          (>= yPos (cast <fx> truncate-y)))
                                  (register-section chunk yPos (new World-Section chunk yPos blocks data blocklight skylight)))))
                            (list-payload-content sections)))
                (generated chunk)
                chunk)))))))
  
  
  (method package (load-section self section-x <fx> section-y <fx> section-z <fx> (create?: create? #f)) <World-Section+>
    (let ((chunk (load-section-chunk self (planar-index section-x section-z))))
      (load-section chunk section-y create?: create?)))
  
  
  (method (save-header self port)
    (output-port-byte-position port 0)
    (let ((size (u8vector-length header)))
      (write-subu8vector header 0 size port)))
  
  
  (method package (save-region self)
    (define (save-chunks port)
      (iterate-chunk-indices self
        (lambda (x z)
          (let ((chunk (find-chunk self (planar-index x z))))
            (when (and chunk (get-modified? chunk) (>= (get-state chunk) Generated))
              (let ((header-offset (chunk-header-offset self x z))
                    (raw-content (serialize-chunk self chunk)))
                (set-digest chunk #f @always-retrieve (object->u8vector (digest-u8vector raw-content 'SHA-1)))
                (when (processing?)
                  (set-raw chunk raw-content))
                (let ((deflated-size (u8vector-length raw-content)))
                  (let ((chunk-size (pad-chunk (+ chunk-header-size deflated-size)))
                        (actual-size (allege (get-chunk-size self header-offset))))
                    (define (position-port)
                      (if (<= chunk-size actual-size)
                          (let ((offset (allege (get-chunk-offset self header-offset))))
                            (output-port-byte-position port offset)
                            offset)
                        (output-port-byte-position port 0 2)
                        (let ((end (pad-chunk (cast <fx> (output-port-byte-position port)))))
                          (output-port-byte-position port end)
                          end)))
                    
                    (let ((offset (position-port)))
                      (let ((chunk-header (u8vector 0 0 0 0 0)))
                        (put-u32-big-endian chunk-header 0 deflated-size)
                        (u8vector-set! chunk-header 4 2)
                        (write-subu8vector chunk-header 0 5 port)
                        (write-subu8vector raw-content 0 deflated-size port)
                        (set-chunk-offset self header-offset offset)
                        (set-chunk-size self header-offset chunk-size))))))
              (reset-modified chunk))))))
    
    (define (pad-chunk size <fx>) <fx>
      (let ((mod (modulo size chunk-padding)))
        (if (= mod 0)
            size
          (+ size (- chunk-padding mod)))))
    
    (define (needs-compaction? port)
      (define (actual-size)
        (output-port-byte-position port 0 2)
        (output-port-byte-position port))
      
      (define (compact-size)
        (let ((size region-header-size))
          (iterate-chunk-indices self
            (lambda (x z)
              (let ((header-offset (chunk-header-offset self x z)))
                (increase! size (get-chunk-size self header-offset)))))
          size))
      
      (let ((percentage-threshold 125.))
        (>= (percentage (actual-size) (compact-size)) percentage-threshold)))
    
    (define (save)
      (save-chunks port)
      (save-header self port)
      (when (needs-compaction? port)
        (set! compact? #t)))
    
    (with-mutex self
      (lambda ()
        (when modified?
          (save)
          (reset-modified self)))))
  
  
  (method (compact-region self)
    (define (read-chunks)
      (let ((chunks (new-queue)))
        (iterate-chunk-indices self
          (lambda (x z)
            (let ((header-offset (chunk-header-offset self x z)))
              (let ((offset (get-chunk-offset self header-offset)))
                (if (not offset)
                    (enqueue chunks #f)
                  (let ((size (get-chunk-size self header-offset)))
                    (input-port-byte-position port offset)
                    (let ((chunk (make-u8vector size)))
                      (read-subu8vector chunk 0 size port)
                      (enqueue chunks chunk))))))))
        (queue-list chunks)))
    
    (define (save-chunks port chunks)
      (let ((offset region-header-size))
        (output-port-byte-position port offset)
        (iterate-chunk-indices self
          (lambda (x z)
            (let ((header-offset (chunk-header-offset self x z))
                  (chunk (car chunks)))
              (set! chunks (cdr chunks))
              (if (not chunk)
                  (set-chunk-offset self header-offset #f)
                (let ((size (u8vector-length chunk)))
                  (write-subu8vector chunk 0 size port)
                  (set-chunk-offset self header-offset offset)
                  (set-chunk-size self header-offset size)
                  (increase! offset size))))))))
    
    (define (compact)
      (let ((chunks (read-chunks)))
        (close-port port)
        (call-with-output-file (path-settings file truncate: #t)
          (lambda (port)
            (save-chunks port chunks)
            (save-header self port)))))
    
    (if (not compact?)
        (close-port port)
      (compact)
      (set! compact? #f)))
  
  
  (method (iterate-chunk-indices self proc)
    (loop (for z from 0 below 32)
          (loop (for x from 0 below 32)
                (proc x z))))
  
  
  (method (serialize-chunk self chunk <World-Chunk>) <u8vector>
    (with ((writer <NBT-Writer> (new NBT-Writer #f compressed?: #t)))
      (write-tag writer (get-tag chunk))
      (get-content writer)))
  
  
  (method package (reset-modified self)
    (set! modified? #f))
  
  
  (method package (modified self)
    (set! modified? #t))))
