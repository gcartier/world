;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Regions
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2016
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.region jazz


(import (jazz.geometry)
        (jazz.io)
        (jazz.syntax (phase syntax))
        (jazz.zlib)
        (world)
        (world.autoload)
        (world.binary)
        (world.chunk)
        (world.configure)
        (world.geometry)
        (world.homogeneous)
        (world.index)
        (world.network)
        (world.section)
        (world.syntax (phase syntax))
        (world.tag))


(proclaim (warn optimizations))


(constant inline region-size <fx>
  32)

(constant inline region-header-size <fx>
  8192
  @wait-constant-folding
  (* 8 1024))

(constant inline chunk-padding <fx>
  4096
  @wait-constant-folding
  (* 4 1024))

(constant inline chunk-header-size <fx>
  5)

(constant inline zlib-header-size <fx>
  2)

(constant inline zlib-footer-size <fx>
  4)


(definition protected chunk-buffer
  (make-u8vector 262144))


;; looks like we don't need to adjust for negative values like stated on the wiki
(definition protected inline (sector->chunk x/z <fx>) <fx>
  (modulo x/z 32))


(class World-Region extends Object
  
  
  (slot refcount     <fx>       initialize 0                         getter generate)
  (slot x            <fx>                                            getter generate)
  (slot z            <fx>                                            getter generate)
  (slot file         <File>                                          getter generate)
  (slot port         <port>                                          getter generate)
  (slot header       <u8vector>                                      getter generate)
  (slot region-mutex <object>   initialize (make-mutex 'region)      getter generate)
  (slot chunks-mutex <object>   initialize (make-mutex 'chunks)      getter generate)
  (slot chunks       <table>    initialize (make-table test: equal?) getter generate)
  (slot modified?    <bool>     initialize #f                        accessors generate)
  (slot compact?     <bool>     initialize #f                        accessors generate)
  
  
  (method override (initialize x z file)
    (set! x~self x)
    (set! z~self z)
    (set! file~self file)
    (set! port~self (open-file (path-settings file)))
    (set! header (read-header)))
  
  
  (method override (print output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{a} {a}" x z))))
  
  
  (method override (destroy)
    (compact-region)
    (nextmethod))
  
  
  (method (refcount-increase)
    (increase! refcount)
    ;(debug '***** x z 'refcount refcount)
    )
  
  
  (method (refcount-decrease)
    (decrease! refcount)
    ;(debug '***** x z 'refcount refcount)
    (when (<= refcount 0)
      (release)))
  
  
  (method (release)
    ;(debug 'release 'Region x z)
    )
  
  
  (method (read-header)
    (with-region-mutex
      (lambda ()
        (let ((size region-header-size))
          (let ((content (make-u8vector size)))
            (read-subu8vector content 0 size port)
            content)))))
  
  
  (method (with-region-mutex thunk)
    (mutex-lock! region-mutex)
    (prog1 (thunk)
      (mutex-unlock! region-mutex)))
  
  
  (method (with-chunks-mutex thunk)
    (mutex-lock! chunks-mutex)
    (prog1 (thunk)
      (mutex-unlock! chunks-mutex)))
  
  
  (method (sector-chunk sector-x <fx> sector-z <fx>) <World-Chunk>
    (get-chunk (sector->chunk sector-x) (sector->chunk sector-z)))
  
  
  (method (get-chunk chunk-x <fx> chunk-z <fx>) <World-Chunk>
    (with-chunks-mutex
      (lambda ()
        (let ((chunk-index (planar-index& chunk-x chunk-z)))
          (or (table-ref chunks chunk-index #f)
              (let ((chunk (read-chunk chunk-index)))
                (refcount-increase)
                (table-set! chunks (copy-planar-index chunk-index) chunk)
                chunk))))))
  
  
  (method (find-chunk sector-x <fx> sector-z <fx>) <World-Chunk+>
    (table-ref chunks (planar-index& (sector->chunk sector-x) (sector->chunk sector-z)) #f))
  
  
  (method (chunk-header-offset chunk-x <fx> chunk-z <fx>) <fx>
    (* 4 (+ chunk-x (* chunk-z 32))))
  
  
  (method (get-chunk-offset header-offset <fx>) <fx+>
    (let ((b1 (u8vector-ref header header-offset))
          (b2 (u8vector-ref header (+ header-offset 1)))
          (b3 (u8vector-ref header (+ header-offset 2)))
          (b4 (u8vector-ref header (+ header-offset 3))))
      (if (and (= b1 0)
               (= b2 0)
               (= b3 0)
               (= b4 0))
          #f
        (* (+ (arithmetic-shift-left b1 16)
              (arithmetic-shift-left b2 8)
              b3)
           chunk-padding))))
  
  
  (method (get-chunk-size header-offset <fx>) <fx+>
    (* (u8vector-ref header (+ header-offset 3)) chunk-padding))
  
  
  (method (set-chunk-offset header-offset <fx> offset <fx+>)
    (if (not offset)
        (begin
          (u8vector-set! header header-offset 0)
          (u8vector-set! header (+ header-offset 1) 0)
          (u8vector-set! header (+ header-offset 2) 0)
          (u8vector-set! header (+ header-offset 3) 0))
      (assert (= (modulo offset chunk-padding) 0))
      (let ((offset <fx> (/ offset chunk-padding)))
        (let ((b1 (modulo (arithmetic-shift offset -16) 256))
              (b2 (modulo (arithmetic-shift offset -8) 256))
              (b3 (modulo offset 256)))
          (u8vector-set! header header-offset b1)
          (u8vector-set! header (+ header-offset 1) b2)
          (u8vector-set! header (+ header-offset 2) b3)))))
  
  
  (method (set-chunk-size header-offset <fx> size <fx>)
    (let ((count (/ size chunk-padding)))
      (assert (fixnum? count))
      (u8vector-set! header (+ header-offset 3) count)))
  
  
  (method (read-chunk chunk-index <pair>) <World-Chunk>
    (with-region-mutex
      (lambda ()
        (let ((chunk-x (planar-index-x chunk-index))
              (chunk-z (planar-index-z chunk-index)))
          (let ((header-offset (chunk-header-offset chunk-x chunk-z)))
            (assert (<= header-offset 4092))
            ;; quick hack to always retrieve until bugs fixed
            (if (eq? zone-kind 'client)
                (let ((server-chunk-raw (retrieve-chunk~ (client-tier) x z chunk-x chunk-z #f)))
                  (and server-chunk-raw
                       (let ((digest (object->u8vector (digest-u8vector server-chunk-raw 'SHA-1))))
                         (deserialize-chunk 1 chunk-x chunk-z digest server-chunk-raw))))
              (let ((offset (get-chunk-offset header-offset)))
                (if (not offset)
                    (let ((server-chunk-raw (and (eq? zone-kind 'client) (error "not now") (retrieve-chunk~ (client-tier) (planar-index x z) chunk-index #f))))
                      (if server-chunk-raw
                          (let ((digest (object->u8vector (digest-u8vector server-chunk-raw 'SHA-1))))
                            (deserialize-chunk 2 chunk-x chunk-z digest server-chunk-raw))
                        (let ((heightmap (make-tag "HeightMap" TAG_Int_Array (make-vector 256 0)))
                              (entities (make-tag "Entities" TAG_List (make-list-payload 0 '())))
                              (block-entities (make-tag "TileEntities" TAG_List (make-list-payload 0 '())))
                              (sections (make-tag "Sections" TAG_List (make-list-payload TAG_Compound '()))))
                          (let ((tag (make-tag "" TAG_Compound
                                       (list
                                         (make-tag "Level" TAG_Compound
                                           (list
                                             heightmap entities block-entities sections))))))
                            (let ((chunk (new World-Chunk #f #f self tag (tag-value heightmap) (tag-value entities) (tag-value block-entities) (tag-value sections))))
                              (generate~ chunk)
                              (modified~ chunk)
                              chunk)))))
                  (input-port-byte-position port offset)
                  (let ((chunk-header (u8vector 0 0 0 0 0)))
                    (read-subu8vector chunk-header 0 5 port)
                    (let ((deflated-size <fx> (scan-u32-big-endian chunk-header 0))
                          (compression-type (u8vector-ref chunk-header 4)))
                      (assert (= compression-type 2))
                      (let ((chunk-raw (make-u8vector deflated-size)))
                        (read-subu8vector chunk-raw 0 deflated-size port)
                        (let ((digest (object->u8vector (digest-u8vector chunk-raw 'SHA-1))))
                          (let ((server-chunk-raw (and (eq? zone-kind 'client) (error "not now") (retrieve-chunk~ (client-tier) (planar-index x z) chunk-index digest))))
                            (if server-chunk-raw
                                (let ((digest (object->u8vector (digest-u8vector server-chunk-raw 'SHA-1))))
                                  (let ((chunk (deserialize-chunk 3 chunk-x chunk-z digest server-chunk-raw)))
                                    (modified~ chunk)
                                    chunk))
                              (deserialize-chunk 4 chunk-x chunk-z digest chunk-raw)))))))))))))))
  
  
  (method (deserialize-chunk which chunk-x chunk-z digest raw) <World-Chunk>
    (define (inflate-chunk chunk-raw)
      (let (iter)
        (let ((inflated (zlib-inflate! chunk-buffer chunk-raw)))
          (or inflated
              (begin
                (set! chunk-buffer (make-u8vector (fxround (* (u8vector-length chunk-buffer) GOLDEN_GROWTH))))
                (iter))))))
    
    (let ((zone <Zone> (current-zone)))
      (let ((chunk-data <u8vector> (inflate-chunk raw)))
        (with ((reader <NBT-Reader> (new NBT-Reader chunk-data compressed?: #f)))
          (let ((tag (read-tag~ reader)))
            (let ((compound (tag-assoc "Level" (tag-value tag))))
              (let ((heightmap (tag-assoc "HeightMap" compound))
                    (entities (tag-assoc "Entities" compound))
                    (block-entities (tag-assoc "TileEntities" compound))
                    (sections (tag-assoc "Sections" compound)))
                (let ((chunk (new World-Chunk digest (and (or (eq? zone-kind 'server) (eq? zone-kind 'processor)) raw) self tag heightmap entities block-entities sections)))
                  (when sections
                    (let ((truncate-y (get-truncate-y~ zone)))
                      (for-each (lambda (section)
                                  (let ((yPos (cast <fx> (tag-assoc "Y" section)))
                                        (blocks (tag-assoc "Blocks" section))
                                        (data (tag-assoc "Data" section))
                                        (blocklight (tag-assoc "BlockLight" section))
                                        (skylight (tag-assoc "SkyLight" section)))
                                    (when (or (not truncate-y)
                                              (>= yPos (cast <fx> truncate-y)))
                                      (register-section~ chunk yPos (new World-Section chunk blocks data blocklight skylight)))))
                                (list-payload-content sections))))
                  chunk))))))))
  
  
  (method (get-section what sector-x <fx> sector-y <fx> sector-z <fx> (create?: create? #f)) <World-Section+>
    (let ((zone (current-zone)))
      (let ((chunk (sector-chunk sector-x sector-z)))
        (define (find/create-section)
          (let ((sections-table (get-sections-table~ chunk)))
            (let ((section (and sections-table (table-ref sections-table sector-y #f))))
              ;; create new section
              (if (and (not section) create?)
                  (add-section~ chunk sector-y)
                section))))
        
        (let ((section (find/create-section)))
          ;; until unification, associate section with sector
          (when (and section (not (get-sector~ section)))
            (let ((sector (let ((index (vector sector-x sector-y sector-z)))
                            (if (eq? what 'visual)
                                (find-eye-sector~ zone index)
                              (index-sector~ zone index)))))
              (set-sector~ section sector)
              (when sector
                (set-section~ sector section))))
          section))))
  
  
  (method (save-header port)
    (output-port-byte-position port 0)
    (let ((size (u8vector-length header)))
      (write-subu8vector header 0 size port)))
  
  
  (method (save-region)
    (define (save-chunks port)
      (iterate-chunks
        (lambda (x z)
          (let ((chunk (find-chunk x z)))
            (when (and chunk (get-modified?~ chunk))
              (let ((header-offset (chunk-header-offset x z))
                    (raw-content (serialize-chunk chunk)))
                (set-digest~ chunk (object->u8vector (digest-u8vector raw-content 'SHA-1)))
                (when (or (eq? zone-kind 'server)
                          (eq? zone-kind 'processor))
                  (set-raw~ chunk raw-content))
                (let ((deflated-size (u8vector-length raw-content)))
                  (let ((chunk-size (pad-chunk (+ chunk-header-size deflated-size)))
                        (actual-size (allege (get-chunk-size header-offset))))
                    (define (position-port)
                      (if (<= chunk-size actual-size)
                          (let ((offset (allege (get-chunk-offset header-offset))))
                            (output-port-byte-position port offset)
                            offset)
                        (output-port-byte-position port 0 2)
                        (let ((end (pad-chunk (output-port-byte-position port))))
                          (output-port-byte-position port end)
                          end)))
                    
                    (let ((offset (position-port)))
                      (let ((chunk-header (u8vector 0 0 0 0 0)))
                        (put-u32-big-endian chunk-header 0 deflated-size)
                        (u8vector-set! chunk-header 4 2)
                        (write-subu8vector chunk-header 0 5 port)
                        (write-subu8vector raw-content 0 deflated-size port)
                        (set-chunk-offset header-offset offset)
                        (set-chunk-size header-offset chunk-size))))))
              (reset-modified~ chunk))))))
    
    (define (pad-chunk size <fx>) <fx>
      (let ((mod (modulo size chunk-padding)))
        (if (= mod 0)
            size
          (+ size (- chunk-padding mod)))))
    
    (define (needs-compaction? port)
      (define (actual-size)
        (output-port-byte-position port 0 2)
        (output-port-byte-position port))
      
      (define (compact-size)
        (let ((size region-header-size))
          (iterate-chunks
            (lambda (x z)
              (let ((header-offset (chunk-header-offset x z)))
                (increase! size (get-chunk-size header-offset)))))
          size))
      
      (let ((percentage-threshold 125.))
        (>= (percentage (actual-size) (compact-size)) percentage-threshold)))
    
    (define (save)
      (save-chunks port)
      (save-header port)
      (when (needs-compaction? port)
        (set! compact? #t)))
    
    (when modified?
      (with-region-mutex
        (lambda ()
          (save)
          (reset-modified)))))
  
  
  (method (compact-region)
    (define (read-chunks)
      (let ((chunks (new-queue)))
        (iterate-chunks
          (lambda (x z)
            (let ((header-offset (chunk-header-offset x z)))
              (let ((offset (get-chunk-offset header-offset)))
                (if (not offset)
                    (enqueue chunks #f)
                  (let ((size (get-chunk-size header-offset)))
                    (input-port-byte-position port offset)
                    (let ((chunk (make-u8vector size)))
                      (read-subu8vector chunk 0 size port)
                      (enqueue chunks chunk))))))))
        (queue-list chunks)))
    
    (define (save-chunks port chunks)
      (let ((offset region-header-size))
        (output-port-byte-position port offset)
        (iterate-chunks
          (lambda (x z)
            (let ((header-offset (chunk-header-offset x z))
                  (chunk (car chunks)))
              (set! chunks (cdr chunks))
              (if (not chunk)
                  (set-chunk-offset header-offset #f)
                (let ((size (u8vector-length chunk)))
                  (write-subu8vector chunk 0 size port)
                  (set-chunk-offset header-offset offset)
                  (set-chunk-size header-offset size)
                  (increase! offset size))))))))
    
    (define (compact)
      (let ((chunks (read-chunks)))
        (close-port port)
        (call-with-output-file (path-settings file truncate: #t)
          (lambda (port)
            (save-chunks port chunks)
            (save-header port)))))
    
    (if (not compact?)
        (close-port port)
      (with-region-mutex
        (lambda ()
          (compact)
          (set! compact? #f)))))
  
  
  (method protected (iterate-chunks proc)
    (loop (for z from 0 below 32)
          (loop (for x from 0 below 32)
                (proc x z))))
  
  
  (method (serialize-chunk chunk <World-Chunk>) <u8vector>
    (with ((writer <NBT-Writer> (new NBT-Writer #f)))
      (write-tag~ writer (get-tag~ chunk))
      (get-content~ writer)))
  
  
  (method protected (reset-modified)
    (set! modified? #f))
  
  
  (method protected (modified)
    (set! modified? #t))))
