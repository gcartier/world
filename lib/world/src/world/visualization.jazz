;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; UDP Visualization
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;    Barbara Samson


(module world.visualization jazz


(import (jazz.math)
        (jazz.stream)
        (world)
        (world.context)
        (world.event)
        (world.evolution)
        (world.client.udp)
        (world.server.udp)
        (world.simulation)
        (world.udp))


;;;
;;;; Visualize
;;;


(class UDP-Visualizer extends Object
  
  
  (slot call                     getter generate)
  (slot client                   getter generate)
  (slot channel                  getter generate)
  (slot ring                     getter generate)
  (slot evolution                getter generate)
  (slot last-time  initialize #f accessors generate)
  (slot last-event initialize #f accessors generate)
  
  
  (method override (initialize self call client channel ring evolution)
    (nextmethod self)
    (set! self.call call)
    (set! self.client client)
    (set! self.channel channel)
    (set! self.ring ring)
    (set! self.evolution evolution))
  
  
  (method protected (visualize-from self from target)
    (declare (proper-tail-calls))
    (let ((first (first-position evolution))
          (last (last-position evolution)))
      (let (loop (n (or from first)))
        (when (<= n last)
          (let ((time (evolutionary-udp-time evolution n)))
            (when (<= time target)
              (visualize-event self n)
              (set! last-time time)
              (set! last-event n)
              (loop (+ n 1))))))))
  
  
  (method protected (visualize-event self n)
    (let ((id (evolutionary-udp-id evolution n)))
      (ecase id
        ((udp-id-insert-packet)
         (let ((sequence (flonum->fixnum (evolutionary-udp-data1 evolution n)))
               (frame 0)
               (part 0)
               (total 1)
               (timestamp (let ((x (evolutionary-udp-data4 evolution n)))
                            (if (= x -1.)
                                #f
                              (flonum->timestamp x))))
               (header? #f))
           (let ((data (need-data call sequence frame part total timestamp header?)))
             (insert ring data))))
        ((udp-id-update-time)
         (let ((sequence (flonum->fixnum (evolutionary-udp-data1 evolution n)))
               (now (evolutionary-udp-data3 evolution n)))
           (let ((data (find-data call sequence)))
             (update-time ring data now))))
        ((udp-id-play-frame udp-id-freeze-frame)
         (let ((frame (flonum->fixnum (evolutionary-udp-data2 evolution n))))
           (let ((packet (earliest-packet ring)))
             (assert (eqv? (get-frame packet) frame)
               (assert (complete-frame? ring)
                 (remove-complete-frame ring))))))
        ((udp-id-state-ok)
         (parameterize ((visualization? #t))
           (process-state-ok channel)))
        ((udp-id-state-late)
         (parameterize ((visualization? #t))
           (process-state-late channel)))
        ((udp-id-state-waiting)
         (parameterize ((visualization? #t))
           (process-state-waiting channel)))
        (else
         #f @w
         (terminal 'unvisualized (evolution-id->abbrev id)))))))


(definition public (visualize-call call client channel ring evolution)
  (new UDP-Visualizer call client channel ring evolution)))
