;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; UDP Visualization
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;    Barbara Samson


(module world.visualization jazz


(import (jazz.math)
        (jazz.stream)
        (world)
        (world.context)
        (world.event)
        (world.evolution)
        (world.client.udp)
        (world.server.udp)
        (world.simulation)
        (world.udp))


;;;
;;;; Visualize
;;;


(class UDP-Visualizer extends Object
  
  
  (slot call                               getter generate)
  (slot client                             getter generate)
  (slot origin                             getter generate)
  (slot media-kind                         getter generate)
  (slot channel                            getter generate)
  (slot ring                               getter generate)
  (slot origin-evolution                   getter generate)
  (slot receiver-evolution                 getter generate)
  (slot datas                              getter generate)
  (slot update-time-sequence initialize #f getter generate)
  (slot update-time-new-time initialize #f getter generate)
  (slot last-time            initialize #f accessors generate)
  (slot last-event           initialize #f accessors generate)
  
  
  (method override (initialize self call client origin media-kind channel ring origin-evolution receiver-evolution)
    (nextmethod self)
    (set! self.call call)
    (set! self.client client)
    (set! self.origin origin)
    (set! self.media-kind media-kind)
    (set! self.channel channel)
    (set! self.ring ring)
    (set! self.origin-evolution origin-evolution)
    (set! self.receiver-evolution receiver-evolution)
    (set! self.datas (make-table test: eqv?)))
  
  
  (method (find-data self sequence)
    (define (locate-create)
      (loop (for n from (first-position origin-evolution) to (last-position origin-evolution))
            (when (and (= (evolutionary-udp-id origin-evolution n) udp-id-create-packet)
                       (= (evolutionary-udp-kind origin-evolution n) media-kind)
                       (= (evolutionary-udp-sequence origin-evolution n) sequence))
              (return n))
            (finally #f)))
    
    (define (locate-info)
      (loop (for n from (first-position origin-evolution) to (last-position origin-evolution))
            (when (and (= (evolutionary-udp-id origin-evolution n) udp-id-create-info)
                       (= (evolutionary-udp-kind origin-evolution n) media-kind)
                       (= (evolutionary-udp-sequence origin-evolution n) sequence))
              (return n))
            (finally #f)))
    
    (or (table-ref datas sequence #f)
        (let ((create (locate-create))
              (info (locate-info)))
          (assert (and create info)
            (let ((header-size (+ 8 4 4 4 4 4 4 8 8 4)))
              (let ((origin (flonum->fixnum (evolutionary-udp-origin origin-evolution create)))
                    (kind (flonum->fixnum (evolutionary-udp-kind origin-evolution create)))
                    (frame (evolutionary-udp-frame origin-evolution create))
                    (part (flonum->fixnum (evolutionary-udp-data3 origin-evolution info)))
                    (total (flonum->fixnum (evolutionary-udp-data4 origin-evolution info)))
                    (header? (= (evolutionary-udp-data3 origin-evolution create) 123456.))
                    (timestamp (evolutionary-udp-data4 origin-evolution create)))
                (let ((data (make-u8vector header-size))
                      (nanostamp (flonum->timestamp timestamp)))
                  (write-udp-kind data kind)
                  (write-udp-origin data origin)
                  (write-udp-sequence data sequence)
                  (write-udp-frame data frame)
                  (write-udp-part data part)
                  (write-udp-total data total)
                  (write-udp-media-timestamp data nanostamp)
                  (write-udp-media-header? data header?)
                  (table-set! datas sequence data)
                  data)))))))
  
  
  (method protected (visualize-from self from target)
    (declare (proper-tail-calls))
    (let ((first (first-position receiver-evolution))
          (last (last-position receiver-evolution)))
      (let (loop (n (or from first)))
        (when (<= n last)
          (let ((time (evolutionary-udp-time receiver-evolution n)))
            (when (<= time target)
              (visualize-event self n)
              (set! last-time time)
              (set! last-event n)
              (loop (+ n 1))))))))
  
  
  (method protected (visualize-event self n)
    (define (visualized-channel?)
      (and (= (evolutionary-udp-origin receiver-evolution n) origin)
           (= (evolutionary-udp-kind receiver-evolution n) media-kind)))
    
    (let ((debug? #f)
          (id (evolutionary-udp-id receiver-evolution n))
          )
      (ecase id
        ;; self / src / sink / draw
        ((udp-id-src-self udp-id-src-media udp-id-sink-media udp-id-draw-video))
        ;; create / info
        ((udp-id-create-packet udp-id-create-info))
        ;; retain / release
        ((udp-id-retain-packet udp-id-release-packet))
        ;; time
        ((udp-id-update-time)
         (when (visualized-channel?)
           (let ((sequence (evolutionary-udp-sequence receiver-evolution n))
                 (new-time (evolutionary-udp-data3 receiver-evolution n)))
             (set! update-time-sequence sequence)
             (set! update-time-new-time new-time))))
        ;; insert
        ((udp-id-insert-packet)
         (when (visualized-channel?)
           (let ((sequence (evolutionary-udp-sequence receiver-evolution n)))
             (let ((data (find-data self sequence)))
               (when debug?
                 (terminal 'insert sequence))
               (if (eqv? sequence update-time-sequence)
                   (parameterize ((visualization-time update-time-new-time))
                     (insert ring data))
                 (insert ring data))))))
        ;; gap
        ((udp-id-packet-gap))
        ;; nack
        ((udp-id-nack-packet))
        ;; resend
        ((udp-id-resend-packet))
        ;; got
        ((udp-id-got-packet)
         (when (visualized-channel?)
           (let ((sequence (evolutionary-udp-sequence receiver-evolution n)))
             (let ((data (find-data self sequence)))
               (when debug?
                 (terminal 'got sequence))
               (visualizer-replace-got ring sequence data)))))
        ;; duplicate
        ((udp-id-duplicate-packet))
        ;; reject
        ((udp-id-reject-packet))
        ;; play / freeze
        ((udp-id-play-frame udp-id-freeze-frame)
         (when (visualized-channel?)
           (let ((frame (evolutionary-udp-frame receiver-evolution n)))
             (let ((packet (earliest-packet ring)))
               (assert (eqv? (get-frame packet) frame)
                 (assert (complete-frame? ring)
                   (when debug?
                     (terminal 'play frame))
                   (remove-complete-frame ring)))))))
        ;; missing
        ((udp-id-missing-packet)
         (when (visualized-channel?)
           (let ((sequence (evolutionary-udp-sequence receiver-evolution n)))
             (let ((packet (earliest-packet ring)))
               (assert (eqv? (get-sequence packet) sequence)
                 (assert (not (get-data packet))
                   (when debug?
                     (terminal 'missing sequence))
                   (remove-missing ring)))))))
        ;; discard
        ((udp-id-discard-packet)
         (when (visualized-channel?)
           (let ((sequence (evolutionary-udp-sequence receiver-evolution n)))
             (let ((packet (earliest-packet ring)))
               (assert (eqv? (get-sequence packet) sequence)
                 (assert (get-data packet)
                   (when debug?
                     (terminal 'discard sequence))
                   (remove-discard ring)))))))
        ;; ok
        ((udp-id-state-ok)
         (when (visualized-channel?)
           (when debug?
             (terminal 'ok))
           (state-ok ring)))
        ;; late
        ((udp-id-state-late)
         (when (visualized-channel?)
           (when debug?
             (terminal 'late))
           (state-late ring)))
        ;; waiting
        ((udp-id-state-waiting)
         (when (visualized-channel?)
           (when debug?
             (terminal 'waiting))
           (state-waiting ring)))
        ;; ack
        ((udp-id-receive-ack))
        ;; reset
        ((udp-id-reset-media))
        ;; system
        ((udp-id-paint-event udp-id-reshape-event udp-id-close-event udp-id-key-event udp-id-char-event udp-id-button-event udp-id-moved-event udp-id-wheel-event udp-id-file-event udp-id-drop-event udp-id-enter-event udp-id-leave-event udp-id-activate-event udp-id-deactivate-event udp-id-quit-event udp-id-user-event udp-id-other-event))
        ;; other
        (else
         (terminal 'unvisualized (evolution-id->abbrev id)))))))


(definition public (visualize-call call client origin media-kind channel ring origin-evolution receiver-evolution)
  (new UDP-Visualizer call client origin media-kind channel ring origin-evolution receiver-evolution)))
