;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; UDP Visualization
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;    Barbara Samson


(module world.visualization jazz


(import (jazz.math)
        (jazz.stream)
        (world)
        (world.context)
        (world.event)
        (world.evolution)
        (world.client.udp)
        (world.server.udp)
        (world.simulation)
        (world.udp))


;;;
;;;; Visualize
;;;


(class UDP-Visualizer extends Object
  
  
  (slot call                     getter generate)
  (slot client                   getter generate)
  (slot origin                   getter generate)
  (slot media-kind               getter generate)
  (slot channel                  getter generate)
  (slot ring                     getter generate)
  (slot evolution                getter generate)
  (slot last-time  initialize #f accessors generate)
  (slot last-event initialize #f accessors generate)
  
  
  (method override (initialize self call client origin media-kind channel ring evolution)
    (nextmethod self)
    (set! self.call call)
    (set! self.client client)
    (set! self.origin origin)
    (set! self.media-kind media-kind)
    (set! self.channel channel)
    (set! self.ring ring)
    (set! self.evolution evolution))
  
  
  (method protected (visualize-from self from target)
    (declare (proper-tail-calls))
    (let ((first (first-position evolution))
          (last (last-position evolution)))
      (let (loop (n (or from first)))
        (when (<= n last)
          (let ((time (evolutionary-udp-time evolution n)))
            (when (<= time target)
              (visualize-event self n)
              (set! last-time time)
              (set! last-event n)
              (loop (+ n 1))))))))
  
  
  (method protected (visualize-event self n)
    (define (visualized-channel?)
      (and (= (evolutionary-udp-origin evolution n) origin)
           (= (evolutionary-udp-kind evolution n) media-kind)))
    
    (let ((debug? #f)
          (id (evolutionary-udp-id evolution n)))
      (ecase id
        ;; self / src / sink
        ((udp-id-src-self udp-id-src-media udp-id-sink-media))
        ;; create
        ((udp-id-create-packet))
        ;; retain / release
        ((udp-id-retain-packet udp-id-release-packet))
        ;; insert
        ((udp-id-insert-packet)
         (when (visualized-channel?)
           (let ((sequence (evolutionary-udp-sequence evolution n))
                 (frame (evolutionary-udp-frame evolution n))
                 (part 0)
                 (total 1)
                 (timestamp (let ((x (evolutionary-udp-data4 evolution n)))
                              (if (= x -1.)
                                  #f
                                (flonum->timestamp x))))
                 (header? #f))
             (let ((data (need-data call sequence frame part total timestamp header?)))
               (when debug?
                 (terminal 'insert header? sequence frame part total))
               (insert ring data)))))
        ;; time
        ((udp-id-update-time)
         (when (visualized-channel?)
           (let ((sequence (evolutionary-udp-sequence evolution n))
                 (now (evolutionary-udp-data3 evolution n)))
             (let ((data (find-data call sequence)))
               (when debug?
                 (terminal 'time sequence))
               (update-time ring data now)))))
        ;; gap
        ((udp-id-packet-gap))
        ;; nack
        ((udp-id-nack-packet))
        ;; play / freeze
        ((udp-id-play-frame udp-id-freeze-frame)
         (when (visualized-channel?)
           (let ((frame (evolutionary-udp-frame evolution n)))
             (let ((packet (earliest-packet ring)))
               (assert (eqv? (get-frame packet) frame)
                 (assert (complete-frame? ring)
                   (when debug?
                     (terminal 'play frame))
                   (remove-complete-frame ring)))))))
        ;; missing
        ((udp-id-missing-packet)
         (when (visualized-channel?)
           (let ((sequence (evolutionary-udp-sequence evolution n)))
             (let ((packet (earliest-packet ring)))
               (assert (eqv? (get-sequence packet) sequence)
                 (assert (not (get-data packet))
                   (when debug?
                     (terminal 'missing sequence))
                   (remove-missing ring)))))))
        ;; discard
        ((udp-id-discard-packet)
         (when (visualized-channel?)
           (let ((sequence (evolutionary-udp-sequence evolution n)))
             (let ((packet (earliest-packet ring)))
               (assert (eqv? (get-sequence packet) sequence)
                 (assert (get-data packet)
                   (when debug?
                     (terminal 'discard sequence))
                   (remove-discard ring)))))))
        ;; ok
        ((udp-id-state-ok)
         (when (visualized-channel?)
           (when debug?
             (terminal 'ok))
           (state-ok ring)))
        ;; late
        ((udp-id-state-late)
         (when (visualized-channel?)
           (when debug?
             (terminal 'late))
           (state-late ring)))
        ;; waiting
        ((udp-id-state-waiting)
         (when (visualized-channel?)
           (when debug?
             (terminal 'waiting))
           (state-waiting ring)))
        ;; ack
        ((udp-id-receive-ack))
        ;; reset
        ((udp-id-reset-media))
        ;; system
        ((udp-id-paint-event udp-id-reshape-event udp-id-close-event udp-id-key-event udp-id-char-event udp-id-button-event udp-id-moved-event udp-id-wheel-event udp-id-file-event udp-id-drop-event udp-id-enter-event udp-id-leave-event udp-id-activate-event udp-id-deactivate-event udp-id-quit-event udp-id-user-event udp-id-other-event))
        ;; other
        (else
         (terminal 'unvisualized (evolution-id->abbrev id)))))))


(definition public (visualize-call call client origin media-kind channel ring evolution)
  (new UDP-Visualizer call client origin media-kind channel ring evolution)))
