;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Sections
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.section jazz


(import (world)
        (world.index))


(proclaim (warn optimizations))


(definition protected section-size <fx>
  16)


(definition protected (make-section section-y)
  (let ((blocks (make-u8vector 4096))
        (data (make-u8vector 2048))
        (blocklight (make-u8vector 2048 0))
        (skylight (make-u8vector 2048 15)))
    (new World-Section #f section-y blocks data blocklight skylight)))


(class World-Section extends Object
  
  
  (slot index            <index+>   initialize #f getter explicit)
  (slot chunk                                     accessors generate)
  (slot y                                         accessors generate)
  (slot blocks           <u8vector>               getter generate)
  (slot data             <u8vector>               getter generate)
  (slot blocklight       <u8vector>               getter generate)
  (slot skylight         <u8vector>               getter generate)
  (slot touched          <fx>       initialize 0  accessors generate)
  
  
  (method override (initialize self chunk y blocks data blocklight skylight)
    (set! self.chunk chunk)
    (set! self.y y)
    (set! self.blocks blocks)
    (set! self.data data)
    (set! self.blocklight blocklight)
    (set! self.skylight skylight))
  
  
  (method override (print self output readably)
    (print-unreadable self output
      (lambda (output)
        (when chunk
          (with-index self
            (lambda (section-x section-y section-z)
              (format output "{a}, {a}, {a}" section-x section-y section-z)))))))
  
  
  ;; simplest for now to also have an index in section
  (method package (get-index self) <index>
    (or index
        (assert chunk
          (let ((idx (with-index self indexed)))
            (set! index idx)
            idx))))
  
  
  (method package (with-index self proc)
    (let ((region (get-region chunk)))
      (let ((section-x (+ (* (get-x region) 32) (get-x chunk)))
            (section-y (+ (* (get-y region) 32) y))
            (section-z (+ (* (get-z region) 32) (get-z chunk))))
        (proc section-x section-y section-z))))))
