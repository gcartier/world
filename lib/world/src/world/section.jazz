;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Sections
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2016
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.section jazz


(proclaim (warn optimizations))


(class World-Section extends Object
  
  
  (slot refcount    <fx> initialize 0 getter generate)
  (slot sector                        accessors generate)
  (slot chunk                         accessors generate)
  (slot y                             getter generate)
  (slot blocks      <u8vector>        getter generate)
  (slot data        <u8vector>        getter generate)
  (slot blocklight  <u8vector>        getter generate)
  (slot skylight    <u8vector>        getter generate)
  (slot touched     <fx> initialize 0 accessors generate)
  
  
  @debug-sector/section-association
  (method (set-sector sector)
    (let ((index (get-index~ sector)))
      (let ((sector-x (vector-ref index 0))
            (sector-y (vector-ref index 1))
            (sector-z (vector-ref index 2))
            (region (get-region~ chunk)))
        (let ((section-x (+ (* (get-x~ region) 32) (get-x~ chunk)))
              (section-y y)
              (section-z (+ (* (get-z~ region) 32) (get-z~ chunk))))
          (assert (= sector-x section-x))
          (assert (= sector-y section-y))
          (assert (= sector-z section-z)))))
    (set! sector~self sector))
  
  
  (method override (initialize chunk y blocks data blocklight skylight)
    (set! sector~self #f)
    (set! chunk~self chunk)
    (set! y~self y)
    (set! blocks~self blocks)
    (set! data~self data)
    (set! blocklight~self blocklight)
    (set! skylight~self skylight))
  
  
  (method override (print output readably)
    (print-unreadable self output
      (lambda (output)
        (when sector
          (let ((index (get-index~ sector)))
            (format output "{a}, {a}, {a}" (vector-ref index 0) (vector-ref index 1) (vector-ref index 2)))))))
  
  
  (method (refcount-increase)
    (increase! refcount))
  
  
  (method (refcount-decrease)
    (decrease! refcount)
    (when (<= refcount 0)
      (release)))
  
  
  (method (release)
    ;(debug 'release self)
    (refcount-decrease~ chunk))))
