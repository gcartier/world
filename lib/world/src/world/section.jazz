;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Sections
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.section jazz


(import (jazz.component)
        (jazz.markup)
        (gaea.geometry)
        (world)
        (world.context)
        (world.index)
        (world.tag)
        (world.task))


(proclaim (warn optimizations))


(definition protected section-size <fx>
  16)


(definition protected (position->section-index pos <vertex>) <index>
  (let ((size (cast <fl> section-size)))
    (indexed (fxfloor (/ (vertex-x pos) size))
             (fxfloor (/ (vertex-y pos) size))
             (fxfloor (/ (vertex-z pos) size)))))


(definition protected (make-section section-y)
  (let ((blocks (make-u8vector 4096))
        (data (make-u8vector 2048))
        (blocklight (make-u8vector 2048 0))
        (skylight (make-u8vector 2048 15))
        (elements #f))
    (let ((tags (list
                  (make-tag "Y" TAG_Byte section-y)
                  (make-tag "Blocks" TAG_Byte_Array blocks)
                  (make-tag "Data" TAG_Byte_Array data)
                  (make-tag "BlockLight" TAG_Byte_Array blocklight)
                  (make-tag "SkyLight" TAG_Byte_Array skylight))))
      (new World-Section #f tags section-y blocks data blocklight skylight elements))))


(class World-Section extends Object
  
  
  (slot index              <index+>   initialize #f getter explicit)
  (slot chunk                                       accessors generate)
  (slot tags                                        getter generate)
  (slot y                                           accessors generate)
  (slot blocks             <u8vector>               getter generate)
  (slot data               <u8vector>               getter generate)
  (slot blocklight         <u8vector>               getter generate)
  (slot skylight           <u8vector>               getter generate)
  (slot elements-container                          getter generate)
  (slot touched            <fx>       initialize 0  accessors generate)
  
  
  (method override (initialize self chunk tags y blocks data blocklight skylight elements-raw)
    (set! self.chunk chunk)
    (set! self.tags tags)
    (set! self.y y)
    (set! self.blocks blocks)
    (set! self.data data)
    (set! self.blocklight blocklight)
    (set! self.skylight skylight)
    (set! self.elements-container (and elements-raw (instantiate-elements self elements-raw)))
    (when (processor?)
      (when elements-container
        (@quicky-until-all-mutexes-fixed with-reentrant-task-mutex
          (lambda ()
            (let ((zone (current-zone)))
              (for-each (lambda (child)
                          (add-element zone child))
                        (get-children elements-container))))))))
  
  
  (method override (print self output readably)
    (print-unreadable self output
      (lambda (output)
        (when chunk
          (with-index self
            (lambda (section-x section-y section-z)
              (format output "{a}, {a}, {a}" section-x section-y section-z)))))))
  
  
  ;; simplest for now to also have an index in section
  (method package (get-index self) <index>
    (or index
        (assert chunk
          (let ((idx (with-index self indexed)))
            (set! index idx)
            idx))))
  
  
  (method package (with-index self proc)
    (let ((region (get-region chunk)))
      (let ((section-x (+ (* (get-x region) 32) (get-x chunk)))
            (section-y (+ (* (get-y region) 32) y))
            (section-z (+ (* (get-z region) 32) (get-z chunk))))
        (proc section-x section-y section-z))))
  
  
  ;;;
  ;;;; Elements
  ;;;
  
  
  ;; backward compatibility
  (method (convert-form self form)
    ;; ids are now u8vectors
    (for-each (lambda (child)
                (let ((id (get-property child 'id)))
                  (when (and (f64vector? id) (= (f64vector-length id) 2))
                    (let ((vec (make-u8vector 16)))
                      (put-double vec 0 (f64vector-ref id 0))
                      (put-double vec 8 (f64vector-ref id 1))
                      (set-property child 'id vec)))))
              (get-children form)))


  (method package (instantiate-elements self elements-raw)
    (let ((content (u8vector->object elements-raw)))
      (call-with-input-string (list init: content readtable: jazz-readtable)
        (lambda (port)
          (let ((form (read-form-from port)))
            (convert-form self form)
            (let ((container (instantiate form)))
              ;; bantoo is this good
              (set-section container self)
              container))))))
  
  
  (method package (with-designer self proc (convert?: convert? #f))
    (define (setup-designer)
      (if elements-container
          (let ((form (get-form elements-container)))
            (values (new Former form: form reference: elements-container) elements-container))
        (let ((units '(world.data)))
          (let ((tag '(<Section-Container>))
                (data (new Data zone-version 'jazz units #f)))
            (let ((form (construct-form tag (imports-locator units) data)))
              (let ((container (instantiate form)))
                (set-section container self)
                (values (new Former form: form reference: container) container)))))))
    
    (define (save-designer designer container)
      (let ((form (get-form designer)))
        (if (null? (get-children form))
            (begin
              (tags-remove tags "Elements")
              (set! elements-container #f))
          (let ((port (open-output-string)))
            ;; for now save as string
            (save-to-port designer port)
            (let ((content (get-output-string port)))
              (let ((value (object->u8vector content)))
                (tags-add tags "Elements" TAG_Byte_Array value)
                (set! elements-container (if convert? (instantiate form) container))))))))
    
    (receive (designer container) (setup-designer)
      (prog1 (proc designer container)
        (save-designer designer container)
        (unless convert?
          (modified chunk)
          (save-region (get-region chunk))))))


  (method package (container-elements self)
    (and elements-container (get-children elements-container)))
  
  
  (method package (find-entity-by-id self id)
    (and elements-container
         (find-if (lambda (entity)
                    (equal? (get-id entity) id))
                  (get-children elements-container)))))


;;;
;;;; Container
;;;


(class Section-Container extends Component
  
  
  (property version initialize #f accessors generate)
  
  
  ;; retain section as a quick patch around entities
  ;; needing more work where editing can fail where a
  ;; different section is found with a different element
  ;; resulting in the dreaded is not a descendant of
  ;; the reference component error
  (slot section initialize #f accessors generate)
  
  
  (method override (print self output readably)
    (print-unreadable self output
      (lambda (output)
        (when section
          (with-index section
            (lambda (section-x section-y section-z)
              (format output "{a} {a} {a}" section-x section-y section-z)))))))))
