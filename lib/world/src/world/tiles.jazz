;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Tiles
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2013
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.tiles jazz


(import (jazz.geometry)
        (jazz.graphic)
        (jazz.graphic.opengl.glew)
        (world)
        (world.autoload)
        (world.block)
        (world.face)
        (world.geometry)
        (world.model)
        (world.object)
        (world.quad)
        (world.syntax (phase syntax))
        (world.texture)
        (world.tile)
        (world.triangle))


(definition public (make-block-model left-image (right-image #f) (bottom-image #f) (top-image #f) (back-image #f) (front-image #f))
  (let ((world (current-world)))
    (let ((left -.5)
          (bottom -.5)
          (back -.5)
          (right .5)
          (top .5)
          (front .5)
          (right-image (or right-image left-image))
          (bottom-image (or bottom-image left-image))
          (top-image (or top-image left-image))
          (back-image (or back-image left-image))
          (front-image (or front-image left-image))
          (default-image (get-default-image~ world)))
      (let ((faces
              (list
                ;; front
                (let ((image (or front-image default-image)))
                  (let ((uv (image-coordinates image)))
                    (let ((tl (uv-left uv))
                          (tt (uv-top uv))
                          (tr (uv-right uv))
                          (tb (uv-bottom uv))
                          (texture-depth (uv-depth uv)))
                      (make-face image
                                 (f32vector tl tt tl tb tr tb tr tt)
                                 texture-depth
                                 (make-quad #f
                                            (vertex left top front) (vertex left bottom front) (vertex right bottom front) (vertex right top front))))))
                ;; back
                (let ((image (or back-image default-image)))
                  (let ((uv (image-coordinates image)))
                    (let ((tl (uv-left uv))
                          (tt (uv-top uv))
                          (tr (uv-right uv))
                          (tb (uv-bottom uv))
                          (texture-depth (uv-depth uv)))
                      (make-face image
                                 (f32vector tr tt tr tb tl tb tl tt)
                                 texture-depth
                                 (make-quad #f
                                            (vertex right top back) (vertex right bottom back) (vertex left bottom back) (vertex left top back))))))
                ;; left
                (let ((image (or left-image default-image)))
                  (let ((uv (image-coordinates image)))
                    (let ((tl (uv-left uv))
                          (tt (uv-top uv))
                          (tr (uv-right uv))
                          (tb (uv-bottom uv))
                          (texture-depth (uv-depth uv)))
                      (make-face image
                                 (f32vector tl tt tl tb tr tb tr tt)
                                 texture-depth
                                 (make-quad #f
                                            (vertex left top back) (vertex left bottom back) (vertex left bottom front) (vertex left top front))))))
                ;; right
                (let ((image (or right-image default-image)))
                  (let ((uv (image-coordinates image)))
                    (let ((tl (uv-left uv))
                          (tt (uv-top uv))
                          (tr (uv-right uv))
                          (tb (uv-bottom uv))
                          (texture-depth (uv-depth uv)))
                      (make-face image
                                 (f32vector tl tt tl tb tr tb tr tt)
                                 texture-depth
                                 (make-quad #f
                                            (vertex right top front) (vertex right bottom front) (vertex right bottom back) (vertex right top back))))))
                ;; top
                (let ((image (or top-image default-image)))
                  (let ((uv (image-coordinates image)))
                    (let ((tl (uv-left uv))
                          (tt (uv-top uv))
                          (tr (uv-right uv))
                          (tb (uv-bottom uv))
                          (texture-depth (uv-depth uv)))
                      (make-face image
                                 (f32vector tl tb tl tt tr tt tr tb)
                                 texture-depth
                                 (make-quad #f
                                            (vertex left top back) (vertex left top front) (vertex right top front) (vertex right top back))))))
                ;; bottom
                (let ((image (or bottom-image default-image)))
                  (let ((uv (image-coordinates image)))
                    (let ((tl (uv-left uv))
                          (tt (uv-top uv))
                          (tr (uv-right uv))
                          (tb (uv-bottom uv))
                          (texture-depth (uv-depth uv)))
                      (make-face image
                                 (f32vector tl tt tl tb tr tb tr tt)
                                 texture-depth
                                 (make-quad #f
                                            (vertex left bottom front) (vertex left bottom back) (vertex right bottom back) (vertex right bottom front)))))))))
        (make-faces-model faces)))))


(definition public (make-cross-model image1 (image2 #f))
  (let ((left -.5)
        (bottom -.5)
        (back -.5)
        (right .5)
        (top .5)
        (front .5)
        (image2 (or image2 image1)))
    (let ((faces
            (list
              (let ((uv (image-coordinates image1)))
                (let ((tl (uv-left uv))
                      (tt (uv-top uv))
                      (tr (uv-right uv))
                      (tb (uv-bottom uv))
                      (texture-depth (uv-depth uv)))
                  (make-face image1
                             (f32vector tl tt tl tb tr tb tr tt)
                             texture-depth
                             (make-quad #f
                                        (vertex right top back) (vertex right bottom back) (vertex left bottom front) (vertex left top front)))))
              (let ((uv (image-coordinates image2)))
                (let ((tl (uv-left uv))
                      (tt (uv-top uv))
                      (tr (uv-right uv))
                      (tb (uv-bottom uv))
                      (texture-depth (uv-depth uv)))
                  (make-face image2
                             (f32vector tl tt tl tb tr tb tr tt)
                             texture-depth
                             (make-quad #f
                                        (vertex right top front) (vertex right bottom front) (vertex left bottom back) (vertex left top back))))))))
      (make-faces-model faces))))


(definition public (make-floor-model image)
  (let ((left -.5)
        (bottom -.5)
        (back -.5)
        (right .5)
        (top .5)
        (front .5))
    (let ((uv (image-coordinates image)))
      (let ((tl (uv-left uv))
            (tt (uv-top uv))
            (tr (uv-right uv))
            (tb (uv-bottom uv))
            (texture-depth (uv-depth uv)))
        (let ((faces
                (list
                  (make-face image
                             (f32vector tl tt tl tb tr tb tr tt)
                             texture-depth
                             (make-quad #f
                                        (vertex left bottom front) (vertex left bottom back) (vertex right bottom back) (vertex right bottom front))))))
          (make-faces-model faces))))))


(definition public (make-pyramid-model image)
  (let ((left -.5)
        (bottom -.5)
        (back -.5)
        (center 0.)
        (right .5)
        (top .5)
        (front .5))
    (let ((uv (image-coordinates image)))
      (let ((tl (uv-left uv))
            (tt (uv-top uv))
            (tr (uv-right uv))
            (tb (uv-bottom uv))
            (texture-depth (uv-depth uv)))
        (let ((faces
                (list
                  ;; bottom
                  (make-face image
                             (f32vector tl tt tl tb tr tb tr tt)
                             texture-depth
                             (make-quad #f
                                        (vertex left  bottom front)
                                        (vertex left  bottom back)
                                        (vertex right bottom back)
                                        (vertex right bottom front)))
                  ;; front
                  (make-face image
                             (f32vector tl tt tl tb tr tb tr tt)
                             texture-depth
                             (make-triangle #f
                                            (vertex center top    center)
                                            (vertex left   bottom front)
                                            (vertex right  bottom front)))
                  ;; right
                  (make-face image
                             (f32vector tl tt tl tb tr tb tr tt)
                             texture-depth
                             (make-triangle #f
                                            (vertex center top    center)
                                            (vertex right  bottom front)
                                            (vertex right  bottom back)))
                  ;; back
                  (make-face image
                             (f32vector tl tt tl tb tr tb tr tt)
                             texture-depth
                             (make-triangle #f
                                            (vertex center top    center)
                                            (vertex right  bottom back)
                                            (vertex left   bottom back)))
                  ;; left
                  (make-face image
                             (f32vector tl tt tl tb tr tb tr tt)
                             texture-depth
                             (make-triangle #f
                                            (vertex center top    center)
                                            (vertex left   bottom back)
                                            (vertex left   bottom front))))))
          (make-faces-model faces))))))


(definition public (make-slope-model image)
  (let ((left -.5)
        (bottom -.5)
        (back -.5)
        (right .5)
        (top .5)
        (front .5))
    (let ((uv (image-coordinates image)))
      (let ((tl (uv-left uv))
            (tt (uv-top uv))
            (tr (uv-right uv))
            (tb (uv-bottom uv))
            (texture-depth (uv-depth uv)))
        (let ((faces
                (list
                  ;; bottom
                  (make-face image
                             (f32vector tl tt tl tb tr tb tr tt)
                             texture-depth
                             (make-quad #f
                                        (vertex left  bottom front)
                                        (vertex left  bottom back)
                                        (vertex right bottom back)
                                        (vertex right bottom front)))
                  ;; left
                  (make-face image
                             (f32vector tl tt tl tb tr tb tr tt)
                             texture-depth
                             (make-quad #f
                                        (vertex left top    back)
                                        (vertex left bottom back)
                                        (vertex left bottom front)
                                        (vertex left top    front)))
                  ;; front
                  (make-face image
                             (f32vector tl tt tl tb tr tb tr tt)
                             texture-depth
                             (make-triangle #f
                                            (vertex left   top    front)
                                            (vertex left   bottom front)
                                            (vertex right  bottom front)))
                  ;; back
                  (make-face image
                             (f32vector tl tt tl tb tr tb tr tt)
                             texture-depth
                             (make-triangle #f
                                            (vertex left   top    back)
                                            (vertex right  bottom back)
                                            (vertex left   bottom back)))
                  ;; slope
                  (make-face image
                             (f32vector tl tt tl tb tr tb tr tt)
                             texture-depth
                             (make-quad #f
                                        (vertex left  top front)
                                        (vertex right bottom front)
                                        (vertex right bottom back)
                                        (vertex left  top back))))))
          (make-faces-model faces))))))


@comment
(define-tile Floor
  (lambda ()
    (make-floor-model "dirty")))


(define-tile Slope
  (lambda ()
    (make-slope-model "dirty")))


(define-tile Pyramid
  (lambda ()
    (make-pyramid-model "dirty")))


(define-tile Leaves
  (lambda ()
    (make-cross-model "ElwynnLeaves")))


(define-tile Moss
  (lambda ()
    (make-cross-model "ElwynnMoss")))


(define-tile BarrensBaseBush
  (lambda ()
    (make-block-model "BarrensBaseBush")))


(define-tile Dirty
  (lambda ()
    (make-block-model "dirty")))


(define-tile ElwynnFlowerBase
  (lambda ()
    (make-block-model "ElwynnFlowerBase")))


(define-tile Fire
  (lambda ()
    (make-block-model "fire")))


(define-tile Funky
  (lambda ()
    (make-block-model "funky")))


(define-tile Grass
  (lambda ()
    (make-block-model "grass")))


(define-tile Greek
  (lambda ()
    (make-block-model "greek")))


(define-tile Ground
  (lambda ()
    (make-block-model "ground")))


(define-tile Portal
  (lambda ()
    (make-block-model "portal")))


(define-tile Portal2
  (lambda ()
    (make-block-model "portal2")))


(define-tile Roman
  (lambda ()
    (make-block-model "roman")))


(define-tile RomanSlate
  (lambda ()
    (make-block-model "romanSlate")))


(define-tile RomanTile
  (lambda ()
    (make-block-model "romanTile")))


(define-tile Wood
  (lambda ()
    (make-block-model "wood"))))
