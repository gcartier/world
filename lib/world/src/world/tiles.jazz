;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Tiles
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2013
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.tiles jazz


(import (jazz.geometry)
        (jazz.graphic)
        (jazz.graphic.opengl.glew)
        (world)
        (world.autoload)
        (world.block)
        (world.face)
        (world.geometry)
        (world.model)
        (world.quad)
        (world.syntax (phase syntax))
        (world.texture)
        (world.tile))


(definition public (make-block-model left-image right-image bottom-image top-image back-image front-image)
  (let ((world (current-world)))
    (let ((left -.5)
          (bottom -.5)
          (back -.5)
          (right .5)
          (top .5)
          (front .5)
          (default-image (get-default-image~ world)))
      (let ((faces
              (list
                ;; front face
                (let ((image (or front-image default-image)))
                  (let ((uv (image-coordinates image)))
                    (let ((tl (uv-left uv))
                          (tt (uv-top uv))
                          (tr (uv-right uv))
                          (tb (uv-bottom uv))
                          (texture-depth (uv-depth uv)))
                      (make-face image
                                 (f32vector tl tt tl tb tr tb tr tt)
                                 texture-depth
                                 (make-quad #f
                                            (vertex left top front) (vertex left bottom front) (vertex right bottom front) (vertex right top front))))))
                ;; back face
                (let ((image (or back-image default-image)))
                  (let ((uv (image-coordinates image)))
                    (let ((tl (uv-left uv))
                          (tt (uv-top uv))
                          (tr (uv-right uv))
                          (tb (uv-bottom uv))
                          (texture-depth (uv-depth uv)))
                      (make-face image
                                 (f32vector tr tt tr tb tl tb tl tt)
                                 texture-depth
                                 (make-quad #f
                                            (vertex right top back) (vertex right bottom back) (vertex left bottom back) (vertex left top back))))))
                ;; left face
                (let ((image (or left-image default-image)))
                  (let ((uv (image-coordinates image)))
                    (let ((tl (uv-left uv))
                          (tt (uv-top uv))
                          (tr (uv-right uv))
                          (tb (uv-bottom uv))
                          (texture-depth (uv-depth uv)))
                      (make-face image
                                 (f32vector tl tt tl tb tr tb tr tt)
                                 texture-depth
                                 (make-quad #f
                                            (vertex left top back) (vertex left bottom back) (vertex left bottom front) (vertex left top front))))))
                ;; right face
                (let ((image (or right-image default-image)))
                  (let ((uv (image-coordinates image)))
                    (let ((tl (uv-left uv))
                          (tt (uv-top uv))
                          (tr (uv-right uv))
                          (tb (uv-bottom uv))
                          (texture-depth (uv-depth uv)))
                      (make-face image
                                 (f32vector tl tt tl tb tr tb tr tt)
                                 texture-depth
                                 (make-quad #f
                                            (vertex right top front) (vertex right bottom front) (vertex right bottom back) (vertex right top back))))))
                ;; top face
                (let ((image (or top-image default-image)))
                  (let ((uv (image-coordinates image)))
                    (let ((tl (uv-left uv))
                          (tt (uv-top uv))
                          (tr (uv-right uv))
                          (tb (uv-bottom uv))
                          (texture-depth (uv-depth uv)))
                      (make-face image
                                 (f32vector tl tb tl tt tr tt tr tb)
                                 texture-depth
                                 (make-quad #f
                                            (vertex left top back) (vertex left top front) (vertex right top front) (vertex right top back))))))
                ;; bottom face
                (let ((image (or bottom-image default-image)))
                  (let ((uv (image-coordinates image)))
                    (let ((tl (uv-left uv))
                          (tt (uv-top uv))
                          (tr (uv-right uv))
                          (tb (uv-bottom uv))
                          (texture-depth (uv-depth uv)))
                      (make-face image
                                 (f32vector tl tt tl tb tr tb tr tt)
                                 texture-depth
                                 (make-quad #f
                                            (vertex left bottom front) (vertex left bottom back) (vertex right bottom back) (vertex right bottom front)))))))))
        (make-faces-model faces)))))


(definition public (make-cross-model image)
  (let ((world (current-world)))
    (let ((left -.5)
          (bottom -.5)
          (back -.5)
          (right .5)
          (top .5)
          (front .5)
          (tl (uv-left uv))
          (tt (uv-top uv))
          (tr (uv-right uv))
          (tb (uv-bottom uv))
          (texture-depth (uv-depth uv)))
      (let ((faces
              (list
                (let ((uv (image-coordinates image)))
                  (let ((tl (uv-left uv))
                        (tt (uv-top uv))
                        (tr (uv-right uv))
                        (tb (uv-bottom uv))
                        (texture-depth (uv-depth uv)))
                    (make-face image
                               (f32vector tl tt tl tb tr tb tr tt)
                               texture-depth
                               (make-quad #f
                                          (vertex right top back) (vertex right bottom back) (vertex left bottom front) (vertex left top front)))))
                (let ((uv (image-coordinates image)))
                  (let ((tl (uv-left uv))
                        (tt (uv-top uv))
                        (tr (uv-right uv))
                        (tb (uv-bottom uv))
                        (texture-depth (uv-depth uv)))
                    (make-face image
                               (f32vector tl tt tl tb tr tb tr tt)
                               texture-depth
                               (make-quad #f
                                          (vertex right top front) (vertex right bottom front) (vertex left bottom back) (vertex left top back))))))))
        (make-faces-model faces)))))


(define-tile leaves
  (lambda ()
    (make-cross-model "ElwynnLeaves")))


(define-tile moss
  (lambda ()
    (make-cross-model "ElwynnMoss"))))
