;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; Profile
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.profile jazz


(import (jazz.event)
        (jazz.snapshot)
        (jazz.settings)
        (world)
        (world.context)
        (world.settings)
        (world.syntax (phase syntax))
        (world.task))


;; application-wide graphic levels

(definition protected min-graphic-level
  0)

(definition protected max-graphic-level
  3)


(definition protected (tiled-level level count)
  (cond ((<= count 2)
         (min (+ level 1) max-graphic-level))
        ((<= count 4)
         level)
        ((<= count 9)
         (max min-graphic-level (- level 1)))
        ((<= count 16)
         (max min-graphic-level (- level 2)))
        (else
         min-graphic-level)))


(definition protected (focused-level level)
  (min (+ level 1) max-graphic-level))


;;;
;;;; Graphic
;;;


(class Graphic-Profile extends Object
  
  
  (slot name        getter generate)
  (slot level       getter generate)
  (slot extension   getter generate)
  (slot resolution  getter generate)
  (slot framerate   getter generate)
  (slot min-bitrate getter generate)
  (slot bitrate     getter generate)
  (slot codec       getter generate)
  (slot skybox      getter generate)
  
  
  (method override (initialize self name level resolution framerate min-bitrate bitrate codec skybox)
    (nextmethod self)
    (set! self.name name)
    (set! self.level level)
    (set! self.extension (format "streamvideo{a}" (or level "")))
    (set! self.resolution resolution)
    (set! self.framerate framerate)
    (set! self.min-bitrate min-bitrate)
    (set! self.bitrate bitrate)
    (set! self.codec codec)
    (set! self.skybox skybox))
  
  
  (method override (print self output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{a}" name)))))


(definition protected graphic-profile
  (world-setting 'world.graphic-profile 'standard))

(add-snapshot-property 'live.graphic-profile graphic-profile)


(definition protected graphic-profiles
  '())

(definition protected graphic-profile-names
  (make-table test: eq?))

(definition protected graphic-profile-levels
  (make-table test: eqv?))


(definition protected (register-graphic-profile profile)
  (set! graphic-profiles (append graphic-profiles (list profile)))
  (table-set! graphic-profile-names (get-name profile) profile)
  (table-set! graphic-profile-levels (get-level profile) profile))

(definition protected (name->graphic-profile name)
  (table-ref graphic-profile-names name))

(definition protected (level->graphic-profile level)
  (table-ref graphic-profile-levels level))

(definition protected (level->graphic-profile-name level)
  (get-name (level->graphic-profile level)))


(definition public (active-graphic-profile)
  (name->graphic-profile graphic-profile))

(definition public (active-graphic-level)
  (get-level (active-graphic-profile)))


(define-graphic-profile full     4 {Dimension 1920 1080} 30 2048 4096 'h264 #f)
(define-graphic-profile high     3 {Dimension 1280  720} 30 1024 2048 'h264 #f)
(define-graphic-profile standard 2 {Dimension  640  360} 24  512 1024 'h264 #f)
(define-graphic-profile medium   1 {Dimension  416  234} 18  256  512 'h264 #f)
(define-graphic-profile low      0 {Dimension  256  144} 12  128  256 'h264 "world/nebula")


(definition public (max-upload-level)
  (let ((graphic-level (active-graphic-level)))
    (min (+ graphic-level 1) max-graphic-level)))

(definition public (max-upload-profile)
  (level->graphic-profile (max-upload-level)))


(definition public (video-profile-extension)
  (get-extension (active-graphic-profile)))


(definition public maximum-streaming-level
  4)


(definition public (maximum-streaming-profile)
  (level->graphic-profile maximum-streaming-level))


(definition public (streaming-video-extensions)
  (map get-extension (streaming-video-profiles)))


(definition public (streaming-video-profiles)
  (let ((profile (maximum-streaming-profile)))
    (streaming-profiles profile)))


(definition public (streaming-profiles profile)
  (let ((level (get-level profile)))
    (loop (for l from level downto 0)
          (collect (level->graphic-profile l)))))


(definition public (estimate-resolution-profile resolution)
  (define (resolution->area resolution)
    (cast <fl> (* (get-width resolution) (get-height resolution))))
  
  (let ((area (resolution->area resolution)))
    (car (sort < (table-values graphic-profile-names)
           key: (lambda (profile)
                  (let ((profile-area (resolution->area (get-resolution profile))))
                    (abs (- area profile-area)))))))))
