;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; Profile
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.profile jazz


(import (jazz.event)
        (jazz.snapshot)
        (jazz.settings)
        (world)
        (world.context)
        (world.settings)
        (world.task))


;; application-wide graphic levels

(definition protected min-graphic-level
  0)

(definition protected max-graphic-level
  3)

(definition protected widget-graphic-level
  0)


;;;
;;;; Graphic
;;;


(class Graphic-Profile extends Object
  
  
  (slot name        getter generate)
  (slot level       getter generate)
  (slot extension   getter generate)
  (slot resolution  getter generate)
  (slot framerate   getter generate)
  (slot selfrate    getter generate)
  (slot min-bitrate getter generate)
  (slot bitrate     getter generate)
  (slot codec       getter generate)
  (slot skybox      getter generate)
  
  
  (method override (initialize self name level resolution framerate selfrate min-bitrate bitrate codec skybox)
    (nextmethod self)
    (set! self.name name)
    (set! self.level level)
    (set! self.extension (format "streamvideo{a}" (or level "")))
    (set! self.resolution resolution)
    (set! self.framerate framerate)
    (set! self.selfrate selfrate)
    (set! self.min-bitrate min-bitrate)
    (set! self.bitrate bitrate)
    (set! self.codec codec)
    (set! self.skybox skybox))
  
  
  (method override (print self output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{a}" name)))))


;; limit to standard for early adoption
(definition (limit-graphic-profile profile)
  (cond-expand
    ((or devel stable) profile)
    (else (if (or (eq? profile 'low)
                  (eq? profile 'medium))
              profile
            'standard))))


(definition protected initial-graphic-profile
  (limit-graphic-profile
    (or (world-setting 'world.graphic-profile #f)
        (find-setting 'caps.profile.graphic 'standard))))


(definition protected graphic-profile
  initial-graphic-profile)

(add-snapshot-property 'live.graphic-profile graphic-profile)

(definition protected (set-graphic-profile profile)
  (set! graphic-profile profile)
  (add-snapshot-property 'live.graphic-profile profile))


(definition protected graphic-profiles
  '())

(definition protected graphic-profile-names
  (make-table test: eq?))

(definition protected graphic-profile-levels
  (make-table test: eqv?))


(definition protected (register-graphic-profile profile)
  (set! graphic-profiles (append graphic-profiles (list profile)))
  (table-set! graphic-profile-names (get-name profile) profile)
  (table-set! graphic-profile-levels (get-level profile) profile))

(definition protected (name->graphic-profile name)
  (table-ref graphic-profile-names name))

(definition protected (level->graphic-profile level)
  (table-ref graphic-profile-levels level))


(definition public (active-graphic-profile)
  (name->graphic-profile graphic-profile))

(definition public (active-graphic-level)
  (get-level (active-graphic-profile)))


(register-graphic-profile (new Graphic-Profile 'full     4  {Dimension 1920 1080} 30 30 2048 4096 'h264 #f))
(register-graphic-profile (new Graphic-Profile 'high     3  {Dimension 1280  720} 30 30 1024 2048 'h264 #f))
(register-graphic-profile (new Graphic-Profile 'standard 2  {Dimension  640  360} 24 24  512 1024 'h264 #f))
(register-graphic-profile (new Graphic-Profile 'medium   1  {Dimension  416  234} 18 18  256  512 'h264 #f))
(register-graphic-profile (new Graphic-Profile 'low      0  {Dimension  256  144} 12 12  128  256 'h264 "world/nebula"))


(definition protected maximum-graphic-profile
  (let ((override (world-setting 'world.graphic-profile #f))
        (caps (find-setting 'caps.profile.graphic 'standard)))
    (if (not override)
        (name->graphic-profile caps)
      (level->graphic-profile
        (max (get-level (name->graphic-profile override))
             (get-level (name->graphic-profile caps)))))))


(definition protected (graphic-profile-update profile)
  (update-graphic-profile (current-client) profile))


(definition public (maximum-stream-profile)
  (level->graphic-profile (min (+ (get-level maximum-graphic-profile) 1) max-graphic-level)))


(definition public (video-profile-extension)
  (get-extension (active-graphic-profile)))


(definition public maximum-streaming-level
  4)


(definition public (maximum-streaming-profile)
  (level->graphic-profile maximum-streaming-level))


(definition public (streaming-video-extensions)
  (map get-extension (streaming-video-profiles)))


(definition public (streaming-video-profiles)
  (let ((profile (maximum-streaming-profile)))
    (streaming-profiles profile)))


(definition public (streaming-profiles profile)
  (let ((level (get-level profile)))
    (loop (for l from level downto 0)
          (collect (level->graphic-profile l)))))


(definition public (estimate-resolution-profile resolution)
  (define (resolution->area resolution)
    (cast <fl> (* (get-width resolution) (get-height resolution))))
  
  (let ((area (resolution->area resolution)))
    (car (sort < (table-values graphic-profile-names)
           key: (lambda (profile)
                  (let ((profile-area (resolution->area (get-resolution profile))))
                    (abs (- area profile-area)))))))))
