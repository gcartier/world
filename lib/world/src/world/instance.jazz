;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Instance
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2016
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.instance jazz


(import (jazz.component)
        (jazz.jrm)
        (world)
        (world.autoload)
        (world.master)
        (world.settings)
        (world.syntax (phase syntax))
        (world.work))


;;;
;;;; Instance
;;;


(class Instance extends Component
  
  
  (property template initialize #f accessors generate)
  (property rank     initialize #f accessors generate))


;;;
;;;; Processor
;;;


(definition protected processors
  (make-table test: equal?))


(definition protected (spawn-processor zone)
  (define (spawn)
    (start-remote-listener)
    (let ((debug? (processor-debug?)))
      (spawn-slave-process "processor" (get-processor-filename)
        (lambda (master slave cookie)
          (let ((master (load-object~ (get-local-register) 'world.master 'world-remote-master))
                (server (load-object~ (get-local-register) 'world.server.remote 'world-remote-server))
                (server-name (get-name~ (get-directory~ (server-tier))))
                (worker (require-worker)))
            (processor-setup~ slave master cookie server server-name zone (proxy-connection-info worker))))
        (lambda (master slave cookie)
          slave)
        arguments: `("-processor" "true")
        debug?: debug?
        wait?: #t)))
  
  (or (table-ref processors zone #f)
      (let ((processor (spawn)))
        (table-set! processors zone processor)
        processor)))


(definition protected (kill-processors)
  (iterate-table-safe processors
    (lambda (zone processor)
      (kill-processor zone))))


(definition protected (kill-processor zone)
  (let ((processor (table-ref processors zone)))
    (processor-quit~ processor)
    (table-clear processors zone)))


(definition (processor-debug?)
  (world-setting 'world.processor-debug? #t))


;;;
;;;; Exit
;;;


(add-exit-job! kill-processors))
