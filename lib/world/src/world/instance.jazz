;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Instance
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2016
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.instance jazz


(import (jazz.application)
        (jazz.debuggee)
        (jazz.io)
        (jazz.jrm)
        (jazz.network)
        (world)
        (world.autoload)
        (world.master)
        (world.settings)
        (world.syntax (phase syntax))
        (world.work))


;;;
;;;; Instance
;;;


(definition protected instances
  (make-table test: equal?))


(definition protected (spawn-instance zone)
  (let ((uuid (make-uuid))
        (instance (spawn-processor)))
    (table-set! instances uuid instance)
    instance))


(definition protected (kill-instances)
  (iterate-table instances
    (lambda (uuid processor)
      (kill-processor processor)))
  (empty-table instances))


;;;
;;;; Processor
;;;


(definition (processor-debug?)
  (world-setting 'world.processor-debug? #f))


(definition protected (spawn-processor)
  (start-remote-listener)
  (let ((debug? (processor-debug?)))
    (spawn-slave-process "processor" (get-processor-filename)
      (lambda (slave cookie)
        (processor-setup~ slave (require-worker))
        slave)
      arguments: '("-processor" "true")
      debug?: debug?
      wait?: #t)))


(definition protected (kill-processor processor)
  (processor-quit~ processor))


;;;
;;;; Exit
;;;


(add-exit-job! kill-instances))
