;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; World Geometry Classes
;;;


(module world.geometry.classes jazz


(import (jazz.geometry)
        (jazz.graphic)
        (jazz.graphic.opengl.glew)
        (world)
        (world.syntax (phase syntax)))


(proclaim (warn optimizations))


;;;
;;;; F32
;;;


(definition public F32
  Flonum)


(definition public inline (f32 x <fl>) <f32vector>
  (debug-allocation f32)
  (f32vector x))


(definition public inline (make-f32) <f32vector>
  (debug-allocation make-f32)
  (make-f32vector 1))


(definition public inline (f32-ref fl <f32vector>) <fl>
  (f32vector-ref fl 0))


(definition public inline (f32-set! fl <f32vector> val <fl>) <void>
  (f32vector-set! fl 0 val))


(definition public (f32-copy! dst <f32vector> src <f32vector>) <void>
  (f32-set! dst (f32-ref src)))


;;;
;;;; Vertex
;;;


(definition public Vertex
  F32Vector)


(definition public inline (vertex x <fl> y <fl> z <fl>) <f32vector>
  (debug-allocation vertex)
  (f32vector x y z))


(definition public inline (make-vertex) <f32vector>
  (debug-allocation make-vertex)
  (make-f32vector 3))


(definition public (copy-vertex vert <f32vector>) <f32vector>
  (let ((copy (make-vertex)))
    (vertex-copy! copy vert)
    copy))


(definition public inline (vertex-x vert <f32vector>) <fl>
  (f32vector-ref vert 0))

(definition public inline (vertex-y vert <f32vector>) <fl>
  (f32vector-ref vert 1))

(definition public inline (vertex-z vert <f32vector>) <fl>
  (f32vector-ref vert 2))


(definition public inline (vertex-x-set! vert <f32vector> x <fl>) <void>
  (f32vector-set! vert 0 x))

(definition public inline (vertex-y-set! vert <f32vector> y <fl>) <void>
  (f32vector-set! vert 1 y))

(definition public inline (vertex-z-set! vert <f32vector> z <fl>) <void>
  (f32vector-set! vert 2 z))


(definition public (vertex=? v1 <f32vector> v2 <f32vector>) <bool>
  (and (= (vertex-x v1) (vertex-x v2))
       (= (vertex-y v1) (vertex-y v2))
       (= (vertex-z v1) (vertex-z v2))))


(definition public (vertex/=? v1 <f32vector> v2 <f32vector>) <bool>
  (or (/= (vertex-x v1) (vertex-x v2))
      (/= (vertex-y v1) (vertex-y v2))
      (/= (vertex-z v1) (vertex-z v2))))


(definition public (vertex-zero? vert <f32vector>) <bool>
  (and (= (vertex-x vert) 0.)
       (= (vertex-y vert) 0.)
       (= (vertex-z vert) 0.)))


(definition public (vertex-init! vert <f32vector> x <fl> y <fl> z <fl>) <void>
  (vertex-x-set! vert x)
  (vertex-y-set! vert y)
  (vertex-z-set! vert z))


(definition public (vertex-copy! dst <f32vector> src <f32vector>) <void>
  (vertex-x-set! dst (vertex-x src))
  (vertex-y-set! dst (vertex-y src))
  (vertex-z-set! dst (vertex-z src)))


(definition public (vertex-hash vert <f32vector>)
  (fxwrap+ (eqv?-hash (vertex-x vert))
           (eqv?-hash (vertex-y vert))
           (eqv?-hash (vertex-z vert))))


(definition public (present-vertex vert)
  (format "~{Vertex {r precision: 3} {r precision: 3} {r precision: 3}}"
          (vertex-x vert)
          (vertex-y vert)
          (vertex-z vert)))


;;;
;;;; Cuboid
;;;


(definition public Cuboid
  F32Vector)


(definition public inline (cuboid left <fl> bottom <fl> back <fl> right <fl> top <fl> front <fl>) <f32vector>
  (debug-allocation cuboid)
  (f32vector left bottom back right top front))


(definition public inline (make-cuboid) <f32vector>
  (debug-allocation make-cuboid)
  (make-f32vector 6))


(definition public (copy-cuboid cub <f32vector>) <f32vector>
  (let ((copy (make-cuboid)))
    (cuboid-copy! copy cub)
    copy))


(definition public inline (cuboid-left cub <f32vector>) <fl>
  (f32vector-ref cub 0))

(definition public inline (cuboid-bottom cub <f32vector>) <fl>
  (f32vector-ref cub 1))

(definition public inline (cuboid-back cub <f32vector>) <fl>
  (f32vector-ref cub 2))

(definition public inline (cuboid-right cub <f32vector>) <fl>
  (f32vector-ref cub 3))

(definition public inline (cuboid-top cub <f32vector>) <fl>
  (f32vector-ref cub 4))

(definition public inline (cuboid-front cub <f32vector>) <fl>
  (f32vector-ref cub 5))


(definition public inline (cuboid-left-set! cub <f32vector> left <fl>) <void>
  (f32vector-set! cub 0 left))

(definition public inline (cuboid-bottom-set! cub <f32vector> bottom <fl>) <void>
  (f32vector-set! cub 1 bottom))

(definition public inline (cuboid-back-set! cub <f32vector> back <fl>) <void>
  (f32vector-set! cub 2 back))

(definition public inline (cuboid-right-set! cub <f32vector> right <fl>) <void>
  (f32vector-set! cub 3 right))

(definition public inline (cuboid-top-set! cub <f32vector> top <fl>) <void>
  (f32vector-set! cub 4 top))

(definition public inline (cuboid-front-set! cub <f32vector> front <fl>) <void>
  (f32vector-set! cub 5 front))


(definition public (cuboid-init! cub <f32vector> left <fl> bottom <fl> back <fl> right <fl> top <fl> front <fl>) <void>
  (cuboid-left-set! cub left)
  (cuboid-bottom-set! cub bottom)
  (cuboid-back-set! cub back)
  (cuboid-right-set! cub right)
  (cuboid-top-set! cub top)
  (cuboid-front-set! cub front))


(definition public (cuboid-copy! dst <f32vector> src <f32vector>) <void>
  (cuboid-left-set! dst (cuboid-left src))
  (cuboid-bottom-set! dst (cuboid-bottom src))
  (cuboid-back-set! dst (cuboid-back src))
  (cuboid-right-set! dst (cuboid-right src))
  (cuboid-top-set! dst (cuboid-top src))
  (cuboid-front-set! dst (cuboid-front src)))


;;;
;;;; Matrix
;;;


;; 0  4  8 12
;; 1  5  9 13
;; 2  6 10 14
;; 3  7 11 15


(definition public Matrix
  F32Vector)


(definition public (matrix f0 <fl> f4 <fl> f8 <fl> f12 <fl> f1 <fl> f5 <fl> f9 <fl> f13 <fl> f2 <fl> f6 <fl> f10 <fl> f14 <fl> f3 <fl> f7 <fl> f11 <fl> f15 <fl>) <f32vector>
  (debug-allocation matrix)
  (f32vector f0 f1 f2 f3 f4 f5 f6 f7 f8 f9 f10 f11 f12 f13 f14 f15))


(definition public (make-matrix) <f32vector>
  (debug-allocation make-matrix)
  (make-f32vector 16))


(definition public (copy-matrix mat <f32vector>) <f32vector>
  (let ((copy (make-matrix)))
    (matrix-copy! copy mat)
    copy))


(definition public inline (matrix-ref mat <f32vector> ind <fx>) <fl>
  (f32vector-ref mat ind))


(definition public inline (matrix-set! mat <f32vector> ind <fx> val <object>) <void>
  (f32vector-set! mat ind val))


(definition public (matrix=? m1 <f32vector> m2 <f32vector>) <bool>
  (and (= (matrix-ref m1  0) (matrix-ref m2  0))
       (= (matrix-ref m1  1) (matrix-ref m2  1))
       (= (matrix-ref m1  2) (matrix-ref m2  2))
       (= (matrix-ref m1  3) (matrix-ref m2  3))
       (= (matrix-ref m1  4) (matrix-ref m2  4))
       (= (matrix-ref m1  5) (matrix-ref m2  5))
       (= (matrix-ref m1  6) (matrix-ref m2  6))
       (= (matrix-ref m1  7) (matrix-ref m2  7))
       (= (matrix-ref m1  8) (matrix-ref m2  8))
       (= (matrix-ref m1  9) (matrix-ref m2  9))
       (= (matrix-ref m1 10) (matrix-ref m2 10))
       (= (matrix-ref m1 11) (matrix-ref m2 11))
       (= (matrix-ref m1 12) (matrix-ref m2 12))
       (= (matrix-ref m1 13) (matrix-ref m2 13))
       (= (matrix-ref m1 14) (matrix-ref m2 14))
       (= (matrix-ref m1 15) (matrix-ref m2 15))))


(definition public (matrix-copy! dst <f32vector> src <f32vector>) <void>
  (matrix-set! dst  0 (matrix-ref src 0))
  (matrix-set! dst  1 (matrix-ref src 1))
  (matrix-set! dst  2 (matrix-ref src 2))
  (matrix-set! dst  3 (matrix-ref src 3))
  (matrix-set! dst  4 (matrix-ref src 4))
  (matrix-set! dst  5 (matrix-ref src 5))
  (matrix-set! dst  6 (matrix-ref src 6))
  (matrix-set! dst  7 (matrix-ref src 7))
  (matrix-set! dst  8 (matrix-ref src 8))
  (matrix-set! dst  9 (matrix-ref src 9))
  (matrix-set! dst 10 (matrix-ref src 10))
  (matrix-set! dst 11 (matrix-ref src 11))
  (matrix-set! dst 12 (matrix-ref src 12))
  (matrix-set! dst 13 (matrix-ref src 13))
  (matrix-set! dst 14 (matrix-ref src 14))
  (matrix-set! dst 15 (matrix-ref src 15))))
