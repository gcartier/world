;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; World Geometry Base
;;;


(module world.geometry.base jazz


(import (jazz.geometry)
        (jazz.graphic)
        (jazz.graphic.opengl.glew)
        (world.geometry.classes))


(proclaim (warn optimizations))


;;;
;;;; Vertex
;;;


(definition public (vertex+ v1 <f32vector> v2 <f32vector>) <f32vector>
  (vertex
    (+ (vertex-x v1) (vertex-x v2))
    (+ (vertex-y v1) (vertex-y v2))
    (+ (vertex-z v1) (vertex-z v2))))


(definition public (vertex+! res <f32vector> v1 <f32vector> v2 <f32vector>) <f32vector>
  (vertex-x-set! res (+ (vertex-x v1) (vertex-x v2)))
  (vertex-y-set! res (+ (vertex-y v1) (vertex-y v2)))
  (vertex-z-set! res (+ (vertex-z v1) (vertex-z v2)))
  res)


(definition public (vertex-increase! res <f32vector> v <f32vector>) <void>
  (vertex-x-set! res (+ (vertex-x res) (vertex-x v)))
  (vertex-y-set! res (+ (vertex-y res) (vertex-y v)))
  (vertex-z-set! res (+ (vertex-z res) (vertex-z v))))


(definition public (vertex- v1 <f32vector> v2 <f32vector>) <f32vector>
  (vertex
    (- (vertex-x v1) (vertex-x v2))
    (- (vertex-y v1) (vertex-y v2))
    (- (vertex-z v1) (vertex-z v2))))


(definition public (vertex-! res <f32vector> v1 <f32vector> v2 <f32vector>) <f32vector>
  (vertex-x-set! res (- (vertex-x v1) (vertex-x v2)))
  (vertex-y-set! res (- (vertex-y v1) (vertex-y v2)))
  (vertex-z-set! res (- (vertex-z v1) (vertex-z v2)))
  res)


(definition public (vertex-decrease! res <f32vector> v <f32vector>) <void>
  (vertex-x-set! res (- (vertex-x res) (vertex-x v)))
  (vertex-y-set! res (- (vertex-y res) (vertex-y v)))
  (vertex-z-set! res (- (vertex-z res) (vertex-z v))))


(definition public (vertex-negate v <f32vector>) <f32vector>
  (vertex
    (- (vertex-x v))
    (- (vertex-y v))
    (- (vertex-z v))))


(definition public (vertex-negate! res <f32vector> v <f32vector>) <f32vector>
  (vertex-x-set! res (- (vertex-x v)))
  (vertex-y-set! res (- (vertex-y v)))
  (vertex-z-set! res (- (vertex-z v)))
  res)


(definition public (vertex* v1 <f32vector> v2 <f32vector>) <f32vector>
  (vertex
    (* (vertex-x v1) (vertex-x v2))
    (* (vertex-y v1) (vertex-y v2))
    (* (vertex-z v1) (vertex-z v2))))


(definition public (vertex-scalar* v <f32vector> r <fl>) <f32vector>
  (vertex
    (* r (vertex-x v))
    (* r (vertex-y v))
    (* r (vertex-z v))))


(definition public (vertex-scalar*! res <f32vector> v <f32vector> r <fl>) <f32vector>
  (vertex-x-set! res (* r (vertex-x v)))
  (vertex-y-set! res (* r (vertex-y v)))
  (vertex-z-set! res (* r (vertex-z v)))
  res)


(definition public (vertex-norm v <f32vector>) <fl>
  (let ((x (vertex-x v))
        (y (vertex-y v))
        (z (vertex-z v)))
    (sqrt (+ (* x x)
             (* y y)
             (* z z)))))


(definition public (vertex-norm! res <f32vector> v <f32vector>) <f32vector>
  (f32-set! res (let ((x (vertex-x v))
                      (y (vertex-y v))
                      (z (vertex-z v)))
                  (sqrt (+ (* x x)
                           (* y y)
                           (* z z)))))
  res)


(definition public (vertex-abs v <f32vector>) <f32vector>
  (vertex (abs (vertex-x v))
          (abs (vertex-y v))
          (abs (vertex-z v))))


(definition public (vertex-abs! res <f32vector> v <f32vector>) <f32vector>
  (vertex-init! res
                (abs (vertex-x v))
                (abs (vertex-y v))
                (abs (vertex-z v)))
  res)


(definition public (vertex-normalize v <f32vector>) <f32vector>
  (vertex-scalar* v (/ (vertex-norm v))))


(definition public (vertex-normalize-safe v <f32vector>) <f32vector>
  (let ((norm (vertex-norm v)))
    (if (= norm 0.)
        v
      (vertex-scalar* v (/ norm)))))


(definition public (vertex-normalize! res <f32vector> v <f32vector>) <f32vector>
  (vertex-scalar*! res v (/ (vertex-norm v)))))
