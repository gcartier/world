;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Geometry Base
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is WorldScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2014
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See http://github.com/gcartier/world for details.


(module world.geometry.base jazz


(import (world.geometry.classes)
        (world.homogeneous))


(proclaim (warn optimizations))

(declare (optimize-dead-local-variables))


;;;
;;;; Vertex
;;;


(definition public (vertex+ v1 <f64vector> v2 <f64vector>) <f64vector>
  (vertex
    (+ (vertex-x v1) (vertex-x v2))
    (+ (vertex-y v1) (vertex-y v2))
    (+ (vertex-z v1) (vertex-z v2))))


(definition public (vertex+! res <f64vector> v1 <f64vector> v2 <f64vector>) <f64vector>
  (vertex-x-set! res (+ (vertex-x v1) (vertex-x v2)))
  (vertex-y-set! res (+ (vertex-y v1) (vertex-y v2)))
  (vertex-z-set! res (+ (vertex-z v1) (vertex-z v2)))
  res)


(definition public (vertex-increase! res <f64vector> v <f64vector>) <void>
  (vertex-x-set! res (+ (vertex-x res) (vertex-x v)))
  (vertex-y-set! res (+ (vertex-y res) (vertex-y v)))
  (vertex-z-set! res (+ (vertex-z res) (vertex-z v))))


(definition public (vertex- v1 <f64vector> v2 <f64vector>) <f64vector>
  (vertex
    (- (vertex-x v1) (vertex-x v2))
    (- (vertex-y v1) (vertex-y v2))
    (- (vertex-z v1) (vertex-z v2))))


(definition public (vertex-! res <f64vector> v1 <f64vector> v2 <f64vector>) <f64vector>
  (vertex-x-set! res (- (vertex-x v1) (vertex-x v2)))
  (vertex-y-set! res (- (vertex-y v1) (vertex-y v2)))
  (vertex-z-set! res (- (vertex-z v1) (vertex-z v2)))
  res)


(definition public (vertex-decrease! res <f64vector> v <f64vector>) <void>
  (vertex-x-set! res (- (vertex-x res) (vertex-x v)))
  (vertex-y-set! res (- (vertex-y res) (vertex-y v)))
  (vertex-z-set! res (- (vertex-z res) (vertex-z v))))


(definition public (vertex-negate v <f64vector>) <f64vector>
  (vertex
    (- (vertex-x v))
    (- (vertex-y v))
    (- (vertex-z v))))


(definition public (vertex-negate! res <f64vector> v <f64vector>) <f64vector>
  (vertex-x-set! res (- (vertex-x v)))
  (vertex-y-set! res (- (vertex-y v)))
  (vertex-z-set! res (- (vertex-z v)))
  res)


(definition public (vertex* v1 <f64vector> v2 <f64vector>) <f64vector>
  (vertex
    (* (vertex-x v1) (vertex-x v2))
    (* (vertex-y v1) (vertex-y v2))
    (* (vertex-z v1) (vertex-z v2))))


(definition public (vertex*! res <f64vector> v1 <f64vector> v2 <f64vector>) <f64vector>
  (vertex-x-set! res (* (vertex-x v1) (vertex-x v2)))
  (vertex-y-set! res (* (vertex-y v1) (vertex-y v2)))
  (vertex-z-set! res (* (vertex-z v1) (vertex-z v2)))
  res)


(definition public (vertex/ v1 <f64vector> v2 <f64vector>) <f64vector>
  (vertex
    (/ (vertex-x v1) (vertex-x v2))
    (/ (vertex-y v1) (vertex-y v2))
    (/ (vertex-z v1) (vertex-z v2))))


(definition public (vertex/! res <f64vector> v1 <f64vector> v2 <f64vector>) <f64vector>
  (vertex-x-set! res (/ (vertex-x v1) (vertex-x v2)))
  (vertex-y-set! res (/ (vertex-y v1) (vertex-y v2)))
  (vertex-z-set! res (/ (vertex-z v1) (vertex-z v2)))
  res)


(definition public (vertex-inverse v <f64vector>) <f64vector>
  (vertex
    (/ (vertex-x v))
    (/ (vertex-y v))
    (/ (vertex-z v))))


(definition public (vertex-inverse! res <f64vector> v <f64vector>) <f64vector>
  (vertex-x-set! res (/ (vertex-x v)))
  (vertex-y-set! res (/ (vertex-y v)))
  (vertex-z-set! res (/ (vertex-z v)))
  res)


(definition public (vertex-scalar* v <f64vector> r <fl>) <f64vector>
  (vertex
    (* r (vertex-x v))
    (* r (vertex-y v))
    (* r (vertex-z v))))


(definition public (vertex-scalar*! res <f64vector> v <f64vector> r <fl>) <f64vector>
  (vertex-x-set! res (* r (vertex-x v)))
  (vertex-y-set! res (* r (vertex-y v)))
  (vertex-z-set! res (* r (vertex-z v)))
  res)


(definition public (vertex-scalar/ v <f64vector> r <fl>) <f64vector>
  (vertex
    (/ (vertex-x v) r)
    (/ (vertex-y v) r)
    (/ (vertex-z v) r)))


(definition public (vertex-scalar/! res <f64vector> v <f64vector> r <fl>) <f64vector>
  (vertex-x-set! res (/ (vertex-x v) r))
  (vertex-y-set! res (/ (vertex-y v) r))
  (vertex-z-set! res (/ (vertex-z v) r))
  res)


(definition public (vertex-norm v <f64vector>) <fl>
  (let ((x (vertex-x v))
        (y (vertex-y v))
        (z (vertex-z v)))
    (sqrt (+ (* x x)
             (* y y)
             (* z z)))))


(definition public (vertex-norm! res <f64vector> v <f64vector>) <f64vector>
  (f64-set! res (let ((x (vertex-x v))
                      (y (vertex-y v))
                      (z (vertex-z v)))
                  (sqrt (+ (* x x)
                           (* y y)
                           (* z z)))))
  res)


(definition public (vertex-abs v <f64vector>) <f64vector>
  (vertex (abs (vertex-x v))
          (abs (vertex-y v))
          (abs (vertex-z v))))


(definition public (vertex-abs! res <f64vector> v <f64vector>) <f64vector>
  (vertex-init! res
                (abs (vertex-x v))
                (abs (vertex-y v))
                (abs (vertex-z v)))
  res)


(definition public (vertex-normalize v <f64vector>) <f64vector>
  (vertex-scalar* v (/ (vertex-norm v))))


(definition public (vertex-normalize! res <f64vector> v <f64vector>) <f64vector>
  (vertex-scalar*! res v (/ (vertex-norm v))))


(definition public (vertex-normalize-safe v <f64vector>) <f64vector>
  (let ((norm (vertex-norm v)))
    (if (= norm 0.)
        v
      (vertex-scalar* v (/ norm)))))


(definition public (vertex-normalize-safe! res <f64vector> v <f64vector>) <f64vector>
  (let ((norm (vertex-norm v)))
    (if (= norm 0.)
        (vertex-copy! res v)
      (vertex-scalar*! res v (/ norm))))
  res)


(definition public (vertex-max v <f64vector>) <fl>
  (max (vertex-x v)
       (vertex-y v)
       (vertex-z v))))
