;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; World Geometry Syntax
;;;


(module world.geometry.syntax jazz


;;;
;;;; F32
;;;


(syntax public make-f32&
  (lambda (form-src usage-environment macro-environment)
    (sourcify-if
      `(static (make-f32))
      form-src)))


;;;
;;;; Vertex
;;;


(syntax public make-vertex&
  (lambda (form-src usage-environment macro-environment)
    (sourcify-if
      `(static (make-vertex))
      form-src)))


(syntax public vertex-copy&
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-if
        `(vertex-copy! (make-vertex&) ,@rest)
        form-src))))


(syntax public vertex+&
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-if
        `(vertex+! (make-vertex&) ,@rest)
        form-src))))


(syntax public vertex-&
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-if
        `(vertex-! (make-vertex&) ,@rest)
        form-src))))


(syntax public vertex-negate&
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-if
        `(vertex-negate! (make-vertex&) ,@rest)
        form-src))))


(syntax public vertex-scalar*&
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-if
        `(vertex-scalar*! (make-vertex&) ,@rest)
        form-src))))


(syntax public vertex-norm&
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-if
        `(vertex-norm! (make-f32&) ,@rest)
        form-src))))


(syntax public vertex-normalize&
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-if
        `(vertex-normalize! (make-vertex&) ,@rest)
        form-src))))


(syntax public vertex-abs&
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-if
        `(vertex-abs! (make-vertex&) ,@rest)
        form-src))))


(syntax public vertex-distance&
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-if
        `(vertex-distance! (make-vertex&) ,@rest)
        form-src))))


(syntax public rotate-upon&
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-if
        `(rotate-upon! (make-vertex&) ,@rest)
        form-src))))


(syntax public inner-product&
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-if
        `(inner-product! (make-f32&) ,@rest)
        form-src))))


(syntax public dot-product&
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-if
        `(dot-product! (make-f32&) ,@rest)
        form-src))))


(syntax public cross-product&
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-if
        `(cross-product! (make-vertex&) ,@rest)
        form-src))))


(syntax public plane-normal&
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-if
        `(plane-normal! (make-vertex&) ,@rest)
        form-src))))


;;;
;;;; Matrix
;;;


(syntax public make-matrix&
  (lambda (form-src usage-environment macro-environment)
    (sourcify-if
      `(static (make-matrix))
      form-src)))


(syntax public make-identity-matrix&
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-if
        `(make-identity-matrix! (make-matrix&) ,@rest)
        form-src))))


(syntax public matrix-multiply&
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-if
        `(matrix-multiply! (make-matrix&) ,@rest)
        form-src))))


(syntax public make-translation-matrix&
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-if
        `(make-translation-matrix! (make-matrix&) ,@rest)
        form-src))))


(syntax public make-x-rotation-matrix&
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-if
        `(make-x-rotation-matrix! (make-matrix&) ,@rest)
        form-src))))


(syntax public make-y-rotation-matrix&
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-if
        `(make-y-rotation-matrix! (make-matrix&) ,@rest)
        form-src))))


(syntax public make-z-rotation-matrix&
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-if
        `(make-z-rotation-matrix! (make-matrix&) ,@rest)
        form-src))))


(syntax public make-rotation-matrix&
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-if
        `(make-rotation-matrix! (make-matrix&) ,@rest)
        form-src))))


(syntax public make-scaling-matrix&
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-if
        `(make-scaling-matrix! (make-matrix&) ,@rest)
        form-src))))


(syntax public make-lookat-matrix&
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-if
        `(make-lookat-matrix! (make-matrix&) ,@rest)
        form-src))))


(syntax public make-projection-matrix&
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-if
        `(make-projection-matrix! (make-matrix&) ,@rest)
        form-src))))


(syntax public make-view-matrix&
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-if
        `(make-view-matrix! (make-matrix&) ,@rest)
        form-src))))


;;;
;;;; Movement
;;;


(syntax public make-movement&
  (lambda (form-src usage-environment macro-environment)
    (let ((origin (cadr (source-code form-src)))
          (vector (caddr (source-code form-src)))
          (mvt (generate-symbol "mvt")))
      (sourcify-if
        `(let ((,mvt (static (new Movement (make-vertex) (make-vertex)))))
           (set-origin~ ,mvt ,origin)
           (set-vector~ ,mvt ,vector)
           ,mvt)
        form-src))))


;;;
;;;; Plane
;;;


(syntax public make-plane&
  (lambda (form-src usage-environment macro-environment)
    (let ((origin (cadr (source-code form-src)))
          (vector (caddr (source-code form-src)))
          (plane (generate-symbol "plane")))
      (sourcify-if
        `(let ((,plane (static (new Plane (make-vertex) (make-vertex)))))
           (set-origin~ ,plane ,origin)
           (set-normal~ ,plane ,vector)
           ,plane)
        form-src))))


(syntax public plane-closest&
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-if
        `(plane-closest! (make-vertex&) ,@rest)
        form-src))))


;;;
;;;; Polygon
;;;


(syntax public closest-point-on-line&
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-if
        `(closest-point-on-line! (make-vertex&) ,@rest)
        form-src)))))
