;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Geometry Syntax
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2016
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.geometry.syntax jazz


;;;
;;;; FX
;;;


(syntax public make-fx&
  (lambda (form-src usage-environment macro-environment)
    (sourcify-if
      `(static (make-fx))
      form-src)))


(syntax public fx&
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-if
        `(fx! (make-fx&) ,@rest)
        form-src))))


;;;
;;;; FL
;;;


(syntax public make-fl&
  (lambda (form-src usage-environment macro-environment)
    (sourcify-if
      `(static (flalloc))
      form-src)))


(syntax public fl&
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-if
        `(fl! (make-fl&) ,@rest)
        form-src))))


;;;
;;;; F32
;;;


(syntax public make-f32&
  (lambda (form-src usage-environment macro-environment)
    (sourcify-if
      `(static (make-f32))
      form-src)))


(syntax public f32&
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-if
        `(f32! (make-f32&) ,@rest)
        form-src))))


;;;
;;;; F64
;;;


(syntax public make-f64&
  (lambda (form-src usage-environment macro-environment)
    (sourcify-if
      `(static (make-f64))
      form-src)))


(syntax public f64&
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-if
        `(f64! (make-f64&) ,@rest)
        form-src))))


;;;
;;;; Box
;;;


(syntax public make-box&
  (lambda (form-src usage-environment macro-environment)
    (sourcify-if
      `(static (box #f))
      form-src)))


(syntax public box&
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-if
        `(box! (make-box&) ,@rest)
        form-src))))


;;;
;;;; Environment
;;;


(syntax public wrap&
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-if
        (let ((len (length rest))
              (env (generate-symbol "env")))
          `(let ((,env (static (vector ,@(make-list len #f)))))
             ,@(map (lambda (expr rank)
                      `(vector-set! ,env ,rank ,expr))
                    rest
                    (naturals 0 len))
             ,env))
        form-src))))


(syntax public unwrap
  (lambda (form-src usage-environment macro-environment)
    (let ((bindings (source-code (cadr (source-code form-src))))
          (env (car (cddr (source-code form-src))))
          (body (cdr (cddr (source-code form-src)))))
      (define (parse-bindings)
        (let (iter (scan bindings) (bindings '()))
          (if (null? scan)
              (reverse bindings)
            (let ((specifier (binding-specifier scan)))
              (if specifier
                  (iter (cddr scan) (cons (cons (car scan) specifier) bindings))
                (iter (cdr scan) (cons (cons (car scan) #f) bindings)))))))
      
      (sourcify-if
        (let ((bindings (parse-bindings)))
          `(let ((,env <vector> ,env))
             (let ,(map (lambda (binding rank)
                          (bind (variable . type) binding
                            `(,variable ,@(if type (list type) '()) (vector-ref ,env ,rank))))
                        bindings
                        (naturals 0 (length bindings)))
               ,@body)))
        form-src))))


;;;
;;;; Index
;;;


(syntax public make-index&
  (lambda (form-src usage-environment macro-environment)
    (sourcify-if
      `(static (make-index))
      form-src)))


;;;
;;;; Vertex
;;;


(syntax public make-vertex&
  (lambda (form-src usage-environment macro-environment)
    (sourcify-if
      `(static (make-vertex))
      form-src)))


(syntax public vertex&
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-if
        `(vertex! (make-vertex&) ,@rest)
        form-src))))


(syntax public vertex-copy&
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-if
        `(vertex-copy! (make-vertex&) ,@rest)
        form-src))))


(syntax public vertex+&
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-if
        `(vertex+! (make-vertex&) ,@rest)
        form-src))))


(syntax public vertex-&
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-if
        `(vertex-! (make-vertex&) ,@rest)
        form-src))))


(syntax public vertex-negate&
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-if
        `(vertex-negate! (make-vertex&) ,@rest)
        form-src))))


(syntax public vertex*&
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-if
        `(vertex*! (make-vertex&) ,@rest)
        form-src))))


(syntax public vertex/&
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-if
        `(vertex/! (make-vertex&) ,@rest)
        form-src))))


(syntax public vertex-inverse&
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-if
        `(vertex-inverse! (make-vertex&) ,@rest)
        form-src))))


(syntax public vertex-scalar*&
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-if
        `(vertex-scalar*! (make-vertex&) ,@rest)
        form-src))))


(syntax public vertex-scalar/&
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-if
        `(vertex-scalar/! (make-vertex&) ,@rest)
        form-src))))


(syntax public vertex-norm&
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-if
        `(vertex-norm! (make-f64&) ,@rest)
        form-src))))


(syntax public vertex-normalize&
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-if
        `(vertex-normalize! (make-vertex&) ,@rest)
        form-src))))


(syntax public vertex-normalize-safe&
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-if
        `(vertex-normalize-safe! (make-vertex&) ,@rest)
        form-src))))


(syntax public vertex-abs&
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-if
        `(vertex-abs! (make-vertex&) ,@rest)
        form-src))))


(syntax public vertex-distance&
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-if
        `(vertex-distance! (make-f64&) ,@rest)
        form-src))))


(syntax public rotate-upon&
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-if
        `(rotate-upon! (make-vertex&) ,@rest)
        form-src))))


(syntax public dot-product&
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-if
        `(dot-product! (make-f64&) ,@rest)
        form-src))))


(syntax public cross-product&
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-if
        `(cross-product! (make-vertex&) ,@rest)
        form-src))))


(syntax public cross-normal&
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-if
        `(cross-normal! (make-vertex&) ,@rest)
        form-src))))


(syntax public cross-normal-safe&
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-if
        `(cross-normal-safe! (make-vertex&) ,@rest)
        form-src))))


(syntax public plane-normal&
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-if
        `(plane-normal! (make-vertex&) ,@rest)
        form-src))))


(syntax public polygon-normal&
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-if
        `(polygon-normal! (make-vertex&) ,@rest)
        form-src))))


(syntax public polygon-radius&
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-if
        `(polygon-radius! (make-f64&) ,@rest)
        form-src))))


(syntax public center-of-mass&
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-if
        `(center-of-mass! (make-vertex&) ,@rest)
        form-src))))


(syntax public roll-free-up&
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-if
        `(roll-free-up! (make-vertex&) ,@rest)
        form-src))))


;;;
;;;; LookAt
;;;


(syntax public make-lookat&
  (lambda (form-src usage-environment macro-environment)
    (sourcify-if
      `(static (make-lookat))
      form-src)))


(syntax public lookat&
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-if
        `(lookat! (make-lookat&) ,@rest)
        form-src))))


(syntax public horizon-lookat&
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-if
        `(horizon-lookat! (make-lookat&) ,@rest)
        form-src))))


(syntax public horizon-lookat&^
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-if
        `(horizon-lookat!^ (make-lookat&) ,@rest)
        form-src))))


(syntax public realign-lookat&
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-if
        `(realign-lookat! (make-lookat&) ,@rest)
        form-src))))


(syntax public realign-lookat-horizon&
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-if
        `(realign-lookat-horizon! (make-lookat&) ,@rest)
        form-src))))


(syntax public rotate-lookat&
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-if
        `(rotate-lookat! (make-lookat&) ,@rest)
        form-src))))


;;;
;;;; Quaternion
;;;


(syntax public make-quaternion&
  (lambda (form-src usage-environment macro-environment)
    (sourcify-if
      `(static (make-quaternion))
      form-src)))


(syntax public quaternion&
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-if
        `(quaternion! (make-quaternion&) ,@rest)
        form-src))))


(syntax public quaternion-copy&
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-if
        `(quaternion-copy! (make-quaternion&) ,@rest)
        form-src))))


;;;
;;;; Cuboid
;;;


(syntax public make-cuboid&
  (lambda (form-src usage-environment macro-environment)
    (sourcify-if
      `(static (make-cuboid))
      form-src)))


;;;
;;;; Matrix
;;;


(syntax public make-matrix&
  (lambda (form-src usage-environment macro-environment)
    (sourcify-if
      `(static (make-matrix))
      form-src)))


(syntax public make-identity-matrix&
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-if
        `(make-identity-matrix! (make-matrix&) ,@rest)
        form-src))))


(syntax public matrix-multiply&
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-if
        `(matrix-multiply! (make-matrix&) ,@rest)
        form-src))))


(syntax public matrix-multiply*&
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-if
        (if (= (length rest) 2)
            `(matrix-multiply& ,@rest)
          `(matrix-multiply& ,(car rest) (matrix-multiply*& ,@(cdr rest))))
        form-src))))


(syntax public matrix-transform&
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-if
        `(matrix-transform! (make-vertex&) ,@rest)
        form-src))))


(syntax public matrix-transform-3x4&
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-if
        `(matrix-transform-3x4! (make-vertex&) ,@rest)
        form-src))))


(syntax public make-translation-matrix&
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-if
        `(make-translation-matrix! (make-matrix&) ,@rest)
        form-src))))


(syntax public make-x-rotation-matrix&
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-if
        `(make-x-rotation-matrix! (make-matrix&) ,@rest)
        form-src))))


(syntax public make-y-rotation-matrix&
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-if
        `(make-y-rotation-matrix! (make-matrix&) ,@rest)
        form-src))))


(syntax public make-z-rotation-matrix&
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-if
        `(make-z-rotation-matrix! (make-matrix&) ,@rest)
        form-src))))


(syntax public make-euler-matrix&
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-if
        `(make-euler-matrix! (make-matrix&) ,@rest)
        form-src))))


(syntax public make-quaternion-matrix&
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-if
        `(make-quaternion-matrix! (make-matrix&) ,@rest)
        form-src))))


(syntax public make-scaling-matrix&
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-if
        `(make-scaling-matrix! (make-matrix&) ,@rest)
        form-src))))


(syntax public make-lookat-matrix&
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-if
        `(make-lookat-matrix! (make-matrix&) ,@rest)
        form-src))))


(syntax public make-inverse-lookat-matrix&
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-if
        `(make-inverse-lookat-matrix! (make-matrix&) ,@rest)
        form-src))))


(syntax public make-perspective-matrix&
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-if
        `(make-perspective-matrix! (make-matrix&) ,@rest)
        form-src))))


(syntax public make-view-matrix&
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-if
        `(make-view-matrix! (make-matrix&) ,@rest)
        form-src))))


;;;
;;;; Movement
;;;


(syntax public make-movement&
  (lambda (form-src usage-environment macro-environment)
    (let ((origin (cadr (source-code form-src)))
          (vector (caddr (source-code form-src)))
          (mvt (generate-symbol "mvt")))
      (sourcify-if
        `(let ((,mvt (static (new Movement (vertex 0. 0. 0.) (vertex 0. 0. 1.)))))
           (set-origin~ ,mvt ,origin)
           (set-vector~ ,mvt ,vector)
           ,mvt)
        form-src))))


(syntax public copy-movement&
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-if
        `(copy-movement! (static (new Movement (vertex 0. 0. 0.) (vertex 0. 0. 1.))) ,@rest)
        form-src))))


(syntax public movement-end&
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-if
        `(movement-end! (make-vertex&) ,@rest)
        form-src))))


(syntax public movement-end-to&
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-if
        `(movement-end-to! (make-vertex&) ,@rest)
        form-src))))


;;;
;;;; Plane
;;;


(syntax public plane-closest&
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-if
        `(plane-closest! (make-vertex&) ,@rest)
        form-src))))


;;;
;;;; Polygon
;;;


(syntax public closest-point-on-line&
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-if
        `(closest-point-on-line! (make-vertex&) ,@rest)
        form-src)))))
