;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; UDP Simulation
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;    Barbara Samson


(module world.simulation jazz


(import (jazz.math)
        (jazz.stream)
        (world)
        (world.context)
        (world.event)
        (world.evolution)
        (world.client.tier)
        (world.client.udp)
        (world.server.udp)
        (world.udp))


(definition ignored
  #f)


(definition public (simulate-udp-call metadatas)
  (parameterize ((simulation? #t))
    (let ((call (new UDP-Call)))
      (let ((server (simulate-udp-server)))
        (bind (no name send-channels server-channels start-time) (table-ref metadatas server-no)
          (add-tier call server-no server)
          (add-server-channels server send-channels server-channels))
        (iterate-table metadatas
          (lambda (client-no metadata)
            (when (/= client-no server-no)
              (bind (no name send-channels receive-channels) metadata
                (let ((client (simulate-udp-client client-no)))
                  (add-tier call client-no client)
                  (add-client-channels client send-channels receive-channels))))))
        call))))


(definition (simulate-udp-server)
  (let ((server (new UDP-Server)))
    (start server ignored ignored)
    server))


(definition (simulate-udp-client client-no)
  (let ((client (new UDP-Client client-no)))
    (connect client ignored ignored ignored)
    (start client)
    client))


(definition (add-server-channels server send-channels server-channels)
  (for-each (lambda (info)
              (bind (sender name no origin media-kind source-kind resolution framerate bitrate codec) info
                (register-send-channel server sender name no media-kind source-kind resolution framerate bitrate codec)))
            send-channels)
  (for-each (lambda (info)
              (bind (sender name no origin media-kind source-kind resolution framerate bitrate codec) info
                (register-server-channel server sender name no origin media-kind source-kind resolution framerate bitrate codec #f #f)))
            server-channels))


(definition (add-client-channels client send-channels receive-channels)
  (for-each (lambda (info)
              (bind (sender name no origin media-kind source-kind resolution framerate bitrate codec) info
                (register-send-channel client sender name no media-kind source-kind resolution framerate bitrate codec)))
            send-channels)
  (for-each (lambda (info)
              (bind (sender name no origin media-kind source-kind resolution framerate bitrate codec) info
                (register-receive-channel client sender name no origin media-kind source-kind resolution framerate bitrate codec)))
            receive-channels))


(class UDP-Call extends Object
  
  
  (slot tiers initialize (make-table test: equal?) getter generate)
  
  
  (method public (add-tier self client-no tier)
    (table-set! tiers client-no tier))
  
  
  (method public (require-tier self client-no)
    (table-ref tiers client-no))))
