;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; UDP Simulation
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;    Barbara Samson


(module world.simulation jazz


(import (jazz.math)
        (jazz.stream)
        (world)
        (world.context)
        (world.event)
        (world.evolution)
        (world.client.tier)
        (world.client.udp)
        (world.server.udp)
        (world.udp))


(definition ignored
  #f)


(definition public (simulate-udp-call names)
  (parameterize ((simulation? #t))
    (let ((call (new UDP-Call)))
      (let ((server (simulate-udp-server)))
        (add-tier call server-no server)
        (iterate-table names
          (lambda (no name)
            (when (/= no server-no)
              (let ((tier (simulate-udp-client no)))
                (add-tier call no tier)))))
        (add-channels call)
        call))))


(definition (simulate-udp-server)
  (let ((server (new UDP-Server)))
    (start server ignored ignored)
    server))


(definition (simulate-udp-client no)
  (let ((client (new UDP-Client no)))
    (connect client ignored ignored ignored)
    (start client)
    client))


(class UDP-Call extends Object
  
  
  (slot tiers initialize (make-table test: equal?) getter generate)
  
  
  (method public (add-tier self no tier)
    (table-set! tiers no tier))
  
  
  (method public (require-tier self no)
    (table-ref tiers no))
  
  
  (method package (add-channels self)
    ;; from hierarchy-update
    (iterate-table tiers
      (lambda (no tier)
        (typecase tier
          ((UDP-Server)
           (iterate-table tiers
             (lambda (other-no other-tier)
               (unless (eq? other-tier tier)
                 @convert-channels
                 (require-server-channel tier other-no udp-audio)
                 @convert-channels
                 (require-server-channel tier other-no udp-video)))))
          ((UDP-Client)
           (iterate-table tiers
             (lambda (other-no other-tier)
               (unless (eq? other-tier tier)
                 (typecase other-tier
                   ((UDP-Server)
                    @convert-channels
                    (require-mic-channel tier)
                    @convert-channels
                    (require-camera-channel tier))
                   ((UDP-Client)
                    @convert-channels
                    (require-receive-channel tier other-no udp-audio)
                    @convert-channels
                    (require-receive-channel tier other-no udp-video)))))))))))))
