;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; UDP Simulation
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;    Barbara Samson


(module world.simulation jazz


(import (jazz.math)
        (jazz.stream)
        (world)
        (world.context)
        (world.event)
        (world.evolution)
        (world.client.tier)
        (world.client.udp)
        (world.server.udp)
        (world.udp))


(definition ignored
  #f)


(definition public (simulate-udp-call metadatas)
  (parameterize ((simulation? #t))
    (let ((call (new UDP-Call)))
      (let ((server (simulate-udp-server)))
        (bind (no name send-streams server-streams start-time) (table-ref metadatas server-no)
          (add-tier call server-no server)
          (add-server-streams server send-streams server-streams))
        (iterate-table metadatas
          (lambda (client-no metadata)
            (when (/= client-no server-no)
              (bind (no name send-streams receive-streams) metadata
                (let ((client (simulate-udp-client client-no)))
                  (add-tier call client-no client)
                  (add-client-streams client send-streams receive-streams))))))
        call))))


(definition (simulate-udp-server)
  (let ((server (new UDP-Server)))
    (start server ignored ignored)
    server))


(definition (simulate-udp-client client-no)
  (let ((client (new UDP-Client client-no)))
    (connect client ignored ignored ignored)
    (start client)
    client))


(definition (add-server-streams server send-streams server-streams)
  (for-each (lambda (stream)
              (bind (sender name stream-no origin source-kind video-level channels) stream
                (register-send-stream server sender name stream-no source-kind video-level)
                (for-each (lambda (channel)
                            (bind (channel-no origin media-kind source-kind level resolution framerate bitrate codec) channel
                              (register-send-channel server stream-no channel-no media-kind source-kind level resolution framerate bitrate codec)))
                          channels)))
            send-streams)
  (for-each (lambda (stream)
              (bind (sender name stream-no origin source-kind video-level channels) stream
                (register-server-stream server sender name stream-no origin source-kind video-level #f #f #f)
                (for-each (lambda (channel)
                            (bind (channel-no origin media-kind source-kind level resolution framerate bitrate codec) channel
                              (register-server-channel server stream-no channel-no origin media-kind source-kind level resolution framerate bitrate codec #f #f #f)))
                          channels)))
            server-streams))


(definition (add-client-streams client send-streams receive-streams)
  (for-each (lambda (stream)
              (bind (sender name stream-no origin source-kind video-level channels) stream
                (register-send-stream client sender name stream-no source-kind video-level)
                (for-each (lambda (channel)
                            (bind (channel-no origin media-kind source-kind level resolution framerate bitrate codec) channel
                              (register-send-channel client stream-no channel-no media-kind source-kind level resolution framerate bitrate codec)))
                          channels)))
            send-streams)
  (for-each (lambda (stream)
              (bind (sender name stream-no origin source-kind video-level channels) stream
                (register-receive-stream client sender name stream-no origin source-kind video-level)
                (for-each (lambda (channel)
                            (bind (channel-no origin media-kind source-kind level resolution framerate bitrate codec) channel
                              (register-receive-channel client stream-no channel-no origin media-kind source-kind level resolution framerate bitrate codec)))
                          channels)))
            receive-streams))


(class UDP-Call extends Object
  
  
  (slot tiers initialize (make-table test: equal?) getter generate)
  
  
  (method public (add-tier self client-no tier)
    (table-set! tiers client-no tier))
  
  
  (method public (require-tier self client-no)
    (table-ref tiers client-no))))
