;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; World Object
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2013
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.object jazz


(import (jazz.graphic)
        (jazz.graphic.opengl.glew)
        (jazz.io)
        (jazz.jml)
        (jazz.library)
        (jazz.literals)
        (jazz.platform)
        (jazz.platform.cairo)
        (jazz.runtime)
        (jazz.system)
        (jazz.ui)
        (jazz.ui.window)
        (time)
        (world)
        (world.atlas)
        (world.autoload)
        (world.draw)
        (world.element)
        (world.entity)
        (world.foreign)
        (world.generate)
        (world.geometry)
        (world.material)
        (world.model)
        (world.opengl)
        (world.shape)
        (world.syntax (phase syntax))
        (world.texture))


;;;
;;;; Pyramid
;;;


(class Pyramid extends Entity
  
  
  (method override (prepare rest)
    (nextmethod rest)
    (set-radiuses (vertex .5 .5 .5)))
  
  
  (method override (draw)
    (glPushMatrix)
    (glTranslatef (get-x) (get-y) (get-z))
    (glBegin GL_TRIANGLES)
    (gl-plane-normal (vertex  0.0  1.0  0.0)
                     (vertex -1.0 -1.0  1.0)
                     (vertex  1.0 -1.0  1.0))
    (glColor3f .5 0.0 0.0)
    (glVertex3f  0.0  .5  0.0)
    (glColor3f 0.0 .5 0.0)
    (glVertex3f -.5 -.5  .5)
    (glColor3f 0.0 0.0 .5)
    (glVertex3f  .5 -.5  .5)
    
    (gl-plane-normal (vertex  0.0  1.0  0.0)
                     (vertex  1.0 -1.0  1.0)
                     (vertex  1.0 -1.0  -1.0))
    (glColor3f .5 0.0 0.0)
    (glVertex3f  0.0  .5  0.0)
    (glColor3f 0.0 0.0 .5)
    (glVertex3f  .5 -.5  .5)
    (glColor3f 0.0 .5 0.0)
    (glVertex3f  .5 -.5  -.5)
    
    (gl-plane-normal (vertex  0.0  1.0  0.0)
                     (vertex  1.0 -1.0  -1.0)
                     (vertex -1.0 -1.0  -1.0))
    (glColor3f .5 0.0 0.0)
    (glVertex3f  0.0  .5  0.0)
    (glColor3f 0.0 .5 0.0)
    (glVertex3f  .5 -.5  -.5)
    (glColor3f 0.0 0.0 .5)
    (glVertex3f -.5 -.5  -.5)
    
    (gl-plane-normal (vertex  0.0  1.0  0.0)
                     (vertex -1.0 -1.0 -1.0)
                     (vertex -1.0 -1.0  1.0))
    (glColor3f .5 0.0 0.0)
    (glVertex3f  0.0  .5  0.0)
    (glColor3f 0.0 0.0 .5)
    (glVertex3f -.5 -.5 -.5)
    (glColor3f 0.0 .5 0.0)
    (glVertex3f -.5 -.5  .5)
    (glEnd)
    (glPopMatrix)))


;;;
;;;; Cube
;;;


(class Cube extends Entity
  
  
  (property left-image   initialize #f accessors generate)
  (property right-image  initialize #f accessors generate)
  (property bottom-image initialize #f accessors generate)
  (property top-image    initialize #f accessors generate)
  (property back-image   initialize #f accessors generate)
  (property front-image  initialize #f accessors generate)
  
  
  (method override (prepare rest)
    (nextmethod rest)
    (set-radiuses (vertex .5 .5 .5)))
  
  
  (method override (draw)
    (let ((world (current-world)))
      (glPushMatrix)
      (glTranslatef (get-x) (get-y) (get-z))
      (let ((texture (get-tile-texture~ world)))
        ;; top
        (glNormal3f 0.0 1.0 0.0)
        (textured-quad~ texture
          (lambda () (glVertex3f  .5  .5 -.5))
          (lambda () (glVertex3f -.5  .5 -.5))
          (lambda () (glVertex3f -.5  .5  .5))
          (lambda () (glVertex3f  .5  .5  .5)))
        ;; bottom
        (glNormal3f 0.0 -1.0 0.0)
        (textured-quad~ texture
          (lambda () (glVertex3f  .5 -.5  .5))
          (lambda () (glVertex3f -.5 -.5  .5))
          (lambda () (glVertex3f -.5 -.5 -.5))
          (lambda () (glVertex3f  .5 -.5 -.5)))
        ;; front
        (glNormal3f 0.0 0.0 1.0)
        (textured-quad~ texture
          (lambda () (glVertex3f -.5 -.5  .5))
          (lambda () (glVertex3f  .5 -.5  .5))
          (lambda () (glVertex3f  .5  .5  .5))
          (lambda () (glVertex3f -.5  .5  .5)))
        ;; back
        (glNormal3f 0.0 0.0 -1.0)
        (textured-quad~ texture
          (lambda () (glVertex3f  .5 -.5 -.5))
          (lambda () (glVertex3f -.5 -.5 -.5))
          (lambda () (glVertex3f -.5  .5 -.5))
          (lambda () (glVertex3f  .5  .5 -.5)))
        ;; left
        (glNormal3f -1.0 0.0 0.0)
        (textured-quad~ texture
          (lambda () (glVertex3f -.5  .5  .5))
          (lambda () (glVertex3f -.5  .5 -.5))
          (lambda () (glVertex3f -.5 -.5 -.5))
          (lambda () (glVertex3f -.5 -.5  .5)))
        ;; right
        (glNormal3f 1.0 0.0 0.0)
        (textured-quad~ texture
          (lambda () (glVertex3f  .5  .5 -.5))
          (lambda () (glVertex3f  .5  .5  .5))
          (lambda () (glVertex3f  .5 -.5  .5))
          (lambda () (glVertex3f  .5 -.5 -.5))))
      (glPopMatrix))))


;;;
;;;; Atlas
;;;


(definition public (atlas-texture original name)
  (let ((atlas (new Atlas))
        (file (get-file~ original)))
    (add-file~ atlas file)
    (complete~ atlas)
    (let ((texture (get-texture~ atlas))
          (uv (image-rect~ atlas name)))
      (set-file~ texture file)
      (values texture uv))))


;;;
;;;; Sphere
;;;


(definition sphere-model
  #f)

(definition public (cache-sphere-model)
  (or sphere-model
      (let ((world (current-world)))
        (receive (texture uv) (atlas-texture (find-texture~ world "dirty.png") "dirty")
          (let ((material (new Material texture: texture)))
            (let ((model (new Model name: 'sphere mesh: (generate-sphere-mesh 48 24 uv smooth-normals?: #t material: material))))
              (set! sphere-model model)
              model))))))


(definition public (make-sphere-model name uv (smooth-normals?: smooth-normals? #f) (material: material #f))
  (new Model name: 'sphere mesh: (generate-sphere-mesh 48 24 uv smooth-normals?: smooth-normals? material: material)))


(class Sphere extends Entity
  
  
  (method override (prepare rest)
    (nextmethod rest)
    (set-scale (vertex 1. 1. 1.))
    (set-radiuses (vertex 1. 1. 1.)))
  
  
  (method override (finish rest)
    (nextmethod rest)
    (set! model (cache-sphere-model))
    (update-matrix))
  
  
  (method override (element-radius)
    1.)
  
  
  (method override (inside? r vert)
    (let ((distance (vertex-norm (vertex-& vert center))))
      (<= distance (+ radius r))))))
