;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Object
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2016
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.object jazz


(import (world)
        (world.album)
        (world.atlas)
        (world.autoload)
        (world.block)
        (world.face)
        (world.generate)
        (world.geometry)
        (world.material)
        (world.model)
        (world.shape)
        (world.syntax (phase syntax)))


;;;
;;;; Atlas
;;;


(definition public (atlas-texture original (name #f))
  (let ((file (get-file original)))
    (define (get-album)
      (if (not name)
          (create-album)
        (or (registered-album name)
            (let ((album (create-album)))
              (register-album name album)
              album))))
    
    (define (create-album)
      (let ((atlas (new Atlas)))
        (add-file atlas file)
        (let ((texture (extract-texture atlas)))
          (complete atlas)
          (new Album atlas (list->table (list (cons 'default texture)))))))
  
    (let ((album (get-album)))
      (let ((atlas (get-atlas album))
            (texture (get-texture album 'default)))
        (let ((uv (image-rect atlas (get-base file))))
          (set-file texture file)
          (values atlas texture uv))))))


;;;
;;;; Block
;;;


(definition public (make-block-model faces (class: class #f) (rotation: rotation #f) (bounds: bounds #f) (flat?: flat? #f))
  (let ((world (current-world)))
    (let ((model (new (or class Block-Model))))
      (set-faces model faces)
      (when rotation
        (set-rotation model rotation))
      (set-bounds model (or bounds (determine-bounds model)))
      (set-flat? model flat?)
      model)))


(definition public (transform-block-model model transformation-matrix)
  (let ((model-matrix (get-matrix model)))
    (let ((matrix (if model-matrix
                      (matrix-multiply& transformation-matrix model-matrix)
                    transformation-matrix)))
      (let ((faces (get-faces model))
            (polygons (polygons-extract #f (get-polygons model) matrix))
            (bounds (get-bounds model)))
        (let ((faces
                (map (lambda (face polygon)
                       (make-face (get-material face)
                                  (get-texture-coordinates face)
                                  (get-texture-depth face)
                                  polygon))
                     faces
                     polygons)))
          (make-block-model faces bounds: (copy-cuboid bounds)))))))


;;;
;;;; Sphere
;;;


(definition public (make-sphere-model slices stacks (class: class #f) (name: name #f))
  (let ((world (current-world)))
    (let ((model (new (or class Model) name: (or name 'sphere) faces: '())))
      (set-bounds model (cuboid -1. -1. -1. 1. 1. 1.))
      (when (window?)
        (bind-values (atlas texture uv) (atlas-texture (find-texture world "dirty") 'dirty)
          (let ((material (new Material atlas: atlas texture: texture)))
            (set-meshes model (vector (generate-sphere-mesh slices stacks uv neighbors?: #t smooth-normals?: #t material: material))))))
      model))))
