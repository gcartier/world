;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; World Object
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2013
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.object jazz


(import (jazz.graphic)
        (jazz.graphic.opengl.glew)
        (jazz.io)
        (jazz.jml)
        (jazz.library)
        (jazz.literals)
        (jazz.platform)
        (jazz.platform.cairo)
        (jazz.runtime)
        (jazz.system)
        (jazz.ui)
        (jazz.ui.window)
        (time)
        (world)
        (world.atlas)
        (world.autoload)
        (world.block)
        (world.draw)
        (world.element)
        (world.entity)
        (world.face)
        (world.foreign)
        (world.generate)
        (world.geometry)
        (world.material)
        (world.model)
        (world.opengl)
        (world.shape)
        (world.syntax (phase syntax))
        (world.texture))


;;;
;;;; Atlas
;;;


(definition public (atlas-texture original name)
  (let ((atlas (new Atlas))
        (file (get-file~ original)))
    (add-file~ atlas file)
    (complete~ atlas)
    (let ((texture (get-texture~ atlas))
          (uv (image-rect~ atlas name)))
      (set-file~ texture file)
      (values texture uv))))


;;;
;;;; Block
;;;


(definition public (make-block-model faces (class: class #f) (rotation: rotation #f) (bounds: bounds #f) (flat?: flat? #f))
  (let ((world (current-world)))
    (let ((material (get-block-material~ world)))
      (let ((model (new (or class Block-Model) faces: faces material: material)))
        (when rotation
          (set-rotation~ model rotation))
        (set-bounds~ model (or bounds (determine-bounds~ model)))
        (set-flat?~ model flat?)
        model))))


(definition public (transform-block-model model transformation-matrix)
  (let ((model-matrix (get-matrix~ model)))
    (let ((matrix (if model-matrix
                      (matrix-multiply& transformation-matrix model-matrix)
                    transformation-matrix)))
      (let ((faces (get-faces~ model))
            (polygons (polygons-extract #f (get-polygons~ model) matrix))
            (bounds (get-bounds~ model)))
        (let ((faces
                (map (lambda (face polygon)
                       (make-face (get-texture~ face)
                                  (get-texture-coordinates~ face)
                                  (get-texture-depth~ face)
                                  polygon))
                     faces
                     polygons)))
          (make-block-model faces bounds: (copy-cuboid bounds)))))))


;;;
;;;; Sphere
;;;


(definition public (make-sphere-model slices stacks (class: class #f))
  (let ((world (current-world)))
    (receive (texture uv) (atlas-texture (find-texture~ world "dirty.png") "dirty")
      (let ((material (new Material texture: texture)))
        (let ((model (new (or class Model) name: 'sphere mesh: (generate-sphere-mesh slices stacks uv neighbors?: #t smooth-normals?: #t material: material))))
          (set-bounds~ model (cuboid -1. -1. -1. 1. 1. 1.))
          model))))))
