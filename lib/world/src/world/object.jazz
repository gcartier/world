;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Object
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is WorldScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2014
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See http://github.com/gcartier/world for details.


(module world.object jazz


(import (world)
        (world.atlas)
        (world.autoload)
        (world.block)
        (world.face)
        (world.generate)
        (world.geometry)
        (world.material)
        (world.model)
        (world.shape)
        (world.syntax (phase syntax)))


;;;
;;;; Atlas
;;;


(definition public (atlas-texture original)
  (let ((atlas (new Atlas))
        (file (get-file~ original)))
    (add-file~ atlas file)
    (complete~ atlas)
    (let ((texture (get-texture~ atlas))
          (uv (image-rect~ atlas (get-base~ file))))
      (set-file~ texture file)
      (values atlas texture uv))))


;;;
;;;; Block
;;;


(definition public (make-block-model faces (class: class #f) (rotation: rotation #f) (bounds: bounds #f) (flat?: flat? #f))
  (let ((world (current-world)))
    (let ((model (new (or class Block-Model))))
      (set-faces~ model faces)
      (when rotation
        (set-rotation~ model rotation))
      (set-bounds~ model (or bounds (determine-bounds~ model)))
      (set-flat?~ model flat?)
      model)))


(definition public (transform-block-model model transformation-matrix)
  (let ((model-matrix (get-matrix~ model)))
    (let ((matrix (if model-matrix
                      (matrix-multiply& transformation-matrix model-matrix)
                    transformation-matrix)))
      (let ((faces (get-faces~ model))
            (polygons (polygons-extract #f (get-polygons~ model) matrix))
            (bounds (get-bounds~ model)))
        (let ((faces
                (map (lambda (face polygon)
                       (make-face (get-material~ face)
                                  (get-texture-coordinates~ face)
                                  (get-texture-depth~ face)
                                  polygon))
                     faces
                     polygons)))
          (make-block-model faces bounds: (copy-cuboid bounds)))))))


;;;
;;;; Sphere
;;;


(definition public (make-sphere-model slices stacks (class: class #f) (name: name #f))
  (let ((world (current-world)))
    (receive (atlas texture uv) (atlas-texture (find-texture~ world "dirty"))
      (let ((material (new Material atlas: atlas texture: texture)))
        (let ((model (new (or class Model) name: (or name 'sphere) meshes: (vector (generate-sphere-mesh slices stacks uv neighbors?: #t smooth-normals?: #t material: material)))))
          (set-bounds~ model (cuboid -1. -1. -1. 1. 1. 1.))
          model))))))
