;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; World Object
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2013
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.object jazz


(import (jazz.graphic)
        (jazz.graphic.opengl.glew)
        (jazz.io)
        (jazz.jml)
        (jazz.library)
        (jazz.literals)
        (jazz.platform)
        (jazz.platform.cairo)
        (jazz.runtime)
        (jazz.system)
        (jazz.ui)
        (jazz.ui.window)
        (time)
        (world)
        (world.atlas)
        (world.autoload)
        (world.draw)
        (world.element)
        (world.entity)
        (world.foreign)
        (world.generate)
        (world.geometry)
        (world.material)
        (world.model)
        (world.opengl)
        (world.shape)
        (world.syntax (phase syntax))
        (world.texture))


;;;
;;;; Atlas
;;;


(definition public (atlas-texture original name)
  (let ((atlas (new Atlas))
        (file (get-file~ original)))
    (add-file~ atlas file)
    (complete~ atlas)
    (let ((texture (get-texture~ atlas))
          (uv (image-rect~ atlas name)))
      (set-file~ texture file)
      (values texture uv))))


;;;
;;;; Sphere
;;;


(definition sphere-model
  #f)

(definition public (cache-sphere-model)
  (or sphere-model
      (let ((world (current-world)))
        (receive (texture uv) (atlas-texture (find-texture~ world "dirty.png") "dirty")
          (let ((material (new Material texture: texture)))
            (let ((model (new Model name: 'sphere mesh: (generate-sphere-mesh 48 24 uv neighbors?: #t smooth-normals?: #t material: material))))
              (set-bounds~ model (cuboid -1. -1. -1. 1. 1. 1.))
              (set-center~ model (vertex 0. 0. 0.))
              (set! sphere-model model)
              model))))))


(class Sphere extends Entity
  
  
  (method override (prepare rest)
    (nextmethod rest)
    (set-scale (vertex .5 .5 .5))
    (set-radiuses (vertex .5 .5 .5)))
  
  
  (method override (finish rest)
    (nextmethod rest)
    (set! model (cache-sphere-model))
    (update-matrix))
  
  
  (method override (element-radius)
    .5)
  
  
  (method override (inside? r vert)
    (let ((distance (vertex-norm (vertex-& vert center))))
      (<= distance (+ radius r))))))
