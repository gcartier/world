;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World UDP Throttle
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;    Barbara Samson


(module world.throttle jazz


(import (world.profile)
        (world.udp))


(definition package noack-heartbeats
  3.)


(definition max-drop-rate 5.)
(definition increment .01)
(definition decrement .01)
(definition increase-time 2.)


(class UDP-Throttle extends Object
  
  
  (slot mutex                          getter generate)
  (slot last-sequence    initialize #f getter generate)
  (slot last-gap-time    initialize #f getter generate)
  (slot next-increase    initialize #f getter generate)
  (slot multiplier       initialize 1. getter generate)
  (slot download-starved initialize #f getter generate)
  
  
  (method override (initialize self)
    (set! mutex (make-mutex 'throttle)))
  
  
  (method (with-mutex self thunk)
    (mutex-lock! mutex)
    (prog1 (thunk)
      (mutex-unlock! mutex)))
  
  
  (method protected (reset self)
    (with-mutex self
      (lambda ()
        (set! last-sequence    #f)
        (set! last-gap-time    #f)
        (set! next-increase    #f)
        (set! multiplier       1.)
        (set! download-starved #f))))
  
  
  (method public (effective-rate self min-rate rate)
    (+ min-rate (* multiplier (- rate min-rate))))
  
  
  (method public (calculate-decrement self last-drop-rate)
    (let ((abs-rate-diff (abs (- last-drop-rate max-drop-rate))))
      (* abs-rate-diff decrement)))
  
  
  (method public (noack-received self statistics adjust)
    (with-mutex self
      (lambda ()
        (let ((now (current-seconds))
              (last-drop-rate (get-last-missed-rate statistics)))
          (let ((dec (calculate-decrement self last-drop-rate)))
            (let ((adjustment (- (* multiplier dec))))
              (set! multiplier (+ multiplier adjustment))
              (set! last-gap-time now)
              (set! next-increase increase-time)
              (adjust adjustment udp-throttle-noack)))))))
  
  
  (method public (received-ack self sent sequence statistics adjust change)
    (with-mutex self
      (lambda ()
        ;; upload
        (when last-sequence
          (let ((now (current-seconds))
                (expected (+ last-sequence 1))
                (last-drop-rate (get-last-missed-rate statistics)))
            (let ((gap (- sequence expected)))
              (cond ((> gap 0)
                     (let ((dec (calculate-decrement self last-drop-rate)))
                       (let ((adjustment (- (* multiplier dec))))
                         (set! multiplier (+ multiplier adjustment))
                         (set! last-gap-time now)
                         (set! next-increase increase-time)
                         (adjust adjustment udp-throttle-gap))))
                    (else
                     (when last-gap-time
                       (let ((elapsed (- now last-gap-time)))
                         (when (and (< last-drop-rate max-drop-rate) (> elapsed next-increase))
                           (let ((inc (* increment (- max-drop-rate last-drop-rate))))
                             (let ((new-multiplier (+ multiplier inc)))
                               (cond ((< new-multiplier 1.)
                                      (set! multiplier new-multiplier)
                                      (set! last-gap-time now))
                                     (else
                                      (set! multiplier 1.)
                                      (set! last-gap-time #f)
                                      (set! next-increase #f)))
                               (let ((adjustment (- new-multiplier multiplier)))
                                 (adjust adjustment udp-throttle-restore))))))))))))
        (set! last-sequence sequence)
        ;; download
        (let ((download-drop (get-download-drop statistics)))
          (when download-drop
            (if (< download-drop 5.)
                (set! download-starved #f)
              (let ((now (current-seconds)))
                (if (not download-starved)
                    (set! download-starved now)
                  (let ((elapsed (- now download-starved)))
                    (when (> elapsed 5.)
                      (let ((profile (case user-base-profile
                                       ((full) 'high)
                                       ((high) 'standard)
                                       ((standard) 'medium)
                                       ((medium) 'low)
                                       ((low) #f))))
                        (when profile
                          (change profile)))
                      (set! download-starved #f)
                      (reset-download-drop statistics)))))))))))))
