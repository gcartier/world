;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World UDP Throttle
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;    Barbara Samson


(module world.throttle jazz


(import (world.udp))


(class UDP-Throttle extends Object
  
  
  (slot mutex                        getter generate)
  (slot last-sequence  initialize #f getter generate)
  (slot last-gap-time  initialize #f getter generate)
  (slot next-increase  initialize #f getter generate)
  (slot multiplier     initialize 1. getter generate)
  (slot max-drop-rate  initialize 5. getter generate)
  (slot last-drop-rate initialize 0. getter generate)
  
  
  (method override (initialize self)
    (set! mutex (make-mutex 'throttle)))
  
  
  (method (with-mutex self thunk)
    (mutex-lock! mutex)
    (prog1 (thunk)
      (mutex-unlock! mutex)))
  
  
  (method public (effective-rate self rate)
    (* rate multiplier))
  
  
  (method public (calculate-decrement self)
    (let ((abs-rate-diff (abs (- last-drop-rate max-drop-rate))))
      (* abs-rate-diff .01)))
  
  
  (method public (noack-received self adjust)
    (with-mutex self
      (lambda ()
        (let ((now (current-seconds))
              (dec (calculate-decrement self)))
          (let ((adjustment (- (* multiplier dec))))
            (set! multiplier (+ multiplier adjustment))
            (set! last-gap-time now)
            (set! next-increase 1.)
            (adjust adjustment udp-throttle-noack))))))
  
  
  (method public (received-ack self sent sequence statistics adjust)
    (with-mutex self
      (lambda ()
        (set! last-drop-rate (get-last-missed-rate statistics))
        (when last-sequence
          (let ((now (current-seconds))
                (expected (+ last-sequence 1)))
            (let ((gap (- sequence expected))
                  (drop-rate (get-last-missed-rate statistics)))
              (cond ((> gap 0)
                     (let ((dec (calculate-decrement self)))
                       (let ((adjustment (- (* multiplier dec))))
                         (set! multiplier (+ multiplier adjustment))
                         (set! last-gap-time now)
                         (set! next-increase 1.)
                         (adjust adjustment udp-throttle-gap))))
                    (else
                     (when last-gap-time
                       (let ((elapsed (- now last-gap-time)))
                         (when (and (< drop-rate max-drop-rate) (> elapsed next-increase))
                           (let ((inc (* .1 (- max-drop-rate drop-rate))))
                             (let ((new-multiplier (+ multiplier inc)))
                               (cond ((< new-multiplier 1.)
                                      (set! multiplier new-multiplier)
                                      (set! last-gap-time now))
                                     (else
                                      (set! multiplier 1.)
                                      (set! last-gap-time #f)
                                      (set! next-increase #f)))
                               (let ((adjustment (- new-multiplier multiplier)))
                                 (adjust adjustment udp-throttle-restore))))))))))))
        (set! last-sequence sequence))))))
