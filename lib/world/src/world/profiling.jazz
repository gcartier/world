;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; World Profiling
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2013
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.profiling jazz


(import (profiler)
        (time)
        (world))


;;;
;;;; Site
;;;


(definition public (iterate-sites proc)
  (iterate-table (registered-sites)
    (lambda (name site)
      (proc (symbol->enumerator name)))))


;;;
;;;; Profile
;;;


(definition public (advise-profile what)
  (let ((name (enumerator->symbol what)))
    (advise what
            (lambda (field locator original set)
              (let ((original (original)))
                (when (procedure? original)
                  (set (lambda rest
                         (with-profile name
                           (lambda ()
                             (apply original rest)))))))))))


;;;
;;;; Site
;;;


(proclaim (warn optimizations))

(declare (optimize-dead-local-variables))


(definition inline (make-site-profile) <f64vector>
  (f64vector (current-seconds) 0. 0. 0.))


(definition protected inline (site-profile-started profile <f64vector>) <fl>
  (f64vector-ref profile 0))

(definition protected inline (site-profile-elapsed profile <f64vector>) <fl>
  (f64vector-ref profile 1))

(definition protected inline (site-profile-allocated profile <f64vector>) <fl>
  (f64vector-ref profile 2))

(definition protected inline (site-profile-called profile <f64vector>) <fl>
  (f64vector-ref profile 3))


(definition inline (site-profile-started-set! profile <f64vector> started <fl>) <void>
  (f64vector-set! profile 0 started))

(definition inline (site-profile-elapsed-set! profile <f64vector> elapsed <fl>) <void>
  (f64vector-set! profile 1 elapsed))

(definition inline (site-profile-allocated-set! profile <f64vector> allocated <fl>) <void>
  (f64vector-set! profile 2 allocated))

(definition inline (site-profile-called-set! profile <f64vector> called <fl>) <void>
  (f64vector-set! profile 3 called))


(definition public (advise-sites)
  (iterate-sites advise-site))

(definition public (unadvise-sites)
  (iterate-sites unadvise))


(definition public (advise-site what)
  (let ((name (enumerator->symbol what)))
    (let ((site (registered-site name)))
      (set-profile~ site (make-site-profile)))
    (advise what
            (lambda (field locator original set)
              (let ((original (original)))
                (when (procedure? original)
                  (set (lambda (site thunk)
                         ;; pass original and thunk as parameters instead of
                         ;; using a closure that would allocate some memory
                         (with-site name site original thunk)))))))))


(definition public with-site
  (let ((before-top 0)
        (before-stack (make-f64vector 1024))
        (before-seconds (make-f64vector 1))
        (before-bytes (make-f64vector 1))
        (after-seconds (make-f64vector 1))
        (after-bytes (make-f64vector 1)))
    (lambda (name site <Call-Site> procedure thunk)
      (let ((profile (get-profile~ site)))
        (current-seconds! before-seconds)
        (f64vector-set! before-stack before-top (f64vector-ref before-seconds 0))
        (increase! before-top)
        (bytes-allocated! before-bytes)
        (f64vector-set! before-stack before-top (f64vector-ref before-bytes 0))
        (increase! before-top)
        (prog1 (procedure site thunk)
          (decrease! before-top)
          (f64vector-set! before-bytes 0 (f64vector-ref before-stack before-top))
          (decrease! before-top)
          (f64vector-set! before-seconds 0 (f64vector-ref before-stack before-top))
          (current-seconds! after-seconds)
          (let ((elapsed (- (f64vector-ref after-seconds 0) (f64vector-ref before-seconds 0))))
            (site-profile-elapsed-set! profile (+ (site-profile-elapsed profile) elapsed)))
          (bytes-allocated! after-bytes)
          (let ((allocated (- (f64vector-ref after-bytes 0) (f64vector-ref before-bytes 0))))
            (site-profile-allocated-set! profile (+ (site-profile-allocated profile) allocated)))
          (site-profile-called-set! profile (+ (site-profile-called profile) 1.)))))))


(proclaim (not warn optimizations))


(definition public (reset-sites)
  (iterate-table (registered-sites)
    (lambda (name site)
      (let ((profile (get-profile~ site)))
        (if (not profile)
            (set-profile~ site (make-site-profile))
          (site-profile-started-set! profile (current-seconds))
          (site-profile-elapsed-set! profile 0.)
          (site-profile-allocated-set! profile 0.)
          (site-profile-called-set! profile 0.))))))


(definition public (sites-tree)
  (let ((root (list #f))
        (nodes (make-table test: eq?)))
    (define (site-node site)
      (or (table-ref nodes site #f)
          (let ((node (list site)))
            (table-set! nodes site node)
            (let ((parent (get-parent~ site)))
              (if (not parent)
                  (set-cdr! root (cons node (cdr root)))
                (let ((parent-node (site-node (registered-site parent))))
                  (set-cdr! parent-node (cons node (cdr parent-node))))))
            node)))
    
    (iterate-table (registered-sites)
      (lambda (name site)
        (site-node site)))
    root))


(definition public (describe-sites)
  (let ((root (sites-tree)))
    (define (describe nodes level)
      (for-each (lambda (node)
                  (let ((site (car node))
                        (children (cdr node)))
                    (format :console "{%}{_ :v}{a}" (* level 2) (get-name~ site))
                    (describe children (+ level 1))))
                (sort nu<? nodes key: (lambda (node) (get-name~ (car node))))))
    
    (describe (cdr root) 0)))


(definition public (report-sites)
  (define (present-memory started allocated called)
    (let ((average (fxround (/ allocated called 1024.)))
          (rate (fxround (/ allocated (- (current-seconds) started) 1024. 1024.))))
      (format ", {a}k, {a}m"
              average
              rate)))
  
  (let ((root (sites-tree)))
    (define (report nodes level)
      (for-each (lambda (node)
                  (let ((site (car node))
                        (children (cdr node)))
                    (let ((name (get-name~ site))
                          (profile (get-profile~ site)))
                      (when profile
                        (let ((started (site-profile-started profile))
                              (allocated (site-profile-allocated profile))
                              (called (site-profile-called profile)))
                          (when (> called 0.)
                            (format :console "{_ :v}{a}{a}{%}" (* level 2) name (present-memory started allocated called))))
                        (report children (+ level 1))))))
                (sort nu<? nodes key: (lambda (node) (get-name~ (car node))))))
    
    (report (cdr root) 0))))
