;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Profiling
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.profiling jazz


(import (jazz.tracker)
        (profiler)
        (world))


(proclaim (not check bounds zero)
          (warn optimizations))

(declare (optimize-dead-local-variables))


(definition protected current-advise
  #f)


(definition public (setup-profiling)
  (iterate-table (registered-sites)
    (lambda (identifier site)
      (setup-site site)))
  (set-site-callback
    (lambda (site)
      (setup-site site)
      (when current-advise
        (current-advise site)))))


;;;
;;;; Profile
;;;


(definition public (advise-profile what)
  (let ((identifier (enumerator->symbol what)))
    (advise what
            (lambda (field locator original set)
              (let ((original (original)))
                (when (procedure? original)
                  (set (lambda rest
                         (with-profile identifier
                           (lambda ()
                             (apply original rest)))))))))))


;;;
;;;; Chronology
;;;


(definition sample-size <fx>
  4)


(definition next-chronology-marker <fx>
  0)

(definition protected (next-chronology-marker!) <fx>
  (prog1 next-chronology-marker
    (increase! next-chronology-marker 2)))


(class Chronology-Class extends Class
  
  
  (method override (marshall-object self object)
    (serialize-object (class-of object)
                      (vector (serialize (get-size object))
                              (serialize (get-content-size object))
                              (serialize (get-content object))
                              (serialize (get-now object))
                              (serialize (get-head object))
                              (serialize (get-count object)))))
  
  
  (method override (unmarshall-object self content)
    (bind-vector (size content-size content now head count) content
      (allocate self
                (deserialize size)
                (deserialize content-size)
                (deserialize content)
                (deserialize now)
                (deserialize head)
                (deserialize count)))))


(class Chronology metaclass Chronology-Class extends Object
  
  
  (slot size         <fx>        getter generate)
  (slot content-size <fx>        getter generate)
  (slot content      <f64vector> getter generate)
  (slot now          <fx>        accessors generate)
  (slot head         <fx>        accessors generate)
  (slot count        <fx>        accessors generate)
  
  
  (method override (initialize self size <fx>)
    (nextmethod self)
    (set! self.size size)
    (set! content-size (* size sample-size))
    (set! content (make-f64vector content-size))
    (set! now 0)
    (set! head 0)
    (set! count 0))

  
  (method package inline (start-position self) <fx>
    0)
  
  
  (method package inline (end-position self) <fx>
    count)
  
  
  (method package inline (first-position self) <fx>
    0)
  
  
  (method package inline (last-position self) <fx>
    (- (end-position self) 1))
  
  
  (method package inline (index self n <fx>) <fx>
    (modulo (+ head (* n sample-size)) content-size))
  
  
  (method package inline (index-now self) <fx>
    (index self now))
  
  
  (method package (chronological-id self n <fx>) <fl>
    (f64vector-ref content (index self n)))
  
  (method package (chronological-marker self n <fx>) <fl>
    (f64vector-ref content (+ (index self n) 1)))
  
  (method package (chronological-time self n <fx>) <fl>
    (f64vector-ref content (+ (index self n) 2)))
  
  (method package (chronological-memory self n <fx>) <fl>
    (f64vector-ref content (+ (index self n) 3)))
  
  
  (method package inline (advance! self)
    (if (< count size)
        (begin
          (increase! count)
          (increase! now))
      (set! head (modulo (+ head sample-size) content-size)))))


;; about one minute of recorded chronology
(definition protected chronology <Chronology>
  (new Chronology 90000))


(definition public (current-chronology) <Chronology>
  chronology)


(definition protected (copy-chronology chronology <Chronology>) <Chronology>
  (let ((copy (new Chronology (get-size chronology))))
    (subf64vector-move! (get-content chronology) 0 (get-content-size chronology) (get-content copy) 0)
    (set-now copy (get-now chronology))
    (set-head copy (get-head chronology))
    (set-count copy (get-count chronology))
    copy))


;;;
;;;; Site
;;;


(definition inline (make-site-profile) <f64vector>
  (f64vector (current-seconds) -1. 0. 0. 0.))


(definition protected inline (site-profile-started profile <f64vector>) <fl>
  (f64vector-ref profile 0))

(definition protected inline (site-profile-elapsed profile <f64vector>) <fl>
  (f64vector-ref profile 1))

(definition protected inline (site-profile-running profile <f64vector>) <fl>
  (f64vector-ref profile 2))

(definition protected inline (site-profile-allocated profile <f64vector>) <fl>
  (f64vector-ref profile 3))

(definition protected inline (site-profile-called profile <f64vector>) <fl>
  (f64vector-ref profile 4))


(definition protected inline (site-profile-started-set! profile <f64vector> started <fl>) <void>
  (f64vector-set! profile 0 started))

(definition protected inline (site-profile-elapsed-set! profile <f64vector> elapsed <fl>) <void>
  (f64vector-set! profile 1 elapsed))

(definition protected inline (site-profile-running-set! profile <f64vector> running <fl>) <void>
  (f64vector-set! profile 2 running))

(definition protected inline (site-profile-allocated-set! profile <f64vector> allocated <fl>) <void>
  (f64vector-set! profile 3 allocated))

(definition protected inline (site-profile-called-set! profile <f64vector> called <fl>) <void>
  (f64vector-set! profile 4 called))


(definition protected (site-profile-reset profile <f64vector>) <void>
  (site-profile-started-set! profile (current-seconds))
  (site-profile-elapsed-set! profile -1.)
  (site-profile-running-set! profile 0.)
  (site-profile-allocated-set! profile 0.)
  (site-profile-called-set! profile 0.))


(definition protected (active-site identifier)
  (when current-advise
    (let ((profile (get-profile (registered-site identifier))))
      (site-profile-started-set! profile (current-seconds)))))


(definition protected (inactive-site identifier)
  (when current-advise
    (let ((profile (get-profile (registered-site identifier))))
      (let ((end (current-seconds)))
        (let ((duration (- end (site-profile-started profile)))
              (actual (site-profile-elapsed profile)))
          (site-profile-elapsed-set! profile (if (= actual -1.) duration (+ actual duration))))))))


(definition protected (active-sites)
  (iterate-table (registered-sites)
    (lambda (identifier site)
      (active-site identifier))))


(definition protected (inactive-sites)
  (iterate-table (registered-sites)
    (lambda (identifier site)
      (inactive-site identifier))))


(definition protected (site-profile-effective-elapsed profile <f64vector>) <fl>
  (let ((elapsed (site-profile-elapsed profile)))
    (if (/= elapsed -1.)
        elapsed
      (- (current-seconds) (site-profile-started profile)))))


(definition public (iterate-sites proc)
  (iterate-table-safe (registered-sites)
    (lambda (identifier site)
      (proc (symbol->enumerator identifier)))))


(definition public (advise-sites)
  (iterate-sites advise-site)
  (set! current-advise (lambda (site <Call-Site>)
                         (let ((identifier (get-identifier site)))
                           (let ((what (symbol->enumerator identifier)))
                             (advise-site what))))))

(definition public (unadvise-sites)
  (iterate-sites unadvise)
  (set! current-advise #f))


(definition (setup-site site <Call-Site>)
  (set-profile site (make-site-profile)))


(definition public (advise-site what)
  (let ((identifier (enumerator->symbol what)))
    (advise what
            (lambda (field locator original set)
              (let ((original (original)))
                (when (procedure? original)
                  (set (lambda (site thunk)
                         ;; pass original and thunk as parameters instead of
                         ;; using a closure that would allocate some memory
                         (with-site identifier site original thunk)))))))))


(definition public with-site
  (let ((before-top 0)
        (before-stack (make-f64vector 1024))
        (before-seconds (f64vector 0.))
        (before-bytes (f64vector 0.))
        (after-seconds (f64vector 0.))
        (after-bytes (f64vector 0.)))
    (lambda (identifier site <Call-Site> procedure thunk)
      (declare (proper-tail-calls))
      (declare (optimize-dead-local-variables))
      (declare (inline))
      (declare (inlining-limit 1000))
      (let ((profile (get-profile site))
            (content (get-content chronology))
            (id <fx> (get-id site))
            (marker (next-chronology-marker!)))
        (let ((index (index-now chronology)))
          (f64vector-set! content index (cast <fl> id))
          (f64vector-set! content (+ index 1) (cast <fl> marker))
          (current-seconds! before-stack before-top)
          (f64vector-set! content (+ index 2) (f64vector-ref before-stack before-top))
          (increase! before-top)
          (bytes-allocated! before-stack before-top)
          (f64vector-set! content (+ index 3) (f64vector-ref before-stack before-top))
          (increase! before-top)
          (advance! chronology))
        (prog1 (case (get-monitor site)
                 ((performance)
                  (with-profile identifier thunk))
                 ((memory)
                  (with-tracking identifier thunk))
                 (else
                  (procedure site thunk)))
          (decrease! before-top)
          (f64vector-set! before-bytes 0 (f64vector-ref before-stack before-top))
          (decrease! before-top)
          (f64vector-set! before-seconds 0 (f64vector-ref before-stack before-top))
          (current-seconds! after-seconds 0)
          (let ((running (- (f64vector-ref after-seconds 0) (f64vector-ref before-seconds 0))))
            (site-profile-running-set! profile (+ (site-profile-running profile) running)))
          (bytes-allocated! after-bytes 0)
          (let ((allocated (- (f64vector-ref after-bytes 0) (f64vector-ref before-bytes 0))))
            (site-profile-allocated-set! profile (+ (site-profile-allocated profile) allocated)))
          (site-profile-called-set! profile (+ (site-profile-called profile) 1.))
          (let ((index (index-now chronology)))
            (f64vector-set! content index (cast <fl> id))
            (f64vector-set! content (+ index 1) (cast <fl> (+ marker 1)))
            (f64vector-set! content (+ index 2) (f64vector-ref after-seconds 0))
            (f64vector-set! content (+ index 3) (f64vector-ref after-bytes 0))
            (advance! chronology)))))))


(proclaim (not warn optimizations))


(definition public (reset-sites)
  (iterate-table (registered-sites)
    (lambda (identifier site)
      (site-profile-reset (get-profile site)))))


(definition debug-bug?
  #f)


(definition public (root-sites)
  (let ((queue (new-queue)))
    (iterate-table (registered-sites)
      (lambda (name site)
        (when (not (get-parent site))
          (enqueue queue site))))
    (queue-list queue)))


(definition public (sites-tree)
  (let ((root (list #f))
        (nodes (make-table test: eq?)))
    (define (site-node site)
      (or (table-ref nodes site #f)
          (let ((node (list site)))
            (table-set! nodes site node)
            (let ((parent (get-parent site)))
              (let ((parent-node (if (not parent)
                                     root
                                   (site-node (registered-site parent)))))
                (set-cdr! parent-node (insert-ordered! node (cdr parent-node)
                                        key: (lambda (node) (get-identifier (car node)))
                                        test: (lambda (x y)
                                                ;; quicky to put memory at the top
                                                (cond ((eq? x 'memory) #t)
                                                      ((eq? y 'memory) #f)
                                                      (else (nu<? x y))))))))
            node)))
    
    (iterate-table-safe (registered-sites)
      (lambda (identifier site)
        (site-node site)))
    root))


@wait
(definition public (sites-tree)
  (when debug-bug?
  (terminal '********))
  (let ((root (list #f))
        (nodes (make-table test: eq?)))
    (define (site-node site)
      (or (table-ref nodes site #f)
          (let ((node (list site)))
            (table-set! nodes site node)
            (let ((parent (get-parent site)))
              (let ((parent-node (if (not parent)
                                     root
                                   (site-node (registered-site parent)))))
                (set-cdr! parent-node (insert-ordered! node (cdr parent-node)
                                        key: (lambda (node) (get-identifier (car node)))
                                        test: (lambda (x y)
                                                ;; quicky to put memory at the top
                                                (cond ((eq? x 'memory) #t)
                                                      ((eq? y 'memory) #f)
                                                      (else (nu<? x y))))))))
            node)))
    
    (iterate-table-safe (registered-sites)
      (lambda (identifier site)
        (when debug-bug?
        (when (eq? identifier 'read-chunk)
          (terminal 'GAZ)))
        (site-node site)))
    (when debug-bug?
    (let ()
      (continuation-capture
        (lambda (return)
          (define (p node)
            (if (and (car node) (eq? (get-identifier (car node)) 'read-chunk))
                (continuation-return return #f)
              (for-each p (cdr node))))
          
          (p root)
          (bell)(bell)(bell)
          (terminal 'NOT-FOUND (registered-site 'read-chunk))))))
    root))


(definition public (describe-sites)
  (let ((root (sites-tree)))
    (define (describe nodes level)
      (for-each (lambda (node)
                  (let ((site (car node))
                        (children (cdr node)))
                    (let ((profile (get-profile site)))
                      (let ((called (site-profile-called profile)))
                        (format :console "{_ :v}{a} {a}{%}" (* level 2) (get-name site) called)))
                    (describe children (+ level 1))))
                nodes))
    
    (describe (cdr root) 0)))


(definition public (report-sites)
  (define (present-memory elapsed allocated called)
    (let ((average (fxround (/ allocated called 1024.)))
          (rate (fxround (/ allocated elapsed 1024. 1024.))))
      (format " {a}, {a}k, {a}m"
              (fxround called)
              average
              rate)))
  
  (let ((root (sites-tree)))
    (define (report nodes level)
      (for-each (lambda (node)
                  (let ((site (car node))
                        (children (cdr node)))
                    (let ((name (get-name site))
                          (profile (get-profile site)))
                      (let ((elapsed (site-profile-effective-elapsed profile))
                            (allocated (site-profile-allocated profile))
                            (called (site-profile-called profile)))
                        (when (> called 0.)
                          (format :console "{_ :v}{a}{a}{%}" (* level 2) name (present-memory elapsed allocated called)))))
                    (report children (+ level 1))))
                nodes))
    
    (report (cdr root) 0))))
