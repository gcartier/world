;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; World Profiling
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2013
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.profiling jazz


(import (profiler)
        (time)
        (world))


(definition protected current-advise
  #f)


(definition public (setup-profiling)
  (iterate-table (registered-sites)
    (lambda (name site)
      (setup-site site)))
  (set-site-callback
    (lambda (site)
      (setup-site site)
      (when current-advise
        (current-advise site)))))


;;;
;;;; Profile
;;;


(definition public (advise-profile what)
  (let ((name (enumerator->symbol what)))
    (advise what
            (lambda (field locator original set)
              (let ((original (original)))
                (when (procedure? original)
                  (set (lambda rest
                         (with-profile name
                           (lambda ()
                             (apply original rest)))))))))))


;;;
;;;; Site
;;;


(proclaim (warn optimizations))

(declare (optimize-dead-local-variables))


(definition inline (make-site-profile) <f64vector>
  (f64vector (current-seconds) -1. 0. 0. 0.))


(definition protected inline (site-profile-started profile <f64vector>) <fl>
  (f64vector-ref profile 0))

(definition protected inline (site-profile-elapsed profile <f64vector>) <fl>
  (f64vector-ref profile 1))

(definition protected inline (site-profile-running profile <f64vector>) <fl>
  (f64vector-ref profile 2))

(definition protected inline (site-profile-allocated profile <f64vector>) <fl>
  (f64vector-ref profile 3))

(definition protected inline (site-profile-called profile <f64vector>) <fl>
  (f64vector-ref profile 4))


(definition protected inline (site-profile-started-set! profile <f64vector> started <fl>) <void>
  (f64vector-set! profile 0 started))

(definition protected inline (site-profile-elapsed-set! profile <f64vector> elapsed <fl>) <void>
  (f64vector-set! profile 1 elapsed))

(definition protected inline (site-profile-running-set! profile <f64vector> running <fl>) <void>
  (f64vector-set! profile 2 running))

(definition protected inline (site-profile-allocated-set! profile <f64vector> allocated <fl>) <void>
  (f64vector-set! profile 3 allocated))

(definition protected inline (site-profile-called-set! profile <f64vector> called <fl>) <void>
  (f64vector-set! profile 4 called))


(definition protected (site-profile-reset profile <f64vector>) <void>
  (site-profile-started-set! profile (current-seconds))
  (site-profile-elapsed-set! profile -1.)
  (site-profile-running-set! profile 0.)
  (site-profile-allocated-set! profile 0.)
  (site-profile-called-set! profile 0.))


(definition protected (active-site name)
  (when current-advise
    (let ((profile (get-profile~ (registered-site name))))
      (site-profile-started-set! profile (current-seconds)))))


(definition protected (inactive-site name)
  (when current-advise
    (let ((profile (get-profile~ (registered-site name))))
      (let ((end (current-seconds)))
        (let ((duration (- end (site-profile-started profile)))
              (actual (site-profile-elapsed profile)))
          (site-profile-elapsed-set! profile (if (= actual -1.) duration (+ actual duration))))))))


(definition protected (site-profile-effective-elapsed profile <f64vector>) <fl>
  (let ((elapsed (site-profile-elapsed profile)))
    (if (/= elapsed -1.)
        elapsed
      (- (current-seconds) (site-profile-started profile)))))


(definition public (iterate-sites proc)
  (iterate-table (registered-sites)
    (lambda (name site)
      (proc (symbol->enumerator name)))))


(definition public (advise-sites)
  (iterate-sites advise-site)
  (set! current-advise (lambda (site <Call-Site>)
                         (let ((name (get-name~ site)))
                           (let ((what (symbol->enumerator name)))
                             (advise-site what))))))

(definition public (unadvise-sites)
  (iterate-sites unadvise)
  (set! current-advise #f))


(definition (setup-site site <Call-Site>)
  (set-profile~ site (make-site-profile)))


(definition public (advise-site what)
  (let ((name (enumerator->symbol what)))
    (advise what
            (lambda (field locator original set)
              (let ((original (original)))
                (when (procedure? original)
                  (set (lambda (site thunk)
                         ;; pass original and thunk as parameters instead of
                         ;; using a closure that would allocate some memory
                         (with-site name site original thunk)))))))))


;; good idea to make the profile display more what is happening at the
;; moment but as it is, it often resets before having been displayed...
(definition public with-site
  (let ((before-top 0)
        (before-stack (make-f64vector 1024))
        (before-seconds (make-f64vector 1))
        (before-bytes (make-f64vector 1))
        (after-seconds (make-f64vector 1))
        (after-bytes (make-f64vector 1)))
    (lambda (name site <Call-Site> procedure thunk)
      (let ((profile (get-profile~ site)))
        (current-seconds! before-stack before-top)
        (increase! before-top)
        (bytes-allocated! before-stack before-top)
        (increase! before-top)
        (prog1 (procedure site thunk)
          (decrease! before-top)
          (f64vector-set! before-bytes 0 (f64vector-ref before-stack before-top))
          (decrease! before-top)
          (f64vector-set! before-seconds 0 (f64vector-ref before-stack before-top))
          (current-seconds! after-seconds 0)
          (let ((running (- (f64vector-ref after-seconds 0) (f64vector-ref before-seconds 0))))
            (site-profile-running-set! profile (+ (site-profile-running profile) running)))
          (bytes-allocated! after-bytes 0)
          (let ((allocated (- (f64vector-ref after-bytes 0) (f64vector-ref before-bytes 0))))
            (site-profile-allocated-set! profile (+ (site-profile-allocated profile) allocated)))
          (site-profile-called-set! profile (+ (site-profile-called profile) 1.)))))))


(proclaim (not warn optimizations))


(definition public (reset-sites)
  (iterate-table (registered-sites)
    (lambda (name site)
      (site-profile-reset (get-profile~ site)))))


(definition debug-bug?
  #f)


(definition public (sites-tree)
  (let ((root (list #f))
        (nodes (make-table test: eq?)))
    (define (site-node site)
      (or (table-ref nodes site #f)
          (let ((node (list site)))
            (table-set! nodes site node)
            (let ((parent (get-parent~ site)))
              (let ((parent-node (if (not parent)
                                     root
                                   (site-node (registered-site parent)))))
                (set-cdr! parent-node (insert-ordered! node (cdr parent-node)
                                        key: (lambda (node) (get-name~ (car node)))
                                        test: (lambda (x y)
                                                ;; quicky to put memory at the top
                                                (cond ((eq? x 'memory) #t)
                                                      ((eq? y 'memory) #f)
                                                      (else (nu<? x y))))))))
            node)))
    
    (iterate-table-safe (registered-sites)
      (lambda (name site)
        (site-node site)))
    root))


@wait
(definition public (sites-tree)
  (when debug-bug?
  (terminal '********))
  (let ((root (list #f))
        (nodes (make-table test: eq?)))
    (define (site-node site)
      (or (table-ref nodes site #f)
          (let ((node (list site)))
            (table-set! nodes site node)
            (let ((parent (get-parent~ site)))
              (let ((parent-node (if (not parent)
                                     root
                                   (site-node (registered-site parent)))))
                (set-cdr! parent-node (insert-ordered! node (cdr parent-node)
                                        key: (lambda (node) (get-name~ (car node)))
                                        test: (lambda (x y)
                                                ;; quicky to put memory at the top
                                                (cond ((eq? x 'memory) #t)
                                                      ((eq? y 'memory) #f)
                                                      (else (nu<? x y))))))))
            node)))
    
    (iterate-table-safe (registered-sites)
      (lambda (name site)
        (when debug-bug?
        (when (eq? name 'read-chunk)
          (terminal 'GAZ)))
        (site-node site)))
    (when debug-bug?
    (let ()
      (continuation-capture
        (lambda (return)
          (define (p node)
            (if (and (car node) (eq? (get-name~ (car node)) 'read-chunk))
                (continuation-return return #f)
              (for-each p (cdr node))))
          
          (p root)
          (bell)(bell)(bell)
          (terminal 'NOT-FOUND (registered-site 'read-chunk))))))
    root))


(definition public (describe-sites)
  (let ((root (sites-tree)))
    (define (describe nodes level)
      (for-each (lambda (node)
                  (let ((site (car node))
                        (children (cdr node)))
                    (let ((profile (get-profile~ site)))
                      (let ((called (site-profile-called profile)))
                        (format :console "{_ :v}{a} {a}{%}" (* level 2) (get-name~ site) called)))
                    (describe children (+ level 1))))
                nodes))
    
    (describe (cdr root) 0)))


(definition public (report-sites)
  (define (present-memory elapsed allocated called)
    (let ((average (fxround (/ allocated called 1024.)))
          (rate (fxround (/ allocated elapsed 1024. 1024.))))
      (format ", {a}k, {a}m"
              average
              rate)))
  
  (let ((root (sites-tree)))
    (define (report nodes level)
      (for-each (lambda (node)
                  (let ((site (car node))
                        (children (cdr node)))
                    (let ((name (get-name~ site))
                          (profile (get-profile~ site)))
                      (let ((elapsed (site-profile-effective-elapsed profile))
                            (allocated (site-profile-allocated profile))
                            (called (site-profile-called profile)))
                        (when (> called 0.)
                          (format :console "{_ :v}{a}{a}{%}" (* level 2) name (present-memory elapsed allocated called)))))))
                nodes))
    
    (report (cdr root) 0)))


;;;
;;;; Checkpoint
;;;


(proclaim (warn optimizations))


(class Checkpoint extends Object
  
  
  (slot name    accessors generate)
  (slot profile accessors generate)
  
  
  (method override (initialize name)
    (set! name~self name)
    (set! profile~self (make-site-profile)))
  
  
  (method override (print output detail)
    (print-unreadable self output
      (lambda (output)
        (format output "{s}" name)))))


(define checkpoints?
  #f)


(definition protected checkpoints <table>
  (make-table test: equal?))

(definition last-checkpoint <f64vector>
  (make-site-profile))


(definition public (register-checkpoint name)
  (let ((checkpoint (new Checkpoint name)))
    (table-set! checkpoints name checkpoint)
    checkpoint))


(definition public call-checkpoint
  (let ((alloc (make-f64vector 1)))
    (lambda (checkpoint <Checkpoint>)
      (when checkpoints?
        (let ((profile (get-profile~ checkpoint)))
          (bytes-allocated! alloc 0)
          (let ((allocated (- (f64vector-ref alloc 0) (site-profile-allocated last-checkpoint))))
            (site-profile-allocated-set! profile (+ (site-profile-allocated profile) allocated)))
          (site-profile-called-set! profile (+ (site-profile-called profile) 1.))
          (site-profile-allocated-set! last-checkpoint alloc))))))


(definition public (clear-checkpoints)
  (empty-table checkpoints))


(definition public (reset-checkpoints)
  (iterate-table checkpoints
    (lambda (name checkpoint <Checkpoint>)
      (site-profile-reset (get-profile~ checkpoint))))
  (site-profile-reset last-checkpoint))


(proclaim (not warn optimizations))


(definition public (report-checkpoints)
  (define (kb bytes <fx>)
    (fxround (/ (cast <fl> bytes) 1024.)))
  
  (define (meg bytes <fx>)
    (fxround (/ (cast <fl> bytes) 1024. 1024.)))
  
  (define (mem bytes <fx>)
    (if (>= bytes 1048576)
        (format "{a}m" (meg bytes))
      (format "{a}k" (kb bytes))))
  
  (for-each (lambda (name)
              (let ((checkpoint <Checkpoint> (table-ref checkpoints name)))
                (let ((profile (get-profile~ checkpoint)))
                  (let ((allocated (site-profile-allocated profile))
                        (called (site-profile-called profile)))
                    @w
                    (debug-string (format "{a} {a} {a}" name (fxround called) (/ allocated called)))
                    (debug-string (format "{a} {a} {a} {a}" name (fxround called) (mem (/ allocated called)) (mem allocated)))))))
            (sort nu<? (table-keys checkpoints) key: ->string))))
