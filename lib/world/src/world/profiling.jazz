;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Profiling
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.profiling jazz


(import (jazz.tracker)
        (gaea.geometry)
        (gaea.homogeneous)
        (profiler)
        (world)
        (world.chronology)
        (world.event)
        (world.settings)
        (world.task))


(proclaim (not check bounds zero)
          (warn optimizations))

(declare (optimize-dead-local-variables))


(definition protected current-advise
  #f)


(definition public (setup-profiling)
  (set-site-callback
    (lambda (site)
      (when current-advise
        (current-advise site)))))


;;;
;;;; Profiled
;;;


(definition public being-profiled? <bool>
  #f)

(definition public (set-being-profiled? profiling? <bool>)
  (unless (eq? profiling? being-profiled?)
    (cond ((not profiling?)
           (unrecord-chronology)
           (unrecord-events)
           (set! being-profiled? #f))
          (else
           (record-chronology)
           (record-events)
           (set! being-profiled? #t)))))


;;;
;;;; Profile
;;;


(class Profile-Site extends Object
  
  
  (slot name                 initialize #f                     getter generate)
  (slot parent               initialize #f                     getter generate)
  (slot children     <table> initialize (make-table test: eq?) getter generate)
  (slot start?               initialize #f                     accessors generate)
  (slot start-marker <fx>    initialize 0                      accessors generate)
  (slot start-time   <fl>    initialize 0.                     accessors generate)
  (slot start-memory <fl>    initialize 0.                     accessors generate)
  (slot running      <fl>    initialize 0.                     accessors generate)
  (slot allocated    <fl>    initialize 0.                     accessors generate)
  (slot called       <fx>    initialize 0                      accessors generate)
  
  
  (method override (initialize self name parent)
    (nextmethod self)
    (set! self.name name)
    (set! self.parent parent))
  
  
  (method override (print self output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{?{a}~}" name)))))


(definition protected (profile-sites chronology <Chronology> range)
  (with-reentrant-mutex chronology
    (lambda ()
      (let ((first (first-position chronology))
            (last (last-position chronology))
            (threads (make-table test: eqv?))
            (duration (chronology-duration chronology)))
        (define (process id <fl> marker <fx> time <fl> memory <fl> thread <fl>)
          (when (or (eq? range #t)
                    (and (>= time (get-start range))
                         (<= time (get-end range))))
            (let ((start? (even? marker)))
              (let ((current <Profile-Site> (or (table-ref threads thread #f)
                                                (let ((name (get-name (id->site (flonum->fixnum id)))))
                                                  (let ((p (new Profile-Site name #f)))
                                                    (table-set! threads thread p)
                                                    p)))))
                (cond (start?
                       (let ((id (flonum->fixnum id)))
                         (let ((profile <Profile-Site> (or (table-ref (get-children current) id #f)
                                                           (let ((name (get-name (id->site id))))
                                                             (let ((p (new Profile-Site name current)))
                                                               (table-set! (get-children current) id p)
                                                               p)))))
                           (set-start? profile #t)
                           (set-start-marker profile marker)
                           (set-start-time profile time)
                           (set-start-memory profile memory)
                           (table-set! threads thread profile))))
                      (else
                       (let ((profile current))
                         (when (get-start? profile)
                           ;; sanity check over a case that still happens
                           (when (= (+ (get-start-marker profile) 1) marker)
                             (when #t @what-is-that-test-already-that-inhibits-children
                                      (or (neq? range #t)
                                          (not (get-parent (get-parent profile))))
                               (let ((start-time (get-start-time profile))
                                     (start-memory (get-start-memory profile)))
                                 (let ((running (- time start-time))
                                       (allocated (- memory start-memory)))
                                   (set-running profile (+ (get-running profile) running))
                                   (set-allocated profile (+ (get-allocated profile) allocated))
                                   (set-called profile (+ (get-called profile) 1)))))
                             (set-start? profile #f)
                             (table-set! threads thread (get-parent profile)))))))))))
        
        (define (process-starts)
          (let ((starts (make-table test: eqv?))
                (missing '())
                (first-time (chronological-time chronology first))
                (first-memory (chronological-memory chronology first)))
            (loop (for n from first to (min last (+ first 1000)))
                  (let ((marker (flonum->fixnum (chronological-marker chronology n))))
                    (if (even? marker)
                        (table-set! starts marker #t)
                      (when (not (table-ref starts (- marker 1) #f))
                        (let ((entry (list (- marker 1)
                                           (chronological-id chronology n)
                                           first-time
                                           first-memory
                                           (chronological-thread chronology n))))
                          (set! missing (cons entry missing)))))))
            (for-each (lambda (entry)
                        (bind (marker <fx> id <fl> time <fl> memory <fl> thread <fl>) entry
                          (process id marker time memory thread)))
                      (sort < missing key: car))))
        
        (define (process-ends)
          (let ((ends (make-table test: eqv?))
                (missing '())
                (last-time (chronological-time chronology last))
                (last-memory (chronological-memory chronology last)))
            (loop (for n from last downto (max first (- last 1000)))
                  (let ((marker (flonum->fixnum (chronological-marker chronology n))))
                    (if (odd? marker)
                        (table-set! ends marker #t)
                      (when (not (table-ref ends (+ marker 1) #f))
                        (let ((entry (list (+ marker 1)
                                           (chronological-id chronology n)
                                           last-time
                                           last-memory
                                           (chronological-thread chronology n))))
                          (set! missing (cons entry missing)))))))
            (for-each (lambda (entry)
                        (bind (marker <fx> id <fl> time <fl> memory <fl> thread <fl>) entry
                          (process id marker time memory thread)))
                      (sort > missing key: car))))
        
        (define (process-chronology)
          (let ((content (get-content chronology)))
            (loop (for n from first to last)
                  (let ((index (index chronology n)))
                    (let ((id (f64vector-ref content index))
                          (marker (flonum->fixnum (f64vector-ref content (+ index 1))))
                          (time (f64vector-ref content (+ index 2)))
                          (memory (f64vector-ref content (+ index 3)))
                          (thread (f64vector-ref content (+ index 4))))
                      (process id marker time memory thread))))))
        
        (when range
          (process-starts)
          (process-chronology)
          (process-ends))
        (values threads duration)))))


;;;
;;;; Site
;;;


;; work around bytes allocated decreasing bug
(definition last-bytes-allocated <fl>
  0.)

(definition (sanitize-bytes-allocated! content <f64vector> index <fx>)
  (bytes-allocated! content index)
  (let ((bytes-allocated (fl^ (f64vector-ref content index))))
    (if (< bytes-allocated last-bytes-allocated)
        (f64vector-set! content index last-bytes-allocated)
      (set! last-bytes-allocated bytes-allocated))))


(definition public (iterate-sites proc)
  (table-iterate (registered-sites)
    (lambda (name site)
      (proc (symbol->enumerator name)))))


(definition public (advise-sites)
  (iterate-sites advise-site)
  (set! current-advise (lambda (site <Call-Site>)
                         (let ((name (get-name site)))
                           (let ((what (symbol->enumerator name)))
                             (advise-site what))))))

(definition public (unadvise-sites)
  (iterate-sites unadvise)
  (set! current-advise #f))


(definition public (advise-site what)
  (let ((name (enumerator->symbol what)))
    (advise what
      (lambda (field locator original set)
        (let ((original (original)))
          (when (procedure? original)
            (set (lambda (site thunk)
                   ;; pass original and thunk as parameters instead of
                   ;; using a closure that would allocate some memory
                   (with-site name site original thunk)))))))))


(definition public (with-site name site <Call-Site> procedure thunk)
  (declare (proper-tail-calls))
  (declare (optimize-dead-local-variables))
  (declare (inline))
  (declare (inlining-limit 1000))
  (if (not record-chronology?)
      (procedure site thunk)
    (let ((chronology (current-chronology)))
      (let ((content (get-content chronology))
            (mutex (get-mutex chronology))
            (id <fx> (get-id site))
            (thread (fixnum->flonum (object->serial (current-thread))))
            (serialize? (and profiler-active? serialize-sites? (not (task-mutex-owner?)))))
        (when serialize?
          (mutex-lock! task-mutex))
        (mutex-lock! mutex)
        (let ((marker (next-marker! chronology)))
          (let ((index (index-now chronology)))
            (f64vector-set! content index (cast <fl> id))
            (f64vector-set! content (+ index 1) (cast <fl> marker))
            (current-seconds! content (+ index 2))
            (sanitize-bytes-allocated! content (+ index 3))
            (f64vector-set! content (+ index 4) thread)
            (advance! chronology))
          (mutex-unlock! mutex)
          (prog1 (case (get-monitor site)
                   ((performance)
                    (with-profile name thunk))
                   ((memory)
                    (with-tracking thunk))
                   (else
                    (procedure site thunk)))
            (mutex-lock! mutex)
            (let ((index (index-now chronology)))
              (f64vector-set! content index (cast <fl> id))
              (f64vector-set! content (+ index 1) (cast <fl> (+ marker 1)))
              (current-seconds! content (+ index 2))
              (sanitize-bytes-allocated! content (+ index 3))
              (f64vector-set! content (+ index 4) thread)
              (advance! chronology))
            (mutex-unlock! mutex)
            (when serialize?
              (mutex-unlock! task-mutex))))))))


(definition public (sites-metadata)
  (let ((queue (new-queue)))
    (table-iterate (registered-sites)
      (lambda (name site)
        (enqueue queue (cons (get-id site) name))))
    (queue-list queue)))


;;;
;;;; Setup
;;;


(setup-profiling)
(advise-sites))
