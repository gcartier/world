;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Mario
;;;


(module world.mario jazz


(import (jazz.geometry)
        (jazz.graphic)
        (jazz.graphic.opengl.glew)
        (jazz.io)
        (jazz.library)
        (jazz.literals)
        (jazz.media)
        (jazz.network)
        (jazz.platform)
        (jazz.platform.cairo)
        (jazz.runtime)
        (jazz.system)
        (jazz.ui)
        (jazz.ui.dialog)
        (jazz.ui.window)
        (time)
        (world)
        (world.actor)
        (world.autoload)
        (world.block)
        (world.boost)
        (world.collision)
        (world.dye)
        (world.dyes)
        (world.element)
        (world.enemy)
        (world.foreign)
        (world.geometry)
        (world.history)
        (world.mark)
        (world.model)
        (world.movement)
        (world.opengl)
        (world.player)
        (world.sector)
        (world.serialization)
        (world.syntax (phase syntax))
        (world.texture)
        (world.window)
        (world.client.window))


;;;
;;;; World
;;;


(class Mario-World extends World
  
  
  (method override (player-class)
    Mario))


;;;
;;;; Player
;;;


(class Mario extends Player
  
  
  (method override (tick commands elapse exit)
    (let ((world (current-world))
          (zone (current-zone))
          (me (current-me)))
      (define (stomp-enemies elements)
        (for-each (lambda (elem)
                    (when (and (is? elem Actor) (stomp~ elem))
                      (vertex-y-set! velocity 3.)))
                  elements))
      
      (let ((moving? #f)
            (target-vx #f)
            (target-vz #f)
            (factor (* elapse 65))
            (first-person? (get-first-person?~ world))
            (fly? (get-fly?~ world))
            (old-position (copy-vertex position)))
        (when (get-modified?~ commands)
          (when (get-move-left?~ commands)
            (set! moving? #t)
            (set! target-vx (- player-speed)))
          (when (get-move-right?~ commands)
            (set! moving? #t)
            (set! target-vx player-speed))
          (when (get-move-down?~ commands)
            (if first-person?
                (when floor?
                  (move-player-backward~ world self factor)
                  (decrease! rotation (* 150. elapse)))
              (set! moving? #t)
              (set! target-vz player-speed)))
          (when (get-move-up?~ commands)
            (if first-person?
                (when floor?
                  (move-player-forward~ world self (* factor acceleration))
                  (unless fly?
                    (increase! rotation (* 150. elapse))))
              (set! moving? #t)
              (set! target-vz (- player-speed))))
          (when (get-strafe-left?~ commands)
            (when (and first-person? floor?)
              (strafe-player-left~ world self factor)))
          (when (get-strafe-right?~ commands)
            (when (and first-person? floor?)
              (strafe-player-right~ world self factor)))
          (when (get-strafe-up?~ commands)
            (when fly?
              (strafe-player-up~ world self factor)))
          (when (get-strafe-down?~ commands)
            (when fly?
              (strafe-player-down~ world self factor)))
          (when (get-rotate-left?~ commands)
            (when first-person?
              (rotate-player-left~ world self factor)))
          (when (get-rotate-right?~ commands)
            (when first-person?
              (rotate-player-right~ world self factor)))
          (when (and fly?
                     (not (get-rotate-left?~ commands))
                     (not (get-rotate-right?~ commands)))
            (reset-player-tilt~ world self)))
        (when (not moving?)
          (set! target-vx 0.)
          (set! target-vz 0.))
        (when target-vx
          (let ((deceleration (if jumping? air-deceleration floor-deceleration)))
            (cond ((> (vertex-x velocity) target-vx)
                   (vertex-x-set! velocity (- (vertex-x velocity) deceleration))
                   (if (< (vertex-x velocity) target-vx)
                       (vertex-x-set! velocity target-vx)))
                  ((< (vertex-x velocity) target-vx)
                   (vertex-x-set! velocity (+ (vertex-x velocity) deceleration))
                   (if (> (vertex-x velocity) target-vx)
                       (vertex-x-set! velocity target-vx))))))
        (when target-vz
          (let ((deceleration (if jumping? air-deceleration floor-deceleration)))
            (cond ((> (vertex-z velocity) target-vz)
                   (vertex-z-set! velocity (- (vertex-z velocity) deceleration))
                   (if (< (vertex-z velocity) target-vz)
                       (vertex-z-set! velocity target-vz)))
                  ((< (vertex-z velocity) target-vz)
                   (vertex-z-set! velocity (+ (vertex-z velocity) deceleration))
                   (if (> (vertex-z velocity) target-vz)
                       (vertex-z-set! velocity target-vz))))))
        (if (not (get-jump?~ commands))
            (set! ready? #t)
          (when (and floor? ready? (not jumping?))
            (set! ready? #f)
            (set! jumping? #t)
            (set! jump-time (time->seconds (current-time)))
            (vertex-y-set! velocity (get-jump-impulsion~ world))))
        (when (not (get-start-3d?~ world))
          (set-position (vertex+ position (vertex (vertex-x velocity) 0. (vertex-z velocity)))))
        (let ((target-position (copy-vertex position)))
          ;; reset to test collisions
          ;; this hack is until we change actions moving player by setting his position
          (set-position old-position)
          @wait-collision-debugged (vertex-x-set! target-position (+ (vertex-x target-position) (* (vertex-x velocity) factor)))
          @wait-collision-debugged (vertex-z-set! target-position (+ (vertex-z target-position) (* (vertex-z velocity) factor)))
          (receive (new-position last-direction collisions) (collide&slide position target-position (get-up~ lookat) radiuses)
            (hit collisions exit)
            (let ((target-fall (copy-vertex new-position)))
              (unless fly?
                @need-to-generalize-gravity-as-a-vector-in-the-interpolation-algorithm
                (let ((gravity (compute-gravity~ zone position)))
                  (vertex+! velocity velocity (vertex-scalar* gravity factor))
                  (vertex+! position position (vertex-scalar* velocity factor))
                  (set! x (vertex-x position))
                  (set! y (vertex-y position))
                  (set! z (vertex-z position)))
                (let ((gravity (get-gravity~ world))
                      (adjusted (* elapse 50.)))
                  (vertex-y-set! velocity (- (vertex-y velocity) (* gravity adjusted)))
                  (vertex-y-set! target-fall (+ (vertex-y target-fall) (- (* (vertex-y velocity) adjusted) (* gravity .5 adjusted adjusted))))
                  (when (and (not floor?)
                             (or (not jumping?)
                                 (> (- (time->seconds (current-time)) jump-time) 1.)))
                    (let ((reduce (* 1. elapse)))
                      (if (< (vertex-norm velocity) reduce)
                          (begin
                            (vertex-x-set! velocity 0.)
                            (vertex-z-set! velocity 0.))
                        (set! velocity (vertex- velocity (vertex-scalar* (vertex-normalize-safe (vertex (vertex-x velocity) 0. (vertex-z velocity))) reduce))))))))
              (when (< (vertex-y velocity) max-fall-vy)
                (vertex-y-set! velocity max-fall-vy))
              (let ((going-down? (< (vertex-y target-fall) (vertex-y new-position))))
                (receive (new-fall last-direction collisions) (collide&stop new-position target-fall (get-up~ lookat) radiuses)
                  (let ((floor-level (+ (get-floor-level~ zone) (get-radius-y))))
                    (if (and (< (vertex-y new-fall) floor-level) (not fly?))
                        (begin
                          (vertex-y-set! new-fall floor-level)
                          (vertex-y-set! velocity 0.)
                          (set! jumping? #f)
                          (set! floor? #t))
                      (let ((fall-collided? (not-null? collisions)))
                        (if (not fall-collided?)
                            (set! floor? #f)
                          (vertex-y-set! velocity 0.)
                          (set! jumping? #f)
                          (set! floor? #t)
                          (when going-down?
                            (stomp-enemies (map get-element~ collisions)))))))
                  @w
                  (when (< y die-bottom)
                    (lose~ world self)
                    (continuation-return exit))
                  (set-position new-fall)
                  (update-area~ zone self old-position)
                  (update-sector~ zone self old-position)
                  (vertex-! movement position old-position)
                  (when (and (eq? self me)
                             (not (vertex=? old-position new-fall)))
                    (camera-center-player~ world))))))))))))
