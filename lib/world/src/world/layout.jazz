;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; Layout
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2016
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;    Barbara Samson


(module world.layout jazz


(import (jazz.geometry))


(definition public (layout-tiles n box)
  (define (center-tiles tile-width tile-height row-count column-count)
    (let ((box-origin-x (get-left box))
          (box-origin-y (get-top box))
          (box-width (rect-width box))
          (box-height (rect-height box))
          (tiles-width (* tile-width column-count))
          (tiles-height (* tile-height row-count)))
      (let ((horizontal-padding (center tiles-width box-width))
            (vertical-padding (center tiles-height box-height))
            (remain (remainder n column-count)))
        (let ((tile-count-last-row (if (= remain 0)
                                       column-count
                                     remain)))
          (let ((padding-last-row (if (= remain 0)
                                      horizontal-padding
                                    (center (* tile-width tile-count-last-row) box-width))))
            ;; begin named let
            (let (iterate-rows
                   (current-row 1)
                   (tile-origin-y (+ box-origin-y vertical-padding))
                   (rectangles '()))
              ;; terminating condition
              (if (> current-row row-count)
                  rectangles
                (let (iterate-columns
                       (current-column 1)
                       (last-column column-count)
                       (tile-origin-x (+ box-origin-x 
                                         (if (= current-row row-count)
                                             padding-last-row
                                           horizontal-padding)))
                       (rectangles rectangles))
                  ;; terminating condition
                  (if (> current-column last-column)
                      (iterate-rows
                        (+ current-row 1)
                        (+ tile-origin-y tile-height)
                        rectangles)
                    (let ((rectangle
                            (new Rect ; Rect args are top-left-x top-left-y bottom-right-x bottom-right-y
                              (fxceiling tile-origin-x)
                              (fxceiling tile-origin-y)
                              (fxfloor (+ tile-origin-x tile-width))
                              (fxfloor (+ tile-origin-y tile-height)))))
                      (iterate-columns
                        (+ current-column 1)
                        (if (< current-row row-count) ;number of tiles in last row can be less than total columns
                            column-count
                          tile-count-last-row)
                        (+ tile-origin-x tile-width)
                        (cons rectangle rectangles))))))))))))
  
  (if (= n 0)
      '()
    (let ((box-width (rect-width box))
          (box-height (rect-height box)))
      (let ((box-ratio (/ box-width box-height))
            (tile-ratio (/ 1280. 720.)))
        ;;loop
        (let (find-max-tile-area
               (max-tile-area 0)
               (max-tile-width 0)
               (max-tile-height 0)
               (max-tile-row-count 0)
               (max-tile-column-count 0)
               (column-count 1))
          (if (> column-count n) ;RETURN
              (center-tiles max-tile-width max-tile-height max-tile-row-count max-tile-column-count)
            (let ((row-count (ceiling (/ n column-count))))
              (define (maximize-tile-size)
                (let ((trial-tile-width (/ box-width column-count)))
                  (let ((trial-tile-height (/ trial-tile-width tile-ratio)))
                    (if (>= box-height (* trial-tile-height row-count)) ;check if maximizing width exceeds box height
                        (values trial-tile-height trial-tile-width)
                      ;;else cannot maximize width so maximize height
                      (let ((trial-tile-height (/ box-height row-count)))
                        (let ((trial-tile-width (* trial-tile-height tile-ratio)))
                          (values trial-tile-height trial-tile-width)))))))
              
              (receive (new-tile-height new-tile-width) (maximize-tile-size)
                (let ((new-tile-area (* new-tile-height new-tile-width)))
                  (if (> new-tile-area max-tile-area) ;check tile area to see if it exceeds last maximum
                      (find-max-tile-area ;yes: loop with new params
                        new-tile-area
                        new-tile-width
                        new-tile-height
                        row-count
                        column-count
                        (+ column-count 1))
                    (find-max-tile-area ;no: loop with old params
                      max-tile-area
                      max-tile-width
                      max-tile-height
                      max-tile-row-count
                      max-tile-column-count
                      (+ column-count 1)))))))))))))
