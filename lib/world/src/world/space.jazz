;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Spaces
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.space jazz


(import (jazz.application)
        (jazz.component)
        (jazz.geometry)
        (world)
        (world.actor)
        (world.autoload)
        (world.change)
        (world.context)
        (world.creature)
        (world.element)
        (world.entity)
        (world.generation)
        (world.generation.block)
        (world.generation.building)
        (world.generation.decoration)
        (world.generation.redstone)
        (world.generation.vegetation)
        (world.geometry)
        (world.history)
        (world.index)
        (world.interface.inventory)
        (world.polygon)
        (world.redstone)
        (world.settings)
        (world.sound)
        (world.spawn)
        (world.syntax (phase syntax))
        (world.travel))


(definition protected *space-actions*
  '())


(definition protected (set-space-actions actions-list)
  (update-actions-shortcuts (current-application) *space-actions* actions-list)
  (set! *space-actions* actions-list))


;;;
;;;; Space
;;;


(class Space extends Object
  
  
  (method protected virtual (space-setup self)
    )
  
  
  (method protected virtual (space-install self)
    )
  
  
  (method protected virtual (space-activate self)
    (set-space-actions (space-actions self)))
  
  
  (method protected virtual (space-deactivate self)
    (set-space-actions '()))
  
  
  (method protected virtual (space-uninstall self)
    )
  
  
  (method protected virtual (space-actions self)
    '())
  
  
  (method protected virtual (showcase-avatar? self)
    #f)
  
  
  (method protected virtual (showcase-avatar-y self avatar)
    #f)
  
  
  (method protected virtual (showcase-avatar-scaling self avatar)
    #f)
  
  
  (method protected virtual (showcase-avatars? self)
    #t)
  
  
  (method protected virtual (showcase-avatars-vertical self)
    #f)
  
  
  (method protected virtual (showcase-avatars-double-click self h v)
    )
  
  
  (method protected virtual (show-me? self)
    #t)
  
  
  ;;;
  ;;;; Mouse
  ;;;
  
  
  (method package virtual (mouse-down self h v)
    )
  
  
  (method package virtual (mouse-up self h v)
    )
  
  
  (method package virtual (right-mouse-up self h v)
    )
  
  
  (method package virtual (mouse-action self h v)
    )
  
  
  (method package virtual (mouse-moved self x y)
    )
  
  
  (method package virtual (mouse-track self elapse dx dy)
    #f)
  
  
  (method package virtual (double-click self h v)
    )
  
  
  (method package virtual (multiple-click self h v)
    )))
