;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Spaces
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.space jazz


(import (jazz.action)
        (jazz.application)
        (jazz.component)
        (jazz.geometry)
        (gaea.geometry)
        (world)
        (world.actor)
        (world.autoload)
        (world.context)
        (world.creature)
        (world.element)
        (world.entity)
        (world.generation)
        (world.generation.block)
        (world.generation.building)
        (world.generation.decoration)
        (world.generation.redstone)
        (world.generation.vegetation)
        (world.history)
        (world.index)
        (world.interface.inventory)
        (world.polygon)
        (world.redstone)
        (world.settings)
        (world.sound)
        (world.spawn)
        (world.syntax (phase syntax))
        (world.travel))


(definition protected *space-actions*
  '())


(definition protected (set-space-actions actions-list)
  (update-actions-shortcuts (current-application) *space-actions* actions-list)
  (set! *space-actions* actions-list))


;;;
;;;; Space
;;;


(class Space extends Object
  
  
  (slot root <Component> initialize #f getter generate)
  
  
  (method package virtual (space-name self)
    )
  
  
  (method package virtual (space-setup self)
    )
  
  
  (method package virtual (space-install self)
    )
  
  
  (method package virtual (space-activate self)
    (let ((traits (space-bindings self)))
      (when (not-null? traits)
        (replace-active-traits (current-bindings) (append (role-bindings (current-application)) traits))))
    (set-space-actions (space-actions self)))
  
  
  (method package virtual (space-deactivate self)
    (set-space-actions '())
    (let ((traits (space-bindings self)))
      (when (not-null? traits)
        (replace-active-traits (current-bindings) (role-bindings (current-application))))))
  
  
  (method package (space-refresh self)
    (set-space-actions '())
    (let ((traits (space-bindings self)))
      (when (not-null? traits)
        (replace-active-traits (current-bindings) (append (role-bindings (current-application)) traits))))
    (set-space-actions (space-actions self)))
  
  
  (method package virtual (space-uninstall self)
    )
  
  
  (method package virtual (space-bindings self)
    '())
  
  
  (method package virtual (space-actions self)
    '())
  
  
  (method package virtual (application-activate self)
    )
  
  
  (method package virtual (application-deactivate self)
    )
  
  
  (method package virtual (receive-files self pos pathnames)
    )
  
  
  (method package virtual (mainbar-show self)
    )
  
  
  (method package virtual (mainbar-hide self)
    )
  
  
  (method package virtual (fade-mainbar? self)
    #f)
  
  
  (method package virtual (maybe-fade-mainbar self)
    )
  
  
  (method package virtual (central-menu-show self)
    )
  
  
  (method package virtual (central-menu-hide self)
    #f)
  
  
  (method package virtual (panel-stack-change self)
    )
  
  
  (method package virtual (showcase-change self)
    )
  
  
  (method package virtual (zone-change self zone)
    )
  
  
  (method package virtual (showcase-avatar? self)
    #f)
  
  
  (method package virtual (showcase-avatar-y self avatar)
    #f)
  
  
  (method package virtual (showcase-avatar-scaling self avatar)
    #f)
  
  
  (method package virtual (showcase-avatars? self)
    #t)
  
  
  (method package virtual (showcase-avatars-vertical self)
    #f)
  
  
  (method package virtual (showcase-avatars-double-click self h v)
    )
  
  
  (method package virtual (show-me? self)
    #t)
  
  
  (method package virtual (only-skybox self)
    #f)
  
  
  (method package virtual (draw-world? self)
    #t)
  
  
  (method package virtual (draw-skybox? self)
    #t)
  
  
  (method package virtual (draw-horizon? self)
    (draw-world? self))
  
  
  (method package virtual (draw-compass? self)
    (draw-world? self))
  
  
  (method package virtual (draw-message-offset self)
    #f)
  
  
  (method package virtual (draw-working-offset self)
    #f)
  
  
  (method package virtual (vista-target? self)
    #f)
  
  
  ;;;
  ;;;; Keyboard
  ;;;
  
  
  (method package virtual (enter-press self)
    )
  
  
  (method package virtual (tab-press self)
    )
  
  
  (method package virtual (escape-press self)
    #f)
  
  
  ;;;
  ;;;; Mouse
  ;;;
  
  
  (method package virtual (mouse-down self h v)
    )
  
  
  (method package virtual (mouse-up self h v)
    )
  
  
  (method package virtual (right-mouse-up self h v)
    )
  
  
  (method package virtual (mouse-action self h v)
    )
  
  
  (method package virtual (mouse-moved self x y)
    )
  
  
  (method package virtual (mouse-track self dx dy)
    #f)
  
  
  (method package virtual (double-click self h v)
    )
  
  
  (method package virtual (multiple-click self h v)
    )))
