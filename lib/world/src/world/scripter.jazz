;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Scripter
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.scripter jazz


(import (jazz.component)
        (jazz.debuggee)
        (jazz.event)
        (world)
        (world.autoload)
        (world.console)
        (world.context)
        (world.scriptum)
        (world.settings)
        (world.task)
        (world.work))


;;;
;;;; Script
;;;


(definition protected default-script-kind
  'client)


(class Script extends Component
  
  
  (property text  <object> initialize #f getter generate setter explicit)
  (property kind  <object> initialize default-script-kind accessors generate)
  (property state <object> initialize #f accessors generate)
  
  
  (slot open?        <object>  initialize #f accessors generate)
  (slot state-object <object>  initialize #f accessors generate)
  (slot leash        <vertex+> initialize #f accessors generate)
  (slot leash-length <fl>      initialize 80. accessors generate)
  (slot trail?       <bool>    initialize #f accessors generate)
  (slot trail        <object>  initialize #f accessors generate)
  (slot trail-color  <object>  initialize #f accessors generate)
  (slot indicators   <object>  initialize #f accessors generate)
  (slot server-tier  <object>  initialize #f accessors generate)
  (slot client-tier  <object>  initialize #f accessors generate)
  (slot handlers     <table>   initialize (make-table test: eq?) getter generate)
  
  
  (method override (prepare self rest)
    (nextmethod self rest)
    (set! server-tier (new Script-Tier 'server))
    (set! client-tier (new Script-Tier 'client)))
  
  
  (method override (finish self rest)
    (nextmethod self rest)
    (when state
      (let ((obj
              ;; backward compatibility
              (if (u8vector? state)
                  (u8vector->object state deserialize)
                state)))
        (set! state-object obj))))
  
  
  (method override (print self output readably)
    (print-unreadable self output
      (lambda (output)
        )))
  
  
  (method public (set-text self text)
    (set! self.text text)
    (set! self.open? (and text (starts-with? text ";;; -*- "))))
  
  
  (method public (effective-text self)
    (or text ""))
  
  
  (method public (register-handler self name proc)
    (table-set! handlers name proc))
  
  (method public (registered-handler self name)
    (table-ref handlers name #f))
  
  
  (method public (runnable? self)
    (or (eq? kind 'both)
        (and (processor?) (eq? kind 'server))
        (and (client?) (eq? kind 'client))))
  
  
  ;;;
  ;;;; Status
  ;;;
  
  
  (method package (make-status-entity self status)
    (let ((zone (current-zone)))
      (let ((entity (new Status-Entity
                      status: status
                      model: (case status
                               ((read) "warcraft/base/talktomeexclamation")
                               ((walk) "warcraft/base/talktomeexclamation")
                               ((error) "warcraft/base/talktomeexclamationred")
                               (else "warcraft/base/talktomeexclamationgreen"))
                      animation: "Idle")))
        (bake-entity-lighting zone entity)
        entity)))
  
  
  ;;;
  ;;;; Event
  ;;;
  
  
  (method package (enqueue-event self event (origin #f))
    (let ((entity parent))
      (thread-send (get-thread (get-task entity))
        (lambda (exit)
          (handle-one-event entity (get-script entity) event origin)))))
  
  
  (method package (dequeue-event self)
    (thread-receive 0 #f))
  
  
  (method package (wait-event self)
    (thread-receive))
  
  
  ;;;
  ;;;; Run
  ;;;
  
  
  (method package (run-script self task exit)
    (define (extract-header)
      (let ((prefix ";;; -*- "))
        (and (starts-with? text prefix)
             (let ((content (call-with-input-string text read-line)))
               (let ((header (substring content (string-length prefix) (string-length content))))
                 (call-with-input-string header
                   (lambda (port)
                     (catch-exception-filter
                       (lambda (exc)
                         (datum-parsing-exception? exc))
                       (lambda (exc)
                         #f)
                       (lambda ()
                         (read-all port))))))))))
    
    (define (extract-dialect header)
      (let ((explicit (and header (even? (length header)) (getf header dialect:))))
        (if explicit
            (if (symbol? explicit)
                `(dialect ,explicit)
              `(dialect ,@explicit))
          'script)))
    
    (define (script-code dialect)
      (string-append "(script " (->string dialect) "\n" text "\n)"))
    
    (if (or (not text) (not (scriptable? (current-zone))))
        (begin
          (set-task parent #f)
          (continuation-return exit #f))
      (let ((header (extract-header)))
        (let ((code (script-code (extract-dialect header)))
              (instance parent))
          (define (status-change status data)
            (cond ((and (client?)
                        (or (eq? kind 'client)
                            (eq? kind 'both)))
                   (update-status self 'client instance status data))
                  ((and (processor?)
                        (or (eq? kind 'server)
                            (eq? kind 'both)))
                   (with-task-mutex
                     (lambda ()
                       (world.changes:status-script-change (current-seconds) 'server instance status data))))
                  ;((remote)
                  ; (status-return parent status data))
                  ))
          
          (continuation-capture
            (lambda (exit)
              (parameterize ((%%current-instance instance)
                             (current-task task)
                             (current-exit exit))
                (worker-run instance code
                  ;; read
                  (lambda (data)
                    (status-change 'read data)
                    (running-handler self
                      (lambda ()
                        (handle-events parent))))
                  ;; walk
                  (lambda (data)
                    (status-change 'walk data)
                    (running-handler self
                      (lambda ()
                        (handle-events parent))))
                  ;; error
                  (lambda (data)
                    (status-change 'error data)
                    (running-handler self
                      (lambda ()
                        (handle-events parent))))
                  ;; run
                  (lambda ()
                    (status-change 'run #f))
                  ;; result
                  (lambda (result)
                    (define (package-result)
                      (cond ((unspecified? result)
                             '())
                            ((values? result)
                             (map ->string (values->list result)))
                            (else
                             (list (->string result)))))
                    
                    (status-change 'result (package-result)))))))))))


  (method package (running-handler self thunk)
    (declare (proper-tail-calls))
    (if (and (world-setting 'world.debug-scripts? bot?)
             (get-controller-debugger))
        (thunk)
      (continuation-capture
        (lambda (exit)
          (with-exception-handler
            (lambda (exc)
              (continuation-capture
                (lambda (cont)
                  (continuation-graft exit
                    (lambda ()
                      (update-error self 'client parent (exception-reason exc) (exception-locat exc cont) (continuation-stack cont locations?: #t))
                      (running-handler self
                        (lambda ()
                          (handle-events parent))))))))
            thunk)))))
  
  
  (method (problem? self)
    (let ((status (get-status (problem-tier self))))
      (neq? status 'run)))
  
  
  (method (problem-tier self)
    (let ((server-status (get-status server-tier)))
      (if (neq? server-status 'run)
          server-tier
        client-tier)))
  
  
  (method (script-tier self tier)
    (if (eq? tier 'server)
        server-tier
      client-tier))
  
  
  (method (update-run self tier instance)
    (let ((script-tier (script-tier self tier)))
      (set-status script-tier 'run)
      (set-status-time script-tier (current-seconds))
      (set-reason script-tier #f)
      (set-detail script-tier #f)
      (set-stack script-tier #f)
      (when (not (problem? self))
        (clear-indicators instance)
        (set-console-pane instance #f))))
  
  
  (definition read-color 'Orange)
  (definition walk-color 'Orange)
  (definition error-color 'Red)
  
  
  (method (update-read self tier instance reason locat)
    (update-error self tier instance reason locat #f 'read))
  
  
  ;; some code copied from edit-stop/detail for now
  (method (update-walk self tier instance reason detail)
    (define (collect-details)
      (let ((queue (new-queue)))
        (define (collect detail)
          (let ((children (get-children detail)))
            (if (null? children)
                (enqueue queue detail)
              (for-each collect children))))
        
        (collect detail)
        (queue-list queue)))
    
    (define (detail-location detail)
      (let ((location (get-location detail)))
        (and location
             (if (pair? location)
                 location
               (let ((locat (get-locat location)))
                 (locat->container/line/col locat))))))
    
    (let ((details (collect-details)))
      (define (present-walk)
        `(<span>
           ,@(map (lambda (detail)
                    `(<paragraph> (<text> color: ,walk-color ,(get-title detail))))
                  details)))
      
      (let ((script-tier (script-tier self tier)))
        (set-status script-tier 'walk)
        (set-status-time script-tier (current-seconds))
        (set-reason script-tier reason)
        (set-detail script-tier detail)
        (set-stack script-tier #f))
      (when (window?)
        ;; quick hack until solution to pure scripts
        (if (is? instance world.script.asset:Asset-Entity)
            (display-message (current-world) (let ((all (split-string reason #\newline)))
                                               (if (and (>= (length all) 3)
                                                        (equal? (car all) "Walk problems encountered"))
                                                   (subseq all 2 (length all))
                                                 all))
              duration: 60.)
          (set-console-pane instance (present-walk) size: 24)
          (clear-indicators instance)
          (update-script-walk instance (collect detail-location details))
          (delay-update-debugger self)))))
  
  
  (method (update-error self tier instance reason locat stack (status 'error))
    (define (present-error)
      (let ((color (if (eq? status 'read) read-color error-color)))
        `(<span>
           ,@(let ((lst (split reason "\n")))
               (bind (header . rest) lst
                 (cons (let ((prefix "(Argument "))
                         (if (starts-with? header prefix)
                             (let ((pos (find header #\) start: (+ (string-length prefix) 1))))
                               ;; this test is a bit overboard
                               (if pos
                                   `(<paragraph> (<text> color: ,color ,(string-append (substring header 1 pos) "," (substring header (+ pos 1) (string-length header)))))
                                 `(<paragraph> (<text> color: ,color ,header))))
                           `(<paragraph> (<text> color: ,color ,header))))
                       (map (lambda (str)
                              `(<paragraph> (<text> color: ,color ,str)))
                            rest)))))))
    
    (let ((script-tier (script-tier self tier)))
      (set-status script-tier status)
      (set-status-time script-tier (current-seconds))
      (set-reason script-tier reason)
      (set-detail script-tier #f)
      (set-stack script-tier stack))
    (when (window?)
      ;; quick hack until solution to pure scripts
      (if (is? instance world.script.asset:Asset-Entity)
          (display-message (current-world)
                           (split-string reason #\newline)
            duration: 60.)
        (set-console-pane instance (present-error) size: 24)
        (clear-indicators instance)
        (update-script-error instance (and locat (locat->container/line/col locat)) status)
        (delay-update-debugger self))))
  
  
  (method (update-result self tier instance result)
    (define (present-result)
      `(<span>
         ,@result))
    
    ;; quick hack until solution to pure scripts
    (unless (is? instance world.script.asset:Asset-Entity)
      (unless (null? result)
        (unless (problem? self)
          (set-console-pane instance (present-result))))))
  
  
  (method package (update-status self tier instance status data)
    (case status
      ((run)
       (update-run self tier instance))
      ((read)
       (bind (reason locat) data
         (update-read self tier instance reason locat)))
      ((walk)
       (bind (reason detail) data
         (update-walk self tier instance reason detail)))
      ((error)
       (bind (reason locat stack) data
         (update-error self tier instance reason locat stack)))
      ((result)
       (let ((result data))
         (update-result self tier instance result)))))
  
  
  (method (delay-update-debugger self)
    (delay-event
      (lambda ()
        (world.interface.script:update-debugger-panel parent))))
  
  
  ;;;
  ;;;; Evaluate
  ;;;
  
  
  (method package (reevaluate-script self instance evaluate-run?)
    @using-thread-int!-seems-more-reliable-than-using-events
    (enqueue-event self (list 'evaluate instance evaluate-run?))
    (let ((task (get-task instance)))
      (thread-int! (get-thread task)
        (lambda ()
          (continuation-graft pristine-thread-continuation
            (lambda ()
              (parameterize ((run? evaluate-run?))
                (task-run instance task self))))))))
  
  
  @see-reevaluate-script
  (method package (evaluate-script self instance (evaluate-run?: evaluate-run? #f))
    (let ((task (get-task instance)))
      (continuation-graft pristine-thread-continuation
        (lambda ()
          (parameterize ((run? evaluate-run?))
            (task-run instance task self))))))
  
  
  ;;;
  ;;;; Trail
  ;;;
  
  
  ;; quicky
  (method (clear-trail self)
    (set! trail (new-queue))))


;;;
;;;; Script Tier
;;;


(class Script-Tier extends Object
  
  
  (slot name        <object> initialize #f   accessors generate)
  (slot status      <object> initialize 'run accessors generate)
  (slot status-time <object> initialize #f   accessors generate)
  (slot reason      <object> initialize #f   accessors generate)
  (slot detail      <object> initialize #f   accessors generate)
  (slot stack       <object> initialize #f   accessors generate)
  
  
  (method override (initialize self name)
    (nextmethod self)
    (set! self.name name))
  
  
  (method override (print self output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{s} {a}" name status)))))


;;;
;;;; Status Entity
;;;


(class Status-Entity extends Entity
  
  
  (property status accessors generate)))
