;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Scripter
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2016
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.scripter jazz


(import (jazz.component)
        (jazz.event)
        (world)
        (world.autoload)
        (world.scripting)
        (world.syntax (phase syntax))
        (world.work))


;;;
;;;; Script
;;;


(class Script extends Component
  
  
  (property text <object> initialize #f accessors generate)
  
  
  (slot module       <object> initialize #f accessors generate)
  (slot state        <object> initialize #f accessors generate)
  (slot state-time   <object> initialize #f accessors generate)
  (slot reason       <object> initialize #f accessors generate)
  (slot detail       <object> initialize #f accessors generate)
  (slot stack        <object> initialize #f accessors generate)
  (slot tick         <object> initialize #f accessors generate)
  (slot interact     <object> initialize #f accessors generate)
  (slot double-click <object> initialize #f accessors generate)
  (slot power        <object> initialize #f accessors generate)
  (slot unpower      <object> initialize #f accessors generate)
  (slot teleport     <object> initialize #f accessors generate)
  (slot explode      <object> initialize #f accessors generate)
  (slot hit          <object> initialize #f accessors generate)
  (slot last-tick    <object> initialize #f accessors generate)
  (slot events       <object> initialize #f accessors generate)
  (slot trail?       <bool>   initialize #f accessors generate)
  (slot trail        <object> initialize #f accessors generate)
  (slot trail-color  <object> initialize #f accessors generate)
  
  
  (method override (print output readably)
    (print-unreadable self output
      (lambda (output)
        )))
  
  
  ;;;
  ;;;; Billboard
  ;;;
  
  
  (method (make-billboard)
    (new Script-State
      state: state
      model: (case state
               ((walk) "base/talktomeexclamation")
               ((error) "base/talktomeexclamationred")
               (else "base/talktomeexclamationgreen"))
      animation: "Idle"
      animate?: #t))
  
  
  ;;;
  ;;;; Event
  ;;;
  
  
  (method (require-events)
    (or events
        (let ((queue (new-queue)))
          (set! events queue)
          queue)))
  
  
  (method (enqueue-event event)
    (let ((queue (require-events)))
      (enqueue queue event)))
  
  
  (method (dequeue-event)
    (let ((queue (require-events)))
      (and (not (queue-empty? queue))
           (dequeue queue))))
  
  
  ;;;
  ;;;; Run
  ;;;
  
  
  (method (run-script task exit)
    (let ((world (current-world)))
      (define (determine-module)
        (or module
            (let ((mod (gensym 'script)))
              (set! module mod)
              mod)))
      
      (define (script-code module)
        (string-append "(module " (symbol->string module) " jazz (import (world.script)) (instance me " text " ))"))
      
      (let ((module (determine-module)))
        (when text
          (let ((code (script-code module)))
            (parameterize ((current-instance parent)
                           (current-task task)
                           (current-exit exit))
              (continuation-capture
                (lambda (exit)
                  (with-exception-handler
                    (lambda (exc)
                      (set-task~ parent #f)
                      (update-state 'error (exception-reason exc) #f (execution-stack))
                      (continuation-return exit #f))
                    (lambda ()
                      (update-state 'run #f #f #f)
                      (worker-evaluate 'jazz code #f 0 0
                        (lambda (reason detail)
                          (set-task~ parent #f)
                          (update-state 'walk reason detail)
                          (continuation-return exit #f))
                        (lambda (reason)
                          (set-task~ parent #f)
                          (update-state 'walk reason #f)
                          (continuation-return exit #f)))))))))))))


  (method (running-handler thunk)
    (unless (eq? state 'error)
      (continuation-capture
        (lambda (return)
          (with-exception-handler
            (lambda (exc)
              (set-task~ parent #f)
              (update-state 'error (exception-reason exc) #f (execution-stack))
              (continuation-return return #f))
            thunk)))))
  
  
  (method (update-state state reason detail (stack #f))
    (set-state state)
    (set-state-time (current-seconds))
    (set-reason reason)
    (set-detail detail)
    (set-stack stack)
    (delay-update-debugger))
  
  
  (method (delay-update-debugger)
    (delay-event
      (lambda ()
        (world.interface.script:update-debugger parent))))
  
  
  ;;;
  ;;;; Evaluate
  ;;;
  
  
  (method (evaluate-script entity)
    (let ((task (get-task~ entity)))
      (continuation-graft pristine-thread-continuation
        (lambda ()
          (update-state 'run #f #f #f)
          (task-run~ entity task self)))))
  
  
  ;;;
  ;;;; Trail
  ;;;
  
  
  ;; open test quicky
  (method (clear-trail)
    (set! trail (new-queue))))


;;;
;;;; Script-State
;;;


(class Script-State extends Entity
  
  
  (property state initialize #f accessors generate)))
