;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Scripter
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2016
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.scripter jazz


(import (jazz.component)
        (world)
        (world.autoload)
        (world.scripting)
        (world.syntax (phase syntax))
        (world.work))


;;;
;;;; Scriptable
;;;


(interface Scriptable
  
  
  (method public virtual abstract (get-script)))


;;;
;;;; Script
;;;


(class Script extends Component
  
  
  (property text <object> initialize #f accessors generate)
  
  
  (slot module      <object> initialize #f accessors generate)
  (slot state       <object> initialize #f accessors generate)
  (slot reason      <object> initialize #f accessors generate)
  (slot detail      <object> initialize #f accessors generate)
  (slot tick        <object> initialize #f accessors generate)
  (slot idle        <object> initialize #f accessors generate)
  (slot interact    <object> initialize #f accessors generate)
  (slot objective   <object> initialize #f accessors generate)
  (slot objectives  <object> initialize #f accessors generate)
  (slot trail?      <bool>   initialize #f accessors generate)
  (slot trail       <object> initialize #f accessors generate)
  (slot trail-color <object> initialize #f accessors generate)
  
  
  (method override (print output readably)
    (print-unreadable self output
      (lambda (output)
        )))
  
  
  ;;;
  ;;;; Billboard
  ;;;
  
  
  (method (make-billboard)
    (new Script-State
      state: state
      model: (case state
               ((walk) "base/talktomeexclamation")
               ((error) "base/talktomeexclamationred")
               (else "base/talktomeexclamationgreen"))
      animation: "Idle"
      animate?: #t))
  
  
  ;;;
  ;;;; Evaluate
  ;;;
  
  
  (method (evaluate-script (code #f))
    (let ((world (current-world)))
      (define (determine-module)
        (or module
            (let ((mod (gensym 'script)))
              (set! module mod)
              mod)))
      
      (define (script-code module)
        (string-append "(module " (symbol->string module) " jazz (import (world.script)) (instance me " (or code text) " ))"))
      
      (let ((module (determine-module)))
        (let ((code (script-code module)))
          (parameterize ((current-instance parent))
            (continuation-capture
              (lambda (exit)
                (with-exception-catcher
                  (lambda (exc)
                    (set-state 'error)
                    (set-reason (exception-reason exc)))
                  (lambda ()
                    (worker-evaluate 'jazz code #f 0 0
                      (lambda (reason detail)
                        (set-state 'walk)
                        (set-reason reason)
                        (set-detail detail)
                        (continuation-return exit #f))
                      (lambda (reason)
                        (set-state 'walk)
                        (set-reason reason)
                        (set-detail #f)
                        (continuation-return exit #f)))
                    (set-state 'run))))))))))
  
  
  (method (running-handler thunk)
    (with-exception-catcher
      (lambda (exc)
        (set-state 'error)
        (set-reason (exception-reason exc)))
      thunk))
  
  
  ;;;
  ;;;; Objective
  ;;;
  
  
  (method (add-objective obj)
    (when (not objectives)
      (set! objectives (new-queue)))
    (enqueue objectives obj))
  
  
  (method (objective-done)
    (set! objective #f))
  
  
  (method (objectiveless?)
    (and (not objective)
         (or (not objectives)
             (queue-empty? objectives))))
  
  
  (method (get/fetch-objective)
    (or objective
        (and objectives
             (not (queue-empty? objectives))
             (let ((obj ((dequeue objectives))))
               (set! objective obj)
               obj))))
  
  
  ;;;
  ;;;; Trail
  ;;;
  
  
  ;; open test quicky
  (method (clear-trail)
    (set! trail (new-queue))))


;;;
;;;; Script-State
;;;


(class Script-State extends Entity
  
  
  (property state initialize #f accessors generate)))
