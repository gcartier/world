;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Scripter
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2016
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.scripter jazz


(import (jazz.component)
        (jazz.event)
        (world)
        (world.autoload)
        (world.scripting)
        (world.settings)
        (world.syntax (phase syntax))
        (world.task)
        (world.work))


;;;
;;;; Script
;;;


(class Script extends Component
  
  
  (property text <object> initialize #f accessors generate)
  
  
  (slot module       <object> initialize #f accessors generate)
  (slot state        <object> initialize #f accessors generate)
  (slot state-time   <object> initialize #f accessors generate)
  (slot reason       <object> initialize #f accessors generate)
  (slot detail       <object> initialize #f accessors generate)
  (slot stack        <object> initialize #f accessors generate)
  (slot tick         <object> initialize #f accessors generate)
  (slot interact     <object> initialize #f accessors generate)
  (slot double-click <object> initialize #f accessors generate)
  (slot power        <object> initialize #f accessors generate)
  (slot unpower      <object> initialize #f accessors generate)
  (slot teleport     <object> initialize #f accessors generate)
  (slot explode      <object> initialize #f accessors generate)
  (slot hit          <object> initialize #f accessors generate)
  (slot events       <object> initialize #f accessors generate)
  (slot trail?       <bool>   initialize #f accessors generate)
  (slot trail        <object> initialize #f accessors generate)
  (slot trail-color  <object> initialize #f accessors generate)
  (slot indicators   <object> initialize #f accessors generate)
  
  
  (method override (print output readably)
    (print-unreadable self output
      (lambda (output)
        )))
  
  
  ;;;
  ;;;; Billboard
  ;;;
  
  
  (method (make-billboard)
    (new Script-State
      state: state
      model: (case state
               ((read) "base/talktomeexclamation")
               ((walk) "base/talktomeexclamation")
               ((error) "base/talktomeexclamationred")
               (else "base/talktomeexclamationgreen"))
      animation: "Idle"))
  
  
  ;;;
  ;;;; Event
  ;;;
  
  
  (method (require-events)
    (or events
        (let ((queue (new-queue)))
          (set! events queue)
          queue)))
  
  
  (method (enqueue-event event)
    (let ((queue (require-events)))
      (enqueue queue event)))
  
  
  (method (dequeue-event)
    (let ((queue (require-events)))
      (and (not (queue-empty? queue))
           (dequeue queue))))
  
  
  ;;;
  ;;;; Run
  ;;;
  
  
  (method (run-script task exit)
    (let ((world (current-world)))
      (define (determine-module)
        (or module
            (let ((mod (gensym 'script)))
              (set! module mod)
              mod)))
      
      (define (script-code module)
        (string-append "(module " (symbol->string module) " script (%%import (script.syntax (phase syntax)) (world.script)) (%%declare (proper-tail-calls) (safe)) (%%instance me\n" text "\n))"))
      
      (if (not text)
          (begin
            (set-task~ parent #f)
            (continuation-return exit #f))
        (let ((module (determine-module)))
          (let ((code (script-code module))
                (instance parent))
            (continuation-capture
              (lambda (exit)
                (clear-state instance)
                (parameterize ((%%current-instance instance)
                               (current-task task)
                               (current-exit exit))
                  (worker-run instance code
                    ;; read
                    (lambda (reason)
                      (set-task~ parent #f)
                      (update-read instance reason)
                      (continuation-return exit #f))
                    ;; walk
                    (lambda (reason detail)
                      (set-task~ parent #f)
                      (update-walk instance reason detail)
                      (continuation-return exit #f))
                    ;; error
                    (lambda (reason location)
                      (set-task~ parent #f)
                      (update-error instance reason location (execution-stack))
                      (continuation-return exit #f))
                    ;; result
                    (lambda (result)
                      (when (specified? result)
                        (set-billboard-console~ instance (->string result)))))))))))))


  (method (running-handler thunk)
    (declare (proper-tail-calls))
    (unless (eq? state 'error)
      (if (world-setting 'world.debug-scripts? #f)
          (thunk)
        (continuation-capture
          (lambda (exit)
            (with-exception-handler
              (lambda (exc)
                (continuation-capture
                  (lambda (cont)
                    (continuation-graft exit
                      (lambda ()
                        (set-task~ parent #f)
                        (update-error parent (exception-reason exc) (exception-location exc cont) (execution-stack)))))))
              thunk))))))
  
  
  (method (clear-state instance)
    (when (neq? state 'run)
      (set-billboard-element~ instance #f))
    (set-state 'run)
    (set-state-time (current-seconds))
    (set-reason #f)
    (set-detail #f)
    (set-stack #f))
  
  
  (definition read-color 'Orange)
  (definition walk-color 'Orange)
  (definition error-color 'Red)
  
  
  (method (update-read instance reason)
    (update-error instance reason #f #f 'read read-color))
  
  
  ;; some code copied from edit-stop/detail for now
  (method (update-walk instance reason detail)
    (define (collect-details)
      (let ((queue (new-queue)))
        (define (collect detail)
          (let ((children (get-children~ detail)))
            (if (null? children)
                (enqueue queue detail)
              (for-each collect children))))
        
        (collect detail)
        (queue-list queue)))
    
    (define (detail-location detail)
      (let ((location (get-location~ detail)))
        (and location
             (if (pair? location)
                 location
               (let ((locat (get-locat~ location)))
                 (locat->container/line/col locat))))))
    
    (let ((details (collect-details)))
      (define (present-walk)
        `(<span>
           ,@(map (lambda (detail)
                    `(<paragraph> (<text> color: ,walk-color ,(get-title~ detail))))
                  details)))
      
      (set-state 'walk)
      (set-state-time (current-seconds))
      (set-reason reason)
      (set-detail detail)
      (set-stack #f)
      (when (window?)
        (set-billboard-console~ instance (present-walk) size: 24)
        (world.interface.script:update-script-walk (collect detail-location details))
        (delay-update-debugger))))
  
  
  (method (update-error instance reason location stack (state 'error) (color error-color))
    (define (present-error)
      `(<span>
         ,@(let ((lst (split reason "\n")))
             (bind (header . rest) lst
               (cons (let ((prefix "(Argument "))
                       (if (starts-with? header prefix)
                           (let ((pos (find header #\) start: (+ (string-length prefix) 1))))
                             ;; this test is a bit overboard
                             (if pos
                                 `(<paragraph> (<text> color: ,color ,(string-append (substring header 1 pos) "," (substring header (+ pos 1) (string-length header)))))
                               `(<paragraph> (<text> color: ,color ,header))))
                         `(<paragraph> (<text> color: ,color ,header))))
                     (map (lambda (str)
                            `(<paragraph> (<text> color: ,color ,str)))
                          rest))))))
    
    (set-state state)
    (set-state-time (current-seconds))
    (set-reason reason)
    (set-detail #f)
    (set-stack stack)
    (when (window?)
      (set-billboard-console~ instance (present-error) size: 24)
      (world.interface.script:update-script-error location)
      (delay-update-debugger)))
  
  
  (method (delay-update-debugger)
    (delay-event
      (lambda ()
        (world.interface.script:update-debugger parent))))
  
  
  ;;;
  ;;;; Evaluate
  ;;;
  
  
  (method (evaluate-script instance)
    (let ((task (get-task~ instance)))
      (continuation-graft pristine-thread-continuation
        (lambda ()
          (clear-state instance)
          (task-run~ instance task self)))))
  
  
  ;;;
  ;;;; Trail
  ;;;
  
  
  ;; open test quicky
  (method (clear-trail)
    (set! trail (new-queue))))


;;;
;;;; Script-State
;;;


(class Script-State extends Entity
  
  
  (property state initialize #f accessors generate)))
