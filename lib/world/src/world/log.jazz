;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Log
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.log jazz


(import (world)
        (world.autoload)
        (world.context)
        (world.ring)
        (world.settings)
        (world.syntax (phase syntax)))


(proclaim (warn optimizations))


(definition public log?
  (world-setting 'world.log? #f))


;;;
;;;; Tier
;;;


(definition public (log-server message)
  (let ((tier (current-tier)))
    (log tier message)))


;;;
;;;; Log
;;;


(definition protected log-ring <Ring>
  (new Ring (world-setting 'world.log-max 1000)))


(definition public log-mutex
  (make-mutex 'log))


(definition public (with-log-mutex thunk)
  (unwind-protect
      (begin
        (mutex-lock! log-mutex)
        (thunk))
    (mutex-unlock! log-mutex)))


(definition protected (server-log client time message)
  (with-log-mutex
    (lambda ()
      (give log-ring (new Log-Entry client time message)))))


(class Log-Entry extends Object
  
  
  (slot client  getter generate)
  (slot time    getter generate)
  (slot message getter generate)
  
  
  (method override (initialize self client time message)
    (set! self.client client)
    (set! self.time time)
    (set! self.message message))
  
  
  (method override (print self output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{a}" message))))))
