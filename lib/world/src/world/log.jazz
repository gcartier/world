;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Log
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is WorldScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2014
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See http://github.com/gcartier/world for details.


(module world.log jazz


(import (gambit.log)
        (jazz.io))


(definition nb-contexts
  0)

(definition (context!)
  (prog1 nb-contexts
    (increase! nb-contexts)))

(definition public render-id (context!))
(definition public generate-id (context!))
(definition public tick-id (context!))
(definition public player-id (context!))
(definition public event-id (context!))
(definition public sun-id (context!))
;(definition public message-id (context!))


(definition nb-states
  0)

(definition (state!)
  (prog1 nb-states
    (increase! nb-states)))

(definition public inactive-state (state!))
(definition public heartbeat-state (state!))
(definition public sleeping-state (state!))
(definition public waiting-state (state!))
(definition public support-state (state!))
(definition public render-sequential-state (state!))
(definition public render-sync-state (state!))
(definition public generate-parallel-state (state!))
(definition public generate-sequential-state (state!))
(definition public tick-sequential-state (state!))
(definition public player-sequential-state (state!))
(definition public event-sequential-state (state!))
(definition public sun-sequential-state (state!))


(definition logs-directory
  {Directory Settings "work" "logs"})


(definition protected (setup-logs)
  (when (exists?~ logs-directory)
    (empty-directory~ logs-directory)))


(definition public (new-log-context name id)
  (let ((log-context (log-context-alloc))
        (log-file (new-file~ logs-directory "world")))

    (create-directories~ log-file)
    (log-setup log-context
               (parse~ log-file)
               name
               id
               nb-states
               1000000)

    (log-define-state log-context inactive-state "inactive" log-BLACK)
    (log-define-state log-context heartbeat-state "heartbeat" log-BROWN)
    (log-define-state log-context sleeping-state "sleeping" log-PURPLE)
    (log-define-state log-context waiting-state "waiting" log-RED)
    (log-define-state log-context support-state "support" log-YELLOW)
    (log-define-state log-context render-sequential-state "render sequential" log-BLUE)
    (log-define-state log-context render-sync-state "render sync" log-GRAY)
    (log-define-state log-context generate-parallel-state "generate parallel" log-GREEN)
    (log-define-state log-context generate-sequential-state "generate sequential" log-BLUE)
    (log-define-state log-context tick-sequential-state "tick sequential" log-BLUE)
    (log-define-state log-context player-sequential-state "player sequential" log-BLUE)
    (log-define-state log-context event-sequential-state "event sequential" log-BLUE)
    (log-define-state log-context sun-sequential-state "sun sequential" log-BLUE)

    log-context))


(definition log-contexts
  (make-table test: eq?))


(definition public current-log-context
  (make-parameter #f))


(definition public (with-log-context name id start-state task proc)
  (if (and task (get-context~ task))
      (let ((context (get-context~ task)))
        (parameterize ((current-log-context context))
          (log-transition context start-state)
          (proc context)))
    (let ((log-context (new-log-context name id)))
      (log-start log-context start-state)
      (parameterize ((current-log-context log-context))
        (proc log-context))
      (when (not task)
        (log-stop log-context)
        (log-cleanup log-context)))))


;;;
;;;; Render
;;;


(definition public (post-render thunk)
  (write-render-event thunk))


(definition public (execute-render thunk)
  (let ((mutex (make-mutex 'execute-render)))
    (mutex-lock! mutex)
    (write-render-event
      (lambda ()
        (unwind-protect
            (thunk)
          (mutex-unlock! mutex))))
    (mutex-lock! mutex)))


(definition public render-events
  (open-vector))

(definition public (write-render-event thunk)
  (write thunk render-events)
  (force-output render-events))

(definition public (read-render-event)
  (input-port-timeout-set! render-events 0)
  (read render-events)))
