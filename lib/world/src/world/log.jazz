;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; World Log
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2013
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.log jazz


(import (gambit.log))


(definition nb-states
  0)

(definition (state!)
  (prog1 nb-states
    (increase! nb-states)))

(definition public heartbeat-state (state!))
(definition public sleeping-state (state!))
(definition public waiting-state (state!))
(definition public work-sequential-state (state!))
(definition public work-parallel-state (state!))
(definition public support-state (state!))
(definition public render-sequential-state (state!))
(definition public render-sync-state (state!))
(definition public generate-parallel-state (state!))
(definition public generate-sequential-state (state!))


(definition nb-contexts
  0)

(definition (context!)
  (prog1 nb-contexts
    (increase! nb-contexts)))

(definition public primordial-id (context!))
(definition public render-id     (context!))
(definition public generate-id   (context!))
(definition public tick-id       (context!))
(definition public player-id     (context!))
(definition public sun-id        (context!))
;(definition public message-id    (context!))


(definition public render-events
  (open-vector))

(definition public (write-render-event thunk)
  (write thunk render-events)
  (force-output render-events))

(definition public (read-render-event)
  (input-port-timeout-set! render-events 0)
  (read render-events))


(definition public current-log-context
  (make-parameter #f))


(definition public (with-log-context id start-state proc)
  (let ((log-context (new-log-context id)))
    (log-start log-context start-state)
    (parameterize ((current-log-context log-context))
      (proc log-context))
    (log-stop log-context)
    (log-cleanup log-context)))


(definition public (new-log-context id)
  (let ((log-context (log-context-alloc)))

    (log-setup log-context
               "world"
               id
               nb-states
               1000000)

    (log-define-state log-context heartbeat-state "heartbeat" log-BLACK)
    (log-define-state log-context sleeping-state "sleeping" log-BROWN)
    (log-define-state log-context waiting-state "waiting" log-RED)
    (log-define-state log-context work-sequential-state "work sequential" log-PURPLE)
    (log-define-state log-context work-parallel-state "work parallel" log-GREEN)
    (log-define-state log-context support-state "support" log-YELLOW)
    (log-define-state log-context render-sequential-state "render sequential" log-MAGENTA)
    (log-define-state log-context render-sync-state "render sync" log-GRAY)
    (log-define-state log-context generate-sequential-state "generate sequential" log-BLUE)
    (log-define-state log-context generate-parallel-state "generate parallel" log-GREEN)

    log-context)))
