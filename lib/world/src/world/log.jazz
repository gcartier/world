;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Log
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2016
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.log jazz


(import (world)
        (world.autoload)
        (world.ring)
        (world.settings)
        (world.syntax (phase syntax)))


(definition public log?
  (world-setting 'world.log? #f))


;;;
;;;; Tier
;;;


(definition public (log-server message)
  (let ((tier (current-tier)))
    (log~ tier message)))


;;;
;;;; Log
;;;


(definition protected log-ring
  (new Ring (world-setting 'world.log-max 1000)))


(definition public log-mutex
  (make-mutex 'log))


(definition public (with-log-mutex thunk)
  (unwind-protect
      (begin
        (mutex-lock! log-mutex)
        (thunk))
    (mutex-unlock! log-mutex)))


(definition protected (server-log time client message)
  (with-log-mutex
    (lambda ()
      (add~ log-ring (new Log-Entry time client message)))))


(class Log-Entry extends Object
  
  
  (slot time    getter generate)
  (slot client  getter generate)
  (slot message getter generate)
  
  
  (method override (initialize time client message)
    (set! time~self time)
    (set! client~self client)
    (set! message~self message))
  
  
  (method override (print output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{a}" message))))))
