;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; World Log
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2013
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.log jazz


(import (gambit.log))


(definition nb-states
  0)

(definition (state!)
  (prog1 nb-states
    (increase! nb-states)))

(definition public waiting-state (state!))
(definition public working-state (state!))
(definition public free-state    (state!))


(definition nb-contexts
  0)

(definition (context!)
  (prog1 nb-contexts
    (increase! nb-contexts)))

(definition public primordial-id (context!))
(definition public render-id     (context!))
(definition public generate-id   (context!))
(definition public tick-id       (context!))
(definition public player-id     (context!))
(definition public sun-id        (context!))
;(definition public message-id    (context!))


(definition primordial-log
  #f)

(definition public (get-primordial-log)
  primordial-log)

(definition public (set-primordial-log log-context)
  (set! primordial-log log-context))


;; probably a quicky
(definition public current-log-context
  (make-parameter #f))


(definition public (new-log-context id)
  (let ((log-context (log-context-alloc)))

    (log-setup log-context
               "world"
               id
               nb-states
               1000000)

    (log-define-state log-context waiting-state "waiting"  log-RED)
    (log-define-state log-context working-state "working"  log-GREEN)
    (log-define-state log-context free-state    "free"     log-BLUE)

    log-context)))
