;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; Missiles
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2016
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.missile jazz


(import (jazz.geometry)
        (jazz.syntax (phase syntax))
        (world)
        (world.actor)
        (world.autoload)
        (world.change)
        (world.commands)
        (world.configure)
        (world.dye)
        (world.dyes)
        (world.entity)
        (world.generation.block)
        (world.geometry)
        (world.history)
        (world.homogeneous)
        (world.id)
        (world.log)
        (world.parts)
        (world.scriptum)
        (world.settings)
        (world.sound)
        (world.syntax (phase syntax))
        (world.task)
        (world.travel))


;;;
;;;; Missile
;;;


(definition protected default-missile-speed <fl>
  (world-setting 'world.missile-speed 100.))

(definition protected default-missile-lifespan <fl>
  (world-setting 'world.missile-lifespan 2.5))


(class Missile extends Actor
  
  
  (property actor <object> initialize #f accessors generate)
  (property kind  <object> initialize #f getter generate setter explicit)
  
  
  (slot alive     <fl>     initialize 0.    accessors generate)
  (slot rendered? <bool>   initialize #f    accessors generate)
  (slot response  <object> initialize 'stop accessors generate)
  
  
  (method override (prepare rest)
    (nextmethod rest)
    (set-color red-dye))
  
  
  (method override (finish rest)
    (nextmethod rest)
    (setup-model))
  
  
  (method public (set-kind k)
    (set! kind k)
    (setup-model))
  
  
  (method (setup-model)
    (when kind
      (set-model (case kind
                   ((bullet) 'Bullet)
                   ((arrow) 'Arrow)))))
  
  
  (method override (element-radiuses)
    (vertex .05 .05 .05))
  
  
  (method override (element-radius)
    .05)
  
  
  (method override (setup-area-cube)
    (unless (client?)
      (nextmethod)))
  
  
  (method override (update-area-cube)
    (assert area-cube
      (nextmethod)))
  
  
  (method override (get-friction)
    #f)
  
  
  (method override (is-missile?)
    #t)
  
  
  (method override (simulated?)
    #t)
  
  
  (method (missile-speed) <fl>
    default-missile-speed)
  
  (method (missile-lifespan) <fl>
    default-missile-lifespan)
  
  
  (method (self-wound-grace)
    .1)
  
  
  (method override (tick commands time elapse)
    (let ((ignore-me? (< alive (self-wound-grace))))
      (when alive?
        (tick-actor move-commands time elapse #f response ignore-entities?: #f ignore-players?: #f ignore-me?: ignore-me?))
      (set! alive (+ alive elapse))
      (when (and (linked?) (>= alive (missile-lifespan)))
        (remove-missile))))
  
  
  (method override (hit collisions)
    (nextmethod collisions)
    (let ((world (current-world)))
      (let (iter (scan collisions))
        (when (not-null? scan)
          (let ((collision (car scan)))
            (case (missile-hit~ world self collision)
              ((stop))
              ((remove)
               (remove-missile))
              ((slide)
               (set! response 'slide))
              (else
               (iter (cdr scan)))))))))
  
  
  (method override (hit-floor velocity)
    (remove-missile))
  
  
  (method (remove-missile)
    (if (not rendered?)
        (let ((lifespan (missile-lifespan)))
          (cond ((< alive lifespan)
                 (set! alive lifespan)
                 ;; so missile won't wound again
                 (set! alive? #f))
                ;; safety check
                ((> alive (+ lifespan 1.))
                 ;; only server kills
                 (unless (client?)
                   (world.changes:die-change self)))))
      ;; only server kills
      (unless (client?)
        (world.changes:die-change self))))
  
  
  (method override (die)
    (let ((world (current-world)))
      (remove-element~ world self)
      (set! alive? #f)
      (decrease-missiles~ actor)))
  
  
  (method override (resurrect)
    (increase-missiles~ actor)
    (nextmethod))
  
  
  (method override (explosion-damage?)
    #f)
  
  
  (method override (damage amount critical?)
    )))
