;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; Missiles
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2016
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.missile jazz


(import (jazz.geometry)
        (jazz.syntax (phase syntax))
        (world)
        (world.actor)
        (world.audio)
        (world.autoload)
        (world.change)
        (world.commands)
        (world.configure)
        (world.dye)
        (world.dyes)
        (world.entity)
        (world.generation.block)
        (world.geometry)
        (world.history)
        (world.homogeneous)
        (world.scripting)
        (world.settings)
        (world.syntax (phase syntax))
        (world.task)
        (world.travel))


;;;
;;;; Missile
;;;


(class Missile extends Actor
  
  
  (property actor <object> initialize #f accessors generate)
  (property kind  <object> initialize #f getter generate setter explicit)
  
  
  (slot alive     <fl>     initialize 0.    accessors generate)
  (slot rendered? <bool>   initialize #f    accessors generate)
  (slot response  <object> initialize 'stop accessors generate)
  
  
  (method override (prepare rest)
    (nextmethod rest)
    (set-color red-dye))
  
  
  (method override (finish rest)
    (nextmethod rest)
    (setup-model))
  
  
  (method public (set-kind k)
    (set! kind k)
    (setup-model))
  
  
  (method (setup-model)
    (when kind
      (set-model (case kind
                   ((bullet) 'Bullet)
                   ((arrow) 'Arrow)))))
  
  
  (method override (element-radiuses)
    (vertex .05 .05 .05))
  
  
  (method override (element-radius)
    .05)
  
  
  (method override (get-friction)
    #f)
  
  
  (method override (is-missile?)
    #t)
  
  
  (method (missile-speed) <fl>
    100.)
  
  (method (missile-life) <fl>
    2.5)
  
  
  (method (self-wound-grace)
    .1)
  
  
  (method override (tick commands time elapse)
    (let ((ignore-me? (< alive (self-wound-grace))))
      (tick-actor move-commands time elapse #f response ignore-entities?: #f ignore-players?: #f ignore-me?: ignore-me?)
      (set! alive (+ alive elapse))
      (when (and alive? (>= alive (missile-life)))
        (remove-missile))))
  
  
  (method override (hit collisions)
    (nextmethod collisions)
    (let ((world (current-world)))
      (let (iter (scan collisions))
        (when (not-null? scan)
          (let ((collision (car scan)))
            (case (missile-hit~ world self collision)
              ((stop))
              ((remove)
               (remove-missile))
              ((slide)
               (set! response 'slide))
              (else
               (iter (cdr scan)))))))))
  
  
  (method override (hit-floor velocity)
    (remove-missile))
  
  
  (method (remove-missile)
    (if (not rendered?)
        (let ((missile-life (missile-life)))
          (cond ((< alive missile-life)
                 (set! alive missile-life))
                ;; safety check
                ((> alive (+ missile-life 1.))
                 (die))))
      (die)))
  
  
  (method override (die)
    (let ((world (current-world)))
      (remove-element~ world self)
      (set! alive? #f)
      (decrease-missiles~ actor)))
  
  
  (method override (explosion-damage?)
    #f)
  
  
  (method override (damage amount critical?)
    ))


;;;
;;;; Change
;;;


(definition protected (fire pos dir kind actor)
  (let ((missile (apply-fire #f pos dir kind (get-id~ actor))))
    (let ((entity-id (get-id~ missile))
          (actor-id (get-id~ actor)))
      (let ((history (current-history)))
        (unless (or (and (get-paused?~ history) (not (stepping-history?))) (admin?))
          (bidirectional-change 'fire (current-seconds)
            (lambda (store push)
              )
            (lambda (store push)
              (store push entity-id pos dir kind actor-id))
            (lambda (store push)
              )))))))


(definition protected (apply-fire id pos dir kind actor-id)
  (let ((zone (current-zone))
        (actor (find-entity actor-id)))
    (let ((missile (new Missile id: id position: pos actor: actor kind: kind)))
      (increase-missiles~ actor)
      (set-velocity~ missile (vertex-scalar*& dir (missile-speed~ missile)))
      (add-element~ zone missile))))


(define-change fire
  forward-count: 9
  forward-store: (lambda (push entity-id position dir kind actor-id)
                   (push (cast <fl> (literal->id entity-id)))
                   (push (vertex-x position))
                   (push (vertex-y position))
                   (push (vertex-z position))
                   (push (vertex-x dir))
                   (push (vertex-y dir))
                   (push (vertex-z dir))
                   (push (cast <fl> (literal->id kind)))
                   (push (cast <fl> (literal->id actor-id))))
  forward-apply: (lambda (client-id pop)
                   (let* ((entity-id (pop))
                          (x (pop))
                          (y (pop))
                          (z (pop))
                          (dx (pop))
                          (dy (pop))
                          (dz (pop))
                          (kind-id (pop))
                          (actor-id (pop)))
                     (let ((entity-id (id->literal (flonum->fixnum entity-id)))
                           (pos (vertex& x y z))
                           (dir (vertex& dx dy dz))
                           (kind (id->literal (flonum->fixnum kind-id)))
                           (actor-id (id->literal (flonum->fixnum actor-id))))
                       (apply-fire entity-id pos dir kind actor-id))))))
