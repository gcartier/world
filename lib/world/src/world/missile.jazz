;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; Missiles
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.missile jazz


(import (jazz.geometry)
        (jazz.syntax (phase syntax))
        (world)
        (world.actor)
        (world.autoload)
        (world.change)
        (world.commands)
        (world.configure)
        (world.context)
        (world.dye)
        (world.dyes)
        (world.entity)
        (world.generation.block)
        (world.geometry)
        (world.history)
        (world.homogeneous)
        (world.id)
        (world.log)
        (world.parts)
        (world.scriptum)
        (world.settings)
        (world.sound)
        (world.syntax (phase syntax))
        (world.task)
        (world.travel))


;;;
;;;; Missile
;;;


(definition protected default-missile-speed <fl>
  (world-setting 'world.missile-speed 100.))

(definition protected default-missile-lifespan <fl>
  (world-setting 'world.missile-lifespan 2.5))


(class Missile extends Actor
  
  
  (property actor <object> initialize #f accessors generate)
  (property kind  <object> initialize #f getter generate setter explicit)
  
  
  (slot alive     <fl>     initialize 0.    accessors generate)
  (slot rendered? <bool>   initialize #f    accessors generate)
  (slot response  <object> initialize 'stop accessors generate)
  
  
  (method override (prepare self rest)
    (nextmethod self rest)
    (set-color self red-dye))
  
  
  (method override (finish self rest)
    (nextmethod self rest)
    (setup-model self))
  
  
  (method public (set-kind self k)
    (set! kind k)
    (setup-model self))
  
  
  (method (setup-model self)
    (when kind
      (set-model self (case kind
                   ((bullet) 'Bullet)
                   ((arrow) 'Arrow)))))
  
  
  (method override (element-radiuses self)
    (vertex .05 .05 .05))
  
  
  (method override (element-radius self)
    .05)
  
  
  (method override (setup-area-cube self)
    (unless (client?)
      (nextmethod self)))
  
  
  (method override (update-area-cube self)
    (assert area-cube
      (nextmethod self)))
  
  
  (method override (get-friction self)
    #f)
  
  
  (method override (is-missile? self)
    #t)
  
  
  (method override (simulated? self)
    #t)
  
  
  (method package (missile-speed self) <fl>
    default-missile-speed)
  
  (method (missile-lifespan self) <fl>
    default-missile-lifespan)
  
  
  (method (self-wound-grace self)
    .1)
  
  
  (method override (tick self commands time elapse)
    (let ((ignore-me? (< alive (self-wound-grace self))))
      (when alive?
        (tick-actor self move-commands time elapse #f response ignore-entities?: #f ignore-players?: #f ignore-me?: ignore-me?))
      (set! alive (+ alive elapse))
      (when (and (linked? self) (>= alive (missile-lifespan self)))
        (remove-missile self))))
  
  
  (method override (hit self collisions)
    (nextmethod self collisions)
    (let ((world (current-world)))
      (let (iter (scan collisions))
        (when (not-null? scan)
          (let ((collision (car scan)))
            (case (missile-hit world self collision)
              ((stop))
              ((remove)
               (remove-missile self))
              ((slide)
               (set! response 'slide))
              (else
               (iter (cdr scan)))))))))
  
  
  (method override (hit-floor self velocity)
    (remove-missile self))
  
  
  (method (remove-missile self)
    (if (not rendered?)
        (let ((lifespan (missile-lifespan self)))
          (cond ((< alive lifespan)
                 (set! alive lifespan)
                 ;; so missile won't wound again
                 (set! alive? #f))
                ;; safety check
                ((> alive (+ lifespan 1.))
                 ;; only server kills
                 (unless (client?)
                   (world.changes:die-change self)))))
      ;; only server kills
      (unless (client?)
        (world.changes:die-change self))))
  
  
  (method override (die self)
    (let ((world (current-world)))
      (remove-element world self)
      (set! alive? #f)
      (decrease-missiles actor)))
  
  
  (method override (resurrect self)
    (increase-missiles actor)
    (nextmethod self))
  
  
  (method override (explosion-damage? self)
    #f)
  
  
  (method override (damage self amount critical?)
    )))
