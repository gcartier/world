;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; Missiles
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2016
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.missile jazz


(import (jazz.geometry)
        (jazz.syntax (phase syntax))
        (world)
        (world.actor)
        (world.audio)
        (world.autoload)
        (world.change)
        (world.commands)
        (world.configure)
        (world.dye)
        (world.dyes)
        (world.entity)
        (world.generation.block)
        (world.geometry)
        (world.history)
        (world.homogeneous)
        (world.log)
        (world.scripting)
        (world.settings)
        (world.syntax (phase syntax))
        (world.task)
        (world.travel)
        (world.type))


;;;
;;;; Missile
;;;


(class Missile extends Actor
  
  
  (property actor <object> initialize #f accessors generate)
  (property kind  <object> initialize #f getter generate setter explicit)
  
  
  (slot alive     <fl>     initialize 0.    accessors generate)
  (slot rendered? <bool>   initialize #f    accessors generate)
  (slot response  <object> initialize 'stop accessors generate)
  
  
  (method override (prepare rest)
    (nextmethod rest)
    (set-color red-dye))
  
  
  (method override (finish rest)
    (nextmethod rest)
    (setup-model))
  
  
  (method public (set-kind k)
    (set! kind k)
    (setup-model))
  
  
  (method (setup-model)
    (when kind
      (set-model (case kind
                   ((bullet) 'Bullet)
                   ((arrow) 'Arrow)))))
  
  
  (method override (element-radiuses)
    (vertex .05 .05 .05))
  
  
  (method override (element-radius)
    .05)
  
  
  (method override (get-friction)
    #f)
  
  
  (method override (is-missile?)
    #t)
  
  
  (method (missile-speed) <fl>
    100.)
  
  (method (missile-life) <fl>
    2.5)
  
  
  (method (self-wound-grace)
    .1)
  
  
  (method override (tick commands time elapse)
    (let ((ignore-me? (< alive (self-wound-grace))))
      (tick-actor move-commands time elapse #f response ignore-entities?: #f ignore-players?: #f ignore-me?: ignore-me?)
      (set! alive (+ alive elapse))
      (when (and alive? (>= alive (missile-life)))
        (remove-missile))))
  
  
  (method override (hit collisions)
    (nextmethod collisions)
    (let ((world (current-world)))
      (let (iter (scan collisions))
        (when (not-null? scan)
          (let ((collision (car scan)))
            (case (missile-hit~ world self collision)
              ((stop))
              ((remove)
               (remove-missile))
              ((slide)
               (set! response 'slide))
              (else
               (iter (cdr scan)))))))))
  
  
  (method override (hit-floor velocity)
    (remove-missile))
  
  
  (method (remove-missile)
    (if (not rendered?)
        (let ((missile-life (missile-life)))
          (cond ((< alive missile-life)
                 (set! alive missile-life))
                ;; safety check
                ((> alive (+ missile-life 1.))
                 (if (local?)
                     (die-change self)
                   (die)))))
      (if (local?)
          (die-change self)
        (die))))
  
  
  (method override (die)
    (let ((world (current-world)))
      (remove-element~ world self)
      (set! alive? #f)
      ;; quick hack for tests fix me
      (when actor
        (decrease-missiles~ actor))))
  
  
  (method override (explosion-damage?)
    #f)
  
  
  (method override (damage amount critical?)
    ))


;;;
;;;; Change
;;;


(definition protected (fire pos dir kind actor)
  (let ((missile (apply-fire #f pos dir kind (get-id~ actor))))
    (let ((entity-id (get-id~ missile))
          (actor-id (get-id~ actor)))
      (let ((history (current-history)))
        (unless (or (and (get-paused?~ history) (not (stepping-history?))) (admin?))
          (bidirectional-change 'fire (current-seconds)
            (lambda (store push)
              )
            (lambda (store push)
              (store push entity-id pos dir kind actor-id))
            (lambda (store push)
              (store push missile))))))))


(definition protected (apply-fire id pos dir kind actor-id)
  (let ((zone (current-zone))
        (actor (find-entity actor-id)))
    (let ((missile (new Missile id: id position: pos actor: actor kind: kind)))
      (increase-missiles~ actor)
      (set-velocity~ missile (vertex-scalar*& dir (missile-speed~ missile)))
      (add-element~ zone missile))))


(definition protected (apply-unfire missile)
  (let ((world (current-world)))
    (remove-element~ world missile)))


(define-change fire
  forward-count: 9
  forward-store: (lambda (push entity-id position dir kind actor-id)
                   (push-id push entity-id)
                   (push-vertex push position)
                   (push-vertex push dir)
                   (push-literal push kind)
                   (push-id push actor-id))
  forward-apply: (lambda (client-id pop)
                   (let* ((entity-id (pop-id pop))
                          (position (pop-vertex& pop))
                          (dir (pop-vertex& pop))
                          (kind (pop-literal pop))
                          (actor-id (pop-id pop)))
                     (apply-fire entity-id position dir kind actor-id)))
  backward-count: 1
  backward-store: (lambda (push entity)
                    (push-entity push entity))
  backward-apply: (lambda (client-id pop)
                    (let* ((entity (pop-entity pop)))
                      (when entity
                        (apply-unfire entity))))))
