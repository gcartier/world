;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World UDP Rate
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;    Barbara Samson


(module world.rate jazz


(import (jazz.math))


;;;
;;;; Connection State
;;;


(class UDP-Connection-State extends Object
  
  
  (slot inflight-packets   getter generate)
  (slot sent               getter generate)     ;; The total amount of data sent so far over the lifetime of the transport connection.
  (slot delivered          getter generate)     ;; The total amount of data delivered so far over the lifetime of the transport connection.
  (slot delivered-time     getter generate)     ;; The wall clock time when C.delivered was last updated.
  (slot delivered-last-seq getter generate)     ;; The last delivered packet sequence
  (slot lost               getter generate)     ;; The total amount of data lost so far over the lifetime of the transport connection.
  (slot inflight           getter generate)     ;; amount of data that is in flight
  (slot prior-inflight     getter generate)     ;; prior_inflight is the amount of data that was in flight before processing this ACK.
  (slot minRTT             getter generate)     ;; smallest round trip
  (slot lastRTT            getter generate)     ;; last round trip
  (slot movingRTT          getter generate)     ;; round trip moving average
  (slot first-sent-time    accessors generate)  ;; If packets are in flight, then this holds the send time of the packet that was most recently marked as delivered. Else, if the connection was recently idle, then this holds the send time of most recently sent packet.
  (slot app-limited        accessors generate)  ;; The index of the last transmitted packet marked as application-limited, or 0 if the connection is not currently application-limited.
  
  
  (method override (initialize self)
    (nextmethod self)
    (set! inflight-packets (make-table test: equal?))
    (set! sent 0)
    (set! delivered 0)
    (set! delivered-time 0)
    (set! delivered-last-seq -1)
    (set! lost 0)
    (set! inflight 0)
    (set! prior-inflight 0)
    (set! minRTT +inf.0)
    (set! lastRTT +inf.0)
    (set! movingRTT (new Exponential-Moving (/ 128.)))
    (set! first-sent-time 0)
    (set! app-limited 0))
  
  
  (method protected (packet-sent self sent-time sequence size)
    (let ((ps (new UDP-Packet-State sent-time sequence size)))
      (table-set! inflight-packets sequence ps)
      (set! sent (+ sent size))
      (set! inflight (+ inflight size))
      ps))
  
  
  (method protected (ack-received self sequence)
    (if (<= sequence delivered-last-seq)
        #f
      (set! prior-inflight inflight)
      (loop (for seq from (+ delivered-last-seq 1) below sequence)
            (update-lost self seq))
      (let ((ps (table-ref inflight-packets sequence #f)))
        (assert ps)
        (table-clear inflight-packets sequence)
        (set! delivered-last-seq sequence)
        (let ((size (get-size ps)))
          (set! delivered (+ delivered size))
          (set! delivered-time (current-seconds))
          (set! inflight (- inflight size)))
        (let ((rtt (- delivered-time (get-sent-time ps))))
          (when (< rtt minRTT)
            (set! minRTT rtt))
          (set! lastRTT rtt)
          (update movingRTT rtt)
          (set-rtt ps rtt)
          ps))))
  
  
  (method protected (update-lost self seq)
    (let ((ps (table-ref inflight-packets seq #f)))
      (when ps
        (table-clear inflight-packets seq)
        (let ((size (get-size ps)))
          (set! lost (+ lost size))
          (set! inflight (- inflight size)))))))


;;;
;;;; Packet State
;;;


(class UDP-Packet-State extends Object
  
  
  (slot sent-time       getter generate)     ;; The time when the packet was sent.
  (slot sequence        getter generate)
  (slot size            getter generate)
  (slot rtt             accessors generate)
  (slot delivered       accessors generate)  ;; C.delivered at the time the packet was sent.
  (slot delivered-time  accessors generate)  ;; C.delivered_time at the time the packet was sent.
  (slot first-sent-time accessors generate)  ;; C.first_sent_time at the time the packet was sent.
  (slot app-limited?    accessors generate)  ;; C.app_limited at the time the packet was sent.
  
  
  (method override (initialize self sent-time sequence size)
    (nextmethod self)
    (set! self.sent-time sent-time)
    (set! self.sequence sequence)
    (set! self.size size)))


;;;
;;;; Rate Sample
;;;


(class UDP-Rate-Sample extends Object
  
  
  (slot delivery-rate    getter generate)  ;; The delivery rate sample (in most cases rs.delivered / rs.interval).
  (slot delivery-average getter generate)  ;; Moving average of the delivery rate sample.
  (slot app-limited?     getter generate)  ;; The P.is_app_limited from the most recent packet delivered; indicates whether the rate sample is application-limited.
  (slot interval         getter generate)  ;; The length of the sampling interval.
  (slot delivered        getter generate)  ;; The amount of data marked as delivered over the sampling interval.
  (slot prior-delivered  getter generate)  ;; The P.delivered count from the most recent packet delivered.
  (slot prior-time       getter generate)  ;; The P.delivered_time from the most recent packet delivered.
  (slot send-elapsed     getter generate)  ;; Send time interval calculated from the most recent packet delivered (see the "Send Rate" section above).
  (slot ack-elapsed      getter generate)  ;; ACK time interval calculated from the most recent packet delivered (see the "ACK Rate" section above).
  
  
  (method override (initialize self)
    (nextmethod self)
    (set! delivery-rate 0.)
    (set! delivery-average -1.)
    (set! prior-delivered 0)
    (set! prior-time 0))
  
  
  ;;  Called on each packet sent
  (method protected (packet-sent self cs ps)
    (set-first-sent-time ps (get-first-sent-time cs))
    (set-delivered-time ps (get-delivered-time cs))
    (set-delivered ps (get-delivered cs))
    (set-app-limited? ps (/= (get-app-limited cs) 0)))

  
  ;;  Called on each ACK received
  (method protected (ack-received self cs ps)
    (let ((C.delivered-time (get-delivered-time cs))
          (P.delivered-time (get-delivered-time ps))
          (P.delivered (get-delivered ps))
          (P.app-limited? (get-app-limited? ps))
          (P.sent-time (get-sent-time ps))
          (P.first-sent-time (get-first-sent-time ps)))
      (when (> P.delivered prior-delivered)
        (set! prior-delivered P.delivered)
        (set! prior-time P.delivered-time)
        (set! app-limited? P.app-limited?)
        (set! send-elapsed (- P.sent-time P.first-sent-time))
        (set! ack-elapsed (- C.delivered-time P.delivered-time))
        (set-first-sent-time cs P.sent-time)))
    (generate-rate-sample self cs ps))
  
  
  ;;  Upon receiving ACK, fill in delivery rate sample rs
  (method protected (generate-rate-sample self cs ps)
    (let ((C.app-limited (get-app-limited cs))
          (C.delivered (get-delivered cs)))
      ;; Clear app-limited field if bubble is ACKed and gone.
      (when (and (> C.app-limited 0) (> C.delivered C.app-limited))
        (set-app-limited cs 0))
      (if (= prior-time 0)
          #f ;; nothing delivered on this ACK
        ;; Use the longer of the send-elapsed and ack-elapsed
        (set! interval (max send-elapsed ack-elapsed))
        (set! delivered (- C.delivered prior-delivered))
        ;; Normally we expect interval >= MinRTT.
        ;; Note that rate may still be over-estimated when a spuriously
        ;; retransmitted skb was first (s)acked because "interval"
        ;; is under-estimated (up to an RTT). However, continuously
        ;; measuring the delivery rate during loss recovery is crucial
        ;; for connections suffer heavy or prolonged losses.
        (if (< interval (get-minRTT cs))
            (begin
              (set! interval -1)
              #f)
          (when (/= interval 0)
            (set! delivery-rate (/ delivered interval))
            (set! delivery-average (if (= delivery-average -1.) delivery-rate (/ (+ (* 255. delivery-average) delivery-rate) 256.))))
          #t))))))
