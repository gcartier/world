;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; Player
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.player jazz


(import (world)
        (world.actor)
        (world.autoload)
        (world.dye)
        (world.geometry)
        (world.settings)
        (world.syntax (phase syntax)))


(definition protected floor-deceleration <fl>
  .25)

(definition protected air-deceleration <fl>
  .05)


(class Player extends Actor
  
  
  (properties (;; component
               name visible?
               ;; element
               position lookat scale radiuses radius color user-data
               ;; entity
               model animate? animation
               ;; actor
               velocity fall-velocity life global-cooldown spell adjustments rapid-fire-acceleration rapid-fire-duration rapid-fire-cooldown last-missile max-missiles missiles-count history-color jumping? jump-ready? jump-grace? jump-time ground? rotation orientation sprint sprint-duration animation-active
               ;; player
               state)
    
    :custom-marshalling)
  
  
  (method meta override (marshall-object obj)
    (let ((size (marshall-size)))
      (let ((content (make-vector (+ size 2))))
        (marshall-to obj content)
        (let ((morphing (get-morphing~ obj)))
          (let ((animation (and morphing (get-animation~ morphing)))
                (transition (and morphing (get-transition~ morphing))))
            (vector-set! content size (and animation (list (get-name~ animation)
                                                           (get-current-frame~ morphing))))
            (vector-set! content (+ size 1) (and transition (list (get-name~ (get-animation~ transition))
                                                                  (get-transition-frame~ morphing)
                                                                  (get-transition-elapsed~ morphing)
                                                                  (get-transition-duration~ morphing))))))
        (serialize-object (class-of obj) content))))
  
  
  (method meta override (unmarshall-object content)
    (let ((obj (new self))
          (size (marshall-size)))
      (unmarshall-from obj content)
      (let ((animation (vector-ref content size)))
        (when animation
          (bind (animation-name current-frame) animation
            (change-morphing~ obj animation-name frame: current-frame)
            (goto-frame~ (get-morphing~ obj) current-frame)
            (let ((transition (vector-ref content (+ size 1))))
              (when transition
                (bind (name frame elapsed duration) transition
                  (transition-morphing~ obj name frame: frame duration: duration elapsed: elapsed)))))))
      obj))
  
  
  (slot state      <symbol+> initialize #f accessors generate)
  (slot controlled <object>  initialize #f accessors generate)
  
  
  (method override (prepare rest)
    (nextmethod rest)
    (set-color (dye .678 .047 .902 1.))
    (update-model))
  
  
  (method override (finish rest)
    (nextmethod rest)
    (standardize-lookat! lookat))
  
  
  (method (update-model)
    (let ((world (current-world)))
      (let ((new-model (case (get-vehicle~ world)
                         ((wheels) 'CharacterOnWheels)
                         ((hummer) 'CharacterOnHummer)
                         ((saucer) 'CharacterOnSaucer)
                         ((rocket) 'CharacterOnRocket)
                         (else @old 'Character
                          "character/bloodelffemale"))))
        (when (neq? new-model model)
          (set-model new-model)
          (when (equal? new-model "character/bloodelffemale")
            (set-scaling .75)
            (free-morphing)
            (setup-morphing)
            (set-animate? #t)
            (set-orientation 'vertical))))))
  
  
  (method override (print output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{a} {a}" name position))))
  
  
  (method override (is-player?)
    #t)
  
  
  ;;;
  ;;;; History
  ;;;
  
  
  (method override (history-draw-trail?)
    #t)
  
  
  ;;;
  ;;;; Actions
  ;;;
  
  
  (method override (attack-amount amount)
    (* amount (world-setting 'world.power 1.)))
  
  
  (method override (wound inflictor)
    (nextmethod inflictor)
    (let ((world (current-world)))
      (let ((character-pane (child~ (get-interface~ world) 'character)))
        (set-visible?~ character-pane #t)
        (invalidate-view~ character-pane))))
  
  
  (method override (wound-amount critical?)
    (/ (nextmethod critical?) (world-setting 'world.armor 1.)))
  
  
  (method override (die)
    (let ((world (current-world))
          (zone (current-zone))
          (me (current-me)))
      (play-game-sound~ world (death-sound))
      (set-life 100)
      (invalidate-view~ (child~ (get-interface~ world) 'character))
      (resurrect-player~ zone me)
      (when (eq? self me)
        (eye-behind-player~ world)
        (follow-player~ world))))
  
  
  (method (control actor)
    (let ((world (current-world)))
      (set! controlled actor)
      (eye-behind-actor~ world actor)
      (follow-actor~ world actor)))
  
  
  (method (relinquish-control)
    (let ((world (current-world)))
      (set! controlled #f)
      (eye-behind-player~ world)
      (follow-player~ world)))
  
  
  (method (effective-controlled)
    (or controlled self))
  
  
  (method override (tick-slice)
    .04)
  
  
  (method override (tick-actions commands)
    (tick-actor-actions~ (effective-controlled) commands))
  
  
  (method override (tick commands time elapse exit)
    (unless (= elapse 0.)
      (tick-actor~ (effective-controlled) commands time elapse exit #t 'slide)))
  
  
  (method override (hit collisions exit)
    )
  
  
  (method (move-backward commands)
    (move-backward~ commands))
  
  
  (method (move-forward commands)
    (move-forward~ commands))
  
  
  (method (run-forward commands)
    (run-forward~ commands))
  
  
  (method (run-backward commands)
    (run-backward~ commands))
  
  
  (method (blink-forward commands)
    (blink-forward~ commands))
  
  
  (method (blink-backward commands)
    (blink-backward~ commands))
  
  
  (method (move-left commands)
    (move-left~ commands))
  
  
  (method (move-right commands)
    (move-right~ commands))
  
  
  (method (move-up commands)
    (move-up~ commands))
  
  
  (method (move-down commands)
    (move-down~ commands))
  
  
  (method (rotate-left commands)
    (rotate-left~ commands))
  
  
  (method (rotate-right commands)
    (rotate-right~ commands))
  
  
  (method (space commands)
    (jump commands))
  
  
  (method (jump commands)
    (jump~ commands))
  
  
  (method (win)
    (set! jumping? #f)
    (set! state 'win))
  
  
  (method (lose)
    (set! jumping? #f)
    (set! state 'lose))
  
  
  (method (reset-state)
    (set! state #f))
  
  
  (method (reset-position)
    (let ((zone (current-zone)))
      (set-position (or (get-start-position~ zone) (vertex -9.5 62.5 0.0)))
      (set-velocity (vertex 0. 0. 0.))))
  
  
  ;;;
  ;;;; Sounds
  ;;;
  
  
  (method override (wound-sound)
    "sound/female/wound")
  
  (method override (wound-critical-sound)
    "sound/female/woundCritical")
  
  (method override (death-sound)
    "sound/female/death")))
