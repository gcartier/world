;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Player
;;;


(module world.player jazz


(import (jazz.geometry)
        (jazz.graphic)
        (jazz.graphic.opengl.glew)
        (jazz.io)
        (jazz.library)
        (jazz.literals)
        (jazz.media)
        (jazz.network)
        (jazz.platform)
        (jazz.platform.cairo)
        (jazz.runtime)
        (jazz.system)
        (jazz.ui)
        (jazz.ui.dialog)
        (jazz.ui.window)
        (time)
        (world)
        (world.autoload)
        (world.actor)
        (world.block)
        (world.enemy)
        (world.foreign)
        (world.geometry)
        (world.history)
        (world.object)
        (world.sprite)
        (world.texture)
        (world.window)
        (world.client.window))


;;;
;;;; Player
;;;


(definition player-speed
  .5)

(definition floor-deceleration
  .25)

(definition air-deceleration
  .05)

(definition max-vy
  -.8)

(definition die-bottom
  -6.)


(class Player extends Actor
  

  (slot ready?        <bool>      initialize #f    accessors generate)
  (slot jumping?      <bool>      initialize #f    accessors generate)
  (slot floor?        <bool>      initialize #f    accessors generate)
  (slot facing        <symbol>    initialize 'left accessors generate)
  (slot state         <symbol+>   initialize #f    accessors generate)
  (slot movement      <f32vector> initialize (make-vertex) accessors generate)
  (slot history-color <object>    initialize #f    accessors generate)
  
  
  (method override (prepare rest)
    (nextmethod rest)
    (set! width 4.)
    (set! height 4.)
    (set! depth 4.)
    (set-texture (get-player-texture~ world))
    (set-color {Color red: 173 green: 12 blue: 230}))
  
  
  (method override (finish rest)
    (nextmethod rest)
    (standardize!~ lookat))
  
  
  (method override (print output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{a} {r precision: 1} {r precision: 1} {r precision: 1}" name x y z))))
  
  
  (method override (update-color)
    (nextmethod)
    (let ((color (copy-object~ color #f)))
      (set-alpha~ color .2)
      (set! history-color color)))
  
  
  (method override (tick commands elapse)
    (continuation-capture
      (lambda (exit)
        (define (win-hit objects)
          (when (member? 'win objects key: get-user-data~)
            (win~ world self)
            (continuation-return exit)))
        
        (let ((old-left left)
              (old-bottom bottom)
              (old-back back)
              (old-position (get-position))
              (moving? #f)
              (target-vx #f)
              (target-vz #f)
              (factor (* elapse 65))
              (first-person? (get-first-person?~ world))
              (fly? (get-fly?~ world)))
          (when (get-modified?~ commands)
            (for-each (lambda (action)
                        (bind (name . arguments) action
                          (case name
                            ((track)
                             (bind (dh dv eye-sight eye-up eye-right first?) arguments
                               (track-player~ world self dh dv eye-sight eye-up eye-right first?)))
                            ((fire)
                             (bind (direction) arguments
                               (when first-person?
                                 (fire-missile direction))))
                            ((sit)
                             (sit-down)))))
                      (get-actions~ commands))
            (when (get-move-left?~ commands)
              (set! moving? #t)
              (set! target-vx (- player-speed)))
            (when (get-move-right?~ commands)
              (set! moving? #t)
              (set! target-vx player-speed))
            (when (get-move-down?~ commands)
              (if first-person?
                  (begin
                    (move-player-backward~ world self factor)
                    (decrease! rtri 2.5))
                (set! moving? #t)
                (set! target-vz player-speed)))
            (when (get-move-up?~ commands)
              (if first-person?
                  (begin
                    (move-player-forward~ world self factor)
                    (unless fly?
                      (increase! rtri 2.5)))
                (set! moving? #t)
                (set! target-vz (- player-speed))))
            (when (get-strafe-left?~ commands)
              (when first-person?
                (strafe-player-left~ world self factor)))
            (when (get-strafe-right?~ commands)
              (when first-person?
                (strafe-player-right~ world self factor)))
            (when (get-strafe-up?~ commands)
              (when fly?
                (strafe-player-up~ world self factor)))
            (when (get-strafe-down?~ commands)
              (when fly?
                (strafe-player-down~ world self factor)))
            (when (get-rotate-left?~ commands)
              (when first-person?
                (rotate-player-left~ world self factor)))
            (when (get-rotate-right?~ commands)
              (when first-person?
                (rotate-player-right~ world self factor)))
            (when (and fly?
                       (not (get-rotate-left?~ commands))
                       (not (get-rotate-right?~ commands)))
              (reset-player-tilt~ world self)))
          (when (not moving?)
            (set! target-vx 0.)
            (set! target-vz 0.))
          (when target-vx
            (let ((deceleration (if jumping? air-deceleration floor-deceleration)))
              (cond ((> (vertex-x velocity) target-vx)
                     (vertex-x-set! velocity (- (vertex-x velocity) deceleration))
                     (if (< (vertex-x velocity) target-vx)
                         (vertex-x-set! velocity target-vx)))
                    ((< (vertex-x velocity) target-vx)
                     (vertex-x-set! velocity (+ (vertex-x velocity) deceleration))
                     (if (> (vertex-x velocity) target-vx)
                         (vertex-x-set! velocity target-vx))))))
          (when target-vz
            (let ((deceleration (if jumping? air-deceleration floor-deceleration)))
              (cond ((> (vertex-z velocity) target-vz)
                     (vertex-z-set! velocity (- (vertex-z velocity) deceleration))
                     (if (< (vertex-z velocity) target-vz)
                         (vertex-z-set! velocity target-vz)))
                    ((< (vertex-z velocity) target-vz)
                     (vertex-z-set! velocity (+ (vertex-z velocity) deceleration))
                     (if (> (vertex-z velocity) target-vz)
                         (vertex-z-set! velocity target-vz))))))
          (if (not (get-jump?~ commands))
              (set! ready? #t)
            (when (and floor? ready? (not jumping?))
              (set! ready? #f)
              (set! jumping? #t)
              (vertex-y-set! velocity (get-jump-impulsion~ world))))
          
          (increase! x (* (vertex-x velocity) factor))
          (increase! z (* (vertex-z velocity) factor))
          (unless fly?
            (let ((gravity (compute-gravity~ zone position)))
              (vertex+! velocity velocity gravity)
              (vertex+! position position velocity)
              (set! x (vertex-x position))
              (set! y (vertex-y position))
              (set! z (vertex-z position)))
            @need-to-generalize-gravity-as-vector
            (let ((gravity (get-gravity~ world))
                  (adjusted (* elapse 50.)))
              (vertex-y-set! velocity (- (vertex-y velocity) (* gravity adjusted)))
              (increase! y (- (* (vertex-y velocity) adjusted) (* gravity .5 adjusted adjusted)))))
          (when (< (vertex-y velocity) max-vy)
            (vertex-y-set! velocity max-vy))
          (receive (hit-x hit-y hit-z) (hit-test~ zone self old-left old-bottom old-back (- x radius-x) (- y radius-y) (- z radius-z) width height depth radius-x radius-y radius-z)
            (when hit-x
              (bind (objects direction border reset) hit-x
                (win-hit objects)
                (set! x reset)))
            (if (not hit-y)
                (set! floor? #f)
              (bind (objects direction border reset) hit-y
                (win-hit objects)
                (set! y reset)
                (vertex-y-set! velocity 0.)
                (when (= direction -1)
                  (set! jumping? #f)
                  (set! floor? #t)
                  (for-each (lambda (obj)
                              (when (and (is? obj Actor) (stomp~ obj))
                                (vertex-y-set! velocity 3.)))
                            objects))))
            (when hit-z
              (bind (objects direction border reset) hit-z
                (win-hit objects)
                (set! z reset))))
          (let ((floor-level (+ (get-floor-level~ world) radius-y)))
            (when (and (< y floor-level) (not fly?))
              (set! y floor-level)
              (vertex-y-set! velocity 0.)
              (set! jumping? #f)
              (set! floor? #t)))
          @w
          (when (< y die-bottom)
            (lose~ world self)
            (continuation-return exit))
          (update-position)
          (update-area~ zone self old-position)
          (vertex-! movement position old-position)
          (when (and (eq? self me)
                     (or (/= left old-left)
                         (/= bottom old-bottom)
                         (/= back old-back)))
            (camera-center-player~ world))))))
  
  
  (method (fire-missile direction)
    (let ((target (player-target~ world self)))
      (let ((center (vertex+ target (vertex-scalar* direction 5.))))
        (let ((missile (new Missile parent: world x: (vertex-x center) y: (vertex-y center) z: (vertex-z center))))
          (set-velocity~ missile (vertex-scalar* direction missile-speed))
          (add-sprite~ zone missile)))))
  
  
  (method (sit-down)
    )
  
  
  (method (move-left commands)
    (move-left~ commands))
  
  
  (method (move-right commands)
    (move-right~ commands))
  
  
  (method (move-down commands)
    (move-down~ commands))
  
  
  (method (move-up commands)
    (move-up~ commands))
  
  
  (method (strafe-left commands)
    (strafe-left~ commands))
  
  
  (method (strafe-right commands)
    (strafe-right~ commands))
  
  
  (method (strafe-up commands)
    (strafe-up~ commands))
  
  
  (method (strafe-down commands)
    (strafe-down~ commands))
  
  
  (method (rotate-left commands)
    (rotate-left~ commands))
  
  
  (method (rotate-right commands)
    (rotate-right~ commands))
  
  
  (method (space commands)
    (jump commands))
  
  
  (method (jump commands)
    (jump~ commands))
  
  
  (method (fire commands)
    (add-action~ commands 'fire (list (get-sight~ (get-eye-lookat~ world)))))
  
  
  (method (win)
    (set! jumping? #f)
    (set! state 'win)
    (update-position))
  
  
  (method (lose)
    (set! jumping? #f)
    (set! state 'lose)
    (update-position))
  
  
  (method (reset-state)
    (set! state #f))
  
  
  (method (reset-position)
    (set-position (or (get-start-position~ zone) (vertex -9.5 62.5 0.0))))
  
  
  ;;;
  ;;;; Draw
  ;;;
  
  
  (method (draw-model)
    (let ((model (get-test-model~ world))
          (scale .1))
      (set-matrix~ model (matrix-multiply (make-translation-matrix x (- y 2.) z) (matrix-multiply (make-scaling-matrix scale scale scale) (make-lookat-matrix lookat))))
      (draw-model~ model)))
  
  
  (method override (draw-3d)
    (define (draw-weel x y z s)
      (glPushMatrix)
      (glTranslatef x y z)
      (glRotatef (* rtri 2) 1.0 0.0 0.0)
      (glRotatef 90.0 0.0 1.0 0.0)
      (glColor4f .5 .5 .5 alpha)
      (gl-sphere s 15 30)
      (glPopMatrix))
    
    (draw-model)
    @w
    (if (in-history?)
        (draw-3d-history)
      (let ((mount (get-mount~ world)))
        (glPushMatrix)
        (glTranslatef x y z)
        (glEnable GL_CULL_FACE)
        (glCullFace GL_FRONT)
        (when lookat
          (let* ((sight (if #t @w (vertex-zero? movement) (get-sight~ lookat) (vertex-normalize (vertex (vertex-x movement) 0. (vertex-z movement)))))
                 (up @w (get-world-up~ world) (get-up~ lookat))
                 (right (vertex-normalize (cross-product sight up))))
            (glMultMatrixv
              (vertex-x right) (vertex-x up) (vertex-x sight) 0.
              (vertex-y right) (vertex-y up) (vertex-y sight) 0.
              (vertex-z right) (vertex-z up) (vertex-z sight) 0.
              0. 0. 0. 1.)))
        (glColor4f red green blue alpha)
        (draw-as-sphere (eq? mount 'none))
        ;; weels
        (when (eq? mount 'weels)
          (glPolygonMode GL_FRONT_AND_BACK GL_LINE)
          (let ((d 1.5)
                (s .5))
            (draw-weel d -1.5 d s)
            (draw-weel d -1.5 (- d) s)
            (draw-weel (- d) -1.5 d s)
            (draw-weel (- d) -1.5 (- d) s))
          (glPolygonMode GL_FRONT_AND_BACK GL_FILL))
        ;; eyes
        (glPushMatrix)
        (glRotatef 90.0 0.0 1.0 0.0)
        (glPolygonMode GL_FRONT_AND_BACK GL_FILL)
        (glColor4f 0. 0. 1. alpha)
        (glPushMatrix)
        (glTranslatef -1.2 .8 -.9)
        (glScalef .1 .1 .1)
        (gl-sphere radius-x 26 52)
        (glPopMatrix)
        (glPushMatrix)
        (glTranslatef -1.2 .8 .9)
        (glScalef .1 .1 .1)
        (gl-sphere radius-x 26 52)
        (glPopMatrix)
        (glPolygonMode GL_FRONT_AND_BACK GL_FILL)
        (glPopMatrix)
        (glCullFace GL_BACK)
        (glDisable GL_CULL_FACE)
        (glPopMatrix)
        ;; fly
        (when (get-fly?~ world)
          (glPushMatrix)
          (glTranslatef x y z)
          (let ((sight (get-sight~ lookat))
                (up (get-up~ lookat))
                (right (get-right~ lookat)))
            (glMultMatrixv
              (vertex-x right) (vertex-x up) (vertex-x sight) 0.
              (vertex-y right) (vertex-y up) (vertex-y sight) 0.
              (vertex-z right) (vertex-z up) (vertex-z sight) 0.
              0. 0. 0. 1.))
          (glColor4f .4 0. 0. 1.)
          (let ((width 16.)
                (depth 8.))
            (let ((x1 (- depth))
                  (x2 depth)
                  (y (- radius-y))
                  (z1 (- width))
                  (z2 width))
              ;; flying carpet
              (glNormal3f 0.0 -1.0 0.0)
              (glBegin GL_QUADS)
              (glVertex3f x2 y z2)
              (glVertex3f x1 y z2)
              (glVertex3f x1 y z1)
              (glVertex3f x2 y z1)
              (glEnd)))
          (glPopMatrix)))))
  
  
  (method (draw-3d-history)
    (let ((x1 (get-left))
          (x2 (get-right))
          (y1 (get-bottom))
          (y2 (get-top))
          (z1 (get-back))
          (z2 (get-front)))
      (gl-colorize history-color)
      (render-block x1 x2 y1 y2 z1 z2 GL_LINE_LOOP))))


;;;
;;;; Pacman
;;;


(class Pacman extends Player
  
  
  (method override (finish rest)
    (nextmethod rest)
    (set-color {Color Yellow})))


;;;
;;;; Commands
;;;


(class Commands extends Object
  
  
  (slot move-left?    <bool>   initialize #f getter generate)
  (slot move-right?   <bool>   initialize #f getter generate)
  (slot move-down?    <bool>   initialize #f getter generate)
  (slot move-up?      <bool>   initialize #f getter generate)
  (slot strafe-left?  <bool>   initialize #f getter generate)
  (slot strafe-right? <bool>   initialize #f getter generate)
  (slot strafe-up?    <bool>   initialize #f getter generate)
  (slot strafe-down?  <bool>   initialize #f getter generate)
  (slot rotate-left?  <bool>   initialize #f getter generate)
  (slot rotate-right? <bool>   initialize #f getter generate)
  (slot jump?         <bool>   initialize #f getter generate)
  (slot actions       <object> initialize (new-queue) getter generate)
  (slot modified?     <bool>   initialize #f getter generate)
  
  
  (method override (print output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{l}"
          `(,@(if move-left? '(move-left) '())
            ,@(if move-right? '(move-right) '())
            ,@(if move-down? '(move-down) '())
            ,@(if move-up? '(move-up) '())
            ,@(if strafe-left? '(strafe-left) '())
            ,@(if strafe-right? '(strafe-right) '())
            ,@(if strafe-up? '(strafe-up) '())
            ,@(if strafe-down? '(strafe-down) '())
            ,@(if rotate-left? '(rotate-left) '())
            ,@(if rotate-right? '(rotate-right) '())
            ,@(if jump? '(jump) '()))))))
  
  
  (method public (move-left)
    (set! move-left? #t)
    (set! modified? #t))
  
  (method public (move-right)
    (set! move-right? #t)
    (set! modified? #t))
  
  (method public (move-down)
    (set! move-down? #t)
    (set! modified? #t))
  
  (method public (move-up)
    (set! move-up? #t)
    (set! modified? #t))
  
  
  (method public (strafe-left)
    (set! strafe-left? #t)
    (set! modified? #t))
  
  (method public (strafe-right)
    (set! strafe-right? #t)
    (set! modified? #t))
  
  (method public (strafe-up)
    (set! strafe-up? #t)
    (set! modified? #t))
  
  (method public (strafe-down)
    (set! strafe-down? #t)
    (set! modified? #t))
  
  
  (method public (rotate-left)
    (set! rotate-left? #t)
    (set! modified? #t))
  
  (method public (rotate-right)
    (set! rotate-right? #t)
    (set! modified? #t))
  
  
  (method public (jump)
    (set! jump? #t)
    (set! modified? #t))
  
  
  (method public (add-action name arguments)
    (enqueue actions (cons name arguments))
    (set! modified? #t))
  
  
  (method public (enqueue-action action)
    (enqueue actions action)
    (set! modified? #t))
  
  
  (method public (complete)
    (when (and modified? (is? actions Queue))
      (set! actions (queue-list actions))))
  
  
  (method (serialize)
    (vector move-left?
            move-right?
            move-down?
            move-up?
            strafe-left?
            strafe-right?
            strafe-up?
            strafe-down?
            rotate-left?
            rotate-right?
            jump?
            actions))
  
  
  (method (deserialize vec)
    (set! move-left?    (vector-ref vec 0))
    (set! move-right?   (vector-ref vec 1))
    (set! move-down?    (vector-ref vec 2))
    (set! move-up?      (vector-ref vec 3))
    (set! strafe-left?  (vector-ref vec 4))
    (set! strafe-right? (vector-ref vec 5))
    (set! strafe-up?    (vector-ref vec 6))
    (set! strafe-down?  (vector-ref vec 7))
    (set! rotate-left?  (vector-ref vec 8))
    (set! rotate-right? (vector-ref vec 9))
    (set! jump?         (vector-ref vec 10))
    (set! actions       (vector-ref vec 11))
    (set! modified?     #t)))


(definition public (serialize-commands commands)
  (serialize~ commands))


(definition public (deserialize-commands vec)
  (let ((commands (new Commands)))
    (deserialize~ commands vec)
    commands)))
