;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; Player
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2016
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.player jazz


(import (jazz.graphic)
        (jazz.syntax (phase syntax))
        (world)
        (world.actor)
        (world.area)
        (world.audio)
        (world.autoload)
        (world.camera)
        (world.configure)
        (world.dye)
        (world.geometry)
        (world.model)
        (world.settings)
        (world.support)
        (world.syntax (phase syntax))
        (world.tag)
        (world.task))


(definition protected floor-deceleration <fl>
  .25)

(definition protected air-deceleration <fl>
  .05)


(class Player extends Actor
  
  
  (property avatar        <object> initialize #f  getter generate setter explicit)
  
  (slot aggroed-creatures <list>   initialize '() accessors generate)
  (slot eating            <fl+>    initialize #f  accessors generate)
  (slot eating-ticks      <fx+>    initialize #f  accessors generate)
  (slot controlled        <object> initialize #f  accessors generate)
  (slot task              <object> initialize #f  accessors generate)
  
  
  (method override (prepare rest)
    (nextmethod rest)
    (set-color (dye .678 .047 .902 1.))
    (update-model))
  
  
  (method override (finish rest)
    (nextmethod rest)
    (set! motion 'run))
  
  
  (method override (setup-area-cube)
    (set! area-cube (new Area-Cube 7)))
  
  
  (method (set-avatar avat)
    (set! avatar avat)
    (update-model))
  
  
  (method (update-model)
    (let ((world (current-world))
          (zone (current-zone)))
      (let ((new-model (case (get-vehicle~ world)
                         ((wheels) 'OrbOnWheels)
                         ((hummer) 'OrbOnHummer)
                         ((saucer) 'OrbOnSaucer)
                         ((rocket) 'OrbOnRocket)
                         (else (if avatar
                                   (if (dye? avatar)
                                       (begin
                                         (set-color avatar)
                                         'Orb)
                                     avatar)
                                 (world-setting 'world.avatar "character/bloodelffemale"))))))
        (when (neq? new-model model)
          (free-morphing)
          (set-model new-model)
          ;; reset defaults
          (set-scaling 1.)
          (set-animate? #f)
          (when (string? new-model)
            (metadata-install)
            (setup-morphing)
            (set-animate? #t)
            (set-orientation 'vertical))))))
  
  
  (method (player-camera)
    (find-type Camera))
  
  
  (method override (effective-pumps)
    (get-pumps~ (cache-model)))
  
  
  (method override (walk-speed)
    (/ (run-speed) 3.))
  
  
  (method override (run-speed)
    8.)
  
  
  (method (unaggro)
    (for-each (lambda (creature)
                (set-aggro-target~ creature #f))
              aggroed-creatures)
    (set! aggroed-creatures '()))
  
  
  (method (verify-water)
    (when (get-water?~ self)
      (exit-water~ self))
    (let ((block (current-block~ self)))
      (when (get-water-cube?~ (world.generation:id->block block))
        (enter-water~ self (memq? block '(10 11))))))
  
  
  (method override (print output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{a} {a}" name position))))
  
  
  (method override (is-player?)
    #t)
  
  
  ;;;
  ;;;; History
  ;;;
  
  
  (method override (history-draw-trail?)
    #t)
  
  
  ;;;
  ;;;; Simulation
  ;;;
  
  
  (method (simulation-task task)
    (declare (proper-tail-calls))
    (with-task task
      (lambda (exit)
        (let (iter (previous (current-seconds)))
          ;; not 100% correct if preempted before task-mutex
          (let ((time (current-seconds)))
            (with-task-mutex
              (lambda ()
                (unless (stopping?~ task)
                  (let ((elapse (- time previous))
                        (max-elapse 10.))
                    ;; ignore ridiculous elapses like
                    ;; coming back from computer sleep
                    (unless (> elapse max-elapse)
                      (let ((history (current-history)))
                        (unless (get-paused?~ history)
                          (tick-simulation time elapse))))))))
            (let ((duration (- (current-seconds) time)))
              (task-sleep task simulation-period duration exit))
            (iter time))))))
  
  
  (method (tick-simulation time elapse)
    (let ((world (current-world)))
      (site (simulation on?: #t)
        (when simulation-algorithm
          (set-position (vertex+& position (vertex-scalar*& effective-velocity elapse))))
        (animate elapse))))
  
  
  ;;;
  ;;;; Actions
  ;;;
  
  
  (method override (damage amount critical?)
    (nextmethod amount critical?)
    (let ((interface (current-interface)))
      (let ((pane (child~ interface 'combat)))
        (set-visible?~ pane #t)
        (invalidate-view~ pane))
      (let ((pane (child~ interface 'character)))
        (when (get-visible?~ pane)
          (view-health~ pane))
        (damage-armor~ pane critical?))
      (stop-eating)))
  
  
  (method override (attack kind)
    (let ((interface (current-interface)))
      (let ((pane (child~ interface 'character)))
        (case kind
          ((bullet) (damage-weapon~ pane))
          ((arrow) (damage-bow~ pane)))))
    (stop-eating))
  
  
  (method override (wound-amount critical?)
    (/ (nextmethod critical?) armor-factor))
  
  
  (method override (die)
    (let ((interface (current-interface))
          (world (current-world))
          (zone (current-zone))
          (me (current-me)))
      (sleep .5)
      (play-3d-sound-if (death-sound) position)
      (display-message~ world (format "R.I.P. {a}" (get-name)) color: {Color Orange})
      (unaggro)
      (set-life 100.)
      (set-alive? #t)
      (set-lava? #f)
      (set-water? #f)
      (invalidate-view~ (child~ interface 'combat))
      (resurrect-player~ zone me)
      (when (eq? self me)
        (eye-behind-player~ world)
        (follow-player~ world))))
  
  
  (method (stop-eating)
    (set! eating #f)
    (set! eating-ticks #f))
  
  
  (method (control actor)
    (let ((world (current-world)))
      (set! controlled actor)
      (eye-behind-actor~ world actor)
      (follow-actor~ world actor)))
  
  
  (method (relinquish-control)
    (let ((world (current-world)))
      (set! controlled #f)
      (eye-behind-player~ world)
      (follow-player~ world)))
  
  
  (method (effective-controlled)
    (or controlled self))
  
  
  (method override (tick-slice)
    .04)
  
  
  (method override (tick-actions commands)
    (tick-actor-actions~ (effective-controlled) commands))
  
  
  (method override (tick commands time elapse)
    (unless (= elapse 0.)
      (tick-actor~ (effective-controlled) commands time elapse #t 'slide)))
  
  
  (method override (hit collisions)
    )
  
  
  (method (move-backward commands)
    (move-backward~ commands))
  
  
  (method (move-forward commands)
    (move-forward~ commands))
  
  
  (method (sprint-forward commands)
    (sprint-forward~ commands))
  
  
  (method (sprint-backward commands)
    (sprint-backward~ commands))
  
  
  (method (blink-forward commands)
    (blink-forward~ commands))
  
  
  (method (blink-backward commands)
    (blink-backward~ commands))
  
  
  (method (move-left commands)
    (move-left~ commands))
  
  
  (method (move-right commands)
    (move-right~ commands))
  
  
  (method (move-up commands)
    (move-up~ commands))
  
  
  (method (move-down commands)
    (move-down~ commands))
  
  
  (method (rotate-left commands)
    (rotate-left~ commands))
  
  
  (method (rotate-right commands)
    (rotate-right~ commands))
  
  
  (method (space commands)
    (jump commands))
  
  
  (method (jump commands)
    (jump~ commands))))
