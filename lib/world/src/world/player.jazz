;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Player
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2013
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.player jazz


(import (jazz.graphic)
        (world)
        (world.actor)
        (world.autoload)
        (world.boost)
        (world.dye)
        (world.geometry)
        (world.serialization)
        (world.syntax (phase syntax)))


(definition protected floor-deceleration <fl>
  .25)

(definition protected air-deceleration <fl>
  .05)


(class Player extends Actor
  

  (slot state      <symbol+> initialize #f accessors generate)
  (slot controlled <object>  initialize #f accessors generate)
  
  
  (method override (prepare rest)
    (nextmethod rest)
    (set-color (dye .678 .047 .902 1.))
    (update-model))
  
  
  (method override (finish rest)
    (nextmethod rest)
    (standardize-lookat! lookat))
  
  
  (method (update-model)
    (let ((world (current-world)))
      (let ((new-model (case (get-vehicle~ world)
                         ((wheels) 'CharacterOnWheels)
                         ((saucer) 'CharacterOnSaucer)
                         (else 'Character))))
        (when (neq? new-model model)
          (set-model new-model)))))
  
  
  (method override (print output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{a} {a}" name position))))
  
  
  (method meta override (marshall-object obj)
    (serialize-object (class-of obj)
                      (vector
                        ;; component
                        (serialize (get-name~ obj))
                        (serialize (get-visible?~ obj))
                        ;; element
                        (serialize (get-position~ obj))
                        (serialize (get-lookat~ obj))
                        (serialize (get-scale~ obj))
                        (serialize (get-radiuses~ obj))
                        (serialize (get-radius~ obj))
                        (serialize (get-color~ obj))
                        (serialize (get-hit-behavior~ obj))
                        (serialize (get-user-data~ obj))
                        ;; entity
                        (get-model~ obj)
                        (get-animate?~ obj)
                        (get-animation~ obj)
                        ;; actor
                        (serialize (get-velocity~ obj))
                        (serialize (get-fall-velocity~ obj))
                        (serialize (get-direction~ obj))
                        (serialize (get-life~ obj))
                        (serialize (get-global-cooldown~ obj))
                        (serialize (get-spell~ obj))
                        (serialize (get-adjustments~ obj))
                        (serialize (get-rapid-fire-acceleration~ obj))
                        (serialize (get-rapid-fire-duration~ obj))
                        (serialize (get-rapid-fire-cooldown~ obj))
                        (serialize (get-last-missile~ obj))
                        (serialize (get-max-missiles~ obj))
                        (serialize (get-missiles-count~ obj))
                        (serialize (get-history-color~ obj))
                        ;; player
                        (serialize (get-jumping?~ obj))
                        (serialize (get-jump-ready?~ obj))
                        (serialize (get-jump-grace?~ obj))
                        (serialize (get-jump-time~ obj))
                        (serialize (get-ground?~ obj))
                        (serialize (get-state~ obj))
                        (serialize (get-movement~ obj))
                        (serialize (get-rotation~ obj))
                        (serialize (get-acceleration~ obj))
                        (serialize (get-animation-active~ obj))
                        (serialize (get-animation-start~ obj))
                        (serialize (get-animation-end~ obj))
                        (serialize (get-animation-next~ obj)))))
  
  
  (method meta override (unmarshall-object content)
    (bind-vector (;; component
                  name
                  visible?
                  ;; element
                  position
                  lookat
                  scale
                  radiuses
                  radius
                  color
                  hit-behavior
                  user-data
                  ;; entity
                  model
                  animate?
                  animation
                  ;; actor
                  velocity
                  fall-velocity
                  direction
                  life
                  global-cooldown
                  spell
                  adjustments
                  rapid-fire-acceleration
                  rapid-fire-duration
                  rapid-fire-cooldown
                  last-missile
                  max-missiles
                  missiles-count
                  history-color
                  ;; player
                  jumping?
                  jump-ready?
                  jump-grace?
                  jump-time
                  ground?
                  state
                  movement
                  rotation
                  acceleration
                  animation-active
                  animation-start
                  animation-end
                  animation-next)
        content
      (let ((obj (new self name: name visible?: visible?)))
        ;; element
        (set-position~ obj (deserialize position))
        (set-lookat~ obj (deserialize lookat))
        (set-scale~ obj (deserialize scale))
        (set-radiuses~ obj (deserialize radiuses))
        (set-radius~ obj (deserialize radius))
        (set-color~ obj (deserialize color))
        (set-hit-behavior~ obj (deserialize hit-behavior))
        (set-user-data~ obj (deserialize user-data))
        ;; entity
        (set-model~ obj (deserialize model))
        (set-animate?~ obj (deserialize animate?))
        (set-animation~ obj (deserialize animation))
        ;; actor
        (set-velocity~ obj (deserialize velocity))
        (set-fall-velocity~ obj (deserialize fall-velocity))
        (set-direction~ obj (deserialize direction))
        (set-life~ obj (deserialize life))
        (set-global-cooldown~ obj (deserialize global-cooldown))
        (set-spell~ obj (deserialize spell))
        (set-adjustments~ obj (deserialize adjustments))
        (set-rapid-fire-acceleration~ obj (deserialize rapid-fire-acceleration))
        (set-rapid-fire-duration~ obj (deserialize rapid-fire-duration))
        (set-rapid-fire-cooldown~ obj (deserialize rapid-fire-cooldown))
        (set-last-missile~ obj (deserialize last-missile))
        (set-max-missiles~ obj (deserialize max-missiles))
        (set-missiles-count~ obj (deserialize missiles-count))
        (set-history-color~ obj (deserialize history-color))
        ;; player
        (set-jumping?~ obj (deserialize jumping?))
        (set-jump-ready?~ obj (deserialize jump-ready?))
        (set-jump-grace?~ obj (deserialize jump-grace?))
        (set-jump-time~ obj (deserialize jump-time))
        (set-ground?~ obj (deserialize ground?))
        (set-state~ obj (deserialize state))
        (set-movement~ obj (deserialize movement))
        (set-rotation~ obj (deserialize rotation))
        (set-acceleration~ obj (deserialize acceleration))
        (set-animation-active~ obj (deserialize animation-active))
        (set-animation-start~ obj (deserialize animation-start))
        (set-animation-end~ obj (deserialize animation-end))
        (set-animation-next~ obj (deserialize animation-next)))))
  
  
  (method public inline (set-movement mvt <f64vector>) <void>
    (vertex-copy! movement mvt))
  
  
  (method override (is-player?)
    #t)
  
  
  ;;;
  ;;;; Actions
  ;;;
  
  
  (method override (wound)
    (nextmethod)
    (let ((world (current-world)))
      (let ((character-pane (child~ (get-interface~ world) 'character)))
        (set-visible?~ character-pane #t)
        (invalidate-view~ character-pane))))
  
  
  (method override (die)
    (let ((world (current-world))
          (zone (current-zone))
          (me (current-me)))
      (play-sound-file~ world (death-sound))
      (display-message~ world (format "{a} died" name) color: {Color Red})
      (set-life 100)
      (invalidate-view~ (child~ (get-interface~ world) 'character))
      (let ((old-position (copy-vertex (get-position))))
        (set-position (vertex -127.6 17.0 -138.0))
        (set-velocity (vertex 0. 0. 0.))
        (update-element~ zone self old-position))
      (init-lookat (vertex .6830981969833374 -.15438011288642883 .7138231992721558)
                   (vertex .10673626512289047 .9880115389823914 .11153727769851685)
                   (vertex -.7224847078323364 0. .6913869380950928))
      (when (eq? self me)
        (eye-behind-player~ world)
        (follow-player~ world))))
  
  
  (method (control actor)
    (let ((world (current-world)))
      (set! controlled actor)
      (eye-behind-actor~ world actor)
      (follow-actor~ world actor)))
  
  
  (method (relinquish-control)
    (let ((world (current-world)))
      (set! controlled #f)
      (eye-behind-player~ world)
      (follow-player~ world)))
  
  
  (method (effective-controlled)
    (or controlled self))
  
  
  (method override (tick-slice)
    .04)
  
  
  (method override (tick-actions commands)
    (tick-actor-actions~ (effective-controlled) commands))
  
  
  (method override (tick commands elapse exit)
    (tick-actor~ (effective-controlled) commands elapse exit #t 'slide))
  
  
  (method override (hit collisions exit)
    (for-each (lambda (collision)
                (let ((element (get-element~ collision)))
                  (when (is? element Boost)
                    (terminal 'boost))))
              collisions))
  
  
  (method (idle)
    (idle-actor~ (effective-controlled)))
  
  
  (method (move-left commands)
    (move-left~ commands))
  
  
  (method (move-right commands)
    (move-right~ commands))
  
  
  (method (move-down commands)
    (move-down~ commands))
  
  
  (method (move-up commands)
    (move-up~ commands))
  
  
  (method (blink-forward commands)
    (blink-forward~ commands))
  
  
  (method (blink-backward commands)
    (blink-backward~ commands))
  
  
  (method (strafe-left commands)
    (strafe-left~ commands))
  
  
  (method (strafe-right commands)
    (strafe-right~ commands))
  
  
  (method (strafe-up commands)
    (strafe-up~ commands))
  
  
  (method (strafe-down commands)
    (strafe-down~ commands))
  
  
  (method (rotate-left commands)
    (rotate-left~ commands))
  
  
  (method (rotate-right commands)
    (rotate-right~ commands))
  
  
  (method (space commands)
    (jump commands))
  
  
  (method (jump commands)
    (jump~ commands))
  
  
  (method (win)
    (set! jumping? #f)
    (set! state 'win))
  
  
  (method (lose)
    (set! jumping? #f)
    (set! state 'lose))
  
  
  (method (reset-state)
    (set! state #f))
  
  
  (method (reset-position)
    (let ((zone (current-zone)))
      (set-position (or (get-start-position~ zone) (vertex -9.5 62.5 0.0)))
      (set-velocity (vertex 0. 0. 0.))))))
