;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Player
;;;


(module world.player jazz


(import (jazz.geometry)
        (jazz.graphic)
        (jazz.graphic.opengl.glew)
        (jazz.io)
        (jazz.library)
        (jazz.literals)
        (jazz.media)
        (jazz.network)
        (jazz.platform)
        (jazz.platform.cairo)
        (jazz.runtime)
        (jazz.system)
        (jazz.ui)
        (jazz.ui.dialog)
        (jazz.ui.window)
        (time)
        (world)
        (world.autoload)
        (world.actor)
        (world.block)
        (world.client.window)
        (world.enemy)
        (world.foreign)
        (world.geometry)
        (world.history)
        (world.object)
        (world.sprite)
        (world.texture)
        (world.window))


;;;
;;;; Player
;;;


(definition player-speed
  .5)

(definition floor-deceleration
  .25)

(definition air-deceleration
  .05)

(definition max-vy
  -.8)

(definition die-bottom
  -6.)


(class Player extends Actor
  
  
  (slot ready?   <bool>      initialize #f    accessors generate)
  (slot jumping? <bool>      initialize #f    accessors generate)
  (slot floor?   <bool>      initialize #f    accessors generate)
  (slot facing   <symbol>    initialize 'left accessors generate)
  (slot state    <symbol+>   initialize #f    accessors generate)
  (slot movement <f32vector> initialize (vertex 0. 0. 0.) accessors generate)
  
  
  (method override (prepare rest)
    (nextmethod rest)
    (set! width 4.)
    (set! height 4.)
    (set! depth 4.)
    (set-texture (get-player-texture~ world))
    (set-color {Color red: 173 green: 12 blue: 230}))
  
  
  (method override (finish rest)
    (nextmethod rest)
    (standardize!~ lookat))
  
  
  (method override (tick commands elapse)
    (continuation-capture
      (lambda (exit)
        (define (win-hit objects)
          (when (member? 'win objects key: get-user-data~)
            (win~ world)
            (continuation-return exit)))
        
        (let ((old-left left)
              (old-bottom bottom)
              (old-back back)
              (old-center (get-center))
              (moving? #f)
              (target-vx #f)
              (target-vz #f)
              (factor (* elapse 65))
              (first-person? (get-first-person?~ world))
              (fly? (get-fly?~ world)))
          (when (get-move-left?~ commands)
            (set! moving? #t)
            (set! target-vx (- player-speed)))
          (when (get-move-right?~ commands)
            (set! moving? #t)
            (set! target-vx player-speed))
          (when (get-move-down?~ commands)
            (if first-person?
                (begin
                  (move-player-backward~ world factor)
                  (decrease! rtri 2.5))
              (set! moving? #t)
              (set! target-vz player-speed)))
          (when (get-move-up?~ commands)
            (if first-person?
                (begin
                  (move-player-forward~ world factor)
                  (unless fly?
                    (increase! rtri 2.5)))
              (set! moving? #t)
              (set! target-vz (- player-speed))))
          (when (get-strafe-left?~ commands)
            (when first-person?
              (strafe-player-left~ world factor)))
          (when (get-strafe-right?~ commands)
            (when first-person?
              (strafe-player-right~ world factor)))
          (when (or (get-fire?~ commands)
                    (get-strafe-up?~ commands))
            (if fly?
                (strafe-player-up~ world factor)
              (when first-person?
                (fire-missile))))
          (when (get-strafe-down?~ commands)
            (if fly?
                (strafe-player-down~ world factor)
              (when first-person?
                (sit-down))))
          (when (get-rotate-left?~ commands)
            (when first-person?
              (rotate-player-left~ world factor)))
          (when (get-rotate-right?~ commands)
            (when first-person?
              (rotate-player-right~ world factor)))
          (when (and fly?
                     (not (get-rotate-left?~ commands))
                     (not (get-rotate-right?~ commands)))
            (reset-player-tilt~ world))
          (when (not moving?)
            (set! target-vx 0.)
            (set! target-vz 0.))
          (when target-vx
            (let ((deceleration (if jumping? air-deceleration floor-deceleration)))
              (cond ((> (vertex-x velocity) target-vx)
                     (vertex-x-set! velocity (- (vertex-x velocity) deceleration))
                     (if (< (vertex-x velocity) target-vx)
                         (vertex-x-set! velocity target-vx)))
                    ((< (vertex-x velocity) target-vx)
                     (vertex-x-set! velocity (+ (vertex-x velocity) deceleration))
                     (if (> (vertex-x velocity) target-vx)
                         (vertex-x-set! velocity target-vx))))))
          (when target-vz
            (let ((deceleration (if jumping? air-deceleration floor-deceleration)))
              (cond ((> (vertex-z velocity) target-vz)
                     (vertex-z-set! velocity (- (vertex-z velocity) deceleration))
                     (if (< (vertex-z velocity) target-vz)
                         (vertex-z-set! velocity target-vz)))
                    ((< (vertex-z velocity) target-vz)
                     (vertex-z-set! velocity (+ (vertex-z velocity) deceleration))
                     (if (> (vertex-z velocity) target-vz)
                         (vertex-z-set! velocity target-vz))))))
          (if (not (get-jump?~ commands))
              (set! ready? #t)
            (when (and floor? ready? (not jumping?))
              (set! ready? #f)
              (set! jumping? #t)
              (vertex-y-set! velocity (get-jump-impulsion~ world))))
          
          (increase! x (* (vertex-x velocity) factor))
          (increase! z (* (vertex-z velocity) factor))
          (unless fly?
            (vertex-y-set! velocity (- (vertex-y velocity) (get-gravity~ world)))
            (increase! y (vertex-y velocity)))
          (when (< (vertex-y velocity) max-vy)
            (vertex-y-set! velocity max-vy))
          (receive (hit-x hit-y hit-z) (hit-test~ zone self old-left old-bottom old-back (- x radius-x) (- y radius-y) (- z radius-z) width height depth radius-x radius-y radius-z)
            (when hit-x
              (bind (objects direction border reset) hit-x
                (win-hit objects)
                (set! x reset)))
            (if (not hit-y)
                (set! floor? #f)
              (bind (objects direction border reset) hit-y
                (win-hit objects)
                (set! y reset)
                (vertex-y-set! velocity 0.)
                (when (= direction -1)
                  (set! jumping? #f)
                  (set! floor? #t)
                  (for-each (lambda (obj)
                              (when (and (is? obj Actor) (stomp~ obj))
                                (vertex-y-set! velocity 3.)))
                            objects))))
            (when hit-z
              (bind (objects direction border reset) hit-z
                (win-hit objects)
                (set! z reset))))
          (when (and (< y radius-y) (not fly?))
            (set! y radius-y)
            (vertex-y-set! velocity 0.)
            (set! jumping? #f)
            (set! floor? #t))
          @w
          (when (< y die-bottom)
            (lose~ world)
            (continuation-return exit))
          (update-position)
          (update-area~ zone self old-center)
          (vertex-! movement center old-center)
          (when (or (/= left old-left)
                    (/= bottom old-bottom)
                    (/= back old-back))
            (camera-center-player~ world))))))
  
  
  (method (fire-missile)
    (let ((target (player-target~ world))
          (direction (get-sight~ (get-eye-lookat~ world))))
      (let ((center (vertex+ target (vertex-scalar* direction 5.))))
        (let ((missile (new Missile parent: world x: (vertex-x center) y: (vertex-y center) z: (vertex-z center))))
          (set-velocity~ missile direction)
          (add-sprite~ zone missile)))))
  
  
  (method (sit-down)
    )
  
  
  (method (move-left commands)
    (set-move-left?~ commands #t))
  
  
  (method (move-right commands)
    (set-move-right?~ commands #t))
  
  
  (method (move-down commands)
    (set-move-down?~ commands #t))
  
  
  (method (move-up commands)
    (set-move-up?~ commands #t))
  
  
  (method (strafe-left commands)
    (set-strafe-left?~ commands #t))
  
  
  (method (strafe-right commands)
    (set-strafe-right?~ commands #t))
  
  
  (method (strafe-up commands)
    (set-strafe-up?~ commands #t))
  
  
  (method (strafe-down commands)
    (set-strafe-down?~ commands #t))
  
  
  (method (rotate-left commands)
    (set-rotate-left?~ commands #t))
  
  
  (method (rotate-right commands)
    (set-rotate-right?~ commands #t))
  
  
  (method (space commands)
    (jump commands))
  
  
  (method (jump commands)
    (set-jump?~ commands #t))
  
  
  (method (fire commands)
    (set-fire?~ commands #t))
  
  
  (method (win)
    (set! jumping? #f)
    (set! state 'win)
    (update-position))
  
  
  (method (lose)
    (set! jumping? #f)
    (set! state 'lose)
    (update-position))
  
  
  (method (reset-state)
    (set! state #f))
  
  
  (method (reset-position)
    (set-position (or (get-start-position~ zone) (vertex -9.5 62.5 0.0))))
  
  
  ;;;
  ;;;; Draw
  ;;;
  
  
  (method override (draw-3d)
    (if (in-history?)
        (let ((x1 (get-left))
              (x2 (get-right))
              (y1 (get-bottom))
              (y2 (get-top))
              (z1 (get-back))
              (z2 (get-front)))
          (glColor4f red green blue .4)
          (render-block x1 x2 y1 y2 z1 z2 GL_LINE_LOOP))
      (glPushMatrix)
      (glTranslatef x y z)
      (glEnable GL_CULL_FACE)
      (glCullFace GL_FRONT)
      (when lookat
        (let* ((sight (if #t @w (vertex-zero? movement) (get-sight~ lookat) (vertex-normalize (vertex (vertex-x movement) 0. (vertex-z movement)))))
               (up @w (get-world-up~ world) (get-up~ lookat))
               (right (vertex-normalize (cross-product sight up))))
          (glMultMatrixv
            (vertex-x right) (vertex-x up) (vertex-x sight) 0.
            (vertex-y right) (vertex-y up) (vertex-y sight) 0.
            (vertex-z right) (vertex-z up) (vertex-z sight) 0.
            0. 0. 0. 1.)))
      (glColor4f red green blue alpha)
      (draw-sphere)
      ;; eyes
      (glPushMatrix)
      (glRotatef 90.0 0.0 1.0 0.0)
      (glPolygonMode GL_FRONT_AND_BACK GL_FILL)
      (glColor4f 0. 0. 1. alpha)
      (glPushMatrix)
      (glTranslatef -1.2 .8 -.9)
      (glScalef .1 .1 .1)
      (gl-sphere radius-x 26 52)
      (glPopMatrix)
      (glPushMatrix)
      (glTranslatef -1.2 .8 .9)
      (glScalef .1 .1 .1)
      (gl-sphere radius-x 26 52)
      (glPopMatrix)
      (glPolygonMode GL_FRONT_AND_BACK GL_FILL)
      (glPopMatrix)
      (glCullFace GL_BACK)
      (glDisable GL_CULL_FACE)
      (glPopMatrix)
      ;; fly
      (when (get-fly?~ world)
        (glPushMatrix)
        (glTranslatef x y z)
        (let ((sight (get-sight~ lookat))
              (up (get-up~ lookat))
              (right (get-right~ lookat)))
          (glMultMatrixv
            (vertex-x right) (vertex-x up) (vertex-x sight) 0.
            (vertex-y right) (vertex-y up) (vertex-y sight) 0.
            (vertex-z right) (vertex-z up) (vertex-z sight) 0.
            0. 0. 0. 1.))
        (glColor4f .4 0. 0. 1.)
        (let ((width 16.)
              (depth 8.))
          (let ((x1 (- depth))
                (x2 depth)
                (y (- radius-y))
                (z1 (- width))
                (z2 width))
            ;; flying carpet
            (glNormal3f 0.0 -1.0 0.0)
            (glBegin GL_QUADS)
            (glVertex3f x2 y z2)
            (glVertex3f x1 y z2)
            (glVertex3f x1 y z1)
            (glVertex3f x2 y z1)
            (glEnd)))
        (glPopMatrix)))))


;;;
;;;; Pacman
;;;


(class Pacman extends Player
  
  
  (method override (finish rest)
    (nextmethod rest)
    (set-color {Color Yellow})))


;;;
;;;; Commands
;;;


(class Commands extends Object
  
  
  (slot move-left?    <bool> initialize #f accessors generate)
  (slot move-right?   <bool> initialize #f accessors generate)
  (slot move-down?    <bool> initialize #f accessors generate)
  (slot move-up?      <bool> initialize #f accessors generate)
  (slot strafe-left?  <bool> initialize #f accessors generate)
  (slot strafe-right? <bool> initialize #f accessors generate)
  (slot strafe-up?    <bool> initialize #f accessors generate)
  (slot strafe-down?  <bool> initialize #f accessors generate)
  (slot rotate-left?  <bool> initialize #f accessors generate)
  (slot rotate-right? <bool> initialize #f accessors generate)
  (slot jump?         <bool> initialize #f accessors generate)
  (slot fire?         <bool> initialize #f accessors generate)
  
  
  (method override (print output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{l}"
          `(,@(if move-left? '(move-left) '())
            ,@(if move-right? '(move-right) '())
            ,@(if move-down? '(move-down) '())
            ,@(if move-up? '(move-up) '())
            ,@(if strafe-left? '(strafe-left) '())
            ,@(if strafe-right? '(strafe-right) '())
            ,@(if strafe-up? '(strafe-up) '())
            ,@(if strafe-down? '(strafe-down) '())
            ,@(if rotate-left? '(rotate-left) '())
            ,@(if rotate-right? '(rotate-right) '())
            ,@(if jump? '(jump) '())
            ,@(if fire? '(fire) '()))))))))
