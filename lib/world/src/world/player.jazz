;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; Player
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.player jazz


(import (jazz.graphic)
        (jazz.view)
        (gaea.dye)
        (gaea.geometry)
        (world)
        (world.actor)
        (world.animation)
        (world.area)
        (world.audio)
        (world.autoload)
        (world.camera)
        (world.collision)
        (world.context)
        (world.generation.block)
        (world.index)
        (world.lighting)
        (world.model)
        (world.renderers)
        (world.sector)
        (world.settings)
        (world.sound)
        (world.support))


(definition protected floor-deceleration <fl>
  .25)

(definition protected air-deceleration <fl>
  .05)


(definition protected (default-avatar)
  (let ((world (current-world)))
    (define (try path)
      (and (search-model world path)
           path))
    
    (if (world-setting 'world.orb-avatar? #f)
        'Orb
      (or (try "warcraft/character/bloodelffemale")
          'Orb))))


(definition protected critical-animations
  '("Fall"
    "Jump"
    "JumpStart"
    "JumpEnd"
    "JumpLandRun"
    "Run"
    "WalkBackwards"
    "SwimIdle"
    "Swim"))


(class Player-Model extends Model
  
  
  (method override (model-bind-uniforms self entity program overlay alpha-cut)
    (let ((color (get-color entity)))
      (let ((wire-color (copy-dye color))
            (fill-color (copy-dye color)))
        (dye-alpha-set! wire-color .5)
        (dye-alpha-set! fill-color .2)
        (bind-uniforms program (get-bone-matrices (cast <Morphing> (get-morphing entity))) overlay alpha-cut wire-color: wire-color fill-color: fill-color)))))


(class Player extends Actor
  
  
  (property me?               <bool>   initialize #t           accessors generate)
  (property avatar            <object> initialize #f           getter generate setter explicit)
  
  (slot no                    <object> initialize #f           accessors generate)
  (slot mode                  <object> initialize 'observer    accessors generate)
  (slot disconnected?         <bool>   initialize #f           accessors generate)
  ;; players must retain their expanse as they can exist outside of sectors
  (slot expanse               <object> initialize #f           accessors generate)
  (slot sector-index          <index>  initialize (make-index) getter generate)
  (slot aggroed-creatures     <list>   initialize '()          accessors generate)
  (slot eating                <fl+>    initialize #f           accessors generate)
  (slot eating-ticks          <fx+>    initialize #f           accessors generate)
  (slot controlled            <object> initialize #f           accessors generate)
  (slot animations-preloaded? <bool>   initialize #f           accessors generate)
  
  
  (method override (prepare self rest)
    (nextmethod self rest)
    (set-color self (dye .678 .047 .902 1.))
    (update-model self))
  
  
  (method override (finish self rest)
    (nextmethod self rest)
    (set! motion 'run)
    (when (and translucent-players? (not (serving?)))
      (set! renderer player-renderer)
      (set-color self (dye .85 .85 .85 1.)))
    ;; only-me-area-cube-for-now
    (when (and (client?) me?)
      (setup-area-cube self)))
  
  
  (method override (player? self)
    #t)
  
  
  (method override (setup-id self)
    )
  
  
  (method package (register-no self no)
    (set! self.no no))
  
  
  (method override (setup-area-cube self)
    (set! area-cube (new Area-Cube (if me? 7 2))))
  
  
  (method override (update-area-cube self)
    (assert area-cube
      (nextmethod self)))
    
  
  (method override (update-matrix self)
    (nextmethod self)
    (when (window?)
      (if me?
          (begin
            (index-copy! sector-index (position-sector-index position))
            (update-3d-audibles position (get-sight lookat)))
        (let ((output (find-output (current-audio) id)))
          (when output
            (update-3d-output output position))))))

  
  (method override (simulated? self)
    (not me?))
  
  
  (method override (task-name self)
    (if bot?
        'bot
      name))
  
  
  (method package (set-avatar self avat)
    (set! avatar avat)
    (update-model self))
  
  
  (method package (mode-change self md)
    (set! mode md)
    (set-visible? self (eq? mode 'participant)))
  
  
  (method override (model-class self)
    Player-Model)
  
  
  (method package (update-model self)
    (let ((world (current-world))
          (zone (current-zone)))
      (let ((new-model (if avatar
                           (if (dye? avatar)
                               (begin
                                 (set-color self avatar)
                                 'Orb)
                             avatar)
                         (default-avatar))))
        (when (neq? new-model model)
          (free-morphing self)
          (set-model self new-model)
          ;; reset defaults
          (set-scaling self 1.)
          (set-animate? self #f)
          (when (string? new-model)
            (install-avatar-metadata self)
            (when (window?)
              (setup-morphing self)
              (set-animate? self #t))
            (set-orientation self 'vertical))))))
  
  
  (method override (call-model-update self model)
    (nextmethod self model)
    (when (and (window?) (not translucent-players?))
      (bake-entity-uniform-lighting self 60. 0. baked-sun)))
  
  
  (method package (preload-animations self)
    (unless animations-preloaded?
      (let ((model (cache-model self)))
        (for-each (lambda (name)
                    (find-animation model name))
                  critical-animations))
      (set! animations-preloaded? #t)))
  
  
  (method package (player-camera self)
    (find-type self Camera))
  
  
  (method override (effective-pumps self)
    (let ((model (cache-model self)))
      (or (and block-pumps? (get-block-pumps model))
          (get-pumps model))))
  
  
  (method override (walk-speed self)
    (/ (run-speed self) 3.))
  
  
  (method override (run-speed self)
    8.)
  
  
  (method package (unaggro self)
    (for-each (lambda (creature)
                (set-aggro-target creature #f))
              aggroed-creatures)
    (set! aggroed-creatures '()))
  
  
  (method package (verify-water self)
    @wait-liquid
    (let ((world (current-world))
          (ambience (current-ambience)))
      (let ((block (block-at-center self)))
        (let ((liquid? (and block (get-liquid-cube? (id->block block)))))
          (cond ((and liquid? (not water?))
                 (enter-water self (memq? block '(10 11)))
                 (play-ambience ambience (find-asset world "ambience/warcraft/water/Underwater.ogg")))
                ((and (not liquid?) water?)
                 (change-ambience ambience error?: #f)
                 (exit-water self)))))))
  
  
  (method override (print self output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{a} {a}" name position))))
  
  
  (method override (is-player? self)
    #t)
  
  
  ;;;
  ;;;; History
  ;;;
  
  
  (method override (history-draw-trail? self)
    #t)
  
  
  ;;;
  ;;;; Actions
  ;;;
  
  
  (method override (wound self inflictor factor (amount #f))
    ;; fix me at the moment firing in multiplayer will almost always kill oneself
    (unless (eq? inflictor self)
      (let ((critical? (and (not amount) (> (random-real) .8))))
        (damage self (or amount (attack-amount inflictor factor (wound-amount self critical?)))
                critical?))))
  
  
  (method override (damage self amount critical?)
    (when (server?)
      (world.changes:damage-change self amount critical?))
    (nextmethod self amount critical?)
    (let ((interface (current-interface+)))
      (when (and interface me?)
        @wait-panel-nicely-positioned
        (let ((panel (child interface 'combat)))
          (set-visible? panel #t)
          (invalidate-view panel))
        (let ((panel (child interface 'character)))
          (when (get-visible? panel)
            (view-health panel))
          (damage-armor panel critical?))))
    (stop-eating self))
  
  
  (method override (attack self kind)
    (let ((interface (current-interface+)))
      (when (and interface me?)
        (let ((panel (child interface 'character)))
          (case kind
            ((bullet) (damage-weapon panel))
            ((arrow) (damage-bow panel))))))
    (stop-eating self))
  
  
  (method override (wound-amount self critical?)
    (/ (nextmethod self critical?) armor-factor))
  
  
  (method override (die self)
    (let ((interface (current-interface+))
          (history (current-history))
          (world (current-world))
          (zone (current-zone))
          (tier (current-tier)))
      (when (and me? (not (get-paused? history)))
        (sleep .5))
      (play-3d-sound-if (death-sound self) position)
      (display-message world (format "R.I.P. {a}" (or name (anonymous tier))) color: {Color Orange})
      (unaggro self)
      (set-life self 100.)
      (set-alive? self #t)
      (set-lava? self #f)
      (set-water? self #f)
      (when (and interface me?)
        (invalidate-view (child interface 'combat)))
      (resurrect-player zone self)
      (refresh-compass world)
      (when me?
        (eye-behind-player world)
        (follow-player world))))
  
  
  (method override (resurrect self)
    (nextmethod self)
    (refresh-compass (current-world)))
  
  
  (method (stop-eating self)
    (set! eating #f)
    (set! eating-ticks #f))
  
  
  (method package (control self actor)
    (let ((world (current-world)))
      (set! controlled actor)
      (eye-behind-actor world actor)
      (follow-actor world actor)))
  
  
  (method package (relinquish-control self)
    (let ((world (current-world)))
      (set! controlled #f)
      (eye-behind-player world)
      (follow-player world)))
  
  
  (method package (effective-controlled self)
    (or controlled self))
  
  
  (method override (tick-slice self)
    .04)
  
  
  (method override (tick-action self commands time elapse)
    (unless (= elapse 0.)
      (tick-actor (effective-controlled self) commands time elapse #t 'slide)))
  
  
  (method override (simulate-actor self radiuses elapse)
    (let ((world (current-world)))
      (let ((target (vertex+& position (vertex-scalar*& (vertex+& effective-velocity fall-velocity) elapse))))
        (unless ground?
          (let ((gravity (compute-gravity& world target))
                (adjusted-elapse (* elapse 50.)))
            (vertex+! fall-velocity fall-velocity (vertex-scalar*& gravity adjusted-elapse))
            (vertex+! target target (vertex+& (vertex-scalar*& fall-velocity adjusted-elapse) (vertex-scalar*& gravity (* .5 adjusted-elapse adjusted-elapse))))))
        (let ((area-cube (update-area-cube self)))
          (bind-values (center direction collisions) (collide&stop$ position target lookat radiuses area-cube: area-cube)
            (free-collisions$ collisions)
            (set-position self center))))))
  
  
  (method override (hit self collisions)
    )
  
  
  (method package (move-backward self commands)
    (move-backward commands))
  
  
  (method package (move-forward self commands)
    (move-forward commands))
  
  
  (method package (sprint-forward self commands)
    (sprint-forward commands))
  
  
  (method package (sprint-backward self commands)
    (sprint-backward commands))
  
  
  (method package (move-left self commands)
    (move-left commands))
  
  
  (method package (move-right self commands)
    (move-right commands))
  
  
  (method package (move-up self commands)
    (move-up commands))
  
  
  (method package (move-down self commands)
    (move-down commands))
  
  
  (method package (rotate-left self commands)
    (rotate-left commands))
  
  
  (method package (rotate-right self commands)
    (rotate-right commands))
  
  
  (method package (space self commands)
    (jump self commands))
  
  
  (method package (jump self commands)
    (jump commands))))
