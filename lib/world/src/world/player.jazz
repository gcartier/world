;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Player
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2013
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.player jazz


(import (jazz.geometry)
        (jazz.graphic)
        (jazz.graphic.opengl.glew)
        (jazz.io)
        (jazz.library)
        (jazz.literals)
        (jazz.media)
        (jazz.network)
        (jazz.platform)
        (jazz.platform.cairo)
        (jazz.runtime)
        (jazz.system)
        (jazz.ui)
        (jazz.ui.dialog)
        (jazz.ui.window)
        (time)
        (world)
        (world.actor)
        (world.autoload)
        (world.boost)
        (world.collision)
        (world.dye)
        (world.dyes)
        (world.element)
        (world.enemy)
        (world.entity)
        (world.foreign)
        (world.geometry)
        (world.history)
        (world.mark)
        (world.model)
        (world.models)
        (world.movement)
        (world.object)
        (world.opengl)
        (world.renderer)
        (world.sector)
        (world.serialization)
        (world.syntax (phase syntax))
        (world.texture)
        (world.window)
        (world.client.window))


;;;
;;;; Player
;;;


(definition protected floor-deceleration <fl>
  .25)

(definition protected air-deceleration <fl>
  .05)


(class Player extends Actor
  

  (slot state      <symbol+> initialize #f accessors generate)
  (slot controlled <object>  initialize #f accessors generate)
  
  
  (method override (prepare rest)
    (nextmethod rest)
    (set-color (dye .678 .047 .902 1.))
    (update-model))
  
  
  (method override (finish rest)
    (nextmethod rest)
    (standardize-lookat! lookat))
  
  
  (method (update-model)
    (let ((world (current-world)))
      (let ((new-model (case (get-vehicle~ world)
                         ((wheels) 'CharacterOnWheels)
                         ((saucer) 'CharacterOnSaucer)
                         (else 'Character))))
        (when (neq? new-model model)
          (set-model new-model)))))
  
  
  (method override (print output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{a} {a}" name position))))
  
  
  (method meta override (marshall-object obj)
    (serialize-object (class-of obj)
                      (vector
                        ;; component
                        (serialize (get-name~ obj))
                        (serialize (get-visible?~ obj))
                        ;; element
                        (serialize (get-position~ obj))
                        (serialize (get-lookat~ obj))
                        (serialize (get-scale~ obj))
                        (serialize (get-radiuses~ obj))
                        (serialize (get-radius~ obj))
                        (serialize (get-color~ obj))
                        (serialize (get-hit-behavior~ obj))
                        (serialize (get-user-data~ obj))
                        ;; entity
                        (get-model~ obj)
                        (get-animate?~ obj)
                        (get-animation~ obj)
                        ;; actor
                        (serialize (get-velocity~ obj))
                        (serialize (get-fall-velocity~ obj))
                        (serialize (get-direction~ obj))
                        (serialize (get-life~ obj))
                        (serialize (get-global-cooldown~ obj))
                        (serialize (get-spell~ obj))
                        (serialize (get-adjustments~ obj))
                        (serialize (get-rapid-fire-acceleration~ obj))
                        (serialize (get-rapid-fire-duration~ obj))
                        (serialize (get-rapid-fire-cooldown~ obj))
                        (serialize (get-last-missile~ obj))
                        (serialize (get-max-missiles~ obj))
                        (serialize (get-missiles-count~ obj))
                        (serialize (get-history-color~ obj))
                        ;; player
                        (serialize (get-ready?~ obj))
                        (serialize (get-jumping?~ obj))
                        (serialize (get-jump-grace?~ obj))
                        (serialize (get-jump-time~ obj))
                        (serialize (get-floor?~ obj))
                        (serialize (get-state~ obj))
                        (serialize (get-movement~ obj))
                        (serialize (get-rotation~ obj))
                        (serialize (get-acceleration~ obj))
                        (serialize (get-animation-active~ obj))
                        (serialize (get-animation-start~ obj))
                        (serialize (get-animation-end~ obj))
                        (serialize (get-animation-next~ obj)))))
  
  
  (method meta override (unmarshall-object content)
    (bind-vector (;; component
                  name
                  visible?
                  ;; element
                  position
                  lookat
                  scale
                  radiuses
                  radius
                  color
                  hit-behavior
                  user-data
                  ;; entity
                  model
                  animate?
                  animation
                  ;; actor
                  velocity
                  fall-velocity
                  direction
                  life
                  global-cooldown
                  spell
                  adjustments
                  rapid-fire-acceleration
                  rapid-fire-duration
                  rapid-fire-cooldown
                  last-missile
                  max-missiles
                  missiles-count
                  history-color
                  ;; player
                  ready?
                  jumping?
                  jump-grace?
                  jump-time
                  floor?
                  state
                  movement
                  rotation
                  acceleration
                  animation-active
                  animation-start
                  animation-end
                  animation-next)
        content
      (let ((obj (new self name: name visible?: visible?)))
        ;; element
        (set-position~ obj (deserialize position))
        (set-lookat~ obj (deserialize lookat))
        (set-scale~ obj (deserialize scale))
        (set-radiuses~ obj (deserialize radiuses))
        (set-radius~ obj (deserialize radius))
        (set-color~ obj (deserialize color))
        (set-hit-behavior~ obj (deserialize hit-behavior))
        (set-user-data~ obj (deserialize user-data))
        ;; entity
        (set-model~ obj (deserialize model))
        (set-animate?~ obj (deserialize animate?))
        (set-animation~ obj (deserialize animation))
        ;; actor
        (set-velocity~ obj (deserialize velocity))
        (set-fall-velocity~ obj (deserialize fall-velocity))
        (set-direction~ obj (deserialize direction))
        (set-life~ obj (deserialize life))
        (set-global-cooldown~ obj (deserialize global-cooldown))
        (set-spell~ obj (deserialize spell))
        (set-adjustments~ obj (deserialize adjustments))
        (set-rapid-fire-acceleration~ obj (deserialize rapid-fire-acceleration))
        (set-rapid-fire-duration~ obj (deserialize rapid-fire-duration))
        (set-rapid-fire-cooldown~ obj (deserialize rapid-fire-cooldown))
        (set-last-missile~ obj (deserialize last-missile))
        (set-max-missiles~ obj (deserialize max-missiles))
        (set-missiles-count~ obj (deserialize missiles-count))
        (set-history-color~ obj (deserialize history-color))
        ;; player
        (set-ready?~ obj (deserialize ready?))
        (set-jumping?~ obj (deserialize jumping?))
        (set-jump-grace?~ obj (deserialize jump-grace?))
        (set-jump-time~ obj (deserialize jump-time))
        (set-floor?~ obj (deserialize floor?))
        (set-state~ obj (deserialize state))
        (set-movement~ obj (deserialize movement))
        (set-rotation~ obj (deserialize rotation))
        (set-acceleration~ obj (deserialize acceleration))
        (set-animation-active~ obj (deserialize animation-active))
        (set-animation-start~ obj (deserialize animation-start))
        (set-animation-end~ obj (deserialize animation-end))
        (set-animation-next~ obj (deserialize animation-next)))))
  
  
  (method public inline (set-movement mvt <f64vector>) <void>
    (vertex-copy! movement mvt))
  
  
  (method override (is-player?)
    #t)
  
  
  ;;;
  ;;;; Actions
  ;;;
  
  
  (method override (wound)
    (nextmethod)
    (let ((world (current-world)))
      (let ((character-pane (child~ (get-interface~ world) 'character)))
        (set-visible?~ character-pane #t)
        (invalidate-view~ character-pane))))
  
  
  (method override (die)
    (let ((world (current-world))
          (zone (current-zone))
          (me (current-me)))
      (play-sound-file~ world (death-sound))
      (display-message~ world (format "{a} died" name) color: {Color Red})
      (set-life 100)
      (invalidate-view~ (child~ (get-interface~ world) 'character))
      (let ((old-position (copy-vertex (get-position))))
        (set-position (vertex -127.6 17.0 -138.0))
        (set-velocity (vertex 0. 0. 0.))
        (update-element~ zone self old-position))
      (init-lookat (vertex .6830981969833374 -.15438011288642883 .7138231992721558)
                   (vertex .10673626512289047 .9880115389823914 .11153727769851685)
                   (vertex -.7224847078323364 0. .6913869380950928))
      (when (eq? self me)
        (eye-behind-player~ world)
        (follow-player~ world))))
  
  
  (method (control actor)
    (let ((world (current-world)))
      (set! controlled actor)
      (eye-behind-actor~ world actor)
      (follow-actor~ world actor)))
  
  
  (method (relinquish-control)
    (let ((world (current-world)))
      (set! controlled #f)
      (eye-behind-player~ world)
      (follow-player~ world)))
  
  
  (method override (tick-slice)
    .04)
  
  
  (method override (tick-actions commands)
    (tick-actor-actions~ (or controlled self) self commands))
  
  
  (method override (tick commands elapse exit)
    (tick-actor~ (or controlled self) self commands elapse exit #t 'slide))
  
  
  (method override (hit collisions exit)
    (for-each (lambda (collision)
                (let ((element (get-element~ collision)))
                  (when (is? element Boost)
                    (terminal 'boost))))
              collisions))
  
  
  (method (idle)
    (idle-actor~ (or controlled self)))
  
  
  (method (move-left commands)
    (move-left~ commands))
  
  
  (method (move-right commands)
    (move-right~ commands))
  
  
  (method (move-down commands)
    (move-down~ commands))
  
  
  (method (move-up commands)
    (move-up~ commands))
  
  
  (method (blink-forward commands)
    (blink-forward~ commands))
  
  
  (method (blink-backward commands)
    (blink-backward~ commands))
  
  
  (method (strafe-left commands)
    (strafe-left~ commands))
  
  
  (method (strafe-right commands)
    (strafe-right~ commands))
  
  
  (method (strafe-up commands)
    (strafe-up~ commands))
  
  
  (method (strafe-down commands)
    (strafe-down~ commands))
  
  
  (method (rotate-left commands)
    (rotate-left~ commands))
  
  
  (method (rotate-right commands)
    (rotate-right~ commands))
  
  
  (method (space commands)
    (jump commands))
  
  
  (method (jump commands)
    (jump~ commands))
  
  
  (method (win)
    (set! jumping? #f)
    (set! state 'win))
  
  
  (method (lose)
    (set! jumping? #f)
    (set! state 'lose))
  
  
  (method (reset-state)
    (set! state #f))
  
  
  (method (reset-position)
    (let ((zone (current-zone)))
      (set-position (or (get-start-position~ zone) (vertex -9.5 62.5 0.0)))
      (set-velocity (vertex 0. 0. 0.)))))


;;;
;;;; Commands
;;;


(class Commands extends Object
  
  
  (slot move-left?      <bool>   initialize #f getter generate)
  (slot move-right?     <bool>   initialize #f getter generate)
  (slot move-down?      <bool>   initialize #f getter generate)
  (slot move-up?        <bool>   initialize #f getter generate)
  (slot blink-forward?  <bool>   initialize #f getter generate)
  (slot blink-backward? <bool>   initialize #f getter generate)
  (slot strafe-left?    <bool>   initialize #f getter generate)
  (slot strafe-right?   <bool>   initialize #f getter generate)
  (slot strafe-up?      <bool>   initialize #f getter generate)
  (slot strafe-down?    <bool>   initialize #f getter generate)
  (slot rotate-left?    <bool>   initialize #f getter generate)
  (slot rotate-right?   <bool>   initialize #f getter generate)
  (slot jump?           <bool>   initialize #f getter generate)
  (slot actions         <object> initialize (new-queue) getter generate)
  (slot last-no         <object> initialize #f getter generate)
  (slot command?        <bool>   initialize #f getter generate)
  (slot modified?       <bool>   initialize #f getter generate)
  
  
  (method override (print output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{l}" (->symbolic)))))
  
  
  (method protected (->symbolic)
    (let ((queue (new-queue)))
      (define (add flag name)
        (when flag
          (enqueue queue name)))
      
      (add move-left? 'move-left)
      (add move-right? 'move-right)
      (add move-down? 'move-down)
      (add move-up? 'move-up)
      (add strafe-left? 'strafe-left)
      (add strafe-right? 'strafe-right)
      (add strafe-up? 'strafe-up)
      (add strafe-down? 'strafe-down)
      (add rotate-left? 'rotate-left)
      (add rotate-right? 'rotate-right)
      (add jump? 'jump)
      
      (queue-list queue)))
  
  
  (method meta override (marshall-object obj)
    ;; quicky for test
    (complete~ obj)
    (serialize-object (class-of obj)
                      (vector (serialize (get-move-left?~ obj))
                              (serialize (get-move-right?~ obj))
                              (serialize (get-move-down?~ obj))
                              (serialize (get-move-up?~ obj))
                              (serialize (get-strafe-left?~ obj))
                              (serialize (get-strafe-right?~ obj))
                              (serialize (get-strafe-up?~ obj))
                              (serialize (get-strafe-down?~ obj))
                              (serialize (get-rotate-left?~ obj))
                              (serialize (get-rotate-right?~ obj))
                              (serialize (get-jump?~ obj))
                              (let ((actions (get-actions~ obj)))
                                (and actions (map serialize actions)))
                              (serialize (get-last-no~ obj))
                              (serialize (get-command?~ obj)))))
  
  
  (method meta override (unmarshall-object content)
    (bind-vector (move-left? move-right? move-down? move-up? strafe-left? strafe-right? strafe-up? strafe-down? rotate-left? rotate-right? jump? actions last-no command?) content
      (allocate self
        (deserialize move-left?)
        (deserialize move-right?)
        (deserialize move-down?)
        (deserialize move-up?)
        (deserialize strafe-left?)
        (deserialize strafe-right?)
        (deserialize strafe-up?)
        (deserialize strafe-down?)
        (deserialize rotate-left?)
        (deserialize rotate-right?)
        (deserialize jump?)
        (and actions (map deserialize actions))
        (deserialize last-no)
        (deserialize command?)
        #f)))
  
  
  (method public (move-left)
    (set! move-left? #t)
    (set! command? #t)
    (set! modified? #t))
  
  (method public (move-right)
    (set! move-right? #t)
    (set! command? #t)
    (set! modified? #t))
  
  (method public (move-down)
    (set! move-down? #t)
    (set! command? #t)
    (set! modified? #t))
  
  (method public (move-up)
    (set! move-up? #t)
    (set! command? #t)
    (set! modified? #t))
  
  
  (method public (blink-forward)
    (set! blink-forward? #t)
    (set! command? #t)
    (set! modified? #t))
  
  (method public (blink-backward)
    (set! blink-backward? #t)
    (set! command? #t)
    (set! modified? #t))
  
  
  (method public (strafe-left)
    (set! strafe-left? #t)
    (set! command? #t)
    (set! modified? #t))
  
  (method public (strafe-right)
    (set! strafe-right? #t)
    (set! command? #t)
    (set! modified? #t))
  
  (method public (strafe-up)
    (set! strafe-up? #t)
    (set! command? #t)
    (set! modified? #t))
  
  (method public (strafe-down)
    (set! strafe-down? #t)
    (set! command? #t)
    (set! modified? #t))
  
  
  (method public (rotate-left)
    (set! rotate-left? #t)
    (set! command? #t)
    (set! modified? #t))
  
  (method public (rotate-right)
    (set! rotate-right? #t)
    (set! command? #t)
    (set! modified? #t))
  
  
  (method public (jump)
    (set! jump? #t)
    (set! command? #t)
    (set! modified? #t))
  
  
  (method public (add-action name arguments)
    (enqueue actions (cons name arguments))
    (set! modified? #t))
  
  
  (method public (enqueue-action action)
    (enqueue actions action)
    (set! modified? #t))
  
  
  (method public (set-last-no no)
    (set! last-no no))
  
  
  (method public (complete)
    (when (and modified? (is? actions Queue))
      (set! actions (queue-list actions))))
  
  
  (method (serialize)
    (vector move-left?
            move-right?
            move-down?
            move-up?
            strafe-left?
            strafe-right?
            strafe-up?
            strafe-down?
            rotate-left?
            rotate-right?
            jump?
            actions
            last-no
            command?))
  
  
  (method (deserialize vec)
    (set! move-left?    (vector-ref vec 0))
    (set! move-right?   (vector-ref vec 1))
    (set! move-down?    (vector-ref vec 2))
    (set! move-up?      (vector-ref vec 3))
    (set! strafe-left?  (vector-ref vec 4))
    (set! strafe-right? (vector-ref vec 5))
    (set! strafe-up?    (vector-ref vec 6))
    (set! strafe-down?  (vector-ref vec 7))
    (set! rotate-left?  (vector-ref vec 8))
    (set! rotate-right? (vector-ref vec 9))
    (set! jump?         (vector-ref vec 10))
    (set! actions       (vector-ref vec 11))
    (set! last-no       (vector-ref vec 12))
    (set! command?      (vector-ref vec 13))
    (set! modified?     #t)))


(definition public (serialize-commands commands)
  (serialize~ commands))


(definition public (deserialize-commands vec)
  (let ((commands (new Commands)))
    (deserialize~ commands vec)
    commands)))
