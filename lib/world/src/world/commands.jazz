;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; Commands
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2016
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.commands jazz


(class Commands extends Object
  
  
  (slot move-backward?   <bool>   initialize #f getter generate)
  (slot move-forward?    <bool>   initialize #f getter generate)
  (slot sprint-forward?  <bool>   initialize #f getter generate)
  (slot sprint-backward? <bool>   initialize #f getter generate)
  (slot blink-forward?   <bool>   initialize #f getter generate)
  (slot blink-backward?  <bool>   initialize #f getter generate)
  (slot move-left?       <bool>   initialize #f getter generate)
  (slot move-right?      <bool>   initialize #f getter generate)
  (slot move-up?         <bool>   initialize #f getter generate)
  (slot move-down?       <bool>   initialize #f getter generate)
  (slot rotate-left?     <bool>   initialize #f getter generate)
  (slot rotate-right?    <bool>   initialize #f getter generate)
  (slot jump?            <bool>   initialize #f getter generate)
  (slot modified?        <bool>   initialize #f getter generate)
  
  
  (method override (print output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{l}" (->symbolic)))))
  
  
  (method protected (->symbolic)
    (let ((queue (new-queue)))
      (define (add flag name)
        (when flag
          (enqueue queue name)))
      
      (add move-backward? 'move-backward)
      (add move-forward? 'move-forward)
      (add move-left? 'move-left)
      (add move-right? 'move-right)
      (add move-up? 'move-up)
      (add move-down? 'move-down)
      (add rotate-left? 'rotate-left)
      (add rotate-right? 'rotate-right)
      (add jump? 'jump)
      
      (queue-list queue)))
  
  
  (method public (moving?)
    (or move-backward? move-forward? sprint-forward? sprint-backward? blink-forward? blink-backward? move-left? move-right?))
  
  
  (method public (move-backward)
    (set! move-backward? #t)
    (set! modified? #t))
  
  (method public (move-forward)
    (set! move-forward? #t)
    (set! modified? #t))
  
  
  (method public (sprint-forward)
    (set! sprint-forward? #t)
    (set! modified? #t))
  
  
  (method public (sprint-backward)
    (set! sprint-backward? #t)
    (set! modified? #t))
  
  
  (method public (blink-forward)
    (set! blink-forward? #t)
    (set! modified? #t))
  
  (method public (blink-backward)
    (set! blink-backward? #t)
    (set! modified? #t))
  
  
  (method public (move-left)
    (set! move-left? #t)
    (set! modified? #t))
  
  (method public (move-right)
    (set! move-right? #t)
    (set! modified? #t))
  
  (method public (move-up)
    (set! move-up? #t)
    (set! modified? #t))
  
  (method public (move-down)
    (set! move-down? #t)
    (set! modified? #t))
  
  
  (method public (rotate-left)
    (set! rotate-left? #t)
    (set! modified? #t))
  
  (method public (rotate-right)
    (set! rotate-right? #t)
    (set! modified? #t))
  
  
  (method public (jump)
    (set! jump? #t)
    (set! modified? #t))))
