;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; Commands
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2016
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.commands jazz


(constant move-forward-mask    <fx> #b0000000000000001)
(constant move-backward-mask   <fx> #b0000000000000010)
(constant sprint-forward-mask  <fx> #b0000000000000100)
(constant sprint-backward-mask <fx> #b0000000000001000)
(constant blink-forward-mask   <fx> #b0000000000010000)
(constant blink-backward-mask  <fx> #b0000000000100000)
(constant move-left-mask       <fx> #b0000000001000000)
(constant move-right-mask      <fx> #b0000000010000000)
(constant move-up-mask         <fx> #b0000000100000000)
(constant move-down-mask       <fx> #b0000001000000000)
(constant rotate-left-mask     <fx> #b0000010000000000)
(constant rotate-right-mask    <fx> #b0000100000000000)
(constant jump-mask            <fx> #b0001000000000000)


(class Commands extends Object
  
  
  (slot move-forward?    <bool>   initialize #f getter generate)
  (slot move-backward?   <bool>   initialize #f getter generate)
  (slot sprint-forward?  <bool>   initialize #f getter generate)
  (slot sprint-backward? <bool>   initialize #f getter generate)
  (slot blink-forward?   <bool>   initialize #f getter generate)
  (slot blink-backward?  <bool>   initialize #f getter generate)
  (slot move-left?       <bool>   initialize #f getter generate)
  (slot move-right?      <bool>   initialize #f getter generate)
  (slot move-up?         <bool>   initialize #f getter generate)
  (slot move-down?       <bool>   initialize #f getter generate)
  (slot rotate-left?     <bool>   initialize #f getter generate)
  (slot rotate-right?    <bool>   initialize #f getter generate)
  (slot jump?            <bool>   initialize #f getter generate)
  (slot modified?        <bool>   initialize #f getter generate)
  
  
  (method override (print self output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{l}" (->symbolic self)))))
  
  
  (method protected (->symbolic self)
    (let ((queue (new-queue)))
      (define (add flag name)
        (when flag
          (enqueue queue name)))
      
      (add move-forward? 'move-forward)
      (add move-backward? 'move-backward)
      (add move-left? 'move-left)
      (add move-right? 'move-right)
      (add move-up? 'move-up)
      (add move-down? 'move-down)
      (add rotate-left? 'rotate-left)
      (add rotate-right? 'rotate-right)
      (add jump? 'jump)
      
      (queue-list queue)))
  
  
  (method public (moving? self)
    (or move-forward? move-backward? sprint-forward? sprint-backward? blink-forward? blink-backward? move-left? move-right?))
  
  
  (method public (move-forward self)
    (set! move-forward? #t)
    (set! modified? #t))
  
  (method public (move-backward self)
    (set! move-backward? #t)
    (set! modified? #t))
  
  
  (method public (sprint-forward self)
    (set! sprint-forward? #t)
    (set! modified? #t))
  
  
  (method public (sprint-backward self)
    (set! sprint-backward? #t)
    (set! modified? #t))
  
  
  (method public (blink-forward self)
    (set! blink-forward? #t)
    (set! modified? #t))
  
  (method public (blink-backward self)
    (set! blink-backward? #t)
    (set! modified? #t))
  
  
  (method public (move-left self)
    (set! move-left? #t)
    (set! modified? #t))
  
  (method public (move-right self)
    (set! move-right? #t)
    (set! modified? #t))
  
  (method public (move-up self)
    (set! move-up? #t)
    (set! modified? #t))
  
  (method public (move-down self)
    (set! move-down? #t)
    (set! modified? #t))
  
  
  (method public (rotate-left self)
    (set! rotate-left? #t)
    (set! modified? #t))
  
  (method public (rotate-right self)
    (set! rotate-right? #t)
    (set! modified? #t))
  
  
  (method public (jump self)
    (set! jump? #t)
    (set! modified? #t))
  
  
  ;;;
  ;;;; Encode
  ;;;
  
  
  (method package (encode self) <fx>
    (bitwise-ior (if move-forward? move-forward-mask 0)
                 (if move-backward? move-backward-mask 0)
                 (if sprint-forward? sprint-forward-mask 0)
                 (if sprint-backward? sprint-backward-mask 0)
                 (if blink-forward? blink-forward-mask 0)
                 (if blink-backward? blink-backward-mask 0)
                 (if move-left? move-left-mask 0)
                 (if move-right? move-right-mask 0)
                 (if move-up? move-up-mask 0)
                 (if move-down? move-down-mask 0)
                 (if rotate-left? rotate-left-mask 0)
                 (if rotate-right? rotate-right-mask 0)
                 (if jump? jump-mask 0)))
  
  
  (method package (decode self n <fx>)
    (set! move-forward? (mask-bit-set? move-forward-mask n))
    (set! move-backward? (mask-bit-set? move-backward-mask n))
    (set! sprint-forward? (mask-bit-set? sprint-forward-mask n))
    (set! sprint-backward? (mask-bit-set? sprint-backward-mask n))
    (set! blink-forward? (mask-bit-set? blink-forward-mask n))
    (set! blink-backward? (mask-bit-set? blink-backward-mask n))
    (set! move-left? (mask-bit-set? move-left-mask n))
    (set! move-right? (mask-bit-set? move-right-mask n))
    (set! move-up? (mask-bit-set? move-up-mask n))
    (set! move-down? (mask-bit-set? move-down-mask n))
    (set! rotate-left? (mask-bit-set? rotate-left-mask n))
    (set! rotate-right? (mask-bit-set? rotate-right-mask n))
    (set! jump? (mask-bit-set? jump-mask n))
    (set! modified? #t))))
