;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; Commands
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is WorldScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2014
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See http://github.com/gcartier/world for details.


(module world.commands jazz


(import (world.serialization))


(class Commands extends Object
  
  
  (slot move-backward?  <bool>   initialize #f getter generate)
  (slot move-forward?   <bool>   initialize #f getter generate)
  (slot run-forward?    <bool>   initialize #f getter generate)
  (slot run-backward?   <bool>   initialize #f getter generate)
  (slot blink-forward?  <bool>   initialize #f getter generate)
  (slot blink-backward? <bool>   initialize #f getter generate)
  (slot move-left?      <bool>   initialize #f getter generate)
  (slot move-right?     <bool>   initialize #f getter generate)
  (slot move-up?        <bool>   initialize #f getter generate)
  (slot move-down?      <bool>   initialize #f getter generate)
  (slot rotate-left?    <bool>   initialize #f getter generate)
  (slot rotate-right?   <bool>   initialize #f getter generate)
  (slot jump?           <bool>   initialize #f getter generate)
  (slot actions         <object> initialize (new-queue) getter generate)
  (slot last-no         <object> initialize #f getter generate)
  (slot command?        <bool>   initialize #f getter generate)
  (slot modified?       <bool>   initialize #f getter generate)
  
  
  (method override (print output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{l}" (->symbolic)))))
  
  
  (method protected (->symbolic)
    (let ((queue (new-queue)))
      (define (add flag name)
        (when flag
          (enqueue queue name)))
      
      (add move-backward? 'move-backward)
      (add move-forward? 'move-forward)
      (add move-left? 'move-left)
      (add move-right? 'move-right)
      (add move-up? 'move-up)
      (add move-down? 'move-down)
      (add rotate-left? 'rotate-left)
      (add rotate-right? 'rotate-right)
      (add jump? 'jump)
      
      (queue-list queue)))
  
  
  (method meta override (marshall-object obj)
    ;; quicky for test
    (complete~ obj)
    (serialize-object (class-of obj)
                      (vector (serialize (get-move-backward?~ obj))
                              (serialize (get-move-forward?~ obj))
                              (serialize (get-move-left?~ obj))
                              (serialize (get-move-right?~ obj))
                              (serialize (get-move-up?~ obj))
                              (serialize (get-move-down?~ obj))
                              (serialize (get-rotate-left?~ obj))
                              (serialize (get-rotate-right?~ obj))
                              (serialize (get-jump?~ obj))
                              (let ((actions (get-actions~ obj)))
                                (and actions (map serialize actions)))
                              (serialize (get-last-no~ obj))
                              (serialize (get-command?~ obj)))))
  
  
  (method meta override (unmarshall-object content)
    (bind-vector (move-backward? move-forward? move-left? move-right? move-up? move-down? rotate-left? rotate-right? jump? actions last-no command?) content
      (allocate self
        (deserialize move-backward?)
        (deserialize move-forward?)
        (deserialize move-left?)
        (deserialize move-right?)
        (deserialize move-up?)
        (deserialize move-down?)
        (deserialize rotate-left?)
        (deserialize rotate-right?)
        (deserialize jump?)
        (and actions (map deserialize actions))
        (deserialize last-no)
        (deserialize command?)
        #f)))
  
  
  (method public (move-backward)
    (set! move-backward? #t)
    (set! command? #t)
    (set! modified? #t))
  
  (method public (move-forward)
    (set! move-forward? #t)
    (set! command? #t)
    (set! modified? #t))
  
  
  (method public (run-forward)
    (set! run-forward? #t)
    (set! command? #t)
    (set! modified? #t))
  
  
  (method public (run-backward)
    (set! run-backward? #t)
    (set! command? #t)
    (set! modified? #t))
  
  
  (method public (blink-forward)
    (set! blink-forward? #t)
    (set! command? #t)
    (set! modified? #t))
  
  (method public (blink-backward)
    (set! blink-backward? #t)
    (set! command? #t)
    (set! modified? #t))
  
  
  (method public (move-left)
    (set! move-left? #t)
    (set! command? #t)
    (set! modified? #t))
  
  (method public (move-right)
    (set! move-right? #t)
    (set! command? #t)
    (set! modified? #t))
  
  (method public (move-up)
    (set! move-up? #t)
    (set! command? #t)
    (set! modified? #t))
  
  (method public (move-down)
    (set! move-down? #t)
    (set! command? #t)
    (set! modified? #t))
  
  
  (method public (rotate-left)
    (set! rotate-left? #t)
    (set! command? #t)
    (set! modified? #t))
  
  (method public (rotate-right)
    (set! rotate-right? #t)
    (set! command? #t)
    (set! modified? #t))
  
  
  (method public (jump)
    (set! jump? #t)
    (set! command? #t)
    (set! modified? #t))
  
  
  (method public (add-action name arguments)
    (enqueue actions (cons name arguments))
    (set! modified? #t))
  
  
  (method public (enqueue-action action)
    (enqueue actions action)
    (set! modified? #t))
  
  
  (method public (set-last-no no)
    (set! last-no no))
  
  
  (method public (complete)
    (when (and modified? (is? actions Queue))
      (set! actions (queue-list actions))))
  
  
  (method (serialize)
    (vector move-backward?
            move-forward?
            move-left?
            move-right?
            move-up?
            move-down?
            rotate-left?
            rotate-right?
            jump?
            actions
            last-no
            command?))
  
  
  (method (deserialize vec)
    (set! move-backward? (vector-ref vec 0))
    (set! move-forward?  (vector-ref vec 1))
    (set! move-left?     (vector-ref vec 2))
    (set! move-right?    (vector-ref vec 3))
    (set! move-up?       (vector-ref vec 4))
    (set! move-down?     (vector-ref vec 5))
    (set! rotate-left?   (vector-ref vec 6))
    (set! rotate-right?  (vector-ref vec 7))
    (set! jump?          (vector-ref vec 8))
    (set! actions        (vector-ref vec 9))
    (set! last-no        (vector-ref vec 10))
    (set! command?       (vector-ref vec 11))
    (set! modified?      #t)))


;;;
;;;; Serialization
;;;


(definition public (serialize-commands commands)
  (serialize~ commands))


(definition public (deserialize-commands vec)
  (let ((commands (new Commands)))
    (deserialize~ commands vec)
    commands)))
