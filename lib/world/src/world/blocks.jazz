;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; Blocks
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.blocks jazz


(import (jazz.geometry)
        (world)
        (world.autoload)
        (world.block)
        (world.face)
        (world.geometry)
        (world.model)
        (world.object)
        (world.quad)
        (world.syntax (phase syntax))
        (world.texture)
        (world.triangle))


;;;
;;;; Quad
;;;


(definition public (make-quad-model image (material: material #f))
  (let ((bottom -.5)
        (back -.5)
        (top .5)
        (front .5))
    (let ((material (or material (opaque-material)))
          (uv (image-coordinates image)))
      (let ((tl (uv-left uv))
            (tt (uv-top uv))
            (tr (uv-right uv))
            (tb (uv-bottom uv))
            (texture-depth (uv-depth uv)))
        (let ((faces
                (list
                  (make-face material
                             (f32vector tl tt tl tb tr tb tr tt)
                             texture-depth
                             (make-quad #f
                                        (vertex 0. top front) (vertex 0. bottom front) (vertex 0. bottom back) (vertex 0. top back))))))
          (make-block-model faces bounds: (cuboid 0. bottom back 0. top front) flat?: #t))))))


;;;
;;;; Floor
;;;


(definition public (make-floor-model image (material: material #f))
  (let ((left -.5)
        (bottom -.5)
        (back -.5)
        (right .5)
        (top .5)
        (front .5))
    (let ((material (or material (opaque-material)))
          (uv (image-coordinates image)))
      (let ((tl (uv-left uv))
            (tt (uv-top uv))
            (tr (uv-right uv))
            (tb (uv-bottom uv))
            (texture-depth (uv-depth uv)))
        (let ((faces
                (list
                  (make-face material
                             (f32vector tl tb tl tt tr tt tr tb)
                             texture-depth
                             (make-quad #f
                                        (vertex left top back) (vertex left top front) (vertex right top front) (vertex right top back))))))
          (make-block-model faces bounds: (cuboid left bottom back right top front) flat?: #t))))))


;;;
;;;; Wall
;;;


(definition public (make-wall-model image (material: material #f))
  (let ((left -.5)
        (bottom -.5)
        (back -.5)
        (right .5)
        (top .5)
        (front .5))
    (let ((material (or material (opaque-material)))
          (uv (image-coordinates image)))
      (let ((tl (uv-left uv))
            (tt (uv-top uv))
            (tr (uv-right uv))
            (tb (uv-bottom uv))
            (texture-depth (uv-depth uv)))
        (let ((faces
                (list
                  (make-face material
                             (f32vector tl tt tl tb tr tb tr tt)
                             texture-depth
                             (make-quad #f
                                        (vertex right top front) (vertex right bottom front) (vertex right bottom back) (vertex right top back))))))
          (make-block-model faces bounds: (cuboid left bottom back right top front) flat?: #t))))))


;;;
;;;; Ceiling
;;;


(definition public (make-ceiling-model image (material: material #f))
  (let ((left -.5)
        (bottom -.5)
        (back -.5)
        (right .5)
        (top .5)
        (front .5))
    (let ((material (or material (opaque-material)))
          (uv (image-coordinates image)))
      (let ((tl (uv-left uv))
            (tt (uv-top uv))
            (tr (uv-right uv))
            (tb (uv-bottom uv))
            (texture-depth (uv-depth uv)))
        (let ((faces
                (list
                  (make-face material
                             (f32vector tl tt tl tb tr tb tr tt)
                             texture-depth
                             (make-quad #f
                                        (vertex left bottom front) (vertex left bottom back) (vertex right bottom back) (vertex right bottom front))))))
          (make-block-model faces bounds: (cuboid left bottom back right top front) flat?: #t))))))


;;;
;;;; Slope
;;;


(definition public (make-slope-model image (material: material #f))
  (let ((left -.5)
        (bottom -.5)
        (back -.5)
        (right .5)
        (top .5)
        (front .5))
    (let ((material (or material (opaque-material)))
          (uv (image-coordinates image)))
      (let ((tl (uv-left uv))
            (tt (uv-top uv))
            (tr (uv-right uv))
            (tb (uv-bottom uv))
            (texture-depth (uv-depth uv)))
        (let ((faces
                (list
                  ;; bottom
                  (make-face material
                             (f32vector tl tt tl tb tr tb tr tt)
                             texture-depth
                             (make-quad #f
                                        (vertex left  bottom front)
                                        (vertex left  bottom back)
                                        (vertex right bottom back)
                                        (vertex right bottom front)))
                  ;; left
                  (make-face material
                             (f32vector tl tt tl tb tr tb tr tt)
                             texture-depth
                             (make-quad #f
                                        (vertex left top    back)
                                        (vertex left bottom back)
                                        (vertex left bottom front)
                                        (vertex left top    front)))
                  ;; front
                  (make-face material
                             (f32vector tl tt tl tb tr tb tr tt)
                             texture-depth
                             (make-triangle #f
                                            (vertex left   top    front)
                                            (vertex left   bottom front)
                                            (vertex right  bottom front)))
                  ;; back
                  (make-face material
                             (f32vector tl tt tl tb tr tb tr tt)
                             texture-depth
                             (make-triangle #f
                                            (vertex left   top    back)
                                            (vertex right  bottom back)
                                            (vertex left   bottom back)))
                  ;; slope
                  (make-face material
                             (f32vector tl tt tl tb tr tb tr tt)
                             texture-depth
                             (make-quad #f
                                        (vertex left  top front)
                                        (vertex right bottom front)
                                        (vertex right bottom back)
                                        (vertex left  top back))))))
          (make-block-model faces))))))


;;;
;;;; Corner
;;;


(definition public (make-corner-model rotation)
  (transform-block-model (registered-model 'Slope)
                         (make-x-rotation-matrix rotation)))


(definition public (make-corner-slope-model image (material: material #f))
  (let ((left -.5)
        (bottom -.5)
        (back -.5)
        (right .5)
        (top .5)
        (front .5))
    (let ((material (or material (opaque-material)))
          (uv (image-coordinates image)))
      (let ((tl (uv-left uv))
            (tt (uv-top uv))
            (tr (uv-right uv))
            (tb (uv-bottom uv))
            (texture-depth (uv-depth uv)))
        (let ((faces
                (list
                  ;; bottom
                  (make-face material
                             (f32vector tl tt tl tb tr tb tr tt)
                             texture-depth
                             (make-triangle #f
                                            (vertex left  bottom front)
                                            (vertex left  bottom back)
                                            (vertex right bottom back)))
                  ;; left
                  (make-face material
                             (f32vector tl tt tl tb tr tb tr tt)
                             texture-depth
                             (make-triangle #f
                                            (vertex left top    back)
                                            (vertex left bottom back)
                                            (vertex left bottom front)))
                  ;; back
                  (make-face material
                             (f32vector tl tt tl tb tr tb tr tt)
                             texture-depth
                             (make-triangle #f
                                            (vertex left   top    back)
                                            (vertex right  bottom back)
                                            (vertex left   bottom back)))
                  ;; slope
                  (make-face material
                             (f32vector tl tt tl tb tr tb tr tt)
                             texture-depth
                             (make-triangle #f
                                            (vertex left bottom front)
                                            (vertex right bottom back)
                                            (vertex left  top back))))))
          (make-block-model faces))))))


;;;
;;;; Pyramid
;;;


(definition public (make-pyramid-model image (material: material #f))
  (let ((left -.5)
        (bottom -.5)
        (back -.5)
        (center 0.)
        (right .5)
        (top .5)
        (front .5))
    (let ((material (or material (opaque-material)))
          (uv (image-coordinates image)))
      (let ((tl (uv-left uv))
            (tt (uv-top uv))
            (tr (uv-right uv))
            (tb (uv-bottom uv))
            (texture-depth (uv-depth uv)))
        (let ((faces
                (list
                  ;; bottom
                  (make-face material
                             (f32vector tl tt tl tb tr tb tr tt)
                             texture-depth
                             (make-quad #f
                                        (vertex left  bottom front)
                                        (vertex left  bottom back)
                                        (vertex right bottom back)
                                        (vertex right bottom front)))
                  ;; front
                  (make-face material
                             (f32vector tl tt tl tb tr tb tr tt)
                             texture-depth
                             (make-triangle #f
                                            (vertex center top    center)
                                            (vertex left   bottom front)
                                            (vertex right  bottom front)))
                  ;; right
                  (make-face material
                             (f32vector tl tt tl tb tr tb tr tt)
                             texture-depth
                             (make-triangle #f
                                            (vertex center top    center)
                                            (vertex right  bottom front)
                                            (vertex right  bottom back)))
                  ;; back
                  (make-face material
                             (f32vector tl tt tl tb tr tb tr tt)
                             texture-depth
                             (make-triangle #f
                                            (vertex center top    center)
                                            (vertex right  bottom back)
                                            (vertex left   bottom back)))
                  ;; left
                  (make-face material
                             (f32vector tl tt tl tb tr tb tr tt)
                             texture-depth
                             (make-triangle #f
                                            (vertex center top    center)
                                            (vertex left   bottom back)
                                            (vertex left   bottom front))))))
          (make-block-model faces))))))


(definition public (make-corner-pyramid-model image (material: material #f))
  (let ((left -.5)
        (bottom -.5)
        (back -.5)
        (center 0.)
        (right .5)
        (top .5)
        (front .5))
    (let ((material (or material (opaque-material)))
          (uv (image-coordinates image)))
      (let ((tl (uv-left uv))
            (tt (uv-top uv))
            (tr (uv-right uv))
            (tb (uv-bottom uv))
            (texture-depth (uv-depth uv)))
        (let ((faces
                (list
                  ;; bottom
                  (make-face material
                             (f32vector tl tt tl tb tr tb tr tt)
                             texture-depth
                             (make-quad #f
                                        (vertex left  bottom front)
                                        (vertex left  bottom back)
                                        (vertex right bottom back)
                                        (vertex right bottom front)))
                  ;; front
                  (make-face material
                             (f32vector tl tt tl tb tr tb tr tt)
                             texture-depth
                             (make-triangle #f
                                            (vertex left   top    back)
                                            (vertex left   bottom front)
                                            (vertex right  bottom front)))
                  ;; right
                  (make-face material
                             (f32vector tl tt tl tb tr tb tr tt)
                             texture-depth
                             (make-triangle #f
                                            (vertex left   top    back)
                                            (vertex right  bottom front)
                                            (vertex right  bottom back)))
                  ;; back
                  (make-face material
                             (f32vector tl tt tl tb tr tb tr tt)
                             texture-depth
                             (make-triangle #f
                                            (vertex left   top    back)
                                            (vertex right  bottom back)
                                            (vertex left   bottom back)))
                  ;; left
                  (make-face material
                             (f32vector tl tt tl tb tr tb tr tt)
                             texture-depth
                             (make-triangle #f
                                            (vertex left   top    back)
                                            (vertex left   bottom back)
                                            (vertex left   bottom front))))))
          (make-block-model faces))))))


;;;
;;;; Step
;;;


(definition public (make-step-model scaling translation)
  (transform-block-model (registered-model 'Dirty)
                         (matrix-multiply (make-translation-matrix (vertex 0. translation 0.))
                                          (make-scaling-matrix (vertex 1. scaling 1.)))))


;;;
;;;; Cube
;;;


(class Cube-Model extends Block-Model
  
  
  (slot opaque? initialize #t accessors generate)
  
  
  (method override (opaque-cube?)
    opaque?))


(definition public (make-cube-model images (materials: materials #f) (opaque?: opaque? #t))
  (let ((world (current-world)))
    (define (listify-images)
      (if (pair? images)
          images
        (list images images images images images images)))
    
    (define (listify-materials)
      (if (pair? materials)
          materials
        (list materials materials materials materials materials materials)))
    
    (bind (left-image right-image bottom-image top-image back-image front-image) (listify-images)
      (bind (left-material right-material bottom-material top-material back-material front-material) (listify-materials)
        (let ((left -.5)
              (bottom -.5)
              (back -.5)
              (right .5)
              (top .5)
              (front .5)
              (right-image (or right-image left-image))
              (bottom-image (or bottom-image left-image))
              (top-image (or top-image left-image))
              (back-image (or back-image left-image))
              (front-image (or front-image left-image))
              (default-image (get-default-image~ world))
              (opaque-material (get-block-opaque~ world)))
          (let ((faces
                  (list
                    ;; front
                    (let ((image (or front-image default-image)))
                      (let ((uv (image-coordinates image)))
                        (let ((tl (uv-left uv))
                              (tt (uv-top uv))
                              (tr (uv-right uv))
                              (tb (uv-bottom uv))
                              (texture-depth (uv-depth uv)))
                          (make-face (or front-material opaque-material)
                                     (f32vector tl tt tl tb tr tb tr tt)
                                     texture-depth
                                     (make-quad #f
                                                (vertex left top front) (vertex left bottom front) (vertex right bottom front) (vertex right top front))))))
                    ;; back
                    (let ((image (or back-image default-image)))
                      (let ((uv (image-coordinates image)))
                        (let ((tl (uv-left uv))
                              (tt (uv-top uv))
                              (tr (uv-right uv))
                              (tb (uv-bottom uv))
                              (texture-depth (uv-depth uv)))
                          (make-face (or back-material opaque-material)
                                     (f32vector tr tt tr tb tl tb tl tt)
                                     texture-depth
                                     (make-quad #f
                                                (vertex right top back) (vertex right bottom back) (vertex left bottom back) (vertex left top back))))))
                    ;; left
                    (let ((image (or left-image default-image)))
                      (let ((uv (image-coordinates image)))
                        (let ((tl (uv-left uv))
                              (tt (uv-top uv))
                              (tr (uv-right uv))
                              (tb (uv-bottom uv))
                              (texture-depth (uv-depth uv)))
                          (make-face (or left-material opaque-material)
                                     (f32vector tl tt tl tb tr tb tr tt)
                                     texture-depth
                                     (make-quad #f
                                                (vertex left top back) (vertex left bottom back) (vertex left bottom front) (vertex left top front))))))
                    ;; right
                    (let ((image (or right-image default-image)))
                      (let ((uv (image-coordinates image)))
                        (let ((tl (uv-left uv))
                              (tt (uv-top uv))
                              (tr (uv-right uv))
                              (tb (uv-bottom uv))
                              (texture-depth (uv-depth uv)))
                          (make-face (or right-material opaque-material)
                                     (f32vector tl tt tl tb tr tb tr tt)
                                     texture-depth
                                     (make-quad #f
                                                (vertex right top front) (vertex right bottom front) (vertex right bottom back) (vertex right top back))))))
                    ;; top
                    (let ((image (or top-image default-image)))
                      (let ((uv (image-coordinates image)))
                        (let ((tl (uv-left uv))
                              (tt (uv-top uv))
                              (tr (uv-right uv))
                              (tb (uv-bottom uv))
                              (texture-depth (uv-depth uv)))
                          (make-face (or top-material opaque-material)
                                     (f32vector tl tb tl tt tr tt tr tb)
                                     texture-depth
                                     (make-quad #f
                                                (vertex left top back) (vertex left top front) (vertex right top front) (vertex right top back))))))
                    ;; bottom
                    (let ((image (or bottom-image default-image)))
                      (let ((uv (image-coordinates image)))
                        (let ((tl (uv-left uv))
                              (tt (uv-top uv))
                              (tr (uv-right uv))
                              (tb (uv-bottom uv))
                              (texture-depth (uv-depth uv)))
                          (make-face (or bottom-material opaque-material)
                                     (f32vector tl tt tl tb tr tb tr tt)
                                     texture-depth
                                     (make-quad #f
                                                (vertex left bottom front) (vertex left bottom back) (vertex right bottom back) (vertex right bottom front)))))))))
            (let ((model (make-block-model faces class: Cube-Model)))
              (set-opaque?~ model opaque?)
              model)))))))


;;;
;;;; Cross
;;;


(definition public (make-cross-model images (material: material #f))
  (define (with-images proc)
    (if (string? images)
        (proc images images)
      (bind (image1 image2) images
        (proc image1 image2))))
  
  (with-images
    (lambda (image1 image2)
      (let ((material (or material (transparent-material)))
            (left -.5)
            (bottom -.5)
            (back -.5)
            (right .5)
            (top .5)
            (front .5))
        (let ((faces
                (list
                  (let ((uv (image-coordinates image1)))
                    (let ((tl (uv-left uv))
                          (tt (uv-top uv))
                          (tr (uv-right uv))
                          (tb (uv-bottom uv))
                          (texture-depth (uv-depth uv)))
                      (make-face material
                                 (f32vector tl tt tl tb tr tb tr tt)
                                 texture-depth
                                 (make-quad #f
                                            (vertex right top back) (vertex right bottom back) (vertex left bottom front) (vertex left top front)))))
                  (let ((uv (image-coordinates image2)))
                    (let ((tl (uv-left uv))
                          (tt (uv-top uv))
                          (tr (uv-right uv))
                          (tb (uv-bottom uv))
                          (texture-depth (uv-depth uv)))
                      (make-face material
                                 (f32vector tl tt tl tb tr tb tr tt)
                                 texture-depth
                                 (make-quad #f
                                            (vertex right top front) (vertex right bottom front) (vertex left bottom back) (vertex left top back))))))))
          (make-block-model faces))))))


;;;
;;;; Materials
;;;


(definition (opaque-material)
  (let ((world (current-world)))
    (get-block-opaque~ world)))


(definition (transparent-material)
  (let ((world (current-world)))
    (get-block-transparent~ world)))


(definition (multitexture-material)
  (let ((world (current-world)))
    (find-block-material~ world 'multitexture)))


(definition (water-material)
  (let ((world (current-world)))
    (find-block-material~ world 'water)))


;;;
;;;; Blocks
;;;


(define-block-model Dirty
  (lambda ()
    (make-cube-model "dirty")))


(define-block-model Step-Big
  (lambda ()
    (let ((scaling (exact->inexact (/ 2 3)))
          (translation (- (exact->inexact (/ 1 6)))))
      (make-step-model scaling translation))))


(define-block-model Step-Small
  (lambda ()
    (let ((scaling (exact->inexact (/ 1 3)))
          (translation (- (exact->inexact (/ 1 3)))))
      (make-step-model scaling translation))))


(define-block-model Step
  (lambda ()
    (make-step-model .5 -.25)))


(define-block-model Slope
  (lambda ()
    (make-slope-model "dirty")))


(define-block-model Corner-Left
  (lambda ()
    (make-corner-model PI/2)))


(define-block-model Corner-Right
  (lambda ()
    (make-corner-model (- PI/2))))


(define-block-model Corner-Pyramid
  (lambda ()
    (make-corner-pyramid-model "dirty")))


(define-block-model Corner-Slope
  (lambda ()
    (make-corner-slope-model "dirty")))


(define-block-model Pyramid
  (lambda ()
    (make-pyramid-model "dirty")))


(define-block-model Floor
  (lambda ()
    (make-floor-model "dirty")))


(define-block-model Wall
  (lambda ()
    (make-wall-model "dirty")))


(define-block-model Ceiling
  (lambda ()
    (make-ceiling-model "dirty")))


(define-block-model Fire
  (lambda ()
    (make-cube-model "fire" materials: (multitexture-material))))


(define-block-model Water
  (lambda ()
    (make-cube-model "water" materials: (water-material))))


@should-not-be-in-framework (
(define-block-model Turf
  (lambda ()
    (make-cube-model "turf")))


(define-block-model BarrensBaseBush
  (lambda ()
    (make-cube-model "BarrensBaseBush")))


(define-block-model ElwynnFlowerBase
  (lambda ()
    (make-cube-model "ElwynnFlowerBase")))


(define-block-model Funky
  (lambda ()
    (make-cube-model "funky")))


(define-block-model Portal
  (lambda ()
    (make-cube-model "portal")))


(define-block-model Portal2
  (lambda ()
    (make-cube-model "portal2")))


(define-block-model Ground
  (lambda ()
    (make-cube-model "ground")))


(define-block-model Greek
  (lambda ()
    (make-cube-model "greek")))


(define-block-model Roman
  (lambda ()
    (make-cube-model "roman")))


(define-block-model Wood
  (lambda ()
    (make-cube-model "wood")))


(define-block-model Transparent
  (lambda ()
    (make-cube-model "transparent" materials: (transparent-material) opaque?: #f)))


(define-block-model Glass
  (lambda ()
    (make-cube-model "glass" materials: (transparent-material) opaque?: #f)))


(define-block-model Web
  (lambda ()
    (make-cube-model "web" materials: (transparent-material) opaque?: #f)))


(define-block-model Grass
  (lambda ()
    (make-cross-model "grass")))


(define-block-model Rose
  (lambda ()
    (make-cross-model "rose")))


(define-block-model Dandelion
  (lambda ()
    (make-cross-model "dandelion")))


(define-block-model Quad
  (lambda ()
    (make-quad-model "dirty"))
  showcase?: #f)))
