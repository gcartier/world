;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Records
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.record jazz


(definition kind-sizes
  (list->table
    '((boolean  . 1)
      (s8       . 1)
      (u8       . 1)
      (s16      . 2)
      (u16      . 2)
      (s32      . 4)
      (u32      . 4)
      (s64      . 8)
      (u64      . 8)
      (double   . 8)
      (u8vector . 4))))


(class Record-Field extends Object
  
  
  (slot offset getter generate)
  (slot next  getter generate)
  
  
  (method override (initialize self offset next)
    (nextmethod self)
    (set! self.offset offset)
    (set! self.next next))
  
  
  (method override (print self output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{a} {a}" offset next)))))


(definition (field-next record name)
  (get-next (registered-field record name)))

(definition (field-offset record name)
  (get-offset (registered-field record name)))


(macro public (fieldoffset record-name name)
  (field-offset (require-record record-name) name))


(macro public (define-field record-name name previous replace kind (type #f))
  (let ((record (require-record record-name)))
    (define (determine-offset)
      (cond ((pair? previous)
             (record-size (car previous)))
            (replace
             (bind (record-name field-name) replace
               (field-offset (require-record record-name) field-name)))
            (else
             (field-next record previous))))
    
    (let ((offset (determine-offset))
          (size (table-ref kind-sizes kind))
          (type (if type (list type) '()))
          (read (string->symbol (format "read-{a}-{a}^" record-name name)))
          (write (string->symbol (format "write-{a}-{a}^" record-name name)))
          (scan (string->symbol (string-append "scan-" (symbol->string kind))))
          (put (string->symbol (string-append "put-" (symbol->string kind)))))
      (register-field record name (new Record-Field offset (+ offset size)))
      `(begin
         (definition public (,read data) ,@type
           (,scan data ,offset))
         
         (definition public (,write data value)
           (,put data ,offset value))))))


(class Record extends Object
  
  
  (slot ascendant   getter generate)
  (slot offset      getter generate)
  (slot fields      getter generate)
  (slot field-names getter generate)
  (slot last-name   getter generate)
  
  
  (method override (initialize self ascendant offset field-names last-name)
    (nextmethod self)
    (set! self.ascendant ascendant)
    (set! self.offset offset)
    (set! self.fields (make-table test: eq?))
    (set! self.field-names field-names)
    (set! self.last-name last-name))
  
  
  (method override (print self output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{a} {a}" ascendant offset))))
  
  
  (method protected (register-field self name field)
    (table-set! fields name field))
  
  
  (method protected (registered-field self name)
    (table-ref fields name)))


(definition protected records
  (make-table test: eq?))


(definition protected (find-record name)
  (table-ref records name #f))


(definition protected (require-record name)
  (table-ref records name))


(definition (record-size name)
  (if (not name)
      0
    (let ((record (require-record name)))
      (let ((last-name (get-last-name record)))
        (if (not last-name)
            (get-offset record)
          (field-next record last-name))))))


(macro public (recordsize name)
  (record-size name))


(macro public (define-record name . infos)
  (define (parse)
    (if (and (pair? infos) (symbol? (car infos)))
        (values (car infos) (cdr infos))
      (values #f infos)))
  
  (assert (not-null? infos)
    (receive (ascendant infos) (parse)
      (let ((previous (list ascendant))
            (offset (if (not ascendant)
                        0
                      (record-size ascendant)))
            (field-names (map car infos)))
        (table-set! records name (new Record ascendant offset field-names (and (not-null? field-names) (last field-names))))
        `(begin
           (unless (find-record ',name)
             (table-set! records ',name (new Record ',ascendant ,offset ',field-names ',(and (not-null? field-names) (last field-names)))))
           ,@(map (lambda (info)
                    (bind (field-name kind . rest) info
                      (bind-optionals ((type/replace #f)) rest
                        (if (pair? type/replace)
                            `(define-field ,name ,field-name #f ,type/replace ,kind #f)
                          (prog1 `(define-field ,name ,field-name ,previous #f ,kind ,type/replace)
                            (set! previous field-name))))))
                  infos)))))))
