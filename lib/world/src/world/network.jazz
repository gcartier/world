;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; Networking
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.network jazz


(import (jazz.geometry)
        (jazz.syntax (phase syntax))
        (world)
        (world.configure)
        (world.context)
        (world.support)
        (world.task))


(proclaim (not check bounds)
          (warn optimizations))


;;;
;;;; Outgoing
;;;


(definition protected outgoing-mutex
  (make-mutex 'outgoing))

(definition protected (with-outgoing-mutex thunk)
    (unwind-protect
        (begin
          (mutex-lock! outgoing-mutex)
          (thunk))
      (mutex-unlock! outgoing-mutex)))


(definition protected outgoing-max <fx>
  1024)

(definition protected outgoing-changes <f64vector>
  (make-f64vector outgoing-max))

(definition protected outgoing-size <fx>
  0)

(definition protected (set-outgoing-size size <fx>)
  (set! outgoing-size size))


(definition protected (maybe-grow-outgoing new-size <fx>)
  (define (grow vect <f64vector> old-reserved <fx> new-reserved <fx>) <f64vector>
    (let ((new-vect (make-f64vector new-reserved)))
      (subf64vector-move! vect 0 old-reserved new-vect 0)
      new-vect))
  
  (when (> new-size outgoing-max)
    (let ((new-reserved (fxround (* (cast <fl> new-size) GOLDEN_GROWTH))))
      (set! outgoing-changes (grow outgoing-changes outgoing-size new-reserved))
      (set! outgoing-max new-reserved))))


;;;
;;;; Droppable
;;;


(definition protected droppable-mutex
  (make-mutex 'droppable))

(definition protected (with-droppable-mutex thunk)
    (unwind-protect
        (begin
          (mutex-lock! droppable-mutex)
          (thunk))
      (mutex-unlock! droppable-mutex)))


(definition protected droppable-max <fx>
  1024)

(definition protected droppable-changes <f64vector>
  (make-f64vector droppable-max))

(definition protected droppable-size <fx>
  0)

(definition protected (set-droppable-size size <fx>)
  (set! droppable-size size))


(definition protected (maybe-grow-droppable new-size <fx>)
  (define (grow vect <f64vector> old-reserved <fx> new-reserved <fx>) <f64vector>
    (let ((new-vect (make-f64vector new-reserved)))
      (subf64vector-move! vect 0 old-reserved new-vect 0)
      new-vect))
  
  (when (> new-size droppable-max)
    (let ((new-reserved (fxround (* (cast <fl> new-size) GOLDEN_GROWTH))))
      (set! droppable-changes (grow droppable-changes droppable-size new-reserved))
      (set! droppable-max new-reserved)))))
