;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; Networking
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2016
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.network jazz


(import (jazz.application)
        (jazz.syntax (phase syntax))
        (world)
        (world.autoload)
        (world.configure)
        (world.syntax (phase syntax))
        (world.task))


;;;
;;;; Task
;;;


(definition public (network-task task <Task>)
  (declare (proper-tail-calls))
  (with-task task
    (lambda (exit)
      (let (iter (previous (current-seconds)))
        (let ((time (current-seconds)))
          (let ((elapse (- time previous)))
            (unless (stopping?~ task)
              (site (network on?: #t)
                (case zone-kind
                  ((client)
                   (send-outgoing)))))
            (let ((duration (- (current-seconds) time)))
              (task-sleep task network-period duration exit))
            (iter time)))))))


;;;
;;;; Outgoing
;;;


(definition protected outgoing-max
  1024)

(definition protected outgoing-changes
  (make-f64vector outgoing-max))

(definition protected outgoing-size
  0)


(definition protected (outgoing-push val <fl>)
  ;; force send
  (when (>= outgoing-size outgoing-max)
    (send-outgoing))
  (f64vector-set! outgoing-changes outgoing-size val)
  (set! outgoing-size (+ outgoing-size 1)))


(definition protected (send-outgoing)
  (when (> outgoing-size 0)
    ;; quick first draft to optimize
    (let ((changes (make-f64vector outgoing-size)))
      (subf64vector-move! outgoing-changes 0 outgoing-size changes 0)
      (send-client-update~ (get-application) changes)
      (set! outgoing-size 0)))))
