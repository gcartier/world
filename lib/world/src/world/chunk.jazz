;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Chunks
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.chunk jazz


(import (jazz.component)
        (jazz.foreign)
        (jazz.markup)
        (world)
        (world.autoload)
        (world.configure)
        (world.context)
        (world.generation.block)
        (world.history)
        (world.index)
        (world.section)
        (world.tag)
        (world.task))


(proclaim (not check bounds zero)
          (warn optimizations))


;;;
;;;; Chunk
;;;


(c-enumeration ChunkState
  (Shaped 0)
  (Populated 1)
  (Generated 2))


;;  +-------+-------+-------+-------+-------+-------+-------+
;;  |       |       |       |       |       |       |       |
;;  |   P   |   P   |   P   |   P   |   P   |   P   |   S   |
;;  |       |       |       |       |       |       |       |
;;  +-------+-------+-------+-------+-------+-------+-------+
;;  |       |       |       |       |       |       |       |
;;  |   P   |   G   |   G   |  <G>  |   G   |   G   |   S   |
;;  |       |       |       |       |       |       |       |
;;  +-------+-------+-------+-------+-------+-------+-------+
;;  |       |       |       |       |       |       |       |
;;  |   P   |   G   |   E   |  <E>  |   E   |   G   |   S   |
;;  |       |       |       |       |       |       |       |
;;  +-------+-------+-------+-------+-------+-------+-------+
;;  |       |       |       |       |       |       |       |
;;  |   P   |   G   |   E   |   E   |   E   |   G   |   S   |
;;  |       |       |       |       |       |       |       |
;;  +-------+-------+-------+-------+-------+-------+-------+
;;  |       |       |       |       |       |       |       |
;;  |   P   |   G   |   E   |   E   |   E   |   G   |   S   |
;;  |       |       |       |       |       |       |       |
;;  +-------+-------+-------+-------+-------+-------+-------+
;;  |       |       |       |       |       |       |       |
;;  |   P   |   G   |   G   |   G   |   G   |   G   |   S   |
;;  |       |       |       |       |       |       |       |
;;  +-------+-------+-------+-------+-------+-------+-------+
;;  |       |       |       |       |       |       |       |
;;  |   S   |   S   |   S   |   S   |   S   |   S   |   S   |
;;  |       |       |       |       |       |       |       |
;;  +-------+-------+-------+-------+-------+-------+-------+

;; when <G>'s visual is instantiated it will need its neighbor sectors
;; and so <E> will end up being regenerated if a garbage collect occured
;; iterating chunk neighbors up to 2 instead of 1 solves this I think


(definition protected debug-regenerated?
  #f)


(definition protected partial-mutex
  (make-mutex 'partial))


(definition protected (with-partial-mutex thunk)
  (unwind-protect
      (begin
        (mutex-lock! partial-mutex)
        (thunk))
    (mutex-unlock! partial-mutex)))


(definition protected partial-times
  (make-table test: eq?))

(definition protected partial-chunks
  (make-table test: eq?))

(definition protected generated-chunks
  (make-table test: equal?))


;; for debugging retainment
(definition protected (reset-partials)
  (with-partial-mutex
    (lambda ()
      (empty-table partial-times)
      (empty-table partial-chunks))))


(definition protected (iterate-chunk-neighbors chunk proc)
  (let ((zone (current-zone)))
    (let ((region (get-region chunk))
          (region-size 32))
      (let ((x (+ (* (get-x region) 32) (get-x chunk)))
            (z (+ (* (get-z region) 32) (get-z chunk))))
        (loop (for section-x from (- x 2) to (+ x 2))
              (loop (for section-z from (- z 2) to (+ z 2))
                    (unless (and (= section-x x)
                                 (= section-z z))
                      (let ((region (find-region zone
                                      (indexed (fxfloor/ section-x region-size)
                                               0
                                               (fxfloor/ section-z region-size)))))
                        (when region
                          (let ((neighbor (find-chunk region (planar-index section-x section-z))))
                            (when neighbor
                              (proc neighbor))))))))))))


(definition protected (register-partial chunk)
  (let ((needed '()))
    (iterate-chunk-neighbors chunk
      (lambda (neighbor)
        (set! needed (cons neighbor needed))))
    (with-partial-mutex
      (lambda ()
        (table-set! partial-times chunk (current-seconds))
        (table-set! partial-chunks chunk needed)))
    (trim-partials)))


;; quick inefficient solution
(definition protected (trim-partials)
  (define (clear-oldest)
    (let ((oldest-time #f)
          (oldest-chunk #f))
      (iterate-table partial-times
        (lambda (chunk time)
          (when (or (not oldest-time)
                    (< time oldest-time))
            (set! oldest-time time)
            (set! oldest-chunk chunk))))
      (table-clear partial-times oldest-chunk)
      (table-clear partial-chunks oldest-chunk)))
  
  (with-partial-mutex
    (lambda ()
      (let ((overflow (- (table-length partial-chunks) 128)))
        (when (> overflow 0)
          (loop (repeat overflow)
                (clear-oldest)))))))


(definition protected (register-generated chunk)
  (define (generated-stack)
    (let ((stack (execution-stack)))
      (cond ((memq? 'world.spawn:find-spawners stack)
             'find-spawners)
            ((memq? 'world.lava:find-flowing-lava stack)
             'find-flowing-lava)
            ((memq? 'world.water:find-flowing-water stack)
             'find-flowing-water)
            ((memq? 'world.actor:Actor:update-area-cube stack)
             'update-area-cube)
            ((memq? 'world.generation:instantiate-visual stack)
             'instantiate-visual)
            ((memq? 'world.generation:instantiate-physical stack)
             'instantiate-physical)
            ((memq? 'world.zone:Zone:add-element stack)
             'add-element)
            ((memq? 'world.element:Element:set-position stack)
             'set-position)
            (else
             stack))))
  
  (with-partial-mutex
    (lambda ()
      (table-clear partial-times chunk)
      (table-clear partial-chunks chunk)
      (when debug-regenerated?
        (let ((location (chunk-location chunk))
              (stack (generated-stack)))
          (table-add generated-chunks location stack)
          (unless (eq? stack 'instantiate-physical)
            (let ((all (table-ref generated-chunks location)))
              (when (> (length all) 1)
                (debug location (reverse all))))))))))


(definition protected (register-new chunk)
  (iterate-chunk-neighbors chunk
    (lambda (neighbor)
      (unless (= (get-state neighbor) Generated)
        (with-partial-mutex
          (lambda ()
            (table-set! partial-times neighbor (current-seconds))
            (table-add partial-chunks neighbor chunk))))))
  (trim-partials))


(definition protected (chunk-location chunk)
  (let ((region (get-region chunk)))
    (let ((region-x (get-x region))
          (region-z (get-z region))
          (chunk-x (get-x chunk))
          (chunk-z (get-z chunk)))
      (list region-x region-z chunk-x chunk-z))))


(definition protected (monitor-generated-throughput)
  (let ((thread
          (new-thread
            (let ((zone (current-zone)))
              (let ((last-time (current-monotonic))
                    (last-generated (get-sectors-generated zone)))
                (lambda ()
                  (let (iter)
                    (thread-sleep! 1.)
                    (let ((time (current-monotonic))
                          (generated (get-sectors-generated zone)))
                      (terminal (/ (cast <fl> (- generated last-generated)) (- time last-time)))
                      (set! last-time time)
                      (set! last-generated generated))
                    (iter)))))
            'generated)))
    (thread-base-priority-set! thread background-priority)
    (thread-start! thread)))


(class World-Chunk extends Object
  
  
  (slot index                 <planar-index>          getter generate)
  (slot state                 <fx>                    getter generate)
  (slot digest                                        accessors generate)
  (slot raw                                           accessors generate)
  (slot region                <World-Region>          getter generate)
  (slot tag                                           getter generate)
  (slot biomes                <u8vector+>             accessors generate)
  (slot heightmap             <vector>                accessors generate)
  (slot entities                                      getter generate)
  (slot block-entities                                getter generate)
  (slot block-entities-index  <table+>                getter generate)
  (slot sections                                      getter generate)
  (slot sections-table        <table+>  initialize #f getter generate)
  (slot elements                                      getter generate)
  (slot elements-designer               initialize #f accessors generate)
  (slot generator-revision    <fx>      initialize -1 accessors generate)
  (slot modified?             <bool>    initialize #f accessors generate)
  
  
  (method override (initialize self index state digest raw region tag biomes heightmap entities block-entities sections elements)
    (set! self.index index)
    (set! self.state state)
    (set! self.digest digest)
    (set! self.raw raw)
    (set! self.region region)
    (set! self.tag tag)
    (set! self.biomes biomes)
    (set! self.heightmap heightmap)
    (set! self.entities entities)
    (set! self.block-entities block-entities)
    (set! self.block-entities-index (index-block-entities self (list-payload-content block-entities)))
    (set! self.sections sections)
    (set! self.elements elements)
    (register-new self)
    (if (= state Generated)
        (register-generated self)
      (register-partial self)))
  
  
  (method override (print self output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{a} {a}" (get-x self) (get-z self)))))
  
  
  (method package (get-x self) <fx>
    (planar-index-x index))
  
  (method package (get-z self) <fx>
    (planar-index-z index))
  
  
  (method package (change-state self s)
    (unless (eq? s state)
      (set! state s)
      (let ((compound (tag-find "Level" (tag-value tag))))
        (tag-add compound "State" TAG_Byte state))
      (if (= s Generated)
          (register-generated self)
        (register-partial self))))
  
  
  (method package (register-section self y section)
    (unless sections-table
      (set! sections-table (make-table test: eq?)))
    (allege sections-table
      (table-set! sections-table y section)))
  
  
  (method (index-block-entities self block-entities)
    (if (null? block-entities)
        #f
      (let ((table (make-table test: equal?)))
        (for-each (lambda (block-entity)
                    (let ((x (tag-assoc "x" block-entity))
                          (y (tag-assoc "y" block-entity))
                          (z (tag-assoc "z" block-entity)))
                      (let ((index (indexed x y z)))
                        (table-set! table index block-entity))))
                  block-entities)
        table)))
  
  
  (method package (find-block-entity self index <index>)
    (and block-entities-index (table-ref block-entities-index index #f)))
  
  
  (method package (add-block-entity self index <index>)
    (let ((x (index-x index))
          (y (index-y index))
          (z (index-z index)))
      (let ((block-entity (list (make-tag "Items" TAG_List (make-list-payload TAG_Compound '()))
                                (make-tag "id" TAG_String "Chest")
                                (make-tag "x" TAG_Int x)
                                (make-tag "y" TAG_Int y)
                                (make-tag "z" TAG_Int z))))
        (when (not block-entities-index)
          (set! block-entities-index (make-table test: equal?)))
        (allege block-entities-index
          (set-list-payload-content block-entities TAG_Compound (cons block-entity (list-payload-content block-entities)))
          (table-set! block-entities-index index block-entity)
          block-entity))))
  
  
  (method package (add-sign self index <index> data)
    (let ((block-entity (list (make-tag "id" TAG_String "Sign")
                              (make-tag "x" TAG_Int (index-x index))
                              (make-tag "y" TAG_Int (index-y index))
                              (make-tag "z" TAG_Int (index-z index))
                              (make-tag "Text1" TAG_String (list-ref data 0))
                              (make-tag "Text2" TAG_String (list-ref data 1))
                              (make-tag "Text3" TAG_String (list-ref data 2))
                              (make-tag "Text4" TAG_String (list-ref data 3)))))
      (when (not block-entities-index)
        (set! block-entities-index (make-table test: equal?)))
      (allege block-entities-index
        (let ((old-sign (table-ref block-entities-index index #f)))
          (when old-sign
            (set-list-payload-content block-entities TAG_Compound (remove! old-sign (list-payload-content block-entities) test: equal?))))
        (set-list-payload-content block-entities TAG_Compound (cons block-entity (list-payload-content block-entities)))
        (table-set! block-entities-index index block-entity)
        (modified self)
        (save-region region)
        block-entity)))
  
  
  (method package (setup-section self section <World-Section>)
    (let ((section-y (get-y section))
          (blocks (get-blocks section))
          (data (get-data section))
          (blocklight (get-blocklight section))
          (skylight (get-skylight section)))
      (set-chunk section self)
      (register-section self section-y section)
      (let ((section-tag (list (make-tag "Blocks" TAG_Byte_Array blocks)
                               (make-tag "Data" TAG_Byte_Array data)
                               (make-tag "BlockLight" TAG_Byte_Array blocklight)
                               (make-tag "SkyLight" TAG_Byte_Array skylight)
                               (make-tag "Y" TAG_Byte section-y))))
        (set-list-payload-content sections TAG_Compound (cons section-tag (list-payload-content sections))))
      (modified self)))
  
  
  (method (create-section self section-y) <World-Section>
    (let ((section (make-section section-y)))
      (setup-section self section)
      section))
  
  
  (method package (load-section self section-y <fx> (create?: create? #f)) <World-Section+>
    (let ((y (modulo section-y 32)))
      (let ((existing-section (and sections-table (table-ref sections-table y #f))))
        (if (and (not existing-section) create?)
            (create-section self y)
          existing-section))))
  
  
  (method package (find-section self section-y <fx>) <World-Section+>
    (let ((y (modulo section-y 32)))
      (and sections-table (table-ref sections-table y #f))))
  
  
  (method package (count-sections self)
    (if (not sections-table)
        0
      (table-length sections-table)))
  
  
  (method (get-chunk-height self x <fx> z <fx>) <fx>
    (vector-ref heightmap (+ x (* z 16))))
  
  
  (method (section-x self)
    (+ (* (get-x region) 32) (get-x self)))
  
  (method (section-z self)
    (+ (* (get-z region) 32) (get-z self)))
  
  
  @convert
  (method (reshape)
    (set! sections-table #f)
    (shape))
  
  
  (method package (generated self)
    (let ((zone (current-zone)))
      (set! generator-revision (get-revision (get-generator zone)))))
  
  
  (method package (reset-modified self)
    (set! modified? #f))
  
  
  (method package (modified self)
    (set! modified? #t)
    (modified region))
  
  
  ;;;
  ;;;; Designer
  ;;;
  
  
  (method package (cache-designer self)
    (or elements-designer
        (let ((units '(world.data)))
          (let ((tag '(<Chunk-Container>))
                (data (new Data zone-version 'jazz units #f)))
            (let ((form (construct-form tag (imports-locator units) data))
                  (container (new Chunk-Container)))
              (set-chunk container self)
              (let ((des (new Former form: form reference: container)))
                (set! elements-designer des)
                des))))))
  
  
  (method package (save-designer self)
    (when elements-designer
      (let ((compound (tag-find "Level" (tag-value tag))))
        (if (null? (get-children (get-form elements-designer)))
            (begin
              (tag-remove compound "Elements")
              (set! elements #f)
              (set! elements-designer #f))
          (let ((port (open-output-string)))
            ;; for now save as string
            (save-to-port elements-designer port)
            (let ((content (object->u8vector (get-output-string port))))
              (tag-add compound "Elements" TAG_Byte_Array content)))))))
  
  
  (method package (instantiate-elements self)
    ;; lets be uber safe for sejour and acquire at the toplevel
    ;; there can be real bugs with container becoming corrupted (changed)
    ;; if we do not acquire the task mutex
    (with-reentrant-task-mutex
      (lambda ()
        (let ((zone (current-zone)))
          (when elements
            (let ((content (u8vector->object elements)))
              (call-with-input-string (list init: content readtable: jazz-readtable)
                (lambda (port)
                  (let ((form (read-form-from port))
                        (backward-compatibility? #f))
                    ;; backward compatibility
                    (when (eq? (get-model form) 'Component)
                      (set! backward-compatibility? #t)
                      (set-model form 'Chunk-Container))
                    (let ((container (parameterize ((backward-compatibility-inhibit-ids? #t))
                                       (instantiate form))))
                      @not-sure-and-it-is-really-annoying-to-spawn-the-worker-when-no-scripts!
                      (prepare-scripting zone)
                      (set-chunk container self)
                      (set! elements-designer (new Former form: form reference: container))
                      (for-each (lambda (child)
                                  ;; quick backward compatibility hack for now
                                  (when (is? child Entity)
                                    (let ((id (get-id child)))
                                      (when (not (f64vector? id))
                                        (let ((id (make-unique-id)))
                                          (set! backward-compatibility? #t)
                                          (set-property elements-designer child 'id id)
                                          (register-id child id)))))
                                  (add-element zone child self))
                                (get-children container))
                      (when backward-compatibility?
                        (with-chunk-designer zone self
                          (lambda (designer container)
                            ))))))))
            (set! elements #f)))))))


(definition protected backward-compatibility-inhibit-ids?
  (make-parameter #f))


;;;
;;;; Container
;;;


(class Chunk-Container extends Component
  
  
  (slot chunk initialize #f accessors generate)
  
  
  (method override (print self output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{a} {a}" (get-x chunk) (get-z chunk)))))))
