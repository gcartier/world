;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Chunks
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2016
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.chunk jazz


(import (jazz.geometry)
        (jazz.syntax (phase syntax))
        (world)
        (world.autoload)
        (world.biome)
        (world.foreign)
        (world.geometry)
        (world.index)
        (world.section)
        (world.syntax (phase syntax))
        (world.tag))


(proclaim (warn optimizations))


;;;
;;;; Structures
;;;


(definition public tree1
  '((((0 6 0) (0 5 0) (0 4 0) (0 3 0) (0 2 0) (0 1 0) (0 0 0)) . (17 . 0))
    (((0 7 0) (0 7 1) (1 7 0) (-1 7 0) (0 7 -1)
      (-1 6 0) (1 6 0) (0 6 1) (0 6 -1) (1 6 1) (-1 6 1)
      (-1 5 0) (1 5 0) (0 5 1) (0 5 -1) (1 5 1) (-1 5 1) (1 5 -1) (-1 5 -1) (-2 5 0) (2 5 0) (0 5 2) (0 5 -2) (1 5 2) (1 5 -2) (-1 5 2) (-1 5 -2) (2 5 1) (2 5 -1) (-2 5 1) (-2 5 -1) (2 5 2) (2 5 -2)
      (-1 4 0) (1 4 0) (0 4 1) (0 4 -1) (1 4 1) (-1 4 1) (1 4 -1) (-1 4 -1) (-2 4 0) (2 4 0) (0 4 2) (0 4 -2) (1 4 2) (1 4 -2) (-1 4 2) (-1 4 -2) (2 4 1) (2 4 -1) (-2 4 1) (-2 4 -1) (2 4 2) (2 4 -2) (-2 4 2) (-2 4 -2)) . (18 . 0))))


(definition public tree2
  '((((0 6 0) (0 5 0) (0 4 0) (0 3 0) (0 2 0) (0 1 0) (0 0 0)) . (17 . 2))
    (((0 7 0) (0 7 1) (1 7 0) (-1 7 0) (0 7 -1)
      (-1 6 0) (1 6 0) (0 6 1) (0 6 -1) (1 6 1) (-1 6 1)
      (-1 5 0) (1 5 0) (0 5 1) (0 5 -1) (1 5 1) (-1 5 1) (1 5 -1) (-1 5 -1) (-2 5 0) (2 5 0) (0 5 2) (0 5 -2) (1 5 2) (1 5 -2) (-1 5 2) (-1 5 -2) (2 5 1) (2 5 -1) (-2 5 1) (-2 5 -1) (2 5 -2)
      (-1 4 0) (1 4 0) (0 4 1) (0 4 -1) (1 4 1) (-1 4 1) (1 4 -1) (-1 4 -1) (-2 4 0) (2 4 0) (0 4 2) (0 4 -2) (1 4 2) (1 4 -2) (-1 4 2) (-1 4 -2) (2 4 1) (2 4 -1) (-2 4 1) (-2 4 -1) (2 4 2) (2 4 -2) (-2 4 2) (-2 4 -2)) . (18 . 2))))


(definition public dead-bush
  '((((0 0 0)) . (32 . 0))))


(definition public cactus
  '((((0 0 0) (0 1 0) (0 2 0)) . (81 . 0))))


(definition public tall-grass
  '((((0 0 0)) . (31 . 0))))


(definition get-structure
  (let ((trees (list tree1 tree2))
        (arid-structures (list dead-bush cactus)))
    (lambda (biome <Biome>)
      (case (get-name~ biome)
        ((Plains) tall-grass)
        ((Desert) (random-element arid-structures))
        ((Mesa) dead-bush)
        ((Forest Taiga ExtremeHills) (random-element trees))
        (else #f)))))


;;;
;;;; Chunk
;;;


(class World-Chunk extends Object
  
  
  (slot refcount              <fx>      initialize 0  getter generate)
  (slot x                     <fx>                    getter generate)
  (slot z                     <fx>                    getter generate)
  (slot digest                                        accessors generate)
  (slot raw                                           accessors generate)
  (slot region                                        getter generate)
  (slot tag                                           getter generate)
  (slot biomes                <u8vector>              accessors generate)
  (slot heightmap             <vector>                accessors generate)
  (slot entities                                      getter generate)
  (slot block-entities                                getter generate)
  (slot block-entities-index  <table+>                getter generate)
  (slot sections                                      getter generate)
  (slot sections-table        <table+>  initialize #f getter generate)
  (slot generator-revision    <fx>      initialize -1 accessors generate)
  (slot generated?            <bool>    initialize #f accessors generate)
  (slot populated?            <bool>    initialize #f accessors generate)
  (slot modified?             <bool>    initialize #f accessors generate)
  
  
  (method override (initialize digest raw region tag biomes heightmap entities block-entities sections chunk-index)
    (set! digest~self digest)
    (set! raw~self raw)
    (set! region~self region)
    (set! tag~self tag)
    (set! biomes~self biomes)
    (set! heightmap~self heightmap)
    (set! entities~self entities)
    (set! block-entities~self block-entities)
    (set! block-entities-index~self (index-block-entities (list-payload-content block-entities)))
    (set! sections~self sections)
    (set! x~self (car chunk-index))
    (set! z~self (cdr chunk-index)))
  
  
  (method override (print output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{a} {a}" x z))))
  
  
  (method (refcount-increase)
    (increase! refcount)
    ;(debug self 'refcount refcount)
    )
  
  
  (method (refcount-decrease)
    (decrease! refcount)
    ;(debug self 'refcount refcount)
    (when (<= refcount 0)
      (release)))
  
  
  (method (release)
    ;(debug 'release self)
    (refcount-decrease~ region))
  
  
  (method (register-section y section)
    (refcount-increase)
    (unless sections-table
      (set! sections-table (make-table test: eq?)))
    (table-set! sections-table y section))
  
  
  (method (index-block-entities block-entities)
    (if (null? block-entities)
        #f
      (let ((table (make-table test: equal?)))
        (for-each (lambda (block-entity)
                    (let ((x (tag-assoc "x" block-entity))
                          (y (tag-assoc "y" block-entity))
                          (z (tag-assoc "z" block-entity)))
                      (let ((index (vector x y z)))
                        (table-set! table index block-entity))))
                  block-entities)
        table)))
  
  
  (method (find-block-entity index)
    (and block-entities-index (table-ref block-entities-index index #f)))
  
  
  (method (add-block-entity index <vector>)
    (let ((x (vector-ref index 0))
          (y (vector-ref index 1))
          (z (vector-ref index 2)))
      (let ((block-entity (list (make-tag "Items" TAG_List (make-list-payload TAG_Compound '()))
                                (make-tag "id" TAG_String "Chest")
                                (make-tag "x" TAG_Int x)
                                (make-tag "y" TAG_Int y)
                                (make-tag "z" TAG_Int z))))
        (when (not block-entities-index)
          ;; when empty it contains ("TileEntities" 9 0)
          (set-list-payload-type block-entities TAG_Compound)
          (set! block-entities-index (make-table test: equal?)))
        (set-list-payload-content block-entities (cons block-entity (list-payload-content block-entities)))
        (table-set! block-entities-index index block-entity)
        block-entity)))
  
  
  (method (add-sign index <vector> data)
    (let ((block-entity (list (make-tag "id" TAG_String "Sign")
                              (make-tag "x" TAG_Int (vector-ref index 0))
                              (make-tag "y" TAG_Int (vector-ref index 1))
                              (make-tag "z" TAG_Int (vector-ref index 2))
                              (make-tag "Text1" TAG_String (list-ref data 0))
                              (make-tag "Text2" TAG_String (list-ref data 1))
                              (make-tag "Text3" TAG_String (list-ref data 2))
                              (make-tag "Text4" TAG_String (list-ref data 3)))))
      (when (not block-entities-index)
        (set-list-payload-type block-entities TAG_Compound)
        (set! block-entities-index (make-table test: equal?)))
      (let ((old-sign (table-ref block-entities-index index #f)))
        (when old-sign
          (set-list-payload-content block-entities (remove! old-sign (list-payload-content block-entities) test: equal?))))
      (set-list-payload-content block-entities (cons block-entity (list-payload-content block-entities)))
      (table-set! block-entities-index index block-entity)
      (modified)
      (save-region~ region)
      block-entity))
  
  
  (method (add-section sector-y) <World-Section>
    (let ((blocks (make-u8vector 4096))
          (data (make-u8vector 2048))
          (blocklight (make-u8vector 2048))
          (skylight (make-u8vector 2048 255))) ;; quicky
      (let ((section (new World-Section self blocks data blocklight skylight)))
        (register-section sector-y section)
        (modified)
        (let ((section-tag (list (make-tag "Blocks" TAG_Byte_Array blocks)
                                 (make-tag "Data" TAG_Byte_Array data)
                                 (make-tag "BlockLight" TAG_Byte_Array blocklight)
                                 (make-tag "SkyLight" TAG_Byte_Array skylight)
                                 (make-tag "Y" TAG_Byte sector-y))))
          (set-list-payload-content sections (cons section-tag (list-payload-content sections))))
        section)))
  
  
  (method (get-section section-y <fx>) <World-Section>
    (assert (< section-y 16))
    (or (and sections-table (table-ref sections-table section-y #f))
        (let ((section (add-section section-y)))
          (let ((sector (index-sector~ (current-zone) (vector x section-y z))))
            (set-sector~ section sector)
            (set-section~ sector section))
          section)))
  
  
  (method (regenerate)
    (set! sections-table #f)
    (generate (lambda ()
                )))
  
  
  (method (generate register-chunk)
    (cond-expand
      (release
       (declare (proper-tail-calls))
       (declare (optimize-dead-local-variables))
       (declare (inline))
       (declare (inlining-limit 1000)))
      (else))
    (let ((zone (current-zone)))
      (let ((sections (make-vector 16 #f)))
        (define (cache-section j <fx>) <World-Section>
          (let ((y (fxfloor/ j 16)))
            (or (vector-ref sections y)
                (let ((section (get-section y)))
                  (vector-set! sections y section)
                  section))))
        
        (define (local-index i <fx> j <fx> k <fx>) <fx>
          (+ (* j 256) (* k 16) i))
        
        (define (block-ref i <fx> j <fx> k <fx>) <fx>
          (u8vector-ref (get-blocks~ (cache-section j)) (local-index i (modulo j 16) k)))
        
        (define (block-set! i <fx> j <fx> k <fx> block-id <fx>)
          (u8vector-set! (get-blocks~ (cache-section j)) (local-index i (modulo j 16) k) block-id))
        
        (define (data-set! i <fx> j <fx> k <fx> data-id <fx>)
          (u4vector-set! (get-data~ (cache-section j)) (local-index i (modulo j 16) k) data-id))
        
        (define (u4vector-set! field <u8vector> index <fx> value <fx>)
          (let ((offset (quotient index 2)))
            (let ((byte (u8vector-ref field offset)))
              (u8vector-set! field offset
                (if (even? index)
                    (bitwise-ior value (bitwise-and byte #xF0))
                  (bitwise-ior (bitwise-and byte #x0F) (arithmetic-shift value 4)))))))
        
        (define (blockstate-set! i <fx> j <fx> k <fx> id <fx>)
          (bind-values (block-id data-id) (world.generation:decode-fxid/variant-id id)
            (block-set! i j k block-id)
            (when (> data-id 0)
              (data-set! i j k data-id))))
        
        (if (welcome?~ zone)
            (register-chunk)
          (let ((generator (get-generator~ zone)))
            (generate-chunk~ generator self block-ref block-set! data-set! blockstate-set! register-chunk)))
        (generate-complete)
        (modified))))
  
  
  (definition rand-seed
    23)
  
  (definition rand
    (newRandom rand-seed))
  
  
  (method (generate-complete)
    (let ((zone (current-zone)))
      (set! generator-revision (get-revision~ (get-generator~ zone)))
      (set! generated? #t)))
  
  
  (definition sea-level <fx>
    63)
  
  
  (method (generate-blocks block-ref block-set! data-set! heightmap <f64vector>)
    (declare (proper-tail-calls))
    (declare (optimize-dead-local-variables))
    (declare (inline))
    (declare (inlining-limit 1000))
    (site (blocks on?: #t parent: generate)
    (let ((heightmap-check (make-vector 256 #t))
          (zone (current-zone)))
      (define (heightmap-index x <fx> z <fx>) <fx>
        (+ x (* z 16)))
      
      (loop (for i from 0 below 4)
            (let ((j <fx> (* i 5))
                  (k <fx> (* (+ i 1) 5)))
              (loop (for l from 0 below 4)
                    (let ((i1 <fx> (* (+ j l) 33))
                          (j1 <fx> (* (+ j l 1) 33))
                          (k1 <fx> (* (+ k l) 33))
                          (l1 <fx> (* (+ k l 1) 33)))
                      (loop (for i2 from 0 below 32)
                            (let ((d1 <fl> (f64vector-ref heightmap (+ i1 i2)))
                                  (d2 <fl> (f64vector-ref heightmap (+ j1 i2)))
                                  (d3 <fl> (f64vector-ref heightmap (+ k1 i2)))
                                  (d4 <fl> (f64vector-ref heightmap (+ l1 i2))))
                              (let ((d5 <fl> (/ (- (f64vector-ref heightmap (+ i1 i2 1)) d1) 8.))
                                    (d6 <fl> (/ (- (f64vector-ref heightmap (+ j1 i2 1)) d2) 8.))
                                    (d7 <fl> (/ (- (f64vector-ref heightmap (+ k1 i2 1)) d3) 8.))
                                    (d8 <fl> (/ (- (f64vector-ref heightmap (+ l1 i2 1)) d4) 8.)))
                                (loop (for j2 from 0 below 8)
                                      (let ((d9 <fl> d1)
                                            (d10 <fl> d2)
                                            (y (+ j2 (* i2 8))))
                                        (let ((d11 <fl> (/ (- d3 d1) 4.))
                                              (d12 <fl> (/ (- d4 d2) 4.)))
                                          (loop (for k2 from 0 below 4)
                                                (let ((d13 <fl> (/ (- d10 d9) 4.))
                                                      (x (+ k2 (* i 4))))
                                                  (let ((lvt-45-1 <fl> d9))
                                                    (loop (for l2 from 0 below 4)
                                                          (let ((z (+ l2 (* l 4))))
                                                            (let ((index (heightmap-index x z)))
                                                              (if (> lvt-45-1 0.)
                                                                  (begin
                                                                    (block-set! x y z 1)
                                                                    (unless (vector-ref heightmap-check index)
                                                                      (vector-set! heightmap-check index #t)))
                                                                (when (vector-ref heightmap-check index)
                                                                  (vector-set! heightmap-check index #f)
                                                                  (vector-set! heightmap~self index y))
                                                                (when (< y sea-level)
                                                                  (block-set! x y z 9)))))
                                                          (increase! lvt-45-1 d13))
                                                    (increase! d9 d11)
                                                    (increase! d10 d12))))
                                          (increase! d1 d5)
                                          (increase! d2 d6)
                                          (increase! d3 d7)
                                          (increase! d4 d8))))))))))))))


  (method (replace-biome-blocks block-ref block-set! blockstate-set!)
    (declare (proper-tail-calls))
    (declare (optimize-dead-local-variables))
    (declare (inline))
    (declare (inlining-limit 1000))
    (site (replace on?: #t parent: generate)
      (loop (for x from 0 below 16)
            (loop (for z from 0 below 16)
                  (let ((biome <Biome> (id->biome (u8vector-ref biomes (+ x (* z 16))))))
                    (replace-blocks~ biome x z rand block-ref block-set! blockstate-set!))))))
  
  
  (method (generate-caves block-ref block-set! data-set!)
    (declare (proper-tail-calls))
    (declare (optimize-dead-local-variables))
    (declare (inline))
    (declare (inlining-limit 1000))
    (site (caves on?: #t parent: generate)
    (let ((range 8)
          (br block-ref)
          (bs block-set!)
          (ds data-set!)
          (Air 0)
          (Stone 1)
          (Water 8)
          (StationaryWater 9)
          (Lava 10))
      (define (add-room seed chunkX chunkZ rx ry rz)
        (add-tunnel seed chunkX chunkZ rx ry rz (+ 1.0 (* (randomFloat rand) 6.0)) 0.0 0.0 -1 -1 0.5))
      
      (define (add-tunnel seed chunkX <fx> chunkZ <fx> rx <fl> ry <fl> rz <fl> p_180702_12_ <fl> p_180702_13_ <fl> p_180702_14_ <fl> p_180702_15_ <fx> p_180702_16_ <fx> p_180702_17_ <fl>)
        (continuation-capture
          (lambda (return)
            (let ((d0 (+ (* (cast <fl> chunkX) 16.) 8.))
                  (d1 (+ (* (cast <fl> chunkZ) 16.) 8.))
                  (f0 0.)
                  (f1 0.))
              (let ((random (newRandom seed)))
                (when (<= p_180702_16_ 0)
                  (let ((i (- (* range 16) 16)))
                    (set! p_180702_16_ (- i (randomInt random (/ i 4))))))
                (let ((flag2 #f))
                  (when (= p_180702_15_ -1)
                    (set! p_180702_15_ (fxfloor/ p_180702_16_ 2))
                    (set! flag2 #t))
                  (let ((j (+ (randomInt random (fxfloor/ p_180702_16_ 2)) (fxfloor/ p_180702_16_ 4)))
                        (flag (= (randomInt random 6) 0)))
                    (continuation-capture
                      (lambda (continue)
                        (loop (for p_180702_15_ from p_180702_15_ below p_180702_16_)
                              (let ((d2
                                      (+ 1.5
                                         (* (sin
                                              (/ (* (cast <fl> p_180702_15_) PI)
                                                 (cast <fl> p_180702_16_)))
                                            p_180702_12_))))
                                (let ((d3 (* d2 p_180702_17_)))
                                  (let ((f2 (cos p_180702_14_)))
                                    (let ((f3 (sin p_180702_14_)))
                                      (increase! rx (* (cos p_180702_13_) f2))
                                      (increase! ry f3)
                                      (increase! rz (* (sin p_180702_13_) f2))
                                      (if flag
                                          (set! p_180702_14_ (* p_180702_14_ .92))
                                        (set! p_180702_14_ (* p_180702_14_ .7)))
                                      (set! p_180702_14_ (+ p_180702_14_ (* f1 .1)))
                                      (increase! p_180702_13_ (* f0 .1))
                                      (set! f1 (* f1 .9))
                                      (set! f0 (* f0 .75))
                                      (set! f1 (+ f1 (* (- (randomFloat random) (randomFloat random)) (randomFloat random) 2.)))
                                      (set! f0 (+ f0 (* (- (randomFloat random) (randomFloat random)) (randomFloat random) 4.)))
                                      (when (and (not flag2)
                                                 (= p_180702_15_ j)
                                                 (> p_180702_12_ 1.)
                                                 (> p_180702_16_ 0))
                                        (add-tunnel (randomLong random) chunkX chunkZ rx ry rz (+ (* (randomFloat random) .5) .5) (- p_180702_13_ (/ PI 2.)) (/ p_180702_14_ 3.) p_180702_15_ p_180702_16_ 1.)
                                        (add-tunnel (randomLong random) chunkX chunkZ rx ry rz (+ (* (randomFloat random) .5) .5) (+ p_180702_13_ (/ PI 2.)) (/ p_180702_14_ 3.) p_180702_15_ p_180702_16_ 1.)
                                        (continuation-return return #f))
                                      (when (or flag2 (/= (randomInt random 4) 0))
                                        (let ((d4 (- rx d0)))
                                          (let ((d5 (- rz d1)))
                                            (let ((d6 (- (cast <fl> p_180702_16_) (cast <fl> p_180702_15_))))
                                              (let ((d7 (+ p_180702_12_ 2. 16.)))
                                                (when (> (- (+ (* d4 d4) (* d5 d5))
                                                            (* d6 d6))
                                                         (* d7 d7))
                                                  (continuation-return return #f))
                                                (when (and (>= rx (- (- d0 16.) (* d2 2.)))
                                                           (>= rz (- (- d1 16.) (* d2 2.)))
                                                           (<= rx (+ d0 16. (* d2 2.)))
                                                           (<= rz (+ d1 16. (* d2 2.))))
                                                  (let ((k2 (- (- (fxfloor (- rx d2)) (* chunkX 16)) 1))
                                                        (k (+ (- (fxfloor (+ rx d2)) (* chunkX 16)) 1))
                                                        (l2 (- (fxfloor (- ry d3)) 1))
                                                        (l (+ (fxfloor (+ ry d3)) 1))
                                                        (i3 (- (- (fxfloor (- rz d2)) (* chunkZ 16)) 1))
                                                        (i1 (+ (- (fxfloor (+ rz d2)) (* chunkZ 16)) 1)))
                                                    (when (< k2 0) (set! k2 0))
                                                    (when (> k 16) (set! k 16))
                                                    (when (< l2 1) (set! l2 1))
                                                    (when (> l 248) (set! l 248))
                                                    (when (< i3 0) (set! i3 0))
                                                    (when (> i1 16) (set! i1 16))
                                                    (let ((flag3 #f))
                                                      @wait
                                                      (loop (for j1 <fx> init k2 test (and (not flag3) (< j1 k)) iter (+ j1 1))
                                                            (loop (for k1 <fx> init i3 test (and (not flag3) (< k1 i1)) iter (+ k1 1))
                                                                  (loop (for l1 <fx> init (+ l 1) test (and (not flag3) (>= l1 (- l2 1))) iter (- l1 1))
                                                                        (when (and (>= l1 0) (< l1 256))
                                                                          (let ((block (block-ref j1 l1 k1)))
                                                                            (when (or (= block Water)
                                                                                      (= block StationaryWater))
                                                                              (set! flag3 #t))
                                                                            (when (and (/= l1 (- l2 1))
                                                                                       (/= j1 k2)
                                                                                       (/= j1 (- k 1))
                                                                                       (/= k1 i3)
                                                                                       (/= k1 (- i1 1)))
                                                                              (set! l1 l2)))))))
                                                      (when #t @wait (not flag3)
                                                        (let ((mutableblockpos #f @wait (new MutableBlockPos)))
                                                          (loop (for j3 <fx> init k2 test (< j3 k) iter (+ j3 1))
                                                                (let ((d10 (/ (- (+ (cast <fl> j3) (* (cast <fl> chunkX) 16.) .5) rx) d2)))
                                                                  (loop (for i2 <fx> init i3 test (< i2 i1) iter (+ i2 1))
                                                                        (let ((d8 (/ (- (+ (cast <fl> i2) (* (cast <fl> chunkZ) 16.) .5) rz) d2)))
                                                                          (let ((flag1 #f))
                                                                            (when (< (+ (* d10 d10) (* d8 d8)) 1.)
                                                                              (loop (for j2 <fx> init l test (> j2 l2) iter (- j2 1))
                                                                                    (let ((d9 (/ (- (+ (- (cast <fl> j2) 1.) .5) ry) d3)))
                                                                                      (when (and (> d9 -.7)
                                                                                                 (< (+ (* d10 d10) (* d9 d9) (* d8 d8)) 1.))
                                                                                        (let () @wait ((iblockstate1
                                                                                                         (getBlockState~ chunkPrimerIn j3 j2 i2))
                                                                                                       (iblockstate2
                                                                                                         (firstNonNull~
                                                                                                           Objects
                                                                                                           (getBlockState~ chunkPrimerIn j3 (+ j2 1) i2)
                                                                                                           BLK_AIR)))
                                                                                          @wait
                                                                                          (when (or (= (getBlock~ iblockstate1) (GRASS~ Blocks))
                                                                                                    (= (getBlock~ iblockstate1) (MYCELIUM~ Blocks)))
                                                                                            (set! flag1 #t))
                                                                                          ;; quick try
                                                                                          (block-set! j3 j2 i2 Air)
                                                                                          @wait
                                                                                          (when (can-replace-block? iblockstate1 iblockstate2)
                                                                                            (if (< (- j2 1) 10)
                                                                                                (block-set! j3 j2 i2 Lava)
                                                                                              (begin
                                                                                                (block-set! j3 j2 i2 Air)
                                                                                                @wait
                                                                                                (when (= (getBlock~ iblockstate2)
                                                                                                         (SAND~ Blocks))
                                                                                                  ;; CONVERT
                                                                                                  ;; chunkPrimerIn.setBlockState(j3, j2 + 1, i2, iblockstate2.getValue(BlockSand.VARIANT) == BlockSand.EnumType.RED_SAND ? BLK_RED_SANDSTONE : BLK_SANDSTONE)
                                                                                                  )
                                                                                                @wait
                                                                                                (when (and flag1
                                                                                                           (= (getBlock~
                                                                                                                (getBlockState~
                                                                                                                  chunkPrimerIn
                                                                                                                  j3
                                                                                                                  (- j2 1)
                                                                                                                  i2))
                                                                                                              (DIRT~ Blocks)))
                                                                                                  (set~ mutableblockpos
                                                                                                    (+ j3 (* chunkX 16))
                                                                                                    0
                                                                                                    (+ i2 (* chunkZ 16)))
                                                                                                  (block-set!
                                                                                                    j3
                                                                                                    (- j2 1)
                                                                                                    i2
                                                                                                    (getDefaultState~
                                                                                                      (getBlock~
                                                                                                        (topBlock~
                                                                                                          (getBiomeGenForCoords~
                                                                                                            worldObj
                                                                                                            mutableblockpos)))))))))))))))))))
                                                          (when flag2
                                                            (continuation-return continue #f))))))))))))))))))))))))))
      
      (define (can-replace-block? block1 block2)
        ;; return block1 == Blocks.STONE ? #t : (block1 == Blocks.DIRT ? #t : (block1 == Blocks.GRASS ? #t : (block1 == Blocks.HARDENED_CLAY ? #t : (block1 == Blocks.STAINED_HARDENED_CLAY ? #t : (block1 == Blocks.SANDSTONE ? #t : (block1 == Blocks.RED_SANDSTONE ? #t : (block1 == Blocks.MYCELIUM ? #t : (block1 == Blocks.SNOW_LAYER ? #t : (block1 == Blocks.SAND || block1 == Blocks.GRAVEL) && block2.getMaterial() != Material.WATER))))))));
        #t)
      
      (define (recursive-generate p <fx> q <fx> chunkX <fx> chunkZ <fx>)
        (let ((i (randomInt rand (+ (randomInt rand (+ (randomInt rand 15) 1)) 1))))
          (when (/= (randomInt rand 7) 0)
            (set! i 0))
          (loop (for j from 0 below i)
                (let ((rx (cast <fl> (+ (* p 16) (randomInt rand 16))))
                      (ry (cast <fl> (randomInt rand (+ (randomInt rand 120) 8))))
                      (rz (cast <fl> (+ (* q 16) (randomInt rand 16))))
                      (k 1))
                  (when (= (randomInt rand 4) 0)
                    (add-room (randomLong rand) chunkX chunkZ rx ry rz)
                    (increase! k (randomInt rand 4)))
                  (loop (for l from 0 below k)
                        (let ((f0 (* (randomFloat rand) (* PI 2.)))
                              (f1 (/ (* (- (randomFloat rand) .5) 2.) 8.))
                              (f2 (+ (* (randomFloat rand) 2.) (randomFloat rand))))
                          (when (= (randomInt rand 10) 0)
                            (multiply! f2 (+ (* (randomFloat rand) (randomFloat rand) 3.) 1.)))
                          (add-tunnel (randomLong rand) chunkX chunkZ rx ry rz f2 f0 f1 0 0 1.)))))))
      
      (let ((i range)
            (worldSeed (worldSeed)))
        (setSeed rand worldSeed)
        (let ((j (randomLong rand))
              (k (randomLong rand)))
          (loop (for p <fx> init (- x i) test (<= p (+ x i)) iter (+ p 1))
                (loop (for q <fx> init (- z i) test (<= q (+ z i)) iter (+ q 1))
                      (setSeedAux rand p q j k worldSeed)
                      (recursive-generate p q x z))))))))
  
  
  (method (populate-chunks)
    (declare (proper-tail-calls))
    (declare (optimize-dead-local-variables))
    (declare (inline))
    (declare (inlining-limit 1000))
    (site (populate on?: #t parent: generate)
    (let ((zone (current-zone)))
      (let ((region-x <fx> (get-x~ region))
            (region-z <fx> (get-z~ region)))
        (define (get-chunk chunk-x <fx> chunk-z <fx>)
          (let ((region (get-loaded-region~ zone (+ region-x (fxfloor/ chunk-x 32)) (+ region-z (fxfloor/ chunk-z 32)))))
            (and region (get-loaded-chunk~ region (modulo chunk-x 32) (modulo chunk-z 32)))))
        
        (define (local-index i <fx> j <fx> k <fx>) <fx>
          (+ (* j 256) (* k 16) i))
        
        (define (block-ref section i <fx> j <fx> k <fx>) <fx>
          (u8vector-ref (get-blocks~ section) (local-index i (modulo j 16) k)))
        
        (define (block-set! section i <fx> j <fx> k <fx> block-id <fx>)
          (u8vector-set! (get-blocks~ section) (local-index i (modulo j 16) k) block-id))
        
        (define (data-set! section i <fx> j <fx> k <fx> data-id <fx>)
          (u4vector-set! (get-data~ section) (local-index i (modulo j 16) k) data-id))
        
        (define (u4vector-set! field <u8vector> index <fx> value <fx>)
          (let ((offset (quotient index 2)))
            (let ((byte (u8vector-ref field offset)))
              (u8vector-set! field offset
                (if (even? index)
                    (bitwise-ior value (bitwise-and byte #xF0))
                  (bitwise-ior (bitwise-and byte #x0F) (arithmetic-shift value 4)))))))
        
        (define (blockstate-set! section i <fx> j <fx> k <fx> id <fx>)
          (bind-values (block-id data-id) (world.generation:decode-fxid/variant-id id)
            (block-set! section i j k block-id)
            (when (>= data-id 0)
              (data-set! section i j k data-id))))
        
        (let ((back (get-chunk x (- z 1)))
              (right (get-chunk (+ x 1) z))
              (front (get-chunk x (+ z 1)))
              (left (get-chunk (- x 1) z)))
          (when (and right front)
            (let ((corner (get-chunk (+ x 1) (+ z 1))))
              (when corner
                (populate-chunk block-ref block-set! blockstate-set! front corner right))))
          (when (and left front)
            (let ((corner (get-chunk (- x 1) (+ z 1))))
              (when corner
                (populate-chunk~ left block-ref block-set! blockstate-set! corner front self))))
          (when (and back right)
            (let ((corner (get-chunk (+ x 1) (- z 1))))
              (when corner
                (populate-chunk~ back block-ref block-set! blockstate-set! self right corner))))
          (when (and back left)
            (let ((corner (get-chunk (- x 1) (- z 1))))
              (when corner
                (populate-chunk~ corner block-ref block-set! blockstate-set! left self back)))))))))
  
  
  (method (populate-chunk block-ref block-set! blockstate-set! front corner right)
    (declare (proper-tail-calls))
    (declare (optimize-dead-local-variables))
    (declare (inline))
    (declare (inlining-limit 1000))
    (unless populated?
      (let ()
        (define (get-chunk x <fx> z <fx>) <World-Chunk>
          (if (< x 16)
              (if (< z 16)
                  self
                front)
            (if (< z 16)
                right
              corner)))
        
        (define (get-height x <fx> z <fx>) <fx>
          (vector-ref (get-heightmap~ (get-chunk x z)) (heightmap-index (modulo x 16) (modulo z 16))))
        
        (define (get-biome x <fx> z <fx>) <Biome>
          (id->biome (u8vector-ref (get-biomes~ (get-chunk x z)) (heightmap-index (modulo x 16) (modulo z 16)))))
        
        (define (with-position x <fx> z <fx> proc)
          (let ((chunk (get-chunk x z))
                (index (heightmap-index (modulo x 16) (modulo z 16))))
            (proc (vector-ref (get-heightmap~ chunk) index) (id->biome (u8vector-ref (get-biomes~ chunk) index)))))
        
        (define (heightmap-index x <fx> z <fx>) <fx>
          (+ x (* z 16)))
        
        (define (chunk-block-ref x <fx> y <fx> z <fx>) <fx>
          (block-ref (get-section~ (get-chunk x z) (fxfloor/ y 16)) (modulo x 16) (modulo y 16) (modulo z 16)))
        
        (define (chunk-block-set! x <fx> y <fx> z <fx> block-id <fx>)
          (block-set! (get-section~ (get-chunk x z) (fxfloor/ y 16)) (modulo x 16) (modulo y 16) (modulo z 16) block-id))
        
        (define (chunk-blockstate-set! x <fx> y <fx> z <fx> id <fx>)
          (blockstate-set! (get-section~ (get-chunk x z) (fxfloor/ y 16)) (modulo x 16) (modulo y 16) (modulo z 16) id))
        
        (let ((biome (get-biome 16 16)))
          (decorate-biome~ biome rand chunk-block-ref chunk-block-set! chunk-blockstate-set! get-height)
          (set! populated? #t)))))
  
  
  (method (generate-structure structure x <fx> y <fx> z <fx> block-set! data-set! get-chunk)
    (declare (proper-tail-calls))
    (declare (optimize-dead-local-variables))
    (declare (inline))
    (declare (inlining-limit 1000))
    #f @convert
    (let ()
      (define (with-field x <fx> y <fx> z <fx> proc)
        (proc (get-section~ (get-chunk x z) (fxfloor/ y 16)) (modulo x 16) (modulo y 16) (modulo z 16)))
      
      (for-each (lambda (element)
                  (for-each (lambda (loc)
                              (bind (a <fx> b <fx> c <fx>) loc
                                (with-field (+ x a) (+ y b) (+ z c)
                                  (lambda (section x y z)
                                    (block-set! section x y z (cadr element) #f)
                                    (data-set! section x y z (cddr element) (cadr element))))))
                            (car element)))
                structure)))
  
  
  (method protected (reset-modified)
    (set! modified? #f))
  
  
  (method protected (modified)
    (set! modified? #t)
    (modified~ region)))


;;;
;;;; Data
;;;


(class World-Data extends Object
  
  
  (slot blocks      getter generate)
  (slot data        getter generate)
  (slot blocklight  getter generate)
  (slot skylight    getter generate)
  
  
  (method override (initialize blocks data blocklight skylight)
    (set! blocks~self blocks)
    (set! data~self data)
    (set! blocklight~self blocklight)
    (set! skylight~self skylight))))
