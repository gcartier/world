;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Chunks
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2016
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.chunk jazz


(import (world)
        (world.autoload)
        (world.geometry)
        (world.section)
        (world.syntax (phase syntax))
        (world.tag))


(proclaim (warn optimizations))


;;;
;;;; Chunk
;;;


(class World-Chunk extends Object
  
  
  (slot refcount             <fx>      initialize 0  getter generate)
  (slot digest                                       accessors generate)
  (slot raw                                          accessors generate)
  (slot region                                       getter generate)
  (slot tag                                          getter generate)
  (slot heightmap            <vector+>               getter generate)
  (slot entities                                     getter generate)
  (slot block-entities                               getter generate)
  (slot block-entities-index <table+>                getter generate)
  (slot sections                                     getter generate)
  (slot sections-table       <table+>  initialize #f getter generate)
  (slot modified?            <bool>    initialize #f accessors generate)
  (slot index                <pair>                  getter generate)
  
  
  (method override (initialize digest raw region tag heightmap entities block-entities sections chunk-index)
    (set! digest~self digest)
    (set! raw~self raw)
    (set! region~self region)
    (set! tag~self tag)
    (set! heightmap~self heightmap)
    (set! entities~self entities)
    (set! block-entities~self block-entities)
    (set! block-entities-index~self (index-block-entities (list-payload-content block-entities)))
    (set! sections~self sections)
    (set! index~self chunk-index))
  
  
  (method (refcount-increase)
    (increase! refcount)
    ;(debug self 'refcount refcount)
    )
  
  
  (method (refcount-decrease)
    (decrease! refcount)
    ;(debug self 'refcount refcount)
    (when (<= refcount 0)
      (release)))
  
  
  (method (release)
    ;(debug 'release self)
    (refcount-decrease~ region))
  
  
  (method (register-section y section)
    (refcount-increase)
    (unless sections-table
      (set! sections-table (make-table test: eq?)))
    (table-set! sections-table y section))
  
  
  (method (index-block-entities block-entities)
    (if (null? block-entities)
        #f
      (let ((table (make-table test: equal?)))
        (for-each (lambda (block-entity)
                    (let ((x (tag-assoc "x" block-entity))
                          (y (tag-assoc "y" block-entity))
                          (z (tag-assoc "z" block-entity)))
                      (let ((index (vector x y z)))
                        (table-set! table index block-entity))))
                  block-entities)
        table)))
  
  
  (method (find-block-entity index)
    (and block-entities-index (table-ref block-entities-index index #f)))
  
  
  (method (add-block-entity index)
    (let ((x (vector-ref index 0))
          (y (vector-ref index 1))
          (z (vector-ref index 2)))
      (let ((block-entity (list (make-tag "Items" TAG_List (make-list-payload TAG_Compound '()))
                                (make-tag "id" TAG_String "Chest")
                                (make-tag "x" TAG_Int x)
                                (make-tag "y" TAG_Int y)
                                (make-tag "z" TAG_Int z))))
        (when (not block-entities-index)
          ;; when empty it contains ("TileEntities" 9 0)
          (set-list-payload-type block-entities TAG_Compound)
          (set! block-entities-index (make-table test: equal?)))
        (set-list-payload-content block-entities (cons block-entity (list-payload-content block-entities)))
        (table-set! block-entities-index index block-entity)
        block-entity)))
  
  
  (method (add-section sector-y)
    (let ((blocks (make-u8vector 4096))
          (data (make-u8vector 2048))
          (blocklight (make-u8vector 2048))
          (skylight (make-u8vector 2048 255))) ;; quicky
      (let ((section (new World-Section self blocks data blocklight skylight)))
        (register-section sector-y section)
        (modified)
        (let ((section-tag (list (make-tag "Blocks" TAG_Byte_Array blocks)
                                 (make-tag "Data" TAG_Byte_Array data)
                                 (make-tag "BlockLight" TAG_Byte_Array blocklight)
                                 (make-tag "SkyLight" TAG_Byte_Array skylight)
                                 (make-tag "Y" TAG_Byte sector-y))))
          (set-list-payload-content sections (cons section-tag (list-payload-content sections))))
        section)))
  
  
  (method (generate)
    (let ((zone (current-zone)))
      (define (local-index i <fx> j <fx> k <fx>) <fx>
        (+ (* j 256) (* k 16) i))
      
      (define (block-ref section i <fx> j <fx> k <fx>) <fx>
        (u8vector-ref (get-blocks~ section) (local-index i j k)))
      
      (define (block-set! section i <fx> j <fx> k <fx> block-id <fx>)
        (u8vector-set! (get-blocks~ section) (local-index i j k) block-id))
      
      (case (get-generator~ zone)
        ((flat)
         (generate-flat block-ref block-set!))
        ((diamond)
         (generate-diamond-square block-ref block-set!)))))
  
  
  (method (generate-flat block-ref block-set!)
    (let ((section (add-section 0)))
      (loop (for i from 0 below 16)
            (loop (for k from 0 below 16)
                  (block-set! section i 0 k world.generation:Bedrock)
                  (block-set! section i 1 k world.generation:Dirt)
                  (block-set! section i 2 k world.generation:Dirt)
                  (block-set! section i 3 k world.generation:Grass)))))
  
  
  (method (generate-diamond-square block-ref block-set!)
    (set! heightmap~self (generate-diamond-square-heightmap))
    (generate-blocks block-ref block-set!)
    (modified))
  
  
  (method (generate-blocks block-ref block-set!)
    (let ((sections (make-vector 16 #f)))
      (define (heightmap-index x <fx> z <fx>) <fx>
        (+ x (* z 16)))
      
      (define (get-section y)
        (let ((section-y (fxfloor/ y 16)))
          (or (vector-ref sections section-y)
              (let ((section (add-section section-y)))
                (vector-set! sections section-y section)
                section))))
      
      (loop (for x from 0 below 16)
            (loop (for z from 0 below 16)
                  (let ((height (vector-ref heightmap (heightmap-index x z))))
                    (loop (for y from 0 below height)
                          (block-set! (get-section y) x (modulo y 16) z 3)))))))
  
  
  (method (generate-diamond-square-heightmap)
    (let ((height (make-vector 289 0)))
      (define (vector-index x <fx> z <fx>) <fx>
        (+ x (* z 17)))
      
      (define (diamond-step n)
        (let ((average-hop (/ 16 (expt 2 n))))
          (let ((move-hop (* average-hop 2)))
            (define (diamond-average x z)
              (fxfloor (/ (+ (vector-ref height (vector-index (- x average-hop) (- z average-hop)))
                             (vector-ref height (vector-index (+ x average-hop) (- z average-hop)))
                             (vector-ref height (vector-index (- x average-hop) (+ z average-hop)))
                             (vector-ref height (vector-index (+ x average-hop) (+ z average-hop))))
                          4.)))
            
            (loop (for a from 0 below (expt 2 (- n 1)))
                  (loop (for c from 0 below (expt 2 (- n 1)))
                        (let ((x (+ average-hop (* a move-hop)))
                              (z (+ average-hop (* c move-hop))))
                          (vector-set! height (vector-index x z) (+ (diamond-average x z) (if (> n 1) 0 (random-integer-between -1 1))))))))))
      
      (define (square-step n)
        (let ((average-hop (/ 16 (expt 2 n))))
          (let ((move-hop (* average-hop 2)))
            (define (square-average x z)
              (let ((edge? (or (= x 0) (= x 16) (= z 0) (= z 16))))
                (fxfloor (/ (+ (if (= x 0) 0 (vector-ref height (vector-index (- x average-hop) z)))
                               (if (= x 16) 0 (vector-ref height (vector-index (+ x average-hop) z)))
                               (if (= z 0) 0 (vector-ref height (vector-index x (- z average-hop))))
                               (if (= z 16) 0 (vector-ref height (vector-index x (+ z average-hop)))))
                            (if edge? 3. 4.)))))
            
            (loop (for c from 0 below (+ (expt 2 n) 1))
                  (if (even? c)
                      (loop (for a from 0 below (expt 2 (- n 1)))
                            (let ((x (+ average-hop (* a move-hop)))
                                  (z (* c average-hop)))
                              (vector-set! height (vector-index x z) (+ (square-average x z) (if (> n 1) 0 (random-integer-between -1 1))))))
                    (loop (for a from 0 below (+ (expt 2 (- n 1)) 1))
                          (let ((x (* a move-hop))
                                (z (* c average-hop)))
                            (vector-set! height (vector-index x z) (+ (square-average x z) (if (> n 1) 0 (random-integer-between -1 1)))))))))))
      
      (vector-set! height (vector-index 0  0 ) 64)
      (vector-set! height (vector-index 0  16) 64)
      (vector-set! height (vector-index 16 0 ) 64)
      (vector-set! height (vector-index 16 16) 64)
      (loop (for n from 1 to 4)
            (diamond-step n)
            (square-step n))
      (subvector height 0 256)))
  
  
  (method (generate-heightmap)
    (let ((x-variation (lambda (x y) ;; todo polynomial interpolation of random functions in x and y
                         )))))
  
  
  (method protected (reset-modified)
    (set! modified? #f))
  
  
  (method protected (modified)
    (set! modified? #t)
    (modified~ region)))


;;;
;;;; Data
;;;


(class World-Data extends Object
  
  
  (slot blocks      getter generate)
  (slot data        getter generate)
  (slot blocklight  getter generate)
  (slot skylight    getter generate)
  
  
  (method override (initialize blocks data blocklight skylight)
    (set! blocks~self blocks)
    (set! data~self data)
    (set! blocklight~self blocklight)
    (set! skylight~self skylight))))
