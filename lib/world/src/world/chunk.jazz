;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Chunks
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2016
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.chunk jazz


(import (jazz.component)
        (jazz.foreign)
        (jazz.geometry)
        (jazz.jml)
        (jazz.syntax (phase syntax))
        (world)
        (world.autoload)
        (world.foreign)
        (world.generation.block)
        (world.geometry.syntax (phase syntax))
        (world.homogeneous)
        (world.instantiate)
        (world.retain)
        (world.section)
        (world.syntax (phase syntax))
        (world.tag))


(proclaim (warn optimizations))


;;;
;;;; Chunk
;;;


(c-enumeration ChunkState
  (Shaped 0)
  (Populated 1)
  (Generated 2))


(class World-Chunk extends Object
  
  
  (slot refcount              <fx>      initialize 0  getter generate)
  (slot x                     <fx>                    getter generate)
  (slot z                     <fx>                    getter generate)
  (slot state                 <fx>                    getter generate)
  (slot digest                                        accessors generate)
  (slot raw                                           accessors generate)
  (slot region                <World-Region>          getter generate)
  (slot tag                                           getter generate)
  (slot biomes                <u8vector>              accessors generate)
  (slot heightmap             <vector>                accessors generate)
  (slot entities                                      getter generate)
  (slot block-entities                                getter generate)
  (slot block-entities-index  <table+>                getter generate)
  (slot sections                                      getter generate)
  (slot sections-table        <table+>  initialize #f getter generate)
  (slot elements                                      getter generate)
  (slot elements-designer               initialize #f accessors generate)
  (slot generator-revision    <fx>      initialize -1 accessors generate)
  (slot modified?             <bool>    initialize #f accessors generate)
  
  
  (method override (initialize state digest raw region tag biomes heightmap entities block-entities sections elements chunk-index)
    (set! state~self state)
    (set! digest~self digest)
    (set! raw~self raw)
    (set! region~self region)
    (set! tag~self tag)
    (set! biomes~self biomes)
    (set! heightmap~self heightmap)
    (set! entities~self entities)
    (set! block-entities~self block-entities)
    (set! block-entities-index~self (index-block-entities (list-payload-content block-entities)))
    (set! sections~self sections)
    (set! elements~self elements)
    (set! x~self (car chunk-index))
    (set! z~self (cdr chunk-index)))
  
  
  (method override (print output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{a} {a}" x z))))
  
  
  (method (retain retainer)
    (when (= refcount 0)
      (retain~ region self))
    (increase! refcount)
    (when debug-retain?
      (add-retainer self retainer)))
  
  
  (method (transfer old-retainer new-retainer)
    (when debug-retain?
      (transfer-retainer self old-retainer new-retainer)))
  
  
  (method (release retainer)
    (decrease! refcount)
    (when debug-retain?
      (remove-retainer self retainer))
    (when (<= refcount 0)
      (free)))
  
  
  (method (free)
    (release~ region self))
  
  
  (method (change-state s)
    (set! state s)
    (let ((compound (tag-find "Level" (tag-value tag))))
      (tag-add compound "State" TAG_Byte state)))
  
  
  (method (register-section y section)
    (assert (between? y 0 31))
    (unless sections-table
      (set! sections-table (make-table test: eq?)))
    (allege sections-table
      (table-set! sections-table y section)))
  
  
  (method (index-block-entities block-entities)
    (if (null? block-entities)
        #f
      (let ((table (make-table test: equal?)))
        (for-each (lambda (block-entity)
                    (let ((x (tag-assoc "x" block-entity))
                          (y (tag-assoc "y" block-entity))
                          (z (tag-assoc "z" block-entity)))
                      (let ((index (vector x y z)))
                        (table-set! table index block-entity))))
                  block-entities)
        table)))
  
  
  (method (find-block-entity index)
    (and block-entities-index (table-ref block-entities-index index #f)))
  
  
  (method (add-block-entity index <vector>)
    (let ((x (vector-ref index 0))
          (y (vector-ref index 1))
          (z (vector-ref index 2)))
      (let ((block-entity (list (make-tag "Items" TAG_List (make-list-payload TAG_Compound '()))
                                (make-tag "id" TAG_String "Chest")
                                (make-tag "x" TAG_Int x)
                                (make-tag "y" TAG_Int y)
                                (make-tag "z" TAG_Int z))))
        (when (not block-entities-index)
          (set! block-entities-index (make-table test: equal?)))
        (allege block-entities-index
          (set-list-payload-content block-entities TAG_Compound (cons block-entity (list-payload-content block-entities)))
          (table-set! block-entities-index index block-entity)
          block-entity))))
  
  
  (method (add-sign index <vector> data)
    (let ((block-entity (list (make-tag "id" TAG_String "Sign")
                              (make-tag "x" TAG_Int (vector-ref index 0))
                              (make-tag "y" TAG_Int (vector-ref index 1))
                              (make-tag "z" TAG_Int (vector-ref index 2))
                              (make-tag "Text1" TAG_String (list-ref data 0))
                              (make-tag "Text2" TAG_String (list-ref data 1))
                              (make-tag "Text3" TAG_String (list-ref data 2))
                              (make-tag "Text4" TAG_String (list-ref data 3)))))
      (when (not block-entities-index)
        (set! block-entities-index (make-table test: equal?)))
      (allege block-entities-index
        (let ((old-sign (table-ref block-entities-index index #f)))
          (when old-sign
            (set-list-payload-content block-entities TAG_Compound (remove! old-sign (list-payload-content block-entities) test: equal?))))
        (set-list-payload-content block-entities TAG_Compound (cons block-entity (list-payload-content block-entities)))
        (table-set! block-entities-index index block-entity)
        (modified)
        (save-region~ region)
        block-entity)))
  
  
  (method (setup-section section <World-Section>)
    (let ((section-y (get-y~ section))
          (blocks (get-blocks~ section))
          (data (get-data~ section))
          (blocklight (get-blocklight~ section))
          (skylight (get-skylight~ section)))
      (set-chunk~ section self)
      (register-section section-y section)
      (let ((section-tag (list (make-tag "Blocks" TAG_Byte_Array blocks)
                               (make-tag "Data" TAG_Byte_Array data)
                               (make-tag "BlockLight" TAG_Byte_Array blocklight)
                               (make-tag "SkyLight" TAG_Byte_Array skylight)
                               (make-tag "Y" TAG_Byte section-y))))
        (set-list-payload-content sections TAG_Compound (cons section-tag (list-payload-content sections))))
      (modified)))
  
  
  (method (create-section section-y) <World-Section>
    (let ((section (make-section section-y)))
      (setup-section section)
      section))
  
  
  (method (load-section section-x <fx> section-y <fx> section-z <fx> (create?: create? #f)) <World-Section+>
    (let ((y (modulo section-y 32)))
      (let ((existing-section (and sections-table (table-ref sections-table y #f))))
        (let ((section (if (and (not existing-section) create?)
                           (create-section y)
                         existing-section)))
          (when section
            (retain~ section 'load-section))
          section))))
  
  
  (method (get-section section-y <fx>) <World-Section>
    (assert (between? section-y 0 31))
    (or (and sections-table (table-ref sections-table section-y #f))
        (create-section section-y)))
  
  
  (method (get-chunk-height x <fx> z <fx>) <fx>
    (vector-ref heightmap (+ x (* z 16))))
  
  
  @convert
  (method (reshape)
    (set! sections-table #f)
    (shape))
  
  
  (method (generated)
    (let ((zone (current-zone)))
      (set! generator-revision (get-revision~ (get-generator~ zone)))))
  
  
  (method protected (reset-modified)
    (set! modified? #f))
  
  
  (method protected (modified)
    (set! modified? #t)
    (modified~ region))
  
  
  ;;;
  ;;;; Designer
  ;;;
  
  
  (method (cache-designer)
    (or elements-designer
        (let ((units '(world.data)))
          (let ((tag '(<Chunk-Container>))
                (data (new Data zone-version 'jazz units #f)))
            (let ((form (construct-form tag (imports-locator units) data))
                  (container (new Chunk-Container)))
              (set-chunk~ container self)
              (let ((des (new Former form: form reference: container)))
                (set! elements-designer des)
                des))))))
  
  
  (method (save-designer)
    (when elements-designer
      (let ((compound (tag-find "Level" (tag-value tag))))
        (if (null? (get-children~ (get-form~ elements-designer)))
            (begin
              (tag-remove compound "Elements")
              (set! elements #f)
              (set! elements-designer #f))
          (let ((port (open-output-string)))
            ;; for now save as string
            (save-to-port~ elements-designer port)
            (let ((content (object->u8vector (get-output-string port))))
              (tag-add compound "Elements" TAG_Byte_Array content)))))))
  
  
  (method (instantiate-elements)
    (when elements
      (instantiate-enqueue (cons self elements))
      (set! elements #f))))


;;;
;;;; Container
;;;


(class Chunk-Container extends Component
  
  
  (slot chunk initialize #f accessors generate)
  
  
  (method override (print output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{a} {a}" (get-x~ chunk) (get-z~ chunk)))))))
