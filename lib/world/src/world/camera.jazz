;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; Cameras
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.camera jazz


(import (jazz.geometry)
        (jazz.opengl.glew)
        (gaea.geometry)
        (gaea.homogeneous)
        (world)
        (world.area)
        (world.autoload)
        (world.context)
        (world.draw)
        (world.dyes)
        (world.element)
        (world.index)
        (world.sector)
        (world.settings))


(definition public (make-camera)
  (new Camera))


(definition public (camera-copy! dst src)
  ;; quick hack
  (if (not (window?))
      (size-change dst {Dimension 1920 1200})
    (size-change dst (get-size (current-window))))
  (set-position dst (get-position src))
  (set-lookat dst (get-lookat src))
  (derive-target dst)
  (camera-update dst))


(definition protected bound-camera?
  #t)

(definition protected (bind-camera)
  (set! bound-camera? #t))

(definition protected (unbind-camera)
  (set! bound-camera? #f))


(definition protected unbind-camera?
  #t)

(definition protected (set-unbind-camera? flag)
  (set! unbind-camera? flag))


;;;
;;;; Camera
;;;


(class Camera extends Element
  
  
  ;; target
  (slot target             <vertex>          initialize (vertex 0. 0. -1.) getter generate)
  
  ;; update
  (slot update-callback    <object>          initialize #f                 accessors generate)
  
  ;; stable
  (slot dirty?             <bool>            initialize #f                 getter generate)
  (slot stable?            <bool>            initialize #f                 getter generate)
  (slot stable-since       <fl>              initialize #f                 getter generate)
  (slot callback           <object>          initialize #f                 accessors generate)
  (slot matrix-hook        <object>          initialize #f                 accessors generate)
  
  ;; screen
  (slot screen-width       <fl>                                            accessors generate)
  (slot screen-height      <fl>                                            accessors generate)
  (slot inited?            <bool>            initialize #f                 accessors generate)
  
  ;; projection
  (slot projection         <symbol>          initialize 'perspective       accessors generate)
  
  ;; perspective
  (slot perspective-fov    <fl>              initialize 45.                accessors generate)
  (slot perspective-near   <fl>              initialize 0.1                accessors generate)
  (slot perspective-far    <fl>              initialize 10000.0            accessors generate)
  (slot view-distance      <fl>              initialize 60.                accessors generate)
  
  ;; orthographic
  (slot zoom-factor        <fl+>             initialize #f                 accessors generate)
  
  ;; frustum
  (slot frustum-radius     <fl+>             initialize #f                 accessors generate)
  (slot frustum-left       <vertex>          initialize (make-vertex)      getter generate)
  (slot frustum-bottom     <vertex>          initialize (make-vertex)      getter generate)
  (slot frustum-right      <vertex>          initialize (make-vertex)      getter generate)
  (slot frustum-top        <vertex>          initialize (make-vertex)      getter generate)
  (slot frustum-left-dot   <fl>              initialize 0.                 getter generate)
  (slot frustum-bottom-dot <fl>              initialize 0.                 getter generate)
  (slot frustum-right-dot  <fl>              initialize 0.                 getter generate)
  (slot frustum-top-dot    <fl>              initialize 0.                 getter generate)
  
  ;; matrix
  (slot projection-matrix  <matrix>          initialize (make-matrix)      getter generate)
  (slot view-matrix        <matrix>          initialize (make-matrix)      getter generate)
  
  ;; movement
  (slot move-speed         <fl>              initialize .2                 accessors generate)
  (slot sprint-speed       <fl>              initialize 2.                 accessors generate)
  (slot warp-speed         <fl>              initialize 4.                 accessors generate)
  (slot strafe-speed       <fl>              initialize 0.1                accessors generate)
  (slot rotate-speed       <fl>              initialize .035               accessors generate)
  
  ;; visual
  (slot sector-index       <index>           initialize (make-index)       getter generate)
  
  ;; physical
  (slot area-cube          <Area-Cube+>      initialize #f                 getter generate)
  
  
  (method override (prepare self rest)
    (nextmethod self rest)
    (set-perspective-fov self (world-setting 'world.perspective-fov 45.))
    (set-perspective-near self (world-setting 'world.perspective-near 0.1))
    (set-perspective-far self (world-setting 'world.perspective-far 10000.0)))
  
  
  (method override (print self output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{a}" (present-vertex position)))))
  
  
  (method package (size-change self size)
    (set! screen-width (cast <fl> (get-width size)))
    (set! screen-height (cast <fl> (get-height size)))
    (prepare-projection self)
    (set! inited? #t))
  
  
  (method package (setup-area-cube self radius)
    (set! area-cube (new Area-Cube radius)))
  
  
  (method package (update-area-cube self)
    (update-cube area-cube position)
    area-cube)
  
  
  ;;;
  ;;;; Camera
  ;;;
  
  
  (method package (set-target self vert <vertex>) <void>
    (unless (vertex=? vert target)
      (vertex-copy! target vert)
      (dirty-update self)))
  
  
  (method package (derive-target self)
    ;(assert (roll-free? lookat (get-world-up (current-world))))
    (set-target self (vertex+& position (get-sight lookat))))
  
  
  ;;;
  ;;;; Stable
  ;;;
  
  
  (method package (init-stable self)
    (set! stable-since (current-monotonic))
    (set! stable? #t))
  
  
  (method (reset-stable self)
    (set! stable-since (current-monotonic))
    (set! stable? #f)
    (when callback
      (callback stable?))
    (when matrix-hook
      (matrix-hook self stable?)))
  
  
  (method package (update-stable self stable-delay <fl>)
    (unless stable?
      (when (>= (- (current-monotonic) stable-since) stable-delay)
        (set! stable? #t)
        (when callback
          (callback stable?))
        (when matrix-hook
          (matrix-hook self stable?)))))
  
  
  ;;;
  ;;;; Update
  ;;;
  
  
  (method override (update-matrix self)
    (nextmethod self)
    (when inited?
      (prepare-view self)
      (index-update self)
      (dirty-update self)))
  
  
  (method package (camera-update self)
    (when dirty?
      (update-frustum self)
      (reset-stable self)
      (set! dirty? #f)
      (when update-callback
        (update-callback))))
  
  
  (method (dirty-update self)
    (set! dirty? #t)
    (camera-update self))
  
  
  ;;;
  ;;;; Projection
  ;;;
  
  
  (method package (prepare-projection self)
    (let ((ratio (/ screen-width screen-height)))
      (case projection
        ((perspective)
         (make-perspective-matrix! projection-matrix perspective-fov ratio perspective-near perspective-far))
        ((orthographic)
         (let ((width (effective-zoom-factor self)))
           (let ((height (/ width ratio)))
             (make-orthographic-matrix! projection-matrix (- width) width (- height) height perspective-near perspective-far)))))))
  
  
  (method package (prepare-view self)
    (make-view-matrix! view-matrix position lookat))
  
  
  (definition camera-limit <fl>
    5.)
  
  
  (method (move-camera self center-x)
    (let ((x (vertex-x position)))
      (if (> center-x (+ x camera-limit))
          (move-horizontally self (- center-x (+ x camera-limit))))
      (if (< center-x (- x camera-limit))
          (move-horizontally self (- center-x (- x camera-limit))))))
  
  
  (method (effective-zoom-factor self) <fl>
    (or zoom-factor (/ screen-width 2.)))
    
  
  ;;;
  ;;;; Screen
  ;;;
  
  
  (method package (world->screen self vertex <vertex>)
    (let ((projection (make-perspective-matrix& perspective-fov (/ screen-width screen-height) perspective-near perspective-far))
          (view (make-view-matrix& position lookat)))
      (let ((projection/view (matrix-multiply& projection view)))
        (let ((vert (matrix-transform& projection/view vertex)))
          (new Point
            (fxround (* (+ (vertex-x vert) 1.) (/ screen-width 2.)))
            (fxround (* (- 1. (vertex-y vert)) (/ screen-height 2.))))))))
  
  
  (method package (screen->world self h <fl> v <fl>)
    (let ((ratio (/ screen-width screen-height))
          (ch (- h (/ screen-width 2)))
          (cv (- (- screen-height v) (/ screen-height 2))))
      (case projection
        ((perspective)
         (let ((half-fov (/ (degree->radian perspective-fov) 2.))
               (up (get-up lookat)))
           (let ((cone (tan half-fov))
                 (d (vertex-distance position target))
                 (right (cross-product& (vertex-& target position) up)))
             (let ((target-in-eye-space (vertex+& (vertex-scalar*& up (/ (* cv d cone 2.) screen-height))
                                                  (vertex+& (vertex-scalar*& right (/ (* ch d cone 2. ratio) screen-width))
                                                            target))))
               (values (copy-vertex position) (vertex-normalize (vertex-& target-in-eye-space position)))))))
        ((orthographic)
         (let ((zoom-factor (effective-zoom-factor self)))
           (let ((x (+ (/ (* 2. ch zoom-factor) screen-width) (vertex-x position)))
                 (y (+ (/ (* 2. cv zoom-factor) screen-height ratio) (vertex-y position))))
             (values (vertex x y (vertex-z position)) (vertex 0. 0. -1.))))))))
  
  
  (method package (pane-distance self resolution-width <fl> width <fl>) <fl>
    (let ((f (/ 1.0 (tan (* perspective-fov (/ PI 360.)))))
          (ratio (/ screen-width screen-height)))
      (* (/ f ratio) (/ width 2.) (/ screen-width resolution-width))))
  
  
  ;;;
  ;;;; Index
  ;;;
  
  
  (method (index-update self)
    (index-copy! sector-index (position-sector-index position)))
  
  
  ;;;
  ;;;; Frustum
  ;;;
  
  
  (proclaim (warn optimizations))
  
  
  (method (update-frustum self)
    (let ((zone (current-zone+)))
      ;; quick hack around initialization order
      (let ((default-radius 13.856406460551018))
        (let ((radius <fl> (or frustum-radius (if (not zone) default-radius (or (get-sector-radius zone) default-radius)))))
          (frustum-normals! self frustum-left frustum-bottom frustum-right frustum-top)
          (set! frustum-left-dot (- (dot-product& frustum-left position) radius))
          (set! frustum-bottom-dot (- (dot-product& frustum-bottom position) radius))
          (set! frustum-right-dot (- (dot-product& frustum-right position) radius))
          (set! frustum-top-dot (- (dot-product& frustum-top position) radius))))))
  
  
  (method (frustum-normals! self left-normal <vertex> bottom-normal <vertex> right-normal <vertex> top-normal <vertex>) <void>
    ;; copied from screen->world for performance
    (let ((ratio (/ screen-width screen-height))
          (half-fov (/ (degree->radian perspective-fov) 2.))
          (up (get-up lookat)))
      (let ((cone (tan half-fov))
            (d (vertex-distance& position target))
            (right (cross-product& (vertex-& target position) up)))
        (define (compute-normal! res <vertex> h <fl> v <fl>) <void>
          (let ((ch (- h (/ screen-width 2.)))
                (cv (- (- screen-height v) (/ screen-height 2.))))
            (let ((target-in-eye-space (vertex+& (vertex-scalar*& up (/ (* cv d cone 2.) screen-height))
                                                 (vertex+& (vertex-scalar*& right (/ (* ch d cone 2. ratio) screen-width))
                                                           target))))
              (vertex-normalize! res (vertex-& target-in-eye-space position)))))
        
        (let ((r00 (make-vertex&))
              (r01 (make-vertex&))
              (r10 (make-vertex&))
              (r11 (make-vertex&)))
          (compute-normal! r00 0. 0.)
          (compute-normal! r01 0. screen-height)
          (compute-normal! r10 screen-width 0.)
          (compute-normal! r11 screen-width screen-height)
          (cross-product! left-normal r01 r00)
          (cross-product! bottom-normal r00 r10)
          (cross-product! right-normal r10 r11)
          (cross-product! top-normal r11 r01)))))
  
  
  (method package (in-frustum? self pos <vertex>) <bool>
    (declare (proper-tail-calls))
    (declare (optimize-dead-local-variables))
    (declare (inline))
    (declare (inlining-limit 1000))
    ;; unroll the dot products
    (let ((left frustum-left)
          (bottom frustum-bottom)
          (right frustum-right)
          (top frustum-top))
      (and (>= (+ (* (vertex-x left) (vertex-x pos))
                  (* (vertex-y left) (vertex-y pos))
                  (* (vertex-z left) (vertex-z pos)))
               frustum-left-dot)
           (>= (+ (* (vertex-x bottom) (vertex-x pos))
                  (* (vertex-y bottom) (vertex-y pos))
                  (* (vertex-z bottom) (vertex-z pos)))
               frustum-bottom-dot)
           (>= (+ (* (vertex-x right) (vertex-x pos))
                  (* (vertex-y right) (vertex-y pos))
                  (* (vertex-z right) (vertex-z pos)))
               frustum-right-dot)
           (>= (+ (* (vertex-x top) (vertex-x pos))
                  (* (vertex-y top) (vertex-y pos))
                  (* (vertex-z top) (vertex-z pos)))
               frustum-top-dot))))
  
  
  @try-that-doesnt-seem-to-gain-a-lot
  (method (in-frustum? pos <vertex>) <bool>
    (declare (not interrupts-enabled))
    (c-code
      #/C/

double x = ___F64VECTORREF(___ARG1, ___FIX(0));
double y = ___F64VECTORREF(___ARG1, ___FIX(1));
double z = ___F64VECTORREF(___ARG1, ___FIX(2));

if ( ( (___F64VECTORREF(___ARG2, ___FIX(0)) * x) +
       (___F64VECTORREF(___ARG2, ___FIX(1)) * y) +
       (___F64VECTORREF(___ARG2, ___FIX(2)) * z) ) >= ___F64VECTORREF(___ARG6, ___FIX(0)) &&
     ( (___F64VECTORREF(___ARG3, ___FIX(0)) * x) +
       (___F64VECTORREF(___ARG3, ___FIX(1)) * y) +
       (___F64VECTORREF(___ARG3, ___FIX(2)) * z) ) >= ___F64VECTORREF(___ARG7, ___FIX(0)) &&
     ( (___F64VECTORREF(___ARG4, ___FIX(0)) * x) +
       (___F64VECTORREF(___ARG4, ___FIX(1)) * y) +
       (___F64VECTORREF(___ARG4, ___FIX(2)) * z) ) >= ___F64VECTORREF(___ARG8, ___FIX(0)) &&
     ( (___F64VECTORREF(___ARG5, ___FIX(0)) * x) +
       (___F64VECTORREF(___ARG5, ___FIX(1)) * y) +
       (___F64VECTORREF(___ARG5, ___FIX(2)) * z) ) >= ___F64VECTORREF(___ARG9, ___FIX(0)) )
    ___RESULT = ___TRU;
else
    ___RESULT = ___FAL;

//#

  pos                ;; ___ARG1
  frustum-left       ;; ___ARG2
  frustum-bottom     ;; ___ARG3
  frustum-right      ;; ___ARG4
  frustum-top        ;; ___ARG5
  frustum-left-dot   ;; ___ARG6
  frustum-bottom-dot ;; ___ARG7
  frustum-right-dot  ;; ___ARG8
  frustum-top-dot    ;; ___ARG9
  ))
  
  
  (proclaim (not warn optimizations))

  
  ;;;
  ;;;; Zoom
  ;;;
  
  
  (method (zoom-speed self)
    1.)

  
  (method package (zoom-in self)
    (case projection
      ((perspective)
       (let ((me (get-camera-me self)))
         (increase! view-distance (- (zoom-speed self)))
         (vertex+! position me (vertex-scalar*& (get-sight lookat) (- view-distance)))
         (derive-target self)
         (camera-update self)))
      ((orthographic)
       (set! zoom-factor (* (effective-zoom-factor self) .75)))))
  
  
  (method package (zoom-out self)
    (case projection
      ((perspective)
       (let ((me (get-camera-me self)))
         (increase! view-distance (zoom-speed self))
         (vertex+! position me (vertex-scalar*& (get-sight lookat) (- view-distance)))
         (derive-target self)
         (camera-update self)))
      ((orthographic)
       (set! zoom-factor (/ (effective-zoom-factor self) .75)))))
  
  
  (method (get-camera-me self)
    (vertex+ position (vertex-scalar*& (get-sight lookat) view-distance)))
  
  
  ;;;
  ;;;; Movement
  ;;;
  
  
  (method package (move-forward self)
    (set-position self (vertex+& position (vertex-scalar*& (get-sight lookat) move-speed)))
    (derive-target self)
    (camera-update self))
  
  
  (method package (move-backward self)
    (set-position self (vertex+& position (vertex-scalar*& (get-sight lookat) (- move-speed))))
    (derive-target self)
    (camera-update self))
  
  
  (method package (sprint-forward self)
    (set-position self (vertex+& position (vertex-scalar*& (get-sight lookat) sprint-speed)))
    (derive-target self)
    (camera-update self))
  
  
  (method package (sprint-backward self)
    (set-position self (vertex+& position (vertex-scalar*& (get-sight lookat) (- sprint-speed))))
    (derive-target self)
    (camera-update self))
  
  
  (method package (warp-forward self)
    (set-position self (vertex+& position (vertex-scalar*& (get-sight lookat) warp-speed)))
    (derive-target self)
    (camera-update self))
  
  
  (method package (warp-backward self)
    (set-position self (vertex+& position (vertex-scalar*& (get-sight lookat) (- warp-speed))))
    (derive-target self)
    (camera-update self))
  
  
  (method package (move-left self)
    (move-horizontally self (- (* strafe-speed 2))))
  
  
  (method package (move-right self)
    (move-horizontally self (* strafe-speed 2)))
  
  
  (method (move-horizontally self d)
    (set-position self (vertex+& position (vertex-scalar*& (get-right lookat) d)))
    (derive-target self)
    (camera-update self))
  
  
  (method package (move-up self)
    (let ((world (current-world)))
      (set-position self (vertex+& position (vertex-scalar*& (get-world-up world) (* strafe-speed 2))))
      (derive-target self)
      (camera-update self)))
  
  
  (method package (move-down self)
    (let ((world (current-world)))
      (set-position self (vertex+& position (vertex-scalar*& (get-world-up world) (- (* strafe-speed 2)))))
      (derive-target self)
      (camera-update self)))
  
  
  (method package (rotate-left self)
    (rotate-horizontal self rotate-speed))
  
  
  (method package (rotate-right self)
    (rotate-horizontal self (- rotate-speed)))
  
  
  (method package (rotate-horizontal self angle)
    (let ((world (current-world)))
      (set-lookat self (rotate-lookat& lookat angle (get-world-up world)))
      (derive-target self)
      (camera-update self)))
  
  
  (method package (rotate-up self)
    (rotate-vertical self rotate-speed))
  
  
  (method package (rotate-down self)
    (rotate-vertical self (- rotate-speed)))
  
  
  (method package (rotate-vertical self angle)
    (let ((world (current-world)))
      (rotate-vertical-up self angle (get-world-up world))))
  
  
  (method package (rotate-vertical-up self angle up)
    (set-lookat self (rotate-lookat-vertical-up& lookat angle up))
    (derive-target self)
    (camera-update self))
  
  
  ;;;
  ;;;; Orientation
  ;;;
  
  
  (method package (draw-orientation self)
    (let ((center (vertex-& (vertex-& (vertex+& position (vertex-scalar*& (get-sight lookat) 5.)) (vertex-scalar*& (get-right lookat) 1.5)) (get-up lookat))))
      (let ((sight (vertex+& center (get-sight lookat)))
            (up (vertex+& center (get-up lookat)))
            (right (vertex+& center (get-right lookat)))
            (axis-x (vertex+& center (vertex 1. 0. 0.)))
            (axis-y (vertex+& center (vertex 0. 1. 0.)))
            (axis-z (vertex+& center (vertex 0. 0. 1.))))
        (let ((cx (vertex-x center))
              (cy (vertex-y center))
              (cz (vertex-z center))
              (width .01))
          (glDisable GL_DEPTH_TEST)
          (render-line (vertex cx cy cz)
                       (vertex (vertex-x sight) (vertex-y sight) (vertex-z sight))
                       width
                       white-dye)
          (render-line (vertex cx cy cz)
                       (vertex (vertex-x right) (vertex-y right) (vertex-z right))
                       width
                       white-dye)
          (render-line (vertex cx cy cz)
                       (vertex (vertex-x up) (vertex-y up) (vertex-z up))
                       width
                       white-dye)
          (render-line (vertex cx cy cz)
                       (vertex (vertex-x axis-x) (vertex-y axis-x) (vertex-z axis-x))
                       width
                       red-dye)
          (render-line (vertex cx cy cz)
                       (vertex (vertex-x axis-y) (vertex-y axis-y) (vertex-z axis-y))
                       width
                       green-dye)
          (render-line (vertex cx cy cz)
                       (vertex (vertex-x axis-z) (vertex-y axis-z) (vertex-z axis-z))
                       width
                       blue-dye)
          (glEnable GL_DEPTH_TEST)))))
  
  
  ;;;
  ;;;; History
  ;;;
  
  
  (method override (history-draw-now? self)
    #t)
  
  
  (method override (history-draw-trail? self)
    #t)))
