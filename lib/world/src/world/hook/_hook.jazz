;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Hook
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


;; All this code is kind of quicky for now
;; to be replaced with safe script handlers


(module world.hook jazz


(export (world.hook.syntax (phase syntax)))

(import (jazz.event)
        (world)
        (world.context))


(class Hook extends Object
  
  
  (slot procedure getter generate)
  (slot in-error? accessors generate)
  
  
  (method override (initialize self procedure)
    (nextmethod self)
    (assert (procedure? procedure))
    (set! self.procedure procedure)
    (set! self.in-error? #f)))


(definition public (with-safe-hook hook action (default #f))
  (action (get-procedure hook))
  @debug
  (if (get-in-error? hook)
      (and default (default))
    (continuation-capture
      (lambda (return)
        (with-exception-handler
          (lambda (exc)
            (continuation-capture
              (lambda (cont)
                (continuation-graft return
                  (lambda ()
                    (set-in-error? hook #t)
                    (delay-event
                      (lambda ()
                        (let ((world (current-world)))
                          (let ((reason (exception-reason exc)))
                            (display-message world (split-string reason #\newline) duration: 60.)))))
                    (and default (default)))))))
          (lambda ()
            (action (get-procedure hook)))))))))
