;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; Keys
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.keys jazz


(import (jazz.action)
        (jazz.component)
        (world)
        (world.settings))


(definition keys
  (make-table test: shortcut=? hash: shortcut-hash))


(definition public (registered-keys)
  keys)

(definition public (register-key key proc)
  (table-set! keys key proc))


(definition public (iterate-keys proc)
  (iterate-table keys proc))


(definition public (register-keys)
  (let ((q/e-strafing? (world-setting 'world.q/e-strafing? #f)))
    (let ((move-left-key    (if q/e-strafing? {Shortcut #\Q} {Shortcut #\A}))
          (move-right-key   (if q/e-strafing? {Shortcut #\E} {Shortcut #\D}))
          (rotate-left-key  (if q/e-strafing? {Shortcut #\A} #f))
          (rotate-right-key (if q/e-strafing? {Shortcut #\D} #f)))
    (register-key {Shortcut #\W}        (lambda (world) (move-forward world)))
    (register-key {Shortcut Up}         (lambda (world) (move-forward world)))
    (register-key {Shortcut #\S}        (lambda (world) (move-backward world)))
    (register-key {Shortcut Down}       (lambda (world) (move-backward world)))
    (register-key move-left-key         (lambda (world) (move-left world)))
    (register-key move-right-key        (lambda (world) (move-right world)))
    (when rotate-left-key
      (register-key rotate-left-key     (lambda (world) (process-rotate-left world))))
    (register-key {Shortcut Left}       (lambda (world) (process-rotate-left world)))
    (when rotate-right-key
      (register-key rotate-right-key    (lambda (world) (process-rotate-right world))))
    (register-key {Shortcut Right}      (lambda (world) (process-rotate-right world)))
    (register-key {Shortcut #\space}    (lambda (world) (process-move-up world)))
    (register-key {Shortcut #\X}        (lambda (world) (process-move-down world)))
    (register-key {Shortcut #\3}        (lambda (world) (when (get-visible? (require-action-item {Action world-spell sprint})) (sprint-forward world))))
    (register-key {Shortcut :shift #\3} (lambda (world) (when (get-visible? (require-action-item {Action world-spell sprint})) (sprint-backward world))))
    (register-key {Shortcut #\4}        (lambda (world) (when (get-visible? (require-action-item {Action world-spell blink})) (blink world #f))))
    (register-key {Shortcut :shift #\4} (lambda (world) (when (get-visible? (require-action-item {Action world-spell blink})) (blink world #t))))
    (register-key {Shortcut #\5}        (lambda (world) (when (get-visible? (require-action-item {Action world-spell warp})) (warp world #f))))
    (register-key {Shortcut :shift #\5} (lambda (world) (when (get-visible? (require-action-item {Action world-spell warp})) (warp world #t))))
    (register-key {Shortcut #\1}        (lambda (world) (when (get-visible? (require-action-item {Action world-spell bullet})) (maybe-fire world 'bullet))))
    (register-key {Shortcut #\2}        (lambda (world) (when (get-visible? (require-action-item {Action world-spell arrow})) (maybe-fire world 'arrow))))))))
