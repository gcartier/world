;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; Keys
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.keys jazz


(import (jazz.action)
        (jazz.component)
        (jazz.platform)
        (jazz.window)
        (world)
        (world.settings))


(definition protected arrow-movement?
  (world-setting 'world.arrow-movement? #t))


(definition protected (move-forward-down? modifiers)
  (and (no-modifiers? modifiers)
       (or (key-down? #\W)
           (and arrow-movement?
                (key-down? (symbolic-key->code 'Up))))))

(definition protected (move-backward-down? modifiers)
  (and (no-modifiers? modifiers)
       (or (key-down? #\S)
           (and arrow-movement?
                (key-down? (symbolic-key->code 'Down))))))

(definition protected (move-left-down? modifiers)
  (and (no-modifiers? modifiers)
       (or (key-down? #\A)
           (and arrow-movement?
                (key-down? (symbolic-key->code 'Left))))))

(definition protected (move-right-down? modifiers)
  (and (no-modifiers? modifiers)
       (or (key-down? #\D)
           (and arrow-movement?
                (key-down? (symbolic-key->code 'Right))))))

(definition protected (sprint-down? modifiers)
  (and (key-down? #\3)
       (or (no-modifiers? modifiers)
           (shift-key? modifiers))))


(definition protected move-up-shortcut
  (or (world-setting 'world.move-up #f) {Shortcut Space}))


(definition keys
  (make-table test: shortcut=? hash: shortcut-hash))


(definition public (registered-keys)
  keys)

(definition public (register-key key proc)
  (table-set! keys key proc))


(definition public (iterate-keys proc)
  (table-iterate keys proc))


(definition public (register-keys)
  (register-key move-up-shortcut      (lambda (world) (process-move-up world)))
  (register-key {Shortcut #\X}        (lambda (world) (process-move-down world)))
  (register-key {Shortcut #\3}        (lambda (world) (when (get-visible? (require-action-item {Action world-spell sprint})) (sprint-forward world))))
  (register-key {Shortcut :shift #\3} (lambda (world) (when (get-visible? (require-action-item {Action world-spell sprint})) (sprint-backward world))))
  (register-key {Shortcut #\4}        (lambda (world) (when (get-visible? (require-action-item {Action world-spell warp})) (warp world #f))))
  (register-key {Shortcut :shift #\4} (lambda (world) (when (get-visible? (require-action-item {Action world-spell warp})) (warp world #t))))
  (register-key {Shortcut #\1}        (lambda (world) (when (get-visible? (require-action-item {Action world-spell bullet})) (maybe-fire world 'bullet))))
  (register-key {Shortcut #\2}        (lambda (world) (when (get-visible? (require-action-item {Action world-spell arrow})) (maybe-fire world 'arrow))))))
