;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; Keys
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.keys jazz


(import (jazz.action)
        (jazz.component)
        (world)
        (world.settings))


(definition protected q/e-strafing?
  (world-setting 'world.q/e-strafing? #f))

(definition protected arrow-movement?
  (world-setting 'world.arrow-movement? #t))


(definition protected move-forward-key
  #\W)

(definition protected move-backward-key
  #\S)

(definition protected move-left-key
  (if q/e-strafing? #\Q #\A))

(definition protected move-right-key
  (if q/e-strafing? #\E #\D))

(definition protected rotate-left-shortcut
  (if q/e-strafing? {Shortcut #\A} {Shortcut #\Q}))

(definition protected rotate-right-shortcut
  (if q/e-strafing? {Shortcut #\D} {Shortcut #\E}))

(definition protected move-up-shortcut
  (or (world-setting 'world.move-up #f) {Shortcut Space}))
    

(definition keys
  (make-table test: shortcut=? hash: shortcut-hash))


(definition public (registered-keys)
  keys)

(definition public (register-key key proc)
  (table-set! keys key proc))


(definition public (iterate-keys proc)
  (iterate-table keys proc))


(definition public (register-keys)
  (register-key rotate-left-shortcut  (lambda (world) (process-rotate-left world)))
  (register-key rotate-right-shortcut (lambda (world) (process-rotate-right world)))
  (register-key move-up-shortcut      (lambda (world) (process-move-up world)))
  (register-key {Shortcut #\X}        (lambda (world) (process-move-down world)))
  (when arrow-movement?
    (register-key {Shortcut Up}       (lambda (world) (move-forward world)))
    (register-key {Shortcut Down}     (lambda (world) (move-backward world)))
    (register-key {Shortcut Left}     (lambda (world) (process-rotate-left world)))
    (register-key {Shortcut Right}    (lambda (world) (process-rotate-right world))))
  (register-key {Shortcut #\3}        (lambda (world) (when (get-visible? (require-action-item {Action world-spell sprint})) (sprint-forward world))))
  (register-key {Shortcut :shift #\3} (lambda (world) (when (get-visible? (require-action-item {Action world-spell sprint})) (sprint-backward world))))
  (register-key {Shortcut #\4}        (lambda (world) (when (get-visible? (require-action-item {Action world-spell warp})) (warp world #f))))
  (register-key {Shortcut :shift #\4} (lambda (world) (when (get-visible? (require-action-item {Action world-spell warp})) (warp world #t))))
  (register-key {Shortcut #\1}        (lambda (world) (when (get-visible? (require-action-item {Action world-spell bullet})) (maybe-fire world 'bullet))))
  (register-key {Shortcut #\2}        (lambda (world) (when (get-visible? (require-action-item {Action world-spell arrow})) (maybe-fire world 'arrow))))))
