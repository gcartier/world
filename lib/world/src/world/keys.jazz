;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; Keys
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.keys jazz


(import (jazz.ui))


(definition keys
  (make-table test: shortcut=? hash: shortcut-hash))


(definition public (registered-keys)
  keys)

(definition public (register-key key proc)
  (table-set! keys key proc))


(definition public (iterate-keys proc)
  (iterate-table keys proc))


(definition public (register-keys)
  (register-key {Shortcut #\W}        (lambda (world) (move-forward~ world)))
  (register-key {Shortcut Up}         (lambda (world) (move-forward~ world)))
  (register-key {Shortcut #\S}        (lambda (world) (move-backward~ world)))
  (register-key {Shortcut Down}       (lambda (world) (move-backward~ world)))
  (register-key {Shortcut #\Q}        (lambda (world) (move-left~ world)))
  (register-key {Shortcut #\E}        (lambda (world) (move-right~ world)))
  (register-key {Shortcut #\A}        (lambda (world) (process-rotate-left~ world)))
  (register-key {Shortcut Left}       (lambda (world) (process-rotate-left~ world)))
  (register-key {Shortcut #\D}        (lambda (world) (process-rotate-right~ world)))
  (register-key {Shortcut Right}      (lambda (world) (process-rotate-right~ world)))
  (register-key {Shortcut #\space}    (lambda (world) (process-move-up~ world)))
  (register-key {Shortcut #\X}        (lambda (world) (process-move-down~ world)))
  (register-key {Shortcut #\3}        (lambda (world) (run-forward~ world)))
  (register-key {Shortcut :shift #\3} (lambda (world) (run-backward~ world)))
  (when (get-visible?~ (require-action-item {Action world-spell blink}))
    (register-key {Shortcut #\4}        (lambda (world) (blink~ world #f)))
    (register-key {Shortcut :shift #\4} (lambda (world) (blink~ world #t))))
  (when (get-visible?~ (require-action-item {Action world-spell warp}))
    (register-key {Shortcut #\5}        (lambda (world) (warp~ world #f)))
    (register-key {Shortcut :shift #\5} (lambda (world) (warp~ world #t))))
  (when (get-visible?~ (require-action-item {Action world-spell bullet}))
    (register-key {Shortcut #\1}        (lambda (world) (maybe-fire~ world 'bullet))))
  (when (get-visible?~ (require-action-item {Action world-spell bomb}))
    (register-key {Shortcut #\2}        (lambda (world) (maybe-fire~ world 'bomb))))))
