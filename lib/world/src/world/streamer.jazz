;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; Streamer
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.streamer jazz


(import (jazz.io)
        (jazz.stream)
        (world)
        (world.audio)
        (world.client.tier)
        (world.client.udp)
        (world.context)
        (world.server.tier)
        (world.server.udp)
        (world.settings)
        (world.streaming)
        (world.task)
        (world.udp)
        (world.video))


;;;
;;;; Streams
;;;


(definition public (availables subdir extension)
  (let ((queue (new-queue)))
    (iterate-streams subdir
      (lambda (file)
        (when (extension=? (get-extension file) extension)
          (let ((location (filename-spine (join (subpath streams-dir file) "/"))))
            (enqueue queue location)))))
    (queue-list queue)))


(definition public (available-images)
  (availables "image" "jpg"))

(definition public (available-videos)
  (availables "video" (video-profile-extension)))

(definition public (available-musics)
  ;; we do not stream audio only for now
  (intersection test: filename=?
    (availables "music" (audio-profile-extension))
    (availables "music" (video-profile-extension))))


(definition public (stream-image location name)
  (let ((stream (make-stream name 'image #f can-local?: #t)))
    (let ((stream-no (get-no stream)))
      (add-image-channel stream-no location))
    stream))


(definition public (stream-audio location name)
  (let ((stream (make-stream name 'stream #f can-local?: #t)))
    (let ((stream-no (get-no stream)))
      (add-audio-channel stream-no location))
    stream))


(definition public (stream-screen name)
  (let ((stream (make-stream name 'screen #f)))
    (let ((stream-no (get-no stream)))
      (add-screen-channel stream-no))
    stream))


(definition public (stream-video location name (audio?: audio? #t))
  (let ((stream (make-stream name 'stream (video-profile-level) can-local?: #t)))
    (let ((stream-no (get-no stream)))
      (when audio?
        (add-audio-channel stream-no location))
      (add-video-channels stream-no location))
    (set-action-proc stream stream-controller-action)
    stream))


(definition protected (streaming-streams)
  (let ((tier (current-tier)))
    (let ((queue (new-queue)))
      (iterate-table (get-send-streams (get-udp-client tier))
        (lambda (no stream)
          (unless (eq? (get-source-kind stream) 'live)
            (enqueue queue stream))))
      (queue-list queue))))


(definition protected (streaming-channels)
  (let ((tier (current-tier)))
    (let ((queue (new-queue)))
      (iterate-table (get-send-channels (get-udp-client tier))
        (lambda (no channel)
          (unless (eq? (get-source-kind channel) 'live)
            (enqueue queue channel))))
      (queue-list queue))))


(definition protected (streaming-audio?)
  (some? (lambda (channel)
           (= (get-media-kind channel) udp-audio))
         (streaming-channels)))


(definition protected (streaming-names)
  (map get-name (streaming-streams)))


(definition protected (remove-streaming lst)
  (if stream-multiple?
      lst
    (let ((names (streaming-names)))
      (collect-if (lambda (location)
                    (not (member? (filename-name location) names)))
                  lst))))


(definition protected (pick-location locations)
  (if stream-repeatable?
      (car locations)
    (random-element locations)))


(definition public (add-image)
  (let ((locations (remove-streaming (available-images))))
    (when (not-null? locations)
      (let ((location (pick-location locations)))
        (let ((image (add-extension location "jpg"))
              (name (filename-name location)))
          (let ((stream (stream-image image name)))
            (delay-streaming
              (lambda ()
                (play stream)))))))))


(definition public (add-video)
  (let ((locations (remove-streaming (available-videos))))
    (when (not-null? locations)
      (let ((location (pick-location locations)))
        (let ((name (filename-name location))
              (audio-file? (exists? (new-file {Directory Settings} (list "streams" (add-extension location (audio-profile-extension)))))))
          (let ((stream (stream-video location name audio?: (and audio-file? (not (streaming-audio?)) (not stream-silent?)))))
            (delay-streaming
              (lambda ()
                (play stream)))))))))


(definition public (add-music)
  (let ((locations (remove-streaming (available-musics))))
    (when (not-null? locations)
      (let ((location (pick-location locations)))
        (let ((name (filename-name location)))
          (let ((stream (stream-video location name audio?: (not (streaming-audio?)))))
            (delay-streaming
              (lambda ()
                (play stream)))))))))


(definition public (remove-random-stream)
  (let ((udp (current-udp)))
    (let ((streams (streaming-streams)))
      (when (not-null? streams)
        (let ((stream (random-element streams)))
          (close-send-stream udp stream)))))))
