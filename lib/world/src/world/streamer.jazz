;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; Streamer
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.streamer jazz


(import (jazz.graphic)
        (jazz.io)
        (jazz.stream)
        (world)
        (world.audio)
        (world.circle)
        (world.client.tier)
        (world.client.udp)
        (world.configure)
        (world.context)
        (world.profile)
        (world.server.tier)
        (world.server.udp)
        (world.settings)
        (world.stream)
        (world.streaming)
        (world.task)
        (world.udp)
        (world.video))


;;;
;;;; Streams
;;;


(definition public (availables extensions)
  (let ((queue (new-queue)))
    (iterate-streams
      (lambda (file)
        (when (member? (get-extension file) extensions test: extension=?)
          (let ((location (join (subpath {Directory Documents} file) "/")))
            (enqueue queue (filename-spine location))))))
    (remove-duplicates (queue-list queue) test: filename=?)))


(definition public (available-images)
  (availables (list streaming-image-extension)))

(definition public (available-videos)
  (availables (streaming-video-extensions)))

(definition public (available-musics)
  ;; we do not stream audio only for now
  (intersection test: filename=?
    (availables (streaming-audio-extensions))
    (availables (streaming-video-extensions))))


(definition public (stream-text location name)
  (define (make-text-channel)
    (let ((media-kind udp-video)
          (source-kind 'text)
          (level #f)
          (resolution draw-resolution)
          (framerate #f)
          (bitrate draw-bitrate)
          (codec #f)
          (caps #f)
          (metadata '())
          (send-state 'on))
      (new Channel-Creator
        (list media-kind source-kind level resolution framerate bitrate codec caps metadata send-state)
        (lambda (stream channel-no)
          (let ((client (current-client)))
            (let ((stream-no (get-no stream)))
              (let ((channel (register-send-channel (get-udp-client client) upload-stream-priority stream-no channel-no media-kind source-kind level resolution framerate bitrate codec caps metadata send-state)))
                (channel-output (current-video) channel root-view: (make-text-view))
                (let ((src (new Video-Src))
                      (sink (new Stream-Frame-Consumer
                              consumer: (client-video-consumer client channel))))
                  (let ((pipeline (pipeline (list src sink))))
                    (set-pipeline channel pipeline))))))))))
  
  (define (make-text-view)
    (let ((root (new Circle-Text-Panel position: {Point 0 0} size: {Dimension 1280 720}))
          (file (new-file {Directory Documents} (add-extension location "txt"))))
      (set-moniker (locate root 'text) file)
      root))
  
  (let ((channels (list (make-text-channel))))
    (make-stream name 'text '() channels location: location)))


(definition public (stream-image location name)
  (let ((channels (list (make-image-channel location))))
    (let ((video-levels (determine-stream-video-levels channels)))
      (make-stream name 'image video-levels channels location: location))))


(definition public (stream-image-file file)
  (let ((name (get-name file))
        (channels (list (make-image-channel file))))
    (let ((video-levels (determine-stream-video-levels channels)))
      (make-stream name 'image video-levels channels location: file))))


(definition public (stream-audio location name)
  (let ((audio-channels (list (make-stream-audio-channel location audio-only?: #t))))
    (let ((channels audio-channels))
      (let ((stream (make-stream name 'stream '() channels location: location)))
        (set-action-proc stream stream-controller-action)
        stream))))


(definition public (stream-video location name (audio?: audio? #t))
  (let ((audio-channels (if audio? (list (make-stream-audio-channel location)) '()))
        (video-channels (make-stream-video-channels location)))
    (let ((channels (append audio-channels video-channels)))
      (let ((video-levels (determine-stream-video-levels channels)))
        (let ((stream (make-stream name 'stream video-levels channels location: location)))
          (set-action-proc stream stream-controller-action)
          stream)))))


(definition public (stream-window name)
  (let ((channels (list (make-window-channel))))
    (let ((video-levels (determine-stream-video-levels channels)))
      (make-stream name 'window video-levels channels))))


(definition public (locate-window-stream)
  (let ((udp (current-udp)))
    (locate-send-stream udp
      (lambda (stream)
        (eq? (get-source-kind stream) 'window)))))


(definition public (stream-screen name)
  (let ((channels (list (make-screen-channel))))
    (let ((video-levels (determine-stream-video-levels channels)))
      (make-stream name 'screen video-levels channels))))


(definition public (locate-screen-stream)
  (let ((udp (current-udp)))
    (locate-send-stream udp
      (lambda (stream)
        (eq? (get-source-kind stream) 'screen)))))


(definition protected (streaming-streams)
  (let ((tier (current-tier)))
    (let ((queue (new-queue)))
      (iterate-table (get-send-streams (get-udp-client tier))
        (lambda (no stream)
          (unless (eq? (get-source-kind stream) 'live)
            (enqueue queue stream))))
      (queue-list queue))))


(definition protected (streaming-channels)
  (let ((tier (current-tier)))
    (let ((queue (new-queue)))
      (iterate-table (get-send-channels (get-udp-client tier))
        (lambda (no channel)
          (unless (eq? (get-source-kind channel) 'live)
            (enqueue queue channel))))
      (queue-list queue))))


(definition protected (remove-streaming source-kind lst)
  (if stream-multiple?
      lst
    (let ((streams (streaming-streams)))
      (collect-if (lambda (location)
                    (let ((name (unicode->ascii (filename-name location))))
                      (not (find-if (lambda (stream)
                                      (and (eq? source-kind (get-source-kind stream))
                                           (filename=? name (get-name stream))))
                                    streams))))
                  lst))))


(definition protected (pick-location locations)
  (if stream-repeatable?
      (car locations)
    (random-element locations)))


(definition public (add-image)
  (let ((locations (remove-streaming 'image (available-images))))
    (when (not-null? locations)
      (let ((location (pick-location locations)))
        (let ((name (unicode->ascii (filename-name location))))
          (let ((stream (stream-image location name)))
            (delay-stream stream)))))))


(definition public (add-video)
  (let ((locations (remove-streaming 'stream (available-videos))))
    (when (not-null? locations)
      (let ((location (pick-location locations)))
        (let ((name (unicode->ascii (filename-name location)))
              (audio-file? (exists? (new-file {Directory Documents} (add-extension location (audio-profile-extension))))))
          (let ((stream (stream-video location name audio?: audio-file?)))
            (delay-stream stream)))))))


(definition public (add-music)
  (let ((locations (remove-streaming 'stream (available-musics))))
    (when (not-null? locations)
      (let ((location (pick-location locations)))
        (let ((name (unicode->ascii (filename-name location))))
          (let ((stream (stream-video location name)))
            (delay-stream stream)))))))


(definition public (remove-random-stream)
  (let ((udp (current-udp)))
    ;; quicky for replays
    (let ((streams (collect-if (lambda (stream)
                                 (neq? (get-source-kind stream) 'replay))
                               (streaming-streams))))
      (when (not-null? streams)
        (let ((stream (random-element streams)))
          (close-send-stream udp stream)))))))
