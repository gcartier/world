;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; Streamer
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.streamer jazz


(import (jazz.io)
        (jazz.stream)
        (world)
        (world.audio)
        (world.client.tier)
        (world.client.udp)
        (world.context)
        (world.server.tier)
        (world.server.udp)
        (world.settings)
        (world.stream)
        (world.streaming)
        (world.task)
        (world.udp)
        (world.video))


;;;
;;;; Streams
;;;


(definition public (availables subdir extensions)
  (let ((queue (new-queue)))
    (iterate-streams subdir
      (lambda (file)
        (when (member? (get-extension file) extensions test: extension=?)
          (let ((location (filename-spine (join (subpath streams-dir file) "/"))))
            (enqueue queue location)))))
    (remove-duplicates (queue-list queue) test: filename=?)))


(definition public (available-images)
  (availables "image" (list "jpg" "jpeg")))

(definition public (available-videos)
  (availables "video" (streaming-video-extensions)))

(definition public (available-musics)
  ;; we do not stream audio only for now
  (intersection test: filename=?
    (availables "music" (streaming-audio-extensions))
    (availables "music" (streaming-video-extensions))))


(definition public (stream-image location name)
  (let ((channels (list (make-image-channel location))))
    (make-stream name 'image #f channels can-local?: #t)))


(definition public (stream-audio location name)
  (let ((channels (list (make-stream-audio-channel location))))
    (make-stream name 'stream #f channels can-local?: #t)))


(definition public (stream-video location name (audio?: audio? #t))
  (let ((audio-channels (if audio? (list (make-stream-audio-channel location)) '()))
        (video-channels (make-stream-video-channels location)))
    (let ((video-level (determine-stream-video-level video-channels))
          (channels (append audio-channels video-channels)))
      (make-stream name 'stream video-level channels can-local?: #t))))


(definition public (stream-screen name)
  (let ((channels (list (make-screen-channel))))
    (make-stream name 'screen #f channels)))


(definition protected (streaming-streams)
  (let ((tier (current-tier)))
    (let ((queue (new-queue)))
      (iterate-table (get-send-streams (get-udp-client tier))
        (lambda (no stream)
          (unless (eq? (get-source-kind stream) 'live)
            (enqueue queue stream))))
      (queue-list queue))))


(definition protected (streaming-channels)
  (let ((tier (current-tier)))
    (let ((queue (new-queue)))
      (iterate-table (get-send-channels (get-udp-client tier))
        (lambda (no channel)
          (unless (eq? (get-source-kind channel) 'live)
            (enqueue queue channel))))
      (queue-list queue))))


(definition protected (streaming-audio?)
  (some? (lambda (channel)
           (= (get-media-kind channel) udp-audio))
         (streaming-channels)))


(definition protected (remove-streaming source-kind lst)
  (if stream-multiple?
      lst
    (let ((streams (streaming-streams)))
      (collect-if (lambda (location)
                    (let ((name (filename-name location)))
                      (not (find-if (lambda (stream)
                                      (and (eq? source-kind (get-source-kind stream))
                                           (filename=? name (get-name stream))))
                                    streams))))
                  lst))))


(definition protected (pick-location locations)
  (if stream-repeatable?
      (car locations)
    (random-element locations)))


(definition public (add-image)
  (let ((locations (remove-streaming 'image (available-images))))
    (when (not-null? locations)
      (let ((location (pick-location locations)))
        (let ((image (add-extension location "jpg"))
              (name (filename-name location)))
          (let ((stream (stream-image image name)))
            (delay-streaming
              (lambda ()
                (play stream)))))))))


(definition public (add-video)
  (let ((locations (remove-streaming 'stream (available-videos))))
    (when (not-null? locations)
      (let ((location (pick-location locations)))
        (let ((name (filename-name location))
              (audio-file? (exists? (new-file {Directory Settings} (list "streams" (add-extension location (audio-profile-extension)))))))
          (let ((stream (stream-video location name audio?: (and audio-file? (not (streaming-audio?)) (not stream-silent?)))))
            (delay-streaming
              (lambda ()
                (play stream)))))))))


(definition public (add-music)
  (let ((locations (remove-streaming 'stream (available-musics))))
    (when (not-null? locations)
      (let ((location (pick-location locations)))
        (let ((name (filename-name location)))
          (let ((stream (stream-video location name audio?: (not (streaming-audio?)))))
            (delay-streaming
              (lambda ()
                (play stream)))))))))


(definition public (remove-random-stream)
  (let ((udp (current-udp)))
    ;; quicky for replays
    (let ((streams (collect-if (lambda (stream)
                                 (neq? (get-source-kind stream) 'replay))
                               (streaming-streams))))
      (when (not-null? streams)
        (let ((stream (random-element streams)))
          (close-send-stream udp stream)))))))
