;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Processor
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.processor jazz


(import (jazz.io)
        (jazz.network)
        (jazz.presence)
        (jazz.presence.transmission)
        (world)
        (world.context)
        (world.history)
        (world.io)
        (world.master)
        (world.server.autoload)
        (world.settings)
        (world.stub))


(definition protected max-processors
  (world-setting 'world.server-max-processors 4))


(definition debug-processors?
  (world-setting 'world.server-debug-processors? #f))


;;;
;;;; Processor
;;;


(class Processor extends Object
  
  
  (slot service      getter generate)
  (slot zone         getter generate)
  (slot process-port getter generate)
  (slot remote-proxy getter generate)
  (slot delegates    getter generate)
  
  
  (method override (initialize self service zone process-port remote-proxy)
    (nextmethod self)
    (set! self.service service)
    (set! self.zone zone)
    (set! self.process-port process-port)
    (set! self.remote-proxy remote-proxy)
    (set! self.delegates '()))
  
  
  (method override (print self output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{a}" zone))))
  
  
  (method package (add-delegate self delegate)
    (set! delegates (cons delegate delegates)))
  
  
  (method package (remove-delegate self delegate)
    (set! delegates (remove! delegate delegates)))
  
  
  (method package (quitable? self)
    (and (null? delegates)
         (neq? zone 'start))))


;;;
;;;; Processors
;;;


(definition protected ordered-processors
  '())

(definition protected processors
  (make-table test: equal?))

(definition protected processors-mutex
  (make-mutex 'processors))

(definition protected (with-processors-mutex thunk)
  (unwind-protect
      (begin
        (mutex-lock! processors-mutex)
        (thunk))
    (mutex-unlock! processors-mutex)))


;; allow max + 1 when last delegate
(definition protected (max-processors-reached? last-delegate?)
  (>= (length ordered-processors) (if last-delegate? (+ max-processors 1) max-processors)))


(definition protected (max-processors-excess)
  (max 0 (- (length ordered-processors) max-processors)))


(definition protected (quitable-processors)
  (collect-if quitable? ordered-processors))


(definition protected (find-free-service server-service)
  (let ((in-use (map get-service ordered-processors)))
    (loop (for service from (+ server-service 1) to (+ server-service 50))
          (when (not (memv? service in-use))
            (return service))
          (finally
            (error "Unable to find free service")))))


(definition protected (spawn-processor server-host server-service sphere-asset-entries zone (delegate #f))
  (define (spawn host service)
    (let ((server (current-server))
          (debug? (world-setting 'world.processor-debug? #t)))
      (spawn-slave "processor" (get-processor-filename)
        (lambda (master slave cookie)
          (let ((server (load-object (get-local-register) 'world.server.remote 'world-remote-server))
                (server-path (subpath {Directory Settings "servers"} (get-directory server)))
                (processor-id (make-unique-id))
                (processor-no (next-no!))
                (entries (if (procedure? sphere-asset-entries) (sphere-asset-entries) sphere-asset-entries)))
            (processor-setup slave server server-path processor-id processor-no entries zone)))
        (lambda (master slave cookie)
          slave)
        arguments: `("-host" ,(host->string host) "-port" ,(port->string service))
        debug?: debug?
        wait?: #t)))
  
  (define (spawn/setup)
    (let ((host (if slave? "localhost" server-host))
          (service (if slave? 0 (find-free-service server-service))))
      (when debug-processors?
        (format :terminal "spawn {a} " (present-zone zone)))
      (receive (process-port remote-proxy) (spawn host service)
        (let ((processor (new Processor service zone process-port remote-proxy)))
          (set! ordered-processors (append! ordered-processors (list processor)))
          (table-set! processors zone processor)
          (when debug-processors?
            (format :terminal "({a}) -> {l detail: :human separator: \", \"}{%}" (substring (get-uuid (get-ior remote-proxy)) 0 8) (map present-processor ordered-processors)))
          processor))))
  
  (define (last-delegate?)
    (and delegate
         (let ((processor (get-processor delegate)))
           (and processor
                (neq? (get-zone delegate) 'start)
                (let ((delegates (get-delegates processor)))
                  (and (= (length delegates) 1)
                       (eq? (car delegates) delegate)))))))
  
  (with-processors-mutex
    (lambda ()
      (let ((last-delegate? (last-delegate?)))
        (%%cleanup-processors (and last-delegate? zone))
        (or (table-ref processors zone #f)
            (if (or (eq? zone 'start)
                    (not (max-processors-reached? last-delegate?)))
                (spawn/setup)
              (let ((quitable (quitable-processors)))
                (if (null? quitable)
                    (format "Max {a} processor{a} reached" max-processors (format-plural max-processors))
                  (when debug-processors?
                    (format :terminal "quit {a} ({a}) -> " (present-processor (car quitable)) (substring (get-uuid (get-ior (get-remote-proxy (car quitable)))) 0 8)))
                  (%%quit-processor (car quitable))
                  (when debug-processors?
                    (format :terminal "{l detail: :human separator: \", \"}{%}" (map present-processor ordered-processors)))
                  (spawn/setup)))))))))


(definition public (cleanup-processors)
  (with-processors-mutex
    (lambda ()
      (%%cleanup-processors #f))))


(definition protected (%%cleanup-processors ignore-zone)
  (let ((excess (max-processors-excess)))
    (when (> excess 0)
      (let ((quitable (quitable-processors)))
        (let ((quit (subseq quitable 0 (min excess (length quitable)))))
          (for-each (lambda (processor)
                      (unless (and ignore-zone
                                  (equal? (get-zone processor) ignore-zone))
                        (when debug-processors?
                          (format :terminal "cleanup {a} ({a}) -> " (present-processor processor) (substring (get-uuid (get-ior (get-remote-proxy processor))) 0 8)))
                        (%%quit-processor processor)
                        (when debug-processors?
                          (format :terminal "{l detail: :human separator: \", \"}{%}" (map present-processor ordered-processors)))))
                    quit))))))


(definition protected (quit-processor processor)
  (with-processors-mutex
    (lambda ()
      (%%quit-processor processor))))


(definition (%%quit-processor processor)
  (let ((zone (get-zone processor))
        (process-port (get-process-port processor))
        (remote-proxy (get-remote-proxy processor)))
    ;; be robust to processor already killed by some
    ;; external means like when stopping using systemd
    (handle-exception-filter
      connection-exception?
      (lambda (exc)
        )
      (lambda ()
        (closing-remote-proxy remote-proxy)
        (processor-quit remote-proxy)
        (process-status process-port)))
    (set! ordered-processors (remove! processor ordered-processors))
    (table-clear processors zone)))


(definition protected (quit-processors)
  (with-processors-mutex
    (lambda ()
      (iterate-table processors
        (lambda (zone processor)
          (%%quit-processor processor))))))


(definition protected (iterate-processors proc)
  (with-processors-mutex
    (lambda ()
      (iterate-table processors
        proc))))


(definition protected (list-processors)
  (with-processors-mutex
    (lambda ()
      ordered-processors)))


(definition protected (find-processor target-zone)
  (continuation-capture
    (lambda (return)
      (iterate-processors
        (lambda (zone processor)
          (when (equal? zone target-zone)
            (continuation-return return processor))))
      #f)))


(definition protected (find-processor-by-uuid uuid)
  (continuation-capture
    (lambda (return)
      (iterate-processors
        (lambda (zone processor)
          (when (uuid=? (get-uuid (get-ior (get-remote-proxy processor))) uuid)
            (continuation-return return processor))))
      #f)))


(definition protected (present-processor processor)
  (present-zone (get-zone processor))))
