;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Indexes
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.index jazz


(proclaim (warn optimizations))

(declare (optimize-dead-local-variables))


;;;
;;;; Planar
;;;


(definition public (make-planar-index)
  (s32vector 0 0))


(definition public (copy-planar-index idx <planar-index>) <planar-index>
  (s32vector (planar-index-x idx)
             (planar-index-z idx)))


(definition protected (planar-index x <fx> z <fx>) <planar-index>
  (s32vector x z))


(definition protected (planar-index! idx <planar-index> x <fx> z <fx>) <planar-index>
  (s32vector-set! idx 0 x)
  (s32vector-set! idx 1 z)
  idx)


(definition public inline (planar-index-x idx <planar-index>) <fx>
  (s32vector-ref idx 0))

(definition public inline (planar-index-z idx <planar-index>) <fx>
  (s32vector-ref idx 1))


(definition public inline (planar-index=? i1 <planar-index> i2 <planar-index>) <bool>
  (and (= (planar-index-x i1) (planar-index-x i2))
       (= (planar-index-z i1) (planar-index-z i2))))


;;;
;;;; Neighbor
;;;

  
(definition public inline (neighbor-index i <fx> k <fx>) <fx>
  (+ (* k 3) i 4))


;;;
;;;; Spatial
;;;


(definition public inline (index? obj)
  (s32vector? obj))


(definition public inline (indexed x <fx> y <fx> z <fx>) <index>
  (s32vector x y z))


(definition public inline (make-index) <index>
  (s32vector 0 0 0))


(definition public (copy-index idx <index>) <index>
  (let ((copy (make-index)))
    (index-copy! copy idx)
    copy))


(definition public inline (index-x idx <index>) <fx>
  (s32vector-ref idx 0))

(definition public inline (index-y idx <index>) <fx>
  (s32vector-ref idx 1))

(definition public inline (index-z idx <index>) <fx>
  (s32vector-ref idx 2))


(definition public inline (index-x-set! idx <index> x <fx>) <void>
  (s32vector-set! idx 0 x))

(definition public inline (index-y-set! idx <index> y <fx>) <void>
  (s32vector-set! idx 1 y))

(definition public inline (index-z-set! idx <index> z <fx>) <void>
  (s32vector-set! idx 2 z))


(definition public inline (index=? i1 <index> i2 <index>) <bool>
  (and (= (index-x i1) (index-x i2))
       (= (index-y i1) (index-y i2))
       (= (index-z i1) (index-z i2))))


(definition public inline (index! idx <index> x <fx> y <fx> z <fx>) <index>
  (index-x-set! idx x)
  (index-y-set! idx y)
  (index-z-set! idx z)
  idx)


(definition public inline (index-copy! dst <index> src <index>) <index>
  (index-x-set! dst (index-x src))
  (index-y-set! dst (index-y src))
  (index-z-set! dst (index-z src))
  dst))
