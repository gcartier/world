;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; Ray
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;    Alain Marcotte


(module world.ray jazz


(import (world.geometry))


(proclaim (warn optimizations))

(declare (optimize-dead-local-variables))


(definition public (ray-intersect-plane position direction normal distance)
  (let ((norm-direction-dot-product (dot-product normal direction)))
    (let ((intersect (/ (- distance (dot-product normal position))
                        norm-direction-dot-product)))
      (and (> intersect 0.)
           (let ((point (vertex+ position (vertex-scalar*& direction intersect))))
             (if (> norm-direction-dot-product 0.)
                 (values point (vertex-negate normal))
               (values point normal)))))))


(definition public (ray-intersect-pane position direction size resolution matrix)
  (let ((pos (matrix-translation matrix))
        (normal (matrix-direction matrix)))
    (let ((distance (dot-product pos normal)))
      (let ((info (ray-intersect-plane position direction normal distance)))
        (and info
             (receive (point normal) info
               (let ((pos (world->pane-coordinates point size resolution matrix)))
                 (let ((h (get-h pos))
                       (v (get-v pos)))
                   (and (>= h 0.)
                        (>= v 0.)
                        (<= h (get-width resolution))
                        (<= v (get-height resolution))
                        (values point pos))))))))))


(definition public (world->pane-coordinates point size resolution matrix)
  (let ((width (get-width size))
        (height (get-height size))
        (pane-width (get-width resolution))
        (pane-height (get-height resolution)))
    (let ((center (matrix-transform matrix (vertex& 0. 0. 0.)))
          (right (matrix-transform matrix (vertex& (/ pane-width width) 0. 0.)))
          (up (matrix-transform matrix (vertex& 0. (/ pane-height height) 0.))))
      (let ((h (+ (/ pane-width 2.) (dot-product (vertex- right center) (vertex- point center))))
            (v (- (/ pane-height 2.) (dot-product (vertex- up center) (vertex- point center)))))
        (new Point$fl$ h v)))))


;;;
;;;; Ray
;;;


(class Ray extends Object
  
  
  (slot origin    <vertex> initialize (make-vertex) getter generate)
  (slot direction <vertex> initialize (make-vertex) getter generate)
  
  
  (method override (initialize self orig <vertex> dir <vertex>)
    (set-origin self orig)
    (set-direction self dir))
  
  
  (method public (set-origin self orig <vertex>) <void>
    (vertex-copy! origin orig))
  
  (method public (set-direction self dir <vertex>) <void>
    (vertex-copy! direction dir)))


(definition public (make-ray orig dir)
  (new Ray orig dir)))
