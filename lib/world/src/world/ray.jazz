;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; Ray
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2016
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;    Alain Marcotte


(module world.ray jazz


(import (world.geometry))


(proclaim (warn optimizations))

(declare (optimize-dead-local-variables))


(definition public (ray-intersect-plane position direction normal plane-k)
  (let ((norm-direction-dot-product (dot-product normal direction)))
    (let ((intersect (/ (- plane-k (dot-product normal position))
                        norm-direction-dot-product)))
      (and (> intersect 0.)
           (let ((point (vertex+ position (vertex-scalar*& direction intersect))))
             (if (> norm-direction-dot-product 0.)
                 (values point (vertex-negate normal))
               (values point normal)))))))


;;;
;;;; Ray
;;;


(class Ray extends Object
  
  
  (slot origin    <vertex> initialize (make-vertex) getter generate)
  (slot direction <vertex> initialize (make-vertex) getter generate)
  
  
  (method override (initialize self orig <vertex> dir <vertex>)
    (set-origin self orig)
    (set-direction self dir))
  
  
  (method public (set-origin self orig <vertex>) <void>
    (vertex-copy! origin orig))
  
  (method public (set-direction self dir <vertex>) <void>
    (vertex-copy! direction dir)))


(definition public (make-ray orig dir)
  (new Ray orig dir)))
