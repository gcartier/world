;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Gravity Wells
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2013
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.gravity jazz


(import (jazz.jml)
        (jazz.graphic)
        (jazz.graphic.opengl.glew)
        (world)
        (world.autoload)
        (world.draw)
        (world.dyes)
        (world.element)
        (world.foreign)
        (world.gadget)
        (world.geometry)
        (world.object)
        (world.serialization)
        (world.shader)
        (world.syntax (phase syntax)))


;;;
;;;; Gravity
;;;


(interface Gravity-Well
  
  
  (method protected virtual abstract (well-mass)))


(class Gravity extends Gadget implements Gravity-Well
  
  
  (property mass <fl> initialize .01 accessors generate)
  
  
  (method override (prepare rest)
    (nextmethod rest)
    (set-radiuses (vertex .5 .5 .5))
    (set-color red-dye)
    (set-visible? (get-draw-gadgets?~ (current-world))))
  
  
  (method override (print output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{r precision: 3}" mass))))
  
  
  (method meta override (marshall-object obj)
    (serialize-object (class-of obj)
                      (vector
                        ;; component
                        (serialize (get-name~ obj))
                        (serialize (get-visible?~ obj))
                        ;; element
                        (serialize (get-position~ obj))
                        (serialize (get-radiuses~ obj))
                        (serialize (get-radius~ obj))
                        (serialize (get-scale~ obj))
                        (serialize (get-color~ obj))
                        (serialize (get-texture~ obj))
                        (serialize (get-hit-behavior~ obj))
                        (serialize (get-user-data~ obj))
                        ;; entity
                        ;; gadget
                        ;; gravity
                        (serialize (get-mass~ obj)))))
  
  
  (method meta override (unmarshall-object content)
    (bind-vector (;; component
                  name
                  visible?
                  ;; element
                  position
                  radiuses
                  radius
                  scale
                  color
                  texture
                  hit-behavior
                  user-data
                  ;; entity
                  ;; gadget
                  ;; gravity
                  mass)
        content
      (let ((obj (new self name: name visible?: visible?)))
        ;; element
        (set-position~ obj (deserialize position))
        (set-radiuses~ obj (deserialize radiuses))
        (set-radius~ obj (deserialize radius))
        (set-scale~ obj (deserialize scale))
        (set-color~ obj (deserialize color))
        (set-texture~ obj (deserialize texture))
        (set-hit-behavior~ obj (deserialize hit-behavior))
        (set-user-data~ obj (deserialize user-data))
        ;; entity
        ;; gadget
        ;; gravity
        (set-mass~ obj (deserialize mass)))))
  
  
  (method override (element-radius)
    .5)
  
  
  (method override (well-mass)
    mass)
  
  
  (method override (draw)
    (draw-sphere (get-x) (get-y) (get-z) .5 26 52 {Color Ochre}))))
