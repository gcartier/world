;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Debugging
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.debugging jazz


(import (jazz.debuggee)
        (jazz.platform)
        (jazz.snapshot)
        (world)
        (world.context))


(definition public debugging-priority <fl>
  1000.)


(definition package (start-debugging)
  (let ((thread (new-thread run-debugging 'debugging)))
    (thread-base-priority-set! thread debugging-priority)
    (thread-start! thread)))


(definition (run-debugging)
  (declare (proper-tail-calls))
  (if (or (controlling-terminal?) (using-debugger?))
      (sleep +inf.0)
    (let ((task-mutex world.task:task-mutex))
      (let (loop)
        (sleep 2)
        (if (task-mutex-deadlock-detected? task-mutex)
            (error "Task mutex deadlock detected")
          (loop))))))


(definition (task-mutex-deadlock-detected? task-mutex)
  (let ((world (current-world+))
        (count (get-snapshot-count)))
    (let ((timeout? (not (mutex-lock! task-mutex 60))))
      (if (and timeout?
               ;; ignore if a snapshot occured
               (= (get-snapshot-count) count)
               ;; ignore if working in progress
               (or (not world)
                   (not (get-working? world)))
               ;; ignore if attached to debugger
               (not (get-controller-debugger)))
          #t
        (unless timeout?
          (mutex-unlock! task-mutex))
        #f)))))
