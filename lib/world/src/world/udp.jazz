;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World UDP
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;    Barbara Samson


(module world.udp jazz


(import (jazz.presence)
        (jazz.stream)
        (jazz.syntax (phase syntax))
        (world)
        (world.audio)
        (world.binary)
        (world.configure)
        (world.evolution)
        (world.geometry)
        (world.ring)
        (world.settings)
        (world.task)
        (world.video))


(definition protected udp-connect
  0)

(definition protected udp-connected
  1)

(definition protected udp-ack
  2)

(definition protected udp-nack
  3)

(definition protected udp-audio
  4)

(definition protected udp-video
  5)


(definition udp-names
  #(connect connected ack nack audio video))

(definition protected (udp-name kind)
  (vector-ref udp-names kind))


;; MTU - IP HEADER - UDP HEADER
(definition protected udp-datagram-max
  (world-setting 'world.udp-datagram-max 1472))

(definition protected udp-retain-size
  (world-setting 'world.udp-retain-size 256))

(definition protected udp-retain-max-size
  (world-setting 'world.udp-retain-max-size 4096))

(definition protected udp-retain-window
  (world-setting 'world.udp-retain-window .2))

(definition protected udp-process-size
  (world-setting 'world.udp-process-size 256))

(definition protected udp-process-max-size
  (world-setting 'world.udp-process-max-size 4096))

(definition protected udp-process-window
  (world-setting 'world.udp-process-window .2))

(definition protected udp-process-window-nanoseconds
  (fxround (* udp-process-window nanosecond)))

(definition protected udp-simulator-size
  (world-setting 'world.udp-simulator-size 256))

(definition protected udp-simulator-max-size
  (world-setting 'world.udp-simulator-max-size 4096))

(definition protected udp-ack-frequency
  (world-setting 'world.udp-ack-frequency 10.))

(definition protected udp-ack-period
  (/ 1. udp-ack-frequency))

(definition protected udp-audio-throttle
  (world-setting 'world.udp-audio-throttle 2.))

(definition protected udp-video-throttle
  (world-setting 'world.udp-video-throttle 1.))

;; Barbarasays this shall be a time ring!
(definition protected udp-latest-nacks
  (world-setting 'world.udp-latest-nacks 100))

(definition protected udp-experimental-filter-nacks?
  (world-setting 'world.udp-experimental-filter-nacks? #f))


(definition protected udp-show-roundtrip?
  (world-setting 'world.udp-show-roundtrip? #f))

(definition protected udp-show-overflows?
  (world-setting 'world.udp-show-overflows? #f))

;; duplicates are usually a normal consequence of nacks
(definition protected udp-show-duplicates?
  (world-setting 'world.udp-show-duplicates? #f))

(definition protected udp-show-discard?
  (world-setting 'world.udp-show-discard? #f))

(definition protected udp-show-missing?
  (world-setting 'world.udp-show-missing? #f))

(definition protected udp-show-retries?
  (world-setting 'world.udp-show-retries? #f))

(definition protected udp-show-resetting?
  (world-setting 'world.udp-show-resetting? #f))

(definition protected udp-show-resets?
  (world-setting 'world.udp-show-resets? #f))

(definition protected udp-show-throttle?
  (world-setting 'world.udp-show-throttle? #f))

(definition protected udp-show-congestion?
  (world-setting 'world.udp-show-congestion? #f))

(definition protected udp-show-nacks?
  (world-setting 'world.udp-show-nacks? #f))

(definition protected udp-latency
  (world-setting 'world.udp-latency #f))

(definition protected udp-lag
  (world-setting 'world.udp-lag #f))

(definition protected udp-drop
  (world-setting 'world.udp-drop #f))

(definition protected udp-congestion
  (world-setting 'world.udp-congestion #f))

(definition protected udp-congestion-duration
  (world-setting 'world.udp-congestion-duration 5.))


(definition protected udp-media-off
  #u8(111 102 102))


(definition protected udp-id-connect
  0.)

(definition protected udp-id-connected
  1.)

(definition protected udp-id-send-media
  2.)

(definition protected udp-id-receive-ack
  3.)

(definition protected udp-id-receive-nack
  4.)

(definition protected udp-id-discard
  5.)

(definition protected udp-id-missing
  6.)


(definition protected udp-id-create-packet
  3661.)

(definition protected udp-id-add-retain
  3662.)

(definition protected udp-id-remove-retain
  3663.)

(definition protected udp-id-add-nack
  3664.)

(definition protected udp-id-remove-nack
  3665.)

(definition protected udp-id-discard-packet
  3666.)

(definition protected udp-id-missing-packet
  3667.)


(definition protected (present-media-kind kind)
  (if (= kind udp-audio)
      'AUDIO
    'VIDEO))


(definition protected (record-event id data1 data2 data3 data4)
  (let ((content (get-content evolution))
        (index (index-now evolution)))
    (f64vector-set! content index (current-seconds))
    (f64vector-set! content (+ index 1) id)
    (f64vector-set! content (+ index 2) data1)
    (f64vector-set! content (+ index 3) data2)
    (f64vector-set! content (+ index 4) data3)
    (f64vector-set! content (+ index 5) data4)
    (advance! evolution)))


(definition protected (udp-ring-overflow ring data)
  (when udp-show-overflows?
    (format :terminal "{s} {s} {s} {s}{%}" remote-name '***overflow*** ring (read-udp-sequence data))))


;;;
;;;; Tolerance
;;;


;; retry write every 1/100s for 1s
;; at the moment centro will return a network is unreachable
;; or down error after about 10mn and then every minute or so
;; this is also a try at understanding the No buffer space
;; available exception that can occur from time to time
(definition protected (retrying-write data port)
  (declare (proper-tail-calls))
  (let (loop (n 0))
    (with-exception-filter
      (lambda (exc)
        (when udp-show-retries?
          (format :terminal "{s} {s} {s} {s}{%}" remote-name '***retry*** n exc))
        (< n 100))
      (lambda (exc)
        (sleep .01)
        (loop (+ n 1)))
      (lambda ()
        (write data port)))))


;;;
;;;; Channel
;;;


(class UDP-Channel extends Object
  
  
  (slot media-kind    getter generate)
  (slot last-sequence getter generate)
  ;; time difference between local time and remote time
  ;; noting that this includes lag that may vary over time
  ;; at the moment we always update this upon receiving data
  (slot time-delta    getter generate)
  
  
  (method override (initialize self media-kind)
    (nextmethod self)
    (set! self.media-kind media-kind)
    (set! self.last-sequence #f)
    (set! self.time-delta 0.))
  
  
  (method override (print self output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{a}" media-kind))))
  
  
  (method protected (update-time self seq data ring)
    (let ((remote-new (/ (read-udp-media-timestamp data) nanosecond))
          (local-new (current-seconds)))
      (set! last-sequence seq)
      (set! time-delta (- local-new remote-new))))
  
  
  (method protected (now-timestamp self window)
    (let ((now (current-seconds)))
      (- now time-delta window))))


;;;
;;;; Simulator
;;;


(class UDP-Simulator extends Object
  
  
  (property latency             getter generate)
  (property lag                 getter generate)
  (property drop                getter generate)
  (property congestion          accessors generate)
  (property congestion-duration accessors generate)
  
  (slot congestion-occuring? getter generate)
  (slot congestion-ends      accessors generate)
  (slot writer               getter generate)
  (slot ring                 getter generate)
  (slot thread               getter generate)
  
  
  (method override (initialize self latency lag drop writer)
    (nextmethod self)
    (set! self.latency latency)
    (set! self.lag lag)
    (set! self.drop drop)
    (set! self.congestion udp-congestion)
    (set! self.congestion-duration udp-congestion-duration)
    (set! self.congestion-occuring? #f)
    (set! self.congestion-ends #f)
    (set! self.writer writer)
    (set! self.ring (new Time-Ring udp-simulator-size max-size: udp-simulator-max-size overflow-proc: udp-ring-overflow))
    (set! self.thread (new-thread
                        (lambda ()
                          (send-loop self))
                        'simulator))
    (thread-start! thread))
  
  
  (method protected (send self info)
    ;; congestion
    (if congestion
        (if (not congestion-occuring?)
            (if (or (eq? congestion #t)
                    (< (random-real) (/ congestion 100.)))
                (let ((ends (if (eq? congestion-duration #t) +inf.0 (random-between 0. congestion-duration))))
                  (set! congestion-occuring? #t)
                  (set! congestion-ends ends)
                  (when udp-show-congestion?
                    (format :terminal "{s} {s} {s}{%}" remote-name 'CONGESTION 'ON)))
              (writer info))
          (when (or (not congestion-ends)
                    (>= (current-seconds) congestion-ends))
            (set! congestion-occuring? #f)
            (set! congestion-ends #f)
            (when udp-show-congestion?
              (format :terminal "{s} {s} {s}{%}" remote-name 'CONGESTION 'OFF))
            (writer info)))
      ;; drop
      (unless (and drop (< (random-real) (/ drop 100.)))
        ;; latency
        (if latency
            (insert ring (+ (current-seconds) latency) info)
          (writer info)))))
  
  
  (method (send-loop self)
    (declare (proper-tail-calls))
    (let (loop)
      (let ((info (wait ring)))
        (writer info))
      (loop))))


;;;
;;;; Media
;;;


(definition public (media-packet-header? data)
  (and (= (read-udp-part data) 0)
       (read-udp-media-header? data)))


;;;
;;;; Access
;;;


(definition public (scan-boolean data pos)
  (/= (scan-s8 data pos) 0))


(definition public (scan-u8vector data pos)
  (let ((len (scan-s32 data pos)))
    (let ((v (make-u8vector len))
          (pos (+ pos 4)))
      (subu8vector-move! data pos (+ pos len) v 0)
      v)))


(definition public (scan-host data pos)
  (u8vector (u8vector-ref data pos)
            (u8vector-ref data (+ pos 1))
            (u8vector-ref data (+ pos 2))
            (u8vector-ref data (+ pos 3))))


(definition public (put-boolean data pos value)
  (put-s8 data pos (if value 1 0)))


(definition public (put-u8vector data pos value)
  (let ((len (u8vector-length value)))
    (put-s32 data pos len)
    (let ((pos (+ pos 4)))
      (subu8vector-move! value 0 len data pos))))


(definition public (put-subu8vector! data pos value offset count)
  (put-s32 data pos count)
  (let ((pos (+ pos 4)))
    (subu8vector-move! value offset (+ offset count) data pos)))


(definition public (put-host data pos value)
  (u8vector-set! data pos (u8vector-ref value 0))
  (u8vector-set! data (+ pos 1) (u8vector-ref value 1))
  (u8vector-set! data (+ pos 2) (u8vector-ref value 2))
  (u8vector-set! data (+ pos 3) (u8vector-ref value 3)))


;;;
;;;; Format
;;;


;; udp
(definition public (read-udp-sent            data) (scan-double   data  0)) (definition public (write-udp-sent            data value) (put-double   data  0 value))
(definition public (read-udp-kind            data) (scan-s8       data  8)) (definition public (write-udp-kind            data value) (put-s8       data  8 value))
(definition public (read-udp-origin          data) (scan-s32      data 12)) (definition public (write-udp-origin          data value) (put-s32      data 12 value))
(definition public (read-udp-sequence        data) (scan-s32      data 16)) (definition public (write-udp-sequence        data value) (put-s32      data 16 value))
(definition public (read-udp-frame           data) (scan-s32      data 20)) (definition public (write-udp-frame           data value) (put-s32      data 20 value))
(definition public (read-udp-part            data) (scan-s32      data 24)) (definition public (write-udp-part            data value) (put-s32      data 24 value))
(definition public (read-udp-total           data) (scan-s32      data 28)) (definition public (write-udp-total           data value) (put-s32      data 28 value))
(definition public (read-udp-media-timestamp data) (scan-s64      data 32)) (definition public (write-udp-media-timestamp data value) (put-s64      data 32 value))
(definition public (read-udp-media-duration  data) (scan-s64      data 40)) (definition public (write-udp-media-duration  data value) (put-s64      data 40 value))
(definition public (read-udp-media-payload   data) (scan-u8vector data 48)) (definition public (write-udp-media-payload   data value) (put-u8vector data 48 value)) (definition public udp-media-buffer-offset (+ 48 4))
(definition public (read-udp-media-header?   data) (scan-boolean  data  9)) (definition public (write-udp-media-header?   data value) (put-boolean  data  9 value))
(definition public (read-udp-media-off?      data) (scan-boolean  data 10)) (definition public (write-udp-media-off?      data value) (put-boolean  data 10 value))

(definition public (read-udp-media-seconds data)
  (/ (read-udp-media-timestamp data) nanosecond))

(definition public (read-udp-media-payload-size data)
  (scan-s32 data 48))

(definition public (write-udp-media-subpayload data value offset count)
  (put-subu8vector! data 48 value offset count))

;; connect
(definition public (read-udp-connect-local-host data) (scan-host  data 16)) (definition public (write-udp-connect-local-host data value) (put-host  data 16 value))
(definition public (read-udp-connect-local-port data) (scan-s32   data 20)) (definition public (write-udp-connect-local-port data value) (put-s32   data 20 value))
(definition public (read-udp-connect-latency    data) (scan-float data 24)) (definition public (write-udp-connect-latency    data value) (put-float data 24 value))
(definition public (read-udp-connect-lag        data) (scan-float data 28)) (definition public (write-udp-connect-lag        data value) (put-float data 28 value))
(definition public (read-udp-connect-drop       data) (scan-float data 32)) (definition public (write-udp-connect-drop       data value) (put-float data 32 value))

;; ack
(definition public (read-udp-ack-channel-states data) (scan-u8vector data 16)) (definition public (write-udp-ack-channel-states data value) (put-u8vector data 16 value))

;; nack
(definition public (read-udp-nack-media-kind     data) (scan-s32      data 16)) (definition public (write-udp-nack-media-kind     data value) (put-s32      data 16 value))
(definition public (read-udp-nack-latest-missing data) (scan-u8vector data 20)) (definition public (write-udp-nack-latest-missing data value) (put-u8vector data 20 value)))
