;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World UDP
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;    Barbara Samson


(module world.udp jazz


(import (jazz.presence)
        (world)
        (world.context)
        (world.evolution)
        (world.ring)
        (world.settings)
        (world.support))


(definition protected udp-connect
  0)

(definition protected udp-ack
  1)

(definition protected udp-nack
  2)

(definition protected udp-audio
  3)

(definition protected udp-video
  4)


(definition udp-names
  #(connect ack nack audio video))

(definition protected (udp-name kind)
  (vector-ref udp-names kind))


(definition protected nanosecond
  (cast <fl> (expt 10 9)))


;; MTU - IP HEADER - UDP HEADER
(definition protected udp-datagram-max
  (world-setting 'world.udp-datagram-max 1472))

(definition protected udp-process-window
  (world-setting 'world.udp-process-window .2))

(definition protected udp-process-window-nanoseconds
  (fxround (* udp-process-window nanosecond)))


(definition protected udp-show-discard?
  (world-setting 'world.udp-show-discard? #f))

(definition protected udp-show-missing?
  (world-setting 'world.udp-show-missing? #f))

(definition protected udp-show-duplicates?
  (world-setting 'world.udp-show-duplicates? #f))

(definition protected udp-debug-nack?
  (world-setting 'world.udp-debug-nack? #f))

(definition protected udp-drop-percentage
  (world-setting 'world.udp-drop-percentage #f))


(definition protected udp-connected
  #u8(99 111 110 110 101 99 116 101 100))

(definition protected udp-media-off
  #u8(111 102 102))


(definition protected udp-id-connect
  0.)

(definition protected udp-id-connected
  1.)

(definition protected udp-id-send-media
  2.)

(definition protected udp-id-receive-ack
  3.)

(definition protected udp-id-receive-nack
  4.)

(definition protected udp-id-discard-resent
  5.)

(definition protected udp-id-missing-resent
  6.)


(definition protected (record-event id data1 data2 data3)
  (let ((content (get-content evolution))
        (index (index-now evolution)))
    (f64vector-set! content index (current-seconds))
    (f64vector-set! content (+ index 1) id)
    (f64vector-set! content (+ index 2) data1)
    (f64vector-set! content (+ index 3) data2)
    (f64vector-set! content (+ index 4) data3)
    (advance! evolution)))


;;;
;;;; Channel
;;;


(class UDP-Channel extends Object
  
  
  (slot origin           getter generate)
  (slot media-kind       getter generate)
  (slot remote-timestamp getter generate)
  (slot local-seconds    getter generate)
  
  
  (method override (initialize self origin media-kind)
    (nextmethod self)
    (set! self.origin origin)
    (set! self.media-kind media-kind)
    (set! self.remote-timestamp #f)
    (set! self.local-seconds #f))
  
  
  (method override (print self output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{a} {a}" origin media-kind))))
  
  
  (method protected (update-time self data)
    (set! remote-timestamp (read-udp-timestamp data))
    (set! local-seconds (current-seconds)))
  
  
  (method protected (now-timestamp self)
    (let ((now (current-seconds)))
      (- (+ remote-timestamp (fxround (* (- now local-seconds) nanosecond)))
         udp-process-window-nanoseconds))))


;;;
;;;; Send Channel
;;;


(class UDP-Send-Channel extends UDP-Channel
  
  
  (slot retain-ring    getter generate)
  (slot release-thread getter generate)
  
  
  (method override (initialize self origin media-kind)
    (nextmethod self origin media-kind)
    ;; make it really big until time ring is a real ring
    (set! self.retain-ring (new Time-Ring 400096 @w 512 @max-size: +inf.0 timestamp-proc: read-udp-timestamp now-proc: (~ now-timestamp self)))
    ;; development
    (set-$s retain-ring)
    (set! self.release-thread (new-thread
                                (lambda ()
                                  (release-loop self))))
    (thread-start! release-thread))
  
  
  (method protected (retain self data)
    (update-time self data)
    (insert retain-ring data))
  
  
  (method protected (release-loop self)
    (declare (proper-tail-calls))
    (let (loop)
      (wait retain-ring)
      (loop))))


;;;
;;;; Receive Channel
;;;


(class UDP-Receive-Channel extends UDP-Channel
  
  
  (slot receive-last-sequence accessors generate)
  ;; quicky for test
  (slot nack-sequences        accessors generate)
  
  
  (method override (initialize self origin media-kind)
    (nextmethod self origin media-kind)
    (set! self.receive-last-sequence #f)
    (set! self.nack-sequences '())))


;;;
;;;; Access
;;;


(definition public (read-32-bit data pos)
  (let ((b1 (u8vector-ref data pos))
        (b2 (u8vector-ref data (+ pos 1)))
        (b3 (u8vector-ref data (+ pos 2)))
        (b4 (u8vector-ref data (+ pos 3))))
    (bytes->32-bit-integer b1 b2 b3 b4)))


(definition public (read-64-bit data pos)
  (let ((b1 (u8vector-ref data pos))
        (b2 (u8vector-ref data (+ pos 1)))
        (b3 (u8vector-ref data (+ pos 2)))
        (b4 (u8vector-ref data (+ pos 3)))
        (b5 (u8vector-ref data (+ pos 4)))
        (b6 (u8vector-ref data (+ pos 5)))
        (b7 (u8vector-ref data (+ pos 6)))
        (b8 (u8vector-ref data (+ pos 7))))
    (bytes->64-bit-integer b1 b2 b3 b4 b5 b6 b7 b8)))


(definition public (read-u8vector data pos)
  (let ((len (read-32-bit data pos)))
    (let ((v (make-u8vector len))
          (pos (+ pos 4)))
      (subu8vector-move! data pos (+ pos len) v 0)
      v)))


(definition public (write-32-bit data pos value)
  (32-bit-integer->bytes value
    (lambda (b1 b2 b3 b4)
      (u8vector-set! data pos b1)
      (u8vector-set! data (+ pos 1) b2)
      (u8vector-set! data (+ pos 2) b3)
      (u8vector-set! data (+ pos 3) b4))))


(definition public (write-64-bit data pos value)
  (64-bit-integer->bytes value
    (lambda (b1 b2 b3 b4 b5 b6 b7 b8)
      (u8vector-set! data pos b1)
      (u8vector-set! data (+ pos 1) b2)
      (u8vector-set! data (+ pos 2) b3)
      (u8vector-set! data (+ pos 3) b4)
      (u8vector-set! data (+ pos 4) b5)
      (u8vector-set! data (+ pos 5) b6)
      (u8vector-set! data (+ pos 6) b7)
      (u8vector-set! data (+ pos 7) b8))))


(definition public (write-u8vector data pos value)
  (let ((len (u8vector-length value)))
    (write-32-bit data pos len)
    (let ((pos (+ pos 4)))
      (subu8vector-move! value 0 len data pos))))


(definition public (write-subu8vector! data pos value offset count)
  (write-32-bit data pos count)
  (let ((pos (+ pos 4)))
    (subu8vector-move! value offset (+ offset count) data pos)))


;;;
;;;; Format
;;;


;; udp
(definition public (read-udp-kind      data) (read-32-bit   data  0)) (definition public (write-udp-kind      data value) (write-32-bit   data  0 value))
(definition public (read-udp-origin    data) (read-32-bit   data  4)) (definition public (write-udp-origin    data value) (write-32-bit   data  4 value))
(definition public (read-udp-sequence  data) (read-32-bit   data  8)) (definition public (write-udp-sequence  data value) (write-32-bit   data  8 value))
(definition public (read-udp-frame     data) (read-32-bit   data 12)) (definition public (write-udp-frame     data value) (write-32-bit   data 12 value))
(definition public (read-udp-part      data) (read-32-bit   data 16)) (definition public (write-udp-part      data value) (write-32-bit   data 16 value))
(definition public (read-udp-total     data) (read-32-bit   data 20)) (definition public (write-udp-total     data value) (write-32-bit   data 20 value))
(definition public (read-udp-timestamp data) (read-64-bit   data 24)) (definition public (write-udp-timestamp data value) (write-64-bit   data 24 value))
(definition public (read-udp-duration  data) (read-64-bit   data 32)) (definition public (write-udp-duration  data value) (write-64-bit   data 32 value))
(definition public (read-udp-payload   data) (read-u8vector data 40)) (definition public (write-udp-payload   data value) (write-u8vector data 40 value))

(definition public (read-udp-payload-size data)
  (read-32-bit data 40))

(definition public (write-udp-subpayload data value offset count)
  (write-subu8vector! data 40 value offset count))

;; ack / nack
(definition public (read-udp-media-kind data)
  (read-32-bit data 12))

(definition public (write-udp-media-kind data value)
  (write-32-bit data 12 value)))
