;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World UDP
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;    Barbara Samson


(module world.udp jazz


(import (jazz.presence)
        (jazz.syntax (phase syntax))
        (world)
        (world.audio)
        (world.binary)
        (world.configure)
        (world.evolution)
        (world.geometry)
        (world.ring)
        (world.settings)
        (world.task)
        (world.video))


(definition protected udp-connect
  0)

(definition protected udp-connected
  1)

(definition protected udp-ack
  2)

(definition protected udp-nack
  3)

(definition protected udp-audio
  4)

(definition protected udp-video
  5)


(definition udp-names
  #(connect connected ack nack audio video))

(definition protected (udp-name kind)
  (vector-ref udp-names kind))


(definition protected nanosecond <fl>
  (exact->inexact (expt 10 9)))


;; MTU - IP HEADER - UDP HEADER
(definition protected udp-datagram-max
  (world-setting 'world.udp-datagram-max 1472))

(definition protected udp-process-window
  (world-setting 'world.udp-process-window .2))

(definition protected udp-process-window-nanoseconds
  (fxround (* udp-process-window nanosecond)))

(definition protected udp-ack-frequency
  (world-setting 'world.udp-ack-frequency 10.))

(definition protected udp-ack-period
  (/ 1. udp-ack-frequency))

(definition protected udp-audio-throttle
  (world-setting 'world.udp-audio-throttle 2.))

(definition protected udp-video-throttle
  (world-setting 'world.udp-video-throttle 1.))

;; Barbarasays this shall be a time ring!
(definition protected udp-latest-nacks
  (world-setting 'world.udp-latest-nacks 100))


;; duplicates are usually a normal consequence of nacks
(definition protected udp-show-duplicates?
  (world-setting 'world.udp-show-duplicates? #f))

(definition protected udp-show-discard?
  (world-setting 'world.udp-show-discard? #f))

(definition protected udp-show-missing?
  (world-setting 'world.udp-show-missing? #f))

(definition protected udp-show-retries?
  (world-setting 'world.udp-show-retries? #f))

(definition protected udp-show-resets?
  (world-setting 'world.udp-show-resets? #f))

(definition protected udp-show-throttle?
  (world-setting 'world.udp-show-throttle? #f))

(definition protected udp-show-congestion?
  (world-setting 'world.udp-show-congestion? #f))

(definition protected udp-debug-nack?
  (world-setting 'world.udp-debug-nack? #f))

(definition protected udp-latency
  (world-setting 'world.udp-latency #f))

(definition protected udp-lag
  (world-setting 'world.udp-lag #f))

(definition protected udp-drop
  (world-setting 'world.udp-drop #f))

(definition protected udp-congestion
  (world-setting 'world.udp-congestion #f))

(definition protected udp-congestion-duration
  (world-setting 'world.udp-congestion-duration 5.))


(definition protected udp-media-off
  #u8(111 102 102))


(definition protected udp-id-connect
  0.)

(definition protected udp-id-connected
  1.)

(definition protected udp-id-send-media
  2.)

(definition protected udp-id-receive-ack
  3.)

(definition protected udp-id-receive-nack
  4.)

(definition protected udp-id-discard
  5.)

(definition protected udp-id-missing
  6.)


(definition protected (present-media-kind kind)
  (if (= kind udp-audio)
      'AUDIO
    'VIDEO))


(definition protected (record-event id data1 data2 data3 data4)
  (let ((content (get-content evolution))
        (index (index-now evolution)))
    (f64vector-set! content index (current-seconds))
    (f64vector-set! content (+ index 1) id)
    (f64vector-set! content (+ index 2) data1)
    (f64vector-set! content (+ index 3) data2)
    (f64vector-set! content (+ index 4) data3)
    (f64vector-set! content (+ index 5) data4)
    (advance! evolution)))


;;;
;;;; Tolerance
;;;


;; retry write every 1/100s for 1s
;; at the moment centro will return a network is unreachable
;; or down error after about 10mn and then every minute or so
;; this is also a try at understanding the No buffer space
;; available exception that can occur from time to time
(definition protected (retrying-write data port)
  (declare (proper-tail-calls))
  (let (loop (n 0))
    (with-exception-filter
      (lambda (exc)
        (when udp-show-retries?
          (format :terminal "{s} {s} {s} {s}{%}" remote-name '***retry*** n exc))
        (< n 100))
      (lambda (exc)
        (sleep .01)
        (loop (+ n 1)))
      (lambda ()
        (write data port)))))


;;;
;;;; Channel
;;;


(class UDP-Channel extends Object
  
  
  (slot media-kind     getter generate)
  (slot last-sequence  getter generate)
  (slot last-remote    getter generate)
  ;; time difference between local time and remote time
  ;; noting that this includes lag that may vary over time
  ;; at the moment we always update this upon receiving data
  (slot time-delta     getter generate)
  
  
  (method override (initialize self media-kind)
    (nextmethod self)
    (set! self.media-kind media-kind)
    (set! self.last-sequence #f)
    (set! self.last-remote 0.)
    (set! self.time-delta 0.))
  
  
  (method override (print self output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{a}" media-kind))))
  
  
  (method protected (update-time self seq data ring)
    (updating ring
      (lambda ()
        (let ((remote-new (/ (read-udp-media-timestamp data) nanosecond))
              (local-new (current-seconds)))
          (define (update-ring)
            (let ((delta (- (- local-new remote-new) time-delta)))
              (update ring
                (lambda (time data updater)
                  (updater (- time delta) data)))))
          
          (when (and last-sequence
                     (> seq last-sequence)
                     ;; heuristic using the fact that h264 always
                     ;; resets timestamps to the same starting value
                     (< remote-new last-remote))
            ;; zanzaa says print remote-new to double check that h264
            ;; always starts with the same value and maybe even check for it
            ;; codec was reset so we need to update
            ;; entries to match the new timestamps
            (update-ring))
          (set! last-sequence seq)
          (set! last-remote remote-new)
          (set! time-delta (- local-new remote-new))))))
  
  
  (method protected (now-timestamp self)
    (let ((now (current-seconds)))
      (- now time-delta udp-process-window))))


;;;
;;;; Simulator
;;;


(class UDP-Simulator extends Object
  
  
  (property latency             getter generate)
  (property lag                 getter generate)
  (property drop                getter generate)
  (property congestion          accessors generate)
  (property congestion-duration accessors generate)
  
  (slot congestion-occuring? getter generate)
  (slot congestion-ends getter generate)
  (slot writer          getter generate)
  (slot ring            getter generate)
  (slot thread          getter generate)
  
  
  (method override (initialize self latency lag drop writer)
    (nextmethod self)
    (set! self.latency latency)
    (set! self.lag lag)
    (set! self.drop drop)
    (set! self.congestion udp-congestion)
    (set! self.congestion-duration udp-congestion-duration)
    (set! self.congestion-occuring? #f)
    (set! self.congestion-ends #f)
    (set! self.writer writer)
    ;; make it really big until time ring is a real ring
    (set! self.ring (new Time-Ring 40096 @w 512 @max-size: +inf.0))
    (set! self.thread (new-thread
                        (lambda ()
                          (send-loop self))
                        'simulator))
    (thread-start! thread))
  
  
  (method protected (send self info)
    ;; congestion
    (if congestion
        (if (not congestion-occuring?)
            (if (< (random-real) (/ congestion 100.))
                (let ((duration (random-between 0. congestion-duration)))
                  (set! congestion-occuring? #t)
                  (set! congestion-ends (+ (current-seconds) duration))
                  (when udp-show-congestion?
                    (format :terminal "{s} {s} {s}{%}" remote-name 'CONGESTION 'ON)))
              (writer info))
          (when (>= (current-seconds) congestion-ends)
            (set! congestion-occuring? #f)
            (set! congestion-ends #f)
            (when udp-show-congestion?
              (format :terminal "{s} {s} {s}{%}" remote-name 'CONGESTION 'OFF))
            (writer info)))
      ;; drop
      (unless (and drop (< (random-real) (/ drop 100.)))
        ;; latency
        (if latency
            (insert ring (+ (current-seconds) latency) info)
          (writer info)))))
  
  
  (method (send-loop self)
    (declare (proper-tail-calls))
    (let (loop)
      (let ((info (wait ring)))
        (writer info))
      (loop))))


;;;
;;;; Media
;;;


(definition public (video-packet-header? data)
  (and (= (read-udp-part data) 0)
       (video-buffer-header? data udp-media-buffer-offset)))


;;;
;;;; Access
;;;


(definition public (read-32-bit data pos)
  (let ((b1 (u8vector-ref data pos))
        (b2 (u8vector-ref data (+ pos 1)))
        (b3 (u8vector-ref data (+ pos 2)))
        (b4 (u8vector-ref data (+ pos 3))))
    (bytes->32-bit-integer b1 b2 b3 b4)))


(definition public (read-64-bit data pos)
  (let ((b1 (u8vector-ref data pos))
        (b2 (u8vector-ref data (+ pos 1)))
        (b3 (u8vector-ref data (+ pos 2)))
        (b4 (u8vector-ref data (+ pos 3)))
        (b5 (u8vector-ref data (+ pos 4)))
        (b6 (u8vector-ref data (+ pos 5)))
        (b7 (u8vector-ref data (+ pos 6)))
        (b8 (u8vector-ref data (+ pos 7))))
    (bytes->64-bit-integer b1 b2 b3 b4 b5 b6 b7 b8)))


(definition public (read-u8vector data pos)
  (let ((len (read-32-bit data pos)))
    (let ((v (make-u8vector len))
          (pos (+ pos 4)))
      (subu8vector-move! data pos (+ pos len) v 0)
      v)))


(definition public (read-host data pos)
  (u8vector (u8vector-ref data pos)
            (u8vector-ref data (+ pos 1))
            (u8vector-ref data (+ pos 2))
            (u8vector-ref data (+ pos 3))))


(definition public (write-32-bit data pos value)
  (32-bit-integer->bytes value
    (lambda (b1 b2 b3 b4)
      (u8vector-set! data pos b1)
      (u8vector-set! data (+ pos 1) b2)
      (u8vector-set! data (+ pos 2) b3)
      (u8vector-set! data (+ pos 3) b4))))


(definition public (write-64-bit data pos value)
  (64-bit-integer->bytes value
    (lambda (b1 b2 b3 b4 b5 b6 b7 b8)
      (u8vector-set! data pos b1)
      (u8vector-set! data (+ pos 1) b2)
      (u8vector-set! data (+ pos 2) b3)
      (u8vector-set! data (+ pos 3) b4)
      (u8vector-set! data (+ pos 4) b5)
      (u8vector-set! data (+ pos 5) b6)
      (u8vector-set! data (+ pos 6) b7)
      (u8vector-set! data (+ pos 7) b8))))


(definition public (write-u8vector data pos value)
  (let ((len (u8vector-length value)))
    (write-32-bit data pos len)
    (let ((pos (+ pos 4)))
      (subu8vector-move! value 0 len data pos))))


(definition public (write-subu8vector! data pos value offset count)
  (write-32-bit data pos count)
  (let ((pos (+ pos 4)))
    (subu8vector-move! value offset (+ offset count) data pos)))


(definition public (write-host data pos value)
  (u8vector-set! data pos (u8vector-ref value 0))
  (u8vector-set! data (+ pos 1) (u8vector-ref value 1))
  (u8vector-set! data (+ pos 2) (u8vector-ref value 2))
  (u8vector-set! data (+ pos 3) (u8vector-ref value 3)))


;;;
;;;; Format
;;;


;; udp
(definition public (read-udp-sent            data) (scan-double   data  0)) (definition public (write-udp-sent            data value) (put-double     data  0 value))
(definition public (read-udp-kind            data) (read-32-bit   data  8)) (definition public (write-udp-kind            data value) (write-32-bit   data  8 value))
(definition public (read-udp-origin          data) (read-32-bit   data 12)) (definition public (write-udp-origin          data value) (write-32-bit   data 12 value))
(definition public (read-udp-sequence        data) (read-32-bit   data 16)) (definition public (write-udp-sequence        data value) (write-32-bit   data 16 value))
(definition public (read-udp-frame           data) (read-32-bit   data 20)) (definition public (write-udp-frame           data value) (write-32-bit   data 20 value))
(definition public (read-udp-part            data) (read-32-bit   data 24)) (definition public (write-udp-part            data value) (write-32-bit   data 24 value))
(definition public (read-udp-total           data) (read-32-bit   data 28)) (definition public (write-udp-total           data value) (write-32-bit   data 28 value))
(definition public (read-udp-media-timestamp data) (read-64-bit   data 32)) (definition public (write-udp-media-timestamp data value) (write-64-bit   data 32 value))
(definition public (read-udp-media-duration  data) (read-64-bit   data 40)) (definition public (write-udp-media-duration  data value) (write-64-bit   data 40 value))
(definition public (read-udp-media-payload   data) (read-u8vector data 48)) (definition public (write-udp-media-payload   data value) (write-u8vector data 48 value)) (definition public udp-media-buffer-offset (+ 48 4))

(definition public (read-udp-seconds data)
  (/ (read-udp-media-timestamp data) nanosecond))

(definition public (read-udp-payload-size data)
  (read-32-bit data 48))

(definition public (write-udp-subpayload data value offset count)
  (write-subu8vector! data 48 value offset count))

;; connect
(definition public (read-udp-connect-local-host data) (read-host   data 16)) (definition public (write-udp-connect-local-host data value) (write-host   data 16 value))
(definition public (read-udp-connect-local-port data) (read-32-bit data 20)) (definition public (write-udp-connect-local-port data value) (write-32-bit data 20 value))
(definition public (read-udp-connect-latency    data) (scan-float  data 24)) (definition public (write-udp-connect-latency    data value) (put-float    data 24 value))
(definition public (read-udp-connect-lag        data) (scan-float  data 28)) (definition public (write-udp-connect-lag        data value) (put-float    data 28 value))
(definition public (read-udp-connect-drop       data) (scan-float  data 32)) (definition public (write-udp-connect-drop       data value) (put-float    data 32 value))

;; ack
(definition public (read-udp-ack-channel-states data) (read-u8vector data 16)) (definition public (write-udp-ack-channel-states data value) (write-u8vector data 16 value))

;; nack
(definition public (read-udp-nack-media-kind     data) (read-32-bit   data 16)) (definition public (write-udp-nack-media-kind     data value) (write-32-bit   data 16 value))
(definition public (read-udp-nack-latest-missing data) (read-u8vector data 20)) (definition public (write-udp-nack-latest-missing data value) (write-u8vector data 20 value)))
