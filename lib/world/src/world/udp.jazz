;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World UDP
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;    Barbara Samson


(module world.udp jazz


(definition protected udp-connect
  0)

(definition protected udp-nack
  1)

(definition protected udp-audio
  2)

(definition protected udp-video
  3)


(definition udp-names
  #(connect nack audio video))

(definition protected (udp-name kind)
  (vector-ref udp-names kind))


;;;
;;;; Access
;;;


(definition public (read-32-bit data pos)
  (let ((b1 (u8vector-ref data pos))
        (b2 (u8vector-ref data (+ pos 1)))
        (b3 (u8vector-ref data (+ pos 2)))
        (b4 (u8vector-ref data (+ pos 3))))
    (bytes->32-bit-integer b1 b2 b3 b4)))


(definition public (read-64-bit data pos)
  (let ((b1 (u8vector-ref data pos))
        (b2 (u8vector-ref data (+ pos 1)))
        (b3 (u8vector-ref data (+ pos 2)))
        (b4 (u8vector-ref data (+ pos 3)))
        (b5 (u8vector-ref data (+ pos 4)))
        (b6 (u8vector-ref data (+ pos 5)))
        (b7 (u8vector-ref data (+ pos 6)))
        (b8 (u8vector-ref data (+ pos 7))))
    (bytes->64-bit-integer b1 b2 b3 b4 b5 b6 b7 b8)))


(definition public (read-u8vector data pos)
  (let ((len (read-32-bit data pos)))
    (let ((v (make-u8vector len))
          (pos (+ pos 4)))
      (subu8vector-move! data pos (+ pos len) v 0)
      v)))


(definition public (write-32-bit data pos value)
  (32-bit-integer->bytes value
    (lambda (b1 b2 b3 b4)
      (u8vector-set! data pos b1)
      (u8vector-set! data (+ pos 1) b2)
      (u8vector-set! data (+ pos 2) b3)
      (u8vector-set! data (+ pos 3) b4))))


(definition public (write-64-bit data pos value)
  (64-bit-integer->bytes value
    (lambda (b1 b2 b3 b4 b5 b6 b7 b8)
      (u8vector-set! data pos b1)
      (u8vector-set! data (+ pos 1) b2)
      (u8vector-set! data (+ pos 2) b3)
      (u8vector-set! data (+ pos 3) b4)
      (u8vector-set! data (+ pos 4) b5)
      (u8vector-set! data (+ pos 5) b6)
      (u8vector-set! data (+ pos 6) b7)
      (u8vector-set! data (+ pos 7) b8))))


(definition public (write-u8vector data pos value)
  (let ((len (u8vector-length value)))
    (write-32-bit data pos len)
    (let ((pos (+ pos 4)))
      (subu8vector-move! value 0 len data pos))))


(definition public (write-subu8vector! data pos value offset count)
  (write-32-bit data pos count)
  (let ((pos (+ pos 4)))
    (subu8vector-move! value offset (+ offset count) data pos)))


;;;
;;;; Format
;;;


;; udp
(definition public (read-udp-kind      data) (read-32-bit   data  0)) (definition public (write-udp-kind      data value) (write-32-bit   data  0 value))
(definition public (read-udp-origin    data) (read-32-bit   data  4)) (definition public (write-udp-origin    data value) (write-32-bit   data  4 value))
(definition public (read-udp-sequence  data) (read-32-bit   data  8)) (definition public (write-udp-sequence  data value) (write-32-bit   data  8 value))
(definition public (read-udp-frame     data) (read-32-bit   data 12)) (definition public (write-udp-frame     data value) (write-32-bit   data 12 value))
(definition public (read-udp-part      data) (read-32-bit   data 16)) (definition public (write-udp-part      data value) (write-32-bit   data 16 value))
(definition public (read-udp-total     data) (read-32-bit   data 20)) (definition public (write-udp-total     data value) (write-32-bit   data 20 value))
(definition public (read-udp-timestamp data) (read-64-bit   data 24)) (definition public (write-udp-timestamp data value) (write-64-bit   data 24 value))
(definition public (read-udp-duration  data) (read-64-bit   data 32)) (definition public (write-udp-duration  data value) (write-64-bit   data 32 value))
(definition public (read-udp-payload   data) (read-u8vector data 40)) (definition public (write-udp-payload   data value) (write-u8vector data 40 value))

(definition public (write-udp-subpayload data value offset count)
  (write-subu8vector! data 40 value offset count))

;; nack
(definition public (read-udp-nack-kind data) (read-32-bit   data 12)) (definition public (write-udp-nack-kind data value) (write-32-bit   data 12 value)))
