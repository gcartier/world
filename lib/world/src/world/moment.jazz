;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; Moments
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.moment jazz


(import (jazz.moment)
        (jazz.snapshot)
        (world.event))


;;;
;;;; Moment
;;;


(definition level-none           0)
(definition level-fatal-error    1)
(definition level-fatal-critical 2)
(definition level-fatal-warning  3)
(definition level-error          4)
(definition level-warning        5)
(definition level-debug          6)
(definition level-log            7)


(definition public (moment-error message . rest)
  (apply make/record-moment level-error message rest))

(definition public (moment-warning message . rest)
  (apply make/record-moment level-warning message rest))

(definition public (moment-debug message . rest)
  (apply make/record-moment level-debug message rest))

(definition public (moment-log message . rest)
  (apply make/record-moment level-log message rest))


(definition public (make/record-moment level message (category: category #f) (function: function #f) (stack: stack #f))
  (let ((moment (new Moment 'jazz (- (current-seconds) kernel-boot) level category function message stack)))
    (record-moment moment)
    moment))


;;;
;;;; Moments
;;;


(definition protected max-moments
  100)

(definition protected moments-queue
  (new-queue))

(definition protected moments-mutex
  (make-mutex 'moments))


(definition public (record-moment moment)
  (mutex-lock! moments-mutex)
  (enqueue moments-queue moment)
  (when (> (queue-length moments-queue) max-moments)
    (dequeue moments-queue))
  ;; let record-event use current-seconds as overriding
  ;; event time can sometimes lead to out-of-order times
  (when record-events?
    (record-event udp-id-moment
                  -1.
                  -1.
                  -1.
                  (fixnum->flonum (get-level moment))
                  -1.
                  -1.
                  (fixnum->flonum (get-id moment))))
  (mutex-unlock! moments-mutex))


(definition public (copy-moments)
  (mutex-lock! moments-mutex)
  (prog1 (copy (queue-list moments-queue))
    (mutex-unlock! moments-mutex)))


(definition public (retrieve-moments)
  (mutex-lock! moments-mutex)
  (prog1 (queue-list moments-queue)
    (reset-queue moments-queue)
    (mutex-unlock! moments-mutex)))


;;;
;;;; Snapshot
;;;


(definition (retrieve-moments-for-snapshot proc)
  (mutex-lock! moments-mutex)
  (for-each proc (queue-list moments-queue))
  (reset-queue moments-queue)
  (mutex-unlock! moments-mutex))


(register-snapshot-retrieve-moments retrieve-moments-for-snapshot))
