;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; World External
;;;


(module world.external jazz


(import (jazz.geometry)
        (jazz.graphic)
        (jazz.graphic.opengl.glew)
        (jazz.io)
        (jazz.library)
        (zlib)
        (world)
        (world.animation)
        (world.atlas)
        (world.binary)
        (world.dye)
        (world.foreign)
        (world.geometry)
        (world.homogeneous)
        (world.material)
        (world.model)
        (world.texture))


(proclaim (warn optimizations))


;;;
;;;; Binary-Stream
;;;


(class Binary-Stream extends Object
  
  
  (slot content  <u8vector> getter generate)
  (slot position <fx>       getter generate)
  
  
  (method override (initialize file/content (compressed?: compressed? #t))
    ;; quick try
    (if (pair? file/content)
        (begin
          (set! content (car file/content))
          (set! position (cdr file/content)))
      (let ((u8vec (load-file-content file/content)))
        (set! content (if compressed? (gunzip-u8vector u8vec) u8vec)))
      (set! position 0)))
  
  
  (method public (<-s8)
    (prog1 (scan-s8 content position)
      (increase! position 1)))
  
  
  (method public (<-u8)
    (prog1 (scan-u8 content position)
      (increase! position 1)))
  
  
  (method public (<-s16)
    (prog1 (scan-s16 content position)
      (increase! position 2)))
  
  
  (method public (<-s16-big-endian)
    (prog1 (scan-s16-big-endian content position)
      (increase! position 2)))
  
  
  (method public (<-u16)
    (prog1 (scan-u16 content position)
      (increase! position 2)))
  
  
  (method public (<-s32)
    (prog1 (scan-s32 content position)
      (increase! position 4)))
  
  
  (method public (<-s32-big-endian)
    (prog1 (scan-s32-big-endian content position)
      (increase! position 4)))
  
  
  (method public (<-s64)
    (prog1 (scan-s64 content position)
      (increase! position 8)))
  
  
  (method public (<-s64-big-endian)
    (prog1 (scan-s64-big-endian content position)
      (increase! position 8)))
  
  
  (method public (<-float)
    (prog1 (scan-float content position)
      (increase! position float-size)))
  
  
  (method public (<-floats! vec <f64vector>)
    (let ((len (f64vector-length vec)))
      (scan-floats64! content position vec len)
      (increase! position (* len float-size))
      vec))
  
  
  (method public (<-float-big-endian)
    (prog1 (scan-float-big-endian content position)
      (increase! position float-size)))
  
  
  (method public (<-double)
    (prog1 (scan-double content position)
      (increase! position double-size)))
  
  
  (method public (<-double-big-endian)
    (prog1 (scan-double-big-endian content position)
      (increase! position double-size)))
  
  
  (method public (<-string size <fx>)
    (prog1 (scan-string content position size)
      (increase! position size)))
  
  
  (method public (<-utf-8-string size <fx>)
    (prog1 (let ((end (+ position size)))
             (if (>= end (u8vector-length content))
                 (scan-utf-8-string content position)
               ;; quick hack a terminating 0
               (let ((byte (u8vector-ref content end)))
                 (u8vector-set! content end 0)
                 (prog1 (scan-utf-8-string content position)
                   (u8vector-set! content end byte)))))
      (increase! position size))))


;;;
;;;; Utility
;;;


(definition public (load-file-content file)
  (call-with-input-file (path-settings file)
    (lambda (port)
      (let ((fileSize <fx> (input-port-byte-position port 0 2)))
        (input-port-byte-position port 0)
        (let ((content (make-u8vector fileSize)))
          (read-subu8vector content 0 fileSize port)
          content))))))
