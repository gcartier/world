;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; MilkShape 3D
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2013
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


;; This is a port of Mete Ciragan's msViewer
;;
;; email:          mciragan@gmx.net
;; web:            http://www.milkshape3d.com


(module world.external.milkshape jazz


(import (jazz.geometry)
        (jazz.graphic)
        (jazz.graphic.opengl.glew)
        (jazz.io)
        (jazz.library)
        (world)
        (world.animation)
        (world.atlas)
        (world.binary)
        (world.dye)
        (world.external)
        (world.foreign)
        (world.geometry)
        (world.homogeneous)
        (world.material)
        (world.model)
        (world.texture)
        (world.triangle))


(proclaim (warn optimizations))


;;;
;;;; Vertex
;;;


(class MS3D-Vertex extends Object
  
  
  (slot flags   <fx>                                 accessors generate)
  (slot vertex  <f64vector> initialize (make-vertex) accessors generate)
  (slot bone-id <fx>                                 accessors generate)
  
  
  (method override (initialize flags vertex bone-id)
    (set! flags~self flags)
    (set! vertex~self vertex)
    (set! bone-id~self bone-id)))


;;;
;;;; Triangle
;;;


(class MS3D-Triangle extends Object
  
  
  (slot flags           <fx+>       accessors generate)
  (slot vertex-indices  <object>    accessors generate)
  (slot vertex-normals  <object>    accessors generate)
  (slot s               <f64vector> accessors generate)
  (slot t               <f64vector> accessors generate)
  (slot d               <f64vector> accessors generate)
  (slot smoothing-group <fx+>       accessors generate)
  (slot group-index     <fx+>       accessors generate)
  
  
  (method override (initialize flags vertex-indices vertex-normals s t d smoothing-group group-index)
    (set! flags~self flags)
    (set! vertex-indices~self vertex-indices)
    (set! vertex-normals~self vertex-normals)
    (set! s~self s)
    (set! t~self t)
    (set! d~self d)
    (set! smoothing-group~self smoothing-group)
    (set! group-index~self group-index)))


;;;
;;;; Group
;;;


(class MS3D-Group extends Object
  
  
  (slot flags          <fx+>     accessors generate)
  (slot name           <string+> accessors generate)
  (slot triangles      <object>  accessors generate)
  (slot material-index <fx+>     accessors generate)
  
  
  (method override (initialize flags name triangles material-index)
    (set! flags~self flags)
    (set! name~self name)
    (set! triangles~self triangles)
    (set! material-index~self material-index)))


;;;
;;;; Model
;;;


(class MS3D-Model extends Object
  
  
  (slot vertices      <object> accessors generate)
  (slot triangles     <object> accessors generate)
  (slot groups        <object> accessors generate)
  (slot materials     <object> accessors generate)
  (slot animation-fps <fl>     accessors generate)
  (slot current-time  <fl>     accessors generate)
  (slot total-frames  <fx>     accessors generate)
  (slot bones         <object> accessors generate)
  
  
  (method public (extract-texture file)
    (define (triangle-ref index)
      (vector-ref triangles index))
    
    (define (material-ref index)
      (vector-ref materials index))
    
    (let ((atlas (new Atlas mipmap?: #f pad?: #f))
          (textures (remove-duplicates (remove-empty (map get-texture~ (vector->list materials))) test: filename=?)))
      (for-each (lambda (texture)
                  (add-file~ atlas (new-brother~ file texture)))
                textures)
      (complete~ atlas)
      (loop (for group in-vector groups)
            (let ((material (material-ref (get-material-index~ group))))
              (let ((uv (image-rect~ atlas (extract-base (get-texture~ material)))))
                (let ((left (uv-left uv))
                      (top (uv-top uv))
                      (texture-depth (uv-depth uv)))
                  (let ((width (- (uv-right uv) left))
                        (height (- (uv-bottom uv) top)))
                    ;; adjust texture coordinates
                    (for-each (lambda (triangle-index)
                                (let ((triangle (triangle-ref triangle-index)))
                                  (let ((s (get-s~ triangle))
                                        (t (get-t~ triangle))
                                        (d (get-d~ triangle)))
                                    (vertex-x-set! s (+ left (* (vertex-x s) width)))
                                    (vertex-y-set! s (+ left (* (vertex-y s) width)))
                                    (vertex-z-set! s (+ left (* (vertex-z s) width)))
                                    (vertex-x-set! t (+ top (* (- 1. (vertex-x t)) height)))
                                    (vertex-y-set! t (+ top (* (- 1. (vertex-y t)) height)))
                                    (vertex-z-set! t (+ top (* (- 1. (vertex-z t)) height)))
                                    (vertex-x-set! d texture-depth)
                                    (vertex-y-set! d texture-depth)
                                    (vertex-z-set! d texture-depth))))
                              (get-triangles~ group)))))))
      (get-texture~ atlas)))
  
  
  @w
  (method public (extract-mesh)
    (generate-mesh
      (lambda (setup-proc triangle-proc quad-proc)
        (define (add-triangle triangle)
          (let ((indices (get-vertex-indices~ triangle))
                (normals (get-vertex-normals~ triangle))
                (s (get-s~ triangle))
                (t (get-t~ triangle))
                (d (get-d~ triangle)))
            (let ((v1 (vertex-ref (first indices)))
                  (v2 (vertex-ref (second indices)))
                  (v3 (vertex-ref (third indices))))
              (triangle-proc (get-vertex~ v1) (get-vertex~ v2) (get-vertex~ v3)
                (get-vertex~ v1) (first  normals) (vertex (vertex-x s) (vertex-x t) (vertex-x d)) (get-bone-id~ v1)
                (get-vertex~ v2) (second normals) (vertex (vertex-y s) (vertex-y t) (vertex-y d)) (get-bone-id~ v2)
                (get-vertex~ v3) (third  normals) (vertex (vertex-z s) (vertex-z t) (vertex-z d)) (get-bone-id~ v3)))))
        
        (setup-proc (vector-length triangles) 0)
        (loop (for triangle in-vector triangles)
              (add triangle)))))
  
  
  (method public (extract-mesh)
    (let ((vertex-floats 10))
      (let ((triangle-floats (* 3 vertex-floats))
            (triangle-neighbors-floats (* 3 7))
            (triangles-count (vector-length triangles)))
        (let ((content (make-f32vector (* triangles-count triangle-floats)))
              (neighbors (make-f32vector (* triangles-count triangle-neighbors-floats)))
              (n 0)
              (m 0))
          (define (vertex-ref index)
            (vector-ref vertices index))
          
          (define (add-triangle triangle)
            (let ((indices (get-vertex-indices~ triangle))
                  (normals (get-vertex-normals~ triangle))
                  (s (get-s~ triangle))
                  (t (get-t~ triangle))
                  (d (get-d~ triangle)))
              (let ((v1 (vertex-ref (first indices)))
                    (v2 (vertex-ref (second indices)))
                    (v3 (vertex-ref (third indices))))
                (add
                  (get-vertex~ v1) (first  normals) (vertex (vertex-x s) (vertex-x t) (vertex-x d)) (get-bone-id~ v1)
                  (get-vertex~ v2) (second normals) (vertex (vertex-y s) (vertex-y t) (vertex-y d)) (get-bone-id~ v2)
                  (get-vertex~ v3) (third  normals) (vertex (vertex-z s) (vertex-z t) (vertex-z d)) (get-bone-id~ v3)))))
          
          (define (add v1 n1 t1 b1 v2 n2 t2 b2 v3 n3 t3 b3)
            (add-vertex v1) (add-normal n1) (add-texture t1) (add-bone b1) (add-neighbors 0. v2 v3)
            (add-vertex v2) (add-normal n2) (add-texture t2) (add-bone b2) (add-neighbors 1. v1 v3)
            (add-vertex v3) (add-normal n3) (add-texture t3) (add-bone b3) (add-neighbors 2. v1 v2))
          
          (define (add-vertex vert)
            (f32vector-set! content n (vertex-x vert))
            (f32vector-set! content (+ n 1) (vertex-y vert))
            (f32vector-set! content (+ n 2) (vertex-z vert))
            (set! n (+ n 3)))
          
          (define (add-normal normal)
            (f32vector-set! content n (vertex-x normal))
            (f32vector-set! content (+ n 1) (vertex-y normal))
            (f32vector-set! content (+ n 2) (vertex-z normal))
            (set! n (+ n 3)))
          
          (define (add-texture tex)
            (f32vector-set! content n (vertex-x tex))
            (f32vector-set! content (+ n 1) (vertex-y tex))
            (f32vector-set! content (+ n 2) (vertex-z tex))
            (set! n (+ n 3)))
          
          (define (add-bone bone-id)
            (f32vector-set! content n (cast <fl> bone-id))
            (set! n (+ n 1)))
          
          (define (add-neighbors rank n1 n2)
            (f32vector-set! neighbors m rank)
            (set! m (+ m 1))
            (f32vector-set! neighbors m (vertex-x n1))
            (f32vector-set! neighbors (+ m 1) (vertex-y n1))
            (f32vector-set! neighbors (+ m 2) (vertex-z n1))
            (set! m (+ m 3))
            (f32vector-set! neighbors m (vertex-x n2))
            (f32vector-set! neighbors (+ m 1) (vertex-y n2))
            (f32vector-set! neighbors (+ m 2) (vertex-z n2))
            (set! m (+ m 3)))
          
          (loop (for triangle in-vector triangles)
                (add-triangle triangle))
          (values content neighbors)))))
  
  
  (method public (extract-bounds)
    (define (vertex-ref index)
      (get-vertex~ (vector-ref vertices index)))
    
    (let ((bounds (let ((vert (vertex-ref 0)))
                    (let ((x (vertex-x vert))
                          (y (vertex-y vert))
                          (z (vertex-z vert)))
                      (cuboid x y z x y z)))))
      (for (n 1 (vector-length vertices))
           (let ((vertex (vertex-ref n)))
             (let ((x (vertex-x vertex))
                   (y (vertex-y vertex))
                   (z (vertex-z vertex)))
               (when (< x (cuboid-left bounds))
                 (cuboid-left-set! bounds x))
               (when (> x (cuboid-right bounds))
                 (cuboid-right-set! bounds x))
               (when (< y (cuboid-bottom bounds))
                 (cuboid-bottom-set! bounds y))
               (when (> y (cuboid-top bounds))
                 (cuboid-top-set! bounds y))
               (when (< z (cuboid-back bounds))
                 (cuboid-back-set! bounds z))
               (when (> z (cuboid-front bounds))
                 (cuboid-front-set! bounds z)))))
      bounds))
  
  
  (method public (extract-animation name)
    (let ((animation (new Animation name animation-fps total-frames bones)))
      (setup-bones~ animation)
      animation)))


;;;
;;;; Import
;;;


(definition public (load-ms3d file)
  (let ((name (get-base~ file)))
    (define (add-animations model)
      (let ((dir (get-parent~ file)))
        (iterate-directory~ dir
          (lambda (file)
            (when (extension=? (get-extension~ file) "ms3d")
              (let ((base (get-base~ file)))
                (unless (filename=? base name)
                  (assert (starts-with? base (concatenate name "_")))
                  (let ((name (subseq base (+ (cardinality name) 1) (cardinality base)))
                        (ms3d (load-model file)))
                    (add-animation~ model name (extract-animation~ ms3d name)))))))
          files?: #t
          directories?: #f)))
    
    (let ((model (new Model name: name orientation: PI/2)))
      (let ((mesh (get-mesh~ model)))
        (let ((ms3d (load-model file)))
          ;; order is important as extract-texture adjusts texture coordinates
          (let ((texture (extract-texture~ ms3d file)))
            (set-material~ mesh (new Material texture: texture))
            (receive (data neighbors) (extract-mesh~ ms3d)
              (allocate-vertices~ mesh)
              (set-data~ (get-vertices-buffer~ mesh) data 10)
              (allocate-neighbors~ mesh)
              (set-data~ (get-neighbors-buffer~ mesh) neighbors 6)))
          (set-bounds~ model (extract-bounds~ ms3d))
          (set-animation~ model (extract-animation~ ms3d #f))
          (add-animations model)))
      model)))


(definition (load-model file)
  (call-with-input-file (path-settings file)
    (lambda (port)
      (let ((MAX_TEXTURE_FILENAME_SIZE 128))
        (let ((content (load-file-content file))
              (pos 0))
          (define (<-s8)
            (prog1 (scan-s8 content pos)
              (increase! pos 1)))
          
          (define (<-u8)
            (prog1 (scan-u8 content pos)
              (increase! pos 1)))
          
          (define (<-s16)
            (prog1 (scan-s16 content pos)
              (increase! pos 2)))
          
          (define (<-u16)
            (prog1 (scan-u16 content pos)
              (increase! pos 2)))
          
          (define (<-s32)
            (prog1 (scan-s32 content pos)
              (increase! pos 4)))
          
          (define (<-float)
            (prog1 (scan-float content pos)
              (increase! pos float-size)))
          
          (define (<-floats32! vec)
            (let ((len (f32vector-length vec)))
              (scan-floats32! content pos vec len)
              (increase! pos (* len float-size))
              vec))
          
          (define (<-floats64! vec)
            (let ((len (f64vector-length vec)))
              (scan-floats64! content pos vec len)
              (increase! pos (* len float-size))
              vec))
          
          (define (<-string size)
            (prog1 (scan-string content pos size)
              (increase! pos size)))
          
          (define (<-vertex)
            (<-floats64! (make-vertex)))
          
          (define (<-normal)
            (<-vertex))
          
          (define (<-tex)
            (<-floats64! (make-vertex)))
          
          (define (<-color)
            (<-floats32! (make-dye)))
          
          (define (<-indices)
            (list
              (<-u16)
              (<-u16)
              (<-u16)))
          
          (define (<-normals)
            (list
              (<-normal)
              (<-normal)
              (<-normal)))
          
          ;; vertices
          (define (<-vertices)
            (let ((num-vertices (<-u16)))
              (let ((vertices (make-vector num-vertices)))
                (for (i 0 num-vertices)
                     (let ((flags (<-u8))
                           (vertex (<-vertex))
                           (bone-id (<-s8))
                           (reference-count (<-u8)))
                       (vector-set! vertices i (new MS3D-Vertex flags vertex bone-id))))
                vertices)))
          
          ;; triangles
          (define (<-triangles)
            (let ((num-triangles (<-u16)))
              (let ((triangles (make-vector num-triangles)))
                (for (i 0 num-triangles)
                     (let ((flags (<-u16))
                           (vertex-indices (<-indices))
                           (vertex-normals (<-normals))
                           (s (<-tex))
                           (t (<-tex))
                           (d (vertex 0. 0. 0.))
                           (smoothing-group (<-u8))
                           (group-index (<-u8)))
                       (define (standardize v)
                         ;; quick fix until a clean solution to values out of the [0. 1.] range
                         (cond ((< v 0.) 0.)
                               ((> v 1.) 1.)
                               (else v)))
                       
                       (vertex-x-set! s (standardize (vertex-x s)))
                       (vertex-y-set! s (standardize (vertex-y s)))
                       (vertex-z-set! s (standardize (vertex-z s)))
                       (vertex-x-set! t (standardize (vertex-x t)))
                       (vertex-y-set! t (standardize (vertex-y t)))
                       (vertex-z-set! t (standardize (vertex-z t)))
                       (let ((triangle
                               (new MS3D-Triangle
                                 flags
                                 vertex-indices
                                 vertex-normals
                                 s
                                 t
                                 d
                                 smoothing-group
                                 group-index)))
                         (vector-set! triangles i triangle))))
                triangles)))
          
          ;; groups
          (define (<-groups)
            (let ((num-groups (<-u16)))
              (let ((groups (make-vector num-groups)))
                (for (i 0 num-groups)
                     (let ((flags (<-u8))
                           (name (<-string 32))
                           (triangles
                             (let ((num-group-triangles (<-u16)))
                               (loop (for j from 0 below num-group-triangles)
                                     (collect (<-u16)))))
                           (material-index (<-s8)))
                       (let ((group
                               (new MS3D-Group
                                 flags
                                 name
                                 triangles
                                 material-index)))
                         (vector-set! groups i group))))
                groups)))
          
          ;; materials
          (define (<-materials)
            (let ((num-materials (<-u16)))
              (let ((materials (make-vector num-materials)))
                (for (i 0 num-materials)
                     (let ((name (<-string 32))
                           (ambient (<-color))
                           (diffuse (<-color))
                           (specular (<-color))
                           (emissive (<-color))
                           (shininess (<-float))
                           (transparency (<-float))
                           (mode (<-u8))
                           (texture (<-string MAX_TEXTURE_FILENAME_SIZE))
                           (alphamap (<-string MAX_TEXTURE_FILENAME_SIZE)))
                       ;; set alpha
                       (dye-alpha-set! ambient transparency)
                       (dye-alpha-set! diffuse transparency)
                       (dye-alpha-set! specular transparency)
                       (dye-alpha-set! emissive transparency)
                       (let ((material
                               (new Material
                                 name: name
                                 ambient: ambient
                                 diffuse: diffuse
                                 specular: specular
                                 emissive: emissive
                                 shininess: shininess
                                 transparency: transparency
                                 mode: mode
                                 texture: texture
                                 alphamap: alphamap)))
                         (vector-set! materials i material))))
                materials)))
          
          ;; bones
          (define (<-bones animation-fps)
            (let ((num-bones (<-u16)))
              (let ((bones (make-vector num-bones)))
                (for (i 0 num-bones)
                     (let ((flags (<-u8))
                           (name (<-string 32))
                           (parent-name (<-string 32))
                           (rot (<-vertex))
                           (pos (<-vertex))
                           (num-key-frames-rot (<-u16))
                           (num-key-frames-pos (<-u16)))
                       (let ((rotation-keys (make-vector num-key-frames-rot))
                             (position-keys (make-vector num-key-frames-pos)))
                         ;; the frame time is in seconds, so multiply it by the animation fps
                         ;; to get the frames rotation channel
                         (for (j 0 num-key-frames-rot)
                              (let ((time (<-float))
                                    (key (<-vertex)))
                                (let ((time (* time animation-fps)))
                                  (vector-set! rotation-keys j (new KeyFrame time key)))))
                         ;; translation channel
                         (for (j 0 num-key-frames-pos)
                              (let ((time (<-float))
                                    (key (<-vertex)))
                                (let ((time (* time animation-fps)))
                                  (vector-set! position-keys j (new KeyFrame time key)))))
                         (let ((bone (new Bone flags name parent-name rot pos rotation-keys position-keys)))
                           (vector-set! bones i bone)))))
                bones)))
          
          ;; header
          (assert (equal? (<-string 10) "MS3D000000"))
          (assert (= (<-s32) 4))
          
          ;; content
          (let ((model (new MS3D-Model))
                (vertices (<-vertices))
                (triangles (<-triangles))
                (groups (<-groups))
                (materials (<-materials)))
            ;; vertices
            (set-vertices~ model vertices)
            ;; triangles
            (set-triangles~ model triangles)
            ;; groups
            (set-groups~ model groups)
            ;; materials
            (set-materials~ model materials)
            ;; animation
            (let ((animation-fps (max 1. (<-float)))
                  (current-time (<-float))
                  (total-frames (<-s32)))
              (set-animation-fps~ model animation-fps)
              (set-current-time~ model current-time)
              (set-total-frames~ model total-frames))
            ;; bones
            (set-bones~ model (<-bones (get-animation-fps~ model)))
            ;; comments
            ;; vertex extra
            ;; bone extra
            ;; model extra
            model)))))))
