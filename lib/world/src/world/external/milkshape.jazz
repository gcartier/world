;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; MilkShape 3D
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


;; This is a port of Mete Ciragan's msViewer
;;
;; email:          mciragan@gmx.net
;; web:            http://www.milkshape3d.com


(module world.external.milkshape jazz


(import (jazz.geometry)
        (jazz.io)
        (gaea.dye)
        (gaea.geometry)
        (gaea.material)
        (gaea.uv)
        (world)
        (world.animation)
        (world.asset)
        (world.assets)
        (world.atlas)
        (world.binary)
        (world.context)
        (world.generate)
        (world.model)
        (world.renderers)
        (world.settings)
        (world.support)
        (world.texture))


(proclaim (not check bounds)
          (warn optimizations))


;;;
;;;; Vertex
;;;


(class MS3D-Vertex extends Object
  
  
  (slot flags           <fx>                              accessors generate)
  (slot vertex          <vertex> initialize (make-vertex) accessors generate)
  (slot bone-id         <fx>                              accessors generate)
  (slot reference-count <fx>                              accessors generate)
  
  
  (method override (initialize self flags vertex bone-id reference-count)
    (set! self.flags flags)
    (set! self.vertex vertex)
    (set! self.bone-id bone-id)
    (set! self.reference-count reference-count))
  
  
  (method override (print self output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{a} {a}" vertex bone-id)))))


;;;
;;;; Triangle
;;;


(class MS3D-Triangle extends Object
  
  
  (slot flags           <fx+>       accessors generate)
  (slot vertex-indices  <vector>    accessors generate)
  (slot vertex-normals  <vector>    accessors generate)
  (slot s               <f64vector> accessors generate)
  (slot t               <f64vector> accessors generate)
  (slot d               <f64vector> accessors generate)
  (slot smoothing-group <fx+>       accessors generate)
  (slot group-index     <fx+>       accessors generate)
  
  
  (method override (initialize self flags vertex-indices vertex-normals s t d smoothing-group group-index)
    (set! self.flags flags)
    (set! self.vertex-indices vertex-indices)
    (set! self.vertex-normals vertex-normals)
    (set! self.s s)
    (set! self.t t)
    (set! self.d d)
    (set! self.smoothing-group smoothing-group)
    (set! self.group-index group-index))
  
  
  (method override (print self output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{a}" vertex-indices)))))


;;;
;;;; Group
;;;


(class MS3D-Group extends Object
  
  
  (slot flags          <fx+>     accessors generate)
  (slot name           <string+> accessors generate)
  (slot triangles      <vector>  accessors generate)
  (slot material-index <fx>      accessors generate)
  
  
  (method override (initialize self flags name triangles material-index)
    (set! self.flags flags)
    (set! self.name name)
    (set! self.triangles triangles)
    (set! self.material-index material-index))
  
  
  (method override (print self output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{a}" name)))))


;;;
;;;; Model
;;;


(class MS3D-Model extends Object
  
  
  (slot vertices      <vector> accessors generate)
  (slot triangles     <vector> accessors generate)
  (slot groups        <vector> accessors generate)
  (slot materials     <vector> accessors generate)
  (slot animation-fps <fl>     accessors generate)
  (slot current-frame <fl>     accessors generate)
  (slot total-frames  <fx>     accessors generate)
  (slot bones         <object> accessors generate)
  (slot subversion    <object> accessors generate)
  
  
  (method package (retrieve-textures self asset <Asset>)
    (let ((textures (remove-duplicates (remove-empty (map get-texture-name (vector->list materials))) test: filename=?)))
      (for-each (lambda (texture)
                  ;; quick hack
                  (if (starts-with? texture "C:")
                      (retrieve-file (brother-asset asset (add-extension (filename-base texture) "png")))
                    (retrieve-file (brother-asset asset texture))))
                textures)))
  
  
  (method package (extract-atlas self asset <Asset>)
    (define (triangle-ref index <fx>) <MS3D-Triangle>
      (vector-ref triangles index))
    
    (define (material-ref index <fx>) <Material>
      (vector-ref materials index))
    
    (let ((textures (remove-duplicates (remove-empty (map get-texture-name (vector->list materials))) test: filename=?)))
      (if (null? textures)
          (values #f #f)
        (let ((atlas (new Atlas repeat?: #t pad?: #f)))
          (for-each (lambda (texture)
                      ;; quick hack
                      (if (starts-with? texture "C:")
                          (add-file atlas (retrieve-file (brother-asset asset (add-extension (filename-base texture) "png"))))
                        (add-file atlas (retrieve-file (brother-asset asset texture)))))
                    textures)
          (let ((texture (extract-texture atlas mipmap?: #f)))
            (complete atlas)
            (loop (for group <MS3D-Group> in-vector groups)
                  (let ((material (material-ref (get-material-index group))))
                    (let ((name (get-texture-name material)))
                      (let ((flipped? (extension=? (filename-extension name) "tga"))
                            (uv (image-rect atlas (filename-base name))))
                        (let ((left (uv-left uv))
                              (top (uv-top uv))
                              (texture-depth (uv-depth uv)))
                          (let ((width (- (uv-right uv) left))
                                (height (- (uv-bottom uv) top)))
                            ;; adjust texture coordinates
                            (loop (for triangle-index <fx> in-vector (get-triangles group))
                                  (let ((triangle (triangle-ref triangle-index)))
                                    (let ((s (get-s triangle))
                                          (t (get-t triangle))
                                          (d (get-d triangle)))
                                      (vertex-x-set! s (+ left (* (vertex-x s) width)))
                                      (vertex-y-set! s (+ left (* (vertex-y s) width)))
                                      (vertex-z-set! s (+ left (* (vertex-z s) width)))
                                      (cond (flipped?
                                             (vertex-x-set! t (+ top (* (- 1. (vertex-x t)) height)))
                                             (vertex-y-set! t (+ top (* (- 1. (vertex-y t)) height)))
                                             (vertex-z-set! t (+ top (* (- 1. (vertex-z t)) height))))
                                            (else
                                             (vertex-x-set! t (+ top (* (vertex-x t) height)))
                                             (vertex-y-set! t (+ top (* (vertex-y t) height)))
                                             (vertex-z-set! t (+ top (* (vertex-z t) height)))))
                                      (vertex-x-set! d texture-depth)
                                      (vertex-y-set! d texture-depth)
                                      (vertex-z-set! d texture-depth))))))))))
            (values atlas texture))))))
  
  
  (method package (extract-geometry self groups material)
    (define (count-triangles) <fx>
      (let ((count 0))
        (loop (for group <MS3D-Group> in groups)
              (increase! count (vector-length (get-triangles group))))
        count))
    
    (let ((mesher (new Mesher (count-triangles) 0 material: material)))
      (define (vertex-ref index <fx>) <MS3D-Vertex>
        (vector-ref vertices index))
      
      (define (add-ms3d-triangle triangle <MS3D-Triangle>)
        (let ((indices (get-vertex-indices triangle))
              (normals (get-vertex-normals triangle))
              (s (get-s triangle))
              (t (get-t triangle))
              (d (get-d triangle)))
          (let ((v1 (vertex-ref (cast <fx> (vector-ref indices 0))))
                (v2 (vertex-ref (cast <fx> (vector-ref indices 1))))
                (v3 (vertex-ref (cast <fx> (vector-ref indices 2))))
                (uv (f32vector (vertex-x s) (vertex-x t) (vertex-y s) (vertex-y t) (vertex-z s) (vertex-z t)))
                (tdepth (vertex-x d)))
            (add-triangle mesher
              (get-vertex v1) (vector-ref normals 0) 0 1 (get-bone-id v1)
              (get-vertex v2) (vector-ref normals 1) 2 3 (get-bone-id v2)
              (get-vertex v3) (vector-ref normals 2) 4 5 (get-bone-id v3)
              uv
              tdepth))))
      
      (loop (for group <MS3D-Group> in groups)
            (loop (for triangle-index <fx> in-vector (get-triangles group))
                  (add-ms3d-triangle (cast <MS3D-Triangle> (vector-ref triangles triangle-index)))))
      (get-mesh mesher)))
  
  
  (method package (extract-bounds self)
    (define (vertex-ref index <fx>)
      (get-vertex (cast <MS3D-Vertex> (vector-ref vertices index))))
    
    (let ((bounds (let ((vert (vertex-ref 0)))
                    (let ((x (vertex-x vert))
                          (y (vertex-y vert))
                          (z (vertex-z vert)))
                      (cuboid x y z x y z)))))
      (loop (for n from 1 below (vector-length vertices))
            (let ((vertex (vertex-ref n)))
              (let ((x (vertex-x vertex))
                    (y (vertex-y vertex))
                    (z (vertex-z vertex)))
                (when (< x (cuboid-left bounds))
                  (cuboid-left-set! bounds x))
                (when (> x (cuboid-right bounds))
                  (cuboid-right-set! bounds x))
                (when (< y (cuboid-bottom bounds))
                  (cuboid-bottom-set! bounds y))
                (when (> y (cuboid-top bounds))
                  (cuboid-top-set! bounds y))
                (when (< z (cuboid-back bounds))
                  (cuboid-back-set! bounds z))
                (when (> z (cuboid-front bounds))
                  (cuboid-front-set! bounds z)))))
      ;; a try to standardize bounds bottom at 0
      ;; this may not be 100% correct as vertices are not
      ;; standardized but it seems to give very good results
      (let ((bottom (cuboid-bottom bounds)))
        (cuboid-bottom-set! bounds 0.)
        (cuboid-top-set! bounds (- (cuboid-top bounds) bottom)))
      bounds))
  
  
  (method package (extract-animation self name frames include-animations? (valid-bones #f))
    ;; necessary as animations come from distinct files
    (if (and valid-bones (/= (vector-length bones) valid-bones))
        (error "Inconsistant bones in model: {a}" name)
      (let ((animation (new Animation name animation-fps (or frames total-frames) bones)))
        (when include-animations?
          (setup-bones animation))
        animation))))


;;;
;;;; Import
;;;


(definition public (import-ms3d asset <Asset> (metadata: metadata #f) (class: class #f) (include-animations?: include-animations? (window?))) <Model>
  (let ((name (get-base asset))
        (render (model-metadata-render metadata))
        (mask (model-metadata-mask metadata))
        (frames (model-metadata-frames metadata)))
    (define (add-animations model <Model> valid-bones)
      (let ((dirpath (string-append (join (get-parent asset) "/") "/")))
        (iterate-assets (current-world)
          (lambda (assets)
            (iterate-entries assets
              (lambda (path)
                (when (starts-with? path dirpath)
                  (when (extension=? (filename-extension path) "ms3d")
                    (let ((name (filename-base path)))
                      (unless (filename=? name "_Idle")
                        (let ((animation-asset (new Asset assets path)))
                          (add-animation model name
                            (lambda ()
                              (let ((ms3d (read-ms3d (retrieve-file animation-asset) include-animations?: include-animations?)))
                                (extract-animation ms3d name frames include-animations? valid-bones)))))))))))))))
    
    (let ((model <Model> (new (or class Model) name: name rotation: (vertex 0. PI/2 0.))))
      (install-metadata model metadata)
      (let ((ms3d (read-ms3d (retrieve-file asset) include-animations?: include-animations?)))
        (when debug-ms3d?
          (set-native model ms3d))
        (if (not include-animations?)
            (begin
              (set-anchor model 'origin)
              (set-bounds model (extract-bounds ms3d))
              (set-animation model (extract-animation ms3d "Idle" frames include-animations?))
              (add-animations model (vector-length (get-bones ms3d))))
          ;; order is important as extract-atlas adjusts texture coordinates
          (bind-values (atlas texture) (extract-atlas ms3d asset)
            (let ((effective-render (or render (if texture '(transparent) '(white)))))
              (define (extract-mesh groups renderer)
                (let ((material (new Material atlas: atlas texture: texture renderer: renderer)))
                  (extract-geometry ms3d groups material)))
              
              (define (iterate-groups proc)
                (let ((renderer (require-renderer (car effective-render)))
                      (renderscan (cdr effective-render))
                      (mask (if (not mask) #t (car mask)))
                      (maskscan (and mask (cdr mask))))
                  (loop (for group in-vector (get-groups ms3d))
                        (begin
                          (proc group renderer mask)
                          (unless (null? renderscan)
                            (set! renderer (require-renderer (car renderscan)))
                            (set! renderscan (cdr renderscan)))
                          (unless (or (not maskscan) (null? maskscan))
                            (set! mask (car maskscan))
                            (set! maskscan (cdr maskscan)))))))
              
              (if (not include-animations?)
                  (set-meshes model #f)
                (let ((render-groups (make-table test: eq?)))
                  (iterate-groups
                    (lambda (group renderer mask)
                      (when mask
                        (table-add render-groups renderer group))))
                  (let ((queue (new-queue)))
                    (iterate-table render-groups
                      (lambda (renderer groups)
                        (enqueue queue (extract-mesh groups renderer))))
                    (set-meshes model (list->vector (queue-list queue)))))))
            (let ((bones-count (vector-length (get-bones ms3d))))
              (set-anchor model 'origin)
              (set-bounds model (extract-bounds ms3d))
              (set-instance-rendering? model (= bones-count 0))
              (set-rendering-texture model texture)
              (set-animation model (extract-animation ms3d "Idle" frames include-animations?))
              (add-animations model bones-count)))))
      model)))


(definition package (read-ms3d file <File> (include-animations?: include-animations? (window?))) <MS3D-Model>
  (call-with-input-file (path-settings file)
    (lambda (port)
      (let ((MAX_TEXTURE_FILENAME_SIZE 128))
        (with ((reader (new Binary-Reader file)))
          (define (<-vertex reader) <f64vector>
            (<-floats64! reader (make-vertex)))
          
          (define (<-normal reader) <f64vector>
            (<-vertex reader))
          
          (define (<-tex reader) <f64vector>
            (<-floats64! reader (make-vertex)))
          
          (define (<-color reader) <f32vector>
            (<-floats32! reader (make-dye)))
          
          (define (<-indices reader) <vector>
            (vector
              (<-u16 reader)
              (<-u16 reader)
              (<-u16 reader)))
          
          (define (<-normals reader) <vector>
            (vector
              (<-normal reader)
              (<-normal reader)
              (<-normal reader)))
          
          ;; vertices
          (define (<-vertices reader) <vector>
            (let ((num-vertices (<-u16 reader)))
              (let ((vertices (make-vector num-vertices)))
                (loop (for i from 0 below num-vertices)
                      (let ((flags (<-u8 reader))
                            (vertex (<-vertex reader))
                            (bone-id (<-u8 reader))
                            (reference-count (<-u8 reader)))
                        (vector-set! vertices i (new MS3D-Vertex flags vertex bone-id reference-count))))
                vertices)))
          
          ;; triangles
          (define (<-triangles reader) <vector>
            (let ((num-triangles (<-u16 reader)))
              (let ((triangles (make-vector num-triangles)))
                (loop (for i from 0 below num-triangles)
                      (let ((flags (<-u16 reader))
                            (vertex-indices (<-indices reader))
                            (vertex-normals (<-normals reader))
                            (s (<-tex reader))
                            (t (<-tex reader))
                            (d (vertex 0. 0. 0.))
                            (smoothing-group (<-u8 reader))
                            (group-index (<-u8 reader)))
                        (let ((triangle
                                (new MS3D-Triangle
                                  flags
                                  vertex-indices
                                  vertex-normals
                                  s
                                  t
                                  d
                                  smoothing-group
                                  group-index)))
                          (vector-set! triangles i triangle))))
                triangles)))
          
          ;; groups
          (define (<-groups reader) <vector>
            (let ((num-groups (<-u16 reader)))
              (let ((groups (make-vector num-groups)))
                (loop (for i from 0 below num-groups)
                      (let ((flags (<-u8 reader))
                            (name (<-c-string reader 32))
                            (triangles
                              (let ((num-group-triangles (<-u16 reader)))
                                (let ((group-triangles (make-vector num-group-triangles)))
                                  (loop (for j from 0 below num-group-triangles)
                                        (vector-set! group-triangles j (<-u16 reader)))
                                  group-triangles)))
                            (material-index (<-u8 reader)))
                        (let ((group
                                (new MS3D-Group
                                  flags
                                  name
                                  triangles
                                  material-index)))
                          (vector-set! groups i group))))
                groups)))
          
          ;; materials
          (define (<-materials reader) <vector>
            (let ((num-materials (<-u16 reader)))
              (let ((materials (make-vector num-materials)))
                (loop (for i from 0 below num-materials)
                      (let ((name (<-c-string reader 32))
                            (ambient (<-color reader))
                            (diffuse (<-color reader))
                            (specular (<-color reader))
                            (emissive (<-color reader))
                            (shininess (<-float reader))
                            (transparency (<-float reader))
                            (mode (<-u8 reader))
                            (texture (<-c-string reader MAX_TEXTURE_FILENAME_SIZE))
                            (alphamap (<-c-string reader MAX_TEXTURE_FILENAME_SIZE)))
                        ;; set alpha
                        (dye-alpha-set! ambient transparency)
                        (dye-alpha-set! diffuse transparency)
                        (dye-alpha-set! specular transparency)
                        (dye-alpha-set! emissive transparency)
                        (let ((material
                                (new Material
                                  name: name
                                  ambient: ambient
                                  diffuse: diffuse
                                  specular: specular
                                  emissive: emissive
                                  shininess: shininess
                                  transparency: transparency
                                  mode: mode
                                  texture-name: texture
                                  alphamap: alphamap)))
                          (vector-set! materials i material))))
                materials)))
          
          ;; bones
          (define (<-bones reader animation-fps <fl>) <vector>
            (let ((num-bones (<-u16 reader)))
              (if (> num-bones max-bones)
                  (signal (new Model-Import-Error message: (format "Max {a} bones reached: {a}" max-bones num-bones)))
                (let ((bones (make-vector num-bones)))
                  (loop (for i from 0 below num-bones)
                        (let ((flags (<-u8 reader))
                              (name (<-c-string reader 32))
                              (parent-name (<-c-string reader 32))
                              (rot (euler->quaternion (<-vertex reader)))
                              (pos (<-vertex reader))
                              (len .1)
                              (num-key-frames-rot (<-u16 reader))
                              (num-key-frames-pos (<-u16 reader)))
                          (let ((rotation-keys (make-vector num-key-frames-rot))
                                (position-keys (make-vector num-key-frames-pos)))
                            ;; the frame time is in seconds, so multiply it by the animation fps
                            ;; to get the frames rotation channel
                            (loop (for j from 0 below num-key-frames-rot)
                                  (let ((time (<-float reader))
                                        (key (euler->quaternion (<-vertex reader))))
                                    (let ((time (* time animation-fps)))
                                      (vector-set! rotation-keys j (new KeyFrame time key)))))
                            ;; translation channel
                            (loop (for j from 0 below num-key-frames-pos)
                                  (let ((time (<-float reader))
                                        (key (<-vertex reader)))
                                    (let ((time (* time animation-fps)))
                                      (vector-set! position-keys j (new KeyFrame time key)))))
                            (when include-animations?
                              (let ((bone (new Bone flags name i parent-name rot pos len rotation-keys position-keys)))
                                (vector-set! bones i bone))))))
                  ;; quick optimization as server doesn't need animations
                  (if include-animations?
                      bones
                    (vector))))))
          
          ;; header
          (assert (equal? (<-size-string reader 10) "MS3D000000"))
          (assert (= (<-s32 reader) 4))
          ;; content
          (let ((ms3d (new MS3D-Model))
                (vertices (<-vertices reader))
                (triangles (<-triangles reader))
                (groups (<-groups reader))
                (materials (<-materials reader)))
            ;; vertices
            (set-vertices ms3d vertices)
            ;; triangles
            (set-triangles ms3d triangles)
            ;; groups
            (set-groups ms3d groups)
            ;; materials
            (set-materials ms3d materials)
            ;; animation
            (let ((animation-fps (max 1. (<-float reader)))
                  (current-frame (<-float reader))
                  (total-frames (<-s32 reader)))
              (set-animation-fps ms3d animation-fps)
              (set-current-frame ms3d current-frame)
              (set-total-frames ms3d total-frames))
            ;; bones
            (set-bones ms3d (<-bones reader (get-animation-fps ms3d)))
            ;; subversion
            (set-subversion ms3d (and (more? reader 4) (<-s32 reader)))
            ;; comments
            ;; vertex extra
            ;; bone extra
            ;; model extra
            ms3d))))))


;;;
;;;; Export
;;;


(definition package (export-ms3d ms3d <MS3D-Model> file)
  (call-with-output-file (path-settings file)
    (lambda (port)
      (let ((MAX_TEXTURE_FILENAME_SIZE 128))
        (with ((writer (new Binary-Writer file maximum: MAX_TEXTURE_FILENAME_SIZE)))
          (define (->vertex writer vert)
            (->floats64 writer vert))
          
          (define (->normal writer vert)
            (->vertex writer vert))
          
          (define (->tex writer uv)
            (->floats64 writer uv))
          
          (define (->color writer dye)
            (->floats32 writer dye))
          
          (define (->indices writer indices)
            (->u16 writer (vector-ref indices 0))
            (->u16 writer (vector-ref indices 1))
            (->u16 writer (vector-ref indices 2)))
          
          (define (->normals writer normals)
            (->normal writer (vector-ref normals 0))
            (->normal writer (vector-ref normals 1))
            (->normal writer (vector-ref normals 2)))
          
          ;; vertices
          (define (->vertices writer)
            (let ((vertices (get-vertices ms3d)))
              (let ((num-vertices (vector-length vertices)))
                (->u16 writer num-vertices)
                (loop (for i from 0 below num-vertices)
                      (let ((vert (vector-ref vertices i)))
                        (->u8 writer (get-flags vert))
                        (->vertex writer (get-vertex vert))
                        (->u8 writer (get-bone-id vert))
                        (->u8 writer (get-reference-count vert)))))))
          
          ;; triangles
          (define (->triangles writer)
            (let ((triangles (get-triangles ms3d)))
              (let ((num-triangles (vector-length triangles)))
                (->u16 writer num-triangles)
                (loop (for i from 0 below num-triangles)
                      (let ((triangle (vector-ref triangles i)))
                        (->u16 writer (get-flags triangle))
                        (->indices writer (get-vertex-indices triangle))
                        (->normals writer (get-vertex-normals triangle))
                        (->tex writer (get-s triangle))
                        (->tex writer (get-t triangle))
                        (->u8 writer (get-smoothing-group triangle))
                        (->u8 writer (get-group-index triangle)))))))
          
          ;; groups
          (define (->groups writer)
            (let ((groups (get-groups ms3d)))
              (let ((num-groups (vector-length groups)))
                (->u16 writer num-groups)
                (loop (for i from 0 below num-groups)
                      (let ((group (vector-ref groups i)))
                        (->u8 writer (get-flags group))
                        (->c-string writer (get-name group) 32)
                        (let ((triangles (get-triangles group)))
                          (let ((num-triangles (vector-length triangles)))
                            (->u16 writer num-triangles)
                            (loop (for j from 0 below num-triangles)
                                  (->u16 writer (vector-ref triangles j)))))
                        (->u8 writer (get-material-index group)))))))
          
          ;; materials
          (define (->materials writer)
            (let ((materials (get-materials ms3d)))
              (let ((num-materials (vector-length materials)))
                (->u16 writer num-materials)
                (loop (for i from 0 below num-materials)
                      (let ((material (vector-ref materials i)))
                        (->c-string writer (get-name material) 32)
                        (->color writer (get-ambient material))
                        (->color writer (get-diffuse material))
                        (->color writer (get-specular material))
                        (->color writer (get-emissive material))
                        (->float writer (get-shininess material))
                        (->float writer (get-transparency material))
                        (->u8 writer (get-mode material))
                        (->c-string writer (get-texture-name material) MAX_TEXTURE_FILENAME_SIZE)
                        (->c-string writer (get-alphamap material) MAX_TEXTURE_FILENAME_SIZE))))))
          
          ;; bones
          (define (->bones writer animation-fps <fl>)
            (let ((bones (get-bones ms3d)))
              (let ((num-bones (vector-length bones)))
                (->u16 writer num-bones)
                (loop (for i from 0 below num-bones)
                      (let ((bone (vector-ref bones i)))
                        (->u8 writer (get-flags bone))
                        (->c-string writer (get-name bone) 32)
                        (->c-string writer (get-parent-name bone) 32)
                        (->vertex writer (quaternion->euler (get-rotation bone)))
                        (->vertex writer (get-position bone))
                        (let ((rotation-keys (get-rotation-keys bone))
                              (position-keys (get-position-keys bone)))
                          (let ((num-rotation-keys (vector-length rotation-keys))
                                (num-position-keys (vector-length position-keys)))
                            (->u16 writer num-rotation-keys)
                            (->u16 writer num-position-keys)
                            ;; the frame time is in seconds, so multiply it by the animation fps
                            ;; to get the frames rotation channel
                            (loop (for j from 0 below num-rotation-keys)
                                  (let ((keyframe (vector-ref rotation-keys j)))
                                    (->float writer (/ (get-frame keyframe) animation-fps))
                                    (->vertex writer (quaternion->euler (get-key keyframe)))))
                            ;; translation channel
                            (loop (for j from 0 below num-position-keys)
                                  (let ((keyframe (vector-ref position-keys j)))
                                    (->float writer (/ (get-frame keyframe) animation-fps))
                                    (->vertex writer (get-key keyframe)))))))))))
          
          ;; header
          (->size-string writer "MS3D000000" 10)
          (->s32 writer 4)
          ;; content
          (->vertices writer)
          (->triangles writer)
          (->groups writer)
          (->materials writer)
          ;; animation
          (->float writer (get-animation-fps ms3d))
          (->float writer (get-current-frame ms3d))
          (->s32 writer (get-total-frames ms3d))
          ;; bones
          (->bones writer (get-animation-fps ms3d)))))))


;;;
;;;; Utility
;;;


;; remove duplicate vertices in the same smoothing group
(definition public (smooth-vertices! ms3d <MS3D-Model>)
  (define (determine-smoothing-groups)
    (let ((triangles (get-triangles ms3d))
          (smoothing-groups '()))
      (loop (for triangle in-vector triangles)
            (let ((group (get-smoothing-group triangle)))
              (unless (memv? group smoothing-groups)
                (set! smoothing-groups (cons group smoothing-groups)))))
      smoothing-groups))
  
  (define (smooth-group group)
    (let ((vertices (get-vertices ms3d))
          (triangles (get-triangles ms3d)))
      (let ((uniques (make-table test: vertex=? hash: vertex-hash))
            (duplicates (make-vector (vector-length vertices) #f))
            (redundant 0))
        ;; analyse
        (loop (for triangle in-vector triangles)
              (when (= (get-smoothing-group triangle) group)
                (loop (for index in-vector (get-vertex-indices triangle))
                      (let ((vertex (vector-ref vertices index)))
                        (let ((vert (get-vertex vertex)))
                          (let ((unique-index (table-ref uniques vert #f)))
                            (if (not unique-index)
                                (table-set! uniques vert index)
                              (let ((unique (vector-ref vertices unique-index)))
                                (assert (and (= (get-flags unique) (get-flags vertex))
                                             (= (get-bone-id unique) (get-bone-id vertex)))
                                  (vector-set! duplicates index unique-index)
                                  (increase! redundant))))))))))
        (when (> redundant 0)
          (let ((num-vertices (vector-length vertices)))
            (let ((new-vertices (make-vector (- num-vertices redundant)))
                  (remapped (make-vector num-vertices #f))
                  (slide 0))
              ;; move
              (loop (for i from 0 below num-vertices)
                    (let ((vertex (vector-ref vertices i)))
                      (let ((vert (get-vertex vertex)))
                        (let ((unique-index (vector-ref duplicates i)))
                          (if unique-index
                              (begin
                                (vector-set! remapped i (vector-ref remapped unique-index))
                                (increase! slide))
                            (let ((slided-index (- i slide)))
                              (vector-set! new-vertices slided-index vertex)
                              (vector-set! remapped i slided-index)))))))
              ;; adjust
              (loop (for triangle in-vector triangles)
                    (let ((indices (get-vertex-indices triangle)))
                      (loop (for i from 0 below (vector-length indices))
                            (let ((index (vector-ref indices i)))
                              (let ((remapped-index (vector-ref remapped index)))
                                (assert (< remapped-index (- num-vertices redundant)))
                                (vector-set! indices i remapped-index))))))
              ;; replace
              (set-vertices ms3d new-vertices)))))))
  
  (let ((smoothing-groups (determine-smoothing-groups)))
    (for-each smooth-group smoothing-groups))))
