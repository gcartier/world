;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; Blender 3D
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.external.blender jazz


(import (jazz.geometry)
        (jazz.io)
        (jazz.python)
        (world)
        (world.animation)
        (world.asset)
        (world.assets)
        (world.atlas)
        (world.binary)
        (world.context)
        (world.dye)
        (world.generate)
        (world.geometry)
        (world.material)
        (world.model)
        (world.renderers)
        (world.settings)
        (world.support)
        (world.texture))


(proclaim (not check bounds)
          (warn optimizations))


;;;
;;;; Vertex
;;;


(class B3D-Vertex extends Object
  
  
  (slot vertex  <vertex> accessors generate)
  (slot normal  <vertex> accessors generate)
  (slot bone-id <fx>     accessors generate)
  
  
  (method override (initialize self vertex normal bone-id)
    (set! self.vertex vertex)
    (set! self.normal normal)
    (set! self.bone-id bone-id)))


;;;
;;;; Triangle
;;;


(class B3D-Triangle extends Object
  
  
  (slot vertex-indices <vector>    accessors generate)
  (slot vertex-normals <vector>    accessors generate)
  (slot material-index <fx+>       accessors generate)
  (slot s              <f64vector> accessors generate)
  (slot t              <f64vector> accessors generate)
  (slot d              <f64vector> accessors generate)
  
  
  (method override (initialize self vertex-indices vertex-normals material-index s t d)
    (set! self.vertex-indices vertex-indices)
    (set! self.vertex-normals vertex-normals)
    (set! self.material-index material-index)
    (set! self.s s)
    (set! self.t t)
    (set! self.d d)))


;;;
;;;; Group
;;;


(class B3D-Group extends Object
  
  
  (slot name           <string+> accessors generate)
  (slot triangles      <vector>  accessors generate)
  (slot material-index <fx>      accessors generate)
  
  
  (method override (initialize self name triangles material-index)
    (set! self.name name)
    (set! self.triangles triangles)
    (set! self.material-index material-index))
  
  
  (method override (print self output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{a}" name)))))


;;;
;;;; Model
;;;


(class B3D-Model extends Object
  
  
  (slot vertices      <vector> accessors generate)
  (slot triangles     <vector> accessors generate)
  (slot groups        <vector> accessors generate)
  (slot materials     <vector> accessors generate)
  (slot animation-fps <fl>     accessors generate)
  (slot current-frame <fl>     accessors generate)
  (slot total-frames  <fx>     accessors generate)
  (slot bones         <object> accessors generate)
  
  
  (method package (retrieve-textures self asset <Asset>)
    (let ((textures (remove-duplicates (remove-empty (map get-texture-name (vector->list materials))) test: filename=?)))
      (for-each (lambda (texture)
                  ;; quick hack
                  (if (starts-with? texture "C:")
                      (retrieve-file (brother-asset asset (add-extension (filename-base texture) "png")))
                    (retrieve-file (brother-asset asset texture))))
                textures)))
  
  
  (method package (extract-atlas self asset <Asset>)
    (define (triangle-ref index <fx>) <B3D-Triangle>
      (vector-ref triangles index))
    
    (define (material-ref index <fx>) <Material>
      (vector-ref materials index))
    
    (let ((textures (remove-duplicates (remove-empty (map get-texture-name (vector->list materials))) test: filename=?)))
      (if (null? textures)
          (values #f #f)
        (let ((atlas (new Atlas repeat?: #t pad?: #f)))
          (for-each (lambda (texture)
                      ;; quick hack
                      (if (starts-with? texture "C:")
                          (add-file atlas (retrieve-file (brother-asset asset (add-extension (filename-base texture) "png"))))
                        (add-file atlas (retrieve-file (brother-asset asset texture)))))
                    textures)
          (let ((texture (extract-texture atlas mipmap?: #f)))
            (complete atlas)
            (loop (for group <B3D-Group> in-vector groups)
                  (let ((material-index (get-material-index group)))
                    (when (/= material-index -1)
                      (let ((material (material-ref material-index)))
                        (let ((name (get-texture-name material)))
                          (let ((flipped? (extension=? (filename-extension name) "tga"))
                                (uv (image-rect atlas (filename-base name))))
                            (let ((left (uv-left uv))
                                  (top (uv-top uv))
                                  (texture-depth (uv-depth uv)))
                              (let ((width (- (uv-right uv) left))
                                    (height (- (uv-bottom uv) top)))
                                ;; adjust texture coordinates
                                (loop (for triangle-index <fx> in-vector (get-triangles group))
                                      (let ((triangle (triangle-ref triangle-index)))
                                        (let ((s (get-s triangle))
                                              (t (get-t triangle))
                                              (d (get-d triangle)))
                                          (vertex-x-set! s (+ left (* (vertex-x s) width)))
                                          (vertex-y-set! s (+ left (* (vertex-y s) width)))
                                          (vertex-z-set! s (+ left (* (vertex-z s) width)))
                                          (cond (flipped?
                                                 (vertex-x-set! t (+ top (* (- 1. (vertex-x t)) height)))
                                                 (vertex-y-set! t (+ top (* (- 1. (vertex-y t)) height)))
                                                 (vertex-z-set! t (+ top (* (- 1. (vertex-z t)) height))))
                                                (else
                                                 (vertex-x-set! t (+ top (* (vertex-x t) height)))
                                                 (vertex-y-set! t (+ top (* (vertex-y t) height)))
                                                 (vertex-z-set! t (+ top (* (vertex-z t) height)))))
                                          (vertex-x-set! d texture-depth)
                                          (vertex-y-set! d texture-depth)
                                          (vertex-z-set! d texture-depth))))))))))))
            (values atlas texture))))))
  
  
  (method package (extract-geometry self groups material)
    (define (count-triangles) <fx>
      (let ((count 0))
        (loop (for group <B3D-Group> in groups)
              (increase! count (vector-length (get-triangles group))))
        count))
    
    (let ((mesher (new Mesher (count-triangles) 0 material: material)))
      (define (vertex-ref index <fx>) <B3D-Vertex>
        (vector-ref vertices index))
      
      (define (add-blender-triangle triangle <B3D-Triangle>)
        (let ((indices (get-vertex-indices triangle))
              (normals (get-vertex-normals triangle))
              (s (get-s triangle))
              (t (get-t triangle))
              (d (get-d triangle)))
          (let ((v1 (vertex-ref (cast <fx> (vector-ref indices 0))))
                (v2 (vertex-ref (cast <fx> (vector-ref indices 1))))
                (v3 (vertex-ref (cast <fx> (vector-ref indices 2))))
                (uv (f32vector (vertex-x s) (vertex-x t) (vertex-y s) (vertex-y t) (vertex-z s) (vertex-z t)))
                (tdepth (vertex-x d)))
            (add-triangle mesher
              (get-vertex v1) (vector-ref normals 0) 0 1 (get-bone-id v1)
              (get-vertex v2) (vector-ref normals 1) 2 3 (get-bone-id v2)
              (get-vertex v3) (vector-ref normals 2) 4 5 (get-bone-id v3)
              uv
              tdepth))))
      
      (loop (for group <B3D-Group> in groups)
            (loop (for triangle-index <fx> in-vector (get-triangles group))
                  (add-blender-triangle (cast <B3D-Triangle> (vector-ref triangles triangle-index)))))
      (get-mesh mesher debuggable-mesh?: #t)))
  
  
  (method package (extract-bounds self)
    (define (vertex-ref index <fx>)
      (get-vertex (cast <B3D-Vertex> (vector-ref vertices index))))
    
    (let ((bounds (let ((vert (vertex-ref 0)))
                    (let ((x (vertex-x vert))
                          (y (vertex-y vert))
                          (z (vertex-z vert)))
                      (cuboid x y z x y z)))))
      (loop (for n from 1 below (vector-length vertices))
            (let ((vertex (vertex-ref n)))
              (let ((x (vertex-x vertex))
                    (y (vertex-y vertex))
                    (z (vertex-z vertex)))
                (when (< x (cuboid-left bounds))
                  (cuboid-left-set! bounds x))
                (when (> x (cuboid-right bounds))
                  (cuboid-right-set! bounds x))
                (when (< y (cuboid-bottom bounds))
                  (cuboid-bottom-set! bounds y))
                (when (> y (cuboid-top bounds))
                  (cuboid-top-set! bounds y))
                (when (< z (cuboid-back bounds))
                  (cuboid-back-set! bounds z))
                (when (> z (cuboid-front bounds))
                  (cuboid-front-set! bounds z)))))
      ;; a try to standardize bounds bottom at 0
      ;; this may not be 100% correct as vertices are not
      ;; standardized but it seems to give very good results
      (let ((bottom (cuboid-bottom bounds)))
        (cuboid-bottom-set! bounds 0.)
        (cuboid-top-set! bounds (- (cuboid-top bounds) bottom)))
      bounds))
  
  
  (method package (extract-animation self name frames include-animations? (valid-bones #f))
    ;; necessary as animations come from distinct files
    (if (and valid-bones (/= (vector-length bones) valid-bones))
        (error "Inconsistant bones in model: {a}" name)
      (let ((animation (new Animation name animation-fps (or frames total-frames) bones)))
        (when include-animations?
          (setup-bones animation))
        animation))))


;;;
;;;; Import
;;;


(definition public (import-b3d asset <Asset> (metadata: metadata #f) (class: class #f) (include-animations?: include-animations? (window?))) <Model>
  (let ((name (get-base asset))
        (render (model-metadata-render metadata))
        (mask (model-metadata-mask metadata))
        (frames (model-metadata-frames metadata)))
    (define (add-animations model <Model> valid-bones)
      (let ((dirpath (string-append (join (get-parent asset) "/") "/")))
        (iterate-assets (current-world)
          (lambda (assets)
            (iterate-entries assets
              (lambda (path)
                (when (starts-with? path dirpath)
                  (when (extension=? (filename-extension path) "b3d")
                    (let ((name (filename-base path)))
                      (unless (filename=? name "_Idle")
                        (let ((animation-asset (new Asset assets path)))
                          (add-animation model name
                            (lambda ()
                              (let ((b3d (retrieve-file animation-asset)))
                                (extract-animation b3d name frames include-animations? valid-bones)))))))))))))))
    
    (let ((model <Model> (new (or class Model) name: name rotation: (vertex 0. PI/2 0.))))
      (install-metadata model metadata)
      (let ((b3d (read-b3d (retrieve-file asset) include-animations?: include-animations?)))
        (when debug-b3d?
          (set-native model b3d))
        (if (not include-animations?)
            (begin
              (set-anchor model 'origin)
              (set-bounds model (extract-bounds b3d))
              (set-animation model (extract-animation b3d "Idle" frames include-animations?))
              (add-animations model (vector-length (get-bones b3d))))
          ;; order is important as extract-atlas adjusts texture coordinates
          (bind-values (atlas texture) (extract-atlas b3d asset)
            (let ((effective-render (or render (if texture '(transparent) '(white)))))
              (define (extract-mesh groups renderer)
                (let ((material (new Material atlas: atlas texture: texture renderer: renderer)))
                  (extract-geometry b3d groups material)))
              
              (define (iterate-groups proc)
                (let ((renderer (require-renderer (car effective-render)))
                      (renderscan (cdr effective-render))
                      (mask (if (not mask) #t (car mask)))
                      (maskscan (and mask (cdr mask))))
                  (loop (for group in-vector (get-groups b3d))
                        (begin
                          (proc group renderer mask)
                          (unless (null? renderscan)
                            (set! renderer (require-renderer (car renderscan)))
                            (set! renderscan (cdr renderscan)))
                          (unless (or (not maskscan) (null? maskscan))
                            (set! mask (car maskscan))
                            (set! maskscan (cdr maskscan)))))))
              
              (when debug-meshes?
                (set-atlas model atlas))
              (if (not include-animations?)
                  (set-meshes model #f)
                (if debug-meshes?
                    (let ((queue (new-queue)))
                      (iterate-groups
                        (lambda (group renderer mask)
                          (enqueue queue (extract-mesh (list group) renderer))))
                      (set-meshes model (list->vector (queue-list queue))))
                  (let ((render-groups (make-table test: eq?)))
                    (iterate-groups
                      (lambda (group renderer mask)
                        (when mask
                          (table-add render-groups renderer group))))
                    (let ((queue (new-queue)))
                      (iterate-table render-groups
                        (lambda (renderer groups)
                          (enqueue queue (extract-mesh groups renderer))))
                      (set-meshes model (list->vector (queue-list queue))))))))
            (set-anchor model 'origin)
            (set-bounds model (extract-bounds b3d))
            (set-animation model (extract-animation b3d "Idle" frames include-animations?))
            (add-animations model (vector-length (get-bones b3d))))))
      model)))


(definition package (read-b3d file <File> (include-animations?: include-animations? (window?))) <B3D-Model>
  (call-with-input-file (path-settings file readtable: python-readtable)
    (lambda (port)
      (define (<-header expected)
        (let ((header (read port)))
          (if (eq? header expected)
              header
            (signal (new Model-Import-Error message: (format "{a} header expected: {a}" expected header))))))
      
      (define (<-string)
        (let ((str (read port)))
          (if (string? str)
              str
            (signal (new Model-Import-Error message: (format "String expected: {a}" str))))))
      
      (define (<-fx) <fx>
        (let ((fx (read port)))
          (if (fixnum? fx)
              fx
            (signal (new Model-Import-Error message: (format "Fixnum expected: {a}" fx))))))
      
      (define (<-fl) <fl>
        (let ((fl (read port)))
          (if (flonum? fl)
              fl
            (signal (new Model-Import-Error message: (format "Flonum expected: {a}" fl))))))
      
      (define (<-vertex) <f64vector>
        (let* ((x (<-fl))
               (y (<-fl))
               (z (<-fl)))
          (vertex x y z)))
      
      (define (vertex->world vert)
        (vertex (vertex-y vert)
                (vertex-z vert)
                (vertex-x vert)))
      
      (define (bone->world vert)
        (vertex (- (vertex-x vert))
                (vertex-z vert)
                (vertex-y vert)))
      
      (define (<-normal) <f64vector>
        (<-vertex))
      
      (define (<-uv) <vector>
        (let* ((u (<-fl))
               (v (<-fl)))
          (vector u v)))
      
      ;; name
      (define (<-name)
        (let* ((header (<-header 'OBJECT))
               (name (<-string)))
          name))
      
      ;; vertices
      (define (<-vertices)
        (let* ((header (<-header 'VERTICES))
               (num-vertices (<-fx))
               (vertices (make-vector num-vertices))
               (bottom +inf.0))
          (loop (for n from 0 below num-vertices)
                (let ((vertex (vertex->world (<-vertex)))
                      (normal (vertex->world (<-vertex)))
                      (boneid (<-fx)))
                  (vector-set! vertices n (new B3D-Vertex vertex normal boneid))
                  (let ((y (vertex-y vertex)))
                    (when (< y bottom)
                      (set! bottom y)))))
          ;; adjust so bottom is at 0
          (loop (for vertex in-vector vertices)
                (let ((vert (get-vertex vertex)))
                  (vertex-y-set! vert (- (vertex-y vert) bottom))))
          vertices))
      
      ;; triangles
      ;; todo quicky to pass vertices
      (define (<-triangles vertices) <vector>
        (define (<-indices) <vector>
          (let* ((v1 (<-fx))
                 (v2 (<-fx))
                 (v3 (<-fx)))
            (vector v1 v2 v3)))
        
        (define (<-normals indices)
          (vector (get-normal (vector-ref vertices (vector-ref indices 0)))
                  (get-normal (vector-ref vertices (vector-ref indices 1)))
                  (get-normal (vector-ref vertices (vector-ref indices 2)))))
        
        (let* ((header (<-header 'TRIANGLES))
               (num-triangles (<-fx))
               (triangles (make-vector num-triangles)))
          (loop (for n from 0 below num-triangles)
                (let* ((vertex-indices (<-indices))
                       (vertex-normals (<-normals vertex-indices))
                       (material-index (<-fx))
                       (uv1 (<-uv))
                       (uv2 (<-uv))
                       (uv3 (<-uv))
                       (d (vertex 0. 0. 0.)))
                  (let ((triangle
                          (new B3D-Triangle
                            vertex-indices
                            vertex-normals
                            material-index
                            (vertex (vector-ref uv1 0) (vector-ref uv2 0) (vector-ref uv3 0))
                            (vertex (vector-ref uv1 1) (vector-ref uv2 1) (vector-ref uv3 1))
                            d)))
                    (vector-set! triangles n triangle))))
          triangles))
      
      ;; materials
      (define (<-materials) <vector>
        (let* ((header (<-header 'MATERIALS))
               (num-materials (<-fx))
               (materials (make-vector num-materials)))
          (loop (for n from 0 below num-materials)
                (let ((name (<-string))
                      (texture (<-string)))
                  (let ((material
                          (new Material
                            name: name
                            ambient: #f32(0. 0. 0. 1.)
                            diffuse: #f32(1. 1. 1. 1.)
                            specular: #f32(0. 0. 0. 1.)
                            emissive: #f32(0. 0. 0. 1.)
                            shininess: 128.
                            transparency: 1.
                            mode: 2
                            texture-name: texture
                            alphamap: "")))
                    (vector-set! materials n material))))
          materials))
      
      ;; groups
      ;; todo quicky to pass triangles and materials
      (define (<-groups triangles materials) <vector>
        (let ((groups (make-vector (vector-length materials) 0))
              (partition (partition (naturals 0 (vector-length triangles)) key: (lambda (n) (get-material-index (vector-ref triangles n))))))
          (list->vector
            (map (lambda (partition)
                   (bind (material-index . triangle-indices) partition
                     ;; todo quick try generate groups should probably be replaced by just using material in code above
                     (let ((material (and (/= material-index -1) (vector-ref materials material-index))))
                       (new B3D-Group
                         (and material (get-name material))
                         (list->vector (sort < triangle-indices))
                         material-index))))
                 (sort < partition key: car)))))
      
      ;; bones
      (define (<-bones animation-fps frame-start) <vector>
        ;; quick optimization as server doesn't need animations
        (if include-animations?
            (let* ((header (<-header 'BONES))
                   (num-bones (<-fx))
                   (bones (make-vector num-bones)))
              (if (> num-bones max-bones)
                  (signal (new Model-Import-Error message: (format "Max {a} bones reached: {a}" max-bones num-bones)))
                (loop (for n from 0 below num-bones)
                      (let* ((flags 0)
                             (name (<-string))
                             (parent-name (<-string))
                             (pos (bone->world (<-vertex)))
                             (rot (euler->quaternion (bone->world (<-vertex))))
                             (len (<-fl)))
                        (let ((bone (new Bone flags name n parent-name rot pos len (vector) (vector))))
                          (vector-set! bones n bone))))
                (let* ((header (<-header 'ANIMATIONS))
                       (num-animations (<-fx)))
                  (when (> num-animations 0)
                    (assert (= num-animations 1))
                    (let ((animation-name (<-string)))
                      (define (normalize-time time)
                        (- time frame-start))
                      
                      (loop (for n from 0 below num-bones)
                            (let* ((bone (vector-ref bones n))
                                   (bone-name (<-string)))
                              ;; translations
                              (let* ((num-key-frames-pos (<-fx))
                                     (position-keys (make-vector num-key-frames-pos)))
                                (loop (for j from 0 below num-key-frames-pos)
                                      (let* ((time (normalize-time (<-fl)))
                                             (key (bone->world (<-vertex))))
                                        (vector-set! position-keys j (new KeyFrame time key))))
                                (set-position-keys bone position-keys))
                              ;; rotations
                              (let* ((num-key-frames-rot (<-fx))
                                     (rotation-keys (make-vector num-key-frames-rot)))
                                (loop (for j from 0 below num-key-frames-rot)
                                      (let* ((time (normalize-time (<-fl)))
                                             (key (euler->quaternion (bone->world (<-vertex)))))
                                        (vector-set! rotation-keys j (new KeyFrame time key))))
                                (set-rotation-keys bone rotation-keys)))))))
                bones))
          (vector)))
      
      ;; content
      (catch (datum-parsing-exception? exc
               (signal (new Model-Import-Error message: (exception-reason exc))))
        (let* ((b3d (new B3D-Model))
               (name (<-name))
               (fps (<-fl))
               (frame-start (<-fl))
               (frame-end (<-fl))
               (frame-current (<-fl))
               (vertices (<-vertices))
               (triangles (<-triangles vertices))
               (materials (<-materials))
               (groups (<-groups triangles materials)))
          ;; vertices
          (set-vertices b3d vertices)
          ;; triangles
          (set-triangles b3d triangles)
          ;; materials
          (set-materials b3d materials)
          ;; groups
          (set-groups b3d groups)
          ;; animation
          (set-animation-fps b3d fps)
          (set-current-frame b3d frame-current)
          (set-total-frames b3d (+ (inexact->exact (- frame-end frame-start)) 1))
          ;; bones
          (set-bones b3d (<-bones fps frame-start))
          b3d))))))
