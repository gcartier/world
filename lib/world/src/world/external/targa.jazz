;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Targa .tga
;;;


(module world.external.targa jazz


(import (jazz.graphic.opengl.glew)
        (jazz.io)
        (world.binary)
        (world.foreign))


(definition public (load-tga file)
  (define (unsupported-format)
    (error "Unsupported .tga format"))
  
  (call-with-input-file (path-settings file)
    (lambda (port)
      (let ((size (input-port-byte-position port 0 2)))
        (input-port-byte-position port 0)
        (let ((content (make-u8vector size)))
          (read-subu8vector content 0 size port)
          (let ((tga-header (subu8vector content 0 12))
                (uncompressed-tga-header #u8(0 0 2 0 0 0 0 0 0 0 0 0)))
            (if (not (equal? tga-header uncompressed-tga-header))
                (unsupported-format)
              (let ((header (subu8vector content 12 18)))
                (let ((width  (+ (* (u8vector-ref header 1) 256) (u8vector-ref header 0)))
                      (height (+ (* (u8vector-ref header 3) 256) (u8vector-ref header 2)))
                      (depth  (u8vector-ref header 4)))
                  (let ((type (case depth
                                ((24) GL_RGB)
                                ((32) GL_RGBA))))
                    (if (not (equal? type GL_RGBA))
                        (unsupported-format)
                      (let ((depth (/ depth 8)))
                        (let ((image-size (* width height depth)))
                          (let ((image-data (subu8vector->foreign content 18 (+ 18 image-size))))
                            (values width height depth image-data))))))))))))))))
