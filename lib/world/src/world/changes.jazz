;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; Changes
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.changes jazz


(import (jazz.component)
        (jazz.editor.jazz)
        (jazz.text)
        (gaea.geometry)
        (world)
        (world.actor)
        (world.autoload)
        (world.change)
        (world.console)
        (world.context)
        (world.creature)
        (world.entity)
        (world.history)
        (world.message)
        (world.parts)
        (world.script.asset)
        (world.section)
        (world.sound)
        (world.syntax (phase syntax)))


;;;
;;;; Move
;;;


(define-change move
  droppable?: #t
  ;; action
  action-layout: '(actor commands flonum)
  action-store: (lambda (push actor commands elapse)
                  (push-actor push actor)
                  (push-commands push commands)
                  (push-flonum push elapse))
  action-apply: (lambda (client-id pop)
                  (let* ((actor (pop-actor pop))
                         (commands (pop-commands pop))
                         (elapse (pop-flonum pop)))
                    (when actor
                      (tick-action actor commands (current-seconds) elapse))))
  ;; forward
  forward-layout: '(actor vertex vertex vertex boolean)
  forward-store: (lambda (push actor new-position new-velocity new-fall-velocity ground?)
                   (push-actor push actor)
                   (push-vertex push new-position)
                   (push-vertex push new-velocity)
                   (push-vertex push new-fall-velocity)
                   (push-boolean push ground?))
  forward-apply: (lambda (client-id pop)
                   (let* ((actor (pop-actor pop))
                          (position (pop-vertex& pop))
                          (velocity (pop-vertex& pop))
                          (fall-velocity (pop-vertex& pop))
                          (ground? (pop-boolean pop)))
                     (when actor
                       (set-position actor position)
                       (set-effective-velocity actor velocity)
                       (set-fall-velocity actor fall-velocity)
                       (set-ground? actor ground?)
                       (when (client?)
                         (adjust-motion-target actor)))))
  ;; backward
  backward-layout: '(actor vertex vertex vertex boolean)
  backward-store: (lambda (push actor old-position old-velocity old-fall-velocity old-ground?)
                    (push-actor push actor)
                    (push-vertex push old-position)
                    (push-vertex push old-velocity)
                    (push-vertex push old-fall-velocity)
                    (push-boolean push old-ground?))
  backward-apply: (lambda (client-id pop)
                    (let* ((actor (pop-actor pop))
                           (old-position (pop-vertex& pop))
                           (old-velocity (pop-vertex& pop))
                           (old-fall-velocity (pop-vertex& pop))
                           (old-ground? (pop-boolean pop)))
                      (when actor
                        (set-position actor old-position)
                        (set-effective-velocity actor old-velocity)
                        (set-fall-velocity actor old-fall-velocity)
                        (set-ground? actor old-ground?)))))


(definition protected (move-change time actor commands elapse old-position new-position old-velocity new-velocity old-fall-velocity new-fall-velocity old-ground? new-ground?)
  (let ((world (current-world))
        (history (current-history)))
    (unless (or (not (get-id actor))
                (not (record-change? actor))
                (and (get-paused? history) (not (stepping-history?)))
                (and (vertex-near? new-position old-position)
                     (vertex-near? new-velocity old-velocity)
                     (vertex-near? new-fall-velocity new-fall-velocity)
                     (eq? new-ground? old-ground?)))
      (bidirectional-change 'move time
        (lambda (store push)
          (store push actor commands elapse))
        (lambda (store push)
          (store push actor new-position new-velocity new-fall-velocity new-ground?))
        (lambda (store push)
          (store push actor old-position old-velocity old-fall-velocity old-ground?))
        metadata: (snapshot-metadata world actor)))))


;;;
;;;; Lookat
;;;


(define-change lookat
  droppable?: #t
  ;; action
  action-layout: '(actor commands flonum)
  action-store: (lambda (push actor commands elapse)
                  (push-actor push actor)
                  (push-commands push commands)
                  (push-flonum push (or elapse -1.)))
  action-apply: (lambda (client-id pop)
                  (let* ((actor (pop-actor pop))
                         (commands (pop-commands pop))
                         (elapse (pop-flonum pop)))
                     (when actor
                       ;; quick hack for track-ground
                       (when commands
                         (tick-action actor commands (current-seconds) elapse)))))
  ;; forward
  forward-layout: '(actor lookat)
  forward-store: (lambda (push actor new-lookat)
                   (push-actor push actor)
                   (push-lookat push new-lookat))
  forward-apply: (lambda (client-id pop)
                   (let* ((actor (pop-actor pop))
                          (new-lookat (pop-lookat& pop)))
                     (when actor
                       (set-lookat actor new-lookat)
                       (when (client?)
                         (adjust-motion-target actor)))))
  ;; backward
  backward-layout: '(actor lookat)
  backward-store: (lambda (push actor old-lookat)
                    (push-actor push actor)
                    (push-lookat push old-lookat))
  backward-apply: (lambda (client-id pop)
                    (let* ((actor (pop-actor pop))
                           (old-lookat (pop-lookat& pop)))
                      (when actor
                        (set-lookat actor old-lookat)))))


(definition protected (lookat-change time actor commands elapse old-lookat new-lookat)
  (let ((world (current-world))
        (history (current-history)))
    (unless (or (not (get-id actor))
                (not (record-change? actor))
                (and (get-paused? history) (not (stepping-history?)))
                (lookat-near? new-lookat old-lookat))
      (bidirectional-change 'lookat time
        (lambda (store push)
          (store push actor commands elapse))
        (lambda (store push)
          (store push actor new-lookat))
        (lambda (store push)
          (store push actor old-lookat))
        metadata: (snapshot-metadata world actor)))))


(definition protected (lookat-fly-change actor dir)
  (let ((old-lookat (lookat-copy& (get-lookat actor)))
        (new-lookat (direction-lookat& dir)))
    (set-lookat actor new-lookat)
    (lookat-change (current-seconds) actor #f #f old-lookat new-lookat)))
  
  
(definition protected (lookat-horizon-change actor dir)
  (let ((old-lookat (lookat-copy& (get-lookat actor))))
    (horizon-sight! actor dir)
    (let ((new-lookat (get-lookat actor)))
      (lookat-change (current-seconds) actor #f #f old-lookat new-lookat))))


;;;
;;;; Animate
;;;


(define-change animate
  droppable?: #t
  ;; forward
  forward-layout: '(actor literal)
  forward-store: (lambda (push actor new-animation)
                   (push-actor push actor)
                   (push-literal push new-animation))
  forward-apply: (lambda (client-id pop)
                   (let* ((actor (pop-actor pop))
                          (new-animation (pop-literal pop)))
                     (when (and actor
                                (get-morphing actor)
                                (find-animation (cache-model actor) new-animation))
                       (change-morphing actor new-animation))))
  ;; backward
  backward-layout: '(actor literal)
  backward-store: (lambda (push actor old-animation)
                    (push-actor push actor)
                    (push-literal push old-animation))
  backward-apply: (lambda (client-id pop)
                    (let* ((actor (pop-actor pop))
                           (old-animation (pop-literal pop)))
                      (when actor
                        ;; limit-case for first animate
                        (when old-animation
                          (change-morphing actor old-animation))))))


(definition protected (animate-change time actor old-animation new-animation)
  (let ((world (current-world))
        (history (current-history)))
    (unless (or (not (get-id actor))
                (not (record-change? actor))
                (and (get-paused? history) (not (stepping-history?)))
                (equal? new-animation old-animation))
      (bidirectional-change 'animate time
        (lambda (store push)
          (store push actor new-animation))
        (lambda (store push)
          (store push actor new-animation))
        (lambda (store push)
          (store push actor old-animation))))))


;;;
;;;; Damage
;;;


(definition protected (damage-change actor amount critical?)
  (let ((history (current-history)))
    (unless (and (get-paused? history) (not (stepping-history?)))
      (apply-damage actor amount critical?)
      (bidirectional-change 'damage (current-seconds)
        (lambda (store push)
          )
        (lambda (store push)
          (store push actor amount critical?))
        (lambda (store push)
          (store push actor))))))


(definition protected (apply-damage actor amount critical?)
  (when (client?)
    (damage actor amount critical?)))


;; todo
(definition protected (apply-undamage actor)
  )


(define-change damage
  ;; forward
  forward-layout: '(actor flonum boolean)
  forward-store: (lambda (push actor amount critical?)
                   (push-actor push actor)
                   (push-flonum push amount)
                   (push-boolean push critical?))
  forward-apply: (lambda (client-id pop)
                   (let* ((actor (pop-actor pop))
                          (amount (pop-flonum pop))
                          (critical? (pop-boolean pop)))
                     (when actor
                       (apply-damage actor amount critical?))))
  ;; backward
  backward-layout: '(actor)
  backward-store: (lambda (push actor)
                    (push-actor push actor))
  backward-apply: (lambda (client-id pop)
                    (let* ((actor (pop-actor pop)))
                      (when actor
                        (apply-undamage actor)))))


;;;
;;;; Die
;;;


(definition protected (die-change actor)
  (let ((history (current-history)))
    (unless (and (get-paused? history) (not (stepping-history?)))
      (apply-die actor)
      (bidirectional-change 'die (current-seconds)
        (lambda (store push)
          )
        (lambda (store push)
          (store push actor))
        (lambda (store push)
          (store push actor))))))


(definition protected (apply-die actor)
  (die actor))


;; useful for navigating history as only server should apply die
(definition protected (apply-resurrect actor)
  (resurrect actor))


(define-change die
  ;; forward
  forward-layout: '(actor)
  forward-store: (lambda (push actor)
                   (push-actor push actor))
  forward-apply: (lambda (client-id pop)
                   (let* ((actor (pop-actor pop)))
                     (when actor
                       (apply-die actor))))
  ;; backward
  backward-layout: '(actor)
  backward-store: (lambda (push actor)
                    (push-actor push actor))
  backward-apply: (lambda (client-id pop)
                    (let* ((actor (pop-actor pop)))
                      (when actor
                        (apply-resurrect actor)))))


;;;
;;;; Trek
;;;


(definition protected (trek-change actor)
  (let ((world (current-world))
        (history (current-history)))
    (unless (and (get-paused? history) (not (stepping-history?)))
      (let ((old-mount (get-mount actor))
            (old-vehicle (vehicle-name actor)))
        (activate-trek actor)
        (bidirectional-change 'trek (current-seconds)
          (lambda (store push)
            )
          (lambda (store push)
            (store push actor))
          (lambda (store push)
            (store push actor old-mount old-vehicle)))))))


(define-change trek
  ;; forward
  forward-layout: '(actor)
  forward-store: (lambda (push actor)
                   (push-actor push actor))
  forward-apply: (lambda (client-id pop)
                   (let* ((actor (pop-actor pop)))
                     (when actor
                       (activate-trek actor))))
  ;; backward
  backward-layout: '(actor literal literal)
  backward-store: (lambda (push actor old-mount old-vehicle)
                    (push-actor push actor)
                    (push-literal push old-mount)
                    (push-literal push old-vehicle))
  backward-apply: (lambda (client-id pop)
                    (let* ((actor (pop-actor pop))
                           (old-mount (pop-literal pop))
                           (old-vehicle (pop-literal pop)))
                      (when actor
                        (activate-travel actor old-mount old-vehicle)))))


;;;
;;;; Ride
;;;


(definition protected (ride-change actor vehicle)
  (let ((world (current-world))
        (history (current-history)))
    (unless (and (get-paused? history) (not (stepping-history?)))
      (let ((old-mount (get-mount actor))
            (old-vehicle (vehicle-name actor)))
        (activate-ride actor vehicle)
        (bidirectional-change 'ride (current-seconds)
          (lambda (store push)
            )
          (lambda (store push)
            (store push actor vehicle))
          (lambda (store push)
            (store push actor old-mount old-vehicle)))))))


(define-change ride
  ;; forward
  forward-layout: '(actor literal)
  forward-store: (lambda (push actor vehicle)
                   (push-actor push actor)
                   (push-literal push vehicle))
  forward-apply: (lambda (client-id pop)
                   (let* ((actor (pop-actor pop))
                          (vehicle (pop-literal pop)))
                     (when actor
                       (activate-ride actor vehicle))))
  ;; backward
  backward-layout: '(actor literal literal)
  backward-store: (lambda (push actor old-mount old-vehicle)
                    (push-actor push actor)
                    (push-literal push old-mount)
                    (push-literal push old-vehicle))
  backward-apply: (lambda (client-id pop)
                    (let* ((actor (pop-actor pop))
                           (old-mount (pop-literal pop))
                           (old-vehicle (pop-literal pop)))
                      (when actor
                        (activate-travel actor old-mount old-vehicle)))))


;;;
;;;; Fly
;;;


(definition protected (fly-change actor vehicle)
  (let ((world (current-world))
        (history (current-history)))
    (unless (and (get-paused? history) (not (stepping-history?)))
      (let ((old-mount (get-mount actor))
            (old-vehicle (vehicle-name actor)))
        (activate-fly actor vehicle)
        (bidirectional-change 'fly (current-seconds)
          (lambda (store push)
            )
          (lambda (store push)
            (store push actor vehicle))
          (lambda (store push)
            (store push actor old-mount old-vehicle)))))))


(define-change fly
  ;; forward
  forward-layout: '(actor literal)
  forward-store: (lambda (push actor vehicle)
                   (push-actor push actor)
                   (push-literal push vehicle))
  forward-apply: (lambda (client-id pop)
                   (let* ((actor (pop-actor pop))
                          (vehicle (pop-literal pop)))
                     (when actor
                       (activate-fly actor vehicle))))
  ;; backward
  backward-layout: '(actor literal literal)
  backward-store: (lambda (push actor old-mount old-vehicle)
                    (push-actor push actor)
                    (push-literal push old-mount)
                    (push-literal push old-vehicle))
  backward-apply: (lambda (client-id pop)
                    (let* ((actor (pop-actor pop))
                           (old-mount (pop-literal pop))
                           (old-vehicle (pop-literal pop)))
                      (when actor
                        (activate-travel actor old-mount old-vehicle)))))


;;;
;;;; Vehicle
;;;


(definition protected (vehicle-change actor vehicle)
  (let ((world (current-world))
        (history (current-history)))
    (unless (and (get-paused? history) (not (stepping-history?)))
      (let ((old-mount (get-mount actor))
            (old-vehicle (vehicle-name actor)))
        (change-vehicle actor vehicle)
        (bidirectional-change 'vehicle (current-seconds)
          (lambda (store push)
            )
          (lambda (store push)
            (store push actor vehicle))
          (lambda (store push)
            (store push actor old-mount old-vehicle)))))))


(define-change vehicle
  ;; forward
  forward-layout: '(actor literal)
  forward-store: (lambda (push actor vehicle)
                   (push-actor push actor)
                   (push-literal push vehicle))
  forward-apply: (lambda (client-id pop)
                   (let* ((actor (pop-actor pop))
                          (vehicle (pop-literal pop)))
                     (when actor
                       (change-vehicle actor vehicle))))
  ;; backward
  backward-layout: '(actor literal literal)
  backward-store: (lambda (push actor old-mount old-vehicle)
                    (push-actor push actor)
                    (push-literal push old-mount)
                    (push-literal push old-vehicle))
  backward-apply: (lambda (client-id pop)
                    (let* ((actor (pop-actor pop))
                           (old-mount (pop-literal pop))
                           (old-vehicle (pop-literal pop)))
                      (when actor
                        (activate-travel actor old-mount old-vehicle)))))


;;;
;;;; Name
;;;


(definition protected (name-change actor name)
  (let ((world (current-world))
        (history (current-history)))
    (unless (and (get-paused? history) (not (stepping-history?)))
      (apply-name actor name)
      (bidirectional-change 'name (current-seconds)
        (lambda (store push)
          )
        (lambda (store push)
          (store push actor name))
        (lambda (store push)
          (store push))))))


(define-change name
  ;; forward
  forward-layout: '(actor literal)
  forward-store: (lambda (push actor name)
                   (push-actor push actor)
                   (push-literal push name))
  forward-apply: (lambda (client-id pop)
                   (let* ((actor (pop-actor pop))
                          (name (pop-literal pop)))
                     (when actor
                       (apply-name actor name))))
  ;; backward
  backward-layout: '()
  backward-store: (lambda (push)
                    )
  backward-apply: (lambda (client-id pop)
                    ))


(definition protected (apply-name actor name)
  (set-name-pane actor name))


;;;
;;;; Say
;;;


(definition protected (say-change actor message (width: width #f) (height: height #f) (size: size #f))
  (let ((world (current-world))
        (history (current-history)))
    (unless (and (get-paused? history) (not (stepping-history?)))
      (bidirectional-change 'say (current-seconds)
        (lambda (store push)
          )
        (lambda (store push)
          (store push actor message width height size))
        (lambda (store push)
          (store push))))))


(define-change say
  ;; forward
  forward-layout: '(actor literal literal literal literal)
  forward-store: (lambda (push actor message width height size)
                   (push-actor push actor)
                   (push-literal push message)
                   (push-literal push width)
                   (push-literal push height)
                   (push-literal push size))
  forward-apply: (lambda (client-id pop)
                   (let* ((actor (pop-actor pop))
                          (message (pop-literal pop))
                          (width (pop-literal pop))
                          (height (pop-literal pop))
                          (size (pop-literal pop)))
                     (when actor
                       (apply-say actor message width height size))))
  ;; backward
  backward-layout: '()
  backward-store: (lambda (push)
                    )
  backward-apply: (lambda (client-id pop)
                    ))


(definition protected (apply-say actor message width height size)
  (when (client?)
    (set-output actor (new Message (current-seconds) 'say (standardize-message message) width height size))
    (update-console-output actor)
    (world.interface.script:update-console actor)))


;;;
;;;; Sound
;;;


(definition protected (sound-change actor path)
  (let ((world (current-world))
        (history (current-history)))
    (unless (and (get-paused? history) (not (stepping-history?)))
      (bidirectional-change 'sound (current-seconds)
        (lambda (store push)
          )
        (lambda (store push)
          (store push actor path))
        (lambda (store push)
          (store push))))))


(define-change sound
  ;; forward
  forward-layout: '(actor literal)
  forward-store: (lambda (push actor path)
                   (push-actor push actor)
                   (push-literal push path))
  forward-apply: (lambda (client-id pop)
                   (let* ((actor (pop-actor pop))
                          (path (pop-literal pop)))
                     (when actor
                       (apply-sound actor path))))
  ;; backward
  backward-layout: '()
  backward-store: (lambda (push)
                    )
  backward-apply: (lambda (client-id pop)
                    ))


(definition protected (apply-sound actor path)
  (play-3d-sound path (get-position actor)))


;;;
;;;; Fire
;;;


(definition protected (fire-change pos dir kind actor)
  (let ((history (current-history)))
    (unless (and (get-paused? history) (not (stepping-history?)))
      (let ((missile (apply-fire #f pos dir kind actor)))
        (let ((actor-id (get-id missile)))
          (bidirectional-change 'fire (current-seconds)
            (lambda (store push)
              )
            (lambda (store push)
              (store push actor-id pos dir kind actor))
            (lambda (store push)
              (store push missile))))))))


(definition protected (apply-fire id pos dir kind actor)
  (let ((zone (current-zone)))
    (let ((missile (new Missile id: id position: pos actor: actor kind: kind)))
      (increase-missiles actor)
      (set-velocity missile (vertex-scalar*& dir (missile-speed missile)))
      (when (client?)
        (set-effective-velocity missile (get-velocity missile)))
      (add-element zone missile)
      missile)))


(definition protected (apply-unfire missile)
  (let ((world (current-world))
        (zone (current-zone)))
    (decrease-missiles (get-actor missile))
    (remove-element world missile)))


(define-change fire
  ;; forward
  forward-layout: '(id vertex vertex literal actor)
  forward-store: (lambda (push actor-id position dir kind actor)
                   (push-id push actor-id)
                   (push-vertex push position)
                   (push-vertex push dir)
                   (push-literal push kind)
                   (push-actor push actor))
  forward-apply: (lambda (client-id pop)
                   (let* ((actor-id (pop-id pop))
                          (position (pop-vertex& pop))
                          (dir (pop-vertex& pop))
                          (kind (pop-literal pop))
                          (actor (pop-actor pop)))
                     (when actor
                       (apply-fire actor-id position dir kind actor))))
  ;; backward
  backward-layout: '(actor)
  backward-store: (lambda (push actor)
                    (push-actor push actor))
  backward-apply: (lambda (client-id pop)
                    (let* ((actor (pop-actor pop)))
                      (when actor
                        (apply-unfire actor)))))


;;;
;;;; Spawn
;;;


(definition protected (spawn-change pos lookat spawner)
  (let ((history (current-history)))
    (unless (and (get-paused? history) (not (stepping-history?)))
      (let ((class (random-element (list Spider Wolf Jumper))))
        (let ((creature (apply-spawn class #f pos lookat spawner)))
          (let ((actor-id (get-id creature)))
            (bidirectional-change 'spawn (current-seconds)
              (lambda (store push)
                )
              (lambda (store push)
                (store push class actor-id pos lookat spawner))
              (lambda (store push)
                (store push creature)))))))))


(definition protected (apply-spawn class id pos lookat spawner)
  (let ((world (current-world))
        (zone (current-zone)))
    (let ((creature (new class id: id position: pos lookat: lookat)))
      (set-behavior creature 'hostile)
      (set-spawner creature spawner)
      (add-element zone creature)
      creature)))


(definition protected (apply-despawn actor)
  (let ((world (current-world)))
    (remove-element world actor)))


(define-change spawn
  ;; forward
  forward-layout: '(class id vertex lookat @wait-this-lags actor)
  forward-store: (lambda (push class actor-id position lookat spawner)
                   (push-class push class)
                   (push-id push actor-id)
                   (push-vertex push position)
                   (push-lookat push lookat)
                   @wait-this-lags (push-actor push spawner))
  forward-apply: (lambda (client-id pop)
                   (let* ((class (pop-class pop))
                          (actor-id (pop-id pop))
                          (position (pop-vertex& pop))
                          (lookat (pop-lookat& pop))
                          @wait-this-lags (spawner (pop-actor pop)))
                     (apply-spawn class actor-id position lookat #f @wait-this-lags spawner)))
  ;; backward
  backward-layout: '(actor)
  backward-store: (lambda (push actor)
                    (push-actor push actor))
  backward-apply: (lambda (client-id pop)
                    (let* ((actor (pop-actor pop)))
                      (when actor
                        (apply-despawn actor)))))


;;;
;;;; Block
;;;


(define-change add-block
  ;; forward
  forward-layout: '(vertex fixnum fixnum)
  forward-store: (lambda (push position block-id data-id)
                   (push-vertex push position)
                   (push-fixnum push block-id)
                   (push-fixnum push data-id))
  forward-apply: (lambda (client-id pop)
                   (let* ((position (pop-vertex pop))
                          (block-id (pop-fixnum pop))
                          (data-id (pop-fixnum pop)))
                     (apply-add-block (current-universe) position block-id data-id)))
  ;; backward
  backward-layout: '(vertex fixnum fixnum)
  backward-store: (lambda (push position replaced-block-id replaced-data-id)
                    (push-vertex push position)
                    (push-fixnum push replaced-block-id)
                    (push-fixnum push replaced-data-id))
  backward-apply: (lambda (client-id pop)
                    (let* ((position (pop-vertex pop))
                           (replaced-block-id (pop-fixnum pop))
                           (replaced-data-id (pop-fixnum pop)))
                      (apply-restore-block (current-universe) position replaced-block-id replaced-data-id))))


(define-change delete-block
  ;; forward
  forward-layout: '(vertex)
  forward-store: (lambda (push position)
                   (push-vertex push position))
  forward-apply: (lambda (client-id pop)
                   (let* ((position (pop-vertex pop)))
                     (apply-delete-block (current-universe) position)))
  ;; backward
  backward-layout: '(vertex fixnum fixnum)
  backward-store: (lambda (push position block-id data-id)
                    (push-vertex push position)
                    (push-fixnum push block-id)
                    (push-fixnum push data-id))
  backward-apply: (lambda (client-id pop)
                    (let* ((position (pop-vertex pop))
                           (block-id (pop-fixnum pop))
                           (data-id (pop-fixnum pop)))
                      (apply-restore-block (current-universe) position block-id data-id))))


(define-change forward-delete-block
  forward-layout: '(vertex)
  forward-store: (lambda (push position)
                   (push-vertex push position))
  forward-apply: (lambda (client-id pop)
                   (let* ((position (pop-vertex pop)))
                     (apply-delete-block (current-universe) position delay-update?: #f))))


;;;
;;;; Entity
;;;


(define-change add-entity
  ;; forward
  forward-layout: '(class id index literal vertex lookat vertex dye literal literal)
  forward-store: (lambda (push entity name position lookat scale color)
                   (push-class push (class-of entity))
                   (push-id push (get-id entity))
                   (push-index push (position->section-index (get-position entity)))
                   (push-literal push name)
                   (push-vertex push position)
                   (push-lookat push lookat)
                   (push-vertex push scale)
                   (push-dye push color)
                   (push-literal push (get-model entity))
                   (push-literal push (get-script-text entity)))
  forward-apply: (lambda (client-id pop)
                   (let* ((class (pop-class pop))
                          (id (pop-id pop))
                          (index (pop-index pop))
                          (name (pop-literal pop))
                          (position (pop-vertex pop))
                          (lookat (pop-lookat pop))
                          (scale (pop-vertex pop))
                          (color (pop-dye pop))
                          (model (pop-literal pop))
                          (script-text (pop-literal pop)))
                     (apply-add-entity (current-universe) class id index name position lookat scale color model script-text)))
  ;; backward
  backward-layout: '(id index)
  backward-store: (lambda (push entity)
                    (push-id push (get-id entity))
                    (push-index push (position->section-index (get-position entity))))
  backward-apply: (lambda (client-id pop)
                    (let* ((id (pop-id pop))
                           (index (pop-index pop)))
                      (apply-remove-entity (current-universe) id index))))


(define-change remove-entity
  ;; forward
  forward-layout: '(id index)
  forward-store: (lambda (push entity)
                   (push-id push (get-id entity))
                   (push-index push (position->section-index (get-position entity))))
  forward-apply: (lambda (client-id pop)
                   (let* ((id (pop-id pop))
                          (index (pop-index pop)))
                     (apply-remove-entity (current-universe) id index)))
  ;; backward
  backward-layout: '(class id index literal vertex lookat vertex dye literal literal)
  backward-store: (lambda (push entity)
                    (push-class push (class-of entity))
                    (push-id push (get-id entity))
                    (push-index push (position->section-index (get-position entity)))
                    (push-literal push (get-name entity))
                    (push-vertex push (get-position entity))
                    (push-lookat push (get-lookat entity))
                    (push-vertex push (get-scale entity))
                    (push-dye push (get-color entity))
                    (push-literal push (get-model entity))
                    (push-literal push (get-script-text entity)))
  backward-apply: (lambda (client-id pop)
                    (let* ((class (pop-class pop))
                           (id (pop-id pop))
                           (index (pop-index pop))
                           (name (pop-literal pop))
                           (position (pop-vertex pop))
                           (lookat (pop-lookat pop))
                           (scale (pop-vertex pop))
                           (color (pop-dye pop))
                           (model (pop-literal pop))
                           (script-text (pop-literal pop)))
                      (apply-add-entity (current-universe) class id index name position lookat scale color model script-text))))


(define-change forward-remove-entity
  forward-layout: '(id index)
  forward-store: (lambda (push id index)
                   (push-id push id)
                   (push-index push index))
  forward-apply: (lambda (client-id pop)
                   (let* ((id (pop-id pop))
                          (index (pop-index pop)))
                     (apply-remove-entity (current-universe) id index))))


(define-change set-property
  ;; forward
  forward-layout: '(id index literal literal)
  forward-store: (lambda (push entity property new-value)
                   (push-id push (get-id entity))
                   (push-index push (position->section-index (get-position entity)))
                   (push-literal push property)
                   (push-literal push new-value))
  forward-apply: (lambda (client-id pop)
                   (let* ((id (pop-id pop))
                          (index (pop-index pop))
                          (property (pop-literal pop))
                          (new-value (pop-literal pop)))
                     (apply-set-property (current-universe) id index property new-value)))
  ;; backward
  backward-layout: '(id index literal literal)
  backward-store: (lambda (push entity property old-value)
                    (push-id push (get-id entity))
                    (push-index push (position->section-index (get-position entity)))
                    (push-literal push property)
                    (push-literal push old-value))
  backward-apply: (lambda (client-id pop)
                    (let* ((id (pop-id pop))
                           (index (pop-index pop))
                           (property (pop-literal pop))
                           (old-value (pop-literal pop)))
                      (apply-set-property (current-universe) id index property old-value))))


(definition protected (set-property-change time entity property old-value new-value)
  (let ((world (current-world))
        (history (current-history)))
    (unless (or (not (get-id entity))
                (and (get-paused? history) (not (stepping-history?)))
                (equal? new-value old-value))
      (bidirectional-change 'set-property time
        (lambda (store push)
          (store push))
        (lambda (store push)
          (store push entity property new-value))
        (lambda (store push)
          (store push entity property old-value))))))


;;;
;;;; Zone
;;;


(define-change set-zone-property
  ;; forward
  forward-layout: '(literal literal)
  forward-store: (lambda (push property new-value)
                   (push-literal push property)
                   (push-literal push new-value))
  forward-apply: (lambda (client-id pop)
                   (let* ((property (pop-literal pop))
                          (new-value (pop-literal pop)))
                     (save-property (current-zone) property new-value)))
  ;; backward
  backward-layout: '(literal literal)
  backward-store: (lambda (push property old-value)
                    (push-literal push property)
                    (push-literal push old-value))
  backward-apply: (lambda (client-id pop)
                    (let* ((property (pop-literal pop))
                           (old-value (pop-literal pop)))
                      (save-property (current-zone) property old-value))))


(definition protected (set-zone-property-change time property old-value new-value)
  (let ((world (current-world))
        (history (current-history)))
    (unless (or (and (get-paused? history) (not (stepping-history?)))
                (equal? new-value old-value))
      (bidirectional-change 'set-zone-property time
        (lambda (store push)
          (store push))
        (lambda (store push)
          (store push property new-value))
        (lambda (store push)
          (store push property old-value))))))


(definition protected (update-zone-property property value)
  (let ((zone (current-zone)))
    (let ((old-value (read-property zone property))
          (new-value value))
      (save-property zone property new-value)
      (set-zone-property-change (current-seconds) property old-value new-value))))


;;;
;;;; Action
;;;


(define-change action
  ;; forward
  forward-layout: '(vertex)
  forward-store: (lambda (push position)
                   (push-vertex push position))
  forward-apply: (lambda (client-id pop)
                   (let* ((position (pop-vertex pop)))
                     (apply-action (current-universe) position)))
  ;; backward
  backward-layout: '()
  backward-store: (lambda (push)
                    )
  backward-apply: (lambda (client-id pop)
                    ))


;;;
;;;; Interact
;;;


(define-change interact
  ;; forward
  forward-layout: '(actor)
  forward-store: (lambda (push obj)
                   (push-actor push obj))
  forward-apply: (lambda (client-id pop)
                   (let* ((actor (pop-actor pop)))
                     (when actor
                       (apply-interact (current-universe) actor))))
  ;; backward
  backward-layout: '()
  backward-store: (lambda (push)
                    )
  backward-apply: (lambda (client-id pop)
                    ))


;;;
;;;; Double-Click
;;;


(define-change double-click
  ;; forward
  forward-layout: '(actor)
  forward-store: (lambda (push obj)
                   (push-actor push obj))
  forward-apply: (lambda (client-id pop)
                   (let* ((actor (pop-actor pop)))
                     (when actor
                       (apply-double-click (current-universe) actor))))
  ;; backward
  backward-layout: '()
  backward-store: (lambda (push)
                    )
  backward-apply: (lambda (client-id pop)
                    ))


;;;
;;;; Script
;;;


(definition protected (edit-script-change time actor edit?)
  (unless (server?)
    (let ((history (current-history)))
      ;; quicky
      (unless (is? actor Asset-Entity)
        (unless (get-paused? history)
          (bidirectional-change 'edit-script time
            (lambda (store push)
              (store push))
            (lambda (store push)
              (store push actor edit?))
            (lambda (store push)
              (store push actor edit?))))))))


(define-change edit-script
  ;; forward
  forward-layout: '(actor boolean)
  forward-store: (lambda (push actor edit?)
                   (push-actor push actor)
                   (push-boolean push edit?))
  forward-apply: (lambda (client-id pop)
                   (let* ((actor (pop-actor pop))
                          (edit? (pop-literal pop)))
                     (when actor
                       (edit-script client-id actor edit?))))
  ;; backward
  backward-layout: '(actor boolean)
  backward-store: (lambda (push actor edit?)
                    (push-actor push actor)
                    (push-boolean push edit?))
  backward-apply: (lambda (client-id pop)
                    (let* ((actor (pop-actor pop))
                           (edit? (pop-literal pop)))
                      (when actor
                        (edit-script client-id actor (not edit?))))))


(definition protected (update-script-change time actor range strings undo-range undo-strings run?)
  (unless (server?)
    (let ((history (current-history)))
      (unless (get-paused? history)
        (bidirectional-change 'update-script time
          (lambda (store push)
            (store push))
          (lambda (store push)
            (store push actor range strings run?))
          (lambda (store push)
            (store push actor undo-range undo-strings)))))))


(define-change update-script
  ;; forward
  forward-layout: '(actor literal literal boolean)
  forward-store: (lambda (push actor range strings run?)
                   (push-actor push actor)
                   (push-literal push range)
                   (push-literal push strings)
                   (push-boolean push run?))
  forward-apply: (lambda (client-id pop)
                   (let* ((actor (pop-actor pop))
                          (range (pop-literal pop))
                          (strings (pop-literal pop))
                          (run? (pop-boolean pop)))
                     (when actor
                       (apply-update client-id actor range strings run?))))
  ;; backward
  backward-layout: '(actor literal literal)
  backward-store: (lambda (push actor range strings)
                    (push-actor push actor)
                    (push-literal push range)
                    (push-literal push strings))
  backward-apply: (lambda (client-id pop)
                    (let* ((actor (pop-actor pop))
                           (range (pop-literal pop))
                           (strings (pop-literal pop)))
                      (when actor
                        (let ((manager (find-script-manager actor)))
                          (when manager
                            (let ((text (locate manager '(script text))))
                              ;; collabo quick hack for tests
                              (when (nu=? (valid-range text range) range)
                                (replace text range strings)))))))))


(definition protected (run-script-change time actor)
  (unless (or (server?)
              (and (client?) (client-script? actor)))
    (let ((history (current-history)))
      (unless (get-paused? history)
        (bidirectional-change 'run-script time
          (lambda (store push)
            (store push))
          (lambda (store push)
            (store push actor))
          (lambda (store push)
            (store push)))))))


(define-change run-script
  ;; forward
  forward-layout: '(actor)
  forward-store: (lambda (push actor)
                   (push-actor push actor))
  forward-apply: (lambda (client-id pop)
                   (let* ((actor (pop-actor pop)))
                     (when actor
                       (when (serving?)
                         (apply-run actor)))))
  ;; backward
  backward-layout: '()
  backward-store: (lambda (push)
                    )
  backward-apply: (lambda (client-id pop)
                    ))


(definition protected (state-script-change time actor state data)
  (let ((history (current-history)))
    (unless (get-paused? history)
      (bidirectional-change 'state-script time
        (lambda (store push)
          (store push))
        (lambda (store push)
          (store push actor state data))
        (lambda (store push)
          (store push))))))


(define-change state-script
  ;; forward
  forward-layout: '(actor literal literal)
  forward-store: (lambda (push actor state data)
                   (push-actor push actor)
                   (push-literal push state)
                   (push-literal push data))
  forward-apply: (lambda (client-id pop)
                   (let* ((actor (pop-actor pop))
                          (state (pop-literal pop))
                          (data (pop-literal pop)))
                     (when actor
                       (apply-state actor state data))))
  ;; backward
  backward-layout: '()
  backward-store: (lambda (push)
                    )
  backward-apply: (lambda (client-id pop)
                    ))


(definition protected edited-views
  (make-table test: eq?))


(class Server-Text-View extends Jazz-Text-View)


(definition (edit-script client-id actor edit?)
  (when (serving?)
    (let ((views (table-ref edited-views actor '())))
      (if edit?
          (let ((text (new Server-Text-View)))
            (if (null? views)
                (let ((script (get-script actor)))
                  (when script
                    (set-string-content text (get-text script))))
              (set-model text (get-model (cdar views))))
            (table-set! edited-views actor (cons (cons client-id text) views)))
        (let ((pair (assq client-id views)))
          (when pair
            (table-set! edited-views actor (remove! pair views))))))))


(definition protected inhibit-content-changes?
  (make-parameter #f))


(definition (apply-update client-id actor range strings run?)
  (let ((zone (current-zone)))
    (when (serving?)
      (let ((views (table-ref edited-views actor '())))
        (let ((pair (assq client-id views)))
          (when pair
            (let ((text (cdr pair)))
              ;; collabo quick hack for tests
              (when (nu=? (valid-range text range) range)
                (parameterize ((inhibit-content-changes? #t))
                  (replace text range strings))))))))
    (let ((manager (find-script-manager actor)))
      (if manager
          (let ((text (locate manager '(script text))))
            ;; collabo quick hack for tests
            (when (nu=? (valid-range text range) range)
              (parameterize ((inhibit-content-changes? #t))
                (replace (get-model text) range strings))
              (save-script manager)
              (when run?
                (when (serving?)
                  (let ((script (need-script zone actor)))
                    ;; sejour quicky
                    (when script
                      (evaluate-script (get-edited manager) script)))))))
        ;; collabo mega quick test
        (let ((text (new Server-Text-View))
              (script (need-script zone actor)))
          ;; sejour quicky
          (when script
            (when (get-text script)
              (set-string-content text (get-text script)))
            ;; collabo quick hack for tests
            (when (nu=? (valid-range text range) range)
              (parameterize ((inhibit-content-changes? #t))
                (replace text range strings)))
            (write-element zone script 'text (get-string-content text))
            (when run?
              (when (serving?)
                (evaluate-script actor script)))))))))


(definition (apply-run actor)
  (let ((script (get-script actor)))
    (when script
      (evaluate-script actor script evaluate-run?: #t))))


(definition (apply-state actor state data)
  (let ((script (get-script actor)))
    (when script
      (update-state script actor state data)))))
