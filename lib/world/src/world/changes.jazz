;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; Changes
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2016
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.changes jazz


(import (world)
        (world.autoload)
        (world.change)
        (world.entity)
        (world.geometry)
        (world.syntax (phase syntax)))


(define-change move
  forward: (lambda (next)
             (let* ((id (next))
                    (x (next))
                    (y (next))
                    (z (next)))
               (let ((entity (id->entity (flonum->fixnum id))))
                 (set-position~ entity (vertex& x y z)))))
  backward: (lambda (next)
              (let* ((id (next))
                     (x (next))
                     (y (next))
                     (z (next)))
                (let ((entity (id->entity (flonum->fixnum id))))
                  (set-position~ entity (vertex& x y z))))))


(define-change add
  forward: (lambda (next)
             (let* ((x (next))
                    (y (next))
                    (z (next))
                    (id (next))
                    (data-id (next)))
               (let ((pos (vertex& x y z))
                     (id (flonum->fixnum id))
                     (data-id (flonum->fixnum data-id)))
                 (apply-add-block~ (current-game) pos id data-id))))
  backward: (lambda (next)
              (let* ((x (next))
                     (y (next))
                     (z (next))
                     (replaced (next))
                     (replaced-data (next)))
                (let ((pos (vertex& x y z))
                      (replaced (flonum->fixnum replaced))
                      (replaced-data (flonum->fixnum replaced-data)))
                  (apply-restore-block~ (current-game) pos replaced replaced-data)))))


(define-change delete
  forward: (lambda (next)
             (let* ((x (next))
                    (y (next))
                    (z (next)))
               (let ((pos (vertex& x y z)))
                 (apply-delete-block~ (current-game) pos))))
  backward: (lambda (next)
              (let* ((x (next))
                     (y (next))
                     (z (next))
                     (block-id (next))
                     (data-id (next)))
                (let ((pos (vertex& x y z))
                      (block-id (flonum->fixnum block-id))
                      (data-id (flonum->fixnum data-id)))
                  (apply-restore-block~ (current-game) pos block-id data-id))))))
