;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Scripting
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2016
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.scripting jazz


(import (world)
        (world.autoload)
        (world.commands)
        (world.syntax (phase syntax))
        (world.task)
        (world.work))


(definition public current-instance
  (make-parameter #f))


(definition public current-task
  (make-parameter #f))


(definition public current-exit
  (make-parameter #f))


(definition public current-event
  (make-parameter #f))


;;;
;;;; Actor
;;;


(definition public (%%current-actor)
  (if (current-event)
      (get-actor~ (current-event))
    (current-instance)))


;;;
;;;; Event
;;;


(class Script-Event extends Object
  
  
  (slot actor initialize #f getter generate)
  (slot time  initialize #f getter generate)
  
  
  (method override (initialize actor time)
    (set! actor~self actor)
    (set! time~self time)))


(class Tick-Event extends Script-Event
  
  
  (slot elapse initialize #f getter generate)
  
  
  (method override (initialize actor time elapse)
    (nextmethod actor time)
    (set! elapse~self elapse)))


(class Interact-Event extends Script-Event)
(class Double-Click-Event extends Script-Event)
(class Hit-Event extends Script-Event)


;;;
;;;; Tick
;;;


(definition script-period
  (/ 1. 30.))


(definition protected (with-tick proc)
  (let ((task (current-task))
        (exit (current-exit))
        (actor (%%current-actor)))
    (let ((script (get-script~ actor)))
      (let (iter)
        (declare (proper-tail-calls))
        (poll-script actor script)
        (let ((last-tick (get-last-tick~ script)))
          (if (not last-tick)
              (begin
                (set-last-tick~ script (current-seconds))
                (task-sleep task script-period 0. exit)
                (iter))
            (let ((time (current-seconds)))
              (let ((elapse (- time last-tick)))
                (if (>= elapse script-period)
                    (parameterize ((current-event (new Tick-Event actor time elapse)))
                      (set-last-tick~ script time)
                      (animate~ actor elapse)
                      (proc actor script time elapse iter))
                  (task-sleep task (- script-period elapse) 0. exit)
                  (iter))))))))))


(definition protected (poll-script actor script)
  (let ((event (dequeue-event~ script)))
    (case event
      ((interact)
       (let ((handler (get-interact~ script)))
         (parameterize ((current-event (new Interact-Event actor (current-seconds))))
           (handler actor))))
      ((double-click)
       (let ((handler (get-double-click~ script)))
         (parameterize ((current-event (new Double-Click-Event actor (current-seconds))))
           (handler actor))))
      ((hit)
       (let ((handler (get-hit~ script)))
         (parameterize ((current-event (new Double-Click-Event actor (current-seconds))))
           (handler actor))))
      ((toggle-paused)
       (%%toggle-paused)))))


;;;
;;;; Move
;;;


(definition public stay-commands
  (new Commands))


(definition public (%%stay)
  (declare (proper-tail-calls))
  (with-tick
    (lambda (actor script time elapse iter)
      (tick-actor~ actor stay-commands time elapse #t 'slide)
      (iter))))


;;;
;;;; Pause
;;;


(definition public (%%paused?)
  (boolean (find-restart 'unpause)))


(definition public (%%pause)
  (with-restart-catcher 'unpause "Unpause"
    (lambda ()
      (%%stay))))


(definition public (%%unpause)
  (let ((restart (find-restart 'unpause)))
    (when restart
      (invoke-restart restart))))


(definition public (%%toggle-paused)
  (if (%%paused?)
      (%%unpause)
    (%%pause))))
