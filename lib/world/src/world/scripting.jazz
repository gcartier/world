;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Scripting
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2016
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.scripting jazz


(import (jazz.geometry)
        (jazz.io)
        (script)
        (world)
        (world.autoload)
        (world.commands)
        (world.configure)
        (world.draw)
        (world.dyes)
        (world.foreign.gstreamer)
        (world.generation.base)
        (world.geometry)
        (world.homogeneous)
        (world.index)
        (world.interface.inventory)
        (world.scriptum)
        (world.sound)
        (world.stream)
        (world.syntax (phase syntax))
        (world.task)
        (world.work))


;;;
;;;; Test
;;;


(import (jazz.cairo)
        (jazz.graphic)
        (world.quad-texture))


(definition public (make-video-texture name pipeline-description data width height framerate matrix)
  (let ((world (current-world))
        (zone (current-zone)))
    (init-gstreamer)
    (let ((ratio (/ (cast <fl> width) (cast <fl> height))))
      (let ((w ratio)
            (h 1.))
        (let ((v1 (vertex (/ w -2.) (/ h -2.) 0.))
              (v2 (vertex (/ w -2.) (/ h  2.) 0.))
              (v3 (vertex (/ w  2.) (/ h  2.) 0.))
              (v4 (vertex (/ w  2.) (/ h -2.) 0.)))
          (let ((quad-texture <Quad-Texture> (make-quad-texture width height v1 v2 v3 v4)))
            (let ((texture (get-texture~ quad-texture)))
              (let ((handle (get-handle~ (get-surface~ texture))))
                (let ((width (cairo_image_surface_get_width handle))
                      (height (cairo_image_surface_get_height handle))
                      (stride (cairo_image_surface_get_stride handle)))
                  (let ((description (pipeline-description data width: width height: height framerate: framerate))
                        (data (get-data~ texture))
                        (sampled (lambda ()
                                   (map-texture~ texture))))
                    (stream-video description data: data sampled: sampled)))))
            (register-draw~ zone name
              (lambda ()
                (render-texture~ quad-texture matrix)))
            #t))))))


(definition (make-test-video)
  (make-video-texture 'test test-pipeline #f 300 200 30
    (copy-matrix (matrix-multiply& (make-translation-matrix (vertex -9.5 7. 4.5))
                                   (make-scaling-matrix (vertex 6. 6. 6.))
                                   (make-rotation-matrix (vertex 0. 1. 0.) PI/4)))))


(definition (make-file-video)
  (make-video-texture 'file file-pipeline "/Users/cartier/Devel/gstreamer/media/sintel.webm" 854 480 30
    (copy-matrix (matrix-multiply& (make-translation-matrix (vertex 0. 7. 0.))
                                   (make-scaling-matrix (vertex 6. 6. 6.))))))


(definition (make-camera-video)
  (make-video-texture 'camera camera-pipeline #f 1280 720 30
    (copy-matrix (matrix-multiply& (make-translation-matrix (vertex 10. 7. 5.))
                                   (make-scaling-matrix (vertex 6. 6. 6.))
                                   (make-rotation-matrix (vertex 0. 1. 0.) (- PI/4))))))


(definition test-video #f)
(definition file-video #f)
(definition camera-video #f)


(definition public (%%test)
  (if (not test-video)
      (set! test-video (make-test-video))
    (if (not file-video)
        (set! file-video (make-file-video))
      (set! camera-video (make-camera-video)))))


;;;
;;;; Profile
;;;


(definition public (%%profile-report)
  (call-with-output-file (path-settings {File Home "Devel" "Yownu" "report" "PROFILE.txt"} append: #t)
    (lambda (output)
      (let ((timer (new jazz.time:Timer)))
        (let ((world (current-world)))
          (zone-regenerate~ world)
          (let ((duration (real-duration~ timer)))
            (format output "Duration: {a}{%}" duration)
            (display-message~ world (format "Duration: {a}" duration))))))))


;;;
;;;; World
;;;


(definition public (%%message msg)
  (let ((world (current-world)))
    (display-message~ world (->string msg))))


(definition public (%%say msg (size: size #f))
  (let ((entity (%%current-entity))
        (message (if (and (pair? msg)
                          (eq? (car msg) '<span>))
                     msg
                   (->string msg))))
    (world.changes:say-change entity message size: size)))


(definition public (%%unsay)
  (let ((entity (%%current-entity)))
    (world.changes:say-change entity #f)))


(definition public (%%name name)
  (let ((entity (%%current-entity)))
    (world.changes:name-change entity name)))


(definition public (%%unname)
  (let ((entity (%%current-entity)))
    (world.changes:name-change entity #f)))


;;;
;;;; Zone
;;;


(definition public (%%creatures)
  (let ((zone (current-zone)))
    (get-creatures~ zone)))


;;;
;;;; Script
;;;


(definition (get/create-script entity (create?: create? #t))
  (let ((zone (current-zone)))
    (or (get-script~ entity)
        (and create?
             (new world.scripter:Script parent: entity)))))


(definition public (%%set-tick-handler entity handler)
  (set-tick~ (get/create-script entity) handler))

(definition public (%%set-interact-handler entity handler)
  (set-interact~ (get/create-script entity) handler))

(definition public (%%set-double-click-handler entity handler)
  (set-double-click~ (get/create-script entity) handler))

(definition public (%%set-power-handler entity handler)
  (set-power~ (get/create-script entity) handler))

(definition public (%%set-unpower-handler entity handler)
  (set-unpower~ (get/create-script entity) handler))

(definition public (%%set-teleport-handler entity handler)
  (set-teleport~ (get/create-script entity) handler))

(definition public (%%set-explode-handler entity handler)
  (set-explode~ (get/create-script entity) handler))

(definition public (%%set-hit-handler entity handler)
  (set-hit~ (get/create-script entity) handler))


;;;
;;;; Argument
;;;


(definition protected (flonum-arg obj)
  (cond ((flonum? obj)
         obj)
        ((fixnum? obj)
         (cast <fl> obj))
        (else
         #f)))


(definition protected (position-arg obj)
  (cond ((vertex? obj)
         obj)
        ((not obj)
         (make-zero-vertex))
        (else
         #f)))


(definition protected (lookat-arg obj)
  (cond ((lookat? obj)
         obj)
        ((vertex? obj)
         (horizon-lookat obj))
        (else
         #f)))


(definition protected (scale-arg obj)
  (cond ((vertex? obj)
         obj)
        ((not obj)
         (vertex 1. 1. 1.))
        (else
         (let ((r (flonum-arg obj)))
           (vertex r r r)))))


;;;
;;;; Entity
;;;


(definition public (%%near-player? actor distance)
  (<= (vertex-distance (get-position~ actor) (get-position~ (current-me))) distance))


(definition public (%%get-position element)
  (get-position~ element))


(definition public (%%set-position element position)
  (set-position~ element position))


(definition public (%%set-lookat element lookat)
  (set-lookat~ element lookat))


(definition public (%%set-speed element speed)
  (set-speed~ element speed))


(definition public (%%set-motion actor motion)
  (set-motion~ actor motion))


(definition public (%%idle actor)
  (set-sprint?~ actor #f)
  ;; fix me idle motion stops continuous animations
  (set-motion~ actor 'walk))


(definition public (%%walk actor)
  (set-sprint?~ actor #f)
  (set-motion~ actor 'walk))


(definition public (%%run actor)
  (set-sprint?~ actor #f)
  (set-motion~ actor 'run))


(definition public (%%sprint actor)
  (set-sprint?~ actor #t)
  (set-motion~ actor 'run))


(definition public (%%set-sprint? actor flag)
  (set-sprint?~ actor flag))


(definition public (%%set-hover? actor flag)
  (set-hover?~ actor flag))


(definition public (%%full-life)
  (set-life~ (%%current-entity) 100.))


(definition public (%%animate actor animation (next: next #f))
  (assert (find-animation~ (cache-model~ actor) animation))
  (transition-morphing~ actor animation next: (or next "Idle"))
  (set-animation-active~ actor animation))


(definition public (%%teleport position)
  (let ((zone (current-zone)))
    (teleport~ zone position)))


;;;
;;;; Actor
;;;


(definition public (%%fire actor)
  (let ((dir (random-horizon)))
    (fire-missile~ actor dir 'bullet)))


(definition public (%%fire-at actor creature)
  (let ((dir (vertex-normalize (vertex- (get-position~ creature) (lens-center~ actor)))))
    (unless (vertex-xz-zero? dir)
      (%%set-lookat actor (%%lookat-horizon dir)))
    (fire-missile~ actor dir 'bullet)))


(definition public (%%fire-random actor)
  (let ((dir (vertex-normalize (random-direction))))
    (unless (vertex-xz-zero? dir)
      (%%set-lookat actor (%%lookat-horizon dir)))
    (fire-missile~ actor dir 'bullet)))


(definition public (%%nearest-spawned actor target)
  (let ((zone (current-zone)))
    (let ((position (get-position~ target))
          (nearest #f)
          (nearest-distance #f))
      (for-each (lambda (creature)
                  (when (get-spawner~ creature)
                    (unless (eq? creature actor)
                      (let ((dist (vertex-distance position (get-position~ creature))))
                        (when (or (not nearest)
                                  (< dist nearest-distance))
                          (set! nearest creature)
                          (set! nearest-distance dist))))))
                (get-creatures~ zone))
      nearest)))


(definition public (%%trek actor)
  (world.changes:trek-change actor))


(definition public (%%ride actor vehicle)
  (world.changes:ride-change actor vehicle))


(definition public (%%fly actor vehicle)
  (world.changes:fly-change actor vehicle))


(definition public (%%wheels actor)
  (world.changes:vehicle-change actor 'Wheels))


(definition public (%%hummer actor)
  (world.changes:vehicle-change actor 'Hummer))


(definition public (%%saucer actor)
  (world.changes:vehicle-change actor 'Saucer))


(definition public (%%rocket actor)
  (world.changes:vehicle-change actor 'Rocket))


;;;
;;;; Model
;;;


(definition public (%%get-model entity)
  (cache-model~ entity))


(definition public (%%set-run-speed model speed)
  (set-run-speed~ model speed))


;;;
;;;; Sound
;;;


(definition public (%%sound path (volume: volume #f))
  (when sounds?
    (let ((sound (cache-stream-sound path)))
      (unless (playing?~ sound)
        (when volume
          (set-volume~ sound volume))
        (play~ sound)))))


;;;
;;;; Move
;;;


(definition public (%%move distance)
  (declare (proper-tail-calls))
  (let ((actor (%%current-actor)))
    (let ((start (copy-vertex (get-position~ actor)))
          (target (vertex+ (get-position~ actor) (vertex-scalar* (get-sight~ actor) distance)))
          (line #f))
      (%%tick default-tick-period
        (lambda (actor script time elapse iter)
          (%%perform-move)
          (let ((traveled (vertex-distance (get-position~ actor) start)))
            (when (get-trail?~ script)
              (let ((end (copy-vertex (get-position~ actor))))
                (if (not line)
                    (let ((l (list start end (get-trail-color~ script))))
                      (trail-line actor l)
                      (set! line l))
                  (set-second! line end))))
            (if (< traveled distance)
                (iter)
              (unless (get-paused?~ (current-history))
                (when line
                  (set-second! line target))))))))))


(definition public (%%move-to target)
  (declare (proper-tail-calls))
  (let ((actor (%%current-actor)))
    (let ((start (copy-vertex (get-position~ actor)))
          (distance (vertex-distance (get-position~ actor) target))
          (line #f))
      (let ((direction (vertex- target (get-position~ actor))))
        (unless (vertex-near-zero? direction)
          (%%set-lookat actor (horizon-lookat (vertex-normalize direction)))
          (%%tick default-tick-period
            (lambda (actor script time elapse iter)
              (%%perform-move
                (lambda ()
                  (let ((traveled (vertex-distance (get-position~ actor) start)))
                    (when (>= traveled distance)
                      (set-position~ actor target)))))
              (let ((traveled (vertex-distance (get-position~ actor) start)))
                (when (get-trail?~ script)
                  (let ((end (copy-vertex (get-position~ actor))))
                    (if (not line)
                        (let ((l (list start end (get-trail-color~ script))))
                          (trail-line actor l)
                          (set! line l))
                      (set-second! line end))))
                (if (< traveled distance)
                    (iter)
                  (unless (get-paused?~ (current-history))
                    (when line
                      (set-second! line target))))))))))))


(definition public (%%rotate angle)
  (declare (proper-tail-calls))
  (let ((actor (%%current-actor)))
    (unless (= angle 0.)
      ;; negate so positive rotates clockwise
      (let ((angle (- angle)))
        ;; quick solution to not rotate more than 90 degrees at a time
        (let (iter (angle angle))
          (define (split-angle proc)
            (cond ((> angle PI/2)
                   (proc PI/2 (- angle PI/2)))
                  ((< angle (- PI/2))
                   (proc (- PI/2) (- angle (- PI/2))))
                  (else
                   (proc angle #f))))
          
          (split-angle
            (lambda (angle remaining)
              (let ((start (copy-vertex (get-sight~ actor)))
                    (target (rotate-upon angle (vertex 0. 1. 0.) (get-sight~ actor)))
                    (perform (if (> angle 0.) %%perform-rotate-left %%perform-rotate-right))
                    (test (if (> angle 0.) > <)))
                (%%tick default-tick-period
                  (lambda (actor script time elapse iter)
                    (perform)
                    (let ((traveled (vector-signed-angle start (get-sight~ actor) (vertex 0. 1. 0.))))
                      (if (not (test traveled angle))
                          (iter)
                        (unless (get-paused?~ (current-history))
                          (%%set-lookat actor (horizon-lookat target))))))))
              (when remaining
                (iter remaining)))))))))


(definition public (%%rotater dir target (count: count #f))
  (if (vertex-near? dir target)
      (lambda ()
        #f)
    (let ((up (vertex-normalize (cross-product dir target))))
      (let ((angle (vector-signed-angle dir target up)))
        (let ((step 1)
              (count (or count 30)))
          (lambda ()
            (if (> step count)
                #f
              (let ((angle (* angle (/ (cast <fl> step) (cast <fl> count)))))
                (let ((new-sight (rotate-upon angle up dir)))
                  (increase! step)
                  new-sight)))))))))


(definition public (%%jump actor (impulsion #f))
  (set-jump-impulsion~ actor impulsion)
  (when (eq? actor (%%current-actor))
    (let ((first? #t))
      (%%tick default-tick-period
        (lambda (actor script time elapse iter)
          (cond (first?
                 (%%perform-jump)
                 (set! first? #f)
                 (iter))
                ((get-jumping?~ actor)
                 (%%perform-stay)
                 (iter))))))))


(definition public (%%jump-player player (impulsion #f))
  (set-jump?~ player #t)
  (set-jump-impulsion~ player impulsion))


;;;
;;;; Follow
;;;


(definition public (%%follow actor target)
  (let ((history (current-history)))
    (let ((angle #f)
          (rotater #f))
      (define (orient)
        (when (not rotater)
          (with-lock
            (lambda ()
              (let ((sight (copy-vertex (get-sight~ actor)))
                    (direction (vertex- (get-position~ target) (get-position~ actor))))
                (unless (vertex-near-zero? direction)
                  (set! rotater (%%rotater (copy-vertex (get-sight~ actor))
                                           (vertex-normalize direction)
                                           count: 1))))))))
      
      (define (rotate)
        (with-lock
          (lambda ()
            (when rotater
              (let ((new-sight (rotater)))
                (if new-sight
                    (if (flying?~ actor)
                        (world.changes:lookat-fly-change actor new-sight)
                      (world.changes:lookat-horizon-change actor new-sight))
                  (set! rotater #f)))))))
      
      (define (move time elapse distance)
        (with-lock
          (lambda ()
            (cond ((flying?~ target) (unless (flying?~ actor) (%%fly actor 'Saucer)))
                  ((riding?~ target) (unless (riding?~ actor) (%%ride actor 'Wheels)))
                  (else (unless (trekking?~ actor) (%%trek actor))))
            (cond ((>= distance 10.) (%%sprint actor))
                  ((>= distance 4.) (%%run actor))
                  (else (%%walk actor)))
            (%%perform-move))))
      
      (%%tick default-tick-period
        (lambda (ignore-actor script time elapse iter)
          (unless (get-paused?~ history)
            (let ((distance (vertex-distance (get-position~ target) (get-position~ actor))))
              (if (<= distance 2.5)
                  (%%perform-stay)
                (orient)
                (rotate)
                (move time elapse distance))))
          (iter))))))


;;;
;;;; Path
;;;


(definition public (%%path actor (motion: motion %%walk) (flying?: flying? #f) (duration: duration #f))
  (declare (proper-tail-calls))
  (let ((history (current-history))
        (start (current-seconds)))
    (let ((path-duration #f)
          (rotater #f))
      (define (setup)
        (with-lock
          (lambda ()
            (orient #t)
            (reset))))
      
      (define (path)
        (with-lock
          (lambda ()
            (cond ((< (random-real) (if flying? .2 .4))
                   (set-motion~ actor 'idle))
                  (else
                   (orient)))
            (reset))))
      
      (define (orient (first? #f))
        (motion actor)
        (set! rotater (%%rotater (copy-vertex (get-sight~ actor))
                                 (if flying?
                                     (if first?
                                         (random-upward-fly)
                                       (random-fly))
                                   (random-horizon)))))
      
      (define (rotate)
        (when rotater
          (let ((new-sight (rotater)))
            (if new-sight
                (if flying?
                    (world.changes:lookat-fly-change actor new-sight)
                  (world.changes:lookat-horizon-change actor new-sight))
              (set! rotater #f)))))
      
      (define (reset)
        (set! path-duration (random-between 2. 8.)))
      
      (define (move time elapse)
        (with-lock
          (lambda ()
            (define (random-jump?)
              (< (random-real) .005))
            
            (let ((gravity? #t)
                  (response 'slide)
                  (ignore-entities? #t)
                  (ignore-players? #f)
                  (ignore-me? #f))
              (let ((idle? (eq? (get-motion~ actor) 'idle)))
                (if (and (get-jump?~ actor) (not idle?))
                    (begin
                      (set-jump?~ actor #f)
                      (tick-actor~ actor move/jump-commands time elapse gravity? response ignore-entities?: ignore-entities? ignore-players?: ignore-players? ignore-me?: ignore-me? proportional-slide?: #f))
                  (let ((commands (if idle? stay-commands move-commands)))
                    (let ((info (tick-actor~ actor commands time elapse gravity? response ignore-entities?: ignore-entities? ignore-players?: ignore-players? ignore-me?: ignore-me? proportional-slide?: #f)))
                      (when (and info (or (not (get-jump-time~ actor)) (> time (+ (get-jump-time~ actor) (if #f @w aggro-target 1. 2.)))))
                        (bind-values (center slide-collisions fall-collisions) info
                          (when (or (not-null? slide-collisions) (random-jump?))
                            (set-jump?~ actor #t))))))))))))
      
      (setup)
      (%%tick default-tick-period
        (lambda (ignore-actor script time elapse iter)
          (unless (get-paused?~ history)
            (when (and path-duration (> path-duration 0.))
              (decrease! path-duration elapse))
            (move time elapse)
            (rotate)
            (when (<= path-duration 0.)
              (path)))
          (unless (and duration (>= (- (current-seconds) start) duration))
            (iter)))))))


;;;
;;;; Bot
;;;


(definition public (%%bot actor)
  (declare (proper-tail-calls))
  (let ((initial-duration 5.)
        (other-duration 10.))
    (define (walk duration)
      (with-lock
        (lambda ()
          (%%trek actor)))
      (%%path actor motion: %%walk duration: duration))
    
    (define (run duration)
      (with-lock
        (lambda ()
          (%%trek actor)))
      (%%path actor motion: %%run duration: duration))
    
    (define (ride duration)
      (with-lock
        (lambda ()
          (%%ride actor (random-element '(Wheels Wheels Wheels Hummer)))))
      (%%path actor motion: %%run duration: duration))
    
    (define (fly duration)
      (with-lock
        (lambda ()
          (%%fly actor (random-element '(Saucer Saucer Saucer Rocket)))))
      (%%path actor motion: %%run flying?: #t duration: duration))
    
    (let ((initial-behavior walk)
          (behaviors
            (list
              walk walk
              run
              ride
              fly)))
      (define (change-behavior)
        (random-element behaviors))
      
      (let (iter (behavior initial-behavior) (duration initial-duration))
        (behavior duration)
        (iter (change-behavior) other-duration)))))


;;;
;;;; LookAt
;;;


(definition public (%%lookat-horizon dir)
  (horizon-lookat (vertex-normalize (vertex (vertex-x dir) 0. (vertex-z dir)))))


(definition public (%%lookat-player actor)
  (let ((dir (vertex- (get-position~ (current-me)) (get-position~ actor))))
    (unless (vertex-xz-zero? dir)
      (%%set-lookat actor (%%lookat-horizon dir)))))


(definition public (%%lookat-target target actor)
  (let ((dir (vertex- target (get-position~ actor))))
    (unless (vertex-xz-zero? dir)
      (%%set-lookat actor (%%lookat-horizon dir)))))


(definition public (%%lookat-rotate element angle)
  (%%set-lookat element (rotate-lookat (get-lookat~ element) (degree->radian angle) (vertex 0. 1. 0.))))


;;;
;;;; Block
;;;


@too-much-for-now-to-be-obstructed-by-blocks
(definition public (with-script-interaction position proc)
  (let ((world (current-world))
        (game (current-game))
        (actor (%%current-actor)))
    (let ((max-distance (get-view-radius~ world))
          (lens (lens-center~ actor)))
      (let ((direction (vertex-normalize (vertex- position lens))))
        (let ((closest (ray-closest-polygon lens direction max-distance ignore-non-physical?: #f ignore-entities?: #f ignore-players?: #t)))
          (when closest
            (let ((poly (car closest)))
              (when poly
                (with-polygon-interaction~ game poly
                  (lambda (poly block fore)
                    (proc poly fore)))))))))))


(definition public (%%add-block location id)
  (let ((game (current-game)))
    (apply-add-block~ game (location->position location) id 0)))


(definition public (%%delete-block location)
  (let ((game (current-game)))
    (apply-delete-block~ game (location->position location))))


(definition public (%%change-block location id)
  (let ((game (current-game)))
    (apply-add-block~ game (location->position location) id 0)))


(definition public (with-location location proc (create?: create? #t))
  (let ((game (current-game))
        (zone (current-zone)))
    (updating-sections~ zone
      (lambda (add-section)
        (call-with-position~ zone (location->position location)
          (lambda (section block-id data-id i j k x y z with-field block-ref block-set! data-ref data-set! blocklight-ref blocklight-set! skylight-ref skylight-set!)
            (with-field i j k
              (lambda (section index)
                (proc add-section section index block-ref block-set! data-ref data-set!))))
          create?: create?)))))


(definition public (%%get-block location)
  (or (with-location location
        (lambda (add-section section index block-ref block-set! data-ref data-set!)
          (block-ref section index))
        create?: #f)
      0 @wait Air))


(definition public (%%set-block location id)
  (with-location location
    (lambda (add-section section index block-ref block-set! data-ref data-set!)
      (block-set! section index id)
      (add-section section))))


(definition public (%%set-block-data location data)
  (with-location location
    (lambda (add-section section index block-ref block-set! data-ref data-set!)
      (data-set! section index data)
      (add-section section))))


(definition public (%%interact-block location)
  (let ((game (current-game)))
    (interact-at~ game (location->position location))))


;;;
;;;; Entity
;;;


(definition public (%%add-entity class name position lookat scale model script-text)
  (let ((game (current-game)))
    (apply-add-entity~ game class #f name position lookat scale model script-text)))


(definition public (%%remove-entity entity)
  (let ((game (current-game)))
    (apply-remove-entity~ game entity)))


(definition public (%%find-entity name)
  (let ((zone (current-zone)))
    (find-if (lambda (entity)
               (equal? (get-name~ entity) name))
             (get-entities~ zone))))


;;;
;;;; Trail
;;;


(definition public (%%trail (color #f))
  (let ((zone (current-zone)))
    (let ((actor (%%current-actor)))
      (let ((script (get-script~ actor)))
        (set-trail?~ script #t)
        (when (not (get-trail~ script))
          (set-trail~ script (new-queue)))
        (when color
          (set-trail-color~ script (case color
                                     ((red) red-dye)
                                     ((green) green-dye)
                                     (else blue-dye))))
        (register-draw~ zone actor
          (lambda ()
            (draw-trail actor)))))))


(definition public (%%untrail)
  (let ((zone (current-zone)))
    (let ((actor (%%current-actor)))
      (let ((script (get-script~ actor)))
        (set-trail?~ script #f)
        @w
        (unregister-draw~ zone actor)))))


(definition public (%%trail-color color)
  (let ((zone (current-zone)))
    (let ((actor (%%current-actor)))
      (let ((script (get-script~ actor)))
        (set-trail-color~ script (case color
                                   ((red) red-dye)
                                   ((green) green-dye)
                                   (else blue-dye)))))))


(definition public (%%clear-trail)
  (let ((actor (%%current-actor)))
    (let ((script (get-script~ actor)))
      (set-trail~ script (new-queue)))))


(definition (trail-line actor line)
  (let ((script (get-script~ actor)))
    (enqueue (get-trail~ script) line)))


(definition (draw-trail actor)
  (let ((script (get-script~ actor)))
    (for-each (lambda (line)
                (bind (start end color) line
                  (render-line start
                               end
                               .04
                               (or color blue-dye))))
              (queue-list (get-trail~ script)))))


;;;
;;;; Belt
;;;


(definition public (%%belt-id rank)
  (let ((interface (current-interface)))
    (let ((belt (child~ interface 'belt)))
      (let ((slot-table (get-slot-table~ belt)))
        (get-id~ (table-ref slot-table rank))))))


(definition public (%%belt-count rank)
  (let ((interface (current-interface)))
    (let ((belt (child~ interface 'belt)))
      (let ((slot-table (get-slot-table~ belt)))
        (get-count~ (table-ref slot-table rank))))))


(definition public (%%belt-add rank id count)
  (let ((interface (current-interface)))
    (let ((belt (child~ interface 'belt)))
      (let ((slot-table (get-slot-table~ belt)))
        (set-id~ (table-ref slot-table rank) id)
        (set-count~ (table-ref slot-table rank) count)
        (save-inventory)
        (invalidate-view~ belt)))))


(definition public (%%belt-remove rank id count)
  (let ((interface (current-interface)))
    (let ((belt (child~ interface 'belt)))
      (let ((slot-table (get-slot-table~ belt)))
        (set-id~ (table-ref slot-table rank) #f)
        (set-count~ (table-ref slot-table rank) 0)
        (save-inventory)
        (invalidate-view~ belt)))))


(definition public (%%belt-empty)
  (let ((interface (current-interface)))
    (let ((belt (child~ interface 'belt)))
      (reset-inventory~ belt)
      (save-inventory)
      (invalidate-view~ belt)))))
