;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Scripting
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2016
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.scripting jazz


(import (jazz.geometry)
        (world)
        (world.audio)
        (world.autoload)
        (world.commands)
        (world.draw)
        (world.dyes)
        (world.generation.base)
        (world.geometry)
        (world.homogeneous)
        (world.syntax (phase syntax))
        (world.task)
        (world.work))


(definition public current-instance
  (make-parameter #f))


(definition public current-task
  (make-parameter #f))


(definition public current-exit
  (make-parameter #f))


(definition public current-event
  (make-parameter #f))


;;;
;;;; World
;;;


(definition public (%%message msg)
  (let ((world (current-world)))
    (display-message~ world (->string msg))))


;;;
;;;; Script
;;;


;; quick hack until a better understanding of all this emerges
(definition protected (with-lock thunk)
  (thunk)
  @wait
  (with-maybe-task-mutex
    thunk))


(definition (get/create-script actor (create?: create? #t))
  (let ((zone (current-zone)))
    (or (get-script~ actor)
        (and create?
             (new world.scripter:Script parent: actor)))))


(definition public (%%set-tick-handler actor handler)
  (set-tick~ (get/create-script actor) handler))

(definition public (%%set-interact-handler actor handler)
  (set-interact~ (get/create-script actor) handler))

(definition public (%%set-double-click-handler actor handler)
  (set-double-click~ (get/create-script actor) handler))

(definition public (%%set-hit-handler actor handler)
  (set-hit~ (get/create-script actor) handler))


;;;
;;;; Actor
;;;


(definition public (%%current-actor)
  (if (current-event)
      (get-actor~ (current-event))
    (current-instance)))


(definition public (%%near-player? actor distance)
  (<= (vertex-distance (get-position~ actor) (get-position~ (current-me))) distance))


(definition public (%%get-position element)
  (get-position~ element))


(definition public (%%set-position element position)
  (set-position~ element position))


(definition public (%%set-lookat element lookat)
  (set-lookat~ element lookat))


(definition public (%%set-speed element speed)
  (set-speed~ element speed))


(definition public (%%set-motion actor motion)
  (set-motion~ actor motion))


(definition public (%%set-sprint? actor flag)
  (set-sprint?~ actor flag))


(definition public (%%set-hover? actor flag)
  (set-hover?~ actor flag))


(definition public (%%set-billboard actor name)
  (set-billboard-name~ actor name))


(definition public (%%full-life)
  (set-life~ (%%current-actor) 100.))


(definition public (%%teleport position)
  (let ((zone (current-zone)))
    (teleport~ zone position)))


(definition public (%%jump (impulsion #f))
  (let ((me (current-me)))
    (set-jump?~ me #t)
    (set-jump-impulsion~ me impulsion)))


;;;
;;;; Model
;;;


(definition public (%%get-model entity)
  (cache-model~ entity))


(definition public (%%set-run-speed model speed)
  (set-run-speed~ model speed))


;;;
;;;; Sound
;;;


(definition public (%%sound path (volume: volume #f))
  (when sounds?
    (let ((sound (cache-stream-sound path)))
      (unless (playing?~ sound)
        (when volume
          (set-volume~ sound volume))
        (play~ sound)))))


;;;
;;;; Event
;;;


(class Script-Event extends Object
  
  
  (slot actor initialize #f getter generate)
  (slot time  initialize #f getter generate)
  
  
  (method override (initialize actor time)
    (set! actor~self actor)
    (set! time~self time)))


(class Tick-Event extends Script-Event
  
  
  (slot elapse initialize #f getter generate)
  
  
  (method override (initialize actor time elapse)
    (nextmethod actor time)
    (set! elapse~self elapse)))


(class Interact-Event extends Script-Event)
(class Double-Click-Event extends Script-Event)
(class Hit-Event extends Script-Event)


;;;
;;;; Tick
;;;


(definition script-period
  (/ 1. 30.))


(definition protected (with-tick proc)
  (let ((task (current-task))
        (exit (current-exit))
        (actor (%%current-actor)))
    (let ((script (get-script~ actor)))
      (let (iter)
        (declare (proper-tail-calls))
        (poll-script actor script)
        (let ((last-tick (get-last-tick~ script)))
          (if (not last-tick)
              (begin
                (set-last-tick~ script (current-seconds))
                (task-sleep task script-period 0. exit)
                (iter))
            (let ((time (current-seconds)))
              (let ((elapse (- time last-tick)))
                (if (>= elapse script-period)
                    (parameterize ((current-event (new Tick-Event actor time elapse)))
                      (set-last-tick~ script time)
                      (animate~ actor elapse)
                      (proc actor script time elapse iter))
                  (task-sleep task (- script-period elapse) 0. exit)
                  (iter))))))))))


(definition protected (poll-script actor script)
  (let ((event (dequeue-event~ script)))
    (case event
      ((interact)
       (let ((handler (get-interact~ script)))
         (parameterize ((current-event (new Interact-Event actor (current-seconds))))
           (handler actor))))
      ((double-click)
       (let ((handler (get-double-click~ script)))
         (parameterize ((current-event (new Double-Click-Event actor (current-seconds))))
           (handler actor))))
      ((hit)
       (let ((handler (get-hit~ script)))
         (parameterize ((current-event (new Double-Click-Event actor (current-seconds))))
           (handler actor))))
      ((toggle-paused)
       (%%toggle-paused)))))


;;;
;;;; Perform
;;;


(definition public stay-commands
  (new Commands))

(definition public move-commands
  (let ((commands (new Commands)))
    (move-forward~ commands)
    commands))

(definition public sprint-commands
  (let ((commands (new Commands)))
    (sprint-forward~ commands)
    commands))

(definition public rotate-left-commands
  (let ((commands (new Commands)))
    (rotate-left~ commands)
    commands))

(definition public rotate-right-commands
  (let ((commands (new Commands)))
    (rotate-right~ commands)
    commands))

(definition public jump-commands
  (let ((commands (new Commands)))
    (jump~ commands)
    commands))


(definition public (perform-stay)
  (perform stay-commands))

(definition public (perform-move)
  (perform (if (get-sprint?~ (%%current-actor)) sprint-commands move-commands)))

(definition public (perform-sprint)
  (perform sprint-commands))

(definition public (perform-rotate-left)
  (perform rotate-left-commands))

(definition public (perform-rotate-right)
  (perform rotate-right-commands))

(definition public (perform-hover)
  (perform move-commands gravity?: #f))

(definition public (perform-jump)
  (perform jump-commands))


(definition public (perform commands (gravity?: gravity? #t))
  (let ((event (current-event)))
    (let ((actor (get-actor~ event))
          (time (get-time~ event))
          (elapse (get-elapse~ event)))
      (with-lock
        (lambda ()
          (tick-actor~ actor commands time elapse gravity? 'slide))))))


;;;
;;;; Pause
;;;


(definition public (%%paused?)
  (boolean (find-restart 'unpause)))


(definition public (%%pause)
  (with-restart-catcher 'unpause "Unpause"
    (lambda ()
      (%%stay))))


(definition public (%%unpause)
  (let ((restart (find-restart 'unpause)))
    (when restart
      (invoke-restart restart))))


(definition public (%%toggle-paused)
  (if (%%paused?)
      (%%unpause)
    (%%pause)))


;;;
;;;; LookAt
;;;


(definition public (%%lookat-horizon dir)
  (horizon-lookat (vertex-normalize& (vertex& (vertex-x dir) 0. (vertex-z dir)))))


(definition public (%%lookat-player actor)
  (let ((dir (vertex-& (get-position~ (current-me)) (get-position~ actor))))
    (%%set-lookat actor (%%lookat-horizon dir))))


(definition public (%%lookat-target target actor)
  (let ((dir (vertex- target (get-position~ actor))))
    (%%set-lookat actor (%%lookat-horizon dir))))


(definition public (%%lookat-rotate element angle)
  (%%set-lookat element (rotate-lookat (get-lookat~ element) (degree->radian angle) (vertex 0. 1. 0.))))


;;;
;;;; Move
;;;


(definition public (%%stay)
  (declare (proper-tail-calls))
  (with-tick
    (lambda (actor script time elapse iter)
      (perform-stay)
      (iter))))


(definition public (%%move distance)
  (declare (proper-tail-calls))
  (let ((actor (%%current-actor)))
    (let ((start (copy-vertex (get-position~ actor)))
          (target (vertex+ (get-position~ actor) (vertex-scalar*& (get-sight~ actor) distance)))
          (line #f))
      (with-tick
        (lambda (actor script time elapse iter)
          (perform-move)
          (let ((traveled (vertex-distance (get-position~ actor) start)))
            (when (get-trail?~ script)
              (let ((end (copy-vertex (get-position~ actor))))
                (if (not line)
                    (let ((l (list start end (get-trail-color~ script))))
                      (trail-line actor l)
                      (set! line l))
                  (set-second! line end))))
            (if (< traveled distance)
                (iter)
              (set-position~ actor target)
              (when line
                (set-second! line target)))))))))


(definition public (%%move-to target)
  (declare (proper-tail-calls))
  (let ((actor (%%current-actor)))
    (let ((start (copy-vertex (get-position~ actor)))
          (distance (vertex-distance (get-position~ actor) target))
          (line #f))
      (let ((direction (vertex-& target (get-position~ actor))))
        (unless (vertex-zero? direction)
          (%%set-lookat actor (horizon-lookat (vertex-normalize& direction)))
          (with-tick
            (lambda (actor script time elapse iter)
              (perform-move)
              (let ((traveled (vertex-distance (get-position~ actor) start)))
                (when (get-trail?~ script)
                  (let ((end (copy-vertex (get-position~ actor))))
                    (if (not line)
                        (let ((l (list start end (get-trail-color~ script))))
                          (trail-line actor l)
                          (set! line l))
                      (set-second! line end))))
                (if (< traveled distance)
                    (iter)
                  (set-position~ actor target)
                  (when line
                    (set-second! line target)))))))))))


(definition public (%%rotate angle)
  (declare (proper-tail-calls))
  (let ((actor (%%current-actor)))
    (unless (= angle 0.)
      (let ((start (copy-vertex (get-sight~ actor)))
            (target (rotate-upon angle (vertex& 0. 1. 0.) (get-sight~ actor)))
            (perform (if (> angle 0.) perform-rotate-left perform-rotate-right))
            (test (if (> angle 0.) > <)))
        (with-tick
          (lambda (actor script time elapse iter)
            (perform)
            (let ((traveled (vector-signed-angle start (get-sight~ actor) (vertex& 0. 1. 0.))))
              (if (not (test traveled angle))
                  (iter)
                (%%set-lookat actor (horizon-lookat target))))))))))


;;;
;;;; Block
;;;


@too-much-for-now-to-be-obstructed-by-blocks
(definition public (with-script-interaction position proc)
  (let ((world (current-world))
        (game (current-game))
        (actor (%%current-actor)))
    (let ((max-distance (get-view-radius~ world))
          (lens (lens-center~ actor)))
      (let ((direction (vertex-normalize (vertex- position lens))))
        (let ((closest (ray-closest-polygon lens direction max-distance ignore-non-physical?: #f ignore-entities?: #f ignore-players?: #t)))
          (when closest
            (let ((poly (car closest)))
              (when poly
                (with-polygon-interaction~ game poly
                  (lambda (poly block fore)
                    (proc poly fore)))))))))))


(definition public (%%add-block position block-id)
  (let ((game (current-game)))
    (apply-add-block~ game position block-id 0)))


(definition public (%%delete-block position)
  )


(definition public (%%change-block position block-id)
  )


;;;
;;;; Trail
;;;


(definition public (%%trail (color #f))
  (let ((zone (current-zone)))
    (let ((actor (%%current-actor)))
      (let ((script (get-script~ actor)))
        (set-trail?~ script #t)
        (when (not (get-trail~ script))
          (set-trail~ script (new-queue)))
        (when color
          (set-trail-color~ script (case color
                                     ((red) red-dye)
                                     ((green) green-dye)
                                     (else blue-dye))))
        (register-draw~ zone actor
          (lambda ()
            (draw-trail actor)))))))


(definition public (%%untrail)
  (let ((zone (current-zone)))
    (let ((actor (%%current-actor)))
      (let ((script (get-script~ actor)))
        (set-trail?~ script #f)
        @w
        (unregister-draw~ zone actor)))))


(definition public (%%trail-color color)
  (let ((zone (current-zone)))
    (let ((actor (%%current-actor)))
      (let ((script (get-script~ actor)))
        (set-trail-color~ script (case color
                                   ((red) red-dye)
                                   ((green) green-dye)
                                   (else blue-dye)))))))


(definition public (%%clear-trail)
  (let ((actor (%%current-actor)))
    (let ((script (get-script~ actor)))
      (set-trail~ script (new-queue)))))


(definition (trail-line actor line)
  (let ((script (get-script~ actor)))
    (enqueue (get-trail~ script) line)))


(definition (draw-trail actor)
  (let ((script (get-script~ actor)))
    (for-each (lambda (line)
                (bind (start end color) line
                  (render-line start
                               end
                               .04
                               (or color blue-dye))))
              (queue-list (get-trail~ script)))))


(definition public (%%plot-axes (dx 0) (dz 0))
  (let ((dx (cast <fl> dx))
        (dz (cast <fl> dz)))
    (%%plot-line (vertex (+ -10. dx) 4. (+ 0. dz)) (vertex (+ 10. dx) 4. (+ 0. dz)) 'blue)
    (%%plot-line (vertex (+ 0. dx) 4. (+ -10. dz)) (vertex (+ 0. dx) 4. (+ 10. dz)) 'blue)
    (loop (for x <fl> from -10. to 10. by 1.)
          (%%plot-line (vertex (+ x dx) 4. (+ -.5 dz)) (vertex (+ x dx) 4. (+ .5 dz)) 'blue))
    (loop (for z <fl> from -10. to 10. by 1.)
          (%%plot-line (vertex (+ -.5 dx) 4. (+ z dz)) (vertex (+ .5 dx) 4. (+ z dz)) 'blue))))


(definition public (%%plot-line from to (color 'red))
  (%%untrail)
  (%%move-to from)
  (%%trail color)
  (%%move-to to))


;;;
;;;; Various
;;;


(definition public (%%animate actor animation (next: next #f))
  (assert (find-animation~ (cache-model~ actor) animation))
  (transition-morphing~ actor animation next: (or next "Idle"))
  (set-animation-active~ actor animation))


(definition public (%%creatures)
  (let ((zone (current-zone)))
    (get-creatures~ zone)))


(definition public (%%block-interact a b c)
  (let ((game (current-game)))
    (interact-at~ game (location->position (vector a b c)))))


(definition public (%%set-block-data a b c data)
  (let ((game (current-game))
        (zone (current-zone)))
    (updating-sections~ zone
      (lambda (add-section)
        (call-with-position~ zone (location->position (vector a b c))
          (lambda (section block-id data-id i j k x y z with-field block-ref block-set! data-ref data-set! blocklight-ref blocklight-set! skylight-ref skylight-set!)
            (with-field i j k
              (lambda (section index)
                (data-set! section index data)
                (add-section section))))))))))
