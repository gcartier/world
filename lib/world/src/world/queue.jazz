;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; Circular Queues
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.queue jazz


(import (world)
        (world.autoload))


(proclaim (not check bounds zero)
          (warn optimizations))


;;;
;;;; Circular
;;;


(definition GOLDEN_RATIO <fl>
  1.6)


(class Circular-Queue extends Object
  
  
  (slot priority <fx>     getter generate)
  (slot count    <fx>)
  (slot content  <vector>)
  (slot head     <fx>)
  (slot tail     <fx>)
  (slot size     <fx>     getter generate)
  
  
  (method override (initialize self prio cnt)
    (set! priority prio)
    (set! count cnt)
    (set! content (make-vector cnt))
    (set! head 0)
    (set! tail 0)
    (set! size 0))
  
  
  (method override (print self output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{a}" size))))
  
  
  (method public (empty? self)
    (= head tail))
  
  
  (method public (reset self proc)
    (loop (for n from 0 below size)
          (let ((offset (modulo (+ head n) count)))
            (when proc
              (let ((obj (vector-ref content offset)))
                ;; quick hack we need to understand how sometimes
                ;; in a bailout-client we can end up getting a #f
                (when obj
                  (proc obj priority))))
            (vector-set! content offset #f)))
    (set! head 0)
    (set! tail 0)
    (set! size 0))
  
  
  (method public (push self obj)
    (let ((new-size (+ size 1)))
      (when (> new-size count)
        (let ((new-count (if (= count 0) 8 (fxround (* count GOLDEN_RATIO)))))
          (let ((new-content (make-vector new-count)))
            (loop (for n from 0 below size)
                  (vector-set! new-content n (vector-ref content (modulo (+ head n) count))))
            (set! count new-count)
            (set! content new-content)
            (set! head 0)
            (set! tail size))))
      (vector-set! content tail obj)
      (set! tail (modulo (+ tail 1) count))
      (set! size new-size)))
  
  
  (method public (pop self)
    (if (<= size 0)
        (error "Queue is empty")
      (prog1 (vector-ref content head)
        (vector-set! content head #f)
        (set! head (modulo (+ head 1) count))
        (decrease! size)))))


;;;
;;;; Priorities
;;;


(class Priorities-Queue extends Object
  
  
  (slot count     <fx>)
  (slot queues    <vector>)
  (slot mutex              initialize (make-mutex))
  (slot condition-variable initialize (make-condition-variable))
  
  
  (method override (initialize self cnt <fx> (reserved 0))
    (nextmethod self)
    (assert (> cnt 0))
    (set! count cnt)
    (set! queues (list->vector (map (lambda (priority) (new Circular-Queue priority reserved))
                                    (naturals 0 count)))))
  
  
  (method inline (get-queue self priority <fx>) <Circular-Queue>
    (element queues priority))
  
  
  (method (top-queue self) <Circular-Queue+>
    (declare (proper-tail-calls))
    (let (iter (priority 0))
      (if (< priority count)
          (let ((queue (get-queue self priority)))
            (if (not (empty? queue))
                queue
              (iter (+ priority 1))))
        #f)))
  
  
  (method package (top-priority self) <fx+>
    (declare (proper-tail-calls))
    (let (iter (priority 0))
      (if (< priority count)
          (let ((queue (get-queue self priority)))
            (if (not (empty? queue))
                priority
              (iter (+ priority 1))))
        #f)))
  
  
  (method public (size self)
    (mutex-lock! mutex)
    (prog1 (let ((size 0))
             (loop (for queue <Circular-Queue> in-vector queues)
                   (increase! size (get-size queue)))
             size)
      (mutex-unlock! mutex)))
  
  
  (method public (empty? self)
    (mutex-lock! mutex)
    (prog1 (not (top-queue self))
      (mutex-unlock! mutex)))
  
  
  (method public (has? self priority)
    (mutex-lock! mutex)
    (prog1 (not (empty? (get-queue self priority)))
      (mutex-unlock! mutex)))
  
  
  (method public (reset self proc)
    (mutex-lock! mutex)
    (loop (for queue <Circular-Queue> in-vector queues)
          (reset queue proc))
    (mutex-unlock! mutex))
  
  
  (method public (trim self priority proc)
    (mutex-lock! mutex)
    (let ((trimmed 0))
      (loop (for p from priority below count)
            (let ((queue (get-queue self p)))
              (increase! trimmed (get-size queue))
              (reset queue proc)))
      (prog1 trimmed
        (mutex-unlock! mutex))))
  
  
  (method public (trim-priority self priority proc)
    (mutex-lock! mutex)
    (let ((queue (get-queue self priority)))
      (let ((trimmed (get-size queue)))
        (reset queue proc)
        (prog1 trimmed
          (mutex-unlock! mutex)))))
  
  
  (method public (push self obj priority <fx>)
    (mutex-lock! mutex)
    (push (get-queue self priority) obj)
    (mutex-unlock! mutex)
    (condition-variable-signal! condition-variable))
  
  
  (method public (pop self timeout)
    (declare (proper-tail-calls))
    (let (iter)
      (mutex-lock! mutex)
      (let ((queue (top-queue self)))
        (cond (queue
               (prog1 (pop queue)
                 (mutex-unlock! mutex)))
              ((mutex-unlock! mutex condition-variable timeout)
               (iter))
              (else
               (eof-object))))))
  
  
  (method public (pop! self timeout info)
    (declare (proper-tail-calls))
    (let (iter)
      (mutex-lock! mutex)
      (let ((queue (top-queue self)))
        (cond (queue
               (let ((value (pop queue))
                     (priority (get-priority queue)))
                 (mutex-unlock! mutex)
                 (vector-set! info 0 value)
                 (vector-set! info 1 priority)))
              ((mutex-unlock! mutex condition-variable timeout)
               (iter))
              (else
               (vector-set! info 0 (eof-object))
               (vector-set! info 1 0)))))))


;;;
;;;; Pool
;;;


(constant queues-cardinality <fx>
  128)

(definition protected queues-pool <vector>
  (make-vector queues-cardinality #f))

(definition protected queues-allocated <fx>
  0)

(definition protected queues-available <fx>
  0)


(definition protected (alloc-queue$) <Queue>
  (if (= queues-available 0)
      (assert (< queues-allocated queues-cardinality)
        (increase! queues-allocated)
        (new-queue))
    (decrease! queues-available)
    (let ((queue (vector-ref queues-pool queues-available)))
      (vector-set! queues-pool queues-available #f)
      queue)))


(definition protected (make-queue$) <Queue>
  (let ((queue (alloc-queue$)))
    (reset-queue queue)
    queue))


(definition protected (free-queue$ queue <Queue>) <void>
  (assert (< queues-available queues-cardinality))
  (vector-set! queues-pool queues-available queue)
  (increase! queues-available)))
