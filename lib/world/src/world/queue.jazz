;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Circular Queues
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2013
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.queue jazz


(proclaim (warn optimizations))


;;;
;;;; Queue
;;;


(class Circular-Queue extends Object
  
  
  (slot queue)
  (slot mutex           initialize (make-mutex))
  (slot mutex-condition initialize (make-condition))
  
  
  (method override (initialize)
    (nextmethod)
    (set! queue (new-queue)))
  
  
  (method public (empty?)
    (mutex-lock! mutex)
    (prog1 (queue-empty? queue)
      (mutex-unlock! mutex)))
  
  
  (method public (reset)
    (mutex-lock! mutex)
    (reset-queue queue)
    (mutex-unlock! mutex))
  
  
  (method public (push obj)
    (mutex-lock! mutex)
    (enqueue queue obj)
    (mutex-unlock! mutex)
    (condition-signal! mutex-condition))
  
  
  (method public (pop timeout)
    (declare (proper-tail-calls))
    (let (iter)
      (mutex-lock! mutex)
      (cond ((not (queue-empty? queue))
             (prog1 (dequeue queue)
               (mutex-unlock! mutex)))
            ((mutex-unlock! mutex mutex-condition timeout)
             (iter))
            (else
             (eof-object)))))))
