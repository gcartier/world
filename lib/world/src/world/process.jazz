;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Process
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.process jazz


(import (jazz.debuggee)
        (jazz.network)
        (jazz.platform)
        (jazz.process)
        (world)
        (world.context)
        (world.io)
        (world.settings)
        (world.server.panel)
        (world.task))


(class World-Process extends Process
  
  
  (method override (process-name self)
    "World Server")
  
  
  (method override (process-icon self)
    "WebServer")
  

  (method override (process-version self)
    world-version)
  
  
  (method override (process-owner self)
    "Guillaume Cartier")
  
  
  (method override (process-email self)
    "gucartier@gmail.com")
  
  
  (method override (process-copyright self)
    "2012-2018")
  
  
  (method package (start-panel self)
    (when (and (server?)
               (or (controlling-terminal?)
                   (using-debugger?)))
      (thread-start!
        (new-thread
          (lambda ()
            (run-panel (new World-Server-Panel) (current-server)))
          'panel))))

  
  ;;;
  ;;;; Load
  ;;;
  
  
  (method override (prepare-phase self)
    (nextmethod self)
    (load-point 'app-prepare))
  
  (method override (install-phase self)
    (nextmethod self)
    (load-point 'app-install))
  
  (method override (finalize-phase self)
    (nextmethod self)
    (load-point 'app-finalize))
  
  (method override (finish-phase self)
    (nextmethod self)
    (load-point 'app-finish))


  ;;;
  ;;;; Quit
  ;;;
  

  (method override (quit-process self (status 0))
    (with-reentrant-task-mutex
      (lambda ()
        (quit-world)
        (nextmethod self status))))
  
  
  ;;;
  ;;;; Debuggee
  ;;;
  
  
  (method override (select-console self)
    (unless slave?
      (nextmethod self)))
  
  
  ;; until it's the worker that sends outline information
  (method override (effective-transmit-runtime-what self what)
    'properties)

  
  ;;;
  ;;;; Events
  ;;;
  
  
  ;; copy/paste of thread-process and process-delayed-events
  ;; to have full control over the primordial thread
  (method override (thread-process-loop self (done? #f))
    (world-loop done?))
  
  
  ;;;
  ;;;; Runtime
  ;;;
  
  
  (method override (runtime-products self)
    (world-products))
  
  
  (method override (runtime-properties self)
    (append (world-properties 'server) (nextmethod self)))))
