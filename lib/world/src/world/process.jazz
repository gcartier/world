;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Process
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2016
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.process jazz


(import (jazz.action)
        (jazz.component)
        (jazz.io)
        (jazz.jml)
        (jazz.logger)
        (jazz.process)
        (jazz.syntax (phase syntax))
        (world)
        (world.autoload)
        (world.change)
        (world.commands)
        (world.dye)
        (world.dyes)
        (world.geometry)
        (world.history)
        (world.index)
        (world.interface.skin)
        (world.network)
        (world.settings)
        (world.syntax (phase syntax))
        (world.server.client)
        (world.server.panel)
        (world.window))


(class World-Process extends Process
  
  
  (method override (process-name)
    "World Server")
  
  
  (method override (process-icon)
    "WebServer")
  

  (method override (process-version)
    world-version)
  
  
  (method override (process-owner)
    "Guillaume Cartier")
  
  
  (method override (process-email)
    "gucartier@gmail.com")
  
  
  (method override (process-copyright)
    "2012-2016")
  
  
  (method (determine-root)
    (when (exists?~ {Directory App})
      (let ((parent (get-parent~ {Directory App})))
        (when (and parent (exists?~ parent) (not (meta-root?~ parent)))
          (let ((parent (get-parent~ parent)))
            (when (and parent (exists?~ parent) (not (meta-root?~ parent)))
              parent))))))
  
  
  (method override (finish-process)
    (nextmethod)
    (random-seed (world-setting 'world.random-seed #f))
    (set-logger-directory {Directory Settings "logs"})
    (when (world-setting 'world.gc-report? #f)
      (gc-report-set! #t))
    (testing (world-setting 'world.testing #f)))
  
  
  (method (start-panel)
    (thread-start!
      (new-thread
        (lambda ()
          (run-loop~ (new World-Server-Panel) (current-tier)))
        'panel)))

  
  ;;;
  ;;;; Load
  ;;;
  
  
  (method override (prepare-phase)
    (nextmethod)
    (load-point 'app-prepare))
  
  (method override (install-phase)
    (nextmethod)
    (load-point 'app-install))
  
  (method override (finalize-phase)
    (nextmethod)
    (load-point 'app-finalize))
  
  (method override (finish-phase)
    (nextmethod)
    (load-point 'app-finish))


  ;;;
  ;;;; Closing
  ;;;
  

  (method override (quit-process (status 0))
    (define (save-settings)
      (let ((zone (current-zone)))
        (let ((path (zone-path~ zone)))
          (set-setting~ user-settings 'world.last-zone path)
          (save-content~ user-settings))))
    
    (let ((world (current-world))
          (zone (current-zone)))
      (if (not world)
          (nextmethod status)
        (close~ zone)
        (close~ world)
        (save-settings)
        (nextmethod status))))
  
  
  ;;;
  ;;;; Debuggee
  ;;;
  
  
  ;; until it's the worker that sends outline information
  (method override (effective-transmit-runtime-what what)
    'properties)

  
  ;;;
  ;;;; Events
  ;;;
  
  
  ;; copy/paste of thread-process and process-delayed-events
  ;; to have full control over the primordial thread
  (method override (thread-process-loop (done? #f))
    (define (thread-process-delayed-events)
      (declare (proper-tail-calls))
      (let ((thunk (read-delayed-event)))
        (when (not (eof-object? thunk))
          (thunk)
          (thread-process-delayed-events))))
    
    (declare (proper-tail-calls))
    (setup-threads~ (current-world))
    (let (loop)
      (let ((thunk (thread-read-message timeout: +infinity)))
        (site (delayed on?: #f parent: event)
          (thread-process-delayed-events))
        (site (event on?: #t)
          (when (not (eof-object? thunk))
            (thunk))))
      (unless (and done? (done?))
        (loop))))
  
  
  ;;;
  ;;;; Servers
  ;;;
  
  
  (method override (start-servers?)
    #t)
  
  
  ;;;
  ;;;; Runtime
  ;;;
  
  
  (method override (runtime-products)
    (let ((world (current-world+)))
      (if (not world)
          '()
        (let ((queue (new-queue)))
          (iterate-table (get-installed-modules~ world)
            (lambda (name info)
              (bind (dirname . repository) info
                (for-each (lambda (package)
                            (for-each (lambda (product)
                                        (let ((name (product-descriptor-name product)))
                                          (enqueue queue name)))
                                      (package-products package)))
                          (repository-packages repository)))))
          (queue-list queue)))))
  
  
  (method override (runtime-properties)
    (cons kind: (cons 'server (nextmethod))))))
