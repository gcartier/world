;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Process
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2016
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.process jazz


(import (jazz.action)
        (jazz.component)
        (jazz.io)
        (jazz.jml)
        (jazz.process)
        (jazz.syntax (phase syntax))
        (world)
        (world.autoload)
        (world.change)
        (world.commands)
        (world.dye)
        (world.dyes)
        (world.geometry)
        (world.history)
        (world.index)
        (world.interface.skin)
        (world.io)
        (world.network)
        (world.settings)
        (world.syntax (phase syntax))
        (world.server.client)
        (world.server.panel)
        (world.window))


(class World-Process extends Process
  
  
  (method override (process-name)
    "World Server")
  
  
  (method override (process-icon)
    "WebServer")
  

  (method override (process-version)
    world-version)
  
  
  (method override (process-owner)
    "Guillaume Cartier")
  
  
  (method override (process-email)
    "gucartier@gmail.com")
  
  
  (method override (process-copyright)
    "2012-2016")
  
  
  (method override (finish-process)
    (nextmethod)
    (random-seed (world-setting 'world.random-seed #f)))
  
  
  (method (start-panel)
    (thread-start!
      (new-thread
        (lambda ()
          (run-loop~ (new World-Server-Panel) (server-tier)))
        'panel)))

  
  ;;;
  ;;;; Load
  ;;;
  
  
  (method override (prepare-phase)
    (nextmethod)
    (load-point 'app-prepare))
  
  (method override (install-phase)
    (nextmethod)
    (load-point 'app-install))
  
  (method override (finalize-phase)
    (nextmethod)
    (load-point 'app-finalize))
  
  (method override (finish-phase)
    (nextmethod)
    (load-point 'app-finish))


  ;;;
  ;;;; Quit
  ;;;
  

  (method override (quit-process (status 0))
    (quit-world)
    (nextmethod status))
  
  
  ;;;
  ;;;; Debuggee
  ;;;
  
  
  ;; until it's the worker that sends outline information
  (method override (effective-transmit-runtime-what what)
    'properties)

  
  ;;;
  ;;;; Events
  ;;;
  
  
  ;; copy/paste of thread-process and process-delayed-events
  ;; to have full control over the primordial thread
  (method override (thread-process-loop (done? #f))
    (world-loop done?))
  
  
  ;;;
  ;;;; Servers
  ;;;
  
  
  (method override (start-servers?)
    #t)
  
  
  ;;;
  ;;;; Runtime
  ;;;
  
  
  (method override (runtime-products)
    (world-products))
  
  
  (method override (runtime-properties)
    (append (world-properties 'server) (nextmethod)))))
