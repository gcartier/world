;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Process
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2016
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.process jazz


(import (jazz.action)
        (jazz.component)
        (jazz.io)
        (jazz.jml)
        (jazz.network)
        (jazz.process)
        (jazz.syntax (phase syntax))
        (world)
        (world.autoload)
        (world.change)
        (world.commands)
        (world.context)
        (world.dye)
        (world.dyes)
        (world.geometry)
        (world.history)
        (world.index)
        (world.interface.skin)
        (world.io)
        (world.network)
        (world.settings)
        (world.syntax (phase syntax))
        (world.server.client)
        (world.server.panel)
        (world.window))


(class World-Process extends Process
  
  
  (method override (process-name self)
    "World Server")
  
  
  (method override (process-icon self)
    "WebServer")
  

  (method override (process-version self)
    world-version)
  
  
  (method override (process-owner self)
    "Guillaume Cartier")
  
  
  (method override (process-email self)
    "gucartier@gmail.com")
  
  
  (method override (process-copyright self)
    "2012-2016")
  
  
  (method package (start-panel self)
    (when (eq? tier-kind 'server)
      (thread-start!
        (new-thread
          (lambda ()
            (run-panel (new World-Server-Panel) (server-tier)))
          'panel))))

  
  ;;;
  ;;;; Load
  ;;;
  
  
  (method override (prepare-phase self)
    (nextmethod self)
    (load-point 'app-prepare))
  
  (method override (install-phase self)
    (nextmethod self)
    (load-point 'app-install))
  
  (method override (finalize-phase self)
    (nextmethod self)
    (load-point 'app-finalize))
  
  (method override (finish-phase self)
    (nextmethod self)
    (load-point 'app-finish))


  ;;;
  ;;;; Quit
  ;;;
  

  (method override (quit-process self (status 0))
    (quit-world)
    (nextmethod self status))
  
  
  ;;;
  ;;;; Debuggee
  ;;;
  
  
  ;; until it's the worker that sends outline information
  (method override (effective-transmit-runtime-what self what)
    'properties)

  
  ;;;
  ;;;; Events
  ;;;
  
  
  ;; copy/paste of thread-process and process-delayed-events
  ;; to have full control over the primordial thread
  (method override (thread-process-loop self (done? #f))
    (world-loop done?))
  
  
  ;;;
  ;;;; Runtime
  ;;;
  
  
  (method override (runtime-products self)
    (world-products))
  
  
  (method override (runtime-properties self)
    (append (world-properties 'server) (nextmethod self)))))
