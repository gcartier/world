;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Work
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.work jazz


(import (jazz.debuggee)
        (jazz.evaluate)
        (jazz.io)
        (jazz.system)
        (world)
        (world.autoload)
        (world.settings)
        (world.syntax (phase syntax)))


;;;
;;;; Process
;;;


(definition world-repositories
  #f)

(definition protected (set-world-repositories repositories)
  (set! world-repositories repositories)
  ;; worker already running send repositories
  (when worker-port
    (let ((port (get-worker-port)))
      (write-binary `(repositories ,repositories) port)
      (force-output port))))


(definition (worker-cache)
  (parse~ {Directory Settings "work" "cache"}))

(definition (worker-debug?)
  (world-setting 'world.worker-debug? #f))


(definition (spawn-worker-process)
  (define (determine-worker-path)
    (let ((filename (add-extension (get-worker-filename) (executable-extension kernel-platform))))
      (let ((bundle-path (and kernel-bundle-install (string-append kernel-bundle-install filename))))
        (if (and bundle-path (file-exists? bundle-path))
            bundle-path
          (let ((install-path (string-append kernel-install filename)))
            (if (file-exists? install-path)
                install-path
              (error "Unable to find worker executable")))))))
  
  (let ((worker-path (determine-worker-path))
        (server-port (open-tcp-server 0))
        (cache (worker-cache))
        (debug? (worker-debug?)))
    (open-process
      (list
        path: worker-path
        arguments: `("-:daqQ-"
                     "-port" ,(number->string (socket-info-port-number (tcp-server-socket-info server-port)))
                     ,@(if world-repositories
                           (list "-repositories" (join world-repositories ";"))
                         '())
                     ;; it is not completly correct at the moment to always debug
                     ;; the worker because of the evaluate always hack done in yownu
                     ,@(let ((arg (command-argument "debugger")))
                         (if (and debug? arg)
                             (list "-debugger" arg)
                           '())))
        stdin-redirection: #f
        stdout-redirection: #f
        stderr-redirection: #f
        show-console: #f))
    (let ((port (read server-port)))
      (write-binary `(setup ,cache ,debug?) port)
      (force-output port)
      port)))


(definition (kill-worker-process port)
  (write '() port)
  (force-output port)
  ;; we should do this to wait for the worker to exit else
  ;; the worker can get a broken pipe if we exit too soon
  ;; (process-status port)
  (close-port port))


;;;
;;;; Feedback
;;;


(definition protected (hide-worker)
  (when worker-port
    (worker-work 'hide #f #f #f #f)))


;;;
;;;; Port
;;;


(definition worker-port
  #f)


(definition protected (get-worker-port)
  (or worker-port
      (let ((port (spawn-worker-process)))
        (set! worker-port port)
        port)))


(definition protected (close-worker-port)
  (when worker-port
    (kill-worker-process worker-port)
    (set! worker-port #f)))


;;;
;;;; Hooks
;;;


(definition (worker-mode)
  (world-setting 'world.worker-mode 'interpret))


(definition (unit-hook unit-name)
  (when (world-setting 'world.worker? #t)
    (when (world-setting 'world.worker-verbose? #f)
      (debug 'unit unit-name))
    (let ((mode (worker-mode)))
      (with-feedback mode unit-name
        (lambda (feedback? time?)
          (worker-work 'unit mode feedback? time? unit-name)
          (worker-result 'unit mode))))
    #t))


(definition (script-hook path)
  (when (world-setting 'world.worker? #t)
    (when (world-setting 'world.worker-verbose? #f)
      (debug 'script path))
    (let ((mode 'interpret))
      (worker-work 'script mode #f #f path)
      (worker-result 'script mode))
    #t))


(definition (evaluate-hook forms syntax str container line col evaluation-mode)
  (when (world-setting 'world.worker? #t)
    (when (world-setting 'world.worker-verbose? #f)
      (debug 'evaluate))
    (let ((mode (worker-mode)))
      (with-feedback mode 'evaluation
        (lambda (feedback? time?)
          (worker-work 'evaluate mode feedback? time? syntax str container line col evaluation-mode)
          (when (worker-result 'evaluate mode)
            (hook-evaluate forms syntax str container line col)))))
    #t))


(definition (console-hook unit-name expr evaluator)
  (if (not (world-setting 'world.worker? #t))
      (values #f #f)
    (when (world-setting 'world.worker-verbose? #f)
      (debug 'console))
    (let ((mode 'interpret))
      (worker-work 'console mode #f #f unit-name expr)
      (values (worker-result 'console mode evaluator: evaluator) #t))))


(definition (with-feedback mode name proc)
  (let ((world (current-world)))
    (let ((visible? (and (get-toplevel) (get-visible?~ (get-toplevel))))
          (time? (world-setting 'world.worker-time? #f)))
      (when (and (eq? mode 'compile)
                 name
                 visible?)
        (display-message~ world (format "Compiling {a}..." name)))
      (proc (not visible?) time?))))


(definition (worker-work command mode feedback? time? . arguments)
  (let ((port (get-worker-port)))
    (write-binary `(,command ,mode ,feedback? ,time? ,@arguments) port)
    (force-output port)))


(definition (worker-result kind mode (evaluator: evaluator #f))
  (let ((info (read-binary-content (get-worker-port) unmarshall)))
    (unless (eof-object? info)
      (bind (what expr exception) info
        (when (world-setting 'world.worker-verbose-result? #f)
          (debug 'result what))
        (case what
          ((eval evaload)
           (parameterize ((generate-symbol-for "%")
                          (generate-symbol-context (gensym))
                          (generate-symbol-counter 0))
             (let ((expansion (if (eq? what 'eval)
                                  expr
                                (call-with-input-file expr
                                  read-binary))))
               (if evaluator
                   (evaluator expansion)
                 (eval expansion)
                 #t))))
          ((load)
           (load-file expr #t))
          ((walk)
           ;quicky
           (error expr)
           ;(display-walk-problems~ (current-world) expr)
           (if evaluator
               (unspecified)
             #f))
          ((error)
           (error expr)))))))


(add-exit-job! close-worker-port)


(set-load-interpreted-hook
  unit-hook)

(set-load-script-hook
  script-hook)

(set-evaluate-forms-hook
  evaluate-hook)

(set-console-evaluate-hook
  console-hook))
