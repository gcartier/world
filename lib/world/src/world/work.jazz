;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Work
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.work jazz


(import (jazz.application)
        (jazz.component)
        (jazz.debuggee)
        (jazz.debugger.stub)
        (jazz.evaluate)
        (jazz.io)
        (jazz.platform)
        (jazz.presence)
        (world)
        (world.autoload)
        (world.context)
        (world.master)
        (world.settings)
        (world.stub)
        (world.task)
        (world.working))


;;;
;;;; Process
;;;


(definition spawn-mutex
  (make-mutex 'spawn))

(definition (with-spawn-mutex thunk)
  (unwind-protect
      (begin
        (mutex-lock! spawn-mutex)
        (thunk))
    (mutex-unlock! spawn-mutex)))


(definition protected worker
  #f)

(definition public (require-worker)
  (assert (not (worker?))
    (with-spawn-mutex
      (lambda ()
        (or worker
            (let ((wrk (spawn-unique-worker)))
              (set! worker wrk)
              wrk))))))


(definition world-repositories
  '())

(definition protected (get-world-repositories)
  world-repositories)

(definition protected (set-world-repositories repositories)
  (set! world-repositories repositories)
  ;; spawning worker will setup repositories
  (and worker
       (bind (what . data) (process-repositories worker repositories)
         (worker-result what data))))


(definition (worker-snapshots)
  (parse {Directory Settings "work" "snapshots"}))

(definition (worker-cache)
  (parse {Directory Settings "work" "caches" "code"}))

(definition (worker-optimize?)
  (world-setting 'world.worker-optimize? #f))

(definition (worker-debug?)
  (world-setting 'world.worker-debug? #f))


(definition (setup-worker-process)
  (load-unit 'jazz.presence)
  (load-unit 'jazz.presence.transmission)
  (load-unit 'jazz.presence.remotable.IOR))


(definition protected (worker-file)
  (cond-expand
    ((or devel stable)
     (string-append (or kernel-source-root
                        kernel-bundle-install
                        kernel-install)
       ".worker"))
    (else
     (if (serving?)
         (string-append kernel-install ".worker")
       #f))))


(definition (spawn-unique-worker)
  (let ((worker-file (worker-file))
        (snapshots (worker-snapshots))
        (cache (worker-cache))
        (optimize? (worker-optimize?))
        (debug? (worker-debug?)))
    (define (load-remote-worker port)
      (start-remote-presence purpose: 'working)
      (connect-remote-reference "localhost" port (list 'world.worker.remote 'world-remote-worker) purpose: 'working))
    
    (define (write-worker info)
      (when worker-file
        (call-with-output-file worker-file
          (lambda (output)
            (write info output)
            (force-output output)))))
    
    (define (read-worker)
      (and worker-file
           (call-with-input-file worker-file
             read)))
    
    (define (spawn)
      (write-worker 'spawning)
      (receive (pid port) (spawn-worker debug?)
        (write-worker (list pid port))
        (let ((worker (load-remote-worker port)))
          (process-setup worker worker-file snapshots cache optimize? debug? world-repositories)
          worker)))
    
    (define (connect)
      (let ((info (wait)))
        (if (not info)
            (spawn)
          (bind (pid port) info
            (if (not (process-running? pid))
                (spawn)
              (let ((worker (load-remote-worker port)))
                (process-connect worker world-repositories)
                worker))))))
    
    (define (wait)
      (declare (proper-tail-calls))
      (let (loop (n 0))
        (if (or (not worker-file)
                (not (file-exists? worker-file)))
            #f
          (if (> n 100)
              (error "Unable to spawn worker")
            (let ((info (read-worker)))
              (if (eq? info 'spawning)
                  (begin
                    (sleep .1)
                    (loop (+ n 1)))
                info))))))
    
    (cond ((or (not worker-file)
               (not (file-exists? worker-file)))
           (spawn))
          (else
           (connect)))))


(definition (spawn-worker debug?)
  (define (determine-path)
    (or (find-kernel-file (add-extension (get-worker-filename) (executable-extension kernel-platform)))
        (error "Unable to find worker executable")))
  
  (let ((path (determine-path)))
    (let ((arguments `("-:darR" @maybe-use-in-production!? "-:daqQ-"
                       ;; it is not completly correct at the moment to always
                       ;; debug the slave because of the evaluate always hack
                       ,@(let ((arg (command-argument "debugger")))
                           (if (and debug? arg)
                               (list "-debugger" arg)
                             '()))
                       "-called-from" "world")))
      (let ((process (open-process
                       (list
                         path: path
                         arguments: arguments
                         stdin-redirection: #t
                         stdout-redirection: #t
                         stderr-redirection: #t
                         show-console: #f))))
        (let ((pid (process-pid process))
              (port (read process)))
          (if (eof-object? port)
              (error "Broken connection spawning worker")
            (values pid port)))))))


(definition (deconnect-worker-process)
  (when worker
    (closing-remote-proxy worker)
    (process-deconnect worker (get-uuid (require-presence 'working)))
    (set! worker #f)))


(definition (calling-worker thunk)
  (thunk))


(unless (worker?)
  (setup-worker-process))


;;;
;;;; Settings
;;;


(definition (worker-evaluation)
  (world-setting 'world.worker-evaluation 'interpret))


(set-debug-working? (world-setting 'world.debug-scripts? bot?))


;;;
;;;; Run
;;;


(definition public (worker-run instance script-code read-handler walk-handler error-handler run-handler result-handler)
  (declare (proper-tail-calls))
  (define (evaluate-code)
    (with-working
      (lambda ()
        (let ((syntax 'jazz)
              (str script-code)
              (container 'instance)
              (line -1)
              (col 0))
          (if (not use-worker?)
              (with-evaluating
                (lambda ()
                  (cons 'eval (evaluate-forms syntax str container line col 'interpret evaluate?: #f scripting?: #t))))
            (calling-worker
              (lambda ()
                (process-run (require-worker) tier-kind 'interpret #f syntax str container line col))))))))
  
  (and (scriptable? (current-zone))
       (bind (what . data) (evaluate-code)
         (case what
           ((read)
            (read-handler data))
           ((walk)
            (walk-handler data))
           ((error)
            (error-handler data))
           ((eval)
            (let ()
              (define (eval-script)
                (run-handler)
                (when instance
                  (startup instance))
                (result-handler
                  (with-restart-catcher 'restart "Restart"
                    (lambda ()
                      (parameterize ((generate-symbol-for (format "%{a}&" (eval-count))))
                        (eval data)))
                    (unspecified)))
                (when (and instance (not (synchronous-task?)))
                  (let (restart-loop)
                    (with-restart-catcher 'restart "Restart"
                      (lambda ()
                        (fallthrough instance)))
                    (restart-loop))))
              
              (if (and debug-working?
                       (get-controller-debugger))
                  (eval-script)
                (continuation-capture
                  (lambda (exit)
                    (with-exception-handler
                      (lambda (exc)
                        (continuation-capture
                          (lambda (cont)
                            (continuation-graft exit
                              (lambda ()
                                (error-handler (list (exception-reason exc) (exception-locat exc cont) (continuation-stack cont locations?: #t))))))))
                      eval-script))))))))))


;;;
;;;; Hooks
;;;


(definition (unit-hook unit-name)
  (and use-worker?
       (begin
         (when (world-setting 'world.worker-verbose? #f)
           (terminal 'unit unit-name))
         (continuation-capture
           (lambda (continue)
             (let (restart-loop)
               (with-restart-catcher 'resume-loop "Restart load"
                 (lambda ()
                   (let ((evaluation (worker-evaluation)))
                     (with-feedback evaluation unit-name
                       (lambda (feedback? time?)
                         (bind (what . data) (calling-worker (lambda () (process-unit (require-worker) tier-kind evaluation feedback? time? unit-name)))
                           (worker-result what data)
                           (continuation-return continue #f)))))))
               (restart-loop))))
         #t)))


(definition (script-hook path)
  (and use-worker?
       (begin
         (when (world-setting 'world.worker-verbose? #f)
           (terminal 'script path))
         (let ((evaluation 'interpret))
           (bind (what . data) (calling-worker (lambda () (process-script (require-worker) tier-kind evaluation path)))
             (worker-result what data)))
         #t)))


(definition (evaluate-hook forms syntax str container line col evaluation-mode walk-debugger walk-cookie)
  (and use-worker?
       (begin
         (when (world-setting 'world.worker-verbose? #f)
           (terminal 'evaluate))
         (let ((evaluation (worker-evaluation)))
           (with-feedback evaluation 'evaluation
             (lambda (feedback? time?)
               (bind (what . data) (calling-worker (lambda () (process-evaluate (require-worker) tier-kind evaluation feedback? syntax str container line col)))
                 (when (worker-result what data walk-debugger: walk-debugger walk-cookie: walk-cookie)
                   (hook-evaluate forms syntax str container line col))))))
         #t)))


(definition (console-hook unit-name expr evaluator)
  (if (not use-worker?)
      (values #f #f)
    (when (world-setting 'world.worker-verbose? #f)
      (terminal 'console))
    (let ((evaluation 'interpret))
      (bind (what . data) (calling-worker (lambda () (process-console (require-worker) tier-kind unit-name expr)))
        (values (wrap-evaluate
                  (lambda ()
                    (worker-result what data evaluator: evaluator)))
                #t)))))


(definition (with-feedback evaluation name proc)
  (let ((world (current-world+)))
    (let ((visible? (and (current-toplevel) (get-visible? (current-toplevel)))))
      (let ((feedback? (world-setting 'world.worker-feedback? #f))
            (time? (world-setting 'world.worker-time? #f)))
        (when (and feedback?
                   (eq? evaluation 'compile)
                   (neq? name 'evaluation)
                   name
                   world
                   visible?)
          (display-message world (format "Compiling {a}..." name)))
        (proc feedback? time?)))))


(definition (worker-result what data (evaluator: evaluator #f) (read-handler: read-handler #f) (walk-handler: walk-handler #f) (walk-debugger: walk-debugger #f) (walk-cookie: walk-cookie #f) (error-handler: error-handler #f))
  (when (world-setting 'world.worker-verbose-result? #f)
    (terminal 'result what))
  (case what
    ((eval evaload)
     (parameterize ((generate-symbol-for "%")
                    (generate-symbol-context (gensym)))
       (let ((expansion (if (eq? what 'eval)
                            data
                          (call-with-input-file data
                            read-binary))))
         (if evaluator
             (evaluator expansion)
           (eval expansion)
           #t))))
    ((load)
     (load-file data #t))
    ((read)
     (bind (reason location) data
       (if read-handler
           (read-handler reason location)
         (error "{a}" reason))))
    ((walk)
     (bind (reason detail) data
       (if walk-handler
           (walk-handler reason detail)
         (let ((world (current-world+))
               (zone (current-zone+)))
           (cond (walk-debugger
                  (report-walk-problems walk-debugger (get-local-process) reason detail walk-cookie))
                 ((get-controller-debugger)
                  (continuation-capture
                    (lambda (cont)
                      (let ((exc (new-walk-problems reason '() '())))
                        (invoke-debugger 'exception reason detail exc cont)))))
                 ((and world zone (get-ready? zone) (not (get-controller-debugger)))
                  (display-walk-problems world detail))
                 (else
                  (error "{a}" reason))))
         (if evaluator
             (unspecified)
           #f))))
    ((error)
     (bind (reason location stack) data
       (if error-handler
           (error-handler reason location stack)
         (error "{a}" reason))))))


(unless (worker?)
  (add-exit-job! deconnect-worker-process))


(unless (worker?)
  (set-load-interpreted-hook
    unit-hook)
  
  (set-load-script-hook
    script-hook)
  
  (set-evaluate-forms-hook
    evaluate-hook)
  
  (set-console-evaluate-hook
    console-hook)))
