;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Work
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.work jazz


(import (jazz.debuggee)
        (world)
        (world.autoload)
        (world.settings)
        (world.syntax (phase syntax)))


;;;
;;;; Process
;;;


(definition world-repositories
  #f)

(definition protected (set-world-repositories repositories)
  (set! world-repositories repositories))


(definition (spawn-worker-process)
  (define (determine-worker-path)
    (let ((filename (add-extension (get-worker-filename) (executable-extension kernel-platform))))
      (let ((bundle-path (and kernel-bundle-install (string-append kernel-bundle-install filename))))
        (if (and bundle-path (file-exists? bundle-path))
            bundle-path
          (let ((install-path (string-append kernel-install filename)))
            (if (file-exists? install-path)
                install-path
              (error "Unable to find worker executable")))))))
  
  (let ((worker-path (determine-worker-path))
        (server-port (open-tcp-server 0)))
    (open-process
      (list
        path: worker-path
        arguments: `("-:daqQ-"
                     "-port" ,(number->string (socket-info-port-number (tcp-server-socket-info server-port)))
                     ,@(if world-repositories
                           (list "-repositories" (join world-repositories ";"))
                         '())
                     @not-correct-at-the-moment-because-of-the-evaluate-always-hack
                     ,@(let ((arg (command-argument "debugger")))
                         (if arg
                             (list "-debugger" arg)
                           '())))
        stdin-redirection: #f
        stdout-redirection: #f
        stderr-redirection: #f))
    (read server-port)))


(definition (kill-worker-process port)
  (write '() port)
  (force-output port)
  ;; we should do this to wait for the worker to exit else
  ;; the worker can get a broken pipe if we exit too soon
  ;; (process-status port)
  (close-port port))


;;;
;;;; Port
;;;


(definition worker-port
  #f)


(definition protected (get-worker-port)
  (or worker-port
      (let ((port (spawn-worker-process)))
        (set! worker-port port)
        port)))


(definition protected (close-worker-port)
  (when worker-port
    (kill-worker-process worker-port)
    (set! worker-port #f)))


(definition protected (worker-work command . arguments)
  (let ((port (get-worker-port)))
    (write (cons command arguments) port)
    (force-output port)))


;;;
;;;; Hooks
;;;


(definition (interpreted-hook unit-name)
  (debug unit-name)
  (when (world-setting 'world.worker? #t)
    (when (world-setting 'world.worker-verbose? #f)
      (debug 'expand-unit unit-name))
    (worker-work 'expand-unit unit-name)
    (eval-worker-result 'unit)
    #t))


(definition (script-hook path)
  (when (world-setting 'world.worker? #t)
    (when (world-setting 'world.worker-verbose? #f)
      (debug 'expand-script path))
    (worker-work 'expand-script path)
    (eval-worker-result 'script)
    #t))


(definition (evaluate-hook forms syntax str container line col evaluation-mode)
  (when (world-setting 'world.worker? #t)
    (when (world-setting 'world.worker-verbose? #f)
      (debug 'expand-forms))
    (worker-work 'expand-forms syntax str container line col evaluation-mode)
    (when (eval-worker-result 'form)
      (hook-evaluate forms syntax str container line col))
    #t))


(definition (eval-worker-result kind)
  (let ((info (read-binary-content (get-worker-port))))
    (unless (eof-object? info)
      (bind (what expr exception) info
        (if (eq? what 'result)
            (parameterize ((generate-symbol-for "%")
                           (generate-symbol-context (gensym))
                           (generate-symbol-counter 0))
              (eval expr)
              #t)
          (world.interface.dialogs:open-message expr
                                                caption: "Error"
                                                type: 'message)
          #f)))))


(add-exit-job! close-worker-port)


(set-load-interpreted-hook
  interpreted-hook)

(set-load-script-hook
  script-hook)

(set-evaluate-forms-hook
  evaluate-hook))
