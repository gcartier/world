;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; Change Part
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2016
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.part jazz


(import (world)
        (world.autoload)
        (world.context)
        (world.syntax (phase syntax)))


(proclaim (warn optimizations))


(class Part extends Object
  
  
  (slot name       getter generate)
  (slot count <fx> getter generate)
  
  
  (method override (initialize self name count)
    (set! self.name name)
    (set! self.count count))
  
  
  (method override (print self output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{a}" name)))))


(definition protected parts <table>
  (make-table test: eq?))

(definition protected partids <vector>
  (make-vector 256 #f))


(definition public inline (name->part name) <Part>
  (table-ref parts name))

(definition public inline (id->part id <fx>) <Part>
  (vector-ref partids id))


(definition next-part-id <fx>
  0)

(definition (next-part-id!) <fx>
  (prog1 next-part-id
    (increase! next-part-id)))


(definition protected (register-part name count)
  (let ((id <fx>
          ;; support dynamic evaluation
          (let ((actual (table-ref parts name #f)))
              (if actual
                  (get-id actual)
                (next-part-id!)))))
    (let ((part (new Part name count)))
      (table-set! parts name part)
      (vector-set! partids id part)
      (unspecified))))


(definition protected (count-layout layout)
  (let ((count 0))
    (for-each (lambda (part-name)
                (increase! count (get-count (name->part part-name))))
              layout)
    count)))
