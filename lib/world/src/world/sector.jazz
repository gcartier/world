;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Sectors
;;;


(module world.sector jazz


(import (jazz.geometry)
        (jazz.graphic)
        (jazz.graphic.opengl.glew)
        (jazz.io)
        (jazz.library)
        (jazz.literals)
        (jazz.media)
        (jazz.network)
        (jazz.platform)
        (jazz.platform.cairo)
        (jazz.runtime)
        (jazz.system)
        (jazz.ui)
        (jazz.ui.dialog)
        (jazz.ui.window)
        (time)
        (world)
        (world.autoload)
        (world.actor)
        (world.array)
        (world.block)
        (world.client.window)
        (world.foreign)
        (world.geometry)
        (world.history)
        (world.object)
        (world.sprite)
        (world.texture)
        (world.window))


;;;
;;;; Sector
;;;


(class Sector extends Object
  
  
  (slot index         <list>    getter generate)
  (slot blocks        <list>    accessors generate)
  (slot vao           <object>  getter generate)
  (slot vao-uptodate? <bool>    accessors generate)
  
  
  (method override (initialize index)
    (set! index~self index)
    (set! blocks~self '())
    (set! vao~self (new VAO))
    (set! vao-uptodate?~self #f))
  
  
  (method override (print output readably)
    (print-unreadable self output
      (lambda (output)
        (let ((blocks (length blocks)))
          (format output "{l} with {a} block{a}" index blocks (format-plural blocks))))))
  
  
  ;;;
  ;;;; VAO
  ;;;
  
  
  (method (update-vao)
    (when (not vao-uptodate?)
      (let ((vbo-vertices
              (let ((all (map get-triangles~ blocks)))
                (let ((count 0))
                  (for-each (lambda (triangles)
                              (increase! count (* (length triangles) 3)))
                            all)
                  (let ((f32 (make-f32vector count)))
                    (let ((n 0))
                      (for-each (lambda (triangles)
                                  (for-each (lambda (vert)
                                              (f32vector-set! f32 n (vertex-x vert))
                                              (f32vector-set! f32 (+ n 1) (vertex-y vert))
                                              (f32vector-set! f32 (+ n 2) (vertex-z vert))
                                              (set! n (+ n 3)))
                                            triangles))
                                all))
                    f32)))))
        (generate-buffer~ vao)
        (set-vbo~ vao vbo-vertices)
        (set! vao-uptodate? #t))))))
