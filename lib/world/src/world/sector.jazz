;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Sectors
;;;


(module world.sector jazz


(import (jazz.geometry)
        (jazz.graphic)
        (jazz.graphic.opengl.glew)
        (jazz.io)
        (jazz.library)
        (jazz.literals)
        (jazz.media)
        (jazz.network)
        (jazz.platform)
        (jazz.platform.cairo)
        (jazz.runtime)
        (jazz.system)
        (jazz.ui)
        (jazz.ui.dialog)
        (jazz.ui.window)
        (time)
        (world)
        (world.actor)
        (world.array)
        (world.autoload)
        (world.block)
        (world.foreign)
        (world.geometry)
        (world.history)
        (world.object)
        (world.settings)
        (world.sprite)
        (world.texture)
        (world.window)
        (world.client.window))


;;;
;;;; Sector
;;;


(class Sector extends Object
  
  
  (slot index         <list>       getter generate)
  (slot center        <f32vector>  getter generate)
  (slot assets        <list>       accessors generate)
  ;; to remove when immediate mode goes away
  (slot vbo-content   <f32vector+> getter generate)
  (slot vao           <object>     getter generate)
  (slot vao-uptodate? <bool>       accessors generate)
  
  
  (method override (initialize index center)
    (set! index~self index)
    (set! center~self center)
    (set! assets~self '())
    (set! vao~self (new VAO))
    (set! vao-uptodate?~self #f))
  
  
  (method override (print output readably)
    (print-unreadable self output
      (lambda (output)
        (let ((assets (length assets)))
          (format output "{l} with {a} asset{a}" index assets (format-plural assets))))))
  
  
  ;;;
  ;;;; VAO
  ;;;
  
  
  (method (update-vao)
    (define (collect-visible-faces)
      (let ((table (make-table test: vertex=? hash: vertex-hash)))
        (for-each (lambda (asset)
                    (for-each (lambda (face)
                                (let ((center (get-center~ face)))
                                  ;; this test only really makes sense for blocks
                                  (if (table-ref table center #f)
                                      (table-clear table center)
                                    (table-set! table center face))))
                              (get-faces~ asset)))
                  assets)
        table))
    
    (when (not vao-uptodate?)
      (let ((vbo-content
              (let ((visible-faces (collect-visible-faces)))
                (let ((triangles-count 0)
                      (triangle-floats (* 3 3 3)))
                  (iterate-table visible-faces
                                 (lambda (center face)
                                   (increase! triangles-count (length (get-triangles~ face)))))
                  (let ((f32 (make-f32vector (* triangles-count triangle-floats))))
                    (let ((n 0))
                      (define (add-vertex vert)
                        (f32vector-set! f32 n (vertex-x vert))
                        (f32vector-set! f32 (+ n 1) (vertex-y vert))
                        (f32vector-set! f32 (+ n 2) (vertex-z vert))
                        (set! n (+ n 3)))
                      
                      (iterate-table visible-faces
                        (lambda (center face)
                          (for-each (lambda (triangle)
                                      (let ((normal (get-normal~ triangle)))
                                        (add-vertex (get-v1~ triangle)) (add-vertex (get-t1~ triangle)) (add-vertex normal)
                                        (add-vertex (get-v2~ triangle)) (add-vertex (get-t2~ triangle)) (add-vertex normal)
                                        (add-vertex (get-v3~ triangle)) (add-vertex (get-t3~ triangle)) (add-vertex normal)))
                                    (get-triangles~ face)))))
                    f32)))))
        (if (not (get-textures?~ zone))
            (set! vbo-content~self vbo-content)
          (generate-buffer~ vao)
          (set-vbo~ vao vbo-content))
        (set! vao-uptodate? #t))))
  
  
  (method (free-vao)
    (free-resources~ vao))))
