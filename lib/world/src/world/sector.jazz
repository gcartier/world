;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; Sectors
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.sector jazz


(import (jazz.syntax (phase syntax))
        (gaea.geometry)
        (gaea.homogeneous)
        (world)
        (world.autoload)
        (world.buffer)
        (world.configure)
        (world.context)
        (world.expanse)
        (world.face)
        (world.index)
        (world.mesh)
        (world.queue)
        (world.section)
        (world.support)
        (world.task))


(proclaim (not check bounds types)
          (warn optimizations))


(definition public (position-sector-index pos <vertex>) <index>
  (indexed (fxfloor (fl& (/ (vertex-x pos) 16.)))
           (fxfloor (fl& (/ (vertex-y pos) 16.)))
           (fxfloor (fl& (/ (vertex-z pos) 16.)))))


;;;
;;;; Preload
;;;


(definition protected preload-queue <Priorities-Queue>
  (new Priorities-Queue 1 1024))


(definition public (push-preload sector)
  (push preload-queue sector 0))

(definition public (pop-preload)
  (pop preload-queue +infinity))

(definition public (reset-preload)
  (reset preload-queue))

(definition public (trim-preload)
  (trim preload-queue 0))


(definition protected (stop-preload)
  (push-preload #f))


(definition protected (run-preload task <Task>)
  (declare (proper-tail-calls))
  (let ((zone (current-zone)))
    (with-task task
      (lambda (exit)
        (let (iter)
          (let ((sector (pop-preload)))
            (if (not sector)
                (continuation-return exit #f)
              (unless (stopping? task)
                (preload-section zone sector))
              (iter))))))))


(definition (preload-section zone sector)
  (when (and (get-preload? sector)
             (not (get-section sector)))
    (site preload
      (let ((sector-index (get-index sector)))
        (let ((section (index-section zone sector-index)))
          (set-section sector section))))))


(definition protected (exit-preload task <Task>)
  (reset-preload)
  (stop-preload))


;;;
;;;; Instantiate
;;;


(definition protected instantiate-queue <Priorities-Queue>
  (new Priorities-Queue 1 4096))


(definition public (push-instantiate sector)
  (push instantiate-queue sector 0))

(definition public (pop-instantiate)
  (pop instantiate-queue +infinity))

(definition public (reset-instantiate)
  (reset instantiate-queue))

(definition public (trim-instantiate)
  (trim instantiate-queue 0))


(definition protected (stop-instantiate)
  (push-instantiate #f))


(definition protected (run-instantiate task <Task>)
  (declare (proper-tail-calls))
  (let ((zone (current-zone)))
    (with-task task
      (lambda (exit)
        (let (iter)
          (let ((sector (pop-instantiate)))
            (if (not sector)
                (continuation-return exit #f)
              (unless (stopping? task)
                (instantiate-sector zone sector))
              (iter))))))))


(definition (instantiate-sector zone sector)
  (when (and (get-instantiate? sector)
             (not (get-elements sector)))
    (site instantiate
      (let ((sector-index (get-index sector)))
        (let ((section (index-section zone sector-index)))
          (when (and section (get-elements section))
            (with-task-mutex
              (lambda ()
                (let ((elements (instantiate-elements section)))
                  (for-each (lambda (child)
                              (add-element zone child)
                              (bake-entity-lighting zone child))
                            elements)
                  (set-elements sector elements))))))))))


(definition protected (exit-instantiate task <Task>)
  (reset-instantiate)
  (stop-instantiate))


;;;
;;;; Generate
;;;


(definition protected generate-queue <Priorities-Queue>
  (new Priorities-Queue 3 65536))


(definition public (push-generate sector priority)
  (push generate-queue sector priority))

(definition public (pop-generate)
  (pop generate-queue +infinity))

(definition public (reset-generate)
  (reset generate-queue))

(definition public (trim-generate priority) <fx>
  (trim generate-queue priority))


(definition protected (stop-generate)
  (push-generate #f 0))


(definition protected (run-generate task <Task>)
  (declare (proper-tail-calls))
  (let ((zone (current-zone)))
    (with-task task
      (lambda (exit)
        (let (iter)
          (let ((sector (pop-generate)))
            (if (not sector)
                (continuation-return exit #f)
              (unless (stopping? task)
                (generate-visual zone sector))
              (iter))))))))


(definition protected (exit-generate task <Task>)
  (reset-generate)
  (stop-generate))


;;;
;;;; Free
;;;


(definition protected free-queue <Priorities-Queue>
  (new Priorities-Queue 1 65536))


(definition public (push-free sector)
  (push free-queue sector 0))

(definition public (pop-free)
  (pop free-queue +infinity))

(definition public (reset-free)
  (reset free-queue))


(definition protected (stop-free)
  (push-free #f))


(definition protected (run-free task <Task>)
  (declare (proper-tail-calls))
  (let ((zone (current-zone)))
    (with-task task
      (lambda (exit)
        (let (iter)
          (let ((sector (pop-free)))
            (if (not sector)
                (continuation-return exit #f)
              (free sector)
              (iter))))))))


(definition protected (exit-free task <Task>)
  (reset-free)
  (stop-free))


;;;
;;;; Sector
;;;


(class Sector extends Object
  
  
  (slot index              <index>                         getter generate)
  (slot center             <vertex>                        getter generate)
  (slot expanse            <Expanse>                       getter generate)
  ;; sectors retain their section if and only if they are in the eye preload
  ;; in that way update preload of the proximity sectors will load the sections
  ;; around the eye which will then be available when update physical needs them
  ;; in a synchronous way. this approach avoids retaining all sector sections which
  ;; would impact garbage collect time greatly
  (slot preload?           <bool>           initialize #f  accessors generate)
  (slot instantiate?       <bool>           initialize #f  accessors generate)
  (slot section            <World-Section+> initialize #f  accessors generate)
  (slot elements           <object>         initialize #f  accessors generate)
  (slot texture-elements   <list>           initialize '() accessors generate)
  (slot mesh               <Mesh+>          initialize #f  getter generate)
  (slot other-meshes       <vector+>        initialize #f  accessors generate)
  (slot categorized-mesh   <Mesh+>          initialize #f  accessors generate)
  (slot visual-uptodate?   <bool>           initialize #f  accessors generate)
  (slot visual-revision    <fx>             initialize -1  accessors generate)
  (slot visual-generating? <bool>           initialize #f  accessors generate)
  
  
  (method override (initialize self index center expanse)
    (set! self.index index)
    (set! self.center center)
    (set! self.expanse expanse))
  
  
  (method override (destroy self)
    (nextmethod self)
    (free self))
  
  
  (method override (print self output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{a}, {a}, {a}" (index-x index) (index-y index) (index-z index)))))
  
  
  (method package (get-position& self) <vertex>
    (let ((sector-x <fx> (index-x index))
          (sector-y <fx> (index-y index))
          (sector-z <fx> (index-z index)))
      (vertex& (* (cast <fl> sector-x) 16.)
               (* (cast <fl> sector-y) 16.)
               (* (cast <fl> sector-z) 16.))))
  
  
  (method package (setup-mesh self)
    (when (not mesh)
      (set! mesh (new Mesh material: (get-block-opaque (current-world))))))
  
  
  (method package (setup-other-meshes self meshes)
    (set! other-meshes meshes))
  
  
  (method package (setup-categorized-mesh self mesh)
    (set! categorized-mesh mesh))
  
  
  (method package (free self)
    (free-texture-elements self)
    (free-mesh self))
  
  
  (method (free-texture-elements self)
    (for-each close texture-elements))
  
  
  (method package (free-mesh self)
    (when mesh
      (free-resources mesh)
      (set! mesh #f))
    (when other-meshes
      (loop (for mesh <Mesh> in-vector other-meshes)
            (free-resources mesh))
      (set! other-meshes #f))
    (when categorized-mesh
      (free-resources categorized-mesh)
      (set! categorized-mesh #f)))
  
  
  (method public (empty? self)
    (and (not mesh)
         (not other-meshes)))
  
  
  ;;;
  ;;;; Preload
  ;;;
  
  
  (method package (update-preload self)
    (when (not section)
      (push-preload self)))
  
  
  ;;;
  ;;;; Instantiate
  ;;;
  
  
  (method package (update-instantiate self)
    (when (not elements)
      (push-instantiate self)))
  
  
  (method package (free-instantiate self zone)
    (when elements
      (for-each (lambda (child)
                  (remove-element zone child))
                elements)
      (set! elements #f)))
  
  
  (method package (add-element self obj)
    (if (not elements)
        (set! elements (list obj))
      (set! elements (append elements (list obj)))))
  
  
  (method package (remove-element self obj)
    (when elements
      (set! elements (remove obj elements))))
  
  
  ;;;
  ;;;; Visual
  ;;;
  
  
  (method package (update-visual self zone <Zone> camera <Camera>)
    (define (sector-priority) <fx>
      (let ((pos (get-position camera))
            (sight (get-sight camera)))
        (cond ((< (vertex-distance& pos center) generate-near)
               0)
              ((<= (ray-point-horizontal-distance& pos sight center) generate-spread)
               1)
              (else
               2))))
    
    (when (and (not visual-generating?)
               (or (not visual-uptodate?)
                   (< visual-revision (get-revision (get-generator zone)))))
      (let ((priority (sector-priority)))
        (set! visual-generating? #t)
        (increase-sectors-generating zone 1)
        (push-generate self priority))))
  
  
  ;;;
  ;;;; Vertices
  ;;;
  
  
  (method package (prepare-vertices/neighbors self apparent-faces)
    (if (not apparent-faces)
        (values #f #f)
      (let ((triangles-count <fx> 0))
        (for-each (lambda (face <Face>)
                    (increase! triangles-count (triangle-count face)))
                  apparent-faces)
        (let ((vertices (make-f32vector (* triangles-count triangle-floats)))
              (neighbors (make-f32vector (* triangles-count triangle-neighbors-floats))))
          (let ((n <fx> 0)
                (m <fx> 0))
            (define (add-triangle v1 <vertex> n1 <vertex> s1 <fx> t1 <fx> b1 <fx> v2 <vertex> n2 <vertex> s2 <fx> t2 <fx> b2 <fx> v3 <vertex> n3 <vertex> s3 <fx> t3 <fx> b3 <fx> uv <f32vector> tdepth <fl>)
              (add-vertex v1) (add-normal n1) (add-texture s1 t1 uv tdepth) (add-bone b1) (add-neighbors 0. v2 v3)
              (add-vertex v2) (add-normal n2) (add-texture s2 t2 uv tdepth) (add-bone b2) (add-neighbors 1. v1 v3)
              (add-vertex v3) (add-normal n3) (add-texture s3 t3 uv tdepth) (add-bone b3) (add-neighbors 2. v1 v2))
            
            (define (add-vertex vert <vertex>)
              (f32vector-set! vertices n (vertex-x vert))
              (f32vector-set! vertices (+ n 1) (vertex-y vert))
              (f32vector-set! vertices (+ n 2) (vertex-z vert))
              (set! n (+ n 3)))
            
            (define (add-normal normal <vertex>)
              (f32vector-set! vertices n (vertex-x normal))
              (f32vector-set! vertices (+ n 1) (vertex-y normal))
              (f32vector-set! vertices (+ n 2) (vertex-z normal))
              (set! n (+ n 3)))
            
            (define (add-texture s <fx> t <fx> uv <f32vector> tdepth <fl>)
              (f32vector-set! vertices n (f32vector-ref uv s))
              (f32vector-set! vertices (+ n 1) (f32vector-ref uv t))
              (f32vector-set! vertices (+ n 2) tdepth)
              (set! n (+ n 3)))
            
            (define (add-bone bone <fx>)
              (f32vector-set! vertices n (cast <fl> bone))
              (set! n (+ n 1)))
            
            (define (add-neighbors rank <fl> n1 <vertex> n2 <vertex>)
              (f32vector-set! neighbors m rank)
              (set! m (+ m 1))
              (f32vector-set! neighbors m (vertex-x n1))
              (f32vector-set! neighbors (+ m 1) (vertex-y n1))
              (f32vector-set! neighbors (+ m 2) (vertex-z n1))
              (set! m (+ m 3))
              (f32vector-set! neighbors m (vertex-x n2))
              (f32vector-set! neighbors (+ m 1) (vertex-y n2))
              (f32vector-set! neighbors (+ m 2) (vertex-z n2))
              (set! m (+ m 3)))
            
            (loop (for face <Face> in apparent-faces)
                  (for i from 0)
                  (do (add-triangles face add-triangle)
                      (set-indice face i)))
            (assert (= n (f32vector-length vertices)))
            (values vertices neighbors))))))
  
  
  (method package (fill-vertices/neighbors self mesh <Mesh> triangles <fx+> vertices <f32vector+> neighbors <f32vector+>)
    (if (not vertices)
        (begin
          (free-vertices mesh)
          (free-neighbors mesh))
      (allocate-vertices mesh)
      (set-data (get-vertices-buffer mesh) vertices (if triangles (* triangles triangle-floats) (f32vector-length vertices)) vertex-floats)
      (allocate-neighbors mesh)
      (set-data (get-neighbors-buffer mesh) neighbors (if triangles (* triangles triangle-neighbors-floats) (f32vector-length (allege neighbors))) neighbors-floats)))
  
  
  ;;;
  ;;;; Lightmap
  ;;;
  
  
  (method package (prepare-lightmap self faces)
    (let ((triangles-count <fx> 0))
      (for-each (lambda (face <Face>)
                  (increase! triangles-count (triangle-count face)))
                faces)
      (make-f32vector (* triangles-count triangle-lightmap-floats) 0.)))
  
  
  (method package (fill-lightmap self mesh <Mesh> triangles <fx+> lightmap <f32vector+>)
    (if (not lightmap)
        (free-lightmap mesh)
      (allocate-lightmap mesh)
      (set-data (get-lightmap-buffer mesh) lightmap (if triangles (* triangles triangle-lightmap-floats) (f32vector-length lightmap)) lightmap-floats)))
  
  
  ;;;
  ;;;; Feedback
  ;;;
  
  
  (method package (setup-feedback self mesh <Mesh> triangles <fx+>)
    (allocate-feedback mesh)
    (setup-feedback-data (get-feedback-buffer mesh) (* triangles triangle-feedback-floats) feedback-floats))))
