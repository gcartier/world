;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Instantiate
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2016
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.instantiate jazz


(import (jazz.component)
        (jazz.syntax (phase syntax))
        (world)
        (world.autoload)
        (world.configure)
        (world.context)
        (world.geometry)
        (world.settings)
        (world.syntax (phase syntax))
        (world.task))


(definition protected instantiate-mutex
  (make-mutex 'instantiate))


(definition protected (with-instantiate-mutex thunk)
  (unwind-protect
      (begin
        (mutex-lock! instantiate-mutex)
        (thunk))
    (mutex-unlock! instantiate-mutex)))


(definition protected instantiate-queue
  (new-queue))


(definition protected (instantiate-enqueue info)
  (let ((zone (current-zone)))
    (with-instantiate-mutex
      (lambda ()
        (enqueue instantiate-queue info)))))


(definition protected (instantiate-dequeue)
  (with-instantiate-mutex
    (lambda ()
      (and (not (queue-empty? instantiate-queue))
           (dequeue instantiate-queue)))))


(definition protected (reset-instantiate)
  (with-instantiate-mutex
    (lambda ()
      (reset-queue instantiate-queue))))


(definition public (instantiate-task task <Task>)
  (declare (proper-tail-calls))
  (let ((zone (current-zone))
        (history (current-history)))
    (with-task task
      (lambda (exit)
        (let ((section #f))
          (let (iter (previous (current-seconds)))
            (let ((time (current-seconds)))
              (let ((elapse (- time previous)))
                (unless (get-paused? history)
                  (unless (stopping? task)
                    (tick-instantiate elapse)))
                (let ((duration (- (current-seconds) time)))
                  (task-sleep task instantiate-period duration exit))
                (iter time)))))))))


(definition (tick-instantiate elapse)
  (site (instantiate on?: #t)
    (let (iter)
      (let ((info (instantiate-dequeue)))
        (when info
          (iter)))))))
