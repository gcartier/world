;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Events
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.event jazz


(import (jazz.platform)
        (world.evolution))


;; connect
(definition protected udp-id-connect <fl>
  0.)

(definition protected udp-id-connected <fl>
  1.)

;; create
(definition protected udp-id-create-packet <fl>
  10.)

(definition protected udp-id-create-info <fl>
  11.)

;; state
(definition protected udp-id-state-ok <fl>
  20.)

(definition protected udp-id-state-late <fl>
  21.)

(definition protected udp-id-state-waiting <fl>
  22.)

(definition protected udp-id-reset-media <fl>
  23.)

;; ack
(definition protected udp-id-receive-ack <fl>
  30.)

(definition protected udp-id-traffic-rate <fl>
  31.)

;; nack
(definition protected udp-id-retain-packet <fl>
  40.)

(definition protected udp-id-release-packet <fl>
  41.)

(definition protected udp-id-nack-packet <fl>
  42.)

(definition protected udp-id-got-packet <fl>
  43.)

(definition protected udp-id-giveup-packet <fl>
  44.)

(definition protected udp-id-resend-packet <fl>
  45.)

(definition protected udp-id-absent-packet <fl>
  46.)

;; receive
(definition protected udp-id-insert-packet <fl>
  50.)

(definition protected udp-id-duplicate-packet <fl>
  51.)

(definition protected udp-id-update-time <fl>
  52.)

(definition protected udp-id-packet-gap <fl>
  53.)

;; process
(definition protected udp-id-play-frame <fl>
  60.)

(definition protected udp-id-freeze-frame <fl>
  61.)

(definition protected udp-id-reject-packet <fl>
  62.)

(definition protected udp-id-missing-packet <fl>
  63.)

(definition protected udp-id-discard-packet <fl>
  64.)

;; throttle
(definition protected udp-id-throttle-on <fl>
  70.)

(definition protected udp-id-throttle-off <fl>
  71.)

(definition protected udp-id-throttle-frame <fl>
  72.)

;; io
(definition protected udp-id-read-data <fl>
  80.)

(definition protected udp-id-write-data <fl>
  81.)

;; media
(definition protected udp-id-src-self <fl>
  90.)

(definition protected udp-id-src-media <fl>
  91.)

(definition protected udp-id-sink-media <fl>
  92.)

(definition protected udp-id-draw-video <fl>
  93.)

;; bookmark
(definition protected udp-id-bookmark <fl>
  200.)

;; invalid
(definition protected udp-id-write-failure <fl>
  500.)

(definition protected udp-id-ring-overflow <fl>
  501.)

;; platform
(definition protected udp-id-paint-event <fl>
  1000.)

(definition protected udp-id-reshape-event <fl>
  1001.)

(definition protected udp-id-close-event <fl>
  1002.)

(definition protected udp-id-key-event <fl>
  1003.)

(definition protected udp-id-char-event <fl>
  1004.)

(definition protected udp-id-button-event <fl>
  1005.)

(definition protected udp-id-moved-event <fl>
  1006.)

(definition protected udp-id-wheel-event <fl>
  1007.)

(definition protected udp-id-file-event <fl>
  1008.)

(definition protected udp-id-drop-event <fl>
  1009.)

(definition protected udp-id-enter-event <fl>
  1010.)

(definition protected udp-id-leave-event <fl>
  1011.)

(definition protected udp-id-activate-event <fl>
  1012.)

(definition protected udp-id-deactivate-event <fl>
  1013.)

(definition protected udp-id-quit-event <fl>
  1014.)

(definition protected udp-id-user-event <fl>
  1015.)

(definition protected udp-id-other-event <fl>
  1099.)


;;;
;;;; Evolution
;;;


(definition protected simulation?
  (make-parameter #f))

(definition protected simulation-time
  (make-parameter #f))

(definition protected simulation-evolution
  (make-parameter #f))

(definition protected simulation-audio
  (make-parameter #f))

(definition protected simulation-video
  (make-parameter #f))


(definition protected emulation?
  (make-parameter #f))


(definition protected (record-event id origin media-kind data1 data2 data3 data4 (data5 -1.) (data6 -1.))
  (let ((evolution (or (simulation-evolution) (current-evolution))))
    (let ((mutex (get-mutex evolution)))
      (mutex-lock! mutex)
      (let ((content (get-content evolution))
            (index (index-now evolution)))
        (f64vector-set! content index (or (simulation-time) (current-seconds)))
        (f64vector-set! content (+ index 1) id)
        (f64vector-set! content (+ index 2) origin)
        (f64vector-set! content (+ index 3) media-kind)
        (f64vector-set! content (+ index 4) data1)
        (f64vector-set! content (+ index 5) data2)
        (f64vector-set! content (+ index 6) data3)
        (f64vector-set! content (+ index 7) data4)
        (f64vector-set! content (+ index 8) data5)
        (f64vector-set! content (+ index 9) data6)
        (advance! evolution))
      (mutex-unlock! mutex))))


(definition protected evolution-id-names
  (make-table test: eqv?))

(definition protected (evolution-id->name id)
  (table-ref evolution-id-names id))


(definition protected evolution-id-abbrevs
  (make-table test: eqv?))

(definition protected (evolution-id->abbrev id)
  (table-ref evolution-id-abbrevs id))


(definition protected evolution-abbrev-ids
  (make-table test: eqv?))

(definition protected (evolution-abbrev->id abbrev)
  (table-ref evolution-abbrev-ids abbrev))


(for-each (lambda (info)
            (bind (id name abbrev) info
              (table-set! evolution-id-names id name)
              (table-set! evolution-id-abbrevs id abbrev)
              (table-set! evolution-abbrev-ids abbrev id)))
          (list
            (list udp-id-connect 'connect 'connect)
            (list udp-id-connected 'connected 'connected)
            (list udp-id-create-packet 'create-packet 'create)
            (list udp-id-create-info 'create-info 'info)
            (list udp-id-receive-ack 'receive-ack 'ack)
            (list udp-id-traffic-rate 'traffic-rate 'traffic)
            (list udp-id-resend-packet 'resend-packet 'resend)
            (list udp-id-absent-packet 'absent-packet 'absent)
            (list udp-id-freeze-frame 'freeze-frame 'freeze)
            (list udp-id-duplicate-packet 'duplicate-packet 'duplicate)
            (list udp-id-packet-gap 'packet-gap 'gap)
            (list udp-id-reject-packet 'reject-packet 'reject)
            (list udp-id-missing-packet 'missing-packet 'missing)
            (list udp-id-retain-packet 'retain-packet 'retain)
            (list udp-id-release-packet 'release-packet 'release)
            (list udp-id-nack-packet 'nack-packet 'nack)
            (list udp-id-got-packet 'got-packet 'got)
            (list udp-id-giveup-packet 'giveup-packet 'giveup)
            (list udp-id-update-time 'update-time 'time)
            (list udp-id-insert-packet 'insert-packet 'insert)
            (list udp-id-state-ok 'state-ok 'ok)
            (list udp-id-state-late 'state-late 'late)
            (list udp-id-state-waiting 'state-waiting 'waiting)
            (list udp-id-reset-media 'reset-media 'reset)
            (list udp-id-throttle-on 'throttle-on 'throttle-on)
            (list udp-id-throttle-off 'throttle-off 'throttle-off)
            (list udp-id-throttle-frame 'throttle-frame 'throttle)
            (list udp-id-play-frame 'play-frame 'play)
            (list udp-id-discard-packet 'discard-packet 'discard)
            (list udp-id-read-data 'read-data 'read)
            (list udp-id-write-data 'write-data 'write)
            (list udp-id-src-self 'src-self 'self)
            (list udp-id-src-media 'src-media 'src)
            (list udp-id-sink-media 'sink-media 'sink)
            (list udp-id-draw-video 'draw-video 'draw)
            (list udp-id-bookmark 'bookmark 'bookmark)
            (list udp-id-write-failure 'write-failure 'write-failure)
            (list udp-id-ring-overflow 'ring-overflow 'ring-overflow)
            (list udp-id-paint-event 'paint-event 'paint)
            (list udp-id-reshape-event 'reshape-event 'reshape)
            (list udp-id-close-event 'close-event 'close)
            (list udp-id-key-event 'key-event 'key)
            (list udp-id-char-event 'char-event 'char)
            (list udp-id-button-event 'button-event 'button)
            (list udp-id-moved-event 'moved-event 'moved)
            (list udp-id-wheel-event 'wheel-event 'wheel)
            (list udp-id-file-event 'file-event 'file)
            (list udp-id-drop-event 'drop-event 'drop)
            (list udp-id-enter-event 'enter-event 'enter)
            (list udp-id-leave-event 'leave-event 'leave)
            (list udp-id-activate-event 'activate-event 'activate)
            (list udp-id-deactivate-event 'deactivate-event 'deactivate)
            (list udp-id-quit-event 'quit-event 'quit)
            (list udp-id-user-event 'user-event 'user)
            (list udp-id-other-event 'other-event 'other)))


;;;
;;;; Platform
;;;


(set-event-callback
  (lambda (event)
    (record-event (case event
                    ((paint) udp-id-paint-event)
                    ((reshape) udp-id-reshape-event)
                    ((close) udp-id-close-event)
                    ((key) udp-id-key-event)
                    ((char) udp-id-char-event)
                    ((button) udp-id-button-event)
                    ((moved) udp-id-moved-event)
                    ((wheel) udp-id-wheel-event)
                    ((file) udp-id-file-event)
                    ((drop) udp-id-drop-event)
                    ((enter) udp-id-enter-event)
                    ((leave) udp-id-leave-event)
                    ((activate) udp-id-activate-event)
                    ((deactivate) udp-id-deactivate-event)
                    ((quit) udp-id-quit-event)
                    ((user) udp-id-user-event)
                    (else udp-id-other-event))
                  -1.
                  -1.
                  -1.
                  -1.
                  -1.
                  -1.))))
