;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Events
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.event jazz


(import (jazz.platform)
        (world.evolution))


;; connect
(definition protected udp-id-connect <fl>
  0.)

(definition protected udp-id-connected <fl>
  1.)

;; create
(definition protected udp-id-create-packet <fl>
  10.)

;; state
(definition protected udp-id-state-ok <fl>
  20.)

(definition protected udp-id-state-waiting <fl>
  21.)

(definition protected udp-id-reset-media <fl>
  22.)

;; ack
(definition protected udp-id-receive-ack <fl>
  30.)

;; nack
(definition protected udp-id-retain-packet <fl>
  40.)

(definition protected udp-id-release-packet <fl>
  41.)

(definition protected udp-id-nack-packet <fl>
  42.)

(definition protected udp-id-giveup-packet <fl>
  43.)

(definition protected udp-id-resend-packet <fl>
  44.)

(definition protected udp-id-absent-packet <fl>
  45.)

(definition protected udp-id-got-packet <fl>
  46.)

;; receive
(definition protected udp-id-insert-packet <fl>
  50.)

(definition protected udp-id-duplicate-packet <fl>
  51.)

(definition protected udp-id-update-time <fl>
  52.)

(definition protected udp-id-packet-gap <fl>
  53.)

;; process
(definition protected udp-id-process-packet <fl>
  60.)

(definition protected udp-id-present-frame <fl>
  61.)

(definition protected udp-id-freeze-frame <fl>
  62.)

(definition protected udp-id-reject-packet <fl>
  63.)

(definition protected udp-id-missing-packet <fl>
  64.)

(definition protected udp-id-discard-packet <fl>
  65.)

(definition protected udp-id-repeat-packet <fl>
  66.)

;; throttle
(definition protected udp-id-throttle-on <fl>
  70.)

(definition protected udp-id-throttle-off <fl>
  71.)

(definition protected udp-id-throttle-frame <fl>
  72.)

;; io
(definition protected udp-id-read-data <fl>
  80.)

(definition protected udp-id-write-data <fl>
  81.)

;; media
(definition protected udp-id-src-self <fl>
  90.)

(definition protected udp-id-src-media <fl>
  91.)

(definition protected udp-id-sink-media <fl>
  92.)

;; bookmark
(definition protected udp-id-bookmark <fl>
  200.)

;; invalid
(definition protected udp-id-write-failure <fl>
  500.)

(definition protected udp-id-ring-overflow <fl>
  501.)

(definition protected udp-id-invalid-smaller <fl>
  502.)

(definition protected udp-id-invalid-greater <fl>
  503.)

;; platform
(definition protected udp-id-paint-event <fl>
  1000.)

(definition protected udp-id-reshape-event <fl>
  1001.)

(definition protected udp-id-close-event <fl>
  1002.)

(definition protected udp-id-key-event <fl>
  1003.)

(definition protected udp-id-char-event <fl>
  1004.)

(definition protected udp-id-button-event <fl>
  1005.)

(definition protected udp-id-moved-event <fl>
  1006.)

(definition protected udp-id-wheel-event <fl>
  1007.)

(definition protected udp-id-file-event <fl>
  1008.)

(definition protected udp-id-drop-event <fl>
  1009.)

(definition protected udp-id-enter-event <fl>
  1010.)

(definition protected udp-id-leave-event <fl>
  1011.)

(definition protected udp-id-activate-event <fl>
  1012.)

(definition protected udp-id-deactivate-event <fl>
  1013.)

(definition protected udp-id-quit-event <fl>
  1014.)

(definition protected udp-id-user-event <fl>
  1015.)

(definition protected udp-id-other-event <fl>
  1099.)


;;;
;;;; Evolution
;;;


(definition protected (record-event id origin media-kind data1 data2 data3 data4)
  (let ((evolution (current-evolution)))
    (let ((mutex (get-mutex evolution)))
      (mutex-lock! mutex)
      (let ((content (get-content evolution))
            (index (index-now evolution)))
        (f64vector-set! content index (current-seconds))
        (f64vector-set! content (+ index 1) id)
        (f64vector-set! content (+ index 2) origin)
        (f64vector-set! content (+ index 3) media-kind)
        (f64vector-set! content (+ index 4) data1)
        (f64vector-set! content (+ index 5) data2)
        (f64vector-set! content (+ index 6) data3)
        (f64vector-set! content (+ index 7) data4)
        (advance! evolution))
      (mutex-unlock! mutex))))


(definition protected (evolution-id->name id)
  (ecase id
    ((udp-id-connect) 'connect)
    ((udp-id-connected) 'connected)
    ((udp-id-create-packet) 'create-packet)
    ((udp-id-receive-ack) 'receive-ack)
    ((udp-id-resend-packet) 'resend-packet)
    ((udp-id-absent-packet) 'absent-packet)
    ((udp-id-freeze-frame) 'freeze-frame)
    ((udp-id-duplicate-packet) 'duplicate-packet)
    ((udp-id-packet-gap) 'packet-gap)
    ((udp-id-missing-packet) 'missing-packet)
    ((udp-id-retain-packet) 'retain-packet)
    ((udp-id-release-packet) 'release-packet)
    ((udp-id-nack-packet) 'nack-packet)
    ((udp-id-got-packet) 'got-packet)
    ((udp-id-giveup-packet) 'giveup-packet)
    ((udp-id-update-time) 'update-time)
    ((udp-id-insert-packet) 'insert-packet)
    ((udp-id-process-packet) 'process-packet)
    ((udp-id-state-ok) 'state-ok)
    ((udp-id-state-waiting) 'state-waiting)
    ((udp-id-reset-media) 'reset-media)
    ((udp-id-throttle-on) 'throttle-on)
    ((udp-id-throttle-off) 'throttle-off)
    ((udp-id-throttle-frame) 'throttle-frame)
    ((udp-id-present-frame) 'present-frame)
    ((udp-id-discard-packet) 'discard-packet)
    ((udp-id-reject-packet) 'reject-packet)
    ((udp-id-repeat-packet) 'repeat-packet)
    ((udp-id-read-data) 'read-data)
    ((udp-id-write-data) 'write-data)
    ((udp-id-src-self) 'src-self)
    ((udp-id-src-media) 'src-media)
    ((udp-id-sink-media) 'sink-media)
    ((udp-id-bookmark) 'bookmark)
    ((udp-id-write-failure) 'write-failure)
    ((udp-id-ring-overflow) 'ring-overflow)
    ((udp-id-invalid-smaller) 'invalid-smaller)
    ((udp-id-invalid-greater) 'invalid-greater)
    ((udp-id-paint-event) 'paint-event)
    ((udp-id-reshape-event) 'reshape-event)
    ((udp-id-close-event) 'close-event)
    ((udp-id-key-event) 'key-event)
    ((udp-id-char-event) 'char-event)
    ((udp-id-button-event) 'button-event)
    ((udp-id-moved-event) 'moved-event)
    ((udp-id-wheel-event) 'wheel-event)
    ((udp-id-file-event) 'file-event)
    ((udp-id-drop-event) 'drop-event)
    ((udp-id-enter-event) 'enter-event)
    ((udp-id-leave-event) 'leave-event)
    ((udp-id-activate-event) 'activate-event)
    ((udp-id-deactivate-event) 'deactivate-event)
    ((udp-id-quit-event) 'quit-event)
    ((udp-id-user-event) 'user-event)
    ((udp-id-other-event) 'other-event)
    (else (error "Unknown evolution id: {a}" id))))


(definition protected (evolution-id->abbrev id)
  (ecase id
    ((udp-id-connect) 'connect)
    ((udp-id-connected) 'connected)
    ((udp-id-create-packet) 'create)
    ((udp-id-receive-ack) 'ack)
    ((udp-id-resend-packet) 'resend)
    ((udp-id-absent-packet) 'absent)
    ((udp-id-freeze-frame) 'freeze)
    ((udp-id-duplicate-packet) 'duplicate)
    ((udp-id-packet-gap) 'gap)
    ((udp-id-missing-packet) 'missing)
    ((udp-id-retain-packet) 'retain)
    ((udp-id-release-packet) 'release)
    ((udp-id-nack-packet) 'nack)
    ((udp-id-got-packet) 'got)
    ((udp-id-giveup-packet) 'giveup)
    ((udp-id-update-time) 'time)
    ((udp-id-insert-packet) 'insert)
    ((udp-id-process-packet) 'process)
    ((udp-id-state-ok) 'ok)
    ((udp-id-state-waiting) 'waiting)
    ((udp-id-reset-media) 'reset)
    ((udp-id-throttle-on) 'throttle-on)
    ((udp-id-throttle-off) 'throttle-off)
    ((udp-id-throttle-frame) 'throttle)
    ((udp-id-present-frame) 'present)
    ((udp-id-discard-packet) 'discard)
    ((udp-id-reject-packet) 'reject)
    ((udp-id-repeat-packet) 'repeat)
    ((udp-id-read-data) 'read)
    ((udp-id-write-data) 'write)
    ((udp-id-src-self) 'self)
    ((udp-id-src-media) 'src)
    ((udp-id-sink-media) 'sink)
    ((udp-id-bookmark) 'bookmark)
    ((udp-id-write-failure) 'write-failure)
    ((udp-id-ring-overflow) 'ring-overflow)
    ((udp-id-invalid-smaller) 'invalid-smaller)
    ((udp-id-invalid-greater) 'invalid-greater)
    ((udp-id-paint-event) 'paint)
    ((udp-id-reshape-event) 'reshape)
    ((udp-id-close-event) 'close)
    ((udp-id-key-event) 'key)
    ((udp-id-char-event) 'char)
    ((udp-id-button-event) 'button)
    ((udp-id-moved-event) 'moved)
    ((udp-id-wheel-event) 'wheel)
    ((udp-id-file-event) 'file)
    ((udp-id-drop-event) 'drop)
    ((udp-id-enter-event) 'enter)
    ((udp-id-leave-event) 'leave)
    ((udp-id-activate-event) 'activate)
    ((udp-id-deactivate-event) 'deactivate)
    ((udp-id-quit-event) 'quit)
    ((udp-id-user-event) 'user)
    ((udp-id-other-event) 'other)
    (else (error "Unknown evolution id: {a}" id))))


;;;
;;;; Platform
;;;


(set-event-callback
  (lambda (event)
    (record-event (case event
                    ((paint) udp-id-paint-event)
                    ((reshape) udp-id-reshape-event)
                    ((close) udp-id-close-event)
                    ((key) udp-id-key-event)
                    ((char) udp-id-char-event)
                    ((button) udp-id-button-event)
                    ((moved) udp-id-moved-event)
                    ((wheel) udp-id-wheel-event)
                    ((file) udp-id-file-event)
                    ((drop) udp-id-drop-event)
                    ((enter) udp-id-enter-event)
                    ((leave) udp-id-leave-event)
                    ((activate) udp-id-activate-event)
                    ((deactivate) udp-id-deactivate-event)
                    ((quit) udp-id-quit-event)
                    ((user) udp-id-user-event)
                    (else udp-id-other-event))
                  -1.
                  -1.
                  -1.
                  -1.
                  -1.
                  -1.))))
