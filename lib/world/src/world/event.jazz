;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Events
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.event jazz


(import (jazz.platform)
        (jazz.presence)
        (world.evolution)
        (world.settings)
        (world.syntax (phase syntax)))


(definition protected record-events?
  (world-setting 'world.record-events? #t))

(definition protected record-read/write?
  (and record-events? (world-setting 'world.record-read/write? #f)))

(definition protected record-retain?
  (and record-events? (world-setting 'world.record-retain? #f)))

(definition protected record-media?
  (and record-events? (world-setting 'world.record-media? #f)))

(definition protected record-play?
  (and record-events? (world-setting 'world.record-play? #f)))


;; connect
(definition protected udp-id-connecting <fl>
  0.)

(definition protected udp-id-connected <fl>
  1.)

(definition protected udp-id-connect <fl>
  2.)

(definition protected udp-id-deconnect <fl>
  3.)

(definition protected udp-id-reconnect <fl>
  4.)

;; create
(definition protected udp-id-create-packet <fl>
  10.)

;; state
(definition protected udp-id-state-ok <fl>
  20.)

(definition protected udp-id-state-play <fl>
  21.)

(definition protected udp-id-state-freeze <fl>
  22.)

(definition protected udp-id-state-wait <fl>
  23.)

(definition protected udp-id-reset-media <fl>
  24.)

;; heartbeat
(definition protected udp-id-send-heartbeat <fl>
  30.)

(definition protected udp-id-send-ack <fl>
  31.)

(definition protected udp-id-receive-ack <fl>
  32.)

(definition protected udp-id-traffic-rate <fl>
  33.)

;; nack
(definition protected udp-id-retain-packet <fl>
  40.)

(definition protected udp-id-missing-packet <fl>
  41.)

(definition protected udp-id-got-packet <fl>
  42.)

(definition protected udp-id-resend-packet <fl>
  43.)

(definition protected udp-id-absent-packet <fl>
  44.)

;; insert
(definition protected udp-id-insert-packet <fl>
  50.)

(definition protected udp-id-duplicate-packet <fl>
  51.)

(definition protected udp-id-packet-gap <fl>
  52.)

(definition protected udp-id-purge-ring <fl>
  53.)

(definition protected udp-id-contour-latency <fl>
  54.)

;; process
(definition protected udp-id-play-frame <fl>
  60.)

(definition protected udp-id-freeze-frame <fl>
  61.)

(definition protected udp-id-reject-packet <fl>
  62.)

(definition protected udp-id-lost-packet <fl>
  63.)

(definition protected udp-id-discard-packet <fl>
  64.)

(definition protected udp-id-media-early <fl>
  65.)

(definition protected udp-id-media-late <fl>
  66.)

;; bbr
(definition protected udp-id-bbr-state <fl>
  70.)

(definition protected udp-id-bbr-pacing <fl>
  71.)

(definition protected udp-id-bbr-window <fl>
  72.)

(definition protected udp-id-bbr-media <fl>
  73.)

(definition protected udp-id-bbr-pulse <fl>
  74.)

(definition protected udp-id-bbr-ack <fl>
  75.)

(definition protected udp-id-bbr-lost <fl>
  76.)

(definition protected udp-id-bbr-info <fl>
  77.)

;; upload
(definition protected udp-id-queue-rate <fl>
  80.)

(definition protected udp-id-send-rate <fl>
  81.)

(definition protected udp-id-upload-needs <fl>
  82.)

(definition protected udp-id-upload-levels <fl>
  83.)

(definition protected udp-id-trial-start <fl>
  84.)

(definition protected udp-id-trial-end <fl>
  85.)

;; download
(definition protected udp-id-download-level <fl>
  88.)

;; io
(definition protected udp-id-read-data <fl>
  90.)

(definition protected udp-id-write-data <fl>
  91.)

;; info
(definition protected udp-id-extra-info <fl>
  100.)

;; moment
(definition protected udp-id-moment <fl>
  110.)

;; bookmark
(definition protected udp-id-bookmark <fl>
  200.)

;; invalid
(definition protected udp-id-write-failure <fl>
  500.)

(definition protected udp-id-ring-overflow <fl>
  501.)

;; debug
(definition protected udp-id-debug-audio <fl>
  600.)

;; gc
(definition protected udp-id-garbage-collect <fl>
  900.)

;; platform
(definition protected udp-id-paint-event <fl>
  1000.)

(definition protected udp-id-reshape-event <fl>
  1001.)

(definition protected udp-id-close-event <fl>
  1002.)

(definition protected udp-id-key-event <fl>
  1003.)

(definition protected udp-id-char-event <fl>
  1004.)

(definition protected udp-id-button-event <fl>
  1005.)

(definition protected udp-id-moved-event <fl>
  1006.)

(definition protected udp-id-wheel-event <fl>
  1007.)

(definition protected udp-id-file-event <fl>
  1008.)

(definition protected udp-id-drop-event <fl>
  1009.)

(definition protected udp-id-enter-event <fl>
  1010.)

(definition protected udp-id-leave-event <fl>
  1011.)

(definition protected udp-id-activate-event <fl>
  1012.)

(definition protected udp-id-deactivate-event <fl>
  1013.)

(definition protected udp-id-quit-event <fl>
  1014.)

(definition protected udp-id-user-event <fl>
  1015.)

(definition protected udp-id-other-event <fl>
  1099.)


(definition protected show-events?
  (world-setting 'world.show-events? #f))


;;;
;;;; Evolution
;;;


(definition protected simulation?
  (make-parameter #f))

(definition protected simulation-base
  (make-parameter #f))

(definition protected simulation-time
  (make-parameter #f))

(definition protected simulation-timestamp
  (make-parameter #f))

(definition protected simulation-elapse
  (make-parameter #f))

(definition protected simulation-evolution
  (make-parameter #f))

(definition protected simulation-off
  (make-parameter #f))

(definition protected simulation-present
  (make-parameter #f))

(definition protected simulation-flush
  (make-parameter #f))

(definition protected simulation-audio
  (make-parameter #f))

(definition protected simulation-video
  (make-parameter #f))


(definition protected emulation?
  (make-parameter #f))


(definition protected freeze-events?
  #f)

(definition protected (freeze-events)
  (set! freeze-events? #t))

(definition protected (thaw-events)
  (set! freeze-events? #f))


;; use monotonic to improve precision on windows
(cond-expand
  (windows
   (definition current-event-base <fl>
     (- (current-seconds) (current-monotonic)))
   
   (definition (current-event-time) <fl>
     (+ current-event-base (current-monotonic))))
  (else
   (define current-event-time
     current-seconds)))


(definition protected (record-event id channel origin media-kind data1 data2 data3 data4)
  (unless freeze-events?
    (let ((evolution (or (simulation-evolution) (current-evolution))))
      (let ((mutex (get-mutex evolution)))
        (mutex-lock! mutex)
        (let ((content (get-content evolution))
              (index (index-now evolution)))
          (f64vector-set! content index (current-event-time))
          (f64vector-set! content (+ index 1) id)
          (f64vector-set! content (+ index 2) channel)
          (f64vector-set! content (+ index 3) origin)
          (f64vector-set! content (+ index 4) media-kind)
          (f64vector-set! content (+ index 5) data1)
          (f64vector-set! content (+ index 6) data2)
          (f64vector-set! content (+ index 7) data3)
          (f64vector-set! content (+ index 8) data4)
          (advance! evolution))
        (mutex-unlock! mutex)))))


(definition protected (record-events proc)
  (unless freeze-events?
    (let ((evolution (or (simulation-evolution) (current-evolution))))
      (let ((mutex (get-mutex evolution)))
        (mutex-lock! mutex)
        (let ((content (get-content evolution))
              (time (current-event-time)))
          (proc (lambda (id channel origin media-kind data1 data2 data3 data4)
                  (let ((index (index-now evolution)))
                    (f64vector-set! content index time)
                    (f64vector-set! content (+ index 1) id)
                    (f64vector-set! content (+ index 2) channel)
                    (f64vector-set! content (+ index 3) origin)
                    (f64vector-set! content (+ index 4) media-kind)
                    (f64vector-set! content (+ index 5) data1)
                    (f64vector-set! content (+ index 6) data2)
                    (f64vector-set! content (+ index 7) data3)
                    (f64vector-set! content (+ index 8) data4)
                    (advance! evolution)))))
        (mutex-unlock! mutex)))))


(definition protected evolution-id-names
  (make-table test: eqv?))

(definition protected (evolution-id->name id)
  (table-ref evolution-id-names id))


(definition protected evolution-id-abbrevs
  (make-table test: eqv?))

(definition protected (evolution-id->abbrev id)
  (table-ref evolution-id-abbrevs id))


(definition protected evolution-abbrev-ids
  (make-table test: eqv?))

(definition protected (evolution-abbrev->id abbrev)
  (table-ref evolution-abbrev-ids abbrev))


(for-each (lambda (info)
            (bind (id name abbrev) info
              (table-set! evolution-id-names id name)
              (table-set! evolution-id-abbrevs id abbrev)
              (table-set! evolution-abbrev-ids abbrev id)))
          (list
            (list udp-id-connecting 'connecting 'connecting)
            (list udp-id-connected 'connected 'connected)
            (list udp-id-connect 'connect 'connect)
            (list udp-id-deconnect 'deconnect 'deconnect)
            (list udp-id-reconnect 'reconnect 'reconnect)
            (list udp-id-create-packet 'create-packet 'create)
            (list udp-id-send-heartbeat 'send-heartbeat 'send-heartbeat)
            (list udp-id-send-ack 'send-ack 'send-ack)
            (list udp-id-receive-ack 'receive-ack 'receive-ack)
            (list udp-id-traffic-rate 'traffic-rate 'traffic)
            (list udp-id-resend-packet 'resend-packet 'resend)
            (list udp-id-absent-packet 'absent-packet 'absent)
            (list udp-id-freeze-frame 'freeze-frame 'freeze)
            (list udp-id-duplicate-packet 'duplicate-packet 'duplicate)
            (list udp-id-packet-gap 'packet-gap 'gap)
            (list udp-id-purge-ring 'purge-ring 'purge)
            (list udp-id-contour-latency 'contour-latency 'contour)
            (list udp-id-reject-packet 'reject-packet 'reject)
            (list udp-id-retain-packet 'retain-packet 'retain)
            (list udp-id-missing-packet 'missing-packet 'missing)
            (list udp-id-got-packet 'got-packet 'got)
            (list udp-id-insert-packet 'insert-packet 'insert)
            (list udp-id-state-ok 'state-ok 'ok)
            (list udp-id-state-play 'state-play 'play)
            (list udp-id-state-freeze 'state-freeze 'freeze)
            (list udp-id-state-wait 'state-wait 'wait)
            (list udp-id-reset-media 'reset-media 'reset)
            (list udp-id-bbr-state 'bbr-state 'bbr-state)
            (list udp-id-bbr-pacing 'bbr-pacing 'bbr-pacing)
            (list udp-id-bbr-window 'bbr-window 'bbr-window)
            (list udp-id-bbr-media 'bbr-media 'bbr-media)
            (list udp-id-bbr-pulse 'bbr-pulse 'bbr-pulse)
            (list udp-id-bbr-ack 'bbr-ack 'bbr-ack)
            (list udp-id-bbr-lost 'bbr-lost 'bbr-lost)
            (list udp-id-bbr-info 'bbr-info 'bbr-info)
            (list udp-id-queue-rate 'queue-rate 'queue-rate)
            (list udp-id-send-rate 'send-rate 'send-rate)
            (list udp-id-upload-needs 'upload-needs 'upload-needs)
            (list udp-id-upload-levels 'upload-levels 'upload-levels)
            (list udp-id-trial-start 'trial-start 'trial-start)
            (list udp-id-trial-end 'trial-end 'trial-end)
            (list udp-id-download-level 'download-level 'download-level)
            (list udp-id-play-frame 'play-frame 'play)
            (list udp-id-lost-packet 'lost-packet 'lost)
            (list udp-id-discard-packet 'discard-packet 'discard)
            (list udp-id-media-early 'media-early 'early)
            (list udp-id-media-late 'media-late 'late)
            (list udp-id-read-data 'read-data 'read)
            (list udp-id-write-data 'write-data 'write)
            (list udp-id-extra-info 'extra-info 'info)
            (list udp-id-moment 'moment 'moment)
            (list udp-id-bookmark 'bookmark 'bookmark)
            (list udp-id-write-failure 'write-failure 'write-failure)
            (list udp-id-ring-overflow 'ring-overflow 'ring-overflow)
            (list udp-id-debug-audio 'debug-audio 'debug-audio)
            (list udp-id-garbage-collect 'garbage-collect 'gc)
            (list udp-id-paint-event 'paint-event 'paint)
            (list udp-id-reshape-event 'reshape-event 'reshape)
            (list udp-id-close-event 'close-event 'close)
            (list udp-id-key-event 'key-event 'key)
            (list udp-id-char-event 'char-event 'char)
            (list udp-id-button-event 'button-event 'button)
            (list udp-id-moved-event 'moved-event 'moved)
            (list udp-id-wheel-event 'wheel-event 'wheel)
            (list udp-id-file-event 'file-event 'file)
            (list udp-id-drop-event 'drop-event 'drop)
            (list udp-id-enter-event 'enter-event 'enter)
            (list udp-id-leave-event 'leave-event 'leave)
            (list udp-id-activate-event 'activate-event 'activate)
            (list udp-id-deactivate-event 'deactivate-event 'deactivate)
            (list udp-id-quit-event 'quit-event 'quit)
            (list udp-id-user-event 'user-event 'user)
            (list udp-id-other-event 'other-event 'other)))


;;;
;;;; Platform
;;;


(set-event-callback
  (lambda (event)
    (when record-events?
      (record-event (case event
                      ((paint) udp-id-paint-event)
                      ((reshape) udp-id-reshape-event)
                      ((close) udp-id-close-event)
                      ((key) udp-id-key-event)
                      ((char) udp-id-char-event)
                      ((button) udp-id-button-event)
                      ((moved) udp-id-moved-event)
                      ((wheel) udp-id-wheel-event)
                      ((file) udp-id-file-event)
                      ((drop) udp-id-drop-event)
                      ((enter) udp-id-enter-event)
                      ((leave) udp-id-leave-event)
                      ((activate) udp-id-activate-event)
                      ((deactivate) udp-id-deactivate-event)
                      ((quit) udp-id-quit-event)
                      ((user) udp-id-user-event)
                      (else udp-id-other-event))
                    -1.
                    -1.
                    -1.
                    -1.
                    -1.
                    -1.
                    -1.))
    (when show-events?
      (unless (eq? event 'moved)
        (format :terminal "{s} {s} {s}{%}" presence-name 'EVENT event))))))
