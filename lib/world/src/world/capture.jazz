;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; Data Capture
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.capture jazz


(import (jazz.stream))


(definition protected capturing?
  #f)


(definition capture-mutex
  (make-mutex 'capture))

(definition (with-capture-mutex thunk)
  (prog1 (begin
           (mutex-lock! capture-mutex)
           (thunk))
    (mutex-unlock! capture-mutex)))


;;;
;;;; Capture-Point
;;;


(class Capture-Point extends Object
  
  
  (slot start getter generate)
  (slot copy  getter generate)
  (slot stop  getter generate)
  
  
  (method override (initialize self start copy stop)
    (nextmethod self)
    (set! self.start start)
    (set! self.copy copy)
    (set! self.stop stop)))


(definition protected capture-points
  (make-table test: equal?))


(definition protected (registered-capture-point name)
  (table-ref capture-points name #f))

(definition protected (register-capture-point name capture)
  (table-set! capture-points name capture))

(definition protected (unregister-capture-point name)
  (table-clear capture-points name))


(definition public (capture-point name start copy stop)
  (with-capture-mutex
    (lambda ()
      (let ((point (new Capture-Point start copy stop)))
        (register-capture-point name point)
        (when capturing?
          (start-capture name point))))))


(definition public (uncapture-point name)
  (with-capture-mutex
    (lambda ()
      (when capturing?
        (stop-capture name))
      (unregister-capture-point name))))


;;;
;;;; Captures
;;;


(definition protected captures
  (make-table test: equal?))


(definition public (start-captures)
  (with-capture-mutex
    (lambda ()
      (unless capturing?
        (table-iterate capture-points start-capture)
        (set! capturing? #t)))))


(definition (start-capture name point)
  (let ((start (get-start point)))
    (let ((monitored (start)))
      (table-set! captures name monitored))))


(definition public (copy-captures)
  (with-capture-mutex
    (lambda ()
      (let ((queue (new-queue)))
        (table-iterate captures
          (lambda (name monitored)
            (let ((point (registered-capture-point name)))
              (let ((copy (get-copy point)))
                (enqueue queue (cons name (copy monitored)))))))
        (queue-list queue)))))


(definition public (stop-captures)
  (with-capture-mutex
    (lambda ()
      (when capturing?
        (for-each stop-capture (table-keys captures))
        (set! capturing? #f)))))


(definition (stop-capture name)
  (let ((monitored (table-ref captures name)))
    (let ((point (registered-capture-point name)))
      (let ((stop (get-stop point)))
        (stop monitored))))
  (table-clear captures name)))
