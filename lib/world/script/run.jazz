(script jazz


(import (jazz.debugger)
        (jazz.project))


(definition (launch-server/client)
  (define (launch-server launch-action world-project server-project server-configuration client-project client-configuration traits)
    (let ((cookie (register-debugger-cookie)))
      (register-debugger-cookie-procedure cookie
        (lambda (process cookie)
          (register-process-configuration process server-configuration)
          (launch-clients launch-action world-project client-project client-configuration traits)))
      (launch-project 'debug world-project server-project traits cookie: cookie)))
  
  (define (launch-clients launch-action world-project client-project client-configuration traits)
    (define (replace-player traits player)
      (list (first traits) player (third traits)))
    
    (if (memq? 'Game.Multiple traits)
        (begin
          (launch-client launch-action world-project client-project client-configuration (replace-player traits 'Player.Guillaume))
          (launch-client launch-action world-project client-project client-configuration (replace-player traits 'Player.Joel)))
      (launch-client launch-action world-project client-project client-configuration traits)))
  
  (define (launch-client launch-action world-project client-project client-configuration traits)
    (let ((cookie (register-debugger-cookie)))
      (register-debugger-cookie-procedure cookie
        (lambda (process cookie)
          (register-process-configuration process client-configuration)))
      (launch-project launch-action world-project client-project traits cookie: cookie)))
  
  (define (launch-project launch-action world-project project traits (cookie: cookie #f))
    (let ((project (clone-component~ project)))
      (define (collect-project-traits)
        (collect-if (lambda (trait)
                      (find-local-trait project trait))
                    traits))
      
      (set-default-traits~ project (collect-project-traits))
      (project-action~ project launch-action debugger-interactive?: #t debugger-cookie: cookie)))
  
  (define (find-application-trait project traits)
    (find-if (lambda (trait)
               (let ((local-trait (find-local-trait project trait)))
                 (and local-trait
                      (get-parent~ local-trait)
                      (eq? (get-name~ (get-parent~ local-trait)) 'Application))))
             traits))
  
  (bind (launch-action project . rest) (current-script-arguments)
    (bind-keywords ((server #f) (client #f)) rest
      (let ((world-project (get-parent~ (get-parent~ (get-parent~ project))))
            (traits (get-default-traits~ project)))
        (let ((server-project (find-project~ world-project server))
              (client-project (find-project~ world-project client)))
          (let ((server-configuration (cons server-project traits))
                (client-configuration (cons client-project traits)))
            (if (registered-process-live? server-configuration)
                (launch-clients launch-action world-project client-project client-configuration traits)
              (launch-server launch-action world-project server-project server-configuration client-project client-configuration traits))))))))


(launch-server/client))
