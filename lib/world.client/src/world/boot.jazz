;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Boot
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.boot jazz


(import (jazz.application)
        (jazz.audio)
        (jazz.component)
        (jazz.debuggee)
        (jazz.io)
        (jazz.opengl)
        (jazz.opengl.glew)
        (jazz.process)
        (jazz.window)
        (world)
        (world.capabilities)
        (world.context)
        (world.profiling)
        (world.settings)
        (world.support)
        (world.window)
        (world.work))


(definition public (boot-tier process-class (start: start #f) (finish: finish #f) (visible?: visible? #t))
  (when (window?)
    (set-cursor :wait)
    (set-audio? (world-setting 'world.audio? #t)))
  (initialize-aliases)
  (parameterize ((run-loop? #f))
    (setup-profiling)
    (boot-environment (new process-class))
    (save-capabilities)
    (load-point 'process)
    (set-texture-arrays? (world-setting 'world.texture-arrays? (glewIsSupported "GL_EXT_texture_array")))
    (set-arb-multisample? (world-setting 'world.arb-multisample? (glewIsSupported "GL_ARB_multisample")))
    (let ((window (and (window?) (current-toplevel))))
      (set-current-window window)
      (when start (start))
      (load-point 'world)
      (hide-worker-process)
      (let ((context (world-setting 'world.context :world)))
        (set-default-context (or (resolve-nickname context) context)))
      (when (and (window?) visible?)
        (cond-expand
          (mac
           (when window-fullscreen?
             (set-fullscreen-windowed-mode window)))
          (else)))
      (when (window?)
        (set-visible? window visible?)
        (set-window-cursor window (if (get-autotrack-camera?) :cross :arrow))
        (load-point 'show))
      ;(setup-memory)
      ;(load-point 'memory)
      (when finish (finish))
      (load-total 'total)
      (run-loop (current-process))))))
