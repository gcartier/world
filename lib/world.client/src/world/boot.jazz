;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Boot
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is WorldScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2014
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See http://github.com/gcartier/world for details.


(module world.boot jazz


(import (jazz.debuggee)
        (jazz.graphic.opengl.glew)
        (jazz.io)
        (jazz.system)
        (jazz.ui.window)
        (world)
        (world.autoload)
        (world.io)
        (world.profiling)
        (world.settings)
        (world.support)
        (world.syntax (phase syntax))
        (world.window))


(definition public (boot-client application-class start-world start-zone)
  (set-cursor :wait)
  (initialize-aliases)
  (parameterize ((run-loop? #f))
    (setup-profiling)
    (load-point 'boot)
    (boot-environment~ (new application-class))
    (load-point 'app)
    (set-texture-arrays? (world-setting 'world.texture-arrays? (glewIsSupported "GL_EXT_texture_array") 'default))
    (set-framebuffer-objects? (world-setting 'world.framebuffer-objects? (glewIsSupported "GL_EXT_framebuffer_object") 'default))
    (set-framebuffer-blit? (world-setting 'world.framebuffer-blit? (glewIsSupported "GL_EXT_framebuffer_blit") 'default))
    (set-framebuffer-multisample? (world-setting 'world.framebuffer-multisample? (glewIsSupported "GL_EXT_framebuffer_multisample") 'default))
    (set-arb-multisample? (world-setting 'world.arb-multisample? (glewIsSupported "GL_ARB_multisample") 'default))
    (set-current-world-window (get-toplevel))
    (open-world/zone start-world start-zone)
    (load-point 'world)
    (set-default-context (current-world))
    (show~ (current-world-window))
    (set-window-cursor~ (current-world-window) :arrow)
    (load-point 'show)
    ;(setup-memory)
    ;(load-point 'memory)
    (load-total 'total)
    (run-loop~ (get-application)))))
