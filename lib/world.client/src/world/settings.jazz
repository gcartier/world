;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Settings
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is WorldScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2014
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See http://github.com/gcartier/world for details.


(module world.settings jazz


(import (jazz.io)
        (jazz.library.template)
        (jazz.snapshot)
        (jazz.system))


;;;
;;;; Settings
;;;


(definition public (world-setting name (default #f) (unspecified (unspecified)))
  (let ((value (find-setting name default)))
    (if (eq? value unspecified)
        default
      value)))


(definition public (copy-settings-if-not-exists settings-root (alias #f))
  (unless (exists?~ settings-root)
    (copy-template (new-directory~ (world-templates-directory alias) "settings")
                   {Directory Home}
                   '())))


;;;
;;;; Pathnames
;;;


(definition public (world-alias)
  (if (is-alias? 'World)
      'World
    'Build))


(definition public (world-file path (alias #f))
  (new-file~ (new Directory (list (or alias (world-alias))))
    path))


(definition public (world-directory path (alias #f))
  (new-directory~ (new Directory (list (or alias (world-alias))))
    path))


;;;
;;;; Templates
;;;


(definition public (world-templates-directory (alias #f))
  (world-directory '("devel" "templates") alias))


;;;
;;;; Snapshots
;;;


(definition public (setup-snapshots)
  (snapshots-directory {Directory Settings "work" "crashes"})
  (snapshot-max-depth 3)
  (snapshot-max-width 32768)))
