;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Lighting
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.lighting jazz


(import (world)
        (world.context)
        (world.dye)
        (world.geometry))


(definition *current-lighting*
  #f)

(definition public (current-lighting)
  *current-lighting*)

(definition public (set-current-lighting lighting)
  (set! *current-lighting* lighting)
  (set-?l lighting))


;;;
;;;; Lighting
;;;


(class Lighting extends Object
  
  
  (slot ambient-color       <f32vector+> initialize #f                accessors generate)
  (slot lights              <object>     initialize '()               accessors generate)
  (slot lights-count        <fx>         initialize 0                 accessors generate)
  (slot sector-lights       <object>     initialize '()               accessors generate)
  (slot sector-lights-count <fx>         initialize 0                 accessors generate)
  (slot sun-effective       <dye>        initialize (dye 0. 0. 0. 0.) accessors generate)
  (slot sun-coordinates     <vertex>     initialize (vertex 0. 0. 0.) accessors generate)
  
  
  (method protected (setup-lights self l)
    (let ((world (current-world)))
      (set! lights l)
      (set! lights-count (min (get-dynamic-lights world) (length l)))))
  
  
  (method protected (setup-sector-lights self l)
    (let ((world (current-world)))
      (set! sector-lights l)
      (set! sector-lights-count (min (get-dynamic-lights world) (length l)))))
  
  
  ;; quick hack for tests
  (method protected (effective-lights self)
    (append lights sector-lights))
  
  
  ;; quick hack for tests
  (method protected (effective-lights-count self)
    (let ((world (current-world)))
      (min (get-dynamic-lights world) (+ lights-count sector-lights-count))))))
