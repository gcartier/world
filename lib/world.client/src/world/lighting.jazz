;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; World Lighting
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2013
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.lighting jazz


(import (jazz.graphic.opengl.glew)
        (world.dye)
        (world.geometry)
        (world.syntax (phase syntax)))


(definition current-lighting
  #f)

(definition public (get-current-lighting)
  current-lighting)

(definition public (set-current-lighting lighting)
  (set! current-lighting lighting))


;;;
;;;; Lighting
;;;


(class Lighting extends Object
  
  
  (slot ambient-color   <f32vector+> initialize #f                accessors generate)
  (slot lights          <object>     initialize '()               accessors generate)
  (slot lights-count    <fx>         initialize 0                 accessors generate)
  (slot sun-effective   <f32vector>  initialize (dye 0. 0. 0. 0.) accessors generate)
  (slot sun-coordinates <f64vector>  initialize (vertex 0. 0. 0.) accessors generate)


  (method public (setup)
    (glEnable GL_LIGHTING)
    (glDisable GL_LIGHT0)
    (glDisable GL_LIGHT1)
    (glDisable GL_LIGHT2)
    (glDisable GL_LIGHT3)
    (glDisable GL_LIGHT4)
    (glDisable GL_LIGHT5)
    (glDisable GL_LIGHT6)
    (glDisable GL_LIGHT7)
    (gl-light-model GL_LIGHT_MODEL_AMBIENT (dye-red ambient-color) (dye-green ambient-color) (dye-blue ambient-color) (dye-alpha ambient-color))
    (let ((specular (dye .01 .01 .01 1.0)))
      (gl-material-specular GL_FRONT (dye-red specular) (dye-green specular) (dye-blue specular) (dye-alpha specular)))
    (let ((shininess 50.))
      (gl-material-shininess GL_FRONT shininess))
    (let ((no GL_LIGHT0))
      (loop (for light in lights)
            (repeat lights-count)
            (glEnable no)
            (glLightf no
                      GL_CONSTANT_ATTENUATION
                      (get-constant-attenuation~ light))
            (glLightf no
                      GL_LINEAR_ATTENUATION
                      (get-linear-attenuation~ light))
            (glLightf no
                      GL_QUADRATIC_ATTENUATION
                      (get-quadratic-attenuation~ light))
            (let ((ambient (get-ambient-color~ light)))
              (gl-light no
                        GL_AMBIENT
                        (dye-red ambient)
                        (dye-green ambient)
                        (dye-blue ambient)
                        (dye-alpha ambient)))
            (let ((diffuse (get-color~ light)))
              (gl-light no
                        GL_DIFFUSE
                        (dye-red diffuse)
                        (dye-green diffuse)
                        (dye-blue diffuse)
                        (dye-alpha diffuse)))
            (gl-light no
                      GL_POSITION
                      (get-x~ light)
                      (get-y~ light)
                      (get-z~ light)
                      1.)
            (increase! no))))))
