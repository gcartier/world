;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Lighting
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.lighting jazz


(import (jazz.opengl.render)
        (gaea.dye)
        (gaea.geometry)
        (gaea.homogeneous)
        (world)
        (world.autoload)
        (world.buffer)
        (world.context)
        (world.mesh))


(proclaim (warn optimizations))


(definition protected baked-sun <vertex>
  ;; switch x and z quick work around normals not
  ;; being transformed in the light baking code
  (vertex 200. 400. 50.))


;;;
;;;; Share
;;;


(definition public (make-shared-mesh model-mesh <Mesh>)
  (with-reentrant-render-mutex
    (lambda ()
      (let ((vertices-buffer (get-vertices-buffer model-mesh))
            (neighbors-buffer (get-neighbors-buffer model-mesh))
            (lightmap-buffer (get-lightmap-buffer model-mesh))
            (instance-buffer (get-instance-buffer model-mesh))
            (feedback-buffer (get-feedback-buffer model-mesh))
            (material (get-material model-mesh)))
        (let ((lightmap-size (get-size lightmap-buffer)))
          (let ((lightmap (make-f32vector lightmap-size)))
            (let ((mesh (new Mesh
                          vertices-buffer: vertices-buffer
                          neighbors-buffer: neighbors-buffer
                          instance-buffer: instance-buffer
                          feedback-buffer: feedback-buffer
                          material: material)))
              (allocate-lightmap mesh)
              (set-data (get-lightmap-buffer mesh) lightmap lightmap-size lightmap-floats)
              (setup-array mesh)
              mesh)))))))


;;;
;;;; Bake
;;;


;; to unify with the zone method
(definition public (bake-entity-uniform-lighting entity <Entity> blocklight <fl> skylight <fl> sun-position <vertex>)
  (cache-model entity)
  (let ((meshes (get-meshes entity)))
    (loop (for mesh in-vector meshes)
          (bake-mesh-uniform-lighting entity mesh blocklight skylight sun-position))))


;; to unify with the zone method
(definition (bake-mesh-uniform-lighting entity <Entity> mesh <Mesh> blocklight <fl> skylight <fl> sun-position <vertex>)
  (with-reentrant-render-mutex
    (lambda ()
      (let ((vertices-buffer (get-vertices-buffer mesh))
            (lightmap-buffer (get-lightmap-buffer mesh)))
        (let ((vertices-size (get-size vertices-buffer))
              (vertices-indices (get-indices vertices-buffer))
              (lightmap-size (get-size lightmap-buffer))
              (lightmap-indices (get-indices lightmap-buffer)))
          (let ((vertices (make-f32vector vertices-size))
                (lightmap (make-f32vector lightmap-size))
                (indices (assert (= vertices-indices lightmap-indices) vertices-indices))
                (matrix (matrix-multiply& (get-matrix entity) (get-global-matrix (cache-model entity)))))
            (download-stream-data vertices-buffer 0 vertices vertices-size)
            (loop (for n from 0 below indices)
                  (let ((vertex-offset (* n vertex-floats))
                        (lightmap-offset (* n lightmap-floats)))
                    (let ((vert (vertex& (f32vector-ref vertices vertex-offset)
                                         (f32vector-ref vertices (+ vertex-offset 1))
                                         (f32vector-ref vertices (+ vertex-offset 2))))
                          (normal (vertex& (f32vector-ref vertices (+ vertex-offset 3))
                                           (f32vector-ref vertices (+ vertex-offset 4))
                                           (f32vector-ref vertices (+ vertex-offset 5)))))
                      (let ((pos (matrix-transform& matrix vert)))
                        (let ((sun-direction (vertex-normalize& (vertex-& sun-position pos))))
                          (let ((sun-diffuse (dot-product& normal sun-direction)))
                            (let ((shade (+ .5 (/ (abs sun-diffuse) 2.))))
                              (f32vector-set! lightmap lightmap-offset blocklight)
                              (f32vector-set! lightmap (+ lightmap-offset 1) skylight)
                              (f32vector-set! lightmap (+ lightmap-offset 2) shade))))))))
            (upload-stream-data lightmap-buffer 0 lightmap lightmap-size)))))))


(definition public (bake-mesh-uniform-selflit mesh <Mesh>)
  (with-reentrant-render-mutex
    (lambda ()
      (let ((vertices-buffer (get-vertices-buffer mesh))
            (lightmap-buffer (get-lightmap-buffer mesh)))
        (let ((vertices-size (get-size vertices-buffer))
              (vertices-indices (get-indices vertices-buffer))
              (lightmap-size (get-size lightmap-buffer))
              (lightmap-indices (get-indices lightmap-buffer)))
          (let ((vertices (make-f32vector vertices-size))
                (lightmap (make-f32vector lightmap-size))
                (indices (assert (= vertices-indices lightmap-indices) vertices-indices)))
            (download-stream-data vertices-buffer 0 vertices vertices-size)
            (loop (for n from 0 below indices)
                  (let ((vertex-offset (* n vertex-floats))
                        (lightmap-offset (* n lightmap-floats)))
                    (f32vector-set! lightmap lightmap-offset 60.)
                    (f32vector-set! lightmap (+ lightmap-offset 1) 60.)
                    (f32vector-set! lightmap (+ lightmap-offset 2) 1.)))
            (upload-stream-data lightmap-buffer 0 lightmap lightmap-size))))))))
