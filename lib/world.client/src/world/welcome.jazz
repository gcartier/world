;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; Welcome Screen
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2016
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.welcome jazz


(import (jazz.component)
        (jazz.event)
        (jazz.graphic)
        (jazz.handler)
        (jazz.io)
        (jazz.jml)
        (jazz.network)
        (jazz.process)
        (jazz.ui)
        (world)
        (world.autoload)
        (world.geometry)
        (world.interface.clients)
        (world.interface.dialogs)
        (world.interface.documents)
        (world.interface.pane)
        (world.interface.panel)
        (world.interface.servers)
        (world.interface.text)
        (world.interface.templates)
        (world.interface.tiers)
        (world.io)
        (world.music)
        (world.settings)
        (world.skybox)
        (world.syntax (phase syntax))
        (world.task)
        (world.window))


(definition protected stage
  #f)


(class Welcome-Zone extends Zone
  
  
  (slot preserved-ambience initialize #f getter generate)
  (slot preserved-music    initialize #f getter generate)
  (slot post-accept        initialize #f accessors generate)
  
  
  (form
    (<install> sun-cycle?: #f))
  
  
  (method override (welcome?)
    #t)
  
  
  (method override (finish rest)
    (nextmethod rest)
    (let ((world (current-world)))
      (setup-stage)
      (check-copyright)
      (install-welcome)
      (goto-new-no-tiers)
      (set-escape-hook~ world close-panel)
      (set-draw-me? #f)))
  
  
  (method override (destroy)
    (let ((world (current-world)))
      (uninstall-welcome)
      (no-showcase~ world)
      (set-escape-hook~ world #f)
      (set-draw-me? #t)
      (uninstall-camera))
    (nextmethod))
  
  
  (method (setup-stage)
    (set! stage (cond ((memq? stage '(#f copyright local new-local)) 'local)
                      ((memq? stage '(client new-client)) 'client)
                      ((memq? stage '(server new-server)) 'server))))
  
  
  (method override (setup-camera)
    (nextmethod)
    (install-camera))
  
  
  (method override (show-belt?)
    #f)
  
  
  (method override (show-compass?)
    #f)
  
  
  (method override (show-combat?)
    #f)
  
  
  (method (check-copyright)
    (when (and (window?) (process-copyright-changed?~ (get-process)))
      (set! stage 'copyright)))
  
  
  (method (install-welcome)
    (let ((interface (current-interface))
          (world (current-world)))
      (for-each (lambda (child)
                  (set-visible?~ child #f))
                (get-children~ interface))
      (unless (eq? stage 'copyright)
        (new Label-View name: 'welcome parent: interface title: "Yownu" location: '(40 30) size: {Dimension 400 80} font: {Font font-name: tahoma point-size: 60 shadow: thin})
        (when (memq? stage '(local client server))
          (cond (sejour?
                 (new Push-Button name: 'join-sejour parent: interface title: "Joindre SÃ©jour informatique" location: '(40 center) size: {Dimension 200 30} action-handler: on-join-sejour)
                 (new Push-Button name: 'change-sejour parent: interface title: "Changer..." location: '(255 center) size: {Dimension 120 30} action-handler: on-change-sejour)
                 (change-update))
                (arc-en-ciel?
                 (new Push-Button name: 'join-aec parent: interface title: "Joindre Arc-en-ciel" location: '(40 center) size: {Dimension 200 30} action-handler: on-join-aec)
                 (new Push-Button name: 'change-aec parent: interface title: "Changer..." location: '(255 center) size: {Dimension 120 30} action-handler: on-change-aec)
                 (change-update))
                (open-test?
                 (new Push-Button name: 'join-test parent: interface title: "Join Open Test" location: '(40 center) size: {Dimension 200 30} action-handler: on-join-test)
                 (new Push-Button name: 'change-test parent: interface title: "Change..." location: '(255 center) size: {Dimension 120 30} action-handler: on-change-test)
                 (change-update))))))
    (case stage
      ((copyright)
       (install-copyright))
      ((local)
       (install-local))
      ((client)
       (install-client))
      ((server)
       (install-server))
      ((new-local)
       (install-new-local))
      ((new-client)
       (install-new-client))
      ((new-server)
       (install-new-server))))
  
  
  (method (install-copyright)
    (let ((interface (current-interface))
          (world (current-world)))
      (let ((new? (process-copyright-new?~ (get-process))))
        (show-about title: "Copyright Agreement" closable?: #f)
        (let ((about (child~ interface 'about&copyright)))
          (let ((size (nu+ (get-size~ about) (new Dimension 0 (+ (if new? 0 (+ 16 15)) (+ 20 22)))))
                (insets (new Rect 0 (if new? 0 15) 0 20)))
            (let ((copyright-agreement (new Layout-View name: 'copyright-agreement parent: interface size: size layout-type: 'border layout-insets: insets location: 'center)))
              (unless new?
                (let ((north (new Layout-View parent: copyright-agreement size: {Dimension 220 16} layout-type: 'center location: 'north)))
                  (new Label-View title: "Copyright Agreement has changed" parent: north size: {Dimension 300 16} location: 'center justification: 'center)))
              (set-location~ about 'center)
              (set-parent~ about copyright-agreement)
              (let ((south (new Layout-View parent: copyright-agreement size: {Dimension 220 22} layout-type: 'center location: 'south)))
                (let ((accept/decline (new Layout-View name: 'accept/decline parent: south size: {Dimension 220 22} layout-type: 'border)))
                  (new Push-Button name: 'accept parent: accept/decline title: "Accept" location: 'west action-handler: on-accept)
                  (new Push-Button name: 'decline parent: accept/decline title: "Decline" location: 'east action-handler: on-decline)
                  (layout-view~ accept/decline)))
              (layout-view~ copyright-agreement))
            (layout-view~ interface))))))
  
  
  (method (install-local)
    (let ((interface (current-interface))
          (world (current-world)))
      (let ((version (process-version~ (get-process)))
            (release (process-release~ (get-process))))
        (push-pane (new Tiers-Pane name: 'tiers parent: interface size: {Dimension 266 488} location: 'center layout-type: 'border))
        (new Version-Label name: 'version parent: interface title: (format "v{a}" (present~ version)) location: '(40 -100) size: {Dimension 200 40} font: {Font font-name: tahoma point-size: 12 shadow: thin})
        (new Version-Label name: 'release parent: interface title: release location: '(40 -80) size: {Dimension 200 40} font: {Font font-name: tahoma point-size: 12 shadow: thin})
        (new Push-Button name: 'about parent: interface title: "About & Copyright" location: '(-40 -110) size: {Dimension 160 22} action-handler: on-about)
        @tutorial (new Push-Button name: 'tutorial parent: interface title: "Tutorial" location: '(-40 40) action-handler: on-tutorial)
        (new Push-Button name: 'quit parent: interface title: "Quit" location: '(40 -40) action-handler: on-quit)
        (new Push-Button name: 'multi parent: interface title: "Multiplayer" size: {Dimension 120 22} location: '(24. -40) action-handler: on-multiplayer)
        (new Kind-Label name: 'kind parent: interface title: "Singleplayer" location: '(center -70) size: {Dimension 200 40} font: {Font font-name: tahoma point-size: 15 shadow: thin} justification: 'center)
        (new Push-Button name: 'open parent: interface title: "Enter" location: '(center -40) action-handler: on-open)
        (new Push-Button name: 'rename parent: interface title: "Rename" location: '(-280 -40) action-handler: on-rename)
        (new Push-Button name: 'delete parent: interface title: "Delete" location: '(-160 -40) action-handler: on-delete)
        (new Push-Button name: 'new parent: interface title: "New" location: '(-40 -40) action-handler: on-new-local)
        (add-exception-view)
        (layout-view~ interface)
        (no-showcase~ world)
        (tiers-update)
        (delay-event
          (lambda ()
            (acquire-focus~ (tiers-tree)))))))
  
  
  (method (install-client)
    (let ((interface (current-interface))
          (world (current-world)))
      (let ((version (process-version~ (get-process)))
            (release (process-release~ (get-process))))
        (push-pane (new Clients-Pane name: 'tiers parent: interface size: {Dimension 266 488} location: 'center layout-type: 'border))
        (new Version-Label name: 'version parent: interface title: (format "v{a}" (present~ version)) location: '(40 -100) size: {Dimension 200 40} font: {Font font-name: tahoma point-size: 12 shadow: thin})
        (new Version-Label name: 'release parent: interface title: release location: '(40 -80) size: {Dimension 200 40} font: {Font font-name: tahoma point-size: 12 shadow: thin})
        (new Push-Button name: 'about parent: interface title: "About & Copyright" location: '(-40 -110) size: {Dimension 160 22} action-handler: on-about)
        @tutorial (new Push-Button name: 'tutorial parent: interface title: "Tutorial" location: '(-40 40) action-handler: on-tutorial)
        (new Push-Button name: 'quit parent: interface title: "Quit" location: '(40 -40) action-handler: on-quit)
        (new Push-Button name: 'server parent: interface title: "Server" size: {Dimension 120 22} location: '(24. -40) action-handler: on-server)
        (new Kind-Label name: 'kind parent: interface title: "Multiplayer" location: '(center -70) size: {Dimension 200 40} font: {Font font-name: tahoma point-size: 15 shadow: thin} justification: 'center)
        (new Push-Button name: 'open parent: interface title: "Connect" location: '(center -40) action-handler: on-open)
        (new Push-Button name: 'rename parent: interface title: "Rename" location: '(-280 -40) action-handler: on-rename)
        (new Push-Button name: 'delete parent: interface title: "Delete" location: '(-160 -40) action-handler: on-delete)
        (new Push-Button name: 'new parent: interface title: "New" location: '(-40 -40) action-handler: on-new-client)
        (add-exception-view)
        (layout-view~ interface)
        (no-showcase~ world)
        (tiers-update)
        (delay-event
          (lambda ()
            (acquire-focus~ (tiers-tree)))))))
  
  
  (method (install-server)
    (let ((interface (current-interface))
          (world (current-world)))
      (let ((version (process-version~ (get-process)))
            (release (process-release~ (get-process))))
        (push-pane (new Servers-Pane name: 'tiers parent: interface size: {Dimension 266 488} location: 'center layout-type: 'border))
        (new Version-Label name: 'version parent: interface title: (format "v{a}" (present~ version)) location: '(40 -100) size: {Dimension 200 40} font: {Font font-name: tahoma point-size: 12 shadow: thin})
        (new Version-Label name: 'release parent: interface title: release location: '(40 -80) size: {Dimension 200 40} font: {Font font-name: tahoma point-size: 12 shadow: thin})
        (new Push-Button name: 'about parent: interface title: "About & Copyright" location: '(-40 -110) size: {Dimension 160 22} action-handler: on-about)
        (new Push-Button name: 'quit parent: interface title: "Quit" location: '(40 -40) action-handler: on-quit)
        (new Push-Button name: 'single parent: interface title: "Singleplayer" size: {Dimension 120 22} location: '(24. -40) action-handler: on-singleplayer)
        (new Kind-Label name: 'kind parent: interface title: "Server" location: '(center -70) size: {Dimension 200 40} font: {Font font-name: tahoma point-size: 15 shadow: thin} justification: 'center)
        (new Push-Button name: 'open parent: interface title: "Serve" location: '(center -40) action-handler: on-open)
        (new Push-Button name: 'rename parent: interface title: "Rename" location: '(-280 -40) action-handler: on-rename)
        (new Push-Button name: 'delete parent: interface title: "Delete" location: '(-160 -40) action-handler: on-delete)
        (new Push-Button name: 'new parent: interface title: "New" location: '(-40 -40) action-handler: on-new-server)
        (add-exception-view)
        (layout-view~ interface)
        (no-showcase~ world)
        (tiers-update)
        (delay-event
          (lambda ()
            (acquire-focus~ (tiers-tree)))))))
  
  
  (method (install-new-local)
    (let ((interface (current-interface))
          (world (current-world)))
      (new Templates-Pane name: 'templates parent: interface size: {Dimension 266 488} location: '(-40 center) layout-type: 'border)
      (new Push-Button name: 'back parent: interface title: "Back" location: '(40 -40) action-handler: on-back)
      (new Push-Button name: 'create parent: interface title: "Enter" location: '(-40 -40) action-handler: on-create-local)
      (set-create~ (locate~ (child~ interface 'templates) 'templates) local-create)
      (add-exception-view)
      (layout-view~ interface)
      (goto-showcase~ world 'avatars)
      (templates-update)
      (delay-event
        (lambda ()
          (acquire-focus~ (templates-tree))))))
  
  
  (method (install-new-client)
    (let ((interface (current-interface))
          (world (current-world)))
      (new Info-Label name: 'client-name-label parent: interface title: "Client Name" location: '(-40 -280))
      (new Info-View name: 'client-name parent: interface location: '(-40 -260))
      (new Info-Label name: 'server-address-label parent: interface title: "Server Address" location: '(-40 -240) color: {Color red: .892 green: .773 blue: .290})
      (new Info-View name: 'server-address parent: interface location: '(-40 -220))
      (new Info-Label name: 'server-port-label parent: interface title: "Server Port" location: '(-40 -200) color: {Color red: .892 green: .773 blue: .290})
      (new Info-View name: 'server-port parent: interface location: '(-40 -180))
      (new Info-Label name: 'name-label parent: interface title: "Avatar Name" location: '(-40 -140) color: {Color red: .892 green: .773 blue: .290})
      (new Info-View name: 'name parent: interface location: '(-40 -120))
      (new Push-Button name: 'back parent: interface title: "Back" location: '(40 -40) action-handler: on-back)
      (new Push-Button name: 'create parent: interface title: "Connect" location: '(-40 -40) action-handler: on-create-client)
      (text-content-set (info-text 'client-name) (if open-test? "Test" "Client"))
      (text-content-set (info-text 'server-address) (host->string (if open-test? open-test-host default-server-host)))
      (text-content-set (info-text 'server-port) (port->string (if open-test? open-test-service default-server-service)))
      (add-exception-view)
      (layout-view~ interface)
      (goto-showcase~ world 'avatars)
      (delay-event
        (lambda ()
          (acquire-focus~ (locate~ (child~ interface 'name) 'text))))))
  
  
  (method (install-new-server)
    (let ((interface (current-interface))
          (world (current-world)))
      (new Templates-Pane name: 'templates parent: interface size: {Dimension 266 238} location: '(-40 -348) layout-type: 'border)
      (new Info-Label name: 'server-name-label parent: interface title: "Server Name" location: '(-40 -280))
      (new Info-View name: 'server-name parent: interface location: '(-40 -260))
      (new Info-Label name: 'server-address-label parent: interface title: "Server Listen" location: '(-40 -240) color: {Color red: .892 green: .773 blue: .290})
      (new Info-View name: 'server-address parent: interface location: '(-40 -220))
      (new Info-Label name: 'server-port-label parent: interface title: "Server Port" location: '(-40 -200) color: {Color red: .892 green: .773 blue: .290})
      (new Info-View name: 'server-port parent: interface location: '(-40 -180))
      (new Info-Label name: 'name-label parent: interface title: "Avatar Name" location: '(-40 -140) color: {Color red: .892 green: .773 blue: .290})
      (new Info-View name: 'name parent: interface location: '(-40 -120))
      (new Push-Button name: 'back parent: interface title: "Back" location: '(40 -40) action-handler: on-back)
      (new Push-Button name: 'create parent: interface title: "Serve" location: '(-40 -40) action-handler: on-create-server)
      (set-kind~ (locate~ (child~ interface 'templates) 'templates) 'server)
      (set-create~ (locate~ (child~ interface 'templates) 'templates) server-create)
      (text-content-set (info-text 'server-name) "Server")
      (text-content-set (info-text 'server-address) (host->string default-server-listen))
      (text-content-set (info-text 'server-port) (port->string default-server-service))
      (text-content-set (info-text 'name) "Server")
      (add-exception-view)
      (layout-view~ interface)
      (goto-showcase~ world 'avatars)
      (templates-update)
      (delay-event
        (lambda ()
          (acquire-focus~ (templates-tree))))))
  
  
  (method (uninstall-welcome)
    (let ((interface (current-interface))
          (world (current-world)))
      (when (eq? stage 'local)
        (pop-pane (tiers-pane)))
      (setup-interface~ world)))
  
  
  (method (add-exception-view)
    (let ((interface (current-interface)))
      (new Exception-Label name: 'exception parent: interface title: "" location: '(center 67) size: {Dimension 600 40} font: {Font font-name: tahoma point-size: 28 shadow: thin} justification: 'center)))
  
  
  (method (find-exception-view)
    (let ((interface (current-interface)))
      (child~ interface 'exception)))
  
  
  (method (report-exception title exc)
    (let ((view (find-exception-view)))
      (set-title~ view title)
      (set-exception~ view exc)))
  
  
  (method (clear-exception)
    (let ((view (find-exception-view)))
      (set-title~ view "")
      (set-exception~ view #f)))
  
  
  (method (goto-new-no-tiers)
    (when (and (memq? stage '(local client server))
               (not sejour?)
               (not arc-en-ciel?)
               (not open-test?)
               (= (get-visible-count~ (get-tree~ (tiers-view))) 0))
      (set! stage (case stage
                    ((local) 'new-local)
                    ((client) 'new-client)
                    ((server) 'new-server)))
      (install-welcome)))
  
  
  (method (close-panel)
    (let ((panel (top-panel)))
      (when panel
        (close~ panel)))
    #t)
  
  
  (method override (start-ambience)
    (let ((ambience (current-ambience)))
      (set! preserved-ambience (list (get-ambience?~ ambience)))
      (set-ambience?~ ambience #f)))
  
  
  (method override (start-music)
    (let ((music (current-music)))
      (when (get-music?~ music)
        (set! preserved-music (list (get-music-style~ music) (get-music-volume~ music)))
        (set-music-style~ music "minecraft/music/menu")
        (set-music-volume~ music .5)
        (change-music~ music))))
  
  
  (method override (stop-ambience)
    (nextmethod)
    (let ((ambience (current-ambience)))
      (bind (ambience?) preserved-ambience
        (set-ambience?~ ambience ambience?))))
  
  
  (method override (stop-music)
    (nextmethod)
    (let ((music (current-music)))
      (when (get-music?~ music)
        (bind (music-style music-volume) preserved-music
          (set-music-style~ music music-style)
          (set-music-volume~ music music-volume)))))
  
  
  (method override (prepare-skybox)
    (set! skybox (let ((skybox (find-skybox (or (world-setting 'world.welcome-skybox #f) (random-element '("calm_sea" "dark_sea" "nebula"))))))
                   (prepare~ skybox)
                   skybox)))
  
  
  (method override (player-task task <Task>)
    (with-task task
      (lambda (exit)
        (task-sleep task +infinity 0. exit))))
  
  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method (tiers-pane)
    (let ((interface (current-interface)))
      (child~ interface 'tiers)))
  
  
  (method (tiers-view)
    (locate~ (tiers-pane) 'tiers))
  
  
  (method (tiers-tree)
    (get-tree~ (tiers-view)))
  
  
  (method (templates-pane)
    (let ((interface (current-interface)))
      (child~ interface 'templates)))
  
  
  (method (templates-view)
    (locate~ (templates-pane) 'templates))
  
  
  (method (templates-tree)
    (get-tree~ (templates-view)))
  
  
  (method (determine-kind)
    (case stage
      ((local) 'local)
      ((client) 'client)
      ((server) 'server)))
  
  
  ;;;
  ;;;; Update
  ;;;
  
  
  (method (tiers-update)
    (let ((interface (current-interface)))
      (let ((pane (find-component~ interface 'tiers)))
        (when pane
          (let ((tree (get-tree~ (locate~ pane 'tiers))))
            (let ((all-data (get-selected-data~ tree)))
              (let ((data (remove-false all-data)))
                (let ((count (length data)))
                  (set-enabled?~ (child~ interface 'open) (= count 1))
                  (set-enabled?~ (child~ interface 'rename) (= count 1))
                  (set-enabled?~ (child~ interface 'delete) (> count 0))))))))))
  
  
  (method (templates-update)
    (let ((interface (current-interface)))
      (let ((pane (find-component~ interface 'templates)))
        (when pane
          (let ((tree (get-tree~ (locate~ pane 'templates))))
            (let ((all-data (get-selected-data~ tree)))
              (let ((data (remove-false all-data)))
                (let ((count (length data)))
                  (set-enabled?~ (child~ interface 'create) (= count 1))))))))))
  
  
  (method (change-update)
    (let ((interface (current-interface)))
      (cond (sejour?
             (let ((change (find-component~ interface 'change-sejour)))
               (when change
                 (set-enabled?~ change (exists?~ (sejour-file))))))
            (arc-en-ciel?
             (let ((change (find-component~ interface 'change-aec)))
               (when change
                 (set-enabled?~ change (exists?~ (aec-file))))))
            (open-test?
             (let ((change (find-component~ interface 'change-test)))
               (when change
                 (set-enabled?~ change (exists?~ (test-file)))))))))
  
  
  ;;;
  ;;;; Mouse
  ;;;
  
  
  (method override (mouse-track elapse dx dy)
    (when (memq? stage '(new-local new-client))
      (let ((world (current-world)))
        (let ((entity (get-selection-entity~ (get-showcase~ world))))
          (let ((angle (/ dx 200.))
                (lookat (get-lookat~ entity))
                (up (get-world-up~ world)))
            (set-lookat~ entity (rotate-lookat& lookat angle up))
            (update-matrix~ entity)))))
    #t)
  
  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method (on-accept evt)
    (process-copyright-update~ (get-process))
    (if post-accept
        (post-accept)
      (goto-stage 'local)
      (goto-new-no-tiers)))
  
  
  (method (on-decline evt)
    (quit-process~ (get-process)))
  
  
  (method (on-join-sejour evt)
    (let ((file (sejour-file)))
      (if (exists?~ file)
          (client-open file)
        (goto-stage 'new-client)
        (text-content-set (info-text 'client-name) "Sejour")
        (text-content-set (info-text 'server-port) "50000"))))
  
  
  (method (on-join-aec evt)
    (let ((file (aec-file)))
      (if (exists?~ file)
          (client-open file)
        (goto-stage 'new-client)
        (text-content-set (info-text 'client-name) "AeC")
        (text-content-set (info-text 'server-port) "50000"))))
  
  
  (method (on-change-sejour evt)
    (change-client (sejour-file) "Sejour" "50000"))
  
  
  (method (on-change-aec evt)
    (change-client (aec-file) "AeC" "50000"))
  
  
  (method (sejour-file)
    {File Settings "clients" "Sejour" ".client"})
  
  
  (method (aec-file)
    {File Settings "clients" "AeC" ".client"})
  
  
  (method (on-join-test evt)
    (let ((file (test-file)))
      (if (exists?~ file)
          (client-open file)
        (goto-stage 'new-client)
        (text-content-set (info-text 'client-name) "Test")
        (text-content-set (info-text 'server-port) "50000"))))
  
  
  (method (on-change-test evt)
    (change-client (test-file) "Test" "50000"))
  
  
  (method (test-file)
    {File Settings "clients" "Test" ".client"})
  
  
  (method (change-client file client-name server-port)
    (let ((world (current-world)))
      (when (exists?~ file)
        (let ((client (new-brother~ file ".client")))
          (let ((configuration (instantiate~ (read-form client))))
            (let ((name (get-character-name~ configuration))
                  (avatar (get-character-avatar~ configuration)))
              (goto-stage 'new-client)
              (text-content-set (info-text 'client-name) client-name)
              (text-content-set (info-text 'server-port) server-port)
              (text-content-set (info-text 'name) name)
              (let ((showcase (get-showcase~ world)))
                (let ((avatar (find-avatar~ showcase avatar)))
                  (when avatar
                    (set-selection~ showcase avatar)
                    (selection-update~ showcase avatar))))
              (delay-event
                (lambda ()
                  (acquire-focus~ (info-text 'name))))))))))
  
  
  (method (on-open evt)
    (open-selected~ (tiers-view)))
  
  
  (method (on-about evt)
    (let ((panel (top-panel)))
      (if (is? panel World-Document)
          (close~ panel)
        (show-about))))
  
  
  (method (show-about (title: title #f) (closable?: closable? #t))
    (let ((world (current-world)))
      (open-about~ world name: 'about&copyright title: (or title "About & Copyright") movable?: #f closable?: closable? background: {Color red: .000 green: .000 blue: .000 alpha: .250})))
  
  
  @tutorial
  (method (on-tutorial evt)
    (open-tutorial-zone))
  
  
  (method (on-delete evt)
    (let ((world (current-world)))
      (let ((tiername (tier-username))
            (tiers (tiers-view)))
        (let ((files (get-selected-data~ (get-tree~ tiers))))
          (when (not-null? files)
            (push-pane
              (open-message (format "Delete {a}{a} and lose changes?" (downcase tiername) (format-plural (length files)))
                            caption: "Delete"
                            type: 'question
                            yes: "Yes"
                            no: "No"
                            execute: (lambda (evt)
                                       (let ((dialog (find-ascendant~ (get-sender~ evt) World-Dialog))
                                             (button (get-property~ evt button:)))
                                         (close~ dialog)
                                         (case button
                                           ((yes)
                                            (for-each (lambda (file)
                                                        (delete-directory~ (get-parent~ file)))
                                                      files)
                                            (view-tiers~ tiers)
                                            (tiers-update)
                                            (change-update))))))))))))
  
  
  (method (on-rename evt)
    (let ((world (current-world)))
      (let ((tiername (tier-username))
            (tiers (tiers-view)))
        (let ((tree (get-tree~ tiers)))
          (let ((from (get-single-selected-data~ tree)))
            (when from
              (let (iter)
                (push-pane
                  (choose-new~ world (format "Rename {a}" tiername) (format "{a}:" tiername) (tier-name from)
                    (lambda (base)
                      (let ((to (new-zone-file base 'local)))
                        (let ((from-dir (get-parent~ from))
                              (to-dir (get-parent~ to))
                              (from-name (get-name~ from))
                              (to-name (get-name~ to)))
                          (move-pathname~ from-dir to-dir)
                          (move-pathname~ (new-file~ to-dir from-name) (new-file~ to-dir to-name))
                          (let ((row (get-selected-row~ tree)))
                            (set-user-data~ row to)
                            (let ((cell (new Cell (row->line~ tree row) 0)))
                              (set-cell-title~ tree cell (tier-name to))
                              (invalidate-cell~ tree cell))))
                        (change-update)))
                    kind: (determine-kind)
                    exists: (lambda (base proc)
                              (push-pane
                                (open-message (format "{a} {a} already exists. Please choose another name" tiername base)
                                              caption: "Rename"
                                              type: 'message
                                              execute: (lambda (evt)
                                                         (let ((dialog (find-ascendant~ (get-sender~ evt) World-Dialog))
                                                               (button (get-property~ evt button:)))
                                                           (close~ dialog)
                                                           (iter)))))))))))))))
  
  
  (method (tier-username)
    (case stage
      ((local) "Zone")
      ((client) "Client")
      ((server) "Server")))
  
  
  (method (on-new-local evt)
    (goto-stage 'new-local))
  
  
  (method (on-new-client evt)
    (goto-stage 'new-client))
  
  
  (method (on-new-server evt)
    (goto-stage 'new-server))
  
  
  (method (on-back evt)
    (goto-stage (case stage
                  ((new-local) 'local)
                  ((new-client) 'client)
                  ((new-server) 'server))))
  
  
  (method (goto-stage what)
    (uninstall-welcome)
    (set! stage what)
    (install-welcome))
  
  
  (method (on-create-local evt)
    (create-local))
  
  
  (method (local-create from base)
    (let ((world (current-world)))
      (create-new-zone~ world from base
        replace?: #t
        open: (lambda (file)
                (let ((zone (open-local file)))
                  ;; get the current-me after opening the zone
                  (let ((me (current-me))
                        (avatar (selected-avatar)))
                    (set-avatar~ me avatar)
                    (update-model~ me)
                    zone))))))
  
  
  (method (selected-avatar)
    (let ((world (current-world)))
      (get-model~ (get-selection-entity~ (find-showcase~ world 'avatars)))))
  
  
  (method (on-quit evt)
    (quit-process~ (get-process)))
  
  
  (method (on-singleplayer evt)
    (goto-stage 'local))
  
  
  (method (on-multiplayer evt)
    (goto-stage 'client))
  
  
  (method (on-server evt)
    (goto-stage 'server))
  
  
  (method (on-create-client evt)
    (create-client))
  
  
  (method (on-create-server evt)
   (create-server))
  
  
  (method (create-local)
    (create-selected~ (templates-view)))
  
  
  (method (handle-client-exception exc)
    (terminal exc))
  
  
  (method (create-client)
    (let ((fields (client-fields)))
      (let ((contents (map (lambda (field)
                             (bind (label view) field
                               (text-content (info-text view))))
                           fields)))
        (bind (client-name server-address server-port name) contents
          (let ((prefix "create "))
            (if (starts-with? name prefix)
                (let ((count (string->number (substring name (string-length prefix) (string-length name)))))
                  (if (and count (< count 100))
                      (let ((avatars (map get-model~ (vector->list (cache-elements~ (get-showcase~ (current-world))))))
                            (prefix client-name))
                        (loop (for n from 1 to count)
                              (let ((client-name (format "{a}{a}" prefix n))
                                    (name (random-element '("Emma" "Lea" "Olivia" "Alice" "Florence" "Zoe" "Chloe" "Beatrice" "Charlotte" "Rosalie" "Eva" "Juliette" "Sofia" "Jade" "Camille" "Victoria" "Mia" "Charlie" "Romy" "Laurence" "Maeva" "Alicia" "Clara" "Annabelle" "Sarah" "Rose" "Raphaelle" "Livia" "Elizabeth" "Mila" "Anais" "Elodie" "Flavie" "Laurie" "Amelia" "Julia" "Leonie" "Maelie" "Gabrielle" "Sophia" "Adele" "Coralie" "Emy" "Noemie" "Aurelie" "Alexia" "Jeanne" "Emilie" "Eve" "Ophelie" "Thomas" "William" "Jacob" "Liam" "Felix" "Nathan" "Samuel" "Logan" "Alexis" "Noah" "Olivier" "Raphael" "Gabriel" "Emile" "Leo" "Charles" "Antoine" "Benjamin" "Adam" "Edouard" "Xavier" "Victor" "Zack" "Mathis" "Jayden" "Theo" "Elliot" "Zachary" "Louis" "James" "Anthony" "Alexandre" "Lucas" "Justin" "Arthur" "Tristan" "Loic" "Ethan" "Henri" "Nolan" "Nicolas" "Arnaud" "Jeremy" "Hugo" "Dylan" "Laurent" "Eli" "Vincent" "Isaac" "Etienne")))
                                    (avatar (random-element avatars))
                                    (script "bot/player"))
                                (create-client-file client-name server-address server-port name avatar script)))
                        (goto-stage 'client))
                    (bell)))
              (client-open (create-client-file client-name server-address server-port name (selected-avatar)))))))))
  
  
  (method (client-fields)
    '((client-name-label client-name #t)
      (server-address-label server-address #t)
      (server-port-label server-port #f)
      (name-label name #t)))
  
  
  (method (client-stops)
    (map info-text (map second (client-fields))))
  
  
  (method (info-text view)
    (let ((interface (current-interface)))
      (locate~ (child~ interface view) 'text)))
  
  
  (method (create-server)
    (create-selected~ (templates-view) title: "Server" initial-value: (text-content (info-text 'server-name)) kind: 'server kind-name: "Server"))
  
  
  (method (server-create from base)
    (let ((world (current-world)))
      (create-new-zone~ world from base
        kind: 'server
        replace?: #t
        open: (lambda (file)
                (let ((fields (server-fields)))
                  (let ((contents (map (lambda (field)
                                         (bind (label view) field
                                           (text-content (info-text view))))
                                       fields)))
                    (bind (server-name server-address server-port name) contents
                      (let ((avatar (selected-avatar)))
                        (server-open (create-server-file server-name server-address server-port name avatar))))))))))
  
  
  (method (server-fields)
    '((server-name-label server-name #t)
      (server-address-label server-address #t)
      (server-port-label server-port #f)
      (name-label name #t)))
  
  
  (method (server-stops)
    (cons (templates-tree) (map info-text (map second (server-fields)))))
  
  
  (method (text-content text)
    (let ((content (get-string-content~ text)))
      (if (empty-string? content)
          #f
        content)))
  
  
  (method (text-content-set text content)
    (set-string-content~ text (->string content)))
  
  
  (method (tab-stops)
    (case stage
      ((new-client) (client-stops))
      ((new-server) (server-stops))
      (else #f)))
  
  
  ;;;
  ;;;; Open
  ;;;
  
  
  (method (local-open file)
    (with-window-cursor :wait
      (lambda ()
        (let ((world (current-world)))
          (let ((zone (open-local file @start-script?: start-script?)))
            (display-message~ world (get-title~ zone))
            zone)))))
  
  
  (method (client-open client-file)
    (with-window-cursor :wait
      (lambda ()
        (let ((world (current-world)))
          (clear-exception)
          (let ((obj (open-client client-file #t)))
            (if (is? obj Zone)
                (begin
                  (display-message~ world (get-title~ obj))
                  obj)
              (let ((title (if (string? obj) obj "Unable to connect to server")))
                (report-exception title obj))))))))
  
  
  (method (server-open server-file)
    (with-window-cursor :wait
      (lambda ()
        (let ((world (current-world)))
          (let ((zone (open-server server-file)))
            (display-message~ world (get-title~ zone))
            zone))))))


;;;
;;;; Camera
;;;


(definition camera-tick
  #f)

(definition camera-angle
  2.0)


(definition (install-camera)
  (let ((zone (current-zone)))
    (set! camera-tick path-camera)
    (register-tick~ zone camera-tick))
  (path-camera 0.))


(definition (uninstall-camera)
  (let ((zone (current-zone)))
    (unregister-tick~ zone camera-tick)
    (set! camera-tick #f)))


(definition (path-camera elapse)
  (let ((world (current-world)))
    (increase! camera-angle (/ elapse 10.))
    (let ((target (vertex -11.500 8.500 -32.500))
          (angle camera-angle)
          (radius 75.)
          (elevation 20.))
      (let ((x (cos angle))
            (z (sin angle)))
        (let ((flat (vertex+ target (vertex-scalar*& (vertex x 0. z) radius))))
          (let ((pos (vertex+ flat (vertex 0. elevation 0.))))
            (let ((dir (vertex-normalize (vertex-& target pos)))
                  (dir-flat (vertex-normalize (vertex-& target flat))))
              (let ((vert-angle (vector-angle dir dir-flat)))
                (let ((sight dir-flat)
                      (eye (get-eye~ world))
                      (up (get-world-up~ world)))
                  (let ((right (cross-product sight up)))
                    (let ((lookat (lookat sight up right)))
                      (free-motion~ world feedback?: #f)
                      (set-lookat~ eye (rotate-lookat-vertical& lookat (- vert-angle)))
                      (set-position~ eye pos)
                      (derive-target~ eye)
                      (camera-update~ eye))))))))))))


;;;
;;;; Version-Label
;;;


(class Version-Label extends Label-View
  
  
  (method override (text-color)
    {Color World-Ochre}))


;;;
;;;; Kind-Label
;;;


(class Kind-Label extends Label-View
  
  
  (method override (text-color)
    {Color World-Ochre}))


;;;
;;;; Exception-Label
;;;


(class Exception-Label extends Label-View
  
  
  (property exception initialize #f accessors generate)
  
  
  (method override (text-color)
    {Color World-Red})
  
  
  (method override (get-tooltip?)
    #t)
  
  
  (method override (get-tooltip-text)
    (typecase exception
      ((Exception)
       (exception-reason exception))
      (else
       #f))))


;;;
;;;; Tiers-Pane
;;;


(class Tiers-Pane extends World-Pane
  
  
  (form
    (<install>
      (<Border-View>  name: content location: center border-type: edge style: entry layout-type: fill background: {Color red: .000 green: .000 blue: .000 alpha: .250}
        (<Tiers-View> name: tiers   location: center
          (<tiers~>                 selection-handler: {Event-Handler :form on-selection-change} backspace-press-handler: {Event-Handler :form on-backspace-press})))))
  
  
  (method (on-selection-change evt)
    (let ((zone (current-zone)))
      (tiers-update~ zone)))
  
  
  (method override (on-backspace-press evt)
    (let ((zone (current-zone)))
      (on-delete~ zone evt))))


;;;
;;;; Clients-Pane
;;;


(class Clients-Pane extends World-Pane
  
  
  (form
    (<install>
      (<Border-View>    name: content location: center border-type: edge style: entry layout-type: fill background: {Color red: .000 green: .000 blue: .000 alpha: .250}
        (<Clients-View> name: tiers   location: center
          (<tiers~>                   selection-handler: {Event-Handler :form on-selection-change} backspace-press-handler: {Event-Handler :form on-backspace-press})))))
  
  
  (method (on-selection-change evt)
    (let ((zone (current-zone)))
      (tiers-update~ zone)))
  
  
  (method override (on-backspace-press evt)
    (let ((zone (current-zone)))
      (on-delete~ zone evt))))


;;;
;;;; Servers-Pane
;;;


(class Servers-Pane extends World-Pane
  
  
  (form
    (<install>
      (<Border-View>    name: content location: center border-type: edge style: entry layout-type: fill background: {Color red: .000 green: .000 blue: .000 alpha: .250}
        (<Servers-View> name: tiers   location: center
          (<tiers~>                   selection-handler: {Event-Handler :form on-selection-change} backspace-press-handler: {Event-Handler :form on-backspace-press})))))
  
  
  (method (on-selection-change evt)
    (let ((zone (current-zone)))
      (tiers-update~ zone)))
  
  
  (method override (on-backspace-press evt)
    (let ((zone (current-zone)))
      (on-delete~ zone evt))))


;;;
;;;; Templates-Pane
;;;


(class Templates-Pane extends World-Pane
  
  
  (form
    (<install>
      (<Border-View>      name: content   location: center border-type: edge style: entry layout-type: fill background: {Color red: .000 green: .000 blue: .000 alpha: .250}
        (<Templates-View> name: templates location: center
          (<templates~>                   selection-handler: {Event-Handler :form on-selection-change})))))
  
  
  (method (on-selection-change evt)
    (let ((zone (current-zone)))
      (templates-update~ zone))))


;;;
;;;; Info-Label
;;;


(class Info-Label extends Label-View
  
  
  (form
    (<install> size: {Dimension 150 16} color: {Color red: .892 green: .773 blue: .290})))


;;;
;;;; Info-View
;;;


(class Info-View extends Border-View
  
  
  (form
    (<install>                          size: {Dimension 150 19} border-type: edge style: entry
      (<Scroller-View>                  hscroll?: #f vscroll?: #f
        (<content~>                     layout-type: fill
          (<World-Text-View> name: text accepts-returns?: #f left-padding: 1 top-padding: 1 background: #f show-unfocused-selection?: #f focus-selects-all?: #t return-press-handler: {Event-Handler :form on-return})))))
  
  
  (method override (get-tab-stops)
    (let ((zone (current-zone)))
      (tab-stops~ zone)))
  
  
  (method (on-return evt)
    (let ((zone (current-zone)))
      (case stage
        ((new-client) (create-client~ zone))
        ((new-server) (create-server~ zone)))))))
