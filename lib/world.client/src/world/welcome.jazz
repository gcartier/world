;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; Welcome Screen
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2016
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.welcome jazz


(import (jazz.event)
        (jazz.graphic)
        (jazz.handler)
        (jazz.io)
        (jazz.jml)
        (jazz.network)
        (jazz.process)
        (jazz.text)
        (jazz.ui)
        (world)
        (world.autoload)
        (world.generation)
        (world.geometry)
        (world.interface.clients)
        (world.interface.dialogs)
        (world.interface.documents)
        (world.interface.pane)
        (world.interface.panel)
        (world.interface.servers)
        (world.interface.templates)
        (world.interface.zones)
        (world.io)
        (world.motion)
        (world.music)
        (world.skybox)
        (world.syntax (phase syntax))
        (world.tag)
        (world.task))


(class Welcome-Zone extends Zone
  
  
  (slot stage              initialize #f getter generate)
  (slot preserved-ambience initialize #f getter generate)
  (slot preserved-music    initialize #f getter generate)
  (slot post-accept        initialize #f accessors generate)
  
  
  (form
    (<install> sun-cycle?: #f))
  
  
  (method override (welcome?)
    #t)
  
  
  (method override (finish rest)
    (nextmethod rest)
    (let ((world (current-world)))
      (setup-stage)
      (preload-new)
      (check-copyright)
      (install-welcome)
      (goto-new-no-zones)
      (set-escape-hook~ world close-panel)
      (set-draw-me? #f)))
  
  
  (method override (destroy)
    (let ((world (current-world)))
      (uninstall-welcome)
      (no-showcase~ world)
      (set-escape-hook~ world #f)
      (set-draw-me? #t)
      (uninstall-camera))
    (nextmethod))
  
  
  (method (setup-stage)
    (set! stage (if (client-side?)
                    (if local-server/clients?
                        'multi
                      'single)
                  'server)))
  
  
  (method override (setup-camera)
    (nextmethod)
    (install-camera))
  
  
  (method override (show-belt?)
    #f)
  
  
  (method (preload-new)
    (let ((world (current-world)))
      (goto-showcase~ world 'avatars)
      (no-showcase~ world)))
  
  
  (method (check-copyright)
    (when (process-copyright-changed?~ (get-process))
      (set! stage 'copyright)))
  
  
  (method (install-welcome)
    (let ((interface (current-interface))
          (world (current-world)))
      (for-each (lambda (child)
                  (set-visible?~ child #f))
                (get-children~ interface))
      (unless (eq? stage 'copyright)
        (new Label-View name: 'welcome parent: interface title: (if (client-side?) "Yownu" "Yownu Server") location: '(40 30) size: {Dimension 400 80} font: {Font font-name: tahoma point-size: 60 shadow: thin})))
    (case stage
      ((copyright)
       (install-copyright))
      ((single)
       (install-singleplayer))
      ((multi)
       (install-multiplayer))
      ((server)
       (install-server))
      ((new-zone)
       (install-new-zone))
      ((new-client)
       (install-new-client))
      ((new-server)
       (install-new-server))))
  
  
  (method (install-copyright)
    (let ((interface (current-interface))
          (world (current-world)))
      (let ((new? (process-copyright-new?~ (get-process))))
        (show-about title: "Copyright Agreement" closable?: #f)
        (let ((about (child~ interface 'about&copyright)))
          (let ((size (nu+ (get-size~ about) (new Dimension 0 (+ (if new? 0 (+ 16 15)) (+ 20 22)))))
                (insets (new Rect 0 (if new? 0 15) 0 20)))
            (let ((copyright-agreement (new Layout-View name: 'copyright-agreement parent: interface size: size layout-type: 'border layout-insets: insets location: 'center)))
              (unless new?
                (let ((north (new Layout-View parent: copyright-agreement size: {Dimension 220 16} layout-type: 'center location: 'north)))
                  (new Label-View title: "Copyright Agreement has changed" parent: north size: {Dimension 300 16} location: 'center justification: 'center)))
              (set-location~ about 'center)
              (set-parent~ about copyright-agreement)
              (let ((south (new Layout-View parent: copyright-agreement size: {Dimension 220 22} layout-type: 'center location: 'south)))
                (let ((accept/decline (new Layout-View name: 'accept/decline parent: south size: {Dimension 220 22} layout-type: 'border)))
                  (new Push-Button name: 'accept parent: accept/decline title: "Accept" location: 'west action-handler: on-accept)
                  (new Push-Button name: 'decline parent: accept/decline title: "Decline" location: 'east action-handler: on-decline)
                  (layout-view~ accept/decline)))
              (layout-view~ copyright-agreement))
            (layout-view~ interface))))))
  
  
  (method (install-singleplayer)
    (let ((interface (current-interface))
          (world (current-world)))
      (let ((version (process-version~ (get-process)))
            (release (process-release~ (get-process))))
        (push-pane (new Zones-Pane name: 'zones parent: interface size: {Dimension 266 488} location: 'center layout-type: 'border))
        (new Version-Label name: 'version parent: interface title: (format "v{a}" (present~ version)) location: '(40 -100) size: {Dimension 200 40} font: {Font font-name: tahoma point-size: 12 shadow: thin})
        (new Version-Label name: 'release parent: interface title: release location: '(40 -80) size: {Dimension 200 40} font: {Font font-name: tahoma point-size: 12 shadow: thin})
        (new Push-Button name: 'about parent: interface title: "About & Copyright" location: '(-40 -110) size: {Dimension 160 22} action-handler: on-about)
        @tutorial (new Push-Button name: 'tutorial parent: interface title: "Tutorial" location: '(-40 40) action-handler: on-tutorial)
        (new Push-Button name: 'quit parent: interface title: "Quit" location: '(40 -40) action-handler: on-quit)
        (new Push-Button name: 'multi parent: interface title: "Multiplayer" size: {Dimension 120 22} location: '(24. -40) action-handler: on-multiplayer)
        (new Push-Button name: 'open parent: interface title: "Enter" location: '(center -40) action-handler: on-open)
        (new Push-Button name: 'rename parent: interface title: "Rename" location: '(-280 -40) action-handler: on-rename)
        (new Push-Button name: 'delete parent: interface title: "Delete" location: '(-160 -40) action-handler: on-delete)
        (new Push-Button name: 'new parent: interface title: "New" location: '(-40 -40) action-handler: on-new-zone)
        (layout-view~ interface)
        (no-showcase~ world)
        (zones-update)
        (delay-event
          (lambda ()
            (acquire-focus~ (zones-tree)))))))
  
  
  (method (install-multiplayer)
    (let ((interface (current-interface))
          (world (current-world)))
      (let ((version (process-version~ (get-process)))
            (release (process-release~ (get-process))))
        (push-pane (new Clients-Pane name: 'zones parent: interface size: {Dimension 266 488} location: 'center layout-type: 'border))
        (new Version-Label name: 'version parent: interface title: (format "v{a}" (present~ version)) location: '(40 -100) size: {Dimension 200 40} font: {Font font-name: tahoma point-size: 12 shadow: thin})
        (new Version-Label name: 'release parent: interface title: release location: '(40 -80) size: {Dimension 200 40} font: {Font font-name: tahoma point-size: 12 shadow: thin})
        (new Push-Button name: 'about parent: interface title: "About & Copyright" location: '(-40 -110) size: {Dimension 160 22} action-handler: on-about)
        @tutorial (new Push-Button name: 'tutorial parent: interface title: "Tutorial" location: '(-40 40) action-handler: on-tutorial)
        (new Push-Button name: 'quit parent: interface title: "Quit" location: '(40 -40) action-handler: on-quit)
        (new Push-Button name: 'single parent: interface title: "Singleplayer" size: {Dimension 120 22} location: '(24. -40) action-handler: on-singleplayer)
        (new Push-Button name: 'open parent: interface title: "Connect" location: '(center -40) action-handler: on-open)
        (new Push-Button name: 'rename parent: interface title: "Rename" location: '(-280 -40) action-handler: on-rename)
        (new Push-Button name: 'delete parent: interface title: "Delete" location: '(-160 -40) action-handler: on-delete)
        (new Push-Button name: 'new parent: interface title: "New" location: '(-40 -40) action-handler: on-new-client)
        (layout-view~ interface)
        (no-showcase~ world)
        (zones-update)
        (delay-event
          (lambda ()
            (acquire-focus~ (zones-tree)))))))
  
  
  (method (install-server)
    (let ((interface (current-interface))
          (world (current-world)))
      (let ((version (process-version~ (get-process)))
            (release (process-release~ (get-process))))
        (push-pane (new Servers-Pane name: 'zones parent: interface size: {Dimension 266 488} location: 'center layout-type: 'border))
        (new Version-Label name: 'version parent: interface title: (format "v{a}" (present~ version)) location: '(40 -100) size: {Dimension 200 40} font: {Font font-name: tahoma point-size: 12 shadow: thin})
        (new Version-Label name: 'release parent: interface title: release location: '(40 -80) size: {Dimension 200 40} font: {Font font-name: tahoma point-size: 12 shadow: thin})
        (new Push-Button name: 'about parent: interface title: "About & Copyright" location: '(-40 -110) size: {Dimension 160 22} action-handler: on-about)
        (new Push-Button name: 'quit parent: interface title: "Quit" location: '(40 -40) action-handler: on-quit)
        (new Push-Button name: 'open parent: interface title: "Serve" location: '(center -40) action-handler: on-open)
        (new Push-Button name: 'rename parent: interface title: "Rename" location: '(-280 -40) action-handler: on-rename)
        (new Push-Button name: 'delete parent: interface title: "Delete" location: '(-160 -40) action-handler: on-delete)
        (new Push-Button name: 'new parent: interface title: "New" location: '(-40 -40) action-handler: on-new-server)
        (layout-view~ interface)
        (no-showcase~ world)
        (zones-update)
        (delay-event
          (lambda ()
            (acquire-focus~ (zones-tree)))))))
  
  
  (method (install-new-zone)
    (let ((interface (current-interface))
          (world (current-world)))
      (new Templates-Pane name: 'templates parent: interface size: {Dimension 266 488} location: '(-40 center) layout-type: 'border)
      (new Push-Button name: 'back parent: interface title: "Back" location: '(40 -40) action-handler: on-back)
      (new Push-Button name: 'create parent: interface title: "Create" location: '(-40 -40) action-handler: on-create-zone)
      (set-create~ (locate~ (child~ interface 'templates) 'templates) zone-create)
      (layout-view~ interface)
      (goto-showcase~ world 'avatars)
      (templates-update)
      (delay-event
        (lambda ()
          (acquire-focus~ (templates-tree))))))
  
  
  (method (install-new-client)
    (let ((interface (current-interface))
          (world (current-world)))
      (new Info-Label name: 'server-name-label parent: interface title: "Server Name" location: '(-40 -280))
      (new Info-View name: 'server-name parent: interface location: '(-40 -260))
      (new Info-Label name: 'server-address-label parent: interface title: "Server Address" location: '(-40 -240) color: {Color red: .892 green: .773 blue: .290})
      (new Info-View name: 'server-address parent: interface location: '(-40 -220))
      (new Info-Label name: 'server-port-label parent: interface title: "Server Port" location: '(-40 -200) color: {Color red: .892 green: .773 blue: .290})
      (new Info-View name: 'server-port parent: interface location: '(-40 -180))
      (new Info-Label name: 'name-label parent: interface title: "Avatar Name" location: '(-40 -140) color: {Color red: .892 green: .773 blue: .290})
      (new Info-View name: 'name parent: interface location: '(-40 -120))
      (new Push-Button name: 'back parent: interface title: "Back" location: '(40 -40) action-handler: on-back)
      (new Push-Button name: 'create parent: interface title: "Create" location: '(-40 -40) action-handler: on-create-client)
      (text-content-set (info-text 'server-address) (host->string default-server-host))
      (text-content-set (info-text 'server-port) (port->string default-server-service))
      (layout-view~ interface)
      (goto-showcase~ world 'avatars)
      (delay-event
        (lambda ()
          (acquire-focus~ (locate~ (child~ interface 'server-name) 'text))))))
  
  
  (method (install-new-server)
    (let ((interface (current-interface))
          (world (current-world)))
      (new Templates-Pane name: 'templates parent: interface size: {Dimension 266 238} location: '(-40 center) layout-type: 'border)
      (new Info-Label name: 'server-address-label parent: interface title: "Server Address" location: '(-40 -190) color: {Color red: .892 green: .773 blue: .290})
      (new Info-View name: 'server-address parent: interface location: '(-40 -170))
      (new Info-Label name: 'server-port-label parent: interface title: "Server Port" location: '(-40 -150) color: {Color red: .892 green: .773 blue: .290})
      (new Info-View name: 'server-port parent: interface location: '(-40 -130))
      (new Push-Button name: 'back parent: interface title: "Back" location: '(40 -40) action-handler: on-back)
      (new Push-Button name: 'create parent: interface title: "Create" location: '(-40 -40) action-handler: on-create-server)
      (set-kind~ (locate~ (child~ interface 'templates) 'templates) 'server)
      (set-create~ (locate~ (child~ interface 'templates) 'templates) server-create)
      (text-content-set (info-text 'server-address) (host->string default-server-host))
      (text-content-set (info-text 'server-port) (port->string default-server-service))
      (layout-view~ interface)
      (goto-showcase~ world 'avatars)
      (templates-update)
      (delay-event
        (lambda ()
          (acquire-focus~ (templates-tree))))))
  
  
  (method (uninstall-welcome)
    (let ((interface (current-interface))
          (world (current-world)))
      (when (eq? stage 'single)
        (pop-pane (zones-pane)))
      (setup-interface~ world)))
  
  
  (method (goto-new-no-zones)
    (when (and (eq? stage 'single) (= (get-visible-count~ (get-tree~ (zones-view))) 0))
      (set! stage 'new-zone)
      (install-welcome)))
  
  
  (method (close-panel)
    (let ((panel (top-panel)))
      (when panel
        (close~ panel)))
    #t)
  
  
  (method override (start-ambience)
    (let ((ambience (current-ambience)))
      (set! preserved-ambience (list (get-ambience?~ ambience)))
      (set-ambience?~ ambience #f)))
  
  
  (method override (start-music)
    (let ((music (current-music)))
      (when (get-music?~ music)
        (set! preserved-music (list (get-music-style~ music) (get-music-volume~ music)))
        (set-music-style~ music "minecraft/music/menu")
        (set-music-volume~ music .5)
        (change-music~ music))))
  
  
  (method override (stop-ambience)
    (nextmethod)
    (let ((ambience (current-ambience)))
      (bind (ambience?) preserved-ambience
        (set-ambience?~ ambience ambience?))))
  
  
  (method override (stop-music)
    (nextmethod)
    (let ((music (current-music)))
      (when (get-music?~ music)
        (bind (music-style music-volume) preserved-music
          (set-music-style~ music music-style)
          (set-music-volume~ music music-volume)))))
  
  
  (method override (prepare-skybox)
    (set! skybox (let ((skybox (random-element (get-skyboxes))))
                   (prepare~ skybox)
                   skybox)))
  
  
  (method override (player-task task <Task>)
    (with-task task
      (lambda (exit)
        (task-sleep task +infinity 0. exit))))
  
  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method (zones-pane)
    (let ((interface (current-interface)))
      (child~ interface 'zones)))
  
  
  (method (zones-view)
    (locate~ (zones-pane) 'zones))
  
  
  (method (zones-tree)
    (get-tree~ (zones-view)))
  
  
  (method (templates-pane)
    (let ((interface (current-interface)))
      (child~ interface 'templates)))
  
  
  (method (templates-view)
    (locate~ (templates-pane) 'templates))
  
  
  (method (templates-tree)
    (get-tree~ (templates-view)))
  
  
  (method (zone-kind)
    (case stage
      ((single) 'zone)
      ((multi) 'client)
      ((server) 'server)))
  
  
  ;;;
  ;;;; Update
  ;;;
  
  
  (method (zones-update)
    (let ((interface (current-interface)))
      (let ((pane (find-component~ interface 'zones)))
        (when pane
          (let ((tree (get-tree~ (locate~ pane 'zones))))
            (let ((all-data (get-selected-data~ tree)))
              (let ((data (remove-false all-data)))
                (let ((count (length data)))
                  (set-enabled?~ (child~ interface 'open) (= count 1))
                  (set-enabled?~ (child~ interface 'rename) (= count 1))
                  (set-enabled?~ (child~ interface 'delete) (> count 0))))))))))
  
  
  (method (templates-update)
    (let ((interface (current-interface)))
      (let ((pane (find-component~ interface 'templates)))
        (when pane
          (let ((tree (get-tree~ (locate~ pane 'templates))))
            (let ((all-data (get-selected-data~ tree)))
              (let ((data (remove-false all-data)))
                (let ((count (length data)))
                  (set-enabled?~ (child~ interface 'create) (= count 1))))))))))
  
  
  ;;;
  ;;;; Mouse
  ;;;
  
  
  (method override (mouse-track elapse dx dy)
    (when (memq? stage '(new-zone new-client))
      (let ((world (current-world)))
        (let ((entity (get-selection-entity~ (get-showcase~ world))))
          (let ((angle (/ dx 200.))
                (lookat (get-lookat~ entity))
                (up (get-world-up~ world)))
            (set-lookat~ entity (rotate-lookat& lookat angle up))
            (update-matrix~ entity)))))
    #t)
  
  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method (on-accept evt)
    (process-copyright-update~ (get-process))
    (if post-accept
        (post-accept)
      (goto-stage 'single)
      (goto-new-no-zones)))
  
  
  (method (on-decline evt)
    (quit-process~ (get-process)))
  
  
  (method (on-open evt)
    (open-selected~ (zones-view)))
  
  
  (method (on-about evt)
    (let ((panel (top-panel)))
      (if (is? panel World-Document)
          (close~ panel)
        (show-about))))
  
  
  (method (show-about (title: title #f) (closable?: closable? #t))
    (let ((world (current-world)))
      (open-about~ world name: 'about&copyright title: (or title "About & Copyright") movable?: #f closable?: closable? background: {Color red: .000 green: .000 blue: .000 alpha: .250})))
  
  
  @tutorial
  (method (on-tutorial evt)
    (open-tutorial-zone))
  
  
  (method (on-delete evt)
    (let ((world (current-world)))
      (let ((zones (zones-view)))
        (let ((files (get-selected-data~ (get-tree~ zones))))
          (when (not-null? files)
            (push-pane
              (open-message (format "Delete zone{a} and lose changes?" (format-plural (length files)))
                            caption: "Delete"
                            type: 'question
                            yes: "Yes"
                            no: "No"
                            execute: (lambda (evt)
                                       (let ((dialog (find-ascendant~ (get-sender~ evt) World-Dialog))
                                             (button (get-property~ evt button:)))
                                         (close~ dialog)
                                         (case button
                                           ((yes)
                                            (for-each (lambda (file)
                                                        (delete-directory~ (zone-directory file)))
                                                      files)
                                            (view-zones~ zones)
                                            (zones-update))))))))))))
  
  
  (method (on-rename evt)
    (let ((world (current-world)))
      (let ((zones (zones-view)))
        (let ((tree (get-tree~ zones)))
          (let ((from (get-single-selected-data~ tree)))
            (when from
              (let (iter)
                (push-pane
                  (choose-new~ world "Rename Zone" "Zone:" (zone-name from)
                    (lambda (to)
                      (let ((from-dir (get-parent~ from))
                            (to-dir (get-parent~ to))
                            (from-name (get-name~ from))
                            (to-name (get-name~ to)))
                        (move-pathname~ from-dir to-dir)
                        (move-pathname~ (new-file~ to-dir from-name) (new-file~ to-dir to-name))
                        (let ((row (get-selected-row~ tree)))
                          (set-user-data~ row to)
                          (let ((cell (new Cell (row->line~ tree row) 0)))
                            (set-cell-title~ tree cell (zone-name to))
                            (invalidate-cell~ tree cell)))))
                    kind: (zone-kind)
                    exists: (lambda (file proc)
                              (push-pane
                                (open-message (format "Zone {a} already exists. Please choose another name" (zone-name file))
                                              caption: "Rename"
                                              type: 'message
                                              execute: (lambda (evt)
                                                         (let ((dialog (find-ascendant~ (get-sender~ evt) World-Dialog))
                                                               (button (get-property~ evt button:)))
                                                           (close~ dialog)
                                                           (iter)))))))))))))))
  
  
  (method (on-new-zone evt)
    (goto-stage 'new-zone))
  
  
  (method (on-new-client evt)
    (goto-stage 'new-client))
  
  
  (method (on-new-server evt)
    (goto-stage 'new-server))
  
  
  (method (on-back evt)
    (goto-stage (case stage
                  ((new-zone) 'single)
                  ((new-client) 'multi)
                  ((new-server) 'server))))
  
  
  (method (goto-stage what)
    (uninstall-welcome)
    (set! stage what)
    (install-welcome))
  
  
  (method (on-create-zone evt)
    (let ((world (current-world)))
      (create-selected~ (templates-view))))
  
  
  (method (zone-create file)
    (let ((me (current-me)))
      (let ((zone (open-zone file))
            (avatar (selected-avatar)))
        (set-property~ (get-designer~ zone) zone 'avatar avatar)
        (update-model~ me)
        zone)))
  
  
  (method (selected-avatar)
    (let ((world (current-world)))
      (get-model~ (get-selection-entity~ (find-showcase~ world 'avatars)))))
  
  
  (method (on-quit evt)
    (quit-process~ (get-process)))
  
  
  (method (on-multiplayer evt)
    (goto-stage 'multi))
  
  
  (method (on-singleplayer evt)
    (goto-stage 'single))
  
  
  (method (on-create-client evt)
    (create-client))
  
  
  (method (on-create-server evt)
    (let ((world (current-world)))
      (create-selected~ (templates-view))))
  
  
  (method (create-client)
    (let ((fields (client-fields)))
      (let ((contents (map (lambda (field)
                             (bind (label view) field
                               (text-content (info-text view))))
                           fields)))
        (bind (server-name server-address server-port name) contents
          (let ((avatar (selected-avatar))
                (dir (new-directory~ {Directory Settings "clients"} server-name)))
            (create-directories~ dir)
            (call-with-output-file (path-settings (new-file~ dir ".client"))
              (lambda (output)
                (format output ";;;========={%}")
                (format output ";;;  Yownu{%}")
                (format output ";;;========={%}")
                (format output ";;;{%}")
                (format output ";;;; Client Settings{%}")
                (format output ";;;{%}")
                (format output "{%}")
                (format output "{%}")
                (format output "world.client.server-host    {s}{%}" (string->host server-address))
                (format output "world.client.server-service {s}{%}" (string->port server-port))
                (format output "world.client.player-name    {s}{%}" name)
                (format output "world.client.player-avatar  {s}{%}" avatar)))
            (call-with-output-file (path-settings (new-file~ dir (zone-filename server-name)))
              (lambda (output)
                (format output ";;;========={%}")
                (format output ";;;  Yownu{%}")
                (format output ";;;========={%}")
                (format output ";;;{%}")
                (format output ";;;; Zone{%}")
                (format output ";;;{%}")
                (format output "{%}")
                (format output "{%}")
                (format output "(data jazz{%}")
                (format output "{%}")
                (format output "{%}")
                (format output "(version {a}){%}" (present-string~ zone-version))
                (format output "(import world.data){%}")
                (format output "{%}")
                (format output "{%}")
                (format output "(form{%}")
                (format output "  (<Zone>{%}")
                (format output "    (<Player>)))){%}")))))
        (goto-stage 'multi))))
  
  
  (method (client-fields)
    '((server-name-label server-name #t)
      (server-address-label server-address #t)
      (server-port-label server-port #f)
      (name-label name #t)))
  
  
  (method (client-stops)
    (map info-text (map second (client-fields))))
  
  
  (method (info-text view)
    (let ((interface (current-interface)))
      (locate~ (child~ interface view) 'text)))
  
  
  (method (server-create file)
    (let ((fields (server-fields)))
      (let ((contents (map (lambda (field)
                             (bind (label view) field
                               (text-content (info-text view))))
                           fields)))
        (bind (server-address server-port) contents
          (let ((dir (zone-directory file)))
            (call-with-output-file (path-settings (new-file~ dir ".server"))
              (lambda (output)
                (format output ";;;========={%}")
                (format output ";;;  Yownu{%}")
                (format output ";;;========={%}")
                (format output ";;;{%}")
                (format output ";;;; Server Settings{%}")
                (format output ";;;{%}")
                (format output "{%}")
                (format output "{%}")
                (format output "world.server.host    {s}{%}" (string->host server-address))
                (format output "world.server.service {s}{%}" (string->port server-port))))))
        (open-zone file))))
  
  
  (method (server-fields)
    '((server-address-label server-address #t)
      (server-port-label server-port #f)))
  
  
  (method (server-stops)
    (cons (templates-tree) (map info-text (map second (server-fields)))))
  
  
  (method (text-content text)
    (let ((content (get-string-content~ text)))
      (if (empty-string? content)
          #f
        content)))
  
  
  (method (text-content-set text content)
    (set-string-content~ text (->string content)))
  
  
  (method (tab-stops)
    (case stage
      ((new-client) (client-stops))
      ((new-server) (server-stops)))))


;;;
;;;; Camera
;;;


(definition camera-tick
  #f)

(definition camera-angle
  2.0)


(definition (install-camera)
  (let ((zone (current-zone)))
    (set! camera-tick path-camera)
    (register-tick~ zone camera-tick))
  (path-camera 0.))


(definition (uninstall-camera)
  (let ((zone (current-zone)))
    (unregister-tick~ zone camera-tick)
    (set! camera-tick #f)))


(definition (path-camera elapse)
  (let ((world (current-world)))
    (increase! camera-angle (/ elapse 10.))
    (let ((target (vertex -11.500 8.500 -32.500))
          (angle camera-angle)
          (radius 75.)
          (elevation 20.))
      (let ((x (cos angle))
            (z (sin angle)))
        (let ((flat (vertex+ target (vertex-scalar*& (vertex x 0. z) radius))))
          (let ((pos (vertex+ flat (vertex 0. elevation 0.))))
            (let ((dir (vertex-normalize (vertex-& target pos)))
                  (dir-flat (vertex-normalize (vertex-& target flat))))
              (let ((vert-angle (vector-angle dir dir-flat)))
                (let ((sight dir-flat)
                      (eye (get-eye~ world))
                      (up (get-world-up~ world)))
                  (let ((right (cross-product sight up)))
                    (let ((lookat (lookat sight up right)))
                      (free-motion~ world feedback?: #f)
                      (rotate-lookat-vertical! lookat (- vert-angle))
                      (lookat-copy! (get-lookat~ eye) lookat)
                      (set-position~ eye pos)
                      (derive-target~ eye)
                      (camera-update~ eye))))))))))))


;;;
;;;; Version-Label
;;;


(class Version-Label extends Label-View
  
  
  (method override (text-color)
    {Color World-Ochre}))


;;;
;;;; Zones-Pane
;;;


(class Zones-Pane extends World-Pane
  
  
  (form
    (<install>
      (<Border-View>  name: content location: center border-type: edge style: entry layout-type: fill background: {Color red: .000 green: .000 blue: .000 alpha: .250}
        (<Zones-View> name: zones   location: center
          (<zones~>                 selection-handler: {Event-Handler :form on-selection-change} backspace-press-handler: {Event-Handler :form on-backspace-press})))))
  
  
  (method (on-selection-change evt)
    (let ((zone (current-zone)))
      (zones-update~ zone)))
  
  
  (method override (on-backspace-press evt)
    (let ((zone (current-zone)))
      (on-delete~ zone evt))))


;;;
;;;; Clients-Pane
;;;


(class Clients-Pane extends World-Pane
  
  
  (form
    (<install>
      (<Border-View>    name: content location: center border-type: edge style: entry layout-type: fill background: {Color red: .000 green: .000 blue: .000 alpha: .250}
        (<Clients-View> name: zones   location: center
          (<zones~>                   selection-handler: {Event-Handler :form on-selection-change} backspace-press-handler: {Event-Handler :form on-backspace-press})))))
  
  
  (method (on-selection-change evt)
    (let ((zone (current-zone)))
      (zones-update~ zone)))
  
  
  (method override (on-backspace-press evt)
    (let ((zone (current-zone)))
      (on-delete~ zone evt))))


;;;
;;;; Servers-Pane
;;;


(class Servers-Pane extends World-Pane
  
  
  (form
    (<install>
      (<Border-View>    name: content location: center border-type: edge style: entry layout-type: fill background: {Color red: .000 green: .000 blue: .000 alpha: .250}
        (<Servers-View> name: zones   location: center
          (<zones~>                   selection-handler: {Event-Handler :form on-selection-change} backspace-press-handler: {Event-Handler :form on-backspace-press})))))
  
  
  (method (on-selection-change evt)
    (let ((zone (current-zone)))
      (zones-update~ zone)))
  
  
  (method override (on-backspace-press evt)
    (let ((zone (current-zone)))
      (on-delete~ zone evt))))


;;;
;;;; Templates-Pane
;;;


(class Templates-Pane extends World-Pane
  
  
  (form
    (<install>
      (<Border-View>      name: content   location: center border-type: edge style: entry layout-type: fill background: {Color red: .000 green: .000 blue: .000 alpha: .250}
        (<Templates-View> name: templates location: center
          (<templates~>                   selection-handler: {Event-Handler :form on-selection-change})))))
  
  
  (method (on-selection-change evt)
    (let ((zone (current-zone)))
      (templates-update~ zone))))


;;;
;;;; Info-Label
;;;


(class Info-Label extends Label-View
  
  
  (form
    (<install> size: {Dimension 150 16} color: {Color red: .892 green: .773 blue: .290})))


;;;
;;;; Info-View
;;;


(class Info-View extends Border-View
  
  
  (form
    (<install>                    size: {Dimension 150 19} border-type: edge style: entry
      (<Scroller-View>            hscroll?: #f vscroll?: #f
        (<content~>               layout-type: fill
          (<Text-View> name: text accepts-returns?: #f left-padding: 1 top-padding: 1 background: #f show-unfocused-selection?: #f return-press-handler: {Event-Handler :form on-return})))))
  
  
  (method override (get-tab-stops)
    (let ((zone (current-zone)))
      (tab-stops~ zone)))
  
  
  (method (on-return evt)
    (let ((zone (current-zone)))
      (case (get-stage~ zone)
        ((new-client) (create-client~ zone))
        ((new-server) (create-server~ zone)))))))
