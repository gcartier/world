;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; Welcome Screen
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.welcome jazz


(import (jazz.graphic)
        (jazz.jml)
        (jazz.process)
        (jazz.ui)
        (world)
        (world.autoload)
        (world.geometry)
        (world.interface.pane)
        (world.interface.templates)
        (world.interface.zones)
        (world.io)
        (world.log)
        (world.motion)
        (world.music)
        (world.skybox)
        (world.syntax (phase syntax))
        (world.task))


(class Welcome-Zone extends Zone
  
  
  (slot stage              initialize 'open getter generate)
  (slot preserved-ambience initialize #f    getter generate)
  (slot preserved-music    initialize #f    getter generate)
  
  
  (method override (finish rest)
    (nextmethod rest)
    (let ((world (current-world)))
      (let ((interface (get-interface~ world)))
        (for-each (lambda (child)
                    (set-visible?~ child #f))
                  (get-children~ interface))
        (new Label-View name: 'welcome parent: interface title: "Yownu" location: '(40 30) size: {Dimension 200 80} font: {Font font-name: tahoma point-size: 60})
        (install-welcome)
        (set-escape-hook~ world (lambda ()))
        (set-draw-me? #f))))
  
  
  (method override (destroy)
    (let ((world (current-world)))
      (let ((interface (get-interface~ world)))
        (close~ (child~ interface 'welcome))
        (uninstall-welcome)
        (setup-interface~ world)
        (no-showcase~ world)
        (set-escape-hook~ world #f)
        (set-draw-me? #t)))
    (nextmethod))
  
  
  (method (install-welcome)
    (case stage
      ((open)
       (install-open))
      ((new)
       (install-new))))
  
  
  (method (install-open)
    (let ((world (current-world)))
      (let ((interface (get-interface~ world)))
        (new Zones-Pane name: 'zones parent: interface size: {Dimension 266 488} location: 'center layout-type: 'border)
        (new Push-Button name: 'quit parent: interface title: "Quit" location: '(40 -40) action-handler: on-quit)
        (new Push-Button name: 'open parent: interface title: "Open" location: '(center -40) action-handler: on-open)
        (new Push-Button name: 'new parent: interface title: "New" location: '(-40 -40) action-handler: on-new)
        (layout-view~ interface)
        (no-showcase~ world))))
  
  
  (method (install-new)
    (let ((world (current-world)))
      (let ((interface (get-interface~ world)))
        (new Templates-Pane name: 'templates parent: interface size: {Dimension 266 488} location: '(-40 center) layout-type: 'border)
        (new Push-Button name: 'back parent: interface title: "Back" location: '(40 -40) action-handler: on-back)
        (new Push-Button name: 'create parent: interface title: "Create" location: '(-40 -40) action-handler: on-create)
        (set-created~ (locate~ (child~ interface 'templates) 'templates) zone-created)
        (layout-view~ interface)
        (goto-showcase~ world 'avatars))))
  
  
  (method (uninstall-welcome)
    (let ((world (current-world)))
      (let ((interface (get-interface~ world)))
        (for-each (lambda (name)
                    (let ((view (find-component~ interface name)))
                      (when view
                        (close~ view))))
                  '(zones quit open new templates back create)))))
  
  
  (method override (start-ambience)
    (let ((ambience (current-ambience)))
      (set! preserved-ambience (list (get-ambience?~ ambience)))
      (set-ambience?~ ambience #f)))
  
  
  (method override (start-music)
    (let ((music (current-music)))
      (set! preserved-music (list (get-music?~ music) (get-music-style~ music) (get-music-volume~ music)))
      (set-music?~ music #t)
      (set-music-style~ music "minecraft/music/menu")
      (set-music-volume~ music .5)
      (change-music~ music)))
  
  
  (method override (stop-ambience)
    (nextmethod)
    (let ((ambience (current-ambience)))
      (bind (ambience?) preserved-ambience
        (set-ambience?~ ambience ambience?))))
  
  
  (method override (stop-music)
    (nextmethod)
    (let ((music (current-music)))
      (bind (music? music-style music-volume) preserved-music
        (set-music?~ music music?)
        (set-music-style~ music music-style)
        (set-music-volume~ music music-volume))))
  
  
  (method override (prepare-skybox)
    (set! skybox (let ((skybox (random-element (get-skyboxes))))
                   (prepare~ skybox)
                   skybox)))
  
  
  (method override (player-task task <Task>)
    (declare (proper-tail-calls))
    (with-task task "player" player-id support-state
      (lambda (log-context exit)
        (task-sleep +infinity exit support-state))))
  
  
  ;;;
  ;;;; Mouse
  ;;;
  
  
  (method override (mouse-track elapse dx dy)
    (when (eq? stage 'new)
      (let ((world (current-world)))
        (let ((entity (get-selection-entity~ (get-showcase~ world))))
          (let ((angle (/ dx 200.))
                (lookat (get-lookat~ entity))
                (up (get-world-up~ world)))
            (set-lookat~ entity (rotate-lookat& lookat angle up))
            (update-matrix~ entity)))))
    #t)
  
  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method (on-open evt)
    (let ((world (current-world)))
      (open-selected~ (locate~ (child~ (get-interface~ world) 'zones) 'zones))))
  
  
  (method (on-new evt)
    (uninstall-welcome)
    (set! stage 'new)
    (install-welcome))
  
  
  (method (on-back evt)
    (uninstall-welcome)
    (set! stage 'open)
    (install-welcome))
  
  
  (method (on-create evt)
    (let ((world (current-world)))
      (create-selected~ (locate~ (child~ (get-interface~ world) 'templates) 'templates))))
  
  
  (method (zone-created zone)
    (let ((world (current-world))
          (me (current-me)))
      (let ((avatar (get-model~ (get-selection-entity~ (find-showcase~ world 'avatars)))))
        (set-property~ (get-designer~ zone) zone 'avatar avatar)
        (update-model~ (current-me)))))
  
  
  (method (on-quit evt)
    (quit-process~ (get-process))))


;;;
;;;; Zones-Pane
;;;


(class Zones-Pane extends World-Pane
  
  
  (form
    (<install>
      (<Border-View>  name: content   location: center border-type: edge style: entry layout-type: fill background: {Color red: .000 green: .000 blue: .000 alpha: .250}
        (<Zones-View> name: zones location: center)))))


;;;
;;;; Templates-Pane
;;;


(class Templates-Pane extends World-Pane
  
  
  (form
    (<install>
      (<Border-View>      name: content   location: center border-type: edge style: entry layout-type: fill background: {Color red: .000 green: .000 blue: .000 alpha: .250}
        (<Templates-View> name: templates location: center))))))
