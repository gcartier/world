;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; Welcome Screen
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.welcome jazz


(import (jazz.graphic)
        (jazz.handler)
        (jazz.jml)
        (jazz.process)
        (jazz.ui)
        (world)
        (world.autoload)
        (world.external.minecraft)
        (world.external.nbt)
        (world.geometry)
        (world.interface.dialogs)
        (world.interface.documents)
        (world.interface.pane)
        (world.interface.panel)
        (world.interface.templates)
        (world.interface.zones)
        (world.io)
        (world.log)
        (world.motion)
        (world.music)
        (world.skybox)
        (world.syntax (phase syntax))
        (world.task))


(class Welcome-Zone extends Zone
  
  
  (slot stage              initialize 'open getter generate)
  (slot preserved-ambience initialize #f    getter generate)
  (slot preserved-music    initialize #f    getter generate)
  (slot post-accept        initialize #f    accessors generate)
  
  
  (method override (finish rest)
    (nextmethod rest)
    (let ((world (current-world)))
      (preload-new)
      (check-copyright)
      (install-welcome)
      (goto-new-no-zones)
      (set-escape-hook~ world close-panel)
      (set-draw-me? #f)
      (install-camera)))
  
  
  (method override (destroy)
    (let ((world (current-world)))
      (uninstall-welcome)
      (no-showcase~ world)
      (set-escape-hook~ world #f)
      (set-draw-me? #t)
      (uninstall-camera))
    (nextmethod))
  
  
  (method (preload-new)
    (let ((world (current-world)))
      (goto-showcase~ world 'avatars)
      (no-showcase~ world)))
  
  
  (method (check-copyright)
    (when (process-copyright-changed?~ (get-process))
      (set! stage 'copyright)))
  
  
  (method (install-welcome)
    (let ((world (current-world)))
      (let ((interface (get-interface~ world)))
        (for-each (lambda (child)
                    (set-visible?~ child #f))
                  (get-children~ interface))
        (unless (eq? stage 'copyright)
          (new Label-View name: 'welcome parent: interface title: "Yownu" location: '(40 30) size: {Dimension 200 80} font: {Font font-name: tahoma point-size: 60 shadow: thin}))))
    (case stage
      ((copyright)
       (install-copyright))
      ((open)
       (install-open))
      ((new)
       (install-new))))
  
  
  (method (install-copyright)
    (let ((world (current-world)))
      (let ((interface (get-interface~ world))
            (new? (process-copyright-new?~ (get-process))))
        (show-about title: "Copyright Agreement" closable?: #f)
        (let ((about (child~ interface 'about&copyright)))
          (let ((size (nu+ (get-size~ about) (new Dimension 0 (+ (if new? 0 (+ 16 15)) (+ 20 22)))))
                (insets (new Rect 0 (if new? 0 15) 0 20)))
            (let ((copyright-agreement (new Layout-View name: 'copyright-agreement parent: interface size: size layout-type: 'border layout-insets: insets location: 'center)))
              (unless new?
                (let ((north (new Layout-View parent: copyright-agreement size: {Dimension 220 16} layout-type: 'center location: 'north)))
                  (new Label-View title: "Copyright Agreement has changed" parent: north size: {Dimension 300 16} location: 'center justification: 'center)))
              (set-location~ about 'center)
              (set-parent~ about copyright-agreement)
              (let ((south (new Layout-View parent: copyright-agreement size: {Dimension 220 22} layout-type: 'center location: 'south)))
                (let ((accept/decline (new Layout-View name: 'accept/decline parent: south size: {Dimension 220 22} layout-type: 'border)))
                  (new Push-Button name: 'accept parent: accept/decline title: "Accept" location: 'west action-handler: on-accept)
                  (new Push-Button name: 'decline parent: accept/decline title: "Decline" location: 'east action-handler: on-decline)
                  (layout-view~ accept/decline)))
              (layout-view~ copyright-agreement))
            (layout-view~ interface))))))
  
  
  (method (install-open)
    (let ((world (current-world)))
      (let ((interface (get-interface~ world))
            (version (process-version~ (get-process))))
        (push-pane (new Zones-Pane name: 'zones parent: interface size: {Dimension 266 488} location: 'center layout-type: 'border))
        (new Version-Label name: 'version parent: interface title: (format "v{a}" (present~ version)) location: '(40 -95) size: {Dimension 200 40} font: {Font font-name: tahoma point-size: 12 shadow: thin})
        (new Push-Button name: 'about parent: interface title: "About & Copyright" location: '(-40 -110) size: {Dimension 160 22} action-handler: on-about)
        (new Push-Button name: 'tutorial parent: interface title: "Tutorial" location: '(-40 40) action-handler: on-tutorial)
        (new Push-Button name: 'quit parent: interface title: "Quit" location: '(40 -40) action-handler: on-quit)
        (new Push-Button name: 'open parent: interface title: "Open" location: '(center -40) action-handler: on-open)
        (new Push-Button name: 'delete parent: interface title: "Delete" location: '(-160 -40) action-handler: on-delete)
        (new Push-Button name: 'new parent: interface title: "New" location: '(-40 -40) action-handler: on-new)
        (layout-view~ interface)
        (no-showcase~ world))))
  
  
  (method (install-new)
    (let ((world (current-world)))
      (let ((interface (get-interface~ world)))
        (new Templates-Pane name: 'templates parent: interface size: {Dimension 266 488} location: '(-40 center) layout-type: 'border)
        (new Push-Button name: 'back parent: interface title: "Back" location: '(40 -40) action-handler: on-back)
        (new Push-Button name: 'create parent: interface title: "Create" location: '(-40 -40) action-handler: on-create)
        (set-created~ (locate~ (child~ interface 'templates) 'templates) zone-created)
        (layout-view~ interface)
        (goto-showcase~ world 'avatars))))
  
  
  (method (uninstall-welcome)
    (let ((world (current-world)))
      (let ((interface (get-interface~ world)))
        (when (eq? stage 'open)
          (pop-pane (zones-pane)))
        (setup-interface~ world))))
  
  
  (method (goto-new-no-zones)
    (when (and (eq? stage 'open) (= (get-visible-count~ (get-tree~ (zones-view))) 0))
      (set! stage 'new)
      (install-welcome)))
  
  
  (method (close-panel)
    (let ((world (current-world)))
      (let ((interface (get-interface~ world)))
        (let ((panel (top-panel)))
          (when panel
            (close~ panel)))))
    #t)
  
  
  (method override (start-ambience)
    (let ((ambience (current-ambience)))
      (set! preserved-ambience (list (get-ambience?~ ambience)))
      (set-ambience?~ ambience #f)))
  
  
  (method override (start-music)
    (let ((music (current-music)))
      (set! preserved-music (list (get-music?~ music) (get-music-style~ music) (get-music-volume~ music)))
      (set-music?~ music #t)
      (set-music-style~ music "minecraft/music/menu")
      (set-music-volume~ music .5)
      (change-music~ music)))
  
  
  (method override (stop-ambience)
    (nextmethod)
    (let ((ambience (current-ambience)))
      (bind (ambience?) preserved-ambience
        (set-ambience?~ ambience ambience?))))
  
  
  (method override (stop-music)
    (nextmethod)
    (let ((music (current-music)))
      (bind (music? music-style music-volume) preserved-music
        (set-music?~ music music?)
        (set-music-style~ music music-style)
        (set-music-volume~ music music-volume))))
  
  
  (method override (prepare-skybox)
    (set! skybox (let ((skybox (random-element (get-skyboxes))))
                   (prepare~ skybox)
                   skybox)))
  
  
  (method override (player-task task <Task>)
    (declare (proper-tail-calls))
    (with-task task "player" player-id support-state
      (lambda (log-context exit)
        (task-sleep +infinity exit support-state))))
  
  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method (zones-pane)
    (let ((world (current-world)))
      (child~ (get-interface~ world) 'zones)))
  
  
  (method (zones-view)
    (locate~ (zones-pane) 'zones))
  
  
  ;;;
  ;;;; Mouse
  ;;;
  
  
  (method override (mouse-track elapse dx dy)
    (when (eq? stage 'new)
      (let ((world (current-world)))
        (let ((entity (get-selection-entity~ (get-showcase~ world))))
          (let ((angle (/ dx 200.))
                (lookat (get-lookat~ entity))
                (up (get-world-up~ world)))
            (set-lookat~ entity (rotate-lookat& lookat angle up))
            (update-matrix~ entity)))))
    #t)
  
  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method (on-accept evt)
    (process-copyright-update~ (get-process))
    (if post-accept
        (post-accept)
      (goto-stage 'open)
      (goto-new-no-zones)))
  
  
  (method (on-decline evt)
    (quit-process~ (get-process)))
  
  
  (method (on-open evt)
    (open-selected~ (zones-view)))
  
  
  (method (on-about evt)
    (let ((panel (top-panel)))
      (if (is? panel World-Document)
          (close~ panel)
        (show-about))))
  
  
  (method (show-about (title: title #f) (closable?: closable? #t))
    (let ((world (current-world)))
      (open-about~ world name: 'about&copyright title: (or title "About & Copyright") movable?: #f closable?: closable? background: {Color red: .000 green: .000 blue: .000 alpha: .250})))
  
  
  (method (on-tutorial evt)
    (open-tutorial-zone))
  
  
  (method (on-delete evt)
    (let ((world (current-world)))
      (let ((zones (zones-view)))
        (let ((file (get-single-selected-data~ (get-tree~ zones))))
          (when file
            (open-message "Delete zone and lose changes?"
                          caption: "Delete"
                          type: 'question
                          yes: "Yes"
                          no: "No"
                          execute: (lambda (evt)
                                     (let ((dialog (find-ascendant~ (get-sender~ evt) World-Dialog))
                                           (button (get-property~ evt button:)))
                                       (close~ dialog)
                                       (case button
                                         ((yes)
                                          (delete-directory~ (zone-directory file))
                                          (view-zones~ zones)))))))))))
  
  
  (method (on-new evt)
    (goto-stage 'new))
  
  
  (method (on-back evt)
    (goto-stage 'open))
  
  
  (method (goto-stage what)
    (uninstall-welcome)
    (set! stage what)
    (install-welcome))
  
  
  (method (on-create evt)
    (let ((world (current-world)))
      (create-selected~ (locate~ (child~ (get-interface~ world) 'templates) 'templates))))
  
  
  (method (zone-created zone)
    (let ((world (current-world))
          (me (current-me)))
      (let ((avatar (get-model~ (get-selection-entity~ (find-showcase~ world 'avatars)))))
        (set-property~ (get-designer~ zone) zone 'avatar avatar)
        (update-model~ (current-me))
        (teleport-spawn))))
  
  
  (method (on-quit evt)
    (quit-process~ (get-process))))


;;;
;;;; Spawn
;;;


(define (teleport x y z)
  (let ((world (current-world))
        (me (current-me)))
    (let ((eye (get-eye~ world)))
      (person-motion~ world feedback?: #f)
      (set-position~ me (vertex (cast <fl> x) (cast <fl> y) (cast <fl> z)))
      (derive-target~ eye)
      (camera-update~ eye))))


(define (teleport-spawn)
  (let ((world (current-world))
        (zone (current-zone)))
    (when (is? zone Minecraft-Zone)
      (let ((tag (get-level-nbt~ zone)))
        (let ((compound (tag-assoc "Data" (tag-value tag))))
          (let ((x (tag-assoc "SpawnX" compound))
                (y (tag-assoc "SpawnY" compound))
                (z (tag-assoc "SpawnZ" compound)))
            (teleport x (- y 63) z)))))))


;;;
;;;; Camera
;;;


(definition camera-tick
  #f)

(definition camera-angle
  2.0)


(definition (install-camera)
  (let ((zone (current-zone)))
    (set! camera-tick path-camera)
    (register-tick~ zone camera-tick))
  (path-camera 0.))


(definition (uninstall-camera)
  (let ((zone (current-zone)))
    (unregister-tick~ zone camera-tick)
    (set! camera-tick #f)))


(definition (path-camera elapse)
  (let ((world (current-world)))
    (increase! camera-angle (/ elapse 10.))
    (let ((target (vertex -11.500 8.500 -32.500))
          (angle camera-angle)
          (radius 75.)
          (elevation 20.))
      (let ((x (cos angle))
            (z (sin angle)))
        (let ((flat (vertex+ target (vertex-scalar* (vertex x 0. z) radius))))
          (let ((pos (vertex+ flat (vertex 0. elevation 0.))))
            (let ((dir (vertex-normalize (vertex- target pos)))
                  (dir-flat (vertex-normalize (vertex- target flat))))
              (let ((vert-angle (vector-angle dir dir-flat)))
                (let ((sight dir-flat)
                      (eye (get-eye~ world))
                      (up (get-world-up~ world)))
                  (let ((right (cross-product sight up)))
                    (let ((lookat (lookat sight up right)))
                      (free-motion~ world feedback?: #f)
                      (rotate-lookat-vertical! lookat (- vert-angle))
                      (lookat-copy! (get-lookat~ eye) lookat)
                      (set-position~ eye pos)
                      (derive-target~ eye)
                      (camera-update~ eye))))))))))))


;;;
;;;; Version-Label
;;;


(class Version-Label extends Label-View
  
  
  (method override (text-color)
    {Color World-Ochre}))


;;;
;;;; Zones-Pane
;;;


(class Zones-Pane extends World-Pane
  
  
  (form
    (<install>
      (<Border-View>  name: content location: center border-type: edge style: entry layout-type: fill background: {Color red: .000 green: .000 blue: .000 alpha: .250}
        (<Zones-View> name: zones   location: center
          (<zones~>                 backspace-press-handler: {Event-Handler :form on-backspace-press})))))
  
  
  (method override (on-backspace-press evt)
    (let ((zone (current-zone)))
      (on-delete~ zone evt))))


;;;
;;;; Templates-Pane
;;;


(class Templates-Pane extends World-Pane
  
  
  (form
    (<install>
      (<Border-View>      name: content   location: center border-type: edge style: entry layout-type: fill background: {Color red: .000 green: .000 blue: .000 alpha: .250}
        (<Templates-View> name: templates location: center))))))
