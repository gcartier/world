;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Marks
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2016
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.mark jazz


(import (world.draw)
        (world.dyes)
        (world.geometry))


;;;
;;;; Mark
;;;


(class Mark extends Object
  
  
  (method package virtual (draw self)
    ))


;;;
;;;; Position-Mark
;;;


(class Position-Mark extends Mark
  
  
  (slot position <vertex>     initialize #f accessors generate)
  (slot color    <f32vector+> initialize #f accessors generate)
  
  
  (method override (initialize self position (color: color #f))
    (nextmethod self)
    (set! self.position (copy-vertex position))
    (set! self.color color))
  
  
  (method override (print self output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{a}" (present-xyz position)))))
  
  
  (method meta override (marshall-object self object)
    (serialize-object (class-of object)
                      (vector (serialize (get-position object))
                              (serialize (get-color object)))))
  
  
  (method meta override (unmarshall-object self content)
    (bind-vector (position color) content
      (allocate self
                (deserialize position)
                (deserialize color))))
  
  
  (method override (draw self)
    (let ((x (vertex-x position))
          (y (vertex-y position))
          (z (vertex-z position))
          (size .4)
          (width .005))
      (render-line (vertex (- x size) y z)
                   (vertex (+ x size) y z)
                   width
                   (or color red-dye))
      (render-line (vertex x (- y size) z)
                   (vertex x (+ y size) z)
                   width
                   (or color green-dye))
      (render-line (vertex x y (- z size))
                   (vertex x y (+ z size))
                   width
                   (or color blue-dye)))))


;;;
;;;; Line-Mark
;;;


(class Line-Mark extends Mark
  
  
  (slot start <vertex>     initialize #f accessors generate)
  (slot end   <vertex>     initialize #f accessors generate)
  (slot color <f32vector+> initialize #f accessors generate)
  
  
  (method override (initialize self start end (color: color #f))
    (nextmethod self)
    (set! self.start (copy-vertex start))
    (set! self.end (copy-vertex end))
    (set! self.color color))
  
  
  (method override (print self output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{a}, {a}" (present-xyz start) (present-xyz end)))))
  
  
  (method meta override (marshall-object self object)
    (serialize-object (class-of object)
                      (vector (serialize (get-start object))
                              (serialize (get-end object))
                              (serialize (get-color object)))))
  
  
  (method meta override (unmarshall-object self content)
    (bind-vector (start end color) content
      (allocate self
                (deserialize start)
                (deserialize end)
                (deserialize color))))
  
  
  (method override (draw self)
    (let ((width .005))
      (render-line start
                   end
                   width
                   (or color red-dye)))))


;;;
;;;; Polygon-Mark
;;;


(class Polygon-Mark extends Mark
  
  
  (slot polygon initialize #f accessors generate)
  
  
  (method override (initialize self polygon)
    (nextmethod self)
    (set! self.polygon polygon))
  
  
  (method meta override (marshall-object self object)
    (serialize-object (class-of object)
                      (vector (serialize (get-polygon object)))))
  
  
  (method meta override (unmarshall-object self content)
    (bind-vector (polygon) content
      (allocate self
                (deserialize polygon))))
  
  
  (method override (draw self)
    (draw-polygon polygon purple-dye))))
