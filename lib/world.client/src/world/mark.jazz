;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Marks
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is WorldScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2014
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See http://github.com/gcartier/world for details.


(module world.mark jazz


(import (jazz.graphic.opengl.glew)
        (world.draw)
        (world.dyes)
        (world.geometry)
        (world.opengl)
        (world.serialization))


;;;
;;;; Mark
;;;


(class Mark extends Object
  
  
  (method protected virtual (draw)
    ))


;;;
;;;; Vertex-Mark
;;;


(class Vertex-Mark extends Mark
  
  
  (slot position <f64vector>  initialize #f accessors generate)
  (slot color    <f32vector+> initialize #f accessors generate)
  
  
  (method override (initialize position (color: color #f))
    (nextmethod)
    (set! position~self (copy-vertex position))
    (set! color~self color))
  
  
  (method meta override (marshall-object object)
    (serialize-object (class-of object)
                      (vector (serialize (get-position~ object))
                              (serialize (get-color~ object)))))
  
  
  (method meta override (unmarshall-object content)
    (bind-vector (position color) content
      (allocate self
                (deserialize position)
                (deserialize color))))
  
  
  (method override (draw)
    (let ((x (vertex-x position))
          (y (vertex-y position))
          (z (vertex-z position))
          (size .4)
          (width .005))
      (render-line (vertex (- x size) y z)
                   (vertex (+ x size) y z)
                   width
                   (or color red-dye))
      (render-line (vertex x (- y size) z)
                   (vertex x (+ y size) z)
                   width
                   (or color green-dye))
      (render-line (vertex x y (- z size))
                   (vertex x y (+ z size))
                   width
                   (or color blue-dye))))))
