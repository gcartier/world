;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; Client Networking
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.client.network jazz


(import (jazz.syntax (phase syntax))
        (world)
        (world.configure)
        (world.context)
        (world.network)
        (world.support)
        (world.task))


(proclaim (not check bounds)
          (warn optimizations))


;;;
;;;; Update
;;;


(definition public (run-client-update task <Task>)
  (declare (proper-tail-calls))
  (with-task task
    (lambda (exit)
      (let (iter (previous (current-monotonic)))
        (let ((time (current-monotonic)))
          (let ((elapse (- time previous)))
            (unless (stopping? task)
              (site update
                (process-client-update)))
            (let ((duration (- (current-monotonic) time)))
              (task-wait task client-update-period duration exit))
            (iter time)))))))


(definition protected (process-client-update)
  (with-outgoing-mutex
    (lambda ()
      (when (> outgoing-size 0)
        ;; quick first draft to optimize
        (let ((changes (make-f64vector outgoing-size)))
          (subf64vector-move! outgoing-changes 0 outgoing-size changes 0)
          (send-client-update (current-client) changes)
          (set-outgoing-size 0))))))


;;;
;;;; Droppable
;;;


(definition public (run-client-droppable task <Task>)
  (declare (proper-tail-calls))
  (with-task task
    (lambda (exit)
      (let (iter (previous (current-monotonic)))
        (let ((time (current-monotonic)))
          (let ((elapse (- time previous)))
            (unless (stopping? task)
              (site droppable
                (process-client-droppable)))
            (let ((duration (- (current-monotonic) time)))
              (task-wait task client-droppable-period duration exit))
            (iter time)))))))


(definition protected (process-client-droppable)
  (with-droppable-mutex
    (lambda ()
      (when (> droppable-size 0)
        ;; quick first draft to optimize
        (let ((changes (make-f64vector droppable-size)))
          (subf64vector-move! droppable-changes 0 droppable-size changes 0)
          (send-droppable (get-udp-processor-client (current-client)) changes)
          (set-droppable-size 0))))))


(definition protected (droppable-push val <fl>)
  (let ((new-size (+ droppable-size 1)))
    (maybe-grow-droppable new-size)
    (f64vector-set! droppable-changes droppable-size val)
    (set-droppable-size new-size)))


;;;
;;;; Alive
;;;


(definition public (run-client-alive task <Task>)
  (declare (proper-tail-calls))
  (with-task task
    (lambda (exit)
      (let (iter (previous (current-monotonic)))
        (let ((time (current-monotonic)))
          (let ((elapse (- time previous)))
            (unless (stopping? task)
              (site alive
                (let ((client (current-client)))
                  (send-client-alive client))))
            (let ((duration (- (current-monotonic) time)))
              (task-wait task alive-period duration exit))
            (iter time))))))))
