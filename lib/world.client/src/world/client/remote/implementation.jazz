;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Remote Client Implementation
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2016
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.client.remote.implementation jazz


(import (jazz.syntax (phase syntax))
        (world)
        (world.autoload)
        (world.context)
        (world.support)
        (world.syntax (phase syntax))
        (world.task))


(definition (with-client-tier proc)
  (with-task-mutex
    (lambda ()
      (let ((tier (current-tier+)))
        (when (and tier
                   (is? tier Client-Tier)
                   (not shutdown?)
                   (not being-debugged?))
          (continuation-capture
            (lambda (exit)
              (parameterize ((current-exit exit))
                (proc tier)))))))))


(class World-Remote-Client extends Object
  
  
  (method public (processor-entered self client-id client-no character-name character-avatar character-script player-id player-position player-lookat player-script)
    (with-client-tier
      (lambda (tier)
        (processor-entered tier client-id client-no character-name character-avatar character-script player-id player-position player-lookat player-script))))
  
  
  (method public (processor-exited self character-name)
    (with-client-tier
      (lambda (tier)
        (processor-exited tier character-name))))
  
  
  (method public (processor-update self sent changes)
    (with-client-tier
      (lambda (tier)
        (processor-update tier sent changes))))
  
  
  (method public (processor-audio self id buffer timestamp duration)
    (with-client-tier
      (lambda (tier)
        (processor-audio tier id buffer timestamp duration))))
  
  
  (method public (processor-video self id buffer timestamp duration)
    (with-client-tier
      (lambda (tier)
        (processor-video tier id buffer timestamp duration))))
  
  
  (method public (processor-draw self id color alpha timestamp duration slide?)
    (with-client-tier
      (lambda (tier)
        (processor-draw tier id color alpha timestamp duration slide?))))
  
  
  (method public (server-message self sender kind message)
    (with-client-tier
      (lambda (tier)
        (server-message tier sender kind message))))
  
  
  (method public (server-protocol self protocol)
    (with-client-tier
      (lambda (tier)
        (server-protocol tier protocol))))
  
  
  (method public (detach-client self)
    (with-client-tier
      (lambda (tier)
        (detach-client tier))))
  
  
  (method public (pause-client self)
    (with-client-tier
      (lambda (tier)
        (pause-client tier))))
  
  
  (method public (unpause-client self)
    (with-client-tier
      (lambda (tier)
        (unpause-client tier))))
  
  
  (method public (goto-client self time)
    (with-client-tier
      (lambda (tier)
        (goto-client tier time))))
  
  
  (method public (camera-client self pos lookat)
    (with-client-tier
      (lambda (tier)
        (camera-client tier pos lookat))))
  
  
  (method public (protocol-client self simulate?)
    (with-client-tier
      (lambda (tier)
        (protocol-client tier simulate?))))
  
  
  (method public (position-client self rect)
    (with-client-tier
      (lambda (tier)
        (position-client tier rect))))
  
  
  (method public (restore-client self)
    (with-client-tier
      (lambda (tier)
        (restore-client tier))))))
