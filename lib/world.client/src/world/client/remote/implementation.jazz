;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Remote Client Implementation
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.client.remote.implementation jazz


(import (world.autoload)
        (world.context)
        (world.support)
        (world.task))


(definition (with-client proc)
  (with-task-mutex
    (lambda ()
      (let ((tier (current-tier+)))
        (when (and tier
                   (is? tier Client-Tier)
                   (eq? (get-state tier) 'started)
                   (not shutdown?)
                   (not being-debugged?))
          (continuation-capture
            (lambda (exit)
              (parameterize ((current-exit exit))
                (proc tier)))))))))


(class World-Remote-Client extends Object
    
  
  (method public (server-entered self client-id client-no character-name)
    (with-client
      (lambda (tier)
        (server-entered tier client-id client-no character-name))))
  
  
  (method public (server-exited self character-name)
    (with-client
      (lambda (tier)
        (server-exited tier character-name))))
  
  
  (method public (server-disconnected self character-name)
    (with-client
      (lambda (tier)
        (server-disconnected tier character-name))))
  
  
  (method public (server-reconnected self character-name)
    (with-client
      (lambda (tier)
        (server-reconnected tier character-name))))

  
  (method public (processor-entered self client-id client-no character-name character-avatar character-dye character-script player-id player-no player-mode player-position player-lookat player-script)
    (with-client
      (lambda (tier)
        (processor-entered tier client-id client-no character-name character-avatar character-dye character-script player-id player-no player-mode player-position player-lookat player-script))))
  
  
  (method public (processor-exited self character-name)
    (with-client
      (lambda (tier)
        (processor-exited tier character-name))))
  
  
  (method public (processor-update self sent changes)
    (with-client
      (lambda (tier)
        (processor-update tier sent changes))))
  
  
  (method public (processor-draw self id color alpha dts pts duration background slide?)
    (with-client
      (lambda (tier)
        (processor-draw tier id color alpha dts pts duration background slide?))))
  
  
  (method public (receive-chunk self chunk-locator chunk-raw)
    (let ((tier (current-tier)))
      (receive-chunk tier chunk-locator chunk-raw)))
  
  
  (method public (zone-loaded self zone error-string)
    (let ((tier (current-tier)))
      (zone-loaded tier zone error-string)))
  
  
  (method public (server-verified self verifier)
    (with-client
      (lambda (tier)
        (server-verified tier verifier))))
  
  
  (method public (server-upgraded self upgrader role)
    (with-client
      (lambda (tier)
        (server-upgraded tier upgrader role))))
  
  
  (method public (server-invite self sender circle-name require-microphone? require-camera?)
    (with-client
      (lambda (tier)
        (server-invite tier sender circle-name require-microphone? require-camera?))))
  
  
  (method public (server-accept self recipient circle-name)
    (with-client
      (lambda (tier)
        (server-accept tier recipient circle-name))))
  
  
  (method public (server-decline self recipient circle-name)
    (with-client
      (lambda (tier)
        (server-decline tier recipient circle-name))))
  
  
  (method public (server-problem self recipient problem)
    (with-client
      (lambda (tier)
        (server-problem tier recipient problem))))
  
  
  (method public (server-join self recipient)
    (with-client
      (lambda (tier)
        (server-join tier recipient))))
  
  
  (method public (server-leave self recipient)
    (with-client
      (lambda (tier)
        (server-leave tier recipient))))
  
  
  (method public (server-disband self)
    (with-client
      (lambda (tier)
        (server-disband tier))))
  
  
  (method public (server-message self sender kind message)
    (with-client
      (lambda (tier)
        (server-message tier sender kind message))))
  
  
  (method public (server-messages self messages)
    (with-client
      (lambda (tier)
        (server-messages tier messages))))
  
  
  (method public (mode-update self character-name mode)
    (with-client
      (lambda (tier)
        (mode-update tier character-name mode))))
  
  
  (method public (receive-asset self where path info)
    (let ((tier (current-tier)))
      (receive-asset tier where path info)))
  
  
  (method public (world-assets-update self changes)
    (with-client
      (lambda (tier)
        (world-assets-update tier changes))))
  
  
  (method public (zone-assets-update self changes)
    (with-client
      (lambda (tier)
        (zone-assets-update tier changes))))
  
  
  (method public (hierarchy-update self hierarchy)
    (with-client
      (lambda (tier)
        (hierarchy-update tier hierarchy))))
  
  
  (method public (zones-update self hierarchy zones)
    (with-client
      (lambda (tier)
        (zones-update tier hierarchy zones))))
  
  
  (method public (circle-added self name stone)
    (with-client
      (lambda (tier)
        (circle-added tier name stone))))
  
  
  (method public (circle-removed self name)
    (with-client
      (lambda (tier)
        (circle-removed tier name))))
  
  
  (method public (circle-change-shape self name shape)
    (with-client
      (lambda (tier)
        (circle-change-shape tier name shape))))
  
  
  (method public (circle-change-order self name order)
    (with-client
      (lambda (tier)
        (circle-change-order tier name order))))
  
  
  (method public (stream-add self group-no group-require-microphone? group-require-camera? sender name stream-no origin source-kind video-level channels)
    (with-client
      (lambda (tier)
        (stream-add tier group-no group-require-microphone? group-require-camera? sender name stream-no origin source-kind video-level channels))))
  
  
  (method public (stream-remove self stream-no)
    (with-client
      (lambda (tier)
        (stream-remove tier stream-no))))
  
  
  (method public (stream-disconnect self stream-no)
    (with-client
      (lambda (tier)
        (stream-disconnect tier stream-no))))
  
  
  (method public (stream-media-init self stream-no channels-init)
    (with-client
      (lambda (tier)
        (stream-media-init tier stream-no channels-init))))
  
  
  (method public (stream-media-on self stream-no media-kind)
    (with-client
      (lambda (tier)
        (stream-media-on tier stream-no media-kind))))
  
  
  (method public (stream-media-off self stream-no media-kind)
    (with-client
      (lambda (tier)
        (stream-media-off tier stream-no media-kind))))
  
  
  (method public (streaming-update self video-levels)
    (with-client
      (lambda (tier)
        (streaming-update tier video-levels))))
  
  
  (method public (streamer-update self origin video-level)
    (with-client
      (lambda (tier)
        (streamer-update tier origin video-level))))
  
  
  (method public (action-stream self stream-no action arguments)
    (with-client
      (lambda (tier)
        (action-stream tier stream-no action arguments))))
  
  
  (method public (action-channel self channel-no action arguments)
    (with-client
      (lambda (tier)
        (action-channel tier channel-no action arguments))))
  
  
  (method public (detach-client self)
    (with-client
      (lambda (tier)
        (detach-client tier))))
  
  
  (method public (pause-client self)
    (with-client
      (lambda (tier)
        (pause-client tier))))
  
  
  (method public (unpause-client self)
    (with-client
      (lambda (tier)
        (unpause-client tier))))
  
  
  (method public (dayduration-client self duration)
    (with-client
      (lambda (tier)
        (daytime-client tier duration))))
  
  
  (method public (daytime-client self time)
    (with-client
      (lambda (tier)
        (daytime-client tier time))))
  
  
  (method public (goto-client self time)
    (with-client
      (lambda (tier)
        (goto-client tier time))))
  
  
  (method public (position-client self rect)
    (with-client
      (lambda (tier)
        (position-client tier rect))))
  
  
  (method public (restore-client self)
    (with-client
      (lambda (tier)
        (restore-client tier))))
  
  
  (method public (admin-request self requester requester-name cookie what action)
    ;; quick try for debugging requests that should succeed
    ;; even if the processed is deadlocked by the task mutex
    (if (memq? what '(snapshot attach detach))
        (admin-request (current-tier) requester requester-name cookie what action)
      (with-client
        (lambda (tier)
          (admin-request tier requester requester-name cookie what action)))))
  
  
  (method public (admin-chunk self cookie sender name chunk done?)
    (with-client
      (lambda (tier)
        (admin-chunk tier cookie sender name chunk done?))))
  
  
  ;(method public (admin-run self requester cookie script)
  ;  (with-client
  ;    (lambda (tier)
  ;      (admin-run tier requester cookie script))))
  
  
  ;(method public (admin-return self cookie sender state data)
  ;  (with-client
  ;    (lambda (tier)
  ;      (admin-return tier cookie sender state data))))
  ))
