;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Remote Client Implementation
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.client.remote.implementation jazz


(import (world.autoload)
        (world.context)
        (world.support)
        (world.task))


(definition (with-client proc)
  (with-task-mutex
    (lambda ()
      (let ((tier (current-tier+)))
        (when (and tier
                   (is? tier Client-Tier)
                   (eq? (get-state tier) 'started)
                   (not shutdown?)
                   (not being-debugged?))
          (continuation-capture
            (lambda (exit)
              (parameterize ((current-exit exit))
                (proc tier)))))))))


(class World-Remote-Client extends Object
    
  
  (method public (server-entered self client-id client-no character-name)
    (with-client
      (lambda (tier)
        (server-entered tier client-id client-no character-name))))
  
  
  (method public (server-exited self character-name)
    (with-client
      (lambda (tier)
        (server-exited tier character-name))))
  
  
  (method public (server-disconnected self character-name)
    (with-client
      (lambda (tier)
        (server-disconnected tier character-name))))
  
  
  (method public (server-reconnected self character-name)
    (with-client
      (lambda (tier)
        (server-reconnected tier character-name))))

  
  (method public (processor-entered self client-id client-no character-name character-avatar character-script player-id player-no player-position player-lookat player-script)
    (with-client
      (lambda (tier)
        (processor-entered tier client-id client-no character-name character-avatar character-script player-id player-no player-position player-lookat player-script))))
  
  
  (method public (processor-exited self character-name)
    (with-client
      (lambda (tier)
        (processor-exited tier character-name))))
  
  
  (method public (processor-update self sent changes)
    (with-client
      (lambda (tier)
        (processor-update tier sent changes))))
  
  
  (method public (processor-draw self id color alpha dts pts duration background slide?)
    (with-client
      (lambda (tier)
        (processor-draw tier id color alpha dts pts duration background slide?))))
  
  
  (method public (server-message self sender kind message)
    (with-client
      (lambda (tier)
        (server-message tier sender kind message))))
  
  
  (method public (server-messages self messages)
    (with-client
      (lambda (tier)
        (server-messages tier messages))))
  
  
  (method public (server-protocol self protocol)
    (with-client
      (lambda (tier)
        (server-protocol tier protocol))))
  
  
  @peer2peer
  (method public (peers-update self peers)
    (with-client
      (lambda (tier)
        (peers-update tier peers))))
  
  
  (method public (hierarchy-update self hierarchy)
    (with-client
      (lambda (tier)
        (hierarchy-update tier hierarchy))))
  
  
  (method public (stream-add self group-no sender name stream-no origin source-kind video-level channels)
    (with-client
      (lambda (tier)
        (stream-add tier group-no sender name stream-no origin source-kind video-level channels))))
  
  
  (method public (stream-remove self stream-no)
    (with-client
      (lambda (tier)
        (stream-remove tier stream-no))))
  
  
  (method public (streamer-update self origin video-level)
    (with-client
      (lambda (tier)
        (streamer-update tier origin video-level))))
  
  
  (method public (action-stream self stream-no action arguments)
    (with-client
      (lambda (tier)
        (action-stream tier stream-no action arguments))))
  
  
  (method public (action-channel self channel-no action arguments)
    (with-client
      (lambda (tier)
        (action-channel tier channel-no action arguments))))
  
  
  (method public (detach-client self)
    (with-client
      (lambda (tier)
        (detach-client tier))))
  
  
  (method public (pause-client self)
    (with-client
      (lambda (tier)
        (pause-client tier))))
  
  
  (method public (unpause-client self)
    (with-client
      (lambda (tier)
        (unpause-client tier))))
  
  
  (method public (goto-client self time)
    (with-client
      (lambda (tier)
        (goto-client tier time))))
  
  
  (method public (camera-client self pos lookat)
    (with-client
      (lambda (tier)
        (camera-client tier pos lookat))))
  
  
  (method public (protocol-client self simulate?)
    (with-client
      (lambda (tier)
        (protocol-client tier simulate?))))
  
  
  (method public (position-client self rect)
    (with-client
      (lambda (tier)
        (position-client tier rect))))
  
  
  (method public (restore-client self)
    (with-client
      (lambda (tier)
        (restore-client tier))))
  
  
  (method public (admin-request self requester cookie what action)
    (with-client
      (lambda (tier)
        (admin-request tier requester cookie what action))))
  
  
  (method public (admin-chunk self cookie sender name chunk done?)
    (with-client
      (lambda (tier)
        (admin-chunk tier cookie sender name chunk done?))))
  
  
  ;(method public (admin-run self requester cookie script)
  ;  (with-client
  ;    (lambda (tier)
  ;      (admin-run tier requester cookie script))))
  
  
  ;(method public (admin-return self cookie sender state data)
  ;  (with-client
  ;    (lambda (tier)
  ;      (admin-return tier cookie sender state data))))
  ))
