;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Remote Client Implementation
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is WorldScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2014
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See http://github.com/gcartier/world for details.


(module world.client.remote.implementation jazz


(import (jazz.system)
        (jazz.ui.window)
        (world)
        (world.autoload)
        (world.syntax (phase syntax)))


(class World-Remote-Client extends Object
  
  
  (method public (get-name)
    (get-player-name~ (get-application)))
  
  
  (method public (world-update players)
    (execute-event
      (lambda ()
        (world-update~ (current-world) players))))
  
  
  (method public (world-enter player-name player-avatar player-position player-lookat)
    (execute-event
      (lambda ()
        (world-enter~ (current-world) player-name player-avatar player-position player-lookat))))
  
  
  (method public (world-exit player-name)
    (execute-event
      (lambda ()
        (world-exit~ (current-world) player-name))))
  
  
  (method public (server-tick player-commands time elapse)
    (execute-event
      (lambda ()
        (server-tick~ (current-world) player-commands time elapse))))
  
  
  (method public (server-test argument)
    (execute-event
      (lambda ()
        (server-test~ (current-world) argument))))))
