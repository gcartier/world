;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Remote Client Implementation
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2016
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.client.remote.implementation jazz


(import (jazz.syntax (phase syntax))
        (world)
        (world.autoload)
        (world.support)
        (world.syntax (phase syntax))
        (world.task))


(definition (with-tier proc)
  (with-task-mutex
    (lambda ()
      (let ((tier (current-tier+)))
        (when (and tier
                   (is? tier Client-Tier)
                   ;; useful when we are detaching from server
                   ;; but the client tier is still the current
                   (get-remote-server~ tier)
                   ;; robust to zone shutdown
                   (let ((zone (current-zone+)))
                     (and zone
                          (not (get-shutdown?~ zone)))))
          (unless being-debugged?
            (continuation-capture
              (lambda (exit)
                (parameterize ((current-exit exit))
                  (proc tier))))))))))


(class World-Remote-Client extends Object
  
  
  (method public (server-entered client-id client-no character-name character-avatar character-script player-id player-position player-lookat)
    (with-tier
      (lambda (tier)
        (server-entered~ tier client-id client-no character-name character-avatar character-script player-id player-position player-lookat))))
  
  
  (method public (server-exited character-name)
    (with-tier
      (lambda (tier)
        (server-exited~ tier character-name))))
  
  
  (method public (server-update sent changes)
    (with-tier
      (lambda (tier)
        (server-update~ tier sent changes))))
  
  
  (method public (server-message sender kind message)
    (with-tier
      (lambda (tier)
        (server-message~ tier sender kind message))))
  
  
  (method public (server-protocol protocol)
    (with-tier
      (lambda (tier)
        (server-protocol~ tier protocol))))
  
  
  (method public (detach-client)
    (with-tier
      (lambda (tier)
        (detach-client~ tier))))
  
  
  (method public (pause-client)
    (with-tier
      (lambda (tier)
        (pause-client~ tier))))
  
  
  (method public (unpause-client)
    (with-tier
      (lambda (tier)
        (unpause-client~ tier))))
  
  
  (method public (goto-client time)
    (with-tier
      (lambda (tier)
        (goto-client~ tier time))))
  
  
  (method public (camera-client pos lookat)
    (with-tier
      (lambda (tier)
        (camera-client~ tier pos lookat))))
  
  
  (method public (protocol-client simulate?)
    (with-tier
      (lambda (tier)
        (protocol-client~ tier simulate?))))
  
  
  (method public (position-client rect)
    (with-tier
      (lambda (tier)
        (position-client~ tier rect))))
  
  
  (method public (restore-client)
    (with-tier
      (lambda (tier)
        (restore-client~ tier))))))
