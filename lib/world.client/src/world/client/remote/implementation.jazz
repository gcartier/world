;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Remote Client Implementation
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2016
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.client.remote.implementation jazz


(import (world)
        (world.autoload)
        (world.support)
        (world.syntax (phase syntax))
        (world.task))


;; the when (client-tier+) everywhere are a quick hack in case the server sends updates
;; before we are ready this should be a clean readyness notification from client to server


(definition (client-tier+)
  (let ((tier (current-tier+)))
    (and tier
         (is? tier Client-Tier)
         tier)))


(class World-Remote-Client extends Object
  
  
  (method public (server-entered client-id client-no character-name character-avatar player-id player-position player-lookat)
    (when (client-tier+)
      (with-task-mutex
        (lambda ()
          (server-entered~ (client-tier) client-id client-no character-name character-avatar player-id player-position player-lookat)))))
  
  
  (method public (server-exited character-name)
    (when (client-tier+)
      (with-task-mutex
        (lambda ()
          (server-exited~ (client-tier) character-name)))))
  
  
  (method public (server-update sent changes)
    (when (client-tier+)
      (unless being-debugged?
        (with-task-mutex
          (lambda ()
            (server-update~ (client-tier) sent changes))))))
  
  
  (method public (server-message sender kind message)
    (when (client-tier+)
      (unless being-debugged?
        (with-task-mutex
          (lambda ()
            (server-message~ (client-tier) sender kind message))))))
  
  
  (method public (pause-client)
    (when (client-tier+)
      (unless being-debugged?
        (with-task-mutex
          (lambda ()
            (pause-client~ (client-tier)))))))
  
  
  (method public (unpause-client)
    (when (client-tier+)
      (unless being-debugged?
        (with-task-mutex
          (lambda ()
            (unpause-client~ (client-tier)))))))
  
  
  (method public (goto-client time)
    (when (client-tier+)
      (unless being-debugged?
        (with-task-mutex
          (lambda ()
            (goto-client~ (client-tier) time))))))
  
  
  (method public (camera-client pos lookat)
    (when (client-tier+)
      (unless being-debugged?
        (with-task-mutex
          (lambda ()
            (camera-client~ (client-tier) pos lookat))))))
  
  
  (method public (protocol-client simulate?)
    (when (client-tier+)
      (unless being-debugged?
        (with-task-mutex
          (lambda ()
            (protocol-client~ (client-tier) simulate?))))))
  
  
  (method public (position-client rect)
    (when (client-tier+)
      (unless being-debugged?
        (with-task-mutex
          (lambda ()
            (position-client~ (client-tier) rect))))))
  
  
  (method public (restore-client)
    (when (client-tier+)
      (unless being-debugged?
        (with-task-mutex
          (lambda ()
            (restore-client~ (client-tier)))))))))
