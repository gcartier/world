;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; World Application
;;;


(module world.client.appl jazz


(import (jazz.graphic)
        (jazz.io)
        (jazz.jml)
        (jazz.library)
        (jazz.locale)
        (jazz.system)
        (jazz.system.application)
        (jazz.ui)
        (jazz.ui.window))


;; TODO
;; - fix draw-me
;; - display a menu of keyboard actions
;; - why are objects sometimes not turning
;; - implement fullscreen toggle
;; - implement insert mode


;;;
;;;; Application
;;;


(class World-Application extends Application

  
  (method override (process-name)
    "World")
  
  
  (method override (process-owner)
    "Guillaume Cartier")
  
  
  (method override (process-copyright)
    "2010-2012")
  
  
  (method override (process-icon)
    "WebServer")
  
  
  (method override (process-version)
    {Version 1 0 0})
  
  
  (method override (process-email)
    "gucartier@gmail.com")
  
  
  (method override (new-toplevel)
    (new World-Toplevel))
  
  
  (method override (initialize-settings)
    (let ((file {File Home ".world" ".settings"}))
      (when (not (exists?~ file))
        (create~ file))
      (set! settings (new Settings file: file))
      (register-settings settings)))
  
  
  (method override (default-preferences)
    (new World-Preferences))
  
  
  (method override (default-workspaces)
    (new World-Workspaces))
  
  
  (method override (default-bindings)
    (new World-Bindings))
  
  
  (method override (finish-process)
    (nextmethod)
    (update-world-actions))

  
  ;;;
  ;;;; Frames
  ;;;


  (method override (default-frame-class)
    Plain-Text-View)


  (method override (known-extension-frame-class ext)
    (cond ((member? ext '("txt") test: extension=?) Plain-Text-View)
          (else (nextmethod ext))))

  
  ;;;
  ;;;; Events
  ;;;


  (method (on-test evt)
    (debug 'test))

  
  ;;;
  ;;;; Actions
  ;;;
  
  
  (method override (class-actions)
    (cons (find-actions 'world)
          (nextmethod)))
  
  
  (method public (update-world-actions)
    )


  ;;;
  ;;;; Environment
  ;;;
  
  
  (method override (save-environment)
    (nextmethod)
    (save-content~ settings))

  
  ;;;
  ;;;; Toplevel
  ;;;
  
  
  @wait
  (method override (show-toplevel)
    ))


;;;
;;;; Preferences
;;;


(class World-Preferences extends Application-Preferences
  
  
  (form
    (<install>                                     toplevel-state: restored toolbar-classes: ((:menubar . {Reference World-Menubar}) (:toolbar . {Reference World-Toolbar}) (:status . {Reference World-Status}))
      (<documents~>
        (<Plain-Text-Preferences> name: plain-text)))))


;;;
;;;; Workspaces
;;;


(class World-Workspaces extends Workspaces-Preferences
  
  
  (form
    (<install>                          active: home
      (<World-Workspace> name: home))))


;;;
;;;; Workspace
;;;


(class World-Workspace extends Workspace-Preferences
  
  
  (form
    (<install>                                    title: "Home" icon: {Image-Resource "WorkspaceHome"}
      (<Menubar-Preferences>        name: menubar location: root
        (<Mainbar-Preferences>      name: toolbar location: second
          (<Status-Preferences>     name: status  location: second
            (<Stage-Preferences>    name: top     location: first maximized?: #t)))))))


;;;
;;;; Bindings
;;;


(class World-Bindings extends Application-Bindings
  
  
  (form
    (<install>
      (<World-Actions> name: world))))


;;;
;;;; Actions
;;;


(class World-Actions extends Actions
  
  
  (form
    (<install>
      (<Action-Item> name: test action-handler: {Event-Handler :application on-test} shortcut: {Shortcut :control #\T}))))


;;;
;;;; Toplevel
;;;


(class World-Toplevel extends Toplevel


  (form
    (<install> caption-base: "World" size: {Dimension 850 550})))


;;;
;;;; Menubar
;;;


(class World-Menubar extends Menubar
  
  
  (method override (install rest)
    (nextmethod rest)
    (with-update-locked
      (lambda ()
        (new Label-Item parent: self name: 'file   content: (new File-Base-Menu))
        (new Label-Item parent: self name: 'edit   content: (new Edit-Base-Menu))
        (new Label-Item parent: self name: 'world  content: (new World-Menu))
        (new Label-Item parent: self name: 'window content: (new Window-Menu))
        (new Label-Item parent: self name: 'help   content: (new Help-Menu))))))


;;;
;;;; World-Menu
;;;


(class World-Menu extends Menu
  
  
  (form
    (<install>           title: {Locales english: "World" french: "World"}
      (<Label-Item>      title: {Locales english: "Test" french: "Tester"} icon: {Image-Resource "Execute"} action-handler: {Action world test}))))


;;;
;;;; Help-Menu
;;;


(class Help-Menu extends Menu
  
  
  (form
    (<install>          title: {Locales english: "Help" french: "Aide"}
      (<Label-Item>     title: {Locales english: "About World..." french: "Ã€ propos de World..."} icon: {Image-Resource "About"} action-handler: {Action application about}))))


;;;
;;;; Toolbar
;;;


(class World-Toolbar extends Toolbar


  (form
    (<install>
      (<Action-Icon> name: new        tooltip-text: {Locales english: "New" french: "Nouveau"} resource: {Image-Resource "New"} action-handler: {Action application new})
      (<Action-Icon> name: open       tooltip-text: {Locales english: "Open..." french: "Ouvrir..."} resource: {Image-Resource "Open"} action-handler: {Action application open})
      (<Separator>)
      (<Action-Icon> name: cut        tooltip-text: {Locales english: "Cut" french: "Couper"} resource: {Image-Resource "Cut"} action-handler: {Action view cut})
      (<Action-Icon> name: copy       tooltip-text: {Locales english: "Copy" french: "Copier"} resource: {Image-Resource "Copy"} action-handler: {Action view copy})
      (<Action-Icon> name: paste      tooltip-text: {Locales english: "Paste" french: "Coller"} resource: {Image-Resource "Paste"} action-handler: {Action view paste})
      (<Separator>)
      (<Action-Icon> name: undo       tooltip-text: {Locales english: "Undo" french: "Annuler"} resource: {Image-Resource "Undo"} action-handler: {Action view undo})
      (<Action-Icon> name: redo       tooltip-text: {Locales english: "Redo" french: "Refaire"} resource: {Image-Resource "Redo"} action-handler: {Action view redo})
      (<Separator>)
      (<Action-Icon> name: test       location: tail tooltip-text: "Test" resource: {Image-Resource "Execute"} action-handler: {Action world test})
      (<Separator>                    location: tail size: {Dimension 1 0}))))


;;;
;;;; Status
;;;


(class World-Status extends Status-Toolbar


  (form
    (<install>
      (<Status-Label> name: message size: {Dimension 782 20} location: center)))))
