;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; UDP Processor Client
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.client.processor jazz


(import (jazz.network)
        (jazz.syntax (phase syntax))
        (jazz.zlib)
        (world)
        (world.autoload)
        (world.configure)
        (world.context)
        (world.event)
        (world.format)
        (world.history)
        (world.record-syntax (phase syntax))
        (world.settings)
        (world.task)
        (world.udp))


(class UDP-Processor-Client extends Object
  
  
  (slot tier-no         initialize #f  getter generate)
  (slot udp-port        initialize #f  getter generate)
  (slot udp-stopping?   initialize #f  getter generate)
  (slot processor-host  initialize #f  getter generate)
  (slot processor-port  initialize #f  getter generate)
  (slot write-mutex     initialize #f  getter generate)
  (slot live-task       initialize #f  getter generate)
  (slot last-live-ack   initialize #f  getter generate)
  (slot droppable-task  initialize #f  getter generate)
  (slot started?        initialize #f  getter generate)
  (slot monitor         initialize #f  getter generate)
  (slot invalid-packets initialize 0   getter generate)
  
  
  (method override (initialize self tier-no)
    (nextmethod self)
    (set! self.tier-no tier-no)
    (set! write-mutex (make-mutex 'write)))
  
  
  (method package (connect self local-address host service mode)
    (set! udp-port (open-udp (list
                               local-address: local-address
                               address: host
                               port-number: service)))
    (setup-udp-port-buffers udp-port)
    (set! udp-stopping? #f)
    (let ()
      (define (send-connect)
        (with-write-mutex self
          (lambda ()
            (with-record processor-connect
              (let ((data (make-u8vector (calculate-connect-size))))
                (write-header-code data udp-code)
                (write-header-kind data udp-connect)
                (write-header-sender data tier-no)
                (write-processor-connect-mode data mode)
                (write-processor-connect-sent data (current-seconds))
                (write-data data udp-port))))))
      
      (set! processor-host #f)
      (set! processor-port #f)
      (set! monitor (new UDP-Monitor))
      (let ()
        (declare (proper-tail-calls))
        (let (loop (n 0))
          (define (read-udp)
            (input-port-timeout-set! udp-port .01)
            (prog1 (read udp-port)
              (input-port-timeout-set! udp-port #f)))
          
          (send-connect)
          (let ((reply (read-udp)))
            (with-record processor-connected
              (if (or (eof-object? reply) (/= (read-header-kind reply) udp-connected))
                  (if (>= n 500)
                      (throw-connection-broke "Unable to connect to udp processor")
                    (loop (+ n 1)))
                (let ((source-info (udp-source-socket-info udp-port)))
                  (set! processor-host (socket-info-address source-info))
                  (set! processor-port (socket-info-port-number source-info)))
                (set! last-live-ack (current-seconds))
                (set! live-task (new Task 'live-processor (~ run-live self) priority: live-priority stack: stack-size))
                (set! droppable-task (new Task 'receive-droppable (~ run-receive-droppable self) exit: (~ exit-droppable self) priority: droppable-priority stack: stack-size))
                (start-task live-task)
                (start-task droppable-task))))))))
  
  
  (method (exit-droppable self task)
    (set! udp-stopping? #t)
    (close-port udp-port))

  
  (method package (deconnect self)
    (stop-task live-task)
    (set! live-task #f)
    (stop-task droppable-task)
    (set! droppable-task #f)
    (set! udp-port #f))
  
  
  (method (start self)
    (unless started?
      (set! started? #t)))
  
  
  (method (stop self)
    (when started?
      (set! started? #f)))
  
  
  (method (with-write-mutex self thunk)
    (prog1 (begin
             (mutex-lock! write-mutex)
             (thunk))
      (mutex-unlock! write-mutex)))
  
  
  (method protected (increase-sent self data)
    (increase-sent monitor data))
  
  
  (method protected (increase-received self data)
    (increase-received monitor data))
  
  
  ;;;
  ;;;; Send
  ;;;
  
  
  (method package (send-droppable self changes)
    (let ((content (object->u8vector changes)))
      (let ((payload (zlib-deflate content)))
        (with-write-mutex self
          (lambda ()
            (with-record client-droppable
              (let ((size (calculate-client-droppable-size payload)))
                (let ((data (make-u8vector size)))
                  (write-header-code data udp-code)
                  (write-header-kind data udp-client-droppable)
                  (write-header-sender data tier-no)
                  (write-client-droppable-sent data (current-seconds))
                  (write-client-droppable-payload data payload)
                  (send-data self data)
                  data))))))))
  
  
  (method (send-data self data)
    (send-processor self data)
    (increase-sent self data))
  
  
  (method (send-processor self data)
    ;; quick temporary hack to get back the safe behavior
    ;; of retrying-write until port being false is fixed
    (when udp-port
      (udp-destination-set! processor-host processor-port udp-port)
      (send-udp data udp-port)))
  
  
  ;;;
  ;;;; Live
  ;;;
  
  
  (method (run-live self task <Task>)
    (declare (proper-tail-calls))
    (with-task task
      (lambda (exit)
        (let (iter (previous (current-monotonic)))
          (let ((time (current-monotonic)))
            (let ((elapse (- time previous)))
              (unless (stopping? task)
                (site live
                  (send-live self)))
              (let ((duration (- (current-monotonic) time)))
                (task-wait task live-period duration exit))
              (iter time)))))))
  
  
  ;;;
  ;;;; Receive
  ;;;
  
  
  (method (run-receive-droppable self task)
    (declare (proper-tail-calls))
    (with-task task
      (lambda (exit)
        (catch-exception-filter
          (lambda (exc)
            udp-stopping?)
          (lambda (exc)
            (continuation-return exit #f))
          (lambda ()
            (let (loop)
              (let ((data (read-data udp-port)))
                (site receive-droppable
                  (receive-data self data))
                (loop))))))))
  
  
  (method protected (receive-data self data)
    (if (or (< (u8vector-length data) 4)
            (/= (with-record header (read-header-code data)) udp-code))
        (increase! invalid-packets)
      (increase-received self data)
      (let ((kind (with-record header
                    (read-header-kind data))))
        (if (not started?)
            (ecase kind
              ((udp-connected))
              ((udp-live-ack)
               (receive-live-ack self data))
              ((udp-processor-droppable))
              (else
               (error "Unknown UDP kind: {s}" kind)))
          (ecase kind
            ((udp-connected))
            ((udp-live-ack)
             (receive-live-ack self data))
            ((udp-processor-droppable)
             (receive-droppable self data))
            (else
             (error "Unknown UDP kind: {s}" kind)))))))
  
  
  (method (send-live self)
    (if (> (- (current-seconds) last-live-ack) live-disconnected)
        (bailout (current-tier) (new Error message: "Disconnected from server"))
      (with-write-mutex self
        (lambda ()
          (with-record header
            (let ((size (calculate-live-size)))
              (let ((data (make-u8vector size)))
                (write-header-code data udp-code)
                (write-header-kind data udp-live)
                (write-header-sender data tier-no)
                (send-data self data))))))))
  
  
  (method (receive-live-ack self data)
    (set! last-live-ack (current-seconds)))
  
  
  (method (receive-droppable self data)
    (with-record processor-droppable
      (let ((sent (read-processor-droppable-sent data))
            (payload (read-processor-droppable-payload data)))
        (let ((changes (u8vector->object (zlib-inflate payload))))
          (with-task-mutex
            (lambda ()
              (unless (stopping? droppable-task)
                (forward-changes sent (current-seconds) changes))))))))))
