;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; Client Tier
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2016
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.client.tier jazz


(import (jazz.component)
        (jazz.debuggee)
        (jazz.event)
        (jazz.graphic)
        (jazz.jrm)
        (jazz.settings)
        (world)
        (world.audio)
        (world.autoload)
        (world.change)
        (world.client.configuration)
        (world.settings)
        (world.syntax (phase syntax))
        (world.tier))


(class Client-Tier extends Tier
  
  
  (slot client-id       initialize #f getter generate)
  (slot welcome         initialize #f getter generate)
  (slot form            initialize #f getter generate)
  (slot spawnpoint      initialize #f getter generate)
  (slot player-id       initialize #f getter generate)
  (slot player-name     initialize #f getter generate)
  (slot player-avatar   initialize #f getter generate)
  (slot player-position initialize #f getter generate)
  (slot player-lookat   initialize #f getter generate)
  (slot other-players   initialize #f getter generate)
  (slot remote-server   initialize #f getter generate)
  (slot remote-client   initialize #f getter generate)
  
  
  (method override (initialize settings)
    (set! settings~self settings)
    (setup))
  
  
  (method override (setup)
    (register-settings settings)
    ;; aec quicky
    (set-remote-problem-handler #f)
    (unless (get-controller-debugger)
      (start-remote-listener))
    (connect-to-server)
    (set-client-id client-id))
  
  
  (method override (enter)
    (let ((zone (current-zone))
          (me (current-me)))
      (set-spawnpoint~ zone spawnpoint)
      (register-id~ me player-id)
      (set-name~ me player-name)
      (set-avatar~ me player-avatar)
      (set-position~ me player-position)
      (set-lookat~ me player-lookat)
      (for-each (lambda (info)
                  (bind (player-id player-name player-avatar player-position player-lookat) info
                    (add-player player-id player-name player-avatar player-position player-lookat)))
                other-players)))
  
  
  (method override (shutdown)
    (unregister-settings settings)
    (disconnect-from-server)
    (unless (get-controller-debugger)
      (stop-remote-listener)))
  
  
  ;;;
  ;;;; Remote
  ;;;
  
  
  (method override (unimplemented-connected)
    (let ((world (current-world)))
      (display-cancel~ world "Unimplemented when connected")))


  ;;;
  ;;;; Server
  ;;;


  (method (connect-to-server)
    (set! player-name (world-setting 'world.client.player-name #f))
    (set! player-avatar (world-setting 'world.client.player-avatar #f))
    (let ((host (world-client-server-host))
          (port (world-client-server-service)))
      (assert (and host port)
        (let ((remote-register (connect-remote-register host port)))
          (let ((server (load-object~ remote-register 'world.server.remote 'world-remote-server))
                (client (load-object~ (get-local-register) 'world.client.remote 'world-remote-client)))
            (let ((info (client-enter~ server client player-name player-avatar)))
              (if (string? info)
                  (throw info)
                (set! remote-server server)
                (set! remote-client client)
                (add-exit-job! disconnect-from-server)
                (bind (client-id welcome form spawnpoint player-id player-position player-lookat other-players) info
                  (set! client-id~self client-id)
                  (set! welcome~self welcome)
                  ;; open test quicky to send form as a string
                  (set! form~self (call-with-input-string (list init: form readtable: jazz-readtable) read-form-from))
                  (set! spawnpoint~self spawnpoint)
                  (set! player-id~self player-id)
                  (set! player-position~self player-position)
                  (set! player-lookat~self player-lookat)
                  (set! other-players~self other-players)))))))))
  
  
  (method (disconnect-from-server)
    (when remote-server
      (client-exit~ remote-server remote-client player-name)
      (set! remote-server #f)
      (set! remote-client #f)))
  
  
  (method (send-client-update changes)
    (client-update~ remote-server remote-client changes))
  
  
  (method (send-client-alive)
    (client-alive~ remote-server remote-client))
  
  
  ;;;
  ;;;; Outgoing
  ;;;
  
  
  (method (retrieve-region region-x region-z)
    (calling-server
      (lambda ()
        (retrieve-region~ remote-server region-x region-z))))
  
  
  (method (retrieve-chunk region-x region-z chunk-x chunk-z chunk-digest)
    (calling-server
      (lambda ()
        (retrieve-chunk~ remote-server region-x region-z chunk-x chunk-z chunk-digest))))
  
  
  (method (register-literal literal)
    (calling-server
      (lambda ()
        (register-literal~ remote-server literal))))
  
  
  (method (registered-id id)
    (calling-server
      (lambda ()
        (registered-id~ remote-server id))))
  
  
  (method (client-message kind message)
    (calling-server
      (lambda ()
        (client-message~ remote-server remote-client kind message))))
  
  
  (method (calling-server thunk)
    ;; longer timeout while in development as server
    ;; and clients might be running under a debugger
    (parameterize ((receive-timeout 60))
      (thunk)))
  
  
  ;;;
  ;;;; Incoming
  ;;;
  
  
  (method (add-player player-id player-name player-avatar player-position player-lookat)
    (let ((zone (current-zone)))
      (let ((player (new Player parent: zone id: player-id name: player-name avatar: player-avatar position: player-position lookat: player-lookat)))
        (set-billboard-name~ player player-name)
        (add-element~ zone player)
        (add-simulation~ zone player))))
  
  
  (method (remove-player player-name)
    (let ((world (current-world))
          (zone (current-zone)))
      (let ((player (find-player~ world player-name)))
        (remove-simulation~ zone player)
        (remove-element~ zone player))))
  
  
  (method (server-entered player-id player-name player-avatar player-position player-lookat)
    (let ((world (current-world)))
      (add-player player-id player-name player-avatar player-position player-lookat)
      (debug-client 'server-entered player-id player-name player-avatar player-position player-lookat)
      (display-message~ world (format "{a} entered world" player-name))))
  
  
  (method (server-exited player-name)
    (let ((world (current-world)))
      (debug-client 'server-exited player-name)
      (remove-player player-name)
      (display-message~ world (format "{a} exited world" player-name))))
  
  
  (method (server-update changes)
    ;; should probably be applied by a task
    (forward-changes changes))
  
  
  (method (server-message sender kind message)
    (post-event
      (lambda ()
        (let ((interface (current-interface)))
          (let ((chat (child~ interface 'chat)))
            (show-message~ chat sender kind message)
            (play-sound-file "sound/user/MapPing"))))))
  
  
  ;;;
  ;;;; Debug
  ;;;
  
  
  (method (debug-client . rest)
    (when (world-setting 'world.client.debug? #f)
      (client-debug~ remote-server remote-client rest)))))
