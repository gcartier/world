;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; Client Tier
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2016
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.client.tier jazz


(import (jazz.graphic)
        (jazz.jrm)
        (jazz.settings)
        (world)
        (world.autoload)
        (world.change)
        (world.client.configuration)
        (world.settings)
        (world.syntax (phase syntax))
        (world.tier))


(class Client-Tier extends Tier
  
  
  (slot player-name      initialize #f getter generate)
  (slot player-avatar    initialize #f getter generate)
  (slot remote-server    initialize #f getter generate)
  (slot remote-client    initialize #f getter generate)
  (slot remote-exception initialize #f getter generate)
  
  
  (method override (initialize settings)
    (set! settings~self settings)
    (setup))
  
  
  (method override (setup)
    (let ((world (current-world)))
      (register-settings settings)
      (connect-to-server)
      (if (get-world-server)
          (display-message~ world "Connected" color: {Color Green})
        (let ((exc (get-remote-exception)))
          (display-error~ world (format "Unable to connect: {a}" (and exc (exception-reason exc))))))))
  
  
  (method override (shutdown)
    (let ((world (current-world)))
      (unregister-settings settings)
      (disconnect-from-server)
      (display-message~ world "Disconnected")))
  
  
  ;;;
  ;;;; Remote
  ;;;
  
  
  (method override (get-world-server)
    remote-server)
  
  
  (method override (get-world-client)
    remote-client)
  
  
  (method override (unimplemented-connected)
    (let ((world (current-world)))
      (display-cancel~ world "Unimplemented when connected")))


  ;;;
  ;;;; Server
  ;;;


  (method (connect-to-server)
    (set! player-name (world-setting 'world.client.player-name #f))
    (set! player-avatar (world-setting 'world.client.player-avatar #f))
    (let ((host (world-client-server-host))
          (port (world-client-server-service)))
      (when (and host port)
        ;; the catch is a quick fix for the live? mecanism that has changed
        (let ((remote-register (catch (Exception exc
                                        (set! remote-exception exc)
                                        #f)
                                 (connect-remote-register host port))))
          (when (and remote-register (live?~ remote-register))
            (let ((server (load-object~ remote-register 'world.server.remote 'world-remote-server))
                  (client (load-object~ (get-local-register) 'world.client.remote 'world-remote-client)))
              (set! remote-server server)
              (set! remote-client client)
              (bind (client-id player-id player-position player-lookat) (client-enter~ server client player-name player-avatar)
                (set-client-id client-id)
                (add-exit-job! disconnect-from-server)
                (let ((me (current-me)))
                  (register-id~ me player-id)
                  (set-name~ me player-name)
                  (set-avatar~ me player-avatar)
                  (set-position~ me player-position)
                  (set-lookat~ me player-lookat)))))))))
  
  
  (method (disconnect-from-server)
    (when remote-server
      (client-exit~ remote-server remote-client player-name)
      (set! remote-server #f)
      (set! remote-client #f)))
  
  
  (method (send-client-update changes)
    (client-update~ remote-server remote-client changes))
  
  
  ;;;
  ;;;; Stub
  ;;;
  
  
  (method (add-player player-id player-name player-avatar player-position player-lookat)
    (let ((zone (current-zone)))
      (let ((player (new Player parent: zone name: player-name avatar: player-avatar position: player-position lookat: player-lookat)))
        (register-id~ player player-id)
        (set-billboard-name~ player player-name)
        (add-element~ zone player)
        (add-simulation~ zone player))))
  
  
  (method (remove-player player-name)
    (let ((world (current-world))
          (zone (current-zone)))
      (let ((player (find-player~ world player-name)))
        (remove-simulation~ zone player)
        (remove-element~ zone player))))
  
  
  (method (server-player player-id player-name player-avatar player-position player-lookat)
    (add-player player-id player-name player-avatar player-position player-lookat)
    (debug-client 'server-player player-id player-name player-avatar player-position player-lookat))
  
  
  (method (server-entered player-id player-name player-avatar player-position player-lookat)
    (let ((world (current-world)))
      (add-player player-id player-name player-avatar player-position player-lookat)
      (debug-client 'server-entered player-id player-name player-avatar player-position player-lookat)
      (display-message~ world (format "{a} entered world" player-name))))
  
  
  (method (server-exited player-name)
    (let ((world (current-world)))
      (debug-client 'server-exited player-name)
      (remove-player player-name)
      (display-message~ world (format "{a} exited world" player-name))))
  
  
  (method (server-update changes)
    ;; should probably be applied by a task
    (forward-changes changes))
  
  
  ;;;
  ;;;; Debug
  ;;;
  
  
  (method (debug-client . rest)
    (when (world-setting 'world.client.debug? #f)
      (client-debug~ remote-server remote-client rest)))))
