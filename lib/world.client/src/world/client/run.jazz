;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Client Run
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is WorldScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2014
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See http://github.com/gcartier/world for details.


(module world.client.run jazz


(import (jazz.debuggee)
        (jazz.graphic.opengl.glew)
        (jazz.graphic.opengl.window)
        (jazz.ide.login)
        (jazz.io)
        (jazz.platform)
        (jazz.system)
        (jazz.ui.window)
        (world)
        (world.autoload)
        (world.io)
        (world.window)
        (world.client)
        (world.syntax (phase syntax)))


(definition (register-profiles)
  (show-jazz-profiles? #f)
  (show-profiles-appl 'world)
  (set-profile-kinds
    '(<kinds>
       (<kind> name: "Client"  kind: profile template: "client"))))


(definition (run descriptor)
  (set-cursor :wait)
  (initialize-aliases)
  (register-profiles)
  (parameterize ((run-loop? #f))
    (boot-environment~ (new World-Client)))
  (let ((appl (get-application)))
    (let ((profile (get-profile~ appl)))
      (let ((position (if profile (opengl-window-position~ profile) {Point 50 50}))
            (size (if profile (opengl-window-size~ profile) {Dimension 1200 800})))
        (set-?u profile)
        (set-current-world-window (new-opengl-window class: World-Window fullscreen?: (shift-down?) position: position size: size visible?: #f))))
    (cond ((command-argument "glversion")
           (system-message (format "OpenGL {a}" (glGetString GL_VERSION))))
          ((command-argument "glextension")
           => (lambda (arg)
                (system-message (format "OpenGL extension {a} {a} supported"
                                        arg
                                        (if (glewIsSupported arg)
                                            "is"
                                          "not")))))
          (else
           (select-default-world)
           (set-default-context (current-world))
           (show~ (current-world-window))
           (run-loop~ appl)))))


(register-product-run 'world-client
  run))
