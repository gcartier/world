;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; World Client Run
;;;


(module world.client.run jazz


(import (jazz.debuggee)
        (jazz.graphic.opengl.platform)
        (jazz.graphic.opengl.glew)
        (jazz.ide.login)
        (jazz.io)
        (jazz.platform)
        (jazz.system)
        (jazz.ui)
        (jazz.ui.window)
        (world)
        (world.foreign)
        (world.io)
        (world.window)
        (world.client)
        (world.client.window))


(definition (register-profiles)
  (show-jazz-profiles? #f)
  (show-profiles-appl 'world)
  (set-profile-kinds
    '(<kinds>
       (<kind> name: "Client"  kind: profile template: "client"))))


(definition (run descriptor)
  (initialize-aliases)
  (set-cursor :arrow)
  (register-profiles)
  (parameterize ((run-loop? #f))
    (boot-environment~ (new World-Client)))
  (let ((appl (get-application)))
    (let ((profile (get-profile~ appl)))
      (let ((position (if profile (opengl-window-position~ profile) {Point 50 50}))
            (size (if profile (opengl-window-size~ profile) {Dimension 1200 800})))
        (set-world-window (new-opengl-window class: World-Window fullscreen?: (shift-down?) position: position size: size visible?: #f))))
    (cond ((command-argument "glversion")
           (system-message (format "OpenGL {a}" (glGetString GL_VERSION))))
          ((command-argument "glextension")
           => (lambda (arg)
                (system-message (format "OpenGL extension {a} {a} supported"
                                        arg
                                        (if (glewIsSupported arg)
                                            "is"
                                          "not")))))
          (else
           (select-default-world)
           (set-default-context world)
           (show~ world-window)
           (run-loop~ appl)))))


(register-product-run 'world.client
  run))
