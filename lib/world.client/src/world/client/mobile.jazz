;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; Mobile Client
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.client.mobile jazz


(import (jazz.json)
        (world)
        (world.configure)
        (world.context))


(definition validation-code
  "TWJG")


(class Mobile-Connection-Broke extends Exception)


(definition public (throw-mobile-connection-broke)
  (throw (new Mobile-Connection-Broke)))


(class Mobile-Client extends Object
  
  
  (slot host                    getter generate)
  (slot service                 getter generate)
  (slot port      initialize #f getter generate)
  (slot thread    initialize #f getter generate)
  (slot hierarchy initialize #f getter generate)
  
  
  (method override (initialize self host service)
    (nextmethod self)
    (set! self.host host)
    (set! self.service service))
  
  
  (method override (print self output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{a} {a}" host service))))
  
  
  (method protected (connect self personal-key)
    (set! port (open-tcp-client (list server-address: host port-number: service)))
    (input-port-readtable-set! port json-readtable)
    (send-json self personal-key)
    (start-process self)
    (terminal 'connected))
  
  
  (method protected (deconnect self)
    (stop-process self)
    (send-json self (list "deconnect"))
    (close-port port)
    (set! port #f)
    (terminal 'deconnected))
  
  
  (method (connection-broke self)
    (set! port #f)
    (set! thread #f)
    (terminal 'broke))
  
  
  (method (send-json self obj)
    (write-string validation-code port)
    (print-json obj port)
    (force-output port))


  (method (receive-json self)
    (let ((output (open-output-string)))
      (let (loop)
        (let ((c (read-char port)))
          (cond ((eof-object? c)
                 (throw-mobile-connection-broke))
                ((eqv? c #\|)
                 (call-with-input-string (list init: (get-output-string output) readtable: json-readtable)
                   read-json))
                (else
                 (write-char c output)
                 (loop)))))))
  
  
  (method (start-process self)
    (set! thread (new-thread
                   (lambda ()
                     (run-process self))
                   'mobile))
    (thread-base-priority-set! thread background-priority)
    (thread-start! thread))
  
  
  (method (stop-process self)
    (exit-thread thread)
    (set! thread #f))
  
  
  (method (run-process self)
    (declare (proper-tail-calls))
    (catch (Mobile-Connection-Broke exc
             (connection-broke self))
      (let (loop)
        (let ((form (receive-json self)))
          (when (pair? form)
            (bind (kind command arguments) form
              (when (equal? kind "call")
                (process-command self command arguments)))))
        (loop))))
  
  
  (method (process-command self command arguments)
    (terminal 'call command arguments)
    @wait
    (let ((tier (current-tier)))
      (cond ((equal? command "people")
             (bind (hierarch) arguments
               (set! hierarchy hierarch)
               (hierarchy-refresh tier)))
            ((equal? command "message")
             (bind (sender kind message) arguments
               (server-message tier sender kind message)))
            ((equal? command "invite")
             (bind (sender) arguments
               (if (equal? sender "Bip")
                   (accept sender)
                 (decline sender)))))))
  
  
  @wait
  (method (message-person self (msg #f))
    (ws `("message" "whisper" "Bip" ,(or msg "Hey you!")))
    (unspecified))
  
  
  @wait
  (method (message-group self (msg #f))
    (ws `("message" "group" #f ,(or msg "Hey group!")))
    (unspecified))
  
  
  @wait
  (method (message-gathering self (msg #f))
    (ws `("message" "gathering" #f ,(or msg "Hey all!")))
    (unspecified))))
