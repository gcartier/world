;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; Client Tier Text
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.client.text jazz


(import (jazz.action)
        (jazz.console)
        (jazz.event)
        (jazz.exemplar)
        (jazz.graphic)
        (jazz.handler)
        (jazz.io)
        (jazz.markup)
        (jazz.text)
        (jazz.zlib)
        (world)
        (world.client.request)
        (world.configure)
        (world.context)
        (world.evolution)
        (world.interface)
        (world.interface.text)
        (world.settings)
        (world.task))


;;;
;;;; Admin-Text
;;;


(class Admin-Text-View extends World-Text-View
  
  
  (slot inserted initialize (new Inserted))
  (slot banner   initialize #f getter generate)
  
  
  (method override (new-model self)
    (new Text-Model base-style: {Text-Style Text-Base font: {Font font-name: tahoma point-size: 15.5 shadow: thin}} left-padding: 8))
  
  
  (method override (install self rest)
    (nextmethod self rest)
    (set-default-style model {Text-Style Entry})
    (set-propagate-styles? model #f)
    (set-colorize? syntax #f)
    (add-style self 'Banner  {Text-Style Text-Base font: {Font font-name: tahoma point-size: 15.5 shadow: thin} color: {Color World-Dark-Green}})
    (add-style self 'Prompt  {Text-Style Text-Base font: {Font font-name: tahoma point-size: 15.5 shadow: thin} color: {Color World-Dark-Ochre}})
    (add-style self 'Entry   {Text-Style Text-Base font: {Font font-name: tahoma point-size: 15.5 shadow: thin} color: {Color World-Purple}})
    (add-style self 'Input   {Text-Style Text-Base font: {Font font-name: tahoma point-size: 15.5 shadow: thin} color: {Color World-Purple}})
    (add-style self 'Output  {Text-Style Text-Base font: {Font Code point-size: 14.5 shadow: thin} color: {Color White}})
    (add-style self 'Link    {Text-Style Text-Base font: {Font Code point-size: 14.5 shadow: thin} color: {Color World-Blue}})
    (add-style self 'Error   {Text-Style Text-Base font: {Font font-name: tahoma point-size: 15.5 shadow: thin} color: {Color World-Red}}))
  
  
  (method override (focus-actions self)
    (cons (cache-admin-actions)
          (nextmethod self)))
  
  
  (method override (set-selection self range . rest)
    (apply nextmethod self range rest)
    (set-where inserted #f))
  
  
  (method package (on-clear self evt)
    (clear-console self)
    (reset inserted))
  
  
  (method package (on-insert-previous self evt)
    (console-insert-previous-block self inserted))
  
  
  (method package (on-insert-next self evt)
    (console-insert-next-block self inserted))
  
  
  (method package (initial-banner self banner)
    (set! self.banner banner)
    (display-banner self))
  
  
  (method package (display-banner self)
    (insert-styled self banner 'Banner)
    (insert-newline self)
    (insert-newline self)
    (display-prompt self))
  
  
  (method package (display-prompt self)
    (insert-styled self "> " 'Prompt))
  
  
  (method override (return-press self evt)
    (console-return self
      (lambda ()
        (console-evaluate self))))

  
  (method (console-evaluate self)
    (let ((client (current-client)))
      (let ((range (current-command self)))
        (let ((all (read-string-content (get-string self range))))
          (unless (null? all)
            (let ((aliases (world-setting 'world.console-aliases #f)))
              (when aliases
                (let ((alias (getf aliases all test: equal?)))
                  (when alias
                    (set! all alias)))))
            (bind (command . arguments) all
              (define (insert-line line style)
                (insert-styled self line style)
                (insert-newline self))
              
              (case command
                ((who)
                 (stylize-range model range (locate-style self 'Input))
                 (insert-newline self)
                 (let ((who (admin-command client command arguments)))
                   (for-each (lambda (name)
                               (insert-line name 'Output))
                             who))
                 (insert-newline self)
                 (display-prompt self))
                ((crashes)
                 (stylize-range model range (locate-style self 'Input))
                 (insert-newline self)
                 (let ((crashes (admin-command client command arguments)))
                   (if (equal? arguments '(clear))
                       (insert-line "clear" 'Output)
                     (for-each (lambda (filename)
                                 (insert-line filename 'Output))
                               crashes)))
                 (insert-newline self)
                 (display-prompt self))
                ((crash)
                 (stylize-range model range (locate-style self 'Input))
                 (insert-newline self)
                 (let ((crash (admin-command client command (map ->string arguments))))
                   (if (not crash)
                       (insert-line "Crash not found" 'Error)
                     (for-each (lambda (line)
                                 (insert-line line 'Output))
                               crash)))
                 (insert-newline self)
                 (display-prompt self))
                ((logs)
                 (stylize-range model range (locate-style self 'Input))
                 (insert-newline self)
                 (let ((logs (admin-command client command arguments)))
                   (if (equal? arguments '(clear))
                       (insert-line "clear" 'Output)
                     (for-each (lambda (filename)
                                 (insert-line filename 'Output))
                               logs)))
                 (insert-newline self)
                 (display-prompt self))
                ((log)
                 (stylize-range model range (locate-style self 'Input))
                 (insert-newline self)
                 (let ((log (admin-command client command (map ->string arguments))))
                   (if (not log)
                       (insert-line "Log not found" 'Error)
                     (for-each (lambda (line)
                                 (insert-line line 'Output))
                               (remove-trailing "" log test: equal?))))
                 (insert-newline self)
                 (display-prompt self))
                ((info)
                 (stylize-range model range (locate-style self 'Input))
                 (insert-newline self)
                 (bind (host service clients disconnected processors groups threads live movable nonmovable outgoing) (admin-command client command arguments)
                   (define (present-meg bytes)
                     (format "{a}m" (meg bytes)))
                   
                   (define (meg bytes)
                     (fxround (/ bytes 1024. 1024.)))
                   
                   (define (present-hierarchy hierarchy)
                     (map (lambda (info)
                            (bind (group . members) info
                              (cons group (map car members))))
                          hierarchy))
                   
                   (insert-line (format "host         : {a}" host) 'Output)
                   (insert-line (format "service      : {a}" service) 'Output)
                   (insert-line (format "clients      : {a}" clients) 'Output)
                   (insert-line (format "disconnected : {a}" disconnected) 'Output)
                   (insert-line (format "processors   : {a}" processors) 'Output)
                   (insert-line (format "groups       : {a}" (present-hierarchy groups)) 'Output)
                   (insert-line (format "threads      : {a}" threads) 'Output)
                   (insert-line (format "live         : {a}" live) 'Output)
                   (insert-line (format "movable      : {a}" movable) 'Output)
                   (insert-line (format "nonmovable   : {a}" nonmovable) 'Output)
                   (insert-line (format "outgoing     : {a}" outgoing) 'Output))
                 (insert-newline self)
                 (display-prompt self))
                ((threads)
                 (stylize-range model range (locate-style self 'Input))
                 (insert-newline self)
                 (let ((lines (admin-command client command arguments)))
                   (for-each (lambda (line)
                               (insert-line line 'Output))
                             lines))
                 (insert-newline self)
                 (display-prompt self))
                ((test)
                 (stylize-range model range (locate-style self 'Input))
                 (insert-newline self)
                 (let ((lines (admin-command client command arguments)))
                   (if (not lines)
                       (insert-line "Test not found" 'Error)
                     (for-each (lambda (filename)
                                 (insert-line filename 'Output))
                               lines)))
                 (insert-newline self)
                 (display-prompt self))
                ((attach)
                 (stylize-range model range (locate-style self 'Input))
                 (insert-newline self)
                 (let ((debugger (if (null? arguments)
                                     (world-setting 'jazz.server-panel.debugger #f)
                                   (->string (car arguments)))))
                   (admin-command client command (list debugger)))
                 (insert-line "Attached to debugger" 'Output)
                 (insert-newline self)
                 (display-prompt self))
                ((detach)
                 (stylize-range model range (locate-style self 'Input))
                 (insert-newline self)
                 (admin-command client command arguments)
                 (insert-line "Detached from debugger" 'Output)
                 (insert-newline self)
                 (display-prompt self))
                ((restart)
                 (stylize-range model range (locate-style self 'Input))
                 (insert-newline self)
                 (admin-command client command arguments)
                 (insert-line "Restarting" 'Output)
                 (insert-newline self)
                 (display-prompt self))
                ((reset)
                 (stylize-range model range (locate-style self 'Input))
                 (insert-newline self)
                 (let ((successful? (admin-command client command arguments)))
                   (if (not successful?)
                       (insert-line "Unable to reset" 'Error)
                     (insert-line "Reset" 'Output)))
                 (insert-newline self)
                 (display-prompt self))
                ((request)
                 (let ((cookie (register-request-cookie)))
                   (stylize-range model range (locate-style self 'Input))
                   (insert-newline self)
                   (bind (who what) arguments
                     (let ((err (admin-command client command (list cookie (->string who) what))))
                       (if err
                           (begin
                             (insert-line err 'Error)
                             (insert-newline self)
                             (display-prompt self))
                         (let ((insert-line (get-line (get-end self))))
                           (insert-newline self)
                           (display-prompt self)
                           (let ((infos (make-table test: equal?)))
                             (register-request-procedure cookie
                               (lambda (sender name chunk done?)
                                 (define (determine-info)
                                   (let ((key (cons sender name)))
                                     (or (table-ref infos key #f)
                                         (let ((info (list (determine-file) #f #f)))
                                           (table-set! infos key info)
                                           info))))
                                 
                                 (define (determine-file)
                                   (let ((directory {Directory Settings "work" "requests"}))
                                     (create-directories directory)
                                     (timestamped-file directory sender (->string what))))
                                 
                                 (let ((info (determine-info)))
                                   (bind (file name-end line-end) info
                                     (when (not chunk)
                                       (let ((insert-range (new Range$Cell$ (new Cell insert-line 0) (new Cell insert-line 0))))
                                         (let ((end (get-end (replace-styled self insert-range (list (get-name file)) 'Output))))
                                           (set-second! info end)
                                           (replace-styled self (new Range$Cell$ end end) (list "" "") 'Output)
                                           (increase! insert-line))))
                                     (let ((thread
                                             (new-thread
                                               (lambda ()
                                                 (when chunk
                                                   (let ((content (zlib-inflate chunk)))
                                                     (case what
                                                       ((caps)
                                                        (save-binary file content))
                                                       ((evolution)
                                                        (bind (metadata . evolution) (u8vector->object content deserialize)
                                                          (call-with-output-file (path-settings file)
                                                            (lambda (port)
                                                              (format port "{s}{%}" metadata)
                                                              (loop (for n from (first-position evolution) to (last-position evolution))
                                                                    (format port "{a} {a} {a} {a} {a} {a} {a} {a}"
                                                                      (evolutionary-time evolution n)
                                                                      (evolutionary-id evolution n)
                                                                      (evolutionary-data1 evolution n)
                                                                      (evolutionary-data2 evolution n)
                                                                      (evolutionary-data3 evolution n)
                                                                      (evolutionary-data4 evolution n)
                                                                      (evolutionary-data5 evolution n)
                                                                      (evolutionary-data6 evolution n))
                                                                    (newline port)))))))))
                                                   (when done?
                                                     (stylize-range self (new Range$Cell$ (new Cell (get-line name-end) 0) name-end) 'Link)
                                                     (let ((range (new Range$Cell$ name-end name-end)))
                                                       (let ((end (get-end (replace-styled self range (list " done") 'Output))))
                                                         (set-third! info (new Range$Cell$ end end))))))
                                                 'save)))
                                         (thread-base-priority-set! thread background-priority)
                                         (thread-start! thread)))))))))))))
                ((clear)
                 (clear-console self))
                ((help ?)
                 (stylize-range model range (locate-style self 'Input))
                 (insert-newline self)
                 (insert-line "attach <debugger>" 'Output)
                 (insert-line "crashes <clear>" 'Output)
                 (insert-line "crash <filename>" 'Output)
                 (insert-line "detach" 'Output)
                 (insert-line "info" 'Output)
                 (insert-line "logs <clear>" 'Output)
                 (insert-line "log <filename>" 'Output)
                 (insert-line "request <what> <who>" 'Output)
                 (insert-line "reset <what>" 'Output)
                 (insert-line "restart" 'Output)
                 (insert-line "test <no>" 'Output)
                 (insert-line "threads" 'Output)
                 (insert-line "who" 'Output)
                 (insert-line "clear" 'Output)
                 (insert-line "help / ?" 'Output)
                 (insert-newline self)
                 (display-prompt self))
                (else
                 (stylize-range model range (locate-style self 'Input))
                 (insert-newline self)
                 (insert-line (format "Unknown command: {a}" command) 'Error)
                 (insert-newline self)
                 (display-prompt self)))))))))
  
  
  (method (clear-console self)
    (empty-text self)
    (display-banner self))
  
  
  (method (current-command self)
    (console-select-style self (text-ending self)
      (lambda (style)
        (inherits? style 'Entry)))))


;;;
;;;; Admin-Actions
;;;


(class Admin-Actions extends Actions
  
  
  (form
    (<install>
      (<Action-Item> name: clear           visible?: #t action-handler: {Event-Handler :focus on-clear} shortcut: {Shortcut :control #\L})
      (<Action-Item> name: insert-previous visible?: #t action-handler: {Event-Handler :focus on-insert-previous} shortcut: {Shortcut Tab})
      (<Action-Item> name: insert-next     visible?: #t action-handler: {Event-Handler :focus on-insert-next} shortcut: {Shortcut :shift Tab}))))


(definition admin-actions
  #f)

(definition (cache-admin-actions)
  (or admin-actions
      (let ((actions (new Admin-Actions)))
        (set! admin-actions actions)
        actions))))
