;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Client Parameters
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.client.parameters jazz


(import (jazz.component)
        (jazz.opengl)
        (world)
        (world.client.tier)
        (world.collision)
        (world.context)
        (world.fog)
        (world.history)
        (world.motion)
        (world.parameters)
        (world.renderer)
        (world.settings)
        (world.sound)
        (world.space)
        (world.streamer)
        (world.support)
        (world.syntax (phase syntax)))


;;;
;;;; World
;;;


(define-parameter user
  (new World-Parameter
    (lambda ()
      (user?))))


;;;
;;;; Game
;;;


(define-parameter dash
  (new World-Parameter
    (lambda ()
      (let ((me (current-me+)))
        (and me (> (get-dash-duration me) 0.))))))


(define-parameter mind-control
  (new World-Parameter
    (lambda ()
      (let ((me (current-me+)))
        (and me (get-controlled me))))))


(define-parameter aim
  (new World-Parameter
    (lambda ()
      (get-aim? (current-world)))))


(define-parameter free-aim
  (new World-Parameter
    (lambda ()
      (get-free-aim? (current-world)))))


(define-parameter ride
  (new World-Parameter
    (lambda ()
      (riding? (current-me)))))


(define-parameter fly
  (new World-Parameter
    (lambda ()
      (flying? (current-me)))))


(define-parameter character-panel
  (new World-Parameter
    (lambda ()
      (get-visible? (child (current-interface) 'character)))))


(define-parameter bag-panel
  (new World-Parameter
    (lambda ()
      (get-visible? (child (current-interface) 'bag)))))


;;;
;;;; Edition
;;;


(define-parameter grid
  (new World-Parameter
    (lambda ()
      (get-grid? (current-world)))))


(define-parameter select-target-mode
  (new World-Parameter
    (lambda ()
      (eq? (get-target-mode (current-world)) 'select))))


(define-parameter move-target-mode
  (new World-Parameter
    (lambda ()
      (eq? (get-target-mode (current-world)) 'move))))


(define-parameter rotate-target-mode
  (new World-Parameter
    (lambda ()
      (eq? (get-target-mode (current-world)) 'rotate))))


(define-parameter scale-target-mode
  (new World-Parameter
    (lambda ()
      (eq? (get-target-mode (current-world)) 'scale))))


(define-parameter skeleton-target-mode
  (new World-Parameter
    (lambda ()
      (eq? (get-target-mode (current-world)) 'skeleton))))


(define-parameter no-showcase
  (new World-Parameter
    (lambda ()
      (let ((world (current-world)))
        (not (get-showcase world))))))


(define-parameter blocks-showcase
  (new World-Parameter
    (lambda ()
      (let ((world (current-world)))
        (eq? (showcase-name world (get-showcase world)) 'blocks)))))


(define-parameter models-showcase
  (new World-Parameter
    (lambda ()
      (let ((world (current-world)))
        (eq? (showcase-name world (get-showcase world)) 'models)))))


(define-parameter gadgets-showcase
  (new World-Parameter
    (lambda ()
      (let ((world (current-world)))
        (eq? (showcase-name world (get-showcase world)) 'gadgets)))))


(define-parameter avatars-showcase
  (new World-Parameter
    (lambda ()
      (let ((world (current-world)))
        (eq? (showcase-name world (get-showcase world)) 'avatars)))))


(define-parameter tiles-showcase
  (new World-Parameter
    (lambda ()
      (let ((world (current-world)))
        (eq? (showcase-name world (get-showcase world)) 'tiles)))))


(define-parameter shaders-showcase
  (new World-Parameter
    (lambda ()
      (let ((world (current-world)))
        (eq? (showcase-name world (get-showcase world)) 'shaders)))))


(define-parameter animations-showcase
  (new World-Parameter
    (lambda ()
      (let ((world (current-world)))
        (eq? (showcase-name world (get-showcase world)) 'animations)))))


(define-parameter meshes-showcase
  (new World-Parameter
    (lambda ()
      (let ((world (current-world)))
        (eq? (showcase-name world (get-showcase world)) 'meshes)))))


(define-parameter textures-showcase
  (new World-Parameter
    (lambda ()
      (let ((world (current-world)))
        (eq? (showcase-name world (get-showcase world)) 'textures)))))


(define-parameter skyboxes-showcase
  (new World-Parameter
    (lambda ()
      (let ((world (current-world)))
        (eq? (showcase-name world (get-showcase world)) 'skyboxes)))))


;;;
;;;; Interface
;;;


(define-parameter interface
  (new World-Parameter
    (lambda ()
      (get-interface? (current-world)))))


(define-parameter occlusion
  (new World-Parameter
    (lambda ()
      (get-occlusion?))))


(define-parameter wireframe
  (new World-Parameter
    (lambda ()
      (get-wireframe?))))


(define-parameter profiler
  (new World-Parameter
    (lambda ()
      (get-visible? (child (current-interface) 'profiler)))))


(define-parameter evolution
  (new World-Parameter
    (lambda ()
      (get-visible? (child (current-interface) 'evolution)))))


(define-parameter history
  (new World-Parameter
    (lambda ()
      (get-visible? (child (current-interface) 'history)))))


(define-parameter glow
  (new World-Parameter
    (lambda ()
      (/= (get-player-glow (current-zone)) -1.))))


(define-parameter fog
  (new World-Parameter
    (lambda ()
      fog?)))


(define-parameter gadgets
  (new World-Parameter
    (lambda ()
      (get-draw-gadgets? (current-world)))))


(define-parameter normals
  (new World-Parameter
    (lambda ()
      (get-draw-normals? (current-world)))))


(define-parameter x-rays
  (new World-Parameter
    (lambda ()
      (x-rays-mode? (current-world)))))


(define-parameter redstone-x-rays
  (new World-Parameter
    (lambda ()
      (redstone-x-rays-mode? (current-world)))))


(define-parameter blocks
  (new World-Parameter
    (lambda ()
      (get-draw-blocks? (current-world)))))


(define-parameter models
  (new World-Parameter
    (lambda ()
      (get-draw-entities? (current-world)))))


(define-parameter post-processing
  (new World-Parameter
    (lambda ()
      (get-post-processing? (current-world)))))


(define-parameter music
  (new World-Parameter
    (lambda ()
      (music-playing? (current-music)))))


(define-parameter ambience
  (new World-Parameter
    (lambda ()
      (ambience-playing? (current-ambience)))))


(define-parameter sound
  (new World-Parameter
    (lambda ()
      sounds?)))


(define-parameter mic
  (new World-Parameter
    (lambda ()
      (and (client?)
           (mic-playing? (current-client))))))


(define-parameter camera
  (new World-Parameter
    (lambda ()
      (and (client?)
           (camera-playing? (current-client))))))


;;;
;;;; Camera
;;;


(define-parameter person-motion
  (new World-Parameter
    (lambda ()
      (person-motion?))))


(define-parameter orbit-motion
  (new World-Parameter
    (lambda ()
      (orbit-motion?))))


(define-parameter free-motion
  (new World-Parameter
    (lambda ()
      (free-motion?))))


(define-parameter camera-smoothing
  (new World-Parameter
    (lambda ()
      (get-camera-smoothing?))))


(define-parameter camera-follow
  (new World-Parameter
    (lambda ()
      (eq? (get-first-camera (current-world)) 'follow))))


(define-parameter cursor-mode
  (new World-Parameter
    (lambda ()
      (not (get-autotrack-camera?)))))


;;;
;;;; History
;;;


(define-parameter paused
  (new World-Parameter
    (lambda ()
      (get-paused? (current-history)))))


(define-parameter evaluate-future
  (new World-Parameter
    (lambda ()
      (get-evaluate-future? (current-world)))))


;;;
;;;; Share
;;;


(define-parameter screen-share
  (new World-Parameter
    (lambda ()
      (boolean (locate-screen-stream)))))


;;;
;;;; Window
;;;


(define-parameter windowed-mode
  (new World-Parameter
    (lambda ()
      (eq? (get-window-mode (current-window)) 'windowed))))


(define-parameter fullscreen-mode
  (new World-Parameter
    (lambda ()
      (neq? (get-window-mode (current-window)) 'windowed))))


;;;
;;;; Tutorial
;;;


(define-parameter objectives
  (new World-Parameter
    (lambda ()
      #f
      @GAZOUM
      (objectives-displayed? (current-tutorial)))))


(define-parameter tutorial-template
  (new World-Parameter
    (lambda ()
      #f
      @GAZOUM
      (tutorial-template?))))


;;;
;;;; Debug
;;;


(define-parameter info
  (new World-Parameter
    (lambda ()
      (get-visible? (child (current-interface) 'info)))))


(define-parameter target
  (new World-Parameter
    (lambda ()
      (get-interface-target? (current-world)))))


(define-parameter script
  (new World-Parameter
    (lambda ()
      interface-script?)))


(define-parameter axes
  (new World-Parameter
    (lambda ()
      (get-axes? (current-world)))))


(define-parameter orientation
  (new World-Parameter
    (lambda ()
      (get-orientation? (current-world)))))


(define-parameter debug-sectors
  (new World-Parameter
    (lambda ()
      (get-debug-sectors? (current-zone)))))


(define-parameter debug-areas
  (new World-Parameter
    (lambda ()
      (get-debug-areas? (current-zone)))))


(define-parameter draw-atlas
  (new World-Parameter
    (lambda ()
      (get-draw-atlas? (current-world)))))


(define-parameter draw-me
  (new World-Parameter
    (lambda ()
      (get-draw-me? (current-world)))))


;;;
;;;; Collision
;;;


(define-parameter debug-collisions
  (new World-Parameter
    (lambda ()
      (get-debug-collisions?)))))
