;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; World Client Parameters
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2013
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.client.parameters jazz


(import (jazz.jml)
        (jazz.library)
        (world)
        (world.autoload)
        (world.collision)
        (world.parameters)
        (world.syntax (phase syntax))
        (world.window))


;;;
;;;; Game
;;;


(define-parameter aim
  (new World-Parameter
    (lambda ()
      (get-aim?~ (current-world)))))


(define-parameter free-aim
  (new World-Parameter
    (lambda ()
      (get-free-aim?~ (current-world)))))


(define-parameter mount
  (new World-Parameter
    (lambda ()
      (get-mount?~ (current-world)))))


(define-parameter fly
  (new World-Parameter
    (lambda ()
      (get-fly?~ (current-world)))))


(define-parameter character-pane
  (new World-Parameter
    (lambda ()
      (get-visible?~ (child~ (get-interface~ (current-world)) 'character)))))


;;;
;;;; Edition
;;;


(define-parameter grid
  (new World-Parameter
    (lambda ()
      (get-grid?~ (current-world)))))


(define-parameter brush-mode
  (new World-Parameter
    (lambda ()
      (get-brush-mode?~ (current-world)))))


(define-parameter template-mode
  (new World-Parameter
    (lambda ()
      (get-template-mode?~ (current-world)))))


(define-parameter select-target-mode
  (new World-Parameter
    (lambda ()
      (eq? (get-target-mode~ (current-world)) 'select))))


(define-parameter move-target-mode
  (new World-Parameter
    (lambda ()
      (eq? (get-target-mode~ (current-world)) 'move))))


(define-parameter rotate-target-mode
  (new World-Parameter
    (lambda ()
      (eq? (get-target-mode~ (current-world)) 'rotate))))


(define-parameter scale-target-mode
  (new World-Parameter
    (lambda ()
      (eq? (get-target-mode~ (current-world)) 'scale))))


;;;
;;;; Interface
;;;


(define-parameter interface
  (new World-Parameter
    (lambda ()
      (get-interface?~ (current-world)))))


(define-parameter counters
  (new World-Parameter
    (lambda ()
      (get-visible?~ (child~ (get-interface~ (current-world)) 'counters)))))


(define-parameter lighting
  (new World-Parameter
    (lambda ()
      (get-lighting?~ (current-world)))))


(define-parameter gadgets
  (new World-Parameter
    (lambda ()
      (get-draw-gadgets?~ (current-world)))))


(define-parameter normals
  (new World-Parameter
    (lambda ()
      (get-draw-normals?~ (current-world)))))


(define-parameter elements
  (new World-Parameter
    (lambda ()
      (get-draw-elements?~ (current-world)))))


(define-parameter post-processing
  (new World-Parameter
    (lambda ()
      (get-post-processing?~ (current-world)))))


;;;
;;;; Camera
;;;


(define-parameter 3d
  (new World-Parameter
    (lambda ()
      (get-3d?~ (current-world)))))


(define-parameter camera-lock
  (new World-Parameter
    (lambda ()
      (eq? (get-first-camera~ (current-world)) 'locked))))


(define-parameter first-person
  (new World-Parameter
    (lambda ()
      (get-first-person?~ (current-world)))))


;;;
;;;; History
;;;


(define-parameter paused
  (new World-Parameter
    (lambda ()
      (get-paused?~ (current-world)))))


(define-parameter history
  (new World-Parameter
    (lambda ()
      (not (get-history?~ (current-world))))))


(define-parameter evaluate-future
  (new World-Parameter
    (lambda ()
      (get-evaluate-future?~ (current-world)))))


;;;
;;;; Window
;;;


(define-parameter windowed-mode
  (new World-Parameter
    (lambda ()
      (eq? (get-window-mode~ (current-world-window)) 'windowed))))


;;;
;;;; Debug
;;;


(define-parameter info
  (new World-Parameter
    (lambda ()
      (get-visible?~ (child~ (get-interface~ (current-world)) 'info)))))


(define-parameter axes
  (new World-Parameter
    (lambda ()
      (get-axes?~ (current-world)))))


(define-parameter eye
  (new World-Parameter
    (lambda ()
      (get-eye?~ (current-world)))))


(define-parameter debug-sectors
  (new World-Parameter
    (lambda ()
      (get-debug-sectors?~ (current-zone)))))


(define-parameter debug-areas
  (new World-Parameter
    (lambda ()
      (get-debug-areas?~ (current-zone)))))


(define-parameter draw-atlas
  (new World-Parameter
    (lambda ()
      (get-draw-atlas?~ (current-world)))))


(define-parameter draw-me
  (new World-Parameter
    (lambda ()
      (get-draw-me?~ (current-zone)))))


;;;
;;;; Collision
;;;


(define-parameter debug-collisions
  (new World-Parameter
    (lambda ()
      (get-debug-collisions?)))))
