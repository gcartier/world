;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; Client Assets
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.client.assets jazz


(import (jazz.associative)
        (jazz.io)
        (world)
        (world.assets)
        (world.context))


(class Client-Assets extends Assets
  
  
  (slot repository   getter generate)
  (slot remote-index getter generate)
  
  
  (method override (initialize self where directory)
    (nextmethod self where)
    (set! self.repository (new Associative-Repository directory init?: #t))
    (set! self.remote-index (new Associative-Index #f #f)))
  
  
  (method override (cache-index self)
    (get-index repository))
  
  
  (method override (retrieve-directory self dirpath)
    (iterate-entries self
      (lambda (path)
        (when (starts-with? path dirpath)
          (retrieve-file self path))))
    (new-directory (get-working repository) (tokenise-filename dirpath)))
  
  
  (method override (retrieve-file self path)
    (let ((index (cache-index self))
          (file (new-file (get-working repository) (tokenise-filename path))))
      (if (find-entry index path)
          file
        (bind (content digest) (retrieve-asset (current-client) path)
          (store-object repository content digest)
          (retrieve-file repository digest file)
          file))))
  
  
  (method override (iterate-entries self proc)
    (let ((index (cache-index self)))
      (for-each (lambda (entry)
                  (let ((path (car entry)))
                    (proc path)))
                (get-entries index))
      (for-each (lambda (entry)
                  (let ((path (car entry)))
                    (unless (find-entry index path)
                      (proc path))))
                (get-entries remote-index))))
  
  
  (method override (contains-file? self filename)
    (let ((index (cache-index self)))
      (or (find-entry index filename)
          (find-entry remote-index filename))))))
