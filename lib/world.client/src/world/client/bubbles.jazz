;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Bubbles
;;;


(module world.client.bubbles jazz


(import (jazz.graphic)
        (jazz.graphic.opengl)
        (jazz.graphic.opengl.platform)
        (jazz.io)
        (jazz.library)
        (jazz.literals)
        (jazz.media)
        (jazz.network)
        (jazz.platform)
        (jazz.platform.cairo)
        (jazz.runtime)
        (jazz.system)
        (jazz.ui)
        (jazz.ui.window)
        (time)
        (world)
        (world.client)
        (world.geometry)
        (world.object)
        (world.texture))


;; TODO
;; - fix draw-me
;; - display a menu of keyboard actions
;; - why are objects sometimes not turning
;; - implement fullscreen toggle
;; - implement insert mode


(class Bubbles-World extends World
  
  
  (slot me? initialize #f)
  
  
  ;;;
  ;;;; Draw
  ;;;
  
  
  (method override (draw-world)
    (nextmethod)
    (draw-me))
  
  
  (method (draw-me)
    (when me?
      (let ((me (get-me)))
        (draw-sphere (get-x~ me) (get-y~ me) (get-z~ me) 0.5 26 52 {Color Green alpha: 0.5}))))
  
  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method override (process-keys)
    (process-movement))
  
  
  (method override (key-press c)
    (case c
      ((#\1) (add-bubble))
      ((#\2) (add-pyramid))
      ((#\3) (add-cube))
      ((#\4) (add-cube-center))
      ((#\5) (add-app))
      ((#\7) (loop (repeat 100) (add-bubble)))
      ((#\8) (loop (repeat 100) (add-bubble2 8 16)))
      ((#\9) (add-axes))
      ((#\0) (reset-world))
      ((#\b) (select-bubbles))
      ((#\B) (select-bubbles #t))
      ((#\k) (select-snakes))
      ((#\K) (select-snakes #t))
      ((#\m) (change-music))
      ((#\r) (reset-camera))
      ((#\c) (mode-insert 'cube))
      ((#\p) (toggle-me))
      ((#\z) (toggle-interface))
      ((#\-) (toggle-fps))
      ((#\h) (toggle-polygon-mode))
      ((#\l) (toggle-lighting))
      ((#\f) (toggle-fullscreen))))
  
  
  (method (add-bubble)
    (let ((color (new Color red: (random 256) green: (random 256) blue: (random 256))))
      (add-object (new Sphere self (random-in 10.0) (random-in 10.0) (- (* (random-real) 25.0)) color: color))))
  
  
  (method (add-bubble2 slices stacks)
    (let ((color (new Color red: (random 256) green: (random 256) blue: (random 256))))
      (add-object (new Sphere self (random-in 10.0) (random-in 10.0) (- (* (random-real) 25.0)) slices: slices stacks: stacks color: color))))
  
  
  (method (add-pyramid)
    (add-object (new Pyramid self (random-in 10.0) (random-in 10.0) (- (* (random-real) 25.0)))))
  
  
  (method (add-cube)
    (add-object (new Cube self (random-in 10.0) (random-in 10.0) (- (* (random-real) 25.0)))))
  
  
  (method (add-cube-center)
    (add-object (new Cube self 0.0 0.0 0.0)))
  
  
  (method (add-app)
    @wait
    (add-object (new App self 0.0 0.0 -3.3)))
  
  
  (method (explode)
    (let ((me (get-me)))
      (let ((inside
              (collect-if (lambda (object)
                            (inside?~ object 0.5 me))
                          objects)))
        (when (not (null? inside))
          (let ((music {File Home ".world" "sounds" "explosion.wav"}))
            (when (exists?~ music)
              (close-music "explosion")
              (open-music music "explosion")
              (play-music "explosion"))))
        (set! objects (difference objects inside)))))
  
  
  ;;;
  ;;;; Movement
  ;;;
  
  
  (method override (movement)
    (explode))
  
  
  (method (toggle-me)
    (set! me? (not me?)))
  
  
  (method (mode-explore)
    (set! mode 'explore))
  
  
  (method (mode-insert w)
    (set! mode 'insert)
    (set! what w))))
