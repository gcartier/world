;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Tree
;;;


(module world.client.tree jazz


(import (jazz.geometry)
        (jazz.graphic)
        (jazz.graphic.opengl)
        (jazz.graphic.opengl.platform)
        (jazz.io)
        (jazz.library)
        (jazz.literals)
        (jazz.media)
        (jazz.network)
        (jazz.platform)
        (jazz.platform.cairo)
        (jazz.runtime)
        (jazz.system)
        (jazz.ui)
        (jazz.ui.window)
        (time)
        (world)
        (world.client)
        (world.geometry)
        (world.object)
        (world.texture)
        (world.window))


;;;
;;;; Player
;;;


(class Player-Sprite extends Sprite
  
  
  (slot vx initialize #f accessors generate)
  (slot vy initialize #f accessors generate)
  
  
  (method override (tick)
    (let ((gravity .01)
          (hit (hit-test~ world self)))
      (when vx
        (increase! x vx))
      (when vy
        (increase! y vy))
      (when (< y 0.)
        (set! y 0.))
      (when vy
        (decrease! vy gravity))
      (when (and vy (< vy -1.0))
        (set! vy -1.))))
  
  
  (method (move-left)
    (increase! x -.1))
  
  
  (method (move-right)
    (increase! x .1))
  
  
  (method (move-down)
    (set! vx #f))
  
  
  (method (move-up)
    (set! vx #f))
  
  
  (method (space)
    (if (shift-down?)
        (set! vy .5)
      (set! vy .2))))


;;;
;;;; World
;;;


(class Tree-World extends World
  
  
  (slot player initialize #f)
  
  (slot pulse)
  
  
  ;;;
  ;;;; Initialize
  ;;;
  
  
  (method override (initialize-opengl)
    (define (setup-eye)
      (set! eye (new Vertex 0.0 16.0 40.0))
      (set! eye-sight (new Vertex 0.0 0.0 -1.0))
      (set! right (new Vertex 1.0 0.0 0.0))
      (set! up (new Vertex 0.0 1.0 0.0)))
    
    (define (setup-pulse)
      (set! pulse (new Pulse 'tick .01 tick-world)))
    
    (define (setup-ortho)
      (gl-matrix-mode GL_MODELVIEW)
      (gl-load-identity)
      (gl-matrix-mode GL_PROJECTION)
      (gl-load-identity)
      (gl-ortho 0.0 10. @w (exact->inexact width) 0.0 10. @w (exact->inexact height) -10.0 10.0))
    
    (nextmethod)
    (setup-eye)
    (setup-pulse)
    @w
    (setup-ortho))
  
  
  (method override (initialize-world)
    (nextmethod)
    (let ((resources-dir (new Directory (tokenise-filename (repository-pathname (find-repository 'World) "world.client/resources")))))
      (add-object (new Sprite self 0.0 0.0 5.0 (make-png-texture (new-file~ resources-dir "player/Idle.png"))))
      (set! player (add-object (new Player-Sprite self 1.0 1.0 5.0 (make-png-texture (new-file~ resources-dir "player/Idle.png")))))
      (add-object (new Sprite self 0.0 0.0 5.0 (make-png-texture (new-file~ resources-dir "tiles/BlockA1.png")) .5 .5))
      (add-object (new Sprite self -50.0 -30.0 -5.0 (make-png-texture (new-file~ resources-dir "background/Layer0_0.png")) 100. 100. 1.))))
  
  
  (method override (destroy)
    (nextmethod))
  
  
  ;;;
  ;;;; Tick
  ;;;
  
  
  (method (tick-world)
    (for-each tick~ objects))
  
  
  (method (move-left)
    (move-left~ player))
  
  
  (method (move-right)
    (move-right~ player))
  
  
  (method (move-down)
    (move-down~ player))
  
  
  (method (move-up)
    (move-up~ player))
  
  
  (method (space)
    (space~ player))
  
  
  ;;;
  ;;;; Hit
  ;;;
  
  
  (method (hit-test object)
    #f)
  
  
  ;;;
  ;;;; Draw
  ;;;
  
  
  (method override (draw-interface)
    (nextmethod)
    (gl-frame-rect {Rect 100 100 200 200} {Color Red})
    (gl-pixel {Point 100 250} {Color Green})
    (gl-line {Point 110 250} {Point 190 250} {Color Orange})
    (gl-pixel {Point 200 250} {Color Green})
    (gl-frame-circle {Point 150 350} 50 {Color Yellow})
    (gl-segment-circle {Point 150 500} 50 {Color Light-Blue} 100))
  
  
  (method (gl-set-color color)
    (let ((r (/ (cast <fl> (get-red~ color)) 255))
          (g (/ (cast <fl> (get-green~ color)) 255))
          (b (/ (cast <fl> (get-blue~ color)) 255)))
      (gl-color r g b)))
  
  
  (method (gl-pixel point color)
    (let ((x (get-h~ point))
          (y (get-v~ point)))
      (gl-set-color color)
      (with-gl-begin/end GL_POINTS
        (lambda ()
          (gl-vertex2f x y)))))
  
  
  (method (gl-line from to color)
    (let ((x1 (get-h~ from))
          (y1 (get-v~ from))
          (x2 (get-h~ to))
          (y2 (get-v~ to)))
      (gl-set-color color)
      (with-gl-begin/end GL_LINES
        (lambda ()
          (gl-vertex2f x1 y1)
          (gl-vertex2f x2 y2)))))
  
  
  (method (gl-fill-rect rect color)
    (let ((x1 (get-left~ rect))
          (y1 (get-top~ rect))
          (x2 (get-right~ rect))
          (y2 (get-bottom~ rect)))
      (gl-set-color color)
      (with-gl-begin/end GL_QUADS
        (lambda ()
          (gl-vertex2f x1 y1)
          (gl-vertex2f x2 y1)
          (gl-vertex2f x2 y2)
          (gl-vertex2f x1 y2)))))
  
  
  (method (gl-frame-rect rect color)
    (let ((x1 (get-left~ rect))
          (y1 (get-top~ rect))
          (x2 (get-right~ rect))
          (y2 (get-bottom~ rect)))
      (gl-set-color color)
      (with-gl-begin/end GL_LINE_LOOP
        (lambda ()
          (gl-vertex2f x1 y1)
          (gl-vertex2f x2 y1)
          (gl-vertex2f x2 y2)
          (gl-vertex2f x1 y2)))))
  
  
  (method (gl-frame-circle center radius color)
    (let ((x (get-h~ center))
          (y (get-v~ center)))
      (gl-set-color color)
      (with-gl-begin/end GL_LINE_LOOP
        (lambda ()
          (loop (for angle from 0 to 365 by 5)
                (gl-vertex2f (+ x (* (sin angle) radius))
                             (+ y (* (cos angle) radius))))))))
  
  
  (method (gl-segment-circle center radius color segments)
    (let ((segments (max 3 segments)))
      (let ((cx (get-h~ center))
            (cy (get-v~ center))
            (theta (/ PI*2 segments)))
        (let ((c (cos theta))
              (s (sin theta))
              (x radius)
              (y 0))
          (gl-set-color color)
          (with-gl-begin/end GL_LINE_LOOP
            (lambda ()
              (loop (for n from 0 below segments)
                    (gl-vertex2f (+ x cx) (+ y cy))
                    (let ((t x))
                      (set! x (- (* c x) (* s y)))
                      (set! y (+ (* s t) (* c y)))))))))))
  
  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method override (process-keys)
    (unless (key-down? (char->integer #\space))
      (process-movement))
    (when (eq? window (get-window-focus))
      (receive (shift? control? alt?) (modifiers-down)
        (when (key-down? VK_LEFT)
          (move-left))
        (when (key-down? VK_RIGHT)
          (move-right))
        (when (key-down? VK_DOWN)
          (move-down))
        (when (key-down? VK_UP)
          (move-up))
        (when (key-down? (char->integer #\space))
          (space)))))
  
  
  (method override (key-press c)
    (case c
      ((#\0) (reset-world))
      ((#\b) (select-bubbles))
      ((#\B) (select-bubbles #t))
      ((#\k) (select-snakes))
      ((#\K) (select-snakes #t))
      ((#\m) (change-music))
      ((#\r) (reset-camera))
      ((#\z) (toggle-interface))
      ((#\-) (toggle-fps))
      ((#\h) (toggle-polygon-mode))
      ((#\l) (toggle-lighting))
      ((#\f) (toggle-fullscreen))))))
