;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Tree
;;;


(module world.client.tree jazz


(import (jazz.geometry)
        (jazz.graphic)
        (jazz.graphic.opengl)
        (jazz.graphic.opengl.platform)
        (jazz.io)
        (jazz.library)
        (jazz.literals)
        (jazz.media)
        (jazz.network)
        (jazz.platform)
        (jazz.platform.cairo)
        (jazz.runtime)
        (jazz.system)
        (jazz.ui)
        (jazz.ui.window)
        (time)
        (world)
        (world.client)
        (world.geometry)
        (world.object)
        (world.texture)
        (world.window))


;;;
;;;; World
;;;


(class Tree-World extends World
  
  
  ;;;
  ;;;; Initialize
  ;;;
  
  
  (method override (initialize-opengl)
    (define (setup-eye)
      (set! eye (new Vertex 0.0 16.0 40.0))
      (set! eye-sight (new Vertex 0.0 0.0 -1.0))
      (set! right (new Vertex 1.0 0.0 0.0))
      (set! up (new Vertex 0.0 1.0 0.0)))
    
    (nextmethod)
    (setup-eye))
  
  
  ;;;
  ;;;; Draw
  ;;;
  
  
  (method override (draw-interface)
    (nextmethod)
    (gl-frame-rect {Rect 100 100 200 200} {Color Red})
    (gl-pixel {Point 100 250} {Color Green})
    (gl-line {Point 110 250} {Point 190 250} {Color Orange})
    (gl-pixel {Point 200 250} {Color Green})
    (gl-frame-circle {Point 150 350} 50 {Color Yellow})
    (gl-segment-circle {Point 150 500} 50 {Color Light-Blue} 100))
  
  
  (method (gl-pixel point color)
    (let ((x (get-h~ point))
          (y (get-v~ point)))
      (gl-set-color color)
      (with-gl-begin/end GL_POINTS
        (lambda ()
          (gl-vertex2f x y)))))
  
  
  (method (gl-line from to color)
    (let ((x1 (get-h~ from))
          (y1 (get-v~ from))
          (x2 (get-h~ to))
          (y2 (get-v~ to)))
      (gl-set-color color)
      (with-gl-begin/end GL_LINES
        (lambda ()
          (gl-vertex2f x1 y1)
          (gl-vertex2f x2 y2)))))
  
  
  (method (gl-fill-rect rect color)
    (let ((x1 (get-left~ rect))
          (y1 (get-top~ rect))
          (x2 (get-right~ rect))
          (y2 (get-bottom~ rect)))
      (gl-set-color color)
      (with-gl-begin/end GL_QUADS
        (lambda ()
          (gl-vertex2f x1 y1)
          (gl-vertex2f x2 y1)
          (gl-vertex2f x2 y2)
          (gl-vertex2f x1 y2)))))
  
  
  (method (gl-frame-rect rect color)
    (let ((x1 (get-left~ rect))
          (y1 (get-top~ rect))
          (x2 (get-right~ rect))
          (y2 (get-bottom~ rect)))
      (gl-set-color color)
      (with-gl-begin/end GL_LINE_LOOP
        (lambda ()
          (gl-vertex2f x1 y1)
          (gl-vertex2f x2 y1)
          (gl-vertex2f x2 y2)
          (gl-vertex2f x1 y2)))))
  
  
  (method (gl-frame-circle center radius color)
    (let ((x (get-h~ center))
          (y (get-v~ center)))
      (gl-set-color color)
      (with-gl-begin/end GL_LINE_LOOP
        (lambda ()
          (loop (for angle from 0 to 365 by 5)
                (gl-vertex2f (+ x (* (sin angle) radius))
                             (+ y (* (cos angle) radius))))))))
  
  
  (method (gl-segment-circle center radius color segments)
    (let ((segments (max 3 segments)))
      (let ((cx (get-h~ center))
            (cy (get-v~ center))
            (theta (/ PI*2 segments)))
        (let ((c (cos theta))
              (s (sin theta))
              (x radius)
              (y 0))
          (gl-set-color color)
          (with-gl-begin/end GL_LINE_LOOP
            (lambda ()
              (loop (for n from 0 below segments)
                    (gl-vertex2f (+ x cx) (+ y cy))
                    (let ((t x))
                      (set! x (- (* c x) (* s y)))
                      (set! y (+ (* s t) (* c y)))))))))))))
