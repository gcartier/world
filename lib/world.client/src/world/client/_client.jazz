;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; World Client
;;;


(module world.client jazz


(import (jazz.graphic)
        (jazz.graphic.opengl)
        (jazz.graphic.opengl.platform)
        (jazz.io)
        (world)
        (world.geometry)
        (world.object)
        (world.texture)
        (world.window))


;;;
;;;; Window
;;;


(define *world-window*
  #f)


(definition public (get-world-window)
  *world-window*)


(definition public (setup-world-window window)
  (set! *world-window* window)
  (set-?l window))


(define *bubbles-world* #f)
(define *snakes-world*  #f)


(definition public (get-bubbles-world)
  (new-bubbles-world #f))


(definition public (get-snakes-world)
  (new-snakes-world #f))


(definition (new-bubbles-world reset?)
  (if (and *bubbles-world* (not reset?))
      *bubbles-world*
    (let ((world (new (module-ref 'world.client.bubbles 'Bubbles-World))))
      (set-window~ world *world-window*)
      (initialize-opengl~ world)
      (initialize-world~ world)
      (set! *bubbles-world* world)
      (set-?w world)
      world)))


(definition public (select-bubbles (reset? #f))
  (set-world~ *world-window* (new-bubbles-world reset?)))


(definition (new-snakes-world reset?)
  (if (and *snakes-world* (not reset?))
      *snakes-world*
    (let ((world (new (module-ref 'world.client.snakes 'Snakes-World))))
      (set-window~ world *world-window*)
      (initialize-opengl~ world)
      (initialize-world~ world)
      (set! *snakes-world* world)
      (set-?w world)
      world)))


(definition public (select-snakes (reset? #f))
  (set-world~ *world-window* (new-snakes-world reset?)))


;;;
;;;; Material
;;;


;float mcolor[] = { 1.0f, 0.0f, 0.0f, 1.0f };
;glMaterialfv(GL_FRONT, GL_AMBIENT_AND_DIFFUSE, mcolor);
;// now, draw polygon as its material properties will be affected by the glMaterialfv call.
)
