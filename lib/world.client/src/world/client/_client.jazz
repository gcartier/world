;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Client
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.client jazz


(import (jazz.action)
        (jazz.application)
        (jazz.audio)
        (jazz.component)
        (jazz.debuggee)
        (jazz.ide.login)
        (jazz.io)
        (jazz.jml)
        (jazz.jrm)
        (jazz.layout)
        (jazz.menu)
        (jazz.opengl.window)
        (jazz.platform)
        (jazz.reference)
        (jazz.resource)
        (jazz.settings)
        (jazz.skin)
        (jazz.text)
        (jazz.text.preferences)
        (jazz.ui)
        (jazz.version)
        (jazz.workspace)
        (world)
        (world.appl)
        (world.autoload)
        (world.client.actions)
        (world.client.bars)
        (world.client.configuration)
        (world.client.parameters)
        (world.commands)
        (world.interface.bars)
        (world.interface.skin)
        (world.profile)
        (world.settings)
        (world.syntax (phase syntax))
        (world.task)
        (world.window))


;;;
;;;; Client
;;;


(class World-Client extends World-Application
  
  
  (slot player-name         initialize #f getter generate)
  (slot player-avatar       initialize #f getter generate)
  (slot remote-server       initialize #f getter generate)
  (slot remote-client       initialize #f getter generate)

  
  (method override (process-name)
    "World")
  
  
  (method override (process-icon)
    "WebServer")
  
  
  (method override (process-version)
    {Version 1 0 2})
  
  
  (method override (new-toplevel)
    (let ((fullscreen? (xor (world-setting 'world.fullscreen? #t) (shift-down?)))
          (pos (world-setting 'world.position {Point 100 100}))
          (size (world-setting 'world.size {Dimension 1200 800})))
      (new-opengl-window class: World-Window fullscreen?: fullscreen? position: pos size: size render?: #f visible?: #f)))
  
  
  (method override (initialize-settings)
    (when (world-setting 'world.start-user? #t)
      (set-current-role 'user))
    (customize-roles)
    (let ((file {File Settings ".settings"}))
      (when (not (exists?~ file))
        (create~ file))
      (set! settings (new File-Settings file: file))
      (register-settings settings))
    (let ((file (new-file~ {Directory Settings} (or (command-argument "client-settings") "world.settings"))))
      (when (exists?~ file)
        (register-settings (new File-Settings file: file))))
    (setup-player))
  
  
  (method (setup-player)
    (set! player-name (world-setting 'world.client.player-name #f))
    (set! player-avatar (world-setting 'world.client.player-avatar #f)))
  
  
  (method override (default-preferences)
    (new World-Preferences))
  
  
  (method override (default-workspaces)
    (new World-Workspaces))
  
  
  (method override (default-bindings)
    (new World-Bindings))
  
  
  (method override (finish-process)
    (nextmethod)
    (initialize-audio)
    (when (world-setting 'world.client.auto-connect? #t)
      (connect-server))
    (update-world-actions)
    (install-role)
    (register-debuggee-hook
      (lambda (thread level)
        (when (eq? thread (primordial-thread))
          (let ((world (current-world)))
            (when world
              (let ((debugged? (> level 0)))
                (set-debugged?~ world debugged?)
                (when (not debugged?)
                  (reset-profiling~ world))))))))
    (register-evaluate-wrap
      (lambda (thunk)
        (with-task-mutex
          thunk)))
    (register-evaluate-hook
      (lambda (forms syntax str container line col)
        (let ((world (current-world)))
          (when world
            (evaluate-hook~ world forms syntax str container line col)))))
    (testing (world-setting 'world.testing #f)))


  ;;;
  ;;;; Closing
  ;;;
  

  (method override (quit-process (status 0))
    (define (save-settings)
      (let ((zone (current-zone)))
        (let ((path (determine-path~ zone)))
          (set-setting~ settings 'world.last-zone (and path (join path "/")))
          (save-content~ settings))))
    
    (let ((world (current-world))
          (zone (current-zone)))
      (if (not world)
          (nextmethod status)
        ;; stop tasks before freeing resources
        (stop-tasks~ zone)
        (close~ zone)
        (close~ world)
        (save-settings)
        (nextmethod status))))
  
  
  (method override (close-environment)
    (disconnect)
    (nextmethod))


  ;;;
  ;;;; Skins
  ;;;
  
  
  (method override (install-skins)
    (iterate-skins
      (lambda (name skin)
        (let ((trait (instantiate-trait Skin world-look)))
          (set-parent~ trait (local-trait skin 'jazz))
          (set-active-trait~ skin 'default.jazz.world)))))
  
  
  @skin-convert
  (method override (load-skins)
    (instantiate~
      (<form>
        (<Skins>                    active: world
          (<World-Skin> name: world)))))


  ;;;
  ;;;; Templates
  ;;;


  (method override (templates-directory)
    (world-templates-directory))
  
  
  ;;;
  ;;;; Profile
  ;;;
  
  
  (method override (use-profile?)
    (and kernel-source-access? (find-repository 'Jazz)))
  
  
  (method override (choose-profile-login)
    (choose-login invite: (process-name)))
  
  
  (method override (new-default-profile)
    (new World-Profile))
  
  
  (method override (install-profiles)
    (register-repository-aliases (install-repository (parse~ {Directory Settings "profiles"}))))
  
  
  (method override (profile-kind)
    "client")
  
  
  ;;;
  ;;;; Debuggee
  ;;;
  
  
  (method override (initial-console-context)
    #f)
  
  
  ;;;
  ;;;; Servers
  ;;;
  
  
  (method override (start-servers?)
    ;; pretty costly
    (world-setting 'world.servers? #f))
  
  
  ;;;
  ;;;; Name
  ;;;
  
  
  (method override (effective-player-name)
    player-name)


  ;;;
  ;;;; Server
  ;;;
  
  
  (method override (tier)
    'client)
  
  
  (method override (server-side?)
    #f)
  
  
  (method override (client-side?)
    #t)
  
  
  (method override (get-world-server)
    remote-server)
  
  
  (method override (get-world-client)
    remote-client)


  (method (connect-server)
    (let ((host (world-client-server-host))
          (port (world-client-server-service)))
      (when (and host port)
        ;; the catch is a quick fix for the live? mecanism that has changed
        (let ((remote-register (catch (Exception exc
                                        #f)
                                 (connect-remote-register host port))))
          (when (and remote-register (live?~ remote-register))
            (let ((server (load-object~ remote-register 'world.server.remote 'world-remote-server))
                  (client (load-object~ (get-local-register) 'world.client.remote 'world-remote-client)))
              (set! remote-server server)
              (set! remote-client client)
              (register-client~ server client)
              (add-exit-job! disconnect)))))))
  
  
  (method (disconnect)
    (quit-world)
    (disconnect-server))


  (method (disconnect-server)
    (when (and remote-server remote-client)
      (unregister-client~ remote-server remote-client)
      (set! remote-server #f)
      (set! remote-client #f)))
  
  
  (method override (enter-zone)
    (enter-world))
  
  
  (method (enter-world)
    (when remote-server
      (enter-world~ remote-server remote-client player-name player-avatar)))
  
  
  (method (quit-world)
    (when remote-server
      (quit-world~ remote-server remote-client player-name)))
  
  
  (method (update-client)
    (when remote-server
      (update-client~ remote-server remote-client)))
  
  
  (method (tick-server commands elapse)
    (when remote-server
      (client-tick~ remote-server remote-client (serialize-commands commands) elapse)))

  
  ;;;
  ;;;; Frames
  ;;;


  (method override (default-frame-class)
    Plain-Text-View)


  (method override (known-extension-frame-class ext)
    (cond ((member? ext '("txt") test: extension=?) Plain-Text-View)
          (else (nextmethod ext))))

  
  ;;;
  ;;;; Actions
  ;;;
  
  
  (method override (class-actions)
    (append (list (find-actions 'world-menu)
                  (find-actions 'world-interface)
                  (find-actions 'world-graphics)
                  (find-actions 'world-sound)
                  (find-actions 'world-client)
                  (find-actions 'world-world)
                  (find-actions 'world-zone)
                  (find-actions 'world-movement)
                  (find-actions 'world-camera)
                  (find-actions 'world-game)
                  (find-actions 'world-user)
                  (find-actions 'world-spell)
                  (find-actions 'world-edition)
                  (find-actions 'world-history)
                  (find-actions 'world-window)
                  (find-actions 'world-debug)
                  (find-actions 'world-tutorial)
                  (find-actions 'world-collision)
                  (find-actions 'world-minecraft)
                  (find-actions 'world-anonymous))
            (nextmethod)))
  
  
  (method public (update-world-actions)
    )


  ;;;
  ;;;; Environment
  ;;;
  
  
  (method override (save-environment)
    (nextmethod)
    (save-content~ settings))
  
  
  ;;;
  ;;;; Interface
  ;;;
  
  
  (method override (setup-application-interface)
    (install-bars
      `((,World-Main-Bar      main      horizontal (center -10))
        (,World-Client-Bar    client    horizontal (10 -98))
        (,World-Game-Bar      game      horizontal (center -36))
        (,World-Window-Bar    window    horizontal (-10 -10))
        (,World-Camera-Bar    camera    horizontal (-10 -36))
        (,World-Debug-Bar     debug     horizontal (10 -10))
        (,World-History-Bar   history   horizontal (10 -36))
        (,World-Target-Bar    target    horizontal (-10 10))
        (,World-Edition-Bar   edition   vertical   (-36 center))
        (,World-Interface-Bar interface vertical   (-10 center))
        (,World-Tutorial-Bar  tutorial  horizontal (10 10) #f)
        (,World-Objective-Bar objective horizontal (114 10) #f)
        (,World-Collision-Bar collision horizontal (-10 36) #f)
        (,World-Minecraft-Bar minecraft vertical   (-10 -62) #f))))


  ;;;
  ;;;; Runtime
  ;;;


  (method override (runtime-properties)
    (cons kind: (cons 'client (cons player: (cons player-name (nextmethod)))))))


;;;
;;;; Preferences
;;;


(class World-Preferences extends Application-Preferences
  
  
  (form
    (<install>                                     toplevel-state: restored toolbar-classes: ((:menubar . {Reference World-Menubar}) (:toolbar . {Reference World-Toolbar}) (:status . {Reference World-Status}))
      (<documents~>
        (<Plain-Text-Preferences> name: plain-text)))))


;;;
;;;; Workspaces
;;;


(class World-Workspaces extends Workspaces-Preferences
  
  
  (form
    (<install>                          active: home
      (<World-Workspace> name: home))))


;;;
;;;; Workspace
;;;


(class World-Workspace extends Workspace-Preferences
  
  
  (form
    (<install>                                    title: "Home" icon: {Image-Resource "WorkspaceHome"}
      (<Menubar-Preferences>        name: menubar location: root
        (<Mainbar-Preferences>      name: toolbar location: second
          (<Status-Preferences>     name: status  location: second
            (<Stage-Preferences>    name: top     location: first maximized?: #t)))))))


;;;
;;;; Bindings
;;;


(class World-Bindings extends Application-Bindings
  
  
  (form
    (<install>
      (<World-Menu-Actions>      name: world-menu)
      (<World-Interface-Actions> name: world-interface)
      (<World-Graphics-Actions>  name: world-graphics)
      (<World-Sound-Actions>     name: world-sound)
      (<World-Client-Actions>    name: world-client)
      (<World-World-Actions>     name: world-world)
      (<World-Zone-Actions>      name: world-zone)
      (<World-Movement-Actions>  name: world-movement)
      (<World-Camera-Actions>    name: world-camera)
      (<World-Game-Actions>      name: world-game)
      (<World-Spell-Actions>     name: world-spell)
      (<World-Edition-Actions>   name: world-edition)
      (<World-History-Actions>   name: world-history)
      (<World-Window-Actions>    name: world-window)
      (<World-Debug-Actions>     name: world-debug)
      (<World-Tutorial-Actions>  name: world-tutorial)
      (<World-Objective-Actions> name: world-objective)
      (<World-Collision-Actions> name: world-collision)
      (<World-Minecraft-Actions> name: world-minecraft)
      (<World-Anonymous-Actions> name: world-anonymous))))


;;;
;;;; Menubar
;;;


(class World-Menubar extends Menubar
  
  
  (method override (install rest)
    (nextmethod rest)
    (with-update-locked
      (lambda ()
        (new Label-Item parent: self name: 'file   content: (new File-Base-Menu))
        (new Label-Item parent: self name: 'edit   content: (new Edit-Base-Menu))
        (new Label-Item parent: self name: 'window content: (new Window-Menu))
        (new Label-Item parent: self name: 'help   content: (new Help-Menu))))))


;;;
;;;; Help-Menu
;;;


(class Help-Menu extends Menu
  
  
  (form
    (<install>          title: "Help"
      (<Label-Item>     title: "About World..." icon: {Image-Resource "About"} action-handler: {Action application about}))))


;;;
;;;; Toolbar
;;;


(class World-Toolbar extends Toolbar


  (form
    (<install>
      (<Action-Icon> name: new        tooltip-text: "New" resource: {Image-Resource "New"} action-handler: {Action application new})
      (<Action-Icon> name: open       tooltip-text: "Open..." resource: {Image-Resource "Open"} action-handler: {Action application open})
      (<Separator>)
      (<Action-Icon> name: cut        tooltip-text: "Cut" resource: {Image-Resource "Cut"} action-handler: {Action view cut})
      (<Action-Icon> name: copy       tooltip-text: "Copy" resource: {Image-Resource "Copy"} action-handler: {Action view copy})
      (<Action-Icon> name: paste      tooltip-text: "Paste" resource: {Image-Resource "Paste"} action-handler: {Action view paste})
      (<Separator>)
      (<Action-Icon> name: undo       tooltip-text: "Undo" resource: {Image-Resource "Undo"} action-handler: {Action view undo})
      (<Action-Icon> name: redo       tooltip-text: "Redo" resource: {Image-Resource "Redo"} action-handler: {Action view redo})
      (<Separator>                    location: tail size: {Dimension 1 0}))))


;;;
;;;; Status
;;;


(class World-Status extends Status-Toolbar


  (form
    (<install>
      (<Status-Label> name: message size: {Dimension 782 20} location: center)))))
