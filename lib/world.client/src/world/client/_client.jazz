;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; World Client
;;;


(module world.client jazz


(import (jazz.debuggee)
        (jazz.graphic)
        (jazz.ide.login)
        (jazz.io)
        (jazz.jml)
        (jazz.jrm)
        (jazz.jrm.protocol)
        (jazz.library)
        (jazz.locale)
        (jazz.system)
        (jazz.system.application)
        (jazz.ui)
        (jazz.ui.window)
        (jazz.version)
        (world)
        (world.appl)
        (world.player)
        (world.settings)
        (world.client.actions)
        (world.client.configuration)
        (world.client.window)
        (world.interface)
        (world.interface.dialogs)
        (world.interface.documents)
        (world.interface.skin))


;;;
;;;; Client
;;;


(class World-Client extends World-Application
  
  
  (slot player-name   initialize #f getter generate)
  (slot player-avatar initialize #f getter generate)
  (slot remote-server initialize #f getter generate)
  (slot remote-client initialize #f getter generate)

  
  (method override (process-name)
    "World")
  
  
  (method override (process-owner)
    "Guillaume Cartier")
  
  
  (method override (process-copyright)
    "2012")
  
  
  (method override (process-icon)
    "WebServer")
  
  
  (method override (process-version)
    {Version 1 0 0})
  
  
  (method override (process-email)
    "gucartier@gmail.com")
  
  
  (method override (new-toplevel)
    (new World-Toplevel))


  (define settings-updates
    (list->updates
      '((version: 100000 targets: settings))))


  (define (convert-settings dir old)
    (define (convert-initial)
      100000)

    (case old
      ((#f) (convert-initial))
      (else #f)))


  (method override (settings-version)
    (get-update-version (car settings-updates)))
  
  
  (method override (initialize-settings)
    (define (determine-settings)
      (or (command-argument "settings")
          (let ((settings-dir {Directory Build "settings"}))
            (and (exists?~ settings-dir)
                 (versioned-directory (parse~ settings-dir) 'settings settings-updates convert-settings)))
          (let ((dot-dir {Directory Home ".world"}))
            (copy-settings-if-not-exists)
            (versioned-directory (parse~ dot-dir) 'settings settings-updates convert-settings))))

    (register-alias 'Settings (tokenise-filename (determine-settings)) override?: #t)
    (let ((file {File Settings ".settings"}))
      (when (not (exists?~ file))
        (create~ file))
      (set! settings (new File-Settings file: file))
      (register-settings settings))
    (let ((file {File Settings "client.settings"}))
      (when (exists?~ file)
        (register-settings (new File-Settings file: file))))
    (let ((file (new-file~ {Directory Settings} (or (command-argument "client-settings") "world.settings"))))
      (when (exists?~ file)
        (register-settings (new File-Settings file: file))))
    (set-validate-shaders? (find-setting 'world.validate-shaders? #f))
    (setup-player)
    (setup-snapshots))
  
  
  (method (setup-player)
    (set! player-name (find-setting 'world.client.player-name #f))
    (set! player-avatar (find-setting 'world.client.player-avatar #f)))
  
  
  (method override (default-preferences)
    (new World-Preferences))
  
  
  (method override (default-workspaces)
    (new World-Workspaces))
  
  
  (method override (default-bindings)
    (new World-Bindings))
  
  
  (method override (finish-process)
    (nextmethod)
    (setup-styles)
    (when (find-setting 'world.client.auto-connect? #t)
      (connect-server))
    (update-world-actions)
    (register-evaluate-hook
      (lambda ()
        (when world
          (evaluate-hook~ world)))))


  ;;;
  ;;;; Closing
  ;;;
  
  
  (method override (close-environment)
    (disconnect)
    (nextmethod))


  ;;;
  ;;;; Activation
  ;;;


  (method override (activate)
    (nextmethod)
    (delay-event
      (lambda ()
        (let ((news (news-file))
              (setting-name 'world.last-news))
          (let ((last (find-setting setting-name #f))
                (actual (digest-file (parse~ news) 'SHA-1)))
            (when (or (not last)
                      (not (equal? last actual)))
              (if (not last)
                  (show-news)
                (propose-news))
              (set-setting~ settings setting-name actual)
              (save-content~ settings)))))))
  
  
  (method (propose-news)
    (open-message "World NEWS have changed since you last viewed them"
                  caption: "NEWS"
                  type: 'question
                  yes: "Show Me"
                  no: "Ignore"
                  execute: (lambda (evt)
                             (let ((dialog (find-ascendant~ (get-sender~ evt) World-Dialog))
                                   (button (get-property~ evt button:)))
                               (close~ dialog)
                               (case button
                                 ((yes)
                                  (show-news)))))))
  
  
  (method (news-file)
    (world-file "NEWS"))
  
  
  (method (show-news)
    (open-document (news-file)))
  
  
  ;;;
  ;;;; Styles
  ;;;
  
  
  (definition world-styles
    (<form>
      (<Styles-Preferences>
        (<Text-Style-Preferences> name: Text-Base font: {Font Label antialias: none} color: {Color White})
        (<Text-Style-Preferences> name: Code-Base font: {Font Code antialias: none} color: {Color White}))))
  
  
  (method (setup-styles)
    (register-children~ (instantiate~ world-styles) (styles-domain)))


  ;;;
  ;;;; Skins
  ;;;
  
  
  (method override (load-skins)
    (instantiate~
      (<form>
        (<Skins>                    active: world
          (<World-Skin> name: world)))))


  ;;;
  ;;;; Templates
  ;;;


  (method override (templates-directory)
    (world-templates-directory))


  ;;;
  ;;;; Alias
  ;;;
  
  
  (method override (process-alias name)
    (case name
      ((:world) world)
      (else (nextmethod name))))
  
  
  ;;;
  ;;;; Profile
  ;;;
  
  
  (method override (use-profile?)
    (using-debugger?))


  (method override (use-profile-logging?)
    (using-debugger?))
  
  
  (method override (choose-profile-login)
    (choose-login invite: (process-name)))
  
  
  (method override (install-profiles)
    (register-repository-aliases (install-repository (parse~ {Directory Settings "profiles"}))))
  
  
  (method override (profile-kind)
    "world")
  
  
  ;;;
  ;;;; Debuggee
  ;;;
  
  
  (method override (initial-console-context)
    #f)
  
  
  ;;;
  ;;;; Servers
  ;;;
  
  
  (method override (start-servers?)
    #t)
  
  
  ;;;
  ;;;; Name
  ;;;
  
  
  (method override (effective-player-name)
    player-name)


  ;;;
  ;;;; Server
  ;;;
  
  
  (method override (tier)
    'client)
  
  
  (method override (server-side?)
    #f)
  
  
  (method override (client-side?)
    #t)
  
  
  (method override (get-world-server)
    remote-server)
  
  
  (method override (get-world-client)
    remote-client)


  (method (connect-server)
    (let ((host (world-client-host))
          (port (world-client-service)))
      ;; the catch is a quick fix for the live? mecanism that has changed
      (let ((remote-register (catch (Exception exc
                                      #f)
                               (connect-remote-register host port))))
        (when (and remote-register (live?~ remote-register))
          (let ((server (load-object~ remote-register 'world.server.remote 'world-remote-server))
                (client (load-object~ (get-local-register) 'world.client.remote 'world-remote-client)))
            (set! remote-server server)
            (set! remote-client client)
            (register-client~ server client)
            (add-exit-job! disconnect))))))
  
  
  (method (disconnect)
    (exit-world)
    (disconnect-server))


  (method (disconnect-server)
    (when (and remote-server remote-client)
      (unregister-client~ remote-server remote-client)
      (set! remote-server #f)
      (set! remote-client #f)))
  
  
  (method override (enter-zone)
    (enter-world))
  
  
  (method (enter-world)
    (when remote-server
      (enter-world~ remote-server remote-client player-name player-avatar)))
  
  
  (method (exit-world)
    (when remote-server
      (exit-world~ remote-server remote-client player-name)))
  
  
  (method (update-client)
    (when remote-server
      (update-client~ remote-server remote-client)))
  
  
  (method (tick-server commands elapse)
    (when remote-server
      (client-tick~ remote-server remote-client (serialize-commands commands) elapse)))

  
  ;;;
  ;;;; Frames
  ;;;


  (method override (default-frame-class)
    Plain-Text-View)


  (method override (known-extension-frame-class ext)
    (cond ((member? ext '("txt") test: extension=?) Plain-Text-View)
          (else (nextmethod ext))))

  
  ;;;
  ;;;; Actions
  ;;;
  
  
  (method override (class-actions)
    (append (list (find-actions 'world-interface)
                  (find-actions 'world-graphics)
                  (find-actions 'world-sound)
                  (find-actions 'world-server)
                  (find-actions 'world-world)
                  (find-actions 'world-zone)
                  (find-actions 'world-movement)
                  (find-actions 'world-camera)
                  (find-actions 'world-game)
                  (find-actions 'world-edition)
                  (find-actions 'world-history)
                  (find-actions 'world-window)
                  (find-actions 'world-debug))
            (nextmethod)))
  
  
  (method public (update-world-actions)
    )


  ;;;
  ;;;; Environment
  ;;;
  
  
  (method override (save-environment)
    (nextmethod)
    (save-content~ settings))


  ;;;
  ;;;; Runtime
  ;;;


  (method override (runtime-properties)
    (cons kind: (cons 'client (cons player: (cons player-name (nextmethod)))))))


;;;
;;;; Preferences
;;;


(class World-Preferences extends Application-Preferences
  
  
  (form
    (<install>                                     toplevel-state: restored toolbar-classes: ((:menubar . {Reference World-Menubar}) (:toolbar . {Reference World-Toolbar}) (:status . {Reference World-Status}))
      (<documents~>
        (<Plain-Text-Preferences> name: plain-text)))))


;;;
;;;; Workspaces
;;;


(class World-Workspaces extends Workspaces-Preferences
  
  
  (form
    (<install>                          active: home
      (<World-Workspace> name: home))))


;;;
;;;; Workspace
;;;


(class World-Workspace extends Workspace-Preferences
  
  
  (form
    (<install>                                    title: "Home" icon: {Image-Resource "WorkspaceHome"}
      (<Menubar-Preferences>        name: menubar location: root
        (<Mainbar-Preferences>      name: toolbar location: second
          (<Status-Preferences>     name: status  location: second
            (<Stage-Preferences>    name: top     location: first maximized?: #t)))))))


;;;
;;;; Bindings
;;;


(class World-Bindings extends Application-Bindings
  
  
  (form
    (<install>
      (<World-Interface-Actions> name: world-interface)
      (<World-Graphics-Actions>  name: world-graphics)
      (<World-Sound-Actions>     name: world-sound)
      (<World-Server-Actions>    name: world-server)
      (<World-World-Actions>     name: world-world)
      (<World-Zone-Actions>      name: world-zone)
      (<World-Movement-Actions>  name: world-movement)
      (<World-Camera-Actions>    name: world-camera)
      (<World-Game-Actions>      name: world-game)
      (<World-Edition-Actions>   name: world-edition)
      (<World-History-Actions>   name: world-history)
      (<World-Window-Actions>    name: world-window)
      (<World-Debug-Actions>     name: world-debug))))


;;;
;;;; Toplevel
;;;


(class World-Toplevel extends Toplevel


  (form
    (<install> caption-base: "World" size: {Dimension 850 550})))


;;;
;;;; Menubar
;;;


(class World-Menubar extends Menubar
  
  
  (method override (install rest)
    (nextmethod rest)
    (with-update-locked
      (lambda ()
        (new Label-Item parent: self name: 'file   content: (new File-Base-Menu))
        (new Label-Item parent: self name: 'edit   content: (new Edit-Base-Menu))
        (new Label-Item parent: self name: 'world  content: (new World-Menu))
        (new Label-Item parent: self name: 'window content: (new Window-Menu))
        (new Label-Item parent: self name: 'help   content: (new Help-Menu))))))


;;;
;;;; World-Menu
;;;


(class World-Menu extends Menu
  
  
  (form
    (<install> title: "World")))


;;;
;;;; Help-Menu
;;;


(class Help-Menu extends Menu
  
  
  (form
    (<install>          title: "Help"
      (<Label-Item>     title: "About World..." icon: {Image-Resource "About"} action-handler: {Action application about}))))


;;;
;;;; Toolbar
;;;


(class World-Toolbar extends Toolbar


  (form
    (<install>
      (<Action-Icon> name: new        tooltip-text: "New" resource: {Image-Resource "New"} action-handler: {Action application new})
      (<Action-Icon> name: open       tooltip-text: "Open..." resource: {Image-Resource "Open"} action-handler: {Action application open})
      (<Separator>)
      (<Action-Icon> name: cut        tooltip-text: "Cut" resource: {Image-Resource "Cut"} action-handler: {Action view cut})
      (<Action-Icon> name: copy       tooltip-text: "Copy" resource: {Image-Resource "Copy"} action-handler: {Action view copy})
      (<Action-Icon> name: paste      tooltip-text: "Paste" resource: {Image-Resource "Paste"} action-handler: {Action view paste})
      (<Separator>)
      (<Action-Icon> name: undo       tooltip-text: "Undo" resource: {Image-Resource "Undo"} action-handler: {Action view undo})
      (<Action-Icon> name: redo       tooltip-text: "Redo" resource: {Image-Resource "Redo"} action-handler: {Action view redo})
      (<Separator>                    location: tail size: {Dimension 1 0}))))


;;;
;;;; Status
;;;


(class World-Status extends Status-Toolbar


  (form
    (<install>
      (<Status-Label> name: message size: {Dimension 782 20} location: center)))))
