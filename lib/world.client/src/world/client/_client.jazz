;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; World Client
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2013
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.client jazz


(import (jazz.debuggee)
        (jazz.graphic)
        (jazz.graphic.opengl.window)
        (jazz.ide.login)
        (jazz.io)
        (jazz.jml)
        (jazz.jrm)
        (jazz.jrm.protocol)
        (jazz.library)
        (jazz.locale)
        (jazz.logger)
        (jazz.system)
        (jazz.system.application)
        (jazz.ui)
        (jazz.ui.window)
        (jazz.version)
        (world)
        (world.appl)
        (world.autoload)
        (world.option)
        (world.player)
        (world.profile)
        (world.settings)
        (world.client.actions)
        (world.client.bars)
        (world.client.configuration)
        (world.client.parameters)
        (world.client.window)
        (world.interface)
        (world.interface.bars)
        (world.interface.dialogs)
        (world.interface.documents)
        (world.interface.skin)
        (world.syntax (phase syntax))
        (world.window))


;;;
;;;; Client
;;;


(class World-Client extends World-Application
  
  
  (slot player-name         initialize #f getter generate)
  (slot player-avatar       initialize #f getter generate)
  (slot remote-server       initialize #f getter generate)
  (slot remote-client       initialize #f getter generate)
  (slot options             initialize #f getter generate)
  (slot current-role        initialize #f getter generate)
  (slot current-role-traits initialize #f getter generate)

  
  (method override (process-name)
    "World")
  
  
  (method override (process-owner)
    "Guillaume Cartier")
  
  
  (method override (process-copyright)
    "2012-2013")
  
  
  (method override (process-icon)
    "WebServer")
  
  
  (method override (process-version)
    {Version 1 0 2})
  
  
  (method override (process-email)
    "gucartier@gmail.com")
  
  
  (method override (new-toplevel)
    (let ((fullscreen? (xor (world-setting 'world.fullscreen? #t 'default) (shift-down?)))
          (pos (find-setting 'world.position {Point 50 50}))
          (size (find-setting 'world.size {Dimension 1200 800})))
      (new-opengl-window class: World-Window fullscreen?: fullscreen? position: pos size: size visible?: #f)))


  (define settings-updates
    (list->updates
      '((version: 100000 targets: settings))))


  (define (convert-settings dir old)
    (define (convert-initial)
      100000)

    (case old
      ((#f) (convert-initial))
      (else #f)))


  (method override (settings-version)
    (get-update-version (car settings-updates)))
  
  
  (method override (initialize-settings)
    (define (determine-settings)
      (or (command-argument "settings")
          (let ((settings-dir {Directory Build "settings"}))
            (and (exists?~ settings-dir)
                 (versioned-directory (parse~ settings-dir) 'settings settings-updates convert-settings feedback?: #f)))
          (let ((settings-root (settings-root)))
            (copy-settings-if-not-exists settings-root (settings-alias))
            (versioned-directory (parse~ settings-root) 'settings settings-updates convert-settings feedback?: #f))))

    (register-alias 'Settings (tokenise-filename (determine-settings)) override?: #t)
    (let ((file {File Settings ".settings"}))
      (when (not (exists?~ file))
        (create~ file))
      (set! settings (new File-Settings file: file))
      (register-settings settings))
    (let ((file {File Settings "client.settings"}))
      (when (exists?~ file)
        (register-settings (new File-Settings file: file))))
    (let ((file (new-file~ {Directory Settings} (or (command-argument "client-settings") "world.settings"))))
      (when (exists?~ file)
        (register-settings (new File-Settings file: file))))
    (random-seed (find-setting 'world.random-seed #f))
    (set-logger-directory {Directory Settings "logs"})
    (when (find-setting 'world.gc-report? #f)
      (gc-report-set! #t))
    (set-validate-shaders? (find-setting 'world.validate-shaders? #f))
    (setup-player)
    (setup-snapshots))
  
  
  (method (setup-player)
    (set! player-name (find-setting 'world.client.player-name #f))
    (set! player-avatar (find-setting 'world.client.player-avatar #f)))
  
  
  (method override (default-preferences)
    (new World-Preferences))
  
  
  (method override (default-workspaces)
    (new World-Workspaces))
  
  
  (method override (default-bindings)
    (new World-Bindings))
  
  
  (method override (finish-process)
    (nextmethod)
    (setup-styles)
    (when (find-setting 'world.client.auto-connect? #t)
      (connect-server))
    (update-world-options)
    (update-world-actions)
    (register-debuggee-hook
      (lambda (thread level)
        (when (eq? thread (primordial-thread))
          (let ((world (current-world)))
            (when world
              (let ((debugged? (> level 0)))
                (set-debugged?~ world debugged?)
                (when (not debugged?)
                  (reset-last-tick~ world)
                  (reset-counters~ world))))))))
    (register-evaluate-hook
      (lambda (syntax str container line col)
        (let ((world (current-world)))
          (when world
            (evaluate-hook~ world syntax str container line col)))))
    (testing (find-setting 'world.testing #f)))


  ;;;
  ;;;; Closing
  ;;;
  

  (method override (exit-process (status 0))
    (let ((world (current-world)))
      (if (not world)
          (nextmethod status)
        (zone-confirm-close~ world
          (lambda ()
            (nextmethod status))))))
  
  
  (method override (close-environment)
    (disconnect)
    (nextmethod))


  ;;;
  ;;;; Activation
  ;;;


  (method override (activate)
    (nextmethod)
    (delay-event
      (lambda ()
        (let ((news (news-file))
              (setting-name 'world.last-news))
          (let ((last (find-setting setting-name #f))
                (actual (digest-file (parse~ news) 'SHA-1)))
            (when (or (not last)
                      (not (equal? last actual)))
              (if (not last)
                  (show-news)
                (propose-news))
              (set-setting~ settings setting-name actual)
              (save-content~ settings)))))))
  
  
  (method (propose-news)
    (open-message "News have changed since you last viewed them"
                  caption: "News"
                  type: 'question
                  yes: "Show Me"
                  no: "Ignore"
                  execute: (lambda (evt)
                             (let ((dialog (find-ascendant~ (get-sender~ evt) World-Dialog))
                                   (button (get-property~ evt button:)))
                               (close~ dialog)
                               (case button
                                 ((yes)
                                  (show-news)))))))
  
  
  (method (show-news)
    ;; quick hack
    (when (is? (current-world-window) World-Window)
      (open-document (news-file) class: World-Formatted-Text-View)))
  
  
  ;;;
  ;;;; Roles
  ;;;
  
  
  (method protected virtual (role-traits role)
    (error "Unknown role: {s}" role))


  (method (install-role role)
    (let ((traits (role-traits role)))
      (for-each (lambda (info)
                  (bind (alias trait) info
                    (let ((component (process-alias alias)))
                      (when component
                        (replace-active-trait~ component trait)))))
                traits)
      (set! current-role role)
      (set! current-role-traits traits)))
  
  
  (method (find-role-trait name)
    (let ((pair (assq name current-role-traits)))
      (when pair
        (cadr pair))))
  
  
  ;;;
  ;;;; Files
  ;;;
  
  
  (method virtual (news-file)
    (world-file '("devel" "world" "News.ftx")))
  
  
  (method virtual (roadmap-file)
    (world-file '("devel" "world" "Roadmap.ftx")))
  
  
  (method virtual (help-file)
    (world-file '("devel" "world" "Help.ftx")))
  
  
  ;;;
  ;;;; Styles
  ;;;
  
  
  (definition world-styles
    (<form>
      (<Styles-Preferences>
        (<Text-Style-Preferences> name: Text-Base font: {Font Label antialias: none} color: {Color White})
        (<Text-Style-Preferences> name: Code-Base font: {Font Code antialias: none} color: {Color White}))))
  
  
  (method (setup-styles)
    (register-children~ (instantiate~ world-styles) (styles-domain)))


  ;;;
  ;;;; Skins
  ;;;
  
  
  (method override (load-skins)
    (instantiate~
      (<form>
        (<Skins>                    active: world
          (<World-Skin> name: world)))))


  ;;;
  ;;;; Templates
  ;;;


  (method override (templates-directory)
    (world-templates-directory))


  ;;;
  ;;;; Alias
  ;;;
  
  
  (method override (process-alias name)
    (case name
      ((:world) (current-world))
      (else (nextmethod name))))
  
  
  ;;;
  ;;;; Profile
  ;;;
  
  
  (method override (use-profile?)
    (and kernel-source-access? (find-repository 'Jazz)))
  
  
  (method override (choose-profile-login)
    (choose-login invite: (process-name)))
  
  
  (method override (new-default-profile)
    (new World-Profile))
  
  
  (method override (install-profiles)
    (register-repository-aliases (install-repository (parse~ {Directory Settings "profiles"}))))
  
  
  (method override (profile-kind)
    "client")
  
  
  ;;;
  ;;;; Debuggee
  ;;;
  
  
  (method override (initial-console-context)
    #f)
  
  
  ;;;
  ;;;; Servers
  ;;;
  
  
  (method override (start-servers?)
    #t)
  
  
  ;;;
  ;;;; Name
  ;;;
  
  
  (method override (effective-player-name)
    player-name)


  ;;;
  ;;;; Server
  ;;;
  
  
  (method override (tier)
    'client)
  
  
  (method override (server-side?)
    #f)
  
  
  (method override (client-side?)
    #t)
  
  
  (method override (get-world-server)
    remote-server)
  
  
  (method override (get-world-client)
    remote-client)


  (method (connect-server)
    (let ((host (world-client-host))
          (port (world-client-service)))
      (when (and host port)
        ;; the catch is a quick fix for the live? mecanism that has changed
        (let ((remote-register (catch (Exception exc
                                        #f)
                                 (connect-remote-register host port))))
          (when (and remote-register (live?~ remote-register))
            (let ((server (load-object~ remote-register 'world.server.remote 'world-remote-server))
                  (client (load-object~ (get-local-register) 'world.client.remote 'world-remote-client)))
              (set! remote-server server)
              (set! remote-client client)
              (register-client~ server client)
              (add-exit-job! disconnect)))))))
  
  
  (method (disconnect)
    (exit-world)
    (disconnect-server))


  (method (disconnect-server)
    (when (and remote-server remote-client)
      (unregister-client~ remote-server remote-client)
      (set! remote-server #f)
      (set! remote-client #f)))
  
  
  (method override (enter-zone)
    (enter-world))
  
  
  (method (enter-world)
    (when remote-server
      (enter-world~ remote-server remote-client player-name player-avatar)))
  
  
  (method (exit-world)
    (when remote-server
      (exit-world~ remote-server remote-client player-name)))
  
  
  (method (update-client)
    (when remote-server
      (update-client~ remote-server remote-client)))
  
  
  (method (tick-server commands elapse)
    (when remote-server
      (client-tick~ remote-server remote-client (serialize-commands commands) elapse)))

  
  ;;;
  ;;;; Frames
  ;;;


  (method override (default-frame-class)
    Plain-Text-View)


  (method override (known-extension-frame-class ext)
    (cond ((member? ext '("txt") test: extension=?) Plain-Text-View)
          (else (nextmethod ext))))

  
  ;;;
  ;;;; Options
  ;;;
  
  
  (method public (update-world-options)
    (set! options (new World-Options)))

  
  ;;;
  ;;;; Actions
  ;;;
  
  
  (method override (class-actions)
    (append (list (find-actions 'world-menu)
                  (find-actions 'world-interface)
                  (find-actions 'world-graphics)
                  (find-actions 'world-sound)
                  (find-actions 'world-server)
                  (find-actions 'world-world)
                  (find-actions 'world-zone)
                  (find-actions 'world-movement)
                  (find-actions 'world-camera)
                  (find-actions 'world-game)
                  (find-actions 'world-spell)
                  (find-actions 'world-edition)
                  (find-actions 'world-history)
                  (find-actions 'world-window)
                  (find-actions 'world-debug)
                  (find-actions 'world-anonymous))
            (nextmethod)))
  
  
  (method public (update-world-actions)
    )


  ;;;
  ;;;; Environment
  ;;;
  
  
  (method override (save-environment)
    (nextmethod)
    (save-content~ settings))
  
  
  ;;;
  ;;;; Interface
  ;;;
  
  
  (method override (setup-application-interface)
    (install-bars
      `((,World-Main-Bar      main      horizontal (center -10))
        (,World-Game-Bar      game      horizontal (center -36))
        (,World-Window-Bar    window    horizontal (-10 -10))
        (,World-Camera-Bar    camera    horizontal (-10 -36))
        (,World-Debug-Bar     debug     horizontal (10 -10))
        (,World-History-Bar   history   horizontal (10 -36))
        (,World-Target-Bar    target    horizontal (-10 10))
        (,World-Edition-Bar   edition   vertical   (-36 center))
        (,World-Interface-Bar interface vertical   (-10 center))
        (,World-Collision-Bar collision horizontal (-10 36) #f))))


  ;;;
  ;;;; Runtime
  ;;;


  (method override (runtime-properties)
    (cons kind: (cons 'client (cons player: (cons player-name (nextmethod)))))))


;;;
;;;; Preferences
;;;


(class World-Preferences extends Application-Preferences
  
  
  (form
    (<install>                                     toplevel-state: restored toolbar-classes: ((:menubar . {Reference World-Menubar}) (:toolbar . {Reference World-Toolbar}) (:status . {Reference World-Status}))
      (<documents~>
        (<Plain-Text-Preferences> name: plain-text)))))


;;;
;;;; Workspaces
;;;


(class World-Workspaces extends Workspaces-Preferences
  
  
  (form
    (<install>                          active: home
      (<World-Workspace> name: home))))


;;;
;;;; Workspace
;;;


(class World-Workspace extends Workspace-Preferences
  
  
  (form
    (<install>                                    title: "Home" icon: {Image-Resource "WorkspaceHome"}
      (<Menubar-Preferences>        name: menubar location: root
        (<Mainbar-Preferences>      name: toolbar location: second
          (<Status-Preferences>     name: status  location: second
            (<Stage-Preferences>    name: top     location: first maximized?: #t)))))))


;;;
;;;; Bindings
;;;


(class World-Bindings extends Application-Bindings
  
  
  (form
    (<install>
      (<World-Menu-Actions>      name: world-menu)
      (<World-Interface-Actions> name: world-interface)
      (<World-Graphics-Actions>  name: world-graphics)
      (<World-Sound-Actions>     name: world-sound)
      (<World-Server-Actions>    name: world-server)
      (<World-World-Actions>     name: world-world)
      (<World-Zone-Actions>      name: world-zone)
      (<World-Movement-Actions>  name: world-movement)
      (<World-Camera-Actions>    name: world-camera)
      (<World-Game-Actions>      name: world-game)
      (<World-Spell-Actions>     name: world-spell)
      (<World-Edition-Actions>   name: world-edition)
      (<World-History-Actions>   name: world-history)
      (<World-Window-Actions>    name: world-window)
      (<World-Debug-Actions>     name: world-debug)
      (<World-Collision-Actions> name: world-collision)
      (<World-Anonymous-Actions> name: world-anonymous))))


;;;
;;;; Options
;;;


(class World-Options extends Component
  
  
  (form
    (<install>
      (<Options>    name: video
        (<Options>                  title: "Rendering"
          (<Option>                 title: "Sector size" setting: world.sector-size)
          (<Option>                 title: "View distance" setting: world.view-distance)
          (<Option>                 title: "Idle rendering" setting: world.idle-rendering)
          (<Option>                 title: "Buzy rendering" setting: world.buzy-rendering)
          (<Option>                 title: "Dynamic lights" setting: world.dynamic-lights)
          (<Option>                 title: "Post processing?" setting: world.post-processing?)
          (<Option>                 title: "Multisampling" setting: world.multisampling))
        (<Options>                  title: "Environment"
          (<Option>                 title: "Sun cycle?" setting: world.sun-cycle?)
          (<Option>                 title: "Fog?" setting: world.fog?)))
      (<Options>    name: audio
        (<Options>                  title: "Music"
          (<Option>                 title: "Music?" setting: world.music?))
        (<Options>                  title: "Sounds"
          (<Option>                 title: "Sounds?" setting: world.sounds?)
          (<Option>                 title: "Selection sounds?" setting: world.selection-sounds?)))
      (<Options>    name: interface
        (<Options>                  title: "General"
          (<Option>                 title: "Confirmation dialogs?" setting: world.confirmation-dialogs?))
        (<Options>                  title: "Camera"
          (<Option>                 title: "Move speed" setting: world.camera-move-speed)
          (<Option>                 title: "Strafe speed" setting: world.camera-strafe-speed)
          (<Option>                 title: "Rotate speed" setting: world.camera-rotate-speed))))))


;;;
;;;; Menubar
;;;


(class World-Menubar extends Menubar
  
  
  (method override (install rest)
    (nextmethod rest)
    (with-update-locked
      (lambda ()
        (new Label-Item parent: self name: 'file   content: (new File-Base-Menu))
        (new Label-Item parent: self name: 'edit   content: (new Edit-Base-Menu))
        (new Label-Item parent: self name: 'window content: (new Window-Menu))
        (new Label-Item parent: self name: 'help   content: (new Help-Menu))))))


;;;
;;;; Help-Menu
;;;


(class Help-Menu extends Menu
  
  
  (form
    (<install>          title: "Help"
      (<Label-Item>     title: "About World..." icon: {Image-Resource "About"} action-handler: {Action application about}))))


;;;
;;;; Toolbar
;;;


(class World-Toolbar extends Toolbar


  (form
    (<install>
      (<Action-Icon> name: new        tooltip-text: "New" resource: {Image-Resource "New"} action-handler: {Action application new})
      (<Action-Icon> name: open       tooltip-text: "Open..." resource: {Image-Resource "Open"} action-handler: {Action application open})
      (<Separator>)
      (<Action-Icon> name: cut        tooltip-text: "Cut" resource: {Image-Resource "Cut"} action-handler: {Action view cut})
      (<Action-Icon> name: copy       tooltip-text: "Copy" resource: {Image-Resource "Copy"} action-handler: {Action view copy})
      (<Action-Icon> name: paste      tooltip-text: "Paste" resource: {Image-Resource "Paste"} action-handler: {Action view paste})
      (<Separator>)
      (<Action-Icon> name: undo       tooltip-text: "Undo" resource: {Image-Resource "Undo"} action-handler: {Action view undo})
      (<Action-Icon> name: redo       tooltip-text: "Redo" resource: {Image-Resource "Redo"} action-handler: {Action view redo})
      (<Separator>                    location: tail size: {Dimension 1 0}))))


;;;
;;;; Status
;;;


(class World-Status extends Status-Toolbar


  (form
    (<install>
      (<Status-Label> name: message size: {Dimension 782 20} location: center)))))
