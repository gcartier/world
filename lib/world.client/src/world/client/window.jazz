;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Client
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is WorldScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2014
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See http://github.com/gcartier/world for details.


(module world.client.window jazz


(import (jazz.platform)
        (jazz.platform.windows (cond windows))
        (jazz.system)
        (jazz.system.application)
        (jazz.ui.window)
        (world)
        (world.syntax (phase syntax))
        (world.window))


(cond-expand
  (windows
    (definition current-state      'restored)
    (definition previous-placement #f)
    
    
    (definition public (determine-toplevel)
      (if (is? (get-process) Application)
          (get-handle~ (current-world-window))
        (GetConsoleWindow)))
    
    
    (definition public (position-world-window rect)
      (let ((handle (determine-toplevel)))
        (when (eq? current-state 'restored)
          (set! previous-placement (get-window-placement handle)))
        (set-style handle (bitwise-ior WS_CLIPSIBLINGS
                                       WS_CLIPCHILDREN
                                       WS_POPUP))
        (let ((left (get-left~ rect))
              (top (get-top~ rect))
              (right (get-right~ rect))
              (bottom (get-bottom~ rect)))
          (SetWindowPos handle HWND_TOP
            left
            top
            (- right left)
            (- bottom top)
            (bitwise-ior SWP_NOOWNERZORDER SWP_FRAMECHANGED)))
        (show-window handle))
      (set! current-state 'tiled))
    
    
    (definition public (restore-world-window)
      (let ((handle (determine-toplevel)))
        (set-style handle
                   (bitwise-ior WS_CLIPSIBLINGS
                                WS_CLIPCHILDREN
                                WS_POPUP
                                WS_OVERLAPPEDWINDOW
                                WS_MINIMIZEBOX
                                WS_SYSMENU))
        (if previous-placement
            (set-window-placement handle previous-placement)
          (show-window handle)))
      (set! current-state 'restored)))
  (else
    (definition public (determine-toplevel)
      )
    
    
    (definition public (position-world-window rect)
      )
    
    
    (definition public (restore-world-window)
      ))))
