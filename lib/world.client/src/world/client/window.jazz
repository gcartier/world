;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; World Client
;;;


(module world.client.window jazz


(import (jazz.designer)
        (jazz.graphic)
        (jazz.graphic.opengl.glew)
        (jazz.io)
        (jazz.jml)
        (jazz.library)
        (jazz.library.component)
        (jazz.platform)
        (jazz.platform.windows)
        (jazz.system)
        (jazz.system.application)
        (jazz.ui.window)
        (world)
        (world.geometry)
        (world.io)
        (world.object)
        (world.texture)
        (world.window))


(definition current-state      'restored)
(definition previous-placement #f)


(definition public (determine-toplevel)
  (if (is? (get-process) Application)
      (get-handle~ world-window)
    (GetConsoleWindow)))


(definition public (position-world-window rect)
  (let ((handle (determine-toplevel)))
    (when (eq? current-state 'restored)
      (set! previous-placement (get-window-placement handle)))
    (set-style handle (bitwise-ior WS_CLIPSIBLINGS
                                   WS_CLIPCHILDREN
                                   WS_POPUP))
    (let ((left (get-left~ rect))
          (top (get-top~ rect))
          (right (get-right~ rect))
          (bottom (get-bottom~ rect)))
      (SetWindowPos handle HWND_TOP
        left
        top
        (- right left)
        (- bottom top)
        (bitwise-ior SWP_NOOWNERZORDER SWP_FRAMECHANGED)))
    (show-window handle))
  (set! current-state 'tiled))


(definition public (restore-world-window)
  (let ((handle (determine-toplevel)))
    (set-style handle
               (bitwise-ior WS_CLIPSIBLINGS
                            WS_CLIPCHILDREN
                            WS_POPUP
                            WS_OVERLAPPEDWINDOW
                            WS_MINIMIZEBOX
                            WS_SYSMENU))
    (if previous-placement
        (set-window-placement handle previous-placement)
      (show-window handle)))
  (set! current-state 'restored)))
