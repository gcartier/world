;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Client
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.client.window jazz


(import (jazz.application)
        (jazz.platform)
        (jazz.platform.windows (cond windows))
        (jazz.window))


(cond-expand
  (cocoa
    (definition public (position-world-window rect)
      (let ((handle (get-handle (current-toplevel))))
        (with-NSRect rect
          (lambda (rect)
            (platformEnterWindowed handle rect #f)))))
    
    
    (definition public (restore-world-window)
      (let ((handle (get-handle (current-toplevel))))
        (platformExitWindowed handle))))
  (windows
    (definition current-state      'restored)
    (definition previous-placement #f)
    
    
    (definition public (determine-toplevel)
      (if (is? (get-process) Application)
          (get-handle (current-window))
        (GetConsoleWindow)))
    
    
    (definition public (position-world-window rect)
      (let ((handle (determine-toplevel)))
        (when (eq? current-state 'restored)
          (set! previous-placement (get-window-placement handle)))
        (set-window-style handle (bitwise-ior WS_CLIPSIBLINGS
                                              WS_CLIPCHILDREN
                                              WS_POPUP))
        (let ((left (get-left rect))
              (top (get-top rect))
              (right (get-right rect))
              (bottom (get-bottom rect)))
          (SetWindowPos handle HWND_TOP
            left
            top
            (- right left)
            (- bottom top)
            (bitwise-ior SWP_NOOWNERZORDER SWP_FRAMECHANGED)))
        (show-window handle))
      (set! current-state 'tiled))
    
    
    (definition public (restore-world-window)
      (let ((handle (determine-toplevel)))
        (set-window-style handle
                          (bitwise-ior WS_CLIPSIBLINGS
                                       WS_CLIPCHILDREN
                                       WS_POPUP
                                       WS_OVERLAPPEDWINDOW
                                       WS_MINIMIZEBOX
                                       WS_SYSMENU))
        (if previous-placement
            (set-window-placement handle previous-placement)
          (show-window handle)))
      (set! current-state 'restored)))
  (else
    (definition public (position-world-window rect)
      )
    
    
    (definition public (restore-world-window)
      ))))
