;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; World Client
;;;


(module world.client.window jazz


(import (jazz.designer)
        (jazz.graphic)
        (jazz.graphic.opengl.glew)
        (jazz.io)
        (jazz.jml)
        (jazz.library)
        (jazz.library.component)
        (jazz.platform)
        (jazz.system)
        (jazz.ui.window)
        (world)
        (world.geometry)
        (world.io)
        (world.object)
        (world.texture)
        (world.window))


(definition current-state      'restored)
(definition previous-placement #f)


(definition public (select-default-world)
  (let ((default-world (get-setting 'world.default #f)))
    (cond ((not default-world)
           (new-world))
          ((is? default-world Directory)
           (let ((name (get-name~ default-world)))
             (open-world (new-file~ default-world (format "_{a}.world" name)))))
          (else
           (open-world default-world)))))


(definition public (tile-world-window mode)
  (when (eq? current-state 'restored)
    (set! previous-placement (get-placement~ world-window)))
  (let ((handle (get-handle~ world-window)))
    (set-style handle (bitwise-ior WS_CLIPSIBLINGS
                                   WS_CLIPCHILDREN
                                   WS_POPUP))
    (let ((area (get-display-area~ (primary-monitor))))
      (let ((left (get-left~ area))
            (top (get-top~ area))
            (right (get-right~ area))
            (bottom (get-bottom~ area)))
        (let ((width (- right left)))
          (let ((world-width (case mode
                               ((live) (fxround (percent width 45.5)))
                               ((design) (- width 300)))))
            (SetWindowPos handle HWND_TOP
              0
              0
              world-width
              (- bottom top)
              (bitwise-ior SWP_NOOWNERZORDER SWP_FRAMECHANGED))))))
    (show-window handle))
  (set! current-state 'tiled))


(definition public (restore-world-window)
  (let ((handle (get-handle~ world-window)))
    (set-style handle
               (bitwise-ior WS_CLIPSIBLINGS
                            WS_CLIPCHILDREN
                            WS_POPUP
                            WS_OVERLAPPEDWINDOW
                            WS_MINIMIZEBOX
                            WS_SYSMENU))
    (if previous-placement
        (set-placement~ world-window previous-placement)
      (show-window handle)))
  (set! current-state 'restored)))
