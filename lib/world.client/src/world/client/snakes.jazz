;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Snakes
;;;


(module world.client.snakes jazz


(import (jazz.graphic)
        (jazz.graphic.opengl)
        (jazz.graphic.opengl.platform)
        (jazz.io)
        (jazz.library)
        (jazz.literals)
        (jazz.media)
        (jazz.network)
        (jazz.platform)
        (jazz.platform.cairo)
        (jazz.runtime)
        (jazz.system)
        (jazz.ui)
        (jazz.ui.window)
        (time)
        (world)
        (world.client)
        (world.geometry)
        (world.object)
        (world.texture)
        (world.window))


(definition world-size
  20.0)


(class Snake extends World-Object
  
  
  (slot head)
  (slot direction)
  
  
  (method override (initialize world x y z direction color)
    (nextmethod world x y z)
    (set! head~self (add-segment x y z color))
    (set! direction~self direction))
  
  
  (method (add-segment x y z color)
    (add-object~ world (new Sphere world x y z radius: 0.5 slices: 4 stacks: 2 color: color)))
  
  
  (method (move)
    (let ((new-position (vertex+ (get-position~ head) direction)))
      (let ((new-head (add-segment (get-x~ new-position) (get-y~ new-position) (get-z~ new-position) (get-color~ head))))
        (set-color~ head {Color Blue})
        (set! head new-head))))
  
  
  (method (turn-left)
    (set! direction (rotate-upon (/ PI 2) (new Vertex 0.0 1.0 0.0) direction)))
  
  
  (method (turn-right)
    (set! direction (rotate-upon (- (/ PI 2)) (new Vertex 0.0 1.0 0.0) direction))))


(class Snakes-World extends World
  
  
  (slot snakes initialize '())
  (slot pulse  initialize #f)
  
  
  ;;;
  ;;;; Initialize
  ;;;
  
  
  (method override (initialize-world)
    (define (add-floor)
      (add-object (new Wall self 0.0 0.0 0.0 rotation: (new Vertex 90.0 0.0 0.0) scale-x: world-size scale-y: world-size color: {Color Red})))
    
    (define (add-walls)
      (add-object (new Wall self 0.0 2.5 (- world-size) scale-x: world-size scale-y: 2.5 color: {Color Red alpha: 0.5}))
      (add-object (new Wall self 0.0 2.5 world-size scale-x: world-size scale-y: 2.5 color: {Color Red alpha: 0.5}))
      (add-object (new Wall self (- world-size) 2.5 0.0 rotation: (new Vertex 0.0 90.0 0.0) scale-x: world-size scale-y: 2.5 color: {Color Red alpha: 0.5}))
      (add-object (new Wall self world-size 2.5 0.0 rotation: (new Vertex 0.0 90.0 0.0) scale-x: world-size scale-y: 2.5 color: {Color Red alpha: 0.5})))
    
    (define (add-snakes)
      (add-snake 3.0 0.5 2.0 (new Vertex 1.0 0.0 0.0) {Color Dark-Green})
      (add-snake -3.0 0.5 -4.0 (new Vertex 1.0 0.0 0.0) {Color Dark-Purple}))
    
    (define (add-snake x y z direction color)
      (let ((snake (new Snake self x y z direction color)))
        (add-object snake)
        (set! snakes (cons snake snakes))))
    
    (define (setup-eye)
      (set! eye (new Vertex 0.0 16.0 40.0))
      (set! eye-sight (new Vertex 0.0 0.0 -1.0))
      (set! right (new Vertex 1.0 0.0 0.0))
      (set! up (new Vertex 0.0 1.0 0.0))
      (rotate-vertical -0.5))
    
    (define (setup-pulse)
      (set! pulse (new Pulse 'tick 1.0 tick-world)))
    
    (nextmethod)
    (add-floor)
    ;(add-walls)
    (add-snakes)
    ;(add-axes)
    (setup-eye)
    (setup-pulse))
  
  
  (method override (destroy)
    (nextmethod)
    (when pulse
      (close~ pulse)
      (set! pulse #f)))
  
  
  (method (tick-world)
    (move-snakes))
  
  
  (method (move-snakes)
    (for-each move~ snakes))
  
  
  (method (turn-left)
    (for-each turn-left~ snakes))
  
  
  (method (turn-right)
    (for-each turn-right~ snakes))
  
  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method override (process-keys)
    (process-movement))
  
  
  (method override (key-down code)
    (ecase code
      ((VK_LEFT) (turn-left))
      ((VK_RIGHT) (turn-right))))
  
  
  (method override (key-press c)
    (case c
      ((#\return) (tick-world))
      ((#\9) (add-axes))
      ((#\0) (reset-world))
      ((#\b) (select-bubbles))
      ((#\B) (select-bubbles #t))
      ((#\k) (select-snakes))
      ((#\K) (select-snakes #t))
      ((#\t) (select-tree))
      ((#\T) (select-tree #t))
      ((#\m) (change-music))
      ((#\r) (reset-camera))
      ((#\z) (toggle-interface))
      ((#\-) (toggle-fps))
      ((#\h) (toggle-polygon-mode))
      ((#\l) (toggle-lighting))
      ((#\f) (toggle-fullscreen))))))
