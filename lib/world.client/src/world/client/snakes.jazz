;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Snakes
;;;


(module world.client.snakes jazz


(import (jazz.geometry)
        (jazz.graphic)
        (jazz.graphic.opengl.glew)
        (jazz.io)
        (jazz.library)
        (jazz.literals)
        (jazz.media)
        (jazz.network)
        (jazz.platform)
        (jazz.platform.cairo)
        (jazz.runtime)
        (jazz.system)
        (jazz.ui)
        (jazz.ui.window)
        (time)
        (world)
        (world.autoload)
        (world.geometry)
        (world.object)
        (world.texture)
        (world.window)
        (world.client.window))


(definition world-size
  20.0)


(class Snake extends World-Object
  
  
  (property color     <object> accessors generate)
  (property direction <object> accessors generate)
  
  
  (slot head <object>)
  
  
  (method override (finish rest)
    (nextmethod rest)
    (set! head~self (add-segment x y z color)))
  
  
  (method (add-segment x y z color)
    (add-object~ world (new Sphere world x y z radius: 0.5 slices: 4 stacks: 2 color: color)))
  
  
  (method (move)
    (let ((new-position (vertex+ (get-position~ head) direction)))
      (let ((new-head (add-segment (vertex-x new-position) (vertex-y new-position) (vertex-z new-position) (get-color~ head))))
        (set-color~ head {Color Blue})
        (set! head new-head))))
  
  
  (method (turn-left)
    (set! direction (rotate-upon (/ PI 2) (vertex 0.0 1.0 0.0) direction)))
  
  
  (method (turn-right)
    (set! direction (rotate-upon (- (/ PI 2)) (vertex 0.0 1.0 0.0) direction))))


(class Snakes-World extends World
  
  
  (slot snakes <list>   initialize '())
  (slot pulse  <object> initialize #f)
  
  
  ;;;
  ;;;; Initialize
  ;;;
  
  
  (method override (initialize-world)
    (define (add-floor)
      (add-object (new Wall self 0.0 0.0 0.0 rotation: (vertex 90.0 0.0 0.0) scale-x: world-size scale-y: world-size color: {Color Red})))
    
    (define (add-walls)
      (add-object (new Wall self 0.0 2.5 (- world-size) scale-x: world-size scale-y: 2.5 color: {Color Red alpha: 0.5}))
      (add-object (new Wall self 0.0 2.5 world-size scale-x: world-size scale-y: 2.5 color: {Color Red alpha: 0.5}))
      (add-object (new Wall self (- world-size) 2.5 0.0 rotation: (vertex 0.0 90.0 0.0) scale-x: world-size scale-y: 2.5 color: {Color Red alpha: 0.5}))
      (add-object (new Wall self world-size 2.5 0.0 rotation: (vertex 0.0 90.0 0.0) scale-x: world-size scale-y: 2.5 color: {Color Red alpha: 0.5})))
    
    (define (add-snakes)
      (add-snake 3.0 0.5 2.0 (vertex 1.0 0.0 0.0) {Color Dark-Green})
      (add-snake -3.0 0.5 -4.0 (vertex 1.0 0.0 0.0) {Color Dark-Purple}))
    
    (define (add-snake x y z direction color)
      (let ((snake (new Snake self x y z direction color)))
        (add-object snake)
        (set! snakes (cons snake snakes))))
    
    (define (setup-eye)
      (vertex-init! eye 0.0 16.0 40.0)
      (standardize!~ eye-lookat)
      (rotate-vertical -0.5))
    
    (define (setup-pulse)
      (set! pulse (new Pulse 'tick 1.0 tick-snakes)))
    
    (nextmethod)
    (add-floor)
    ;(add-walls)
    (add-snakes)
    ;(add-axes)
    (setup-eye)
    (setup-pulse))
  
  
  (method override (destroy)
    (nextmethod)
    (when pulse
      (close~ pulse)
      (set! pulse #f)))
  
  
  (method (tick-snakes)
    (unless (is-inactive?)
      (move-snakes)))
  
  
  (method (move-snakes)
    (for-each move~ snakes))
  
  
  (method (turn-left)
    (for-each turn-left~ snakes))
  
  
  (method (turn-right)
    (for-each turn-right~ snakes))
  
  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method override (process-keys)
    (let ((evt (make-event Keyboard-Event :char self)))
      (process-movement evt)))
  
  
  (method override (key-down code)
    (ecase code
      ((VK_LEFT) (turn-left))
      ((VK_RIGHT) (turn-right))))
  
  
  (method override (key-press c)
    (case c
      ((#\return) (tick-world))
      ((#\m) (change-music))
      ((#\z) (toggle-interface))
      ((#\y) (toggle-polygon-mode))
      ((#\l) (toggle-lighting))
      ((#\f) (toggle-fullscreen))))))
