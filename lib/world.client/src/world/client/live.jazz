;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Live
;;;


(module world.client.live jazz


(import (jazz.geometry)
        (jazz.graphic)
        (jazz.graphic.opengl)
        (jazz.graphic.opengl.platform)
        (jazz.io)
        (jazz.library)
        (jazz.literals)
        (jazz.media)
        (jazz.network)
        (jazz.platform)
        (jazz.platform.cairo)
        (jazz.runtime)
        (jazz.system)
        (jazz.ui)
        (jazz.ui.window)
        (time)
        (world)
        (world.client)
        (world.geometry)
        (world.object)
        (world.texture)
        (world.window))


;;;
;;;; Sprite
;;;


(class Sprite extends World-Object
  
  
  (slot width   getter generate)
  (slot height  getter generate)
  (slot texture getter generate)
  (slot color   getter generate)
  (slot sx      getter generate)
  (slot sy      getter generate)
  (slot sz      getter generate)
  
  
  (method override (initialize world x y z width height texture (color #f) (sx 1.0) (sy 1.0) (sz 1.0))
    (nextmethod world x y z)
    (set! texture~self texture)
    (set! color~self color)
    (set! sx~self sx)
    (set! sy~self sy)
    (set! sz~self sz)
    (set! width~self width)
    (set! height~self height))
  
  
  (method override (print output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{a} {a} {a} {a}" x y width height))))
  
  
  (method public (get-left)
    x)
  
  
  (method public (get-right)
    (+ x width))
  
  
  (method public (get-bottom)
    y)
  
  
  (method public (get-top)
    (+ y height))
  
  
  (method override (draw)
    (let ((x1 (get-left))
          (y1 (get-top))
          (x2 (get-right))
          (y2 (get-bottom)))
      (gl-set-color color)
      (with-gl-begin/end GL_QUADS
        (lambda ()
          (gl-vertex2f x1 y1)
          (gl-vertex2f x2 y1)
          (gl-vertex2f x2 y2)
          (gl-vertex2f x1 y2)))
      (gl-set-color {Color red: 105 green: 61 blue: 1})
      (with-gl-begin/end GL_LINE_LOOP
        (lambda ()
          (gl-vertex2f x1 y1)
          (gl-vertex2f x2 y1)
          (gl-vertex2f x2 y2)
          (gl-vertex2f x1 y2)))))
  
  
  @w
  (method override (draw)
    (with-gl-matrix
      (lambda ()
        (gl-translate x y z)
        (gl-scale sx sy sz)
        (textured-quad~ texture
          (lambda () (gl-vertex 0.0 0.0 0.0))
          (lambda () (gl-vertex width 0.0 0.0))
          (lambda () (gl-vertex width height 0.0))
          (lambda () (gl-vertex 0.0 height 0.0))))))
  
  
  @w
  (method override (draw)
    (with-gl-matrix
      (lambda ()
        (gl-translate x y z)
        (gl-scale sx sy sz)
        (textured-quad~ texture
          (lambda () (gl-vertex 0.0 0.0 0.0))
          (lambda () (gl-vertex 5.0 0.0 0.0))
          (lambda () (gl-vertex 5.0 5.0 0.0))
          (lambda () (gl-vertex 0.0 5.0 0.0)))))))


;;;
;;;; Turtle
;;;


(class Turtle extends Sprite
  
  
  (slot vx initialize #f accessors generate)
  (slot vy initialize #f accessors generate)
  
  
  (method override (initialize . rest)
    (apply nextmethod rest)
    (set! vx .1))
  
  
  (method override (tick)
    (let ((gravity .01)
          (old-x x)
          (old-y y))
      (when vx
        (increase! x vx))
      (when vy
        (increase! y vy))
      (when (< y 0.)
        (set! y 0.))
      (when vy
        (decrease! vy gravity))
      (when (and vy (< vy -1.0))
        (set! vy -1.))
      (let ((hit (hit-test~ world self old-x old-y x y width height)))
        (when hit
          (bind (obj direction hit-x hit-y) hit
            (cond (hit-x (set! x (if (= direction -1) hit-x (- hit-x width)))
                         (if (= direction -1)
                             (set! vx .1)
                           (set! vx -.1)))
                  (hit-y (set! y (if (= direction -1) hit-y (- hit-y height)))))))))))


;;;
;;;; Player
;;;


(class Player-Sprite extends Sprite
  
  
  (slot vx       initialize #f    accessors generate)
  (slot vy       initialize 0.    accessors generate)
  (slot left?    initialize #f    accessors generate)
  (slot right?   initialize #f    accessors generate)
  (slot jump?    initialize #f    accessors generate)
  (slot jumping? initialize #f    accessors generate)
  (slot facing   initialize 'left accessors generate)
  
  
  (method override (tick)
    (let ((gravity .01)
          (old-x x)
          (old-y y))
      (when left?
        (set! left? #f)
        (increase! x -.1))
      (when right?
        (set! right? #f)
        (increase! x .1))
      (when jump?
        (set! jump? #f)
        (when (not jumping?)
          (set! jumping? #t)
          (set! vy .4)))
      
      (when vx
        (increase! x vx))
      (when vy
        (increase! y vy))
      (when vy
        (decrease! vy gravity))
      (when (and vy (< vy -1.0))
        (set! vy -1.))
      (let ((hit (hit-test~ world self old-x old-y x y width height)))
        (when hit
          (bind (obj direction hit-x hit-y) hit
            (cond (hit-x (set! x (if (= direction -1) hit-x (- hit-x width))))
                  (hit-y (set! y (if (= direction -1) hit-y (- hit-y height)))
                         (set! vy 0.)
                         (when (= direction -1)
                           (set! jumping? #f)))))))
      (when (< y -6.)
        (set! jumping? #f)
        (set! x 0.0)
        (set! y 5.0))))
  
  
  (method (move-left)
    (set! left? #t))
  
  
  (method (move-right)
    (set! right? #t))
  
  
  (method (move-down)
    )
  
  
  (method (move-up)
    )
  
  
  (method (space)
    (set! jump? #t)))


;;;
;;;; World
;;;


(class Live-World extends World
  
  
  (slot player initialize #f getter generate)
  
  (slot pulse)
  
  
  ;;;
  ;;;; Initialize
  ;;;
  
  
  (method override (initialize-opengl)
    (nextmethod)
    (prepare-tick))
  
  
  ;;;
  ;;;; World
  ;;;
  
  
  (method override (initialize-world)
    (nextmethod)
    (let ((resources-dir (new Directory (tokenise-filename (repository-pathname (find-repository 'World) "world.client/resources")))))
      (set! player (add-object (new Player-Sprite self 0.0 5.0 5.0 2.5 4.8 (make-png-texture (new-file~ resources-dir "player/Idle.png")) {Color Red})))
      (add-object (new Turtle self 0.0 20.0 5.0 2. 2. (make-png-texture (new-file~ resources-dir "player/Idle.png")) {Color Green}))
      (loop (for n from -2 to 2)
            (add-object (new Sprite self (cast <fl> (* n 5)) 15.0 5.0 5.0 5.0 (make-png-texture (new-file~ resources-dir "tiles/BlockA1.png")) {Color red: 134 green: 82 blue: 1})))
      (add-object (new Sprite self -10. 20.0 5.0 5.0 5.0 (make-png-texture (new-file~ resources-dir "tiles/BlockA1.png")) {Color red: 134 green: 82 blue: 1}))
      (add-object (new Sprite self 10. 20.0 5.0 5.0 5.0 (make-png-texture (new-file~ resources-dir "tiles/BlockA1.png")) {Color red: 134 green: 82 blue: 1}))
      (add-object (new Sprite self 20.  4.0 5.0 5.0 5.0 (make-png-texture (new-file~ resources-dir "tiles/BlockA1.png")) {Color red: 134 green: 82 blue: 1}))
      (add-object (new Sprite self 28. 10.0 5.0 5.0 5.0 (make-png-texture (new-file~ resources-dir "tiles/BlockA1.png")) {Color red: 134 green: 82 blue: 1}))
      (add-object (new Sprite self 19.5 17.0 5.0 5.0 5.0 (make-png-texture (new-file~ resources-dir "tiles/BlockA1.png")) {Color red: 134 green: 82 blue: 1}))
      (loop (for n from -2 to 2)
            (add-object (new Sprite self (cast <fl> (* n 5)) 0.0 5.0 5.0 5.0 (make-png-texture (new-file~ resources-dir "tiles/BlockA1.png")) {Color red: 134 green: 82 blue: 1})))
      @w
      (add-object (new Sprite self -50.0 -30.0 -5.0 (make-png-texture (new-file~ resources-dir "background/Layer0_0.png")) 100. 100. 1.))))
  
  
  ;;;
  ;;;; Tick
  ;;;
  
  
  (method (prepare-tick)
    (set! pulse (new Pulse 'tick .01 tick-world)))
  
  
  (method (tick-world)
    (for-each tick~ objects))
  
  
  (method (move-left)
    (move-left~ player))
  
  
  (method (move-right)
    (move-right~ player))
  
  
  (method (move-down)
    (move-down~ player))
  
  
  (method (move-up)
    (move-up~ player))
  
  
  (method (space)
    (space~ player))
  
  
  ;;;
  ;;;; Hit
  ;;;
  
  
  (method (hit-test object from-left from-bottom to-left to-bottom width height)
    (continuation-capture
      (lambda (return)
        (let ((dx (sign (- to-left from-left)))
              (dy (sign (- to-bottom from-bottom)))
              (from-right (+ from-left width))
              (from-top (+ from-bottom height))
              (to-right (+ to-left width))
              (to-top (+ to-bottom height)))
          (case dy
            ;; going up
            ((1)
             (for-each (lambda (obj)
                         (let ((left (get-left~ obj))
                               (right (get-right~ obj))
                               (border (get-bottom~ obj)))
                           (when (and (not (or (<= to-right left)
                                               (>= to-left right)))
                                      (<= from-top border)
                                      (> to-top border))
                             (continuation-return return (list obj dy #f border)))))
                       objects))
            ;; going down
            ((-1)
             (for-each (lambda (obj)
                         (let ((left (get-left~ obj))
                               (right (get-right~ obj))
                               (border (get-top~ obj)))
                           (when (and (not (or (<= to-right left)
                                               (>= to-left right)))
                                      (>= from-bottom border)
                                      (< to-bottom border))
                             (continuation-return return (list obj dy #f border)))))
                       objects)))
          (case dx
            ;; going right
            ((1)
             (for-each (lambda (obj)
                         (let ((bottom (get-bottom~ obj))
                               (top (get-top~ obj))
                               (border (get-left~ obj)))
                           (when (and (not (or (<= to-top bottom)
                                               (>= to-bottom top)))
                                      (<= from-right border)
                                      (> to-right border))
                             (continuation-return return (list obj dx border #f)))))
                       objects))
            ;; going left
            ((-1)
             (for-each (lambda (obj)
                         (let ((bottom (get-bottom~ obj))
                               (top (get-top~ obj))
                               (border (get-right~ obj)))
                           (when (and (not (or (<= to-top bottom)
                                               (>= to-bottom top)))
                                      (>= from-left border)
                                      (< to-left border))
                             (continuation-return return (list obj dx border #f)))))
                       objects)))
          #f))))
  
  
  ;;;
  ;;;; Camera
  ;;;
  
  
  (method override (prepare-camera)
    (set! eye (new Vertex 0.0 15.0 40.0))
    (set! eye-sight (new Vertex 0.0 0.0 -1.0))
    (set! right (new Vertex 1.0 0.0 0.0))
    (set! up (new Vertex 0.0 1.0 0.0)))
  
  
  ;;;
  ;;;; Projection
  ;;;
  
  
  (method override (prepare-projection)
    (nextmethod)
    @w (
    (gl-matrix-mode GL_PROJECTION)
    (gl-load-identity)
    (let ((ratio (/ (cast <fl> width) (cast <fl> height))))
      (let ((cx -0.)
            (cy -0.)
            (w 20))
        (let ((h (/ w ratio)))
          (gl-ortho (- cx w) (+ cx w) (- cy h) (+ cy h) -50.0 50.0))))))
  
  
  ;;;
  ;;;; Draw
  ;;;
  
  
  (method override (draw-objects)
    (gl-disable GL_DEPTH_TEST)
    (nextmethod))
  
  
  ;;;
  ;;;; Interface
  ;;;
  
  
  (method override (draw-interface)
    (nextmethod))
  
  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method override (process-keys)
    (unless (key-down? (char->integer #\space))
      (process-movement))
    (when (eq? window (get-window-focus))
      (receive (shift? control? alt?) (modifiers-down)
        (when (key-down? VK_LEFT)
          (move-left))
        (when (key-down? VK_RIGHT)
          (move-right))
        (when (key-down? VK_DOWN)
          (move-down))
        (when (key-down? VK_UP)
          (move-up))
        (when (key-down? (char->integer #\space))
          (space)))))
  
  
  (method override (key-press c)
    (case c
      ((#\0) (reset-world))
      ((#\b) (select-bubbles))
      ((#\B) (select-bubbles #t))
      ((#\k) (select-snakes))
      ((#\K) (select-snakes #t))
      ((#\m) (change-music))
      ((#\r) (reset-camera))
      ((#\z) (toggle-interface))
      ((#\-) (toggle-fps))
      ((#\h) (toggle-polygon-mode))
      ((#\l) (toggle-lighting))
      ((#\f) (toggle-fullscreen))))))
