;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Live
;;;


(module world.client.live jazz


(import (jazz.geometry)
        (jazz.graphic)
        (jazz.graphic.opengl)
        (jazz.graphic.opengl.platform)
        (jazz.io)
        (jazz.library)
        (jazz.literals)
        (jazz.media)
        (jazz.network)
        (jazz.platform)
        (jazz.platform.cairo)
        (jazz.runtime)
        (jazz.system)
        (jazz.ui)
        (jazz.ui.window)
        (time)
        (world)
        (world.client)
        (world.geometry)
        (world.object)
        (world.texture)
        (world.window))


;;;
;;;; Turtle
;;;


;;;
;;;; Player
;;;


(class Player-Sprite extends Sprite
  
  
  (slot vx       initialize #f accessors generate)
  (slot vy       initialize #f accessors generate)
  (slot jumping? initialize #f accessors generate)
  (slot facing   initialize 'left accessors generate)
  
  
  (method override (tick)
    (let ((gravity .01)
          (hit (hit-test~ world self)))
      (when vx
        (increase! x vx))
      (when vy
        (increase! y vy))
      (when (< y 0.)
        (set! jumping? #f)
        (set! y 0.))
      (when vy
        (decrease! vy gravity))
      (when (and vy (< vy -1.0))
        (set! vy -1.))))
  
  
  (method (move-left)
    (increase! x -.1))
  
  
  (method (move-right)
    (increase! x .1))
  
  
  (method (move-down)
    (set! vx #f))
  
  
  (method (move-up)
    (set! vx #f))
  
  
  (method (space)
    (when (not jumping?)
      (set! jumping? #t)
      (set! vy .3))))


;;;
;;;; World
;;;


(class Live-World extends World
  
  
  (slot player initialize #f)
  
  (slot pulse)
  
  
  ;;;
  ;;;; Initialize
  ;;;
  
  
  (method override (initialize-opengl)
    (nextmethod)
    (prepare-tick))
  
  
  ;;;
  ;;;; World
  ;;;
  
  
  (method override (initialize-world)
    (nextmethod)
    (let ((resources-dir (new Directory (tokenise-filename (repository-pathname (find-repository 'World) "world.client/resources")))))
      ;(add-object (new Sprite self 0.0 0.0 5.0 (make-png-texture (new-file~ resources-dir "player/Idle.png"))))
      (set! player (add-object (new Player-Sprite self 0.0 0.0 5.0 (make-png-texture (new-file~ resources-dir "player/Idle.png")))))
      (loop (for n from -25 to 25)
            (add-object (new Sprite self (cast <fl> (* n 2.5)) 0.0 5.0 (make-png-texture (new-file~ resources-dir "tiles/BlockA1.png")) .5 .5)))
      @w
      (add-object (new Sprite self -50.0 -30.0 -5.0 (make-png-texture (new-file~ resources-dir "background/Layer0_0.png")) 100. 100. 1.))))
  
  
  ;;;
  ;;;; Tick
  ;;;
  
  
  (method (prepare-tick)
    (set! pulse (new Pulse 'tick .01 tick-world)))
  
  
  (method (tick-world)
    (for-each tick~ objects))
  
  
  (method (move-left)
    (move-left~ player))
  
  
  (method (move-right)
    (move-right~ player))
  
  
  (method (move-down)
    (move-down~ player))
  
  
  (method (move-up)
    (move-up~ player))
  
  
  (method (space)
    (space~ player))
  
  
  ;;;
  ;;;; Hit
  ;;;
  
  
  (method (hit-test object)
    #f)
  
  
  ;;;
  ;;;; Camera
  ;;;
  
  
  (method override (prepare-camera)
    (set! eye (new Vertex 0.0 15.0 40.0))
    (set! eye-sight (new Vertex 0.0 0.0 -1.0))
    (set! right (new Vertex 1.0 0.0 0.0))
    (set! up (new Vertex 0.0 1.0 0.0)))
  
  
  ;;;
  ;;;; Projection
  ;;;
  
  
  (method override (prepare-projection)
    (gl-matrix-mode GL_PROJECTION)
    (gl-load-identity)
    (let ((ratio (/ (cast <fl> width) (cast <fl> height))))
      (let ((cx -0.)
            (cy -0.)
            (w 20))
        (let ((h (/ w ratio)))
          (gl-ortho (- cx w) (+ cx w) (- cy h) (+ cy h) -50.0 50.0)))))
  
  
  ;;;
  ;;;; Draw
  ;;;
  
  
  (method override (draw-objects)
    (gl-disable GL_DEPTH_TEST)
    (nextmethod))
  
  
  ;;;
  ;;;; Interface
  ;;;
  
  
  (method override (draw-interface)
    (nextmethod))
  
  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method override (process-keys)
    (unless (key-down? (char->integer #\space))
      (process-movement))
    (when (eq? window (get-window-focus))
      (receive (shift? control? alt?) (modifiers-down)
        (when (key-down? VK_LEFT)
          (move-left))
        (when (key-down? VK_RIGHT)
          (move-right))
        (when (key-down? VK_DOWN)
          (move-down))
        (when (key-down? VK_UP)
          (move-up))
        (when (key-down? (char->integer #\space))
          (space)))))
  
  
  (method override (key-press c)
    (case c
      ((#\0) (reset-world))
      ((#\b) (select-bubbles))
      ((#\B) (select-bubbles #t))
      ((#\k) (select-snakes))
      ((#\K) (select-snakes #t))
      ((#\m) (change-music))
      ((#\r) (reset-camera))
      ((#\z) (toggle-interface))
      ((#\-) (toggle-fps))
      ((#\h) (toggle-polygon-mode))
      ((#\l) (toggle-lighting))
      ((#\f) (toggle-fullscreen))))))
