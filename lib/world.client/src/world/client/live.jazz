;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Live
;;;


(module world.client.live jazz


(import (jazz.geometry)
        (jazz.graphic)
        (jazz.graphic.opengl)
        (jazz.graphic.opengl.platform)
        (jazz.io)
        (jazz.library)
        (jazz.literals)
        (jazz.media)
        (jazz.network)
        (jazz.platform)
        (jazz.platform.cairo)
        (jazz.runtime)
        (jazz.system)
        (jazz.ui)
        (jazz.ui.window)
        (time)
        (world)
        (world.client)
        (world.geometry)
        (world.object)
        (world.texture)
        (world.window))


;; TODO
;; - Relate orthographic and perspective zooming
;; - Autoscroll of camera when going outside view
;; - World editor
;;   - Load / Save


;;;
;;;; Sprite
;;;


(class Sprite extends World-Object
  
  
  (slot width     getter generate)
  (slot height    getter generate)
  (slot depth     getter generate)
  (slot texture   accessors generate)
  (slot color     accessors generate)
  (slot user-data accessors generate)
  
  
  (method override (initialize world x y z width height texture (color: color #f) (user-data: user-data #f))
    (nextmethod world x y z)
    (set! width~self width)
    (set! height~self height)
    (set! depth~self 5.0)
    (set! texture~self texture)
    (set! color~self color)
    (set! user-data~self user-data))
  
  
  (method override (print output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{a} {a} {a} {a}" x y width height))))
  
  
  (method public (get-left)
    x)
  
  
  (method public (get-right)
    (+ x width))
  
  
  (method public (get-bottom)
    y)
  
  
  (method public (get-top)
    (+ y height))
  
  
  (method public (get-far)
    z)
  
  
  (method public (get-near)
    (+ z depth))
  
  
  (method override (draw)
    (if (get-3d?~ world)
        (if (get-textures?~ world)
            (draw-3d-textured)
          (draw-3d))
      (if (get-textures?~ world)
          (draw-2d-textured)
        (draw-2d))))
  
  
  ;; from Cube
  (method (draw-3d)
    (with-gl-matrix
      (lambda ()
        (gl-rotate rtri 1.0 1.0 1.0)
        (gl-scale 1.0 1.0 1.0)
        (gl-set-color color)
        (let ((scale 1.))
        (let ((x1 (* scale (get-left)))
              (x2 (* scale (get-right)))
              (y1 (* scale (get-bottom)))
              (y2 (* scale (get-top)))
              (z1 (* scale (get-far)))
              (z2 (* scale (get-near))))
          ;; top
          (gl-normal 0.0 1.0 0.0)
          (with-gl-begin/end GL_QUADS
            (lambda ()
              (gl-vertex x2 y2 z1)
              (gl-vertex x1 y2 z1)
              (gl-vertex x1 y2 z2)
              (gl-vertex x2 y2 z2)))
          ;; bottom
          (gl-normal 0.0 -1.0 0.0)
          (with-gl-begin/end GL_QUADS
            (lambda ()
              (gl-vertex x2 y1 z2)
              (gl-vertex x1 y1 z2)
              (gl-vertex x1 y1 z1)
              (gl-vertex x2 y1 z1)))
          ;; front
          (gl-normal 0.0 0.0 1.0)
          (with-gl-begin/end GL_QUADS
            (lambda ()
              (gl-vertex x1 y1 z2)
              (gl-vertex x2 y1 z2)
              (gl-vertex x2 y2 z2)
              (gl-vertex x1 y2 z2)))
          ;; back
          (gl-normal 0.0 0.0 -1.0)
          (with-gl-begin/end GL_QUADS
            (lambda ()
              (gl-vertex x2 y1 z1)
              (gl-vertex x1 y1 z1)
              (gl-vertex x1 y2 z1)
              (gl-vertex x2 y2 z1)))
          ;; left
          (gl-normal -1.0 0.0 0.0)
          (with-gl-begin/end GL_QUADS
            (lambda ()
              (gl-vertex x1 y2 z2)
              (gl-vertex x1 y2 z1)
              (gl-vertex x1 y1 z1)
              (gl-vertex x1 y1 z2)))
          ;; right
          (gl-normal 1.0 0.0 0.0)
          (with-gl-begin/end GL_QUADS
            (lambda ()
              (gl-vertex x2 y2 z1)
              (gl-vertex x2 y2 z2)
              (gl-vertex x2 y1 z2)
              (gl-vertex x2 y1 z1)))))))
    
    (when (get-animate?~ world)
      (increase! rtri 0.4)
      (decrease! rquad 0.3)))
  
  
  ;; from Cube
  (method (draw-3d-textured)
    (with-gl-matrix
      (lambda ()
        (gl-translate x y z)
        (gl-rotate rtri 1.0 1.0 1.0)
        (gl-scale 1.0 1.0 1.0)
        (let ((f -2.5)
              (t 2.5))
          ;; top
          (gl-normal 0.0 1.0 0.0)
          (textured-quad~ texture
            (lambda () (gl-vertex t t f))
            (lambda () (gl-vertex f t f))
            (lambda () (gl-vertex f t t))
            (lambda () (gl-vertex t t t)))
          ;; bottom
          (gl-normal 0.0 -1.0 0.0)
          (textured-quad~ texture
            (lambda () (gl-vertex t f t))
            (lambda () (gl-vertex f f t))
            (lambda () (gl-vertex f f f))
            (lambda () (gl-vertex t f f)))
          ;; front
          (gl-normal 0.0 0.0 1.0)
          (textured-quad~ texture
            (lambda () (gl-vertex f f t))
            (lambda () (gl-vertex t f t))
            (lambda () (gl-vertex t t t))
            (lambda () (gl-vertex f t t)))
          ;; back
          (gl-normal 0.0 0.0 -1.0)
          (textured-quad~ texture
            (lambda () (gl-vertex t f f))
            (lambda () (gl-vertex f f f))
            (lambda () (gl-vertex f t f))
            (lambda () (gl-vertex t t f)))
          ;; left
          (gl-normal -1.0 0.0 0.0)
          (textured-quad~ texture
            (lambda () (gl-vertex f t t))
            (lambda () (gl-vertex f t f))
            (lambda () (gl-vertex f f f))
            (lambda () (gl-vertex f f t)))
          ;; right
          (gl-normal 1.0 0.0 0.0)
          (textured-quad~ texture
            (lambda () (gl-vertex t t f))
            (lambda () (gl-vertex t t t))
            (lambda () (gl-vertex t f t))
            (lambda () (gl-vertex t f f))))))
    @rotate
    (when (get-animate?~ world)
      (increase! rtri 0.4)
      (decrease! rquad 0.3)))
  
  
  (method (draw-2d)
    (let ((x1 (get-left))
          (y1 (get-top))
          (x2 (get-right))
          (y2 (get-bottom)))
      (gl-normal 0.0 0.0 1.0)
      (gl-set-color color)
      (with-gl-begin/end GL_QUADS
        (lambda ()
          (gl-vertex2f x1 y1)
          (gl-vertex2f x2 y1)
          (gl-vertex2f x2 y2)
          (gl-vertex2f x1 y2)))
      (gl-set-color {Color red: 105 green: 61 blue: 1})
      (with-gl-begin/end GL_LINE_LOOP
        (lambda ()
          (gl-vertex2f x1 y1)
          (gl-vertex2f x2 y1)
          (gl-vertex2f x2 y2)
          (gl-vertex2f x1 y2)))))
  
  
  (method (draw-2d-textured)
    (with-gl-matrix
      (lambda ()
        (gl-translate x y z)
        (textured-quad~ texture
          (lambda () (gl-vertex 0.0 0.0 0.0))
          (lambda () (gl-vertex width 0.0 0.0))
          (lambda () (gl-vertex width height 0.0))
          (lambda () (gl-vertex 0.0 height 0.0))))))
  
  
  @w
  (method (draw-2d-textured)
    (with-gl-matrix
      (lambda ()
        (gl-translate x y z)
        (textured-quad~ texture
          (lambda () (gl-vertex 0.0 0.0 0.0))
          (lambda () (gl-vertex 5.0 0.0 0.0))
          (lambda () (gl-vertex 5.0 5.0 0.0))
          (lambda () (gl-vertex 0.0 5.0 0.0)))))))


;;;
;;;; Actor
;;;


(definition gravity
  .01)


(class Actor extends Sprite)


;;;
;;;; Turtle
;;;


(definition turtle-speed
  .1)


(class Turtle extends Actor
  
  
  (slot vx initialize 0. accessors generate)
  (slot vy initialize 0. accessors generate)
  
  
  (method override (initialize . rest)
    (apply nextmethod rest)
    (set! vx turtle-speed))
  
  
  (method override (tick)
    (define (character-hit obj)
      (when (eq? obj (get-character~ world))
        (lose~ world)))
    
    (let ((old-x x)
          (old-y y))
      (increase! x vx)
      (increase! y vy)
      (when (< y 0.)
        (set! y 0.))
      (decrease! vy gravity)
      (when (< vy -1.0)
        (set! vy -1.))
      (receive (hit-x hit-y) (hit-test~ world self old-x old-y x y width height)
        (when hit-x
          (bind (obj direction border reset) hit-x
            (character-hit obj)
            (set! x reset)
            (if (= direction -1)
                (set! vx .1)
              (set! vx -.1))))
        (when hit-y
          (bind (obj direction border reset) hit-y
            (character-hit obj)
            (set! y reset)))))))


;;;
;;;; Character
;;;


(definition character-speed
  .1)

(definition jump-impulsion
  .4)


(class Character extends Actor
  
  
  (slot vx       initialize 0.    accessors generate)
  (slot vy       initialize 0.    accessors generate)
  (slot left?    initialize #f    accessors generate)
  (slot right?   initialize #f    accessors generate)
  (slot jump?    initialize #f    accessors generate)
  (slot jumping? initialize #f    accessors generate)
  (slot facing   initialize 'left accessors generate)
  
  
  (method override (tick)
    (define (win-hit obj)
      (when (eq? (get-user-data~ obj) 'win)
        (win~ world)))
    
    (let ((old-x x)
          (old-y y))
      (when left?
        (set! left? #f)
        (decrease! x character-speed))
      (when right?
        (set! right? #f)
        (increase! x character-speed))
      (when jump?
        (set! jump? #f)
        (when (not jumping?)
          (set! jumping? #t)
          (set! vy jump-impulsion)))
      
      (increase! x vx)
      (increase! y vy)
      (decrease! vy gravity)
      (when (< vy -1.0)
        (set! vy -1.))
      (receive (hit-x hit-y) (hit-test~ world self old-x old-y x y width height)
        (when hit-x
          (bind (obj direction border reset) hit-x
            (win-hit obj)
            (set! x reset)))
        (when hit-y
          (bind (obj direction border reset) hit-y
            (win-hit obj)
            (set! y reset)
            (set! vy 0.)
            (when (= direction -1)
              (set! jumping? #f)))))
      (when (< y -6.)
        (lose~ world))))
  
  
  (method (move-left)
    (set! left? #t))
  
  
  (method (move-right)
    (set! right? #t))
  
  
  (method (move-down)
    )
  
  
  (method (move-up)
    )
  
  
  (method (space)
    (set! jump? #t))
  
  
  (method (lose)
    (set! jumping? #f)
    (set! x 0.0)
    (set! y 5.0)))


;;;
;;;; World
;;;


(class Live-World extends World
  
  
  (slot character  initialize #f            getter generate)
  (slot projection initialize 'orthographic getter generate)
  (slot 3d?        initialize #f            getter generate)
  (slot textures?  initialize #f            getter generate)
  
  (slot pulse)
  (slot paused?    initialize #f)
  (slot axes)
  
  
  ;;;
  ;;;; Initialize
  ;;;
  
  
  (method override (initialize-opengl)
    (nextmethod)
    (initialize-camera)
    (prepare-tick))
  
  
  ;;;
  ;;;; World
  ;;;
  
  
  (method override (initialize-world)
    (nextmethod)
    (let ((resources-dir (new Directory (tokenise-filename (repository-pathname (find-repository 'World) "world.client/resources")))))
      (set! axes (add-axes visible?: #f))
      (set! character (add-object (new Character self 0.0 5.0 5.0 2.5 4.8 (make-png-texture (new-file~ resources-dir "player/Idle.png")) color: {Color Red})))
      (add-object (new Turtle self 0.0 20.0 5.0 2. 2. (make-png-texture (new-file~ resources-dir "player/Idle.png")) color: {Color Green}))
      (loop (for n from -2 to 2)
            (add-object (new Sprite self (cast <fl> (* n 5)) 15.0 5.0 5.0 5.0 (make-png-texture (new-file~ resources-dir "tiles/BlockA1.png")) color: {Color red: 134 green: 82 blue: 1})))
      (add-object (new Sprite self -10. 20.0 5.0 5.0 5.0 (make-png-texture (new-file~ resources-dir "tiles/BlockA1.png")) color: {Color Light-Purple} user-data: 'win))
      (add-object (new Sprite self 10. 20.0 5.0 5.0 5.0 (make-png-texture (new-file~ resources-dir "tiles/BlockA1.png")) color: {Color red: 134 green: 82 blue: 1}))
      (add-object (new Sprite self 20.  4.0 5.0 5.0 5.0 (make-png-texture (new-file~ resources-dir "tiles/BlockA1.png")) color: {Color red: 134 green: 82 blue: 1}))
      (add-object (new Sprite self 28. 10.0 5.0 5.0 5.0 (make-png-texture (new-file~ resources-dir "tiles/BlockA1.png")) color: {Color red: 134 green: 82 blue: 1}))
      (add-object (new Sprite self 19.5 17.0 5.0 5.0 5.0 (make-png-texture (new-file~ resources-dir "tiles/BlockA1.png")) color: {Color red: 134 green: 82 blue: 1}))
      (loop (for n from -2 to 2)
            (add-object (new Sprite self (cast <fl> (* n 5)) 0.0 5.0 5.0 5.0 (make-png-texture (new-file~ resources-dir "tiles/BlockA1.png")) color: {Color red: 134 green: 82 blue: 1})))
      @w
      (add-object (new Sprite self -50.0 -30.0 -5.0 100. 100. (make-png-texture (new-file~ resources-dir "background/Layer0_0.png")) color: {Color Light-Blue}))))
  
  
  (method (iterate-sprites proc)
    (for-each (lambda (obj)
                (when (is? obj Sprite)
                  (proc obj)))
              objects))
  
  
  ;;;
  ;;;; Settings
  ;;;
    
  
  (method (toggle-3d)
    (set! 3d? (not 3d?)))

  
  (method (toggle-textures)
    (set! textures? (not textures?)))
  
  
  (method (toggle-paused)
    (set! paused? (not paused?))
    (set! animate? (not paused?)))
  
  
  (method (toggle-axes)
    (set-visible?~ axes (not (get-visible?~ axes))))
  
  
  ;;;
  ;;;; Tick
  ;;;
  
  
  (method (prepare-tick)
    (set! pulse (new Pulse 'tick .01 tick-world)))
  
  
  (method (tick-world)
    (unless paused?
      (iterate-sprites
        tick~)))
  
  
  (method (move-left)
    (move-left~ character))
  
  
  (method (move-right)
    (move-right~ character))
  
  
  (method (move-down)
    (move-down~ character))
  
  
  (method (move-up)
    (move-up~ character))
  
  
  (method (space)
    (space~ character))
  
  
  ;;;
  ;;;; Hit
  ;;;
  
  
  (method (hit-test object from-left from-bottom to-left to-bottom width height)
    (let ((dx (sign (- to-left from-left)))
          (dy (sign (- to-bottom from-bottom)))
          (from-right (+ from-left width))
          (from-top (+ from-bottom height))
          (to-right (+ to-left width))
          (to-top (+ to-bottom height)))
      (let ((hit-x
              (case dx
                ;; going right
                ((1)
                 (continuation-capture
                   (lambda (return)
                     (iterate-sprites
                       (lambda (obj)
                         (let ((bottom (get-bottom~ obj))
                               (top (get-top~ obj))
                               (border (get-left~ obj)))
                           (when (and (not (or (<= from-top bottom)
                                               (>= from-bottom top)))
                                      (<= from-right border)
                                      (> to-right border))
                             (continuation-return return (list obj dx border (- border width)))))))
                     #f)))
                ;; going left
                ((-1)
                 (continuation-capture
                   (lambda (return)
                     (iterate-sprites
                       (lambda (obj)
                         (let ((bottom (get-bottom~ obj))
                               (top (get-top~ obj))
                               (border (get-right~ obj)))
                           (when (and (not (or (<= from-top bottom)
                                               (>= from-bottom top)))
                                      (>= from-left border)
                                      (< to-left border))
                             (continuation-return return (list obj dx border border))))))
                     #f)))
                (else
                 #f)))
            (hit-y
              (case dy
                ;; going up
                ((1)
                 (continuation-capture
                   (lambda (return)
                     (iterate-sprites
                       (lambda (obj)
                         (let ((left (get-left~ obj))
                               (right (get-right~ obj))
                               (border (get-bottom~ obj)))
                           (when (and (not (or (<= from-right left)
                                               (>= from-left right)))
                                      (<= from-top border)
                                      (> to-top border))
                             (continuation-return return (list obj dy border (- border height)))))))
                     #f)))
                ;; going down
                ((-1)
                 (continuation-capture
                   (lambda (return)
                     (iterate-sprites
                       (lambda (obj)
                         (let ((left (get-left~ obj))
                               (right (get-right~ obj))
                               (border (get-top~ obj)))
                           (when (and (not (or (<= from-right left)
                                               (>= from-left right)))
                                      (>= from-bottom border)
                                      (< to-bottom border))
                             (continuation-return return (list obj dy border border))))))
                     #f)))
                (else
                 #f))))
        (values hit-x hit-y))))
  
  
  ;;;
  ;;;; Movement
  ;;;
  
  
  (method override (movement-speed)
    0.25)
  
  
  ;;;
  ;;;; Camera
  ;;;
  
  
  (slot zoom-factor)
  
  
  (method (initialize-camera)
    (set! zoom-factor 23.)
    (prepare-camera)
    (reset-camera))
  
  
  (method override (prepare-camera)
    (set! eye (new Vertex 0.0 15.0 40.0))
    (set! eye-sight (new Vertex 0.0 0.0 -1.0))
    (set! right (new Vertex 1.0 0.0 0.0))
    (set! up (new Vertex 0.0 1.0 0.0)))

  
  (method override (zoom-in)
    (if (eq? projection 'perspective)
        (nextmethod)
      (set! zoom-factor (* zoom-factor .75))))
  
  
  (method override (zoom-out)
    (if (eq? projection 'perspective)
        (nextmethod)
      (set! zoom-factor (/ zoom-factor .75))))
  
  
  (method override (zoom-speed)
    10.)
  
  
  ;;;
  ;;;; Projection
  ;;;
  
  
  (method override (prepare-projection)
    (let ((ratio (/ (cast <fl> width) (cast <fl> height))))
      (gl-matrix-mode GL_PROJECTION)
      (gl-load-identity)
      (case projection
        ((perspective)
         (glu-perspective 45.0 ratio 0.1 1000.0))
        ((orthographic)
         (let ((cx -0.)
               (cy -0.)
               (w zoom-factor))
           (let ((h (/ w ratio)))
             (gl-ortho (- cx w) (+ cx w) (- cy h) (+ cy h) -50.0 50.0)))))))
  
  
  (method (toggle-projection)
    (set! projection
          (case projection
            ((perspective) 'orthographic)
            ((orthographic) 'perspective))))
  
  
  ;;;
  ;;;; Draw
  ;;;
  
  
  (method override (draw-objects)
    (case projection
      ((perspective)
       (if 3d?
           (gl-enable GL_DEPTH_TEST)
         (gl-disable GL_DEPTH_TEST)))
      ((orthographic)
       (gl-disable GL_DEPTH_TEST)))
    (nextmethod))
  
  
  ;;;
  ;;;; Interface
  ;;;
  
  
  (method override (draw-interface)
    (nextmethod))
  
  
  ;;;
  ;;;; Win / Lose
  ;;;
  
  
  (method (win)
    (let ((block (find-if (lambda (obj)
                            (eq? (get-user-data~ obj) 'win))
                          objects)))
      (set-color~ block {Color Blue})))
  
  
  (method (lose)
    (sleep .5)
    (lose~ character))
  
  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method override (mouse-down h v)
    )
  
  
  (method override (process-keys)
    (unless (key-down? (char->integer #\space))
      (process-movement))
    (when (eq? window (get-window-focus))
      (receive (shift? control? alt?) (modifiers-down)
        (when (key-down? VK_LEFT)
          (move-left))
        (when (key-down? VK_RIGHT)
          (move-right))
        (when (key-down? VK_DOWN)
          (move-down))
        (when (key-down? VK_UP)
          (move-up))
        (when (key-down? (char->integer #\space))
          (space)))))
  
  
  (method override (key-press c)
    (case c
      ((#\0) (reset-world))
      ((#\1) (initialize-camera))
      ((#\3) (toggle-3d))
      ((#\b) (select-bubbles))
      ((#\B) (select-bubbles #t))
      ((#\k) (select-snakes))
      ((#\K) (select-snakes #t))
      ((#\m) (change-music))
      ((#\r) (reset-camera))
      ((#\z) (toggle-interface))
      ((#\-) (toggle-fps))
      ((#\=) (toggle-axes))
      ((#\h) (toggle-polygon-mode))
      ((#\l) (toggle-lighting))
      ((#\p) (toggle-paused))
      ((#\f) (toggle-fullscreen))
      ((#\v) (toggle-projection))
      ((#\t) (toggle-textures))))))
