;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; Client Boot
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.client.boot jazz


(require (world.colors)
         (world.fonts))

(import (jazz.application)
        (jazz.audio)
        (jazz.component)
        (jazz.debuggee)
        (jazz.io)
        (jazz.network)
        (jazz.platform)
        (jazz.platform.scale)
        (jazz.process)
        (jazz.screen)
        (jazz.settings)
        (jazz.window)
        (gaea.opengl.glew)
        (gaea.window)
        (world)
        (world.capabilities)
        (world.context)
        (world.fonts)
        (world.io)
        (world.settings)
        (world.support)
        (world.window)
        (world.work))


(definition protected (boot-client application-class process-class (world-class: world-class #f) (context: context #f))
  (cond ;; OpenGL version
        ((command-argument "glversion")
         (initialize-platform)
         (new Gaea-Window)
         (system-message (format "OpenGL {a}" (glGetString GL_VERSION))))
        ;; OpenGL extension
        ((command-argument "glextension")
         => (lambda (arg)
              (initialize-platform)
              (new Gaea-Window)
              (system-message (format "OpenGL extension {a}" (check-extension arg)))))
        ;; OpenGL information
        ((command-argument "glinformation")
         (initialize-platform)
         (new Gaea-Window)
         (system-message (let ((output (open-output-string)))
                           (describe-capabilities output)
                           (get-output-string output))))
        ;; Create server
        ((command-argument "create-server")
         (let ((server-name (string-argument "create-server"))
               (server-address (string-argument "server-address" "*"))
               (server-port (string-argument "server-port" (port->string default-server-service)))
               (name (string-argument "name" "Server"))
               (avatar (string-argument "avatar" "warcraft/character/dwarfmale")))
           (create-server-file server-name server-address server-port name avatar)
           (format :terminal "Server {a} created{%}" server-name)))
        ;; Create client
        ((command-argument "create-client")
         (let ((client-name (string-argument "create-client"))
               (server-address (string-argument "server-address" "localhost"))
               (server-port (string-argument "server-port" (port->string default-server-service)))
               (name (string-argument "name"))
               (avatar (string-argument "avatar" "warcraft/character/bloodelffemale"))
               (script (string-argument "script" #f)))
           (create-client-file client-name server-address server-port name avatar script)
           (format :terminal "Client {a} created{%}" client-name)))
        ;; Create clients
        ((command-argument "create-clients")
         (let ((client-prefix (string-argument "create-clients"))
               (count (integer-argument "count" 5))
               (server-address (string-argument "server-address" "localhost"))
               (server-port (string-argument "server-port" (port->string default-server-service)))
               (script (string-argument "script" #f)))
           ;; all these initializations are a quick hack to
           ;; have a working world needed to collect avatar models
           (set-window? #f)
           (register-world)
           (booting
             (lambda ()
               (open-world world-class: world-class)
               (open-welcome-zone)))
           (create-client-files client-prefix count server-address server-port script)
           (format :terminal "Clients {a}1..{a} created{%}" client-prefix count)))
        ;; Boot client
        (else
         (load-point 'boot)
         (set-window? (boolean-argument "window" #t))
         (when (window?)
           (set-application-scale (world-setting 'world.application-scale #f))
           (set-application-retina? (world-setting 'world.application-retina? #f))
           (initialize-platform))
         (when (window?)
           (set-cursor :wait)
           (set-audio? (world-setting 'world.audio? #t)))
         (initialize-aliases)
         (parameterize ((run-loop? #f))
           (register-world-fonts)
           (boot-environment (new (if (window?) application-class process-class)))
           (update-capabilities caps-settings)
           (add-capabilities-to-snapshot caps-settings)
           (load-point 'process)
           (set-texture-arrays? (world-setting 'world.texture-arrays? (glewIsSupported "GL_EXT_texture_array")))
           (set-arb-multisample? (world-setting 'world.arb-multisample? (glewIsSupported "GL_ARB_multisample")))
           (let ((window (and (window?) (current-toplevel))))
             (set-current-window window)
             (booting
               (lambda ()
                 (open-world world-class: world-class)
                 (open-welcome-zone)))
             (load-point 'world)
             (let ((context (world-setting 'world.context (or context :world))))
               (set-default-context (or (resolve-nickname context) context)))
             (when (window?)
               (cond-expand
                 (mac
                  (when window-fullscreen?
                    (set-fullscreen-windowed-mode window)))
                 (else))
               (let ((init (world-setting 'world.init-script #f)))
                 (when init
                   (execute-script (current-world) init synchronous?: #t)))
               (load-feedback-done)
               (set-visible? window #t)
               ;; on windows being launched from the installer
               ;; leaves together in a not front state I think
               (bring-to-front window)
               (select-foreground window)
               (set-window-cursor window :arrow)
               (load-point 'show))
             (load-total 'total)
             (run-loop (current-process))))))))
