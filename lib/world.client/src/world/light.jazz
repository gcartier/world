;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; World Lights
;;;


(module world.light jazz


(import (jazz.graphic)
        (jazz.graphic.opengl.glew)
        (world.draw)
        (world.shader)
        (world.foreign))


;;;
;;;; Light
;;;


(class Light extends Object
  
  
  (slot no    <object> initialize #f accessors generate)
  (slot x     <fl>     initialize #f accessors generate)
  (slot y     <fl>     initialize #f accessors generate)
  (slot z     <fl>     initialize #f accessors generate)
  (slot w     <fl>     initialize #f accessors generate)
  (slot color <object> initialize #f accessors generate)
  (slot red   <fl>     initialize #f accessors generate)
  (slot green <fl>     initialize #f accessors generate)
  (slot blue  <fl>     initialize #f accessors generate)
  (slot alpha <fl>     initialize #f accessors generate)
  
  
  (method override (initialize no x y z w color)
    (nextmethod)
    (set! no~self no)
    (set! x~self x)
    (set! y~self y)
    (set! z~self z)
    (set! w~self w)
    (set! color~self color)
    (set! red~self (get-red~ color))
    (set! green~self (get-green~ color))
    (set! blue~self (get-blue~ color))
    (set! alpha~self (get-alpha~ color)))
  
  
  (method override (print output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{r precision: 1} {r precision: 1} {r precision: 1}"
          x
          y
          z))))))
