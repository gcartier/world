;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; World Lights
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2013
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.light jazz


(import (jazz.jml)
        (jazz.graphic)
        (jazz.graphic.opengl.glew)
        (world)
        (world.autoload)
        (world.draw)
        (world.dye)
        (world.dyes)
        (world.element)
        (world.foreign)
        (world.gadget)
        (world.generate)
        (world.geometry)
        (world.material)
        (world.model)
        (world.models)
        (world.object)
        (world.serialization)
        (world.shader)
        (world.syntax (phase syntax)))


;;;
;;;; Light
;;;


(class Light extends Gadget
  
  
  (property constant-attenuation  <fl>     initialize 1.     accessors generate)
  (property linear-attenuation    <fl>     initialize 0.     accessors generate)
  (property quadratic-attenuation <fl>     initialize 0.0001 accessors generate)
  (property ambient-color         <object> initialize #f     accessors generate)
  (property dynamic?              <bool>   initialize #f     accessors generate)
  
  
  (method override (prepare rest)
    (nextmethod rest)
    (set-scaling .5)
    (set-model (light-model))
    (set-color white-dye)
    (set! ambient-color black-dye))
  
  
  (method protected virtual (light-model)
    'Light)
  
  
  (method override (print output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{a}" (present-vertex position)))))
  
  
  (method meta override (marshall-object obj)
    (serialize-object (class-of obj)
                      (vector
                        ;; component
                        (serialize (get-name~ obj))
                        (serialize (get-visible?~ obj))
                        ;; element
                        (serialize (get-position~ obj))
                        (serialize (get-scale~ obj))
                        (serialize (get-radiuses~ obj))
                        (serialize (get-radius~ obj))
                        (serialize (get-color~ obj))
                        (serialize (get-hit-behavior~ obj))
                        (serialize (get-user-data~ obj))
                        ;; entity
                        ;; gadget
                        ;; light
                        (serialize (get-constant-attenuation~ obj))
                        (serialize (get-linear-attenuation~ obj))
                        (serialize (get-quadratic-attenuation~ obj))
                        (serialize (get-ambient-color~ obj))
                        (serialize (get-dynamic?~ obj)))))
  
  
  (method meta override (unmarshall-object content)
    (bind-vector (;; component
                  name
                  visible?
                  ;; element
                  position
                  scale
                  radiuses
                  radius
                  color
                  hit-behavior
                  user-data
                  ;; entity
                  ;; gadget
                  ;; light
                  constant-attenuation
                  linear-attenuation
                  quadratic-attenuation
                  ambient-color
                  dynamic?)
        content
      (let ((obj (new self name: name visible?: visible?)))
        ;; element
        (set-position~ obj (deserialize position))
        (set-scale~ obj (deserialize scale))
        (set-radiuses~ obj (deserialize radiuses))
        (set-radius~ obj (deserialize radius))
        (set-color~ obj (deserialize color))
        (set-hit-behavior~ obj (deserialize hit-behavior))
        (set-user-data~ obj (deserialize user-data))
        ;; entity
        ;; gadget
        ;; light
        (set-constant-attenuation~ obj (deserialize constant-attenuation))
        (set-linear-attenuation~ obj (deserialize linear-attenuation))
        (set-quadratic-attenuation~ obj (deserialize quadratic-attenuation))
        (set-ambient-color~ obj (deserialize ambient-color))
        (set-dynamic?~ obj (deserialize dynamic?)))))
  
  
  (method public (get-diffuse-color)
    color)
  
  
  (method protected virtual (render-color)
    color))


;;;
;;;; Light-Point
;;;


(class Light-Point extends Light
  
  
  (method override (light-model)
    'Light-Point)
  
  
  (method override (render-color)
    (dye .4 .4 .4 1.)))


;;;
;;;; Light-Directional
;;;


(class Light-Directional extends Light
  
  
  (form
    (<install> quadratic-attenuation: 0. color: #f32(1. 1. 1. 1.) dynamic?: #t))
  
  
  (method override (light-model)
    'Light-Directional)
  
  
  (method override (render-color)
    (dye .7 .7 .7 1.)))


;;;
;;;; Light-Ambient
;;;


(class Light-Ambient extends Light
  
  
  (form
    (<install> quadratic-attenuation: 0. ambient-color: #f32(1. 1. 1. 1.) dynamic?: #t))
  
  
  (method override (light-model)
    'Light-Ambient)
  
  
  (method override (render-color)
    (dye 1. 1. 1. 1.))))
