;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; World Lights
;;;


(module world.light jazz


(import (jazz.jml)
        (jazz.graphic)
        (jazz.graphic.opengl.glew)
        (world)
        (world.draw)
        (world.gadget)
        (world.object)
        (world.shader)
        (world.foreign)
        (world.sprite))


;;;
;;;; Light
;;;


(class Light extends Gadget
  
  
  (property w <fl> initialize 1. accessors generate)
  
  (property constant-attenuation  <fl>       initialize 1.        accessors generate)
  (property linear-attenuation    <fl>       initialize 0.        accessors generate)
  (property quadratic-attenuation <fl>       initialize 0.0001    accessors generate)
  (property ambient-color         <object>   initialize #f        getter generate  setter explicit)
  
  (slot ambient-red      <fl>       initialize 0.    getter generate)
  (slot ambient-green    <fl>       initialize 0.    getter generate)
  (slot ambient-blue     <fl>       initialize 0.    getter generate)
  (slot ambient-alpha    <fl>       initialize 1.    getter generate)
  
  
  (method override (prepare rest)
    (nextmethod rest)
    (set! width 5.0)
    (set! height 5.0)
    (set! depth 5.0)
    (set! color {Color White})
    (set! ambient-color {Color Black})
    (set-visible? (get-draw-gadgets?~ world)))
  
  
  (method public (set-ambient-color col)
    (set! ambient-color col)
    (update-ambient-color))
  
  
  (method protected (update-ambient-color)
    (set! ambient-red (get-red~ ambient-color))
    (set! ambient-green (get-green~ ambient-color))
    (set! ambient-blue (get-blue~ ambient-color)))
  
  
  (method override (update-radius)
    (nextmethod)
    (set! radius 2.5))
  
  
  (method override (print output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{r precision: 1} {r precision: 1} {r precision: 1}"
          x
          y
          z))))
  
  
  (method (light-color)
    (new Color red: red green: green blue: blue alpha: alpha))
  
  
  (method override (draw)
    (draw-sphere x y z 2.5 26 52 (light-color))))


;;;
;;;; Light-Ambient
;;;


(class Light-Ambient extends Light
  
  
  (form
    (<install> quadratic-attenuation: 0. ambient-color: {Color White})))


;;;
;;;; Light-Sun
;;;


(class Light-Sun extends Light
  
  
  (form
    (<install> quadratic-attenuation: 0. color: {Color White}))))
