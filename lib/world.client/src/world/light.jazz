;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; World Lights
;;;


(module world.light jazz


(import (jazz.graphic)
        (jazz.graphic.opengl.glew)
        (world.draw)
        (world.object)
        (world.shader)
        (world.foreign)
        (world.sprite))


;;;
;;;; Light
;;;


(class Light extends Sprite
  
  
  (slot no <object> initialize #f accessors generate)
  (slot w  <fl>     initialize #f accessors generate)
  
  
  (method override (initialize world no x y z w . rest)
    (apply nextmethod world x y z rest)
    (set! no~self no)
    (set! w~self w))
  
  
  (method override (prepare)
    (nextmethod)
    (set! width 5.0)
    (set! height 5.0)
    (set! depth 5.0))
  
  
  (method override (update-radius)
    (nextmethod)
    (set! radius 2.5))
  
  
  (method override (print output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{r precision: 1} {r precision: 1} {r precision: 1}"
          x
          y
          z))))
  
  
  (method (light-color)
    (new Color red: red green: green blue: blue alpha: alpha))
  
  
  (method override (draw)
    (let ((color (if (eq? self (get-target~ world))
                     {Color Red}
                   (light-color))))
      (draw-sphere x y z 5. 26 52 color)))
  
  
  (method override (serialize-sprite)
    (list 'light x y z))))
