;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; World Lights
;;;


(module world.light jazz


(import (jazz.jml)
        (jazz.graphic)
        (jazz.graphic.opengl.glew)
        (world)
        (world.draw)
        (world.dye)
        (world.element)
        (world.foreign)
        (world.gadget)
        (world.generate)
        (world.geometry)
        (world.material)
        (world.model)
        (world.object)
        (world.shader))


;;;
;;;; Light
;;;


(class Light extends Gadget
  
  
  (property w                     <fl>     initialize 1.     accessors generate)
  (property constant-attenuation  <fl>     initialize 1.     accessors generate)
  (property linear-attenuation    <fl>     initialize 0.     accessors generate)
  (property quadratic-attenuation <fl>     initialize 0.0001 accessors generate)
  (property ambient-color         <object> initialize #f     accessors generate)
  (property dynamic?              <bool>   initialize #f     accessors generate)
  
  
  (method override (prepare rest)
    (nextmethod rest)
    (set! width 5.0)
    (set! height 5.0)
    (set! depth 5.0)
    (set! radius 2.5)
    (set! color {Color White})
    (set! ambient-color (dye 0. 0. 0. 1.))
    (set-visible? (get-draw-gadgets?~ world)))
  
  
  (method override (finish rest)
    (nextmethod rest)
    (let ((material (new Material texture: (find-texture~ world "dirty.png"))))
      (set! model (new Model mesh: (generate-sphere 48 24 material: material)))
      (update-matrix)))
  
  
  (method override (print output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{r precision: 1} {r precision: 1} {r precision: 1}"
          x
          y
          z))))
  
  
  (method override (update-radius)
    (set! radius-x radius)
    (set! radius-y radius)
    (set! radius-z radius))
  
  
  (method public (get-diffuse-color)
    (dye red green blue alpha))
  
  
  (method (light-color)
    (new Color red: red green: green blue: blue alpha: alpha))
  
  
  (method override (entity-program)
    'color)
  
  
  (method override (entity-bind-uniforms program mesh matrix)
    (bind-uniforms~ program mesh matrix color)))


;;;
;;;; Light-Point
;;;


(class Light-Point extends Light)


;;;
;;;; Light-Ambient
;;;


(class Light-Ambient extends Light
  
  
  (form
    (<install> quadratic-attenuation: 0. ambient-color: #f32(1. 1. 1. 1.) dynamic?: #t)))


;;;
;;;; Light-Directional
;;;


(class Light-Directional extends Light
  
  
  (form
    (<install> quadratic-attenuation: 0. color: {Color White} dynamic?: #t))))
