;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; World Base
;;;


(module world.base jazz


(import (jazz.geometry)
        (jazz.graphic)
        (jazz.graphic.opengl.autoload)
        (jazz.graphic.opengl.glew)
        (jazz.io)
        (jazz.library)
        (jazz.literals)
        (jazz.media)
        (jazz.network)
        (jazz.platform)
        (jazz.platform.cairo)
        (jazz.runtime)
        (jazz.system)
        (jazz.ui)
        (jazz.ui.window)
        (time)
        (world)
        (world.client.window)
        (world.draw)
        (world.geometry)
        (world.object)
        (world.texture))


(class World extends Component
  
  
  (slot window          <OpenGL-Window> initialize #f            accessors generate)
  (slot width           <fl>            initialize #f            accessors generate)
  (slot height          <fl>            initialize #f            accessors generate)
  (slot boundaries      <Cuboid+>       initialize #f            getter generate)
  (slot objects         <list>          initialize '()           getter generate)
  (slot eye             <f32vector>     initialize (make-vertex) getter generate)
  (slot eye-lookat      <LookAt>        initialize (make-lookat) getter generate)
  (slot eye-target      <f32vector>     initialize (make-vertex) getter generate)
  (slot world-up        <f32vector>     initialize (make-vertex) getter generate)
  (slot animate?        <bool>          initialize #t            getter generate)
  (slot light?          <bool>          initialize #t            getter generate)
  (slot mode            <symbol>        initialize 'explore      getter generate)
  (slot what            <object>        initialize #f            getter generate)
  (slot target          <object>        initialize #f            getter generate)
  (slot last-point      <object>        initialize #f            getter generate)
  (slot last-time       <object>        initialize #f            getter generate)
  (slot last-recenter   <object>        initialize #f            getter generate)
  (slot camera-distance <fl>            initialize 60.           getter generate)
  (slot polygon-mode    <fx>            initialize GL_FILL       getter generate)
  (slot fps             <object>        initialize #f            getter generate)
  (slot fps?            <bool>          initialize #f            getter generate)
  (slot interface?      <bool>          initialize #t            getter generate)
  (slot music?          <bool>          initialize #f            getter generate)
  (slot test            <object>        initialize #f            getter generate)
  
  
  (method override (prepare rest)
    (nextmethod rest)
    (set-world self))
  
  
  (method override (finish rest)
    (nextmethod rest)
    (prepare-camera)
    (update-camera)
    (vertex-init! world-up 0. 1. 0.)
    (when music?
      (change-music)))
  
  
  (method override (destroy)
    (nextmethod)
    (close-music "ambiance"))
  
  
  ;;;
  ;;;; World
  ;;;
  
  
  (method (is-active?)
    (eq? self world))
  
  
  (method (is-inactive?)
    (not (is-active?)))
  
  
  ;;;
  ;;;; Window
  ;;;
  
  
  (method protected virtual (setup-opengl)
    (let ((size (get-size~ window)))
      (set! width (cast <fl> (get-width~ size)))
      (set! height (cast <fl> (get-height~ size))))
    (glPolygonMode GL_FRONT GL_FILL)
    (glMatrixMode GL_MODELVIEW)
    (glEnable GL_NORMALIZE)
    (glEnable GL_LINE_SMOOTH))
  
  
  (method protected virtual (initialize-world)
    (set! fps (new FPS parent: self x: 0.0 y: 0.0 z: 0.0))
    (set! test (make-cairo-texture 200 200)))
  
  
  (method protected virtual (resize-scene)
    )
  
  
  (method (add-object object)
    (set! objects (cons object objects))
    object)
  
  
  (method protected virtual (render-world)
    (process-keys)
    (prepare-world)
    (setup-camera)
    (setup-lighting)
    (update-fps~ fps)
    (glEnable GL_DEPTH_TEST)
    (draw-world)
    (render-interface))
  
  
  (method protected virtual (prepare-world)
    (glClear (bitwise-ior GL_COLOR_BUFFER_BIT GL_DEPTH_BUFFER_BIT))
    (prepare-projection)
    (glMatrixMode GL_MODELVIEW)
    (glLoadIdentity)
    (glDisable GL_LIGHTING)
    (glDisable GL_LIGHT0)
    (glDisable GL_LIGHT1)
    (glEnable GL_BLEND)
    (glBlendFunc GL_SRC_ALPHA GL_ONE_MINUS_SRC_ALPHA))
  
  
  (method protected virtual (prepare-projection)
    (glMatrixMode GL_PROJECTION)
    (glLoadIdentity)
    (let ((ratio (/ width height)))
      (gluPerspective 45.0 ratio 0.1 100.0)))
  
  
  (method (change-music)
    (set! music? #t)
    (let ((music-dir {Directory Settings "resources" "music"}))
      (when (exists?~ music-dir)
        (let ((music-list (get-content~ music-dir nodes?: #f)))
          (let ((music (random-element music-list)))
            (play-music-file music "ambiance"))))))
  
  
  (method (setup-camera)
    (let ((up (get-up~ eye-lookat)))
      (gluLookAt
        (vertex-x eye) (vertex-y eye) (vertex-z eye)
        (vertex-x eye-target) (vertex-y eye-target) (vertex-z eye-target)
        (vertex-x up) (vertex-y up) (vertex-z up))))
  
  
  (method protected virtual (setup-lighting)
    (when light?
      (glEnable GL_LIGHTING)
      (glEnable GL_LIGHT0)
      (glEnable GL_LIGHT1)
      (let ((specular .3))
        (gl-material-specular GL_FRONT specular specular specular 1.0)
        (gl-material-shininess GL_FRONT 50.0))
      (let ((ambient .7))
        (gl-light-model GL_LIGHT_MODEL_AMBIENT ambient ambient ambient 1.0))
      (let ((intensity .5))
        ;; positioned light
        (gl-light GL_LIGHT0 GL_DIFFUSE intensity intensity intensity 1.0)
        (gl-light GL_LIGHT0 GL_POSITION 4.0 0.0 8.0 1.0)
        ;; directed light
        (gl-light GL_LIGHT1 GL_DIFFUSE intensity intensity intensity 1.0)
        (gl-light GL_LIGHT1 GL_POSITION -1.0 0.5 0.5 0.0))))
  
  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method protected virtual (process-keys)
    )
  
  
  (method protected virtual (key-down c)
    )
  
  
  (method protected virtual (key-press c)
    )
  
  
  (method protected virtual (process-shortcut shortcut)
    #f)
  
  
  (method (process-movement evt (allow-space?: allow-space? #t))
    (when (eq? window (get-window-focus))
      (let ((shift? (get-shift?~ evt))
            (control? (get-control?~ evt))
            (alt? (get-alt?~ evt)))
        (unless (or shift? control? alt?)
          (when (key-down? (char->integer #\W))
            (move-forward))
          (when (key-down? (char->integer #\S))
            (move-backward))
          (when (key-down? (char->integer #\Q))
            (strafe-left))
          (when (key-down? (char->integer #\E))
            (strafe-right))
          (when (or (key-down? (char->integer #\R))
                    (and allow-space? (key-down? (char->integer #\space))))
            (strafe-up))
          (when (key-down? (char->integer #\X))
            (strafe-down))
          (when (key-down? (char->integer #\A))
            (rotate-left))
          (when (key-down? (char->integer #\D))
            (rotate-right))))))
  
  
  ;;;
  ;;;; Music
  ;;;
  
  
  (method (play-music-file file name)
    (when (exists?~ file)
      (close-music name)
      (open-music file name)
      (play-music name)))
  
  
  ;;;
  ;;;; Draw
  ;;;
  
  
  (method protected virtual (draw-world)
    (for-each (lambda (object)
                (when (get-visible?~ object)
                  (draw~ object)))
              objects))
  
  
  (method (render-interface)
    (when (or interface? fps?)
      (glDisable GL_LIGHTING)
      (glMatrixMode GL_MODELVIEW)
      (glLoadIdentity)
      (glMatrixMode GL_PROJECTION)
      (glEnable GL_BLEND)
      (glBlendFunc GL_SRC_ALPHA GL_ONE_MINUS_SRC_ALPHA)
      (glPushMatrix)
      (glLoadIdentity)
      (glOrtho 0.0 width 0.0 height -10.0 10.0)
      (when interface?
        (draw-interface)
         @test (
               (glColor3f 1.0 0.0 0.0)
               (let ((surface (get-surface~ test)))
                 (set-operator~ surface CAIRO_OPERATOR_CLEAR)
                 (paint~ surface)
                 (set-operator~ surface CAIRO_OPERATOR_SOURCE)
                 (let ((color {Color Red alpha: 0.5}))
                   (ellipse~ surface {Rect 0 0 200 200} color color)))
               (map-texture~ test)
               (glPushMatrix)
               (glTranslatef (- width 200.) 0.0 0.0)
               (textured-quad~ test
                 (lambda () (glVertex3f 0.0 0.0 0.0))
                 (lambda () (glVertex3f 200.0 0.0 0.0))
                 (lambda () (glVertex3f 200.0 200.0 0.0))
                 (lambda () (glVertex3f 0.0 200.0 0.0)))
               (glPopMatrix)))
      (glPopMatrix)
      (glEnable GL_LIGHTING)))
  
  
  (method protected virtual (draw-interface)
    (when fps?
      (draw~ fps)))
  
  
  ;;;
  ;;;; Camera
  ;;;
  
  
  (method protected virtual (prepare-camera)
    (vertex-init! eye 0.0 3.0 10.0)
    (standardize!~ eye-lookat))
  
  
  (method (get-me)
    (vertex+ eye (vertex-scalar* (get-sight~ eye-lookat) camera-distance)))

  
  (method protected virtual (zoom-in)
    (let ((me (get-me)))
      (increase! camera-distance (- (zoom-speed)))
      (vertex+! eye me (vertex-scalar* (get-sight~ eye-lookat) (- camera-distance)))
      (update-camera)))
  
  
  (method protected virtual (zoom-out)
    (let ((me (get-me)))
      (increase! camera-distance (zoom-speed))
      (vertex+! eye me (vertex-scalar* (get-sight~ eye-lookat) (- camera-distance)))
      (update-camera)))
  
  
  (method protected virtual (zoom-speed)
    0.1)
  
  
  (method (update-camera)
    (vertex+! eye-target eye (get-sight~ eye-lookat)))
  
  
  (method protected virtual (mouse-wheel h v delta)
    (if (> delta 0)
        (zoom-in)
      (zoom-out)))
  
  
  (method (validate-smooth-camera thunk)
    (let ((old-eye (copy-vertex eye)))
      (thunk)
      (let ((dist (vertex-distance eye old-eye)))
        (when (> dist 1.)
          (terminal distance: dist)))))
  
  
  ;;;
  ;;;; Movement
  ;;;
  
  
  (method protected virtual (camera-move-speed)
    0.05)
  
  (method protected virtual (camera-strafe-speed)
    0.025)
  
  (method protected virtual (camera-rotate-speed)
    0.02)

  
  (method protected virtual (move-forward)
    (vertex-copy! eye (vertex+ eye (vertex-scalar* (get-sight~ eye-lookat) (camera-move-speed))))
    (update-camera)
    (movement))
  
  
  (method protected virtual (move-backward)
    (vertex-copy! eye (vertex+ eye (vertex-scalar* (get-sight~ eye-lookat) (- (camera-move-speed)))))
    (update-camera)
    (movement))
  
  
  (method protected virtual (strafe-left)
    (strafe-horizontally (- (* (camera-strafe-speed) 2))))
  
  
  (method protected virtual (strafe-right)
    (strafe-horizontally (* (camera-strafe-speed) 2)))
  
  
  (method (strafe-horizontally d)
    (vertex-copy! eye (vertex+ eye (vertex-scalar* (get-right~ eye-lookat) d)))
    (update-camera)
    (movement))
  
  
  (method protected virtual (strafe-up)
    (vertex-copy! eye (vertex+ eye (vertex-scalar* (get-up~ eye-lookat) (* (camera-strafe-speed) 2))))
    (update-camera)
    (movement))
  
  
  (method protected virtual (strafe-down)
    (vertex-copy! eye (vertex+ eye (vertex-scalar* (get-up~ eye-lookat) (- (* (camera-strafe-speed) 2)))))
    (update-camera)
    (movement))
  
  
  (method protected virtual (movement)
    )
  
  
  (method protected virtual (rotate-left)
    (rotate-horizontal (camera-rotate-speed)))
  
  
  (method protected virtual (rotate-right)
    (rotate-horizontal (- (camera-rotate-speed))))
  
  
  (method (rotate-horizontal angle)
    (rotate~ eye-lookat angle world-up)
    (update-camera))
  
  
  (method (rotate-up)
    @wrong-number-of-parameters???
    (rotate-vertical (camera-rotate-speed) (get-right~ eye-lookat) (get-sight~ eye-lookat)))
  
  
  (method (rotate-down)
    (rotate-vertical (- (camera-rotate-speed))))
  
  
  (method (rotate-vertical angle)
    (set-sight~ eye-lookat (vertex-normalize (rotate-upon angle (get-right~ eye-lookat) (get-sight~ eye-lookat))))
    (set-up~ eye-lookat (vertex-normalize (rotate-upon angle (get-right~ eye-lookat) (get-up~ eye-lookat))))
    (update-camera))
  
  
  (method protected virtual (cursor-update)
    (set-cursor :arrow))
  
  
  (method protected virtual (mouse-down h v)
    (set! animate? (not animate?)))
  
  
  (method protected virtual (mouse-move h v)
    (when last-point
      (if (and last-recenter
               (= (get-h~ last-recenter) h)
               (= (get-v~ last-recenter) v))
          (set! last-recenter #f)
        (let ((new-point (new Point h v))
              (new-time (time->seconds (current-time))))
          (let ((elapse (- new-time last-time)))
            (when (> elapse 0)
              (let ((delta (nu- new-point last-point)))
                (let ((dh (cast <fl> (get-h~ delta)))
                      (dv (cast <fl> (get-v~ delta))))
                  (mouse-track elapse dh dv)))))
          (set! last-point (new Point (fxround (/ width 2)) (fxround (/ height 2))))
          (set! last-time new-time)
          (set! last-recenter (new Point (fxround (/ width 2)) (fxround (/ height 2))))
          (set-mouse-position~ window last-recenter)))))
  
  
  (method protected virtual (mouse-track elapse dh dv)
    (rotate-horizontal (/ (- dh) 200.))
    (rotate-vertical (/ (- dv) 200.)))
  
  
  (method protected virtual (mouse-up h v)
    (reset-viewing))
  
  
  (method protected virtual (right-mouse-down h v)
    (setup-viewing h v)
    @w
    (case mode
      ((explore)
       (set! animate? (not animate?)))
      ((insert)
       (case what
         ((cube)
          (add-object (new Cube self (random-in 3.0) (random-in 3.0) -6.0)))))))
  
  
  (method protected virtual (right-mouse-up h v)
    (reset-viewing))
  
  
  (method (setup-viewing h v)
    (set! last-point (new Point h v))
    (set! last-time (time->seconds (current-time))))
  
  
  (method (reset-viewing)
    (set! last-point #f)
    (set! last-time #f))
  
  
  ;;;
  ;;;; Objects
  ;;;
    
  
  (method (add-axes . rest)
    (add-object (apply new Axes self rest)))
  
  
  ;;;
  ;;;; Debug
  ;;;
  
  
  (method protected virtual (evaluate-hook)
    )
  
  
  ;;;
  ;;;; Toggle
  ;;;
  
  
  (method (toggle-interface)
    (set! interface? (not interface?)))
  
  
  (method (toggle-fps)
    (if (shift-down?)
        (reset~ fps)
      (set! fps? (not fps?))))
  
  
  (method (toggle-polygon-mode)
    (set! polygon-mode (ecase polygon-mode
                         ((GL_POINT) GL_LINE)
                         ((GL_LINE) GL_FILL)
                         ((GL_FILL) GL_POINT)))
    (glPolygonMode GL_FRONT_AND_BACK polygon-mode))
  
  
  (method (toggle-lighting)
    (set! light? (not light?)))
  
  
  (method (toggle-windowed-mode)
    (toggle-windowed-mode~ window))
  
  
  (method (toggle-fullscreen)
    (toggle-fullscreen~ window))))
