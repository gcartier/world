;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; Video
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2016
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.video jazz


(import (jazz.syntax (phase syntax))
        (world)
        (world.autoload)
        (world.configure)
        (world.settings)
        (world.syntax (phase syntax))
        (world.task))


;;;
;;;; Task
;;;


(definition public (video-task task <Task>)
  (declare (proper-tail-calls))
  (let ((video (current-video)))
    (with-task task
      (lambda (exit)
        (let (iter (previous (current-seconds)))
          (let ((time (current-seconds)))
            (let ((elapse (- time previous)))
              (unless (stopping?~ task)
                (site (video on?: #t)
                  (process-video~ video)))
              (let ((duration (- (current-seconds) time)))
                (task-sleep task video-period duration exit))
              (iter time))))))))


;;;
;;;; Input
;;;


(class World-Video extends Object
  
  
  (slot video? <bool>     initialize #f accessors generate)
  (slot buffer <u8vector> initialize #f accessors generate)
  
  
  (method override (initialize)
    (set! video? (world-setting 'world.video? #f))
    (when (and video? (client?))
      (start-video)))
  
  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method (on-toggle-video evt)
    (toggle-video))
  
  
  (method (toggle-video)
    (when (client?)
      (let ((world (current-world)))
        (if (not video?)
            (start-video)
          (stop-video))
        (update-parameter~ world 'video)
        (display-on/off~ world "Video" video?))))
  
  
  ;;;
  ;;;; Process
  ;;;
  
  
  (method (start-video)
    (unless video?
      (set! video? #t)))
  
  
  (method (stop-video)
    (when video?
      (set! video? #f)))
  
  
  (method (process-video)
    (when video?
      @convert
      (let ((read (sound-read-input-ring buffer)))
        (when (> read 0)
          (send-client-audio~ (client-tier) (subu8vector buffer 0 read)))))))


;;;
;;;; Output
;;;


(definition public (write-server-video bytes)
  @convert
  (start-speaker)
  @convert
  (sound-write-output-ring bytes (u8vector-length bytes))))
