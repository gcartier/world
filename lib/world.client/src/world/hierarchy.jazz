;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Hierarchy
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.hierarchy jazz


(definition package (register-hierarchy hierarchy)
  (define (register-players players group-info)
    (for-each (lambda (player)
                (register-player player group-info))
              players))
  
  (define (register-player player group-info)
    (bind (name id no verified? asleep? disconnected? zone mode mobile?) player
      (let ((player-info (register-player-info name zone mode group-info verified? asleep? disconnected? mobile?)))
        (when group-info
          (add-member group-info player-info)))))
  
  (empty-group-infos)
  (empty-player-infos)
  (bind (groupless . groups) hierarchy
    (bind (group owner invite-only? persistent? require-microphone? require-camera? zone stone zoom? link description . players) groupless
      (register-players players #f))
    (for-each (lambda (group)
                (bind (name/no owner invite-only? persistent? require-microphone? require-camera? zone stone zoom? link description . players) group
                  (let ((group-info (register-group-info name/no description)))
                    (register-players players group-info))))
              groups)))


;;;
;;;; Group
;;;


(definition package group-infos
  (make-table test: equal?))

(definition package (register-group-info name/no description)
  (let ((group-info (new Group-Info name/no description)))
    (table-set! group-infos name/no group-info)
    group-info))

(definition package (find-group-info name/no)
  (table-ref group-infos name/no #f))

(definition package (empty-group-infos)
  (empty-table group-infos))


(class Group-Info extends Object
  
  
  (slot name/no                    getter generate)
  (slot description                accessors generate)
  (slot members     initialize '() getter generate)
  
  
  (method override (initialize self name/no description)
    (nextmethod self)
    (set! self.name/no name/no)
    (set! self.description description))
  
  
  (method override (print self output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{a}" name/no))))
  
  
  (method protected (add-member self player-info)
    (set! members (append! members (list player-info))))
  
  
  (method public (group? self)
    (integer? name/no))
  
  
  (method public (circle? self)
    (string? name/no)))


;;;
;;;; Player
;;;


(definition package player-infos
  (make-table test: equal?))

(definition package (register-player-info name zone mode group verified? asleep? disconnected? mobile?)
  (let ((player-info (new Player-Info name zone mode group verified? asleep? disconnected? mobile?)))
    (table-set! player-infos name player-info)
    player-info))

(definition package (find-player-info name)
  (table-ref player-infos name #f))

(definition package (empty-player-infos)
  (empty-table player-infos))


(class Player-Info extends Object
  
  
  (slot name          getter generate)
  (slot zone          getter generate)
  (slot mode          getter generate)
  (slot group         getter generate)
  (slot verified?     getter generate)
  (slot asleep?       getter generate)
  (slot disconnected? getter generate)
  (slot mobile?       getter generate)
  
  
  (method override (initialize self name zone mode group verified? asleep? disconnected? mobile?)
    (nextmethod self)
    (set! self.name name)
    (set! self.zone zone)
    (set! self.mode mode)
    (set! self.group group)
    (set! self.verified? verified?)
    (set! self.asleep? asleep?)
    (set! self.disconnected? disconnected?)
    (set! self.mobile? mobile?))
  
  
  (method override (print self output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{a}" name))))))
