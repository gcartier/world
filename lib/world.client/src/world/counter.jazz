;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Counters
;;;


(module world.counter jazz


(import (jazz.geometry)
        (jazz.graphic)
        (jazz.graphic.opengl.glew)
        (jazz.io)
        (jazz.library)
        (jazz.literals)
        (jazz.media)
        (jazz.network)
        (jazz.platform)
        (jazz.platform.cairo)
        (jazz.runtime)
        (jazz.system)
        (jazz.ui)
        (jazz.ui.dialog)
        (jazz.ui.window)
        (time)
        (world.area)
        (world.autoload)
        (world.actor)
        (world.block)
        (world.client)
        (world.enemy)
        (world.foreign)
        (world.geometry)
        (world.history)
        (world.object)
        (world.player)
        (world.sprite)
        (world.texture)
        (world.window))


;;;
;;;; Counter
;;;


(class Counter extends World-Object
  
  
  (slot texture       <object> getter generate)
  (slot origin        <fl>     getter generate)
  (slot count         <number> getter generate)
  (slot elapse        <fl>     getter generate)
  (slot rate          <fl+>    getter generate)
  (slot max-rate      <fl+>    getter generate)
  (slot total-percent <fl+>    getter generate)
  (slot started       <fl>     getter generate)
  (slot title         <string> getter generate)
  (slot vert          <fl>     getter generate)
  
  
  (method override (initialize world x y z t v)
    (nextmethod world x y z)
    (set! texture (make-cairo-texture 300 35))
    (set! rate #f)
    (set! max-rate #f)
    (set! total-percent #f)
    (set! title t)
    (set! vert v)
    (reset))
  
  
  (method (reset)
    (set! origin (time->seconds (current-time)))
    (set! count 0)
    (set! elapse 0.))
  
  
  (method (start)
    (set! started (time->seconds (current-time))))
  
  
  (method (end)
    (process (- (time->seconds (current-time)) started)))
  
  
  (method (process duration)
    (increase! count)
    (let ((now (time->seconds (current-time))))
      (increase! elapse duration)
      (let ((total (- now origin)))
        (set! rate (/ count total))
        (set! max-rate (/ count elapse))
        (set! total-percent (percentage elapse total)))))
  
  
  (method (draw-rate (period? #f))
    (let ((surface (get-surface~ texture)))
      (set-operator~ surface CAIRO_OPERATOR_CLEAR)
      (paint~ surface)
      (set-operator~ surface CAIRO_OPERATOR_OVER)
      (set-font~ surface {Font Heading2})
      (set-color~ surface {Color Red})
      (draw-text~ surface 0 10 (format "{a}: {a}"
                                       title
                                       (cond ((not rate) "unavailable")
                                             ((not period?) (format "{r precision: 0}/s, {r precision: 0}% of {r precision: 0}/s" rate total-percent max-rate))
                                             (else (format "{r precision: 1}s, {r precision: 0}%" (/ rate) total-percent)))))
      (map-texture~ texture)
      (glPushMatrix)
      (glTranslatef 10.0 vert 0.0)
      (textured-quad~ texture
        (lambda () (glVertex3f 0.0 0.0 0.0))
        (lambda () (glVertex3f 300.0 0.0 0.0))
        (lambda () (glVertex3f 300.0 35.0 0.0))
        (lambda () (glVertex3f 0.0 35.0 0.0)))
      (glPopMatrix)))))
