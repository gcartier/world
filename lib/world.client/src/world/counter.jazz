;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Counters
;;;


(module world.counter jazz


(import (jazz.geometry)
        (jazz.graphic)
        (jazz.graphic.opengl.glew)
        (jazz.io)
        (jazz.library)
        (jazz.literals)
        (jazz.media)
        (jazz.network)
        (jazz.platform)
        (jazz.platform.cairo)
        (jazz.runtime)
        (jazz.system)
        (jazz.ui)
        (jazz.ui.dialog)
        (jazz.ui.window)
        (time)
        (world)
        (world.actor)
        (world.area)
        (world.autoload)
        (world.block)
        (world.element)
        (world.enemy)
        (world.foreign)
        (world.geometry)
        (world.history)
        (world.player)
        (world.texture)
        (world.window)
        (world.client.window))


;;;
;;;; Counter
;;;


(class Counter extends Element
  
  
  (property title     <string> accessors generate)
  (property vertical  <fl>     accessors generate)
  
  
  (slot initial        <fl>     getter generate)
  (slot count         <number> getter generate)
  (slot elapse        <fl>     getter generate)
  (slot period        <fl+>    getter generate)
  (slot rate          <fl+>    getter generate)
  (slot max-rate      <fl+>    getter generate)
  (slot total-percent <fl+>    getter generate)
  (slot started       <fl>     getter generate)
  
  
  (method override (prepare rest)
    (nextmethod rest)
    (set! color {Color White})
    (set! texture (make-cairo-texture 300 35 program: (get-texture-program~ world)))
    (set! period #f)
    (set! rate #f)
    (set! max-rate #f)
    (set! total-percent #f)
    (reset))
  
  
  (method override (print output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{a}" title))))
  
  
  (method (reset)
    (set! initial (time->seconds (current-time)))
    (set! count 0)
    (set! elapse 0.))
  
  
  (method (start)
    (set! started (time->seconds (current-time))))
  
  
  (method (end)
    (process (- (time->seconds (current-time)) started)))
  
  
  (method (process duration)
    (increase! count)
    (increase! elapse duration)
    (set! period (/ elapse count))
    (let ((now (time->seconds (current-time))))
      (let ((total (- now initial)))
        (set! rate (/ count total))
        (set! max-rate (/ count elapse))
        (set! total-percent (percentage elapse total)))))
  

  (method (draw-rate (kind #f))
    (let ((surface (get-surface~ texture)))
      (set-operator~ surface CAIRO_OPERATOR_CLEAR)
      (paint~ surface)
      (set-operator~ surface CAIRO_OPERATOR_OVER)
      (set-font~ surface {Font font-name: "Arial" point-size: 14})
      (set-color~ surface {Color Red})
      (draw-text~ surface 0 10 (format "{a}: {a}"
                                       title
                                       (if (not rate)
                                           "unavailable"
                                         (case kind
                                           ((frequency) (format "{r precision: 1}s, {r precision: 0}%, {a}x" (/ rate) total-percent count))
                                           ((period) (format "{r precision: 3}s, {a}x" period count))
                                           (else (format "{r precision: 0}/s, {r precision: 0}% of {r precision: 0}/s" rate total-percent max-rate))))))
      (map-texture~ texture)
      (glPushMatrix)
      (glTranslatef 10.0 vertical 0.0)
      (textured-quad~ texture
        (lambda () (glVertex3f 0.0 0.0 0.0))
        (lambda () (glVertex3f 300.0 0.0 0.0))
        (lambda () (glVertex3f 300.0 35.0 0.0))
        (lambda () (glVertex3f 0.0 35.0 0.0)))
      (glPopMatrix)))))
