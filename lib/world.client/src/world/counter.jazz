;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Counters
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.counter jazz


(import (jazz.geometry)
        (jazz.graphic)
        (jazz.graphic.opengl.glew)
        (jazz.io)
        (jazz.library)
        (jazz.literals)
        (jazz.media)
        (jazz.network)
        (jazz.platform)
        (jazz.platform.cairo)
        (jazz.runtime)
        (jazz.system)
        (jazz.ui)
        (jazz.ui.dialog)
        (jazz.ui.window)
        (time)
        (world)
        (world.actor)
        (world.area)
        (world.autoload)
        (world.block)
        (world.element)
        (world.enemy)
        (world.foreign)
        (world.geometry)
        (world.history)
        (world.homogeneous)
        (world.player)
        (world.syntax (phase syntax))
        (world.texture)
        (world.window)
        (world.client.window))


;;;
;;;; Counter
;;;


(class Counter extends Component
  
  
  (property title     <string>    accessors generate)
  (property kind      <object>    accessors generate)
  (property vertical  <fl>        accessors generate)
  
  
  (slot initial       <fl>        getter generate)
  (slot count         <number>    getter generate)
  (slot allocated     <fl>        getter generate)
  (slot elapse        <fl>        getter generate)
  (slot period        <fl+>       getter generate)
  (slot rate          <fl+>       getter generate)
  (slot max-rate      <fl+>       getter generate)
  (slot total-percent <fl+>       getter generate)
  (slot start-bytes   <f64vector> getter generate)
  (slot end-bytes     <f64vector> getter generate)
  (slot started       <fl>        getter generate)
  (slot texture       <object>    getter generate)
  
  
  (method override (prepare rest)
    (nextmethod rest)
    (set! period #f)
    (set! rate #f)
    (set! max-rate #f)
    (set! total-percent #f)
    (set! start-bytes (make-f64))
    (set! end-bytes (make-f64))
    (set! texture (make-cairo-texture 300 35))
    (reset))
  
  
  (method override (print output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{a}" title))))
  
  
  (method (reset)
    (set! initial (time->seconds (current-time)))
    (set! count 0)
    (set! allocated 0.)
    (set! elapse 0.))
  
  
  (method (start)
    (bytes-allocated! start-bytes)
    (set! started (time->seconds (current-time))))
  
  
  (method (end)
    (bytes-allocated! end-bytes)
    (increase! allocated (- (f64-ref end-bytes) (f64-ref start-bytes)))
    (process (- (time->seconds (current-time)) started)))
  
  
  (method (process duration)
    (increase! count)
    (increase! elapse duration)
    (set! period (/ elapse count))
    (let ((now (time->seconds (current-time))))
      (let ((total (- now initial)))
        (set! rate (/ count total))
        (set! max-rate (if (= elapse 0.) 0. (/ count elapse)))
        (set! total-percent (percentage elapse total)))))
  
  
  (method (present-rate)
    (define (present-memory)
      (if (= count 0)
          ""
        (format ", {a}k" (fxround (/ allocated (cast <fl> count) 1000.)))))
    
    (format "{a}: {a}"
            title
            (if (or (not rate)
                    (not (finite? rate)))
                "unavailable"
              (case kind
                ((frequency) (format "{r precision: 1}s, {r precision: 0}%, {a}x" (/ rate) total-percent count))
                ((period) (format "{r precision: 3}s, {a}x" period count))
                (else (format "{r precision: 0}/s, {r precision: 0}% of {r precision: 0}/s{a}" rate total-percent max-rate (present-memory)))))))
  

  (method (draw-rate surface h v)
    (set-font~ surface {Font Title-User^})
    (set-color~ surface {Color Red})
    (draw-text~ surface h v (present-rate)))))
