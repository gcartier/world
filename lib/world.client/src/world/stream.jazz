;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; Stream
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.stream jazz


(import (jazz.cairo)
        (jazz.graphic)
        (jazz.io)
        (jazz.listener)
        (jazz.platform)
        (jazz.stream)
        (jazz.stream.syntax (phase syntax))
        (jazz.syntax (phase syntax))
        (jazz.version)
        (jazz.zlib)
        (world)
        (world.context)
        (world.media)
        (world.settings)
        (world.task))


(definition protected stream-directories
  (world-setting 'world.stream-directories #f))

(definition protected stream-multiple?
  (world-setting 'world.stream-multiple? #f))

(definition protected stream-repeatable?
  (world-setting 'world.stream-repeatable? #f))


;;;
;;;; Listener
;;;


(definition public (gst_app_sink_wait_frame task exit listener elem vec info reset-action eos-action)
  (declare (proper-tail-calls))
  (let (loop)
    (let ((c (wait listener)))
      (case c
        ((#\!)
         (when reset-action
           (reset-action))
         (loop))
        ((#\^)
         (when eos-action
           (eos-action))
         (loop))
        ((#\@)
         (task-done task exit))
        (else
         (validate-try-pull-frame (gst_app_sink_try_pull_frame elem vec info)))))))


(definition public (gst_app_sink_wait_buffer task exit listener elem reset-action eos-action)
  (declare (proper-tail-calls))
  (let (loop)
    (let ((c (wait listener)))
      (case c
        ((#\!)
         (when reset-action
           (reset-action))
         (loop))
        ((#\^)
         (when eos-action
           (eos-action))
         (loop))
        ((#\@)
         (task-done task exit))
        (else
         (validate-try-pull-buffer (gst_app_sink_try_pull_buffer elem)))))))


(definition public (gst_app_sink_process_audio task exit consumer (drain?: drain? #f))
  (declare (proper-tail-calls))
  (let ((listener (get-listener consumer))
        (element (get-element consumer))
        (data (get-data consumer))
        (info (get-info consumer)))
    (let (loop)
      (if (get-closed? listener)
          (task-done task exit)
        (let ((c (if drain?
                     (let ((c (wait-timeout listener 0)))
                       (if (eqv? c #\.)
                           c
                         (set! drain? #f)
                         (if (eof-object? c)
                             (wait listener)
                           c)))
                   (wait listener))))
          (case c
            ((#\-)
             (set-voice? consumer #f)
             (loop))
            ((#\+)
             (set-voice? consumer #t)
             (loop))
            ((#\!)
             (reset-action consumer)
             (loop))
            ((#\^)
             (eos-action consumer)
             (loop))
            ((#\@)
             (task-done task exit))
            (else
             (let ((size (validate-try-pull-frame (gst_app_sink_try_pull_frame element data info))))
               (if drain?
                   (loop)
                 (let ((buffer (subu8vector data 0 size))
                       (dts (u64vector-ref info 0))
                       (pts (u64vector-ref info 1))
                       (duration (u64vector-ref info 2))
                       (keyframe? (= (u64vector-ref info 3) 1)))
                   (let ((flags (frame-flags keyframe? (get-voice? consumer))))
                     (consume-frame consumer buffer dts pts duration flags))))))))))))


(definition public (gst_app_sink_process_frames task exit consumer (drain?: drain? #f))
  (declare (proper-tail-calls))
  (let ((listener (get-listener consumer))
        (element (get-element consumer))
        (data (get-data consumer))
        (info (get-info consumer)))
    (let (loop)
      (if (get-closed? listener)
          (task-done task exit)
        (let ((c (if drain?
                     (let ((c (wait-timeout listener 0)))
                       (if (eqv? c #\.)
                           c
                         (set! drain? #f)
                         (if (eof-object? c)
                             (wait listener)
                           c)))
                   (wait listener))))
          (case c
            ((#\!)
             (reset-action consumer)
             (loop))
            ((#\^)
             (eos-action consumer)
             (loop))
            ((#\@)
             (task-done task exit))
            (else
             (let ((size (validate-try-pull-frame (gst_app_sink_try_pull_frame element data info))))
               (if drain?
                   (loop)
                 (let ((buffer (subu8vector data 0 size))
                       (dts (u64vector-ref info 0))
                       (pts (u64vector-ref info 1))
                       (duration (u64vector-ref info 2))
                       (keyframe? (= (u64vector-ref info 3) 1)))
                   (let ((flags (frame-flags keyframe? #f)))
                     (consume-frame consumer buffer dts pts duration flags))))))))))))


(definition public (gst_app_sink_process_buffers task exit consumer (drain?: drain? #f))
  (declare (proper-tail-calls))
  (let ((listener (get-listener consumer))
        (element (get-element consumer)))
    (let (loop)
      (if (get-closed? listener)
          (task-done task exit)
        (let ((c (if drain?
                     (let ((c (wait-timeout listener 0)))
                       (if (eqv? c #\.)
                           c
                         (set! drain? #f)
                         (if (eof-object? c)
                             (wait listener)
                           c)))
                   (wait listener))))
          (case c
            ((#\!)
             (reset-action consumer)
             (loop))
            ((#\^)
             (eos-action consumer)
             (loop))
            ((#\@)
             (task-done task exit))
            (else
             (let ((buffer (validate-try-pull-buffer (gst_app_sink_try_pull_buffer element))))
               (if drain?
                   (loop)
                 (consume-buffer consumer buffer))))))))))


(definition public (gst_app_sink_process_one_buffer consumer)
  (let ((listener (get-listener consumer))
        (element (get-element consumer)))
    (let ((c (wait listener)))
      (when (eqv? c #\.)
        (let ((buffer (validate-try-pull-buffer (gst_app_sink_try_pull_buffer element))))
          (consume-buffer consumer buffer))))))


;;;
;;;; Consumer
;;;


(class Stream-Consumer extends Stream-Sink
  
  
  (slot caps                  initialize #f accessors generate)
  (slot listener              initialize #f accessors generate)
  (slot element               initialize #f accessors generate)
  (slot task                  initialize #f accessors generate)
  (slot processing?           initialize #t accessors generate)
  
  
  (method override (initialize self (caps: caps #f) (processing?: processing? #t) (name: name #f) (consumer: consumer #f))
    (nextmethod self name: name consumer: consumer)
    (set! self.caps caps)
    (set! self.processing? processing?))
  
  
  (method override (consumer? self)
    #t)
  
  
  (method protected virtual (task-name self)
    'consumer)
  
  
  (method protected virtual (setup-consumer self listener element)
    (set! self.listener listener)
    (set! self.element element))
  
  
  (method protected virtual (release-consumer self)
    (unless bailout?
      (consume-eos self))
    (close-stream-listener listener)
    (set! listener #f)
    (set! element #f))
  
  
  (method protected (start-listener self)
    (when listener
      (start-stream-listener listener)))
  
  
  (method protected (stop-listener self)
    (when listener
      (stop-stream-listener listener)))
  
  
  (method protected (start-processing self priority)
    (let ((task (new Task (task-name self) (~ run-consumer self) priority: priority)))
      (start-listener self)
      (start-task task)
      (set! self.task task)))
  
  
  (method protected (stop-processing self)
    (stop-listener self)
    (stop-task task)
    (set! task #f))
  
  
  (method protected (run-consumer self task)
    (declare (proper-tail-calls))
    (with-task task
      (lambda (exit)
        (let (iter)
          (process self task exit)
          (iter)))))
  
  
  (method protected virtual (reset-action self)
    )
  
  
  (method protected virtual (consume-eos self)
    )
  
  
  (method protected virtual (eos-action self)
    (unless bailout?
      (consume-eos self))))


;;;
;;;; Frame
;;;


(class Stream-Frame-Consumer extends Stream-Consumer
  
  
  (slot data <u8vector+>  initialize #f accessors generate)
  (slot info <u64vector+> initialize #f accessors generate)
  
  
  (method override (setup-consumer self listener element size)
    (nextmethod self listener element)
    (set! self.data (make-u8vector size))
    (set! self.info (make-u64vector app-sink-info-size)))
  
  
  (method override (release-consumer self)
    (nextmethod self)
    (set! data #f)
    (set! info #f))
  
  
  (method override (process self task exit)
    (gst_app_sink_process_frames task exit self))
  
  
  (method override (consume-eos self)
    (consume-frame self #f #f #f #f 0)))


;;;
;;;; Buffer
;;;


(class Stream-Buffer-Consumer extends Stream-Consumer
  
  
  (method override (process self task exit)
    (gst_app_sink_process_buffers task exit self))
  
  
  (method override (consume-eos self)
    (consume-buffer self #f)))


;;;
;;;; Stream
;;;


(definition protected stream-loop?
  (world-setting 'world.stream-loop? #f))


(interface Media-Stream
  
  
  (method public virtual abstract (get-stream? self))
  (method public virtual abstract (set-stream? self flag))
  (method public virtual abstract (play-stream self))
  (method public virtual abstract (pause-stream self))
  (method public virtual abstract (rewind-stream self))
  (method public virtual abstract (goto-delayed self pos normalized-dts))
  (method public virtual abstract (goto-stream self pos normalized-dts))
  (method public virtual abstract (backward-stream self pos normalized-dts))
  (method public virtual abstract (forward-stream self pos normalized-dts)))


;;;
;;;; Format
;;;


(definition protected stream-version
  {Version 1 0 2})


(definition version-offset <fx>
  0)

(definition version-size <fx>
  1024)


(definition index-unit <fx>
  8)

(definition index-count <fx>
  4096)

(definition index-size <fx>
  (* index-unit index-count))


(definition header-unit <fx>
  (+ 8 8 8 8 4 4))

(definition header-count <fx>
  4096)

(definition header-size <fx>
  (* header-unit header-count))


;;;
;;;; Format
;;;


(class Stream-Format extends Object
  
  
  (slot version                getter generate)
  (slot properties-offset <fx> getter generate)
  (slot properties-size   <fx> getter generate)
  (slot index-offset      <fx> getter generate)
  (slot sections-offset   <fx> getter generate)
  
  
  (method (setup-version self ver)
    (set! version ver)
    (set! properties-offset (+ version-offset version-size))
    (cond ((nu=? version {Version 1 0 0})
           (set! properties-size 3072))
          (else
           (set! properties-size 4096)))
    (set! index-offset (+ properties-offset properties-size))
    (set! sections-offset (+ index-offset index-size))))


;;;
;;;; Reader
;;;


(class Stream-Reader extends Stream-Format
  
  
  (slot port             getter generate)
  (slot frame            getter generate)
  (slot properties       getter generate)
  (slot count            getter generate)
  (slot base             getter generate)
  (slot start            getter generate)
  (slot end              getter generate)
  (slot duration         getter generate)
  (slot kind             getter generate)
  (slot level            getter generate)
  (slot resolution       getter generate)
  (slot framerate        getter generate)
  (slot bitrate          getter generate)
  (slot codec            getter generate)
  (slot caps             getter generate)
  (slot metadata         getter generate)
  (slot index            getter generate)
  (slot temporary        getter generate)
  
  
  (method override (initialize self file)
    (nextmethod self)
    (set! self.port (open-input-file (path-settings file)))
    (setup-version self (read-version self))
    (set! self.frame 0)
    (set! self.temporary (make-u8vector 8))
    (set! self.properties (read-properties self))
    (set! self.count (getf properties count:))
    (set! self.base (if (nu=? version {Version 1 0 0})
                        (getf properties base: not-found: 0)
                      (getf properties base:)))
    (set! self.start (getf properties start:))
    (set! self.end (getf properties end:))
    (set! self.duration (getf properties duration:))
    (set! self.kind (getf properties kind:))
    (set! self.level (getf properties level:))
    (set! self.resolution (getf properties resolution:))
    (set! self.framerate (getf properties framerate:))
    (set! self.bitrate (getf properties bitrate:))
    (set! self.codec (getf properties codec:))
    (set! self.caps (getf properties caps:))
    (set! self.metadata (getf properties metadata: not-found: '()))
    (set! self.index (read-index self)))
  
  
  (method override (destroy self)
    (close-port port)
    (nextmethod self))
  
  
  (method (read-version self)
    (input-port-byte-position port version-offset)
    (read-binary port))
  
  
  (method (read-properties self)
    (input-port-byte-position port properties-offset)
    (if (nu=? version {Version 1 0 0})
        (read-binary port)
      (read-deflated port)))
  
  
  (method (read-index self)
    (input-port-byte-position port index-offset)
    (let ((index (make-u64vector index-count)))
      (loop (for n from 0 below index-count)
            (read-subu8vector temporary 0 8 port)
            (u64vector-set! index n (scan-u64 temporary 0)))
      index))
  
  
  (method protected (read-frame self (read-buffer? #t) (advance-frame? #t))
    (if (>= frame count)
        #f
      (let ((section (quotient frame header-count))
            (rank (modulo frame header-count)))
        (when advance-frame?
          (increase! frame))
        (let ((position (+ (u64vector-ref index section) (* rank header-unit))))
          (input-port-byte-position port position)
          (read-subu8vector temporary 0 8 port)
          (let ((dts (scan-u64 temporary 0)))
            (read-subu8vector temporary 0 8 port)
            (let ((pts (scan-u64 temporary 0)))
              (read-subu8vector temporary 0 8 port)
              (let ((duration (scan-u64 temporary 0)))
                (read-subu8vector temporary 0 8 port)
                (let ((offset (scan-u64 temporary 0)))
                  (let ((size (read-32-bit-integer port)))
                    (let ((keyframe? (= (read-32-bit-integer port) 1)))
                      (if read-buffer?
                          (begin
                            (input-port-byte-position port offset)
                            (let ((buffer (make-u8vector size)))
                              (read-subu8vector buffer 0 size port)
                              (values buffer dts pts duration keyframe?)))
                        (values #t dts pts duration keyframe?))))))))))))
  
  
  (method protected (read-header self frame)
    (let ((section (quotient frame header-count))
          (rank (modulo frame header-count)))
      (input-port-byte-position port (+ (u64vector-ref index section) (* rank header-unit)))
      (read-subu8vector temporary 0 8 port)
      (let ((dts (scan-u64 temporary 0)))
        (read-subu8vector temporary 0 8 port)
        (let ((pts (scan-u64 temporary 0)))
          (read-subu8vector temporary 0 8 port)
          (let ((duration (scan-u64 temporary 0)))
            (read-subu8vector temporary 0 8 port)
            (let ((offset (scan-u64 temporary 0)))
              (let ((size (read-32-bit-integer port)))
                (let ((keyframe? (= (read-32-bit-integer port) 1)))
                  (values size dts pts duration keyframe?)))))))))
  
  
  (method protected (read-keyframe? self frame)
    (let ((section (quotient frame header-count))
          (rank (modulo frame header-count)))
      (input-port-byte-position port (+ (u64vector-ref index section) (* rank header-unit) 8 8 8 8 4))
      (= (read-32-bit-integer port) 1)))
  
  
  (method protected (find-previous-keyframe self frame)
    (declare (proper-tail-calls))
    (let (loop (fr frame))
      (if (< fr 0)
          #f
        (let ((keyframe? (read-keyframe? self fr)))
          (if keyframe?
              fr
            (loop (- fr 1)))))))
  
  
  (method protected (find-next-keyframe self frame)
    (declare (proper-tail-calls))
    (let ((last (- count 1)))
      (let (loop (fr frame))
        (if (> fr last)
            #f
          (let ((keyframe? (read-keyframe? self fr)))
            (if keyframe?
                fr
              (loop (+ fr 1))))))))
  
  
  (method protected (normalize-timestamp self timestamp)
    (- timestamp base))
  
  
  (method protected (position->frame self pos)
    (fxround (* (cast <fl> (- count 1)) pos)))
  
  
  (method protected (frame->position self fr)
    (/ (cast <fl> fr) (cast <fl> (- count 1))))
  
  
  (method protected (seek->frame self pos)
    (let ((fr (position->frame self pos)))
      (if (eq? kind 'audio)
          fr
        (find-previous-keyframe self fr))))
  
  
  (method protected (seek->keyframe self pos)
    (find-previous-keyframe self (seek->frame self pos)))
  
  
  (method protected (previous-frame self)
    (if (= frame 0)
        #f
      (- frame 1)))
  
  
  (method protected (previous-keyframe self)
    (let ((frame (previous-frame self)))
      (and frame
           (find-previous-keyframe self frame))))
  
  
  (method protected (next-frame self)
    (if (= frame (- count 1))
        #f
      (+ frame 1)))
  
  
  (method protected (next-keyframe self)
    (let ((frame (next-frame self)))
      (and frame
           (find-next-keyframe self frame))))
  
  
  (method protected (seek self pos)
    (let ((fr (seek->frame self pos)))
      (when fr
        (set! frame fr))))
  
  
  (method protected (goto-frame self fr)
    (set! frame fr))
  
  
  (method protected (goto-position self pos normalized-dts)
    (let ((near-frame (position->frame self pos))
          (target-dts (+ base normalized-dts)))
      (receive (size dts pts duration keyframe?) (read-header self near-frame)
        (cond ((= dts target-dts)
               (set! frame near-frame))
              ((< dts target-dts)
               (let (loop (fr near-frame))
                 (when (< fr count)
                   (receive (size dts pts duration keyframe?) (read-header self fr)
                     (if (>= dts target-dts)
                         (set! frame fr)
                       (loop (+ fr 1)))))))
              (else
               (let (loop (fr near-frame) (previous near-frame))
                 (when (>= fr 0)
                   (receive (size dts pts duration keyframe?) (read-header self fr)
                     (if (< dts target-dts)
                         (set! frame previous)
                       (loop (- fr 1) fr)))))))))))


;;;
;;;; Writer
;;;


(class Stream-Writer extends Stream-Format
  
  
  (slot port            getter generate)
  (slot kind            getter generate)
  (slot level           getter generate)
  (slot resolution      getter generate)
  (slot framerate       getter generate)
  (slot bitrate         getter generate)
  (slot codec           getter generate)
  (slot caps            getter generate)
  (slot metadata        getter generate)
  (slot index           getter generate)
  (slot header          getter generate)
  (slot frame           getter generate)
  (slot position        getter generate)
  (slot temporary       getter generate)
  (slot base-timestamp  getter generate)
  (slot start-timestamp getter generate)
  (slot end-timestamp   getter generate)
  
  
  (method override (initialize self file kind level resolution framerate bitrate codec (caps: caps #f))
    (nextmethod self)
    (set! self.port (open-output-file (path-settings file)))
    (setup-version self stream-version)
    (set! self.kind kind)
    (set! self.level level)
    (set! self.resolution resolution)
    (set! self.framerate framerate)
    (set! self.bitrate bitrate)
    (set! self.codec codec)
    (set! self.caps caps)
    (set! self.metadata '())
    (set! self.index (make-u64vector index-count))
    (set! self.header (new-queue))
    (set! self.frame 0)
    (set! self.position 0)
    (set! self.temporary (make-u8vector 8))
    (set! self.base-timestamp #f)
    (set! self.start-timestamp #f)
    (set! self.end-timestamp #f)
    (write-start self))
  
  
  (method override (destroy self)
    (write-end self)
    (close-port port)
    (nextmethod self))
  
  
  (method public (set-resolution self reso)
    (set! resolution reso))
  
  
  (method public (set-caps self cps)
    (set! caps cps))
  
  
  (method public (add-metadata self property value)
    (set! metadata (append metadata (list property value))))
  
  
  (method public (write-start self)
    (set! position sections-offset)
    (output-port-byte-position port position))
  
  
  (method public (write-frame self buffer dts pts duration keyframe?)
    ;; this is not ideal but a lot of code relies
    ;; on having a valid dts so this seems reasonable
    (let ((dts (if (/= dts GST_CLOCK_TIME_NONE)
                   dts
                 pts)))
      (when (or (not base-timestamp)
                (< dts base-timestamp))
        (set! base-timestamp dts))
      (when (or (not base-timestamp)
                (< pts base-timestamp))
        (set! base-timestamp pts))
      (when (not start-timestamp)
        (set! start-timestamp dts))
      (set! end-timestamp pts)
      (when (= (modulo frame header-count) 0)
        (let ((section (quotient frame header-count)))
          (u64vector-set! index section position)
          (increase! position header-size)
          (output-port-byte-position port position)))
      (let ((size (u8vector-length buffer)))
        (enqueue header (list dts pts duration position size keyframe?))
        (write-subu8vector buffer 0 size port)
        (increase! frame)
        (increase! position size))
      (when (= (modulo frame header-count) 0)
        (write-header self (- (quotient frame header-count) 1)))))
  
  
  (method (write-header self section)
    (let ((pos (u64vector-ref index section)))
      (output-port-byte-position port pos)
      (loop (for n from 0 below header-count)
            (for info in (queue-list header))
            (bind (dts pts duration position size keyframe?) info
              (put-u64 temporary 0 dts)
              (write-subu8vector temporary 0 8 port)
              (put-u64 temporary 0 pts)
              (write-subu8vector temporary 0 8 port)
              (put-u64 temporary 0 duration)
              (write-subu8vector temporary 0 8 port)
              (put-u64 temporary 0 position)
              (write-subu8vector temporary 0 8 port)
              (write-32-bit-integer size port)
              (write-32-bit-integer (if keyframe? 1 0) port)))
      (set! header (new-queue))))
  
  
  (method public (write-end self)
    (when (/= (modulo frame header-count) 0)
      (write-header self (quotient frame header-count)))
    (write-version self)
    (write-properties self)
    (write-index self))
  
  
  (method (write-version self)
    (output-port-byte-position port version-offset)
    (assert (<= (write-binary stream-version port) version-size)))
  
  
  (method (write-properties self)
    (define (stream-properties)
      (let ((duration (and start-timestamp
                           end-timestamp
                           (- end-timestamp start-timestamp))))
        (list
          count: frame
          base: base-timestamp
          start: start-timestamp
          end: end-timestamp
          duration: duration
          kind: kind
          level: level
          resolution: resolution
          framerate: framerate
          bitrate: bitrate
          codec: codec
          caps: caps
          metadata: metadata)))
    
    (output-port-byte-position port properties-offset)
    (assert (<= (write-deflated (stream-properties) port) properties-size)))
  
  
  (method (write-index self)
    (output-port-byte-position port index-offset)
    (loop (for n from 0 below index-count)
          (put-u64 temporary 0 (u64vector-ref index n))
          (write-subu8vector temporary 0 8 port))))


;;;
;;;; Draw
;;;


;; quantization
;; chroma subsampling

;; input 3686400
;; output first frame
;; quantizer=10 131874
;; quantizer=20 131865
;; quantizer=21 131865 (default)
;; quantizer=30 70973
;; quantizer=40 24978
;; quantizer=50 6898


(class Draw-Context extends Object
  
  
  (slot resolution     getter generate)
  (slot surface        getter generate)
  (slot color-listener getter generate)
  (slot color-pipeline getter generate)
  (slot alpha-listener getter generate)
  (slot alpha-pipeline getter generate)
  
  
  (method override (initialize self resolution framerate bitrate (tune: tune #f))
    (nextmethod self)
    (set! self.resolution resolution)
    (set! self.surface (new Image-Surface resolution))
    (set! self.color-listener (open-stream-listener "drawcolor"))
    (set! self.color-pipeline (make-color-pipeline color-listener resolution framerate bitrate tune))
    (set! self.alpha-listener (open-stream-listener "drawalpha"))
    (set! self.alpha-pipeline (make-alpha-pipeline alpha-listener resolution framerate bitrate tune)))
  
  
  (method override (destroy self)
    (close surface)
    (gst_bin_release color-pipeline)
    (gst_bin_release alpha-pipeline)
    (close-stream-listener color-listener)
    (close-stream-listener alpha-listener)
    (nextmethod self))
  
  
  (method public (extract self task exit)
    (let ((width (get-width resolution))
          (height (get-height resolution)))
      (let ((start (real-time))
            (pixels (* width height)))
        (with-unref ((color-src (gst_bin_get_by_name color-pipeline "src"))
                     (color-sink (gst_bin_get_by_name color-pipeline "sink"))
                     (alpha-src (gst_bin_get_by_name alpha-pipeline "src"))
                     (alpha-sink (gst_bin_get_by_name alpha-pipeline "sink")))
          ;; feed drawing into src
          (let ((data (cairo_image_surface_get_data (get-handle surface)))
                (size (* pixels 4))
                (alpha-size (/ (* pixels 12) 8))
                (timestamp 0)
                (duration 100))
            (let ((color-buffer (make-u8vector size))
                  (color-info (make-u64vector app-sink-info-size))
                  (alpha-buffer (make-u8vector alpha-size))
                  (alpha-info (make-u64vector app-sink-info-size))
                  (alpha-data (heap-calloc alpha-size 1)))
              (separate-alpha data alpha-data pixels)
              (gst_app_src_write_pointer_now color-src data size duration)
              (gst_app_src_write_pointer_now alpha-src alpha-data alpha-size duration)
              (heap-free alpha-data)
              ;; retrieve frames from sink
              (let ((color-bytes (gst_app_sink_wait_frame task exit color-listener color-sink color-buffer color-info #f #f))
                    (alpha-bytes (gst_app_sink_wait_frame task exit alpha-listener alpha-sink alpha-buffer alpha-info #f #f)))
                (let ((dts (u64vector-ref color-info 0))
                      (pts (u64vector-ref color-info 1))
                      (duration (u64vector-ref color-info 2))
                      (keyframe? (= (u64vector-ref color-info 3) 1)))
                  ;(debug (- (real-time) start) color-bytes alpha-bytes)
                  (values (subu8vector color-buffer 0 color-bytes) (subu8vector alpha-buffer 0 alpha-bytes) dts pts duration keyframe?)))))))))
  
  
  (method protected (reset self)
    (gst_element_set_state color-pipeline GST_STATE_READY)
    (gst_element_set_state color-pipeline GST_STATE_PLAYING)
    (gst_element_set_state alpha-pipeline GST_STATE_READY)
    (gst_element_set_state alpha-pipeline GST_STATE_PLAYING)))


(definition protected stillimage
  1)

(definition protected fastdecode
  2)

(definition protected zerolatency
  4)


(definition default-tune
  zerolatency)


(definition (make-color-pipeline listener resolution framerate bitrate tune)
  (let ((width (get-width resolution))
        (height (get-height resolution))
        (tune (or tune default-tune)))
    (let ((pipeline (gst-pipeline "appsrc name=src"
                                  "videoconvert name=convert"
                                  (tie "video/x-raw, format=I420, width={width}, height={height}, framerate={framerate}/1")
                                  (tie "x264enc pass=qual quantizer=20 bitrate={bitrate} tune={tune} speed-preset=superfast name=enc")
                                  "appsink name=sink")))
      (with-unref ((src (gst_bin_get_by_name pipeline "src"))
                   (sink (gst_bin_get_by_name pipeline "sink")))
        (gst_app_sink_connect_signals sink listener)
        (gst-setup-video-source src "video/x-raw" "BGRA" width height framerate)
        (gst_element_set_state pipeline GST_STATE_PLAYING))
      pipeline)))


(definition (make-alpha-pipeline listener resolution framerate bitrate tune)
  (let ((width (get-width resolution))
        (height (get-height resolution))
        (tune (or tune default-tune)))
    (let ((pipeline (gst-pipeline "appsrc name=src"
                                  (tie "x264enc pass=qual quantizer=20 bitrate={bitrate} tune={tune} speed-preset=superfast name=enc")
                                  "appsink name=sink")))
      (with-unref ((src (gst_bin_get_by_name pipeline "src"))
                   (sink (gst_bin_get_by_name pipeline "sink")))
        (gst_app_sink_connect_signals sink listener)
        (gst-setup-video-source src "video/x-raw" "I420" width height framerate)
        (gst_element_set_state pipeline GST_STATE_PLAYING))
      pipeline))))
