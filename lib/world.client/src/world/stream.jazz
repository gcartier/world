;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; Stream
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.stream jazz


(import (jazz.cairo)
        (jazz.graphic)
        (jazz.io)
        (jazz.platform)
        (jazz.stream)
        (jazz.syntax (phase syntax))
        (world)
        (world.context)
        (world.settings)
        (world.task))


;;;
;;;; Fifo
;;;


(definition public (gst_app_sink_wait task exit fifo elem vec info)
  (cond-expand
    (windows
     (declare (proper-tail-calls))
     (let (loop)
       (let ((size (gst_app_sink_try_pull elem vec info)))
         (if (/= size -1)
             size
           (if task
               (task-sleep task .01 exit)
             (sleep .01))
           (loop)))))
    (else
     (if (get-stopped? fifo)
         (task-sleep task +inf.0 exit)
       (let ((c (wait fifo)))
         (if (eqv? c #\@)
             (task-sleep task +inf.0 exit)
           (let ((size (gst_app_sink_try_pull elem vec info)))
             (assert (/= size -1)
               size))))))))


;;;
;;;; Stream
;;;


(definition public (read-frame port)
  (let ((temporary (make-u8vector 8)))
    (read-subu8vector temporary 0 8 port)
    (let ((timestamp (scan-s64 temporary 0)))
      (read-subu8vector temporary 0 8 port)
      (let ((duration (scan-u64 temporary 0)))
        (let ((size (read-32-bit-integer port)))
          (if (eof-object? size)
              (values #f #f #f)
            (let ((buffer (make-u8vector size)))
              (read-subu8vector buffer 0 size port)
              (values buffer timestamp duration))))))))


(definition public (read-audio-header codec port)
  (case codec
    ((opus)
     #f)
    ((vorbis)
     (receive (b1 t1 d1) (read-frame port)
       (receive (b2 t2 d2) (read-frame port)
         (receive (b3 t3 d3) (read-frame port)
           (let ((headers (list (list b1 t1 d1)
                                (list b2 t2 d2)
                                (list b3 t3 d3))))
             (object->u8vector headers))))))))


;;;
;;;; Draw
;;;


;; quantization
;; chroma subsampling

;; input 3686400
;; output first frame
;; quantizer=10 131874
;; quantizer=20 131865
;; quantizer=21 131865 (default)
;; quantizer=30 70973
;; quantizer=40 24978
;; quantizer=50 6898

;; just tune=zerolatency results in a beautiful image
;; with almost no latency but very high cpu usage but
;; adding speed-preset=superfast reduces cpu usage a lot


(class Draw-Context extends Object
  
  
  (slot resolution     getter generate)
  (slot surface        getter generate)
  (slot color-fifo     getter generate)
  (slot color-pipeline getter generate)
  (slot alpha-fifo     getter generate)
  (slot alpha-pipeline getter generate)
  
  
  (method override (initialize self resolution framerate bitrate)
    (nextmethod self)
    (set! self.resolution resolution)
    (set! self.surface (new Image-Surface resolution))
    (set! self.color-fifo (open-stream-fifo "drawcolor"))
    (set! self.color-pipeline (make-color-pipeline color-fifo resolution framerate bitrate))
    (set! self.alpha-fifo (open-stream-fifo "drawalpha"))
    (set! self.alpha-pipeline (make-alpha-pipeline alpha-fifo resolution framerate bitrate)))
  
  
  (method override (destroy self)
    (close surface)
    (gst_element_release color-pipeline)
    (gst_element_release alpha-pipeline)
    (close-stream-fifo color-fifo)
    (close-stream-fifo alpha-fifo)
    (nextmethod self))
  
  
  (method public (extract self task exit)
    (let ((width (get-width resolution))
          (height (get-height resolution)))
      (let ((start (real-time))
            (pixels (* width height)))
        (let ((color-src (gst_bin_get_by_name color-pipeline "src"))
              (color-sink (gst_bin_get_by_name color-pipeline "sink"))
              (alpha-src (gst_bin_get_by_name alpha-pipeline "src"))
              (alpha-sink (gst_bin_get_by_name alpha-pipeline "sink")))
          ;; feed drawing into src
          (let ((data (cairo_image_surface_get_data (get-handle surface)))
                (size (* pixels 4))
                (alpha-size (/ (* pixels 12) 8))
                (timestamp 0)
                (duration 100))
            (let ((color-buffer (make-u8vector size))
                  (color-info (make-u64vector 2))
                  (alpha-buffer (make-u8vector alpha-size))
                  (alpha-info (make-u64vector 2))
                  (alpha-data (heap-calloc alpha-size 1)))
              (separate-alpha data alpha-data pixels)
              (gst_app_src_write4 color-src data size timestamp duration)
              (gst_app_src_write4 alpha-src alpha-data alpha-size timestamp duration)
              ;; retrieve frames from sink
              (let ((color-bytes (gst_app_sink_wait task exit color-fifo color-sink color-buffer color-info))
                    (alpha-bytes (gst_app_sink_wait task exit alpha-fifo alpha-sink alpha-buffer alpha-info)))
                (let ((timestamp (u64vector-ref color-info 0))
                      (duration (u64vector-ref color-info 1)))
                  ;(debug (- (real-time) start) color-bytes alpha-bytes)
                  (values (subu8vector color-buffer 0 color-bytes) (subu8vector alpha-buffer 0 alpha-bytes) timestamp duration)))))))))
  
  
  (method protected (reset self)
    (gst_element_set_state color-pipeline GST_STATE_READY)
    (gst_element_set_state color-pipeline GST_STATE_PLAYING)
    (gst_element_set_state alpha-pipeline GST_STATE_READY)
    (gst_element_set_state alpha-pipeline GST_STATE_PLAYING)))


(definition (make-color-pipeline fifo resolution framerate bitrate)
  (let ((width (get-width resolution))
        (height (get-height resolution)))
    (let ((pipeline (gst-launch "appsrc name=src"
                                "videoconvert name=convert"
                                (tie "video/x-raw, format=I420, width={width}, height={height}, framerate={framerate}/1")
                                (tie "x264enc pass=qual quantizer=20 bitrate={bitrate} tune=zerolatency speed-preset=superfast name=enc")
                                "appsink name=sink")))
      (let ((src (gst_bin_get_by_name pipeline "src"))
            (sink (gst_bin_get_by_name pipeline "sink")))
        (gst_app_sink_signal_new_sample sink fifo)
        (gst-setup-source src "video/x-raw" "BGRA" width height framerate)
        (gst_element_set_state pipeline GST_STATE_PLAYING))
      pipeline)))


(definition (make-alpha-pipeline fifo resolution framerate bitrate)
  (let ((width (get-width resolution))
        (height (get-height resolution)))
    (let ((pipeline (gst-launch "appsrc name=src"
                                (tie "x264enc pass=qual quantizer=20 bitrate={bitrate} tune=zerolatency speed-preset=superfast name=enc")
                                "appsink name=sink")))
      (let ((src (gst_bin_get_by_name pipeline "src"))
            (sink (gst_bin_get_by_name pipeline "sink")))
        (gst_app_sink_signal_new_sample sink fifo)
        (gst-setup-source src "video/x-raw" "I420" width height framerate)
        (gst_element_set_state pipeline GST_STATE_PLAYING))
      pipeline))))
