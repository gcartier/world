;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Vertex Arrays
;;;


(module world.array jazz


(import (jazz.geometry)
        (jazz.graphic)
        (jazz.graphic.opengl.glew)
        (jazz.io)
        (jazz.library)
        (jazz.literals)
        (jazz.media)
        (jazz.network)
        (jazz.platform)
        (jazz.platform.cairo)
        (jazz.runtime)
        (jazz.system)
        (jazz.ui)
        (jazz.ui.dialog)
        (jazz.ui.window)
        (world)
        (world.foreign)
        (time))


;;;
;;;; VAO
;;;


(class VAO extends Object
  
  
  (slot vao        <int>    initialize #f)
  (slot dynamic?   <bool>   initialize #f)
  (slot vbo-length <int>    initialize #f)
   
  
  (method override (initialize (vao: vao #f) (dynamic?: dynamic? #f))
    (if vao
        (set! vao~self vao)
      (generate-buffer))
    (set! dynamic?~self dynamic?))
  
  
  (method public (activate)
    (when vao
      (glEnableClientState GL_VERTEX_ARRAY)
      (glBindBuffer GL_ARRAY_BUFFER vao)))
  
  (method public (deactivate)
    (glBindBuffer GL_ARRAY_BUFFER 0)
    (glDisableClientState GL_VERTEX_ARRAY))
  
  
  ;; Upload data to video card
  (method public (set-vbo vbo)
    (set! vbo-length (/ (f32vector-length vbo) 3))
    (glBindBuffer GL_ARRAY_BUFFER vao)
    (glBufferDataFloat* GL_ARRAY_BUFFER (f32vector-length vbo) vbo (if dynamic? GL_DYNAMIC_DRAW GL_STATIC_DRAW))
    (glBindBuffer GL_ARRAY_BUFFER 0))
  
  
  ;; Enable vertex attrib array before passing values to a shader
  (method public (enable-vertex-attrib location)
    (glEnableVertexAttribArray location))
  
  ;; Disable
  (method public (disable-vertex-attrib location)
    (glDisableVertexAttribArray location))

  
  (method public (draw)
    (when vao
      (glDrawArrays GL_TRIANGLES 0 vbo-length)))
  
  
  ;; Set the vertex attrib pointer to pass to the vertex shader
  ;; By default, this assumes an array of float vec3, and will not normalize entries.
  (method public (set-attrib-pointer location (size: size 3) (type: type GL_FLOAT) (normalize?: normalize? GL_FALSE) (stride: stride 12) (offset: offset 0))
    (glVertexAttribPointerCustom* location size type normalize? stride offset))
  
  
  (method public (generate-buffer)
    (when vao
      (free-resources))
    (set! vao (glGenBuffers*)))
  
  
  (method public (free-resources)
    (when (and vao
               vbo-length)
      (glDeleteVertexArrays* vao)
      (set! vbo-length #f)
      (set! vao #f)))
  
  
  (method override (destroy)
    (free-resources))))
