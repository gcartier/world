;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Enemy
;;;


(module world.enemy jazz


(import (jazz.geometry)
        (jazz.graphic)
        (jazz.graphic.opengl.glew)
        (jazz.io)
        (jazz.library)
        (jazz.literals)
        (jazz.media)
        (jazz.network)
        (jazz.platform)
        (jazz.platform.cairo)
        (jazz.runtime)
        (jazz.system)
        (jazz.ui)
        (jazz.ui.dialog)
        (jazz.ui.window)
        (time)
        (world)
        (world.autoload)
        (world.actor)
        (world.block)
        (world.client.window)
        (world.foreign)
        (world.geometry)
        (world.history)
        (world.object)
        (world.sprite)
        (world.texture)
        (world.window))


;;;
;;;; Enemy
;;;


(class Enemy extends Actor
  
  
  (method (move-enemy elapse exit (gravity?: gravity? #t))
    (let ((old-center (get-center))
          (factor (* elapse 65)))
      (let ((new-x (+ x (* (vertex-x velocity) factor)))
            (new-y (+ y (* (vertex-y velocity) factor)))
            (new-z (+ z (* (vertex-z velocity) factor))))
        (when (< new-y radius-y)
          (hit-floor
            (lambda (y)
              (set! new-y y))
            exit))
        (when gravity?
          (vertex-y-set! velocity (- (vertex-y velocity) (get-gravity~ world))))
        (when (< (vertex-y velocity) -1.0)
          (vertex-y-set! velocity -1.))
        (receive (hit-x hit-y hit-z) (hit-test~ zone self left bottom back (- new-x radius-x) (- new-y radius-y) (- new-z radius-z) width height depth radius-x radius-y radius-z)
          (when hit-x
            (bind (objects direction border reset) hit-x
              (hit objects exit)
              (set! new-x reset)
              (rebound)))
          (when hit-y
            (bind (objects direction border reset) hit-y
              (hit objects exit)
              (set! new-y reset)))
          (when hit-z
            (bind (objects direction border reset) hit-z
              (hit objects exit)
              (set! new-z reset)
              (rebound))))
        (set! x new-x)
        (set! y new-y)
        (set! z new-z)
        (update-position)
        (update-area~ zone self old-center))))
  
  
  (method protected virtual (hit-floor reset exit)
    (reset radius-y))
  
  
  (method protected virtual (hit objects exit)
    (when (memq? player objects)
      (lose~ world)
      (continuation-return exit)))
  
  
  (method protected virtual (rebound)
    (if (< (vertex-x velocity) 0)
        (vertex-x-set! velocity .1)
      (vertex-x-set! velocity -.1))))


;;;
;;;; Turtle
;;;


(definition turtle-speed
  .1)


(class Turtle extends Enemy
  
  
  (slot stomp-time <fl> initialize 0. accessors generate)
  
  
  (method override (prepare rest)
    (nextmethod rest)
    (set! width 2.)
    (set! height 2.)
    (set! depth 2.)
    (set-texture (get-turtle-texture~ world))
    (set-color {Color Green})
    (vertex-x-set! velocity turtle-speed))
  
  
  (method override (tick commands elapse)
    (continuation-capture
      (lambda (exit)
        (if stomp-time
            (when (>= (time->seconds (current-time)) stomp-time)
              (set! stomp-time #f))
          (move-enemy elapse exit)
          (when (and (getf (get-properties~ world) victor?:)
                     (or (< x -35.)
                         (> x -27.)))
            (rebound))))))
  
  
  (method override (stomp)
    (set! stomp-time (+ (time->seconds (current-time)) 3.))
    #t))


;;;
;;;; Monster
;;;


(definition monster-speed
  .25)


(class Monster extends Enemy
  
  
  (slot stomp-time <fl> initialize 0. accessors generate)
  
  
  (method override (prepare rest)
    (nextmethod rest)
    (set! width 50.)
    (set! height 50.)
    (set! depth 50.)
    (set-texture (get-monster-texture~ world))
    (set-color {Color Green})
    (vertex-x-set! velocity monster-speed))
  
  
  (method override (tick commands elapse)
    (continuation-capture
      (lambda (exit)
        (if stomp-time
            (when (>= (time->seconds (current-time)) stomp-time)
              (set! stomp-time #f))
          (move-enemy elapse exit)
          (when (and (getf (get-properties~ world) victor?:)
                     (or (< x -35.)
                         (> x -27.)))
            (rebound))))))
  
  
  (method override (stomp)
    (set! stomp-time (+ (time->seconds (current-time)) 3.))
    #t))


;;;
;;;; Missile
;;;


(definition missile-speed
  1.)


(class Missile extends Enemy
  
  
  (slot start <f32vector> initialize (make-vertex) getter generate)
  
  
  (method override (prepare rest)
    (nextmethod rest)
    (set! width .5)
    (set! height .5)
    (set! depth .5)
    (set-texture (get-missile-texture~ world))
    (set-color {Color Red}))
  
  
  (method override (finish rest)
    (nextmethod rest)
    (vertex-copy! start center))
  
  
  (method override (tick commands elapse)
    (continuation-capture
      (lambda (exit)
        (move-enemy elapse exit gravity?: #f)
        ;; initial poor man boundaries
        (when (> (vertex-distance start center) 250.0)
          (remove-self)))))
  
  
  (method override (hit-floor reset exit)
    (remove-self)
    (continuation-return exit))
  
  
  (method override (hit objects exit)
    (define (explode obj)
      (play-sound (get-explosion-sound~ world))
      (editor-remove-sprite~ world obj))
    
    (nextmethod objects exit)
    (when (not-null? objects)
      (for-each (lambda (obj)
                  (unless (is? obj Missile)
                    (explode obj)))
                objects)
      (remove-self)
      (continuation-return exit)))
  
  
  (method (remove-self)
    (remove-sprite~ world self))
  
  
  (method override (rebound)
    )
  
  
  (method override (draw-3d)
    (glPushMatrix)
    (glTranslatef x y z)
    (glColor4f red green blue alpha)
    (draw-sphere)
    (glPopMatrix))))
