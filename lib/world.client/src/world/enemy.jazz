;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Enemy
;;;


(module world.enemy jazz


(import (jazz.geometry)
        (jazz.graphic)
        (jazz.graphic.opengl.glew)
        (jazz.io)
        (jazz.library)
        (jazz.literals)
        (jazz.media)
        (jazz.network)
        (jazz.platform)
        (jazz.platform.cairo)
        (jazz.runtime)
        (jazz.system)
        (jazz.ui)
        (jazz.ui.dialog)
        (jazz.ui.window)
        (time)
        (world.autoload)
        (world.actor)
        (world.block)
        (world.client)
        (world.foreign)
        (world.geometry)
        (world.history)
        (world.object)
        (world.sprite)
        (world.texture)
        (world.window))


;;;
;;;; Enemy
;;;


(class Enemy extends Actor
  
  
  (method (move-enemy elapse exit)
    (define (player-hit objects)
      (when (memq? (get-player~ world) objects)
        (lose~ world)
        (continuation-return exit)))
    
    (let ((old-left left)
          (old-bottom bottom)
          (old-back back)
          (old-center (get-center))
          (factor (* elapse 65)))
      (increase! x (* (vertex-x velocity) factor))
      (increase! y (* (vertex-y velocity) factor))
      (when (< y 1.)
        (set! y 1.))
      (vertex-y-set! velocity (- (vertex-y velocity) (get-gravity~ world)))
      (when (< (vertex-y velocity) -1.0)
        (vertex-y-set! velocity -1.))
      (receive (hit-x hit-y hit-z) (hit-test~ world self old-left old-bottom old-back (- x radius-x) (- y radius-y) (- z radius-z) width height depth radius-x radius-y radius-z)
        (when hit-x
          (bind (objects direction border reset) hit-x
            (player-hit objects)
            (set! x reset)
            (reverse-speed)))
        (when hit-y
          (bind (objects direction border reset) hit-y
            (player-hit objects)
            (set! y reset)))
        (when hit-z
          (bind (objects direction border reset) hit-z
            (player-hit objects)
            (set! z reset)
            (reverse-speed))))
      (update-position)
      (update-area~ world self old-center)))
    
  
  (method (reverse-speed)
    (if (< (vertex-x velocity) 0)
        (vertex-x-set! velocity .1)
      (vertex-x-set! velocity -.1))))


;;;
;;;; Turtle
;;;


(definition turtle-speed
  .1)


(class Turtle extends Enemy
  
  
  (slot stomp-time <fl> initialize 0. accessors generate)
  
  
  (method override (initialize . rest)
    (apply nextmethod rest)
    (vertex-x-set! velocity turtle-speed))
  
  
  (method override (tick commands elapse)
    (continuation-capture
      (lambda (exit)
        (if stomp-time
            (when (>= (time->seconds (current-time)) stomp-time)
              (set! stomp-time #f))
          (move-enemy elapse exit)
          (when (and (getf (get-properties~ world) victor?:)
                     (or (< x -35.)
                         (> x -27.)))
            (reverse-speed))))))
  
  
  (method override (stomp)
    (set! stomp-time (+ (time->seconds (current-time)) 3.))
    #t)
  
  
  (method override (serialize-sprite)
    (list 'turtle x y z)))


;;;
;;;; Missile
;;;


(definition missile-speed
  .5)


(class Missile extends Enemy))
