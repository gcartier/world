;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Enemy
;;;


(module world.enemy jazz


(import (jazz.geometry)
        (jazz.graphic)
        (jazz.graphic.opengl.glew)
        (jazz.io)
        (jazz.library)
        (jazz.literals)
        (jazz.media)
        (jazz.network)
        (jazz.platform)
        (jazz.platform.cairo)
        (jazz.runtime)
        (jazz.system)
        (jazz.ui)
        (jazz.ui.dialog)
        (jazz.ui.window)
        (time)
        (world.autoload)
        (world.actor)
        (world.block)
        (world.client)
        (world.foreign)
        (world.geometry)
        (world.history)
        (world.object)
        (world.sprite)
        (world.texture)
        (world.window))


;;;
;;;; Enemy
;;;


(class Enemy extends Actor)


;;;
;;;; Turtle
;;;


(definition turtle-speed
  .1)


(class Turtle extends Enemy
  
  
  (slot vx         <fl> initialize 0. accessors generate)
  (slot vy         <fl> initialize 0. accessors generate)
  (slot stomp-time <fl> initialize 0. accessors generate)
  
  
  (method override (initialize . rest)
    (apply nextmethod rest)
    (set! vx turtle-speed))
  
  
  (method override (tick commands elapse)
    (continuation-capture
      (lambda (exit)
        (define (player-hit objects)
          (when (memq? (get-player~ world) objects)
            (lose~ world)
            (continuation-return exit)))
        
        (define (reverse-speed)
          (if (< vx 0)
              (set! vx .1)
            (set! vx -.1)))
        
        (if stomp-time
            (when (>= (time->seconds (current-time)) stomp-time)
              (set! stomp-time #f))
          (let ((old-left left)
                (old-bottom bottom)
                (old-back back)
                (old-center (get-center))
                (factor (* elapse 65)))
            (increase! x (* vx factor))
            (increase! y (* vy factor))
            (when (< y 1.)
              (set! y 1.))
            (decrease! vy (get-gravity~ world))
            (when (< vy -1.0)
              (set! vy -1.))
            (receive (hit-x hit-y hit-z) (hit-test~ world self old-left old-bottom old-back (- x radius-x) (- y radius-y) (- z radius-z) width height depth radius-x radius-y radius-z)
              (when hit-x
                (bind (objects direction border reset) hit-x
                  (player-hit objects)
                  (set! x reset)
                  (reverse-speed)))
              (when hit-y
                (bind (objects direction border reset) hit-y
                  (player-hit objects)
                  (set! y reset)))
              (when hit-z
                (bind (objects direction border reset) hit-z
                  (player-hit objects)
                  (set! z reset)
                  (reverse-speed))))
            (when (and (getf (get-properties~ world) victor?:)
                       (or (< x -35.)
                           (> x -27.)))
              (reverse-speed))
            (update-position)
            (update-area~ world self old-center))))))
  
  
  (method override (stomp)
    (set! stomp-time (+ (time->seconds (current-time)) 3.))
    #t)
  
  
  (method override (serialize-sprite)
    (list 'turtle x y z))))
