;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; BBR
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;    Barbara Samson


(module world.bbr jazz


(import (jazz.foreign))


;;;
;;;; Lexicon
;;;


;; ecn : explicit congestion notification
;; ece : bit set by ecn
;; plb : protective load balancing
;; ca : congestion avoidance
;; cb : control buffer
;; ss : slow start
;; mss : maximum segment size
;; tso : large segment offload
;; gso : generic segmentation offload
;; tlp : tail loss probe
;; sacks : selective acks
;; dctcp : data center tcp

;; sk : socket
;; sk_buff : socket packet

;; bbr : internal
;; bbr_info : diagnostic

;; bdp : bandwidth-delay product


;;;
;;;; Include
;;;


(c-declare include #/C/

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef uint8_t __u8;
typedef uint16_t __u16;
typedef uint32_t __u32;
typedef uint64_t __u64;

typedef uint8_t u8;
typedef uint16_t u16;
typedef uint32_t u32;
typedef uint64_t u64;

typedef int8_t __s8;
typedef int16_t __s16;
typedef int32_t __s32;
typedef int64_t __s64;

typedef int8_t s8;
typedef int16_t s16;
typedef int32_t s32;
typedef int64_t s64;

#define likely(x) x
#define unlikely(x) x

#define do_div(n,base) ({					\
	uint32_t __base = (base);				\
	uint32_t __rem;						\
	__rem = ((uint64_t)(n)) % __base;			\
	(n) = ((uint64_t)(n)) / __base;				\
	__rem;							\
 })

static inline u64 div_u64_rem(u64 dividend, u32 divisor, u32 *remainder)
{
	*remainder = do_div(dividend, divisor);
	return dividend;
}

static inline u64 div_u64(u64 dividend, u32 divisor)
{
	u32 remainder;
	return div_u64_rem(dividend, divisor, &remainder);
}

#define READ_ONCE(x) x

#define WARN_ONCE(condition, format...) condition
#define WARN_ON_ONCE(x) x

#define pr_debug(...)

#define __bpf_kfunc


//
/// include/linux/ktime.h
//

/* Nanosecond scalar representation for kernel time values */
typedef s64	ktime_t;


//
/// include/linux/math.h
//

#define DIV_ROUND_DOWN_ULL(ll, d) \
	({ unsigned long long _tmp = (ll); do_div(_tmp, d); _tmp; })

#define DIV_ROUND_UP_ULL(ll, d) \
	DIV_ROUND_DOWN_ULL((unsigned long long)(ll) + (d) - 1, (d))


//
/// include/vdso/time64.h
//

/* Parameters used to convert the timespec values: */
#define MSEC_PER_SEC	1000L
#define USEC_PER_MSEC	1000L
#define NSEC_PER_USEC	1000L
#define NSEC_PER_MSEC	1000000L
#define USEC_PER_SEC	1000000L
#define NSEC_PER_SEC	1000000000L
#define PSEC_PER_SEC	1000000000000LL
#define FSEC_PER_SEC	1000000000000000LL


//
/// include/linux/bits.h
//

#define BITS_PER_BYTE		8


//
/// include/linux/bitops.h
//

#define BITS_PER_TYPE(type)	(sizeof(type) * BITS_PER_BYTE)


//
/// include/linux/jiffies.h
//

// jiffies are in msecs
#define HZ 1000

#define HZ_TO_USEC_NUM 1000000
#define HZ_TO_USEC_DEN HZ

#define MAX_JIFFY_OFFSET ((LONG_MAX >> 1)-1)

static unsigned long msecs_to_jiffies(const unsigned int m)
{
	return m;
}

unsigned int jiffies_to_usecs(const unsigned long j)
{
	return (j * HZ_TO_USEC_NUM) / HZ_TO_USEC_DEN;
}


//
/// include/linux/netdevice.h
//

#define LL_MAX_HEADER 96

#define MAX_HEADER (LL_MAX_HEADER + 48)

//~tso	#define GSO_LEGACY_MAX_SIZE	65536u


//
/// include/linux/minmax.h
//

#define __cmp(x, y, op)	((x) op (y) ? (x) : (y))

#define __cmp_once(x, y, op) ({	\
		typeof(x) __x = (x);		\
		typeof(y) __y = (y);		\
		__cmp(__x, __y, op); })

#define min(x, y)	__cmp_once(x, y, <)

#define max(x, y)	__cmp_once(x, y, >)

#define min_t(type, x, y)	__cmp_once((type)(x), (type)(y), <)

#define max_t(type, x, y)	__cmp_once((type)(x), (type)(y), >)


//
/// include/linux/log2.h
//

//~ecn	#define ilog2(n) ((int)(log(n)/log(2))) // bazoo not sure


//
/// include/linux/random.h
//

/*
 * Returns a random integer in the interval [0, ceil), with uniform
 * distribution, suitable for all uses. Fastest when ceil is a constant, but
 * still fast for variable ceil as well.
 */
static inline u32 get_random_u32_below(u32 ceil)
{
	return (rand() % ceil);
}


//
/// include/linux/win_minmax.h
//

/* A single data point for our parameterized min-max tracker */
struct minmax_sample {
	u32	t;	/* time measurement was taken */
	u32	v;	/* value measured */
};

/* State for the parameterized min-max tracker */
struct minmax {
	struct minmax_sample s[3];
};

static inline u32 minmax_get(const struct minmax *m)
{
	return m->s[0].v;
}

static inline u32 minmax_reset(struct minmax *m, u32 t, u32 meas)
{
	struct minmax_sample val = { .t = t, .v = meas };

	m->s[2] = m->s[1] = m->s[0] = val;
	return m->s[0].v;
}


//
/// include/uapi/linux/inet_diag.h
//

struct tcp_bbr_info {
	/* u64 bw: max-filtered BW (app throughput) estimate in Byte per sec: */
	__u32	bbr_bw_lo;		/* lower 32 bits of bw */
	__u32	bbr_bw_hi;		/* upper 32 bits of bw */
	__u32	bbr_min_rtt;		/* min-filtered RTT in uSec */
	__u32	bbr_pacing_gain;	/* pacing gain shifted left 8 bits */
	__u32	bbr_cwnd_gain;		/* cwnd gain shifted left 8 bits */
	__u32	bbr_bw_hi_lsb;		/* lower 32 bits of bw_hi */
	__u32	bbr_bw_hi_msb;		/* upper 32 bits of bw_hi */
	__u32	bbr_bw_lo_lsb;		/* lower 32 bits of bw_lo */
	__u32	bbr_bw_lo_msb;		/* upper 32 bits of bw_lo */
	__u8	bbr_mode;		/* current bbr_mode in state machine */
	__u8	bbr_phase;		/* current state machine phase */
	__u8	unused1;		/* alignment padding; not used yet */
	__u8	bbr_version;		/* BBR algorithm version */
	__u32	bbr_inflight_lo;	/* lower short-term data volume bound */
	__u32	bbr_inflight_hi;	/* higher long-term data volume bound */
	__u32	bbr_extra_acked;	/* max excess packets ACKed in epoch */
};

/* TCP BBR congestion control bbr_phase as reported in netlink/ss stats. */
enum tcp_bbr_phase {
	BBR_PHASE_INVALID		= 0,
	BBR_PHASE_STARTUP		= 1,
	BBR_PHASE_DRAIN			= 2,
	BBR_PHASE_PROBE_RTT		= 3,
	BBR_PHASE_PROBE_BW_UP		= 4,
	BBR_PHASE_PROBE_BW_DOWN		= 5,
	BBR_PHASE_PROBE_BW_CRUISE	= 6,
	BBR_PHASE_PROBE_BW_REFILL	= 7,
};


//
/// include/uapi/linux/tcp.h
//

enum tcp_ca_state {
	/*
	 * Nothing bad has been observed recently.
	 * No apparent reordering, packet loss, or ECN marks.
	 */
	TCP_CA_Open = 0,
	/*
	 * The sender enters disordered state when it has received DUPACKs or
	 * SACKs in the last round of packets sent. This could be due to packet
	 * loss or reordering but needs further information to confirm packets
	 * have been lost.
	 */
	TCP_CA_Disorder = 1,
	/*
	 * The sender enters Congestion Window Reduction (CWR) state when it
	 * has received ACKs with ECN-ECE marks, or has experienced congestion
	 * or packet discard on the sender host (e.g. qdisc).
	 */
	TCP_CA_CWR = 2,
	/*
	 * The sender is in fast recovery and retransmitting lost packets,
	 * typically triggered by ACK events.
	 */
	TCP_CA_Recovery = 3,
	/*
	 * The sender is in loss recovery triggered by retransmission timeout.
	 */
	TCP_CA_Loss = 4
};


//
/// include/net/netns/ipv4.h
//

//~tso	static u8 sysctl_tcp_min_tso_segs = 2;
//~plb	static u8 sysctl_tcp_plb_enabled = 0;


//
/// include/net/sock.h
//

struct sock {
//~tcp	u32			sk_pacing_status; /* see enum sk_pacing */
	unsigned long		sk_pacing_rate; /* bytes per second */
//~tso	unsigned int		sk_gso_max_size;
//~tso	u8			sk_pacing_shift;
};


//
/// include/linux/skbuff.h
//

struct sk_buff {
	union {
		u64		skb_mstamp_ns; /* earliest departure time */
	};
	/*
	 * This is the control buffer. It is free to use for every
	 * layer. Please put your private variables there. If you
	 * want to keep them across layers you have to do a skb_clone()
	 * first. This is owned by whoever has the skb queued ATM.
	 */
	char			cb[48];
};


//
/// include/net/inet_sock.h
//

struct ip_options {
};

struct inet_sock {
	/* sk and pinet6 has to be the first two members of inet_sock */
	struct sock		sk;
};

enum sk_pacing {
	SK_PACING_NONE		= 0,
	SK_PACING_NEEDED	= 1,
	SK_PACING_FQ		= 2,
};


//
/// include/net/inet_connection_sock.h
//

struct inet_connection_sock {
	/* inet_sock has to be the first member! */
	struct inet_sock	  icsk_inet;
	__u8			  icsk_ca_state:5;
//~ecn	struct {
//~ecn		__u8		  pending;	 /* ACK is pending			   */
//~ecn	} icsk_ack;

#define ICSK_CA_PRIV_SIZE      (144)
	u64			  icsk_ca_priv[ICSK_CA_PRIV_SIZE / sizeof(u64)];
};

enum inet_csk_ack_state_t {
	ICSK_ACK_SCHED	= 1,
	ICSK_ACK_TIMER  = 2,
	ICSK_ACK_PUSHED = 4,
	ICSK_ACK_PUSHED2 = 8,
	ICSK_ACK_NOW = 16	/* Send the next ACK immediately (once) */
};

static inline struct inet_connection_sock *inet_csk(const struct sock *sk)
{
	return (struct inet_connection_sock *)sk;
}

static inline void *inet_csk_ca(const struct sock *sk)
{
	return (void*) inet_csk(sk)->icsk_ca_priv;
}


//
/// include/linux/tcp.h
//

struct tcp_sock {
	/* inet_connection_sock has to be the first member of tcp_sock */
	struct inet_connection_sock	inet_conn;
/*
 *	RFC793 variables by their proper names. This means you can
 *	read the code and the spec side by side (and laugh ...)
 *	See RFC793 and RFC1122. The RFC writes these in capitals.
 */
//~plb 	u32	rcv_nxt;	/* What we want to receive next 	*/
//~tcp 	u32	snd_nxt;	/* Next sequence we send		*/

	u32	mss_cache;	/* Cached effective mss, not including SACKS */
	
//~tlp	u8	tlp_orig_data_app_limited:1, /* app-limited before TLP rtx? */
	u8	is_cwnd_limited:1;/* forward progress limited by snd_cwnd? */

//~tcp	u64	tcp_wstamp_ns;	/* departure time for next sent data packet */
	u64	tcp_clock_cache; /* cache last tcp_clock_ns() (see tcp_mstamp_refresh()) */
	
	/* RTT measurement */
	u64	tcp_mstamp;	/* most recent packet received/sent */
	u32	srtt_us;	/* smoothed round trip time << 3 in usecs */
	struct  minmax rtt_min;
	
	u32	packets_out;	/* Packets which are "in flight"	*/
//~tcp	u32	retrans_out;	/* Retransmitted packets out		*/
	
//~ecn	u8	ecn_flags;	/* ECN status bits.			*/

/*
 *	Slow start and congestion control (see also Nagle, and Karn & Partridge)
 */
 	u32	snd_ssthresh;	/* Slow start size threshold		*/
 	u32	snd_cwnd;	/* Sending congestion window		*/
	u32	snd_cwnd_clamp; /* Do not allow snd_cwnd to grow above this */
	u32	prior_cwnd;	/* cwnd right before starting loss recovery */
	u32	delivered;	/* Total data packets delivered incl. rexmits */
//~ecn	u32	delivered_ce;	/* Like the above but only ECE marked packets */
	u32	lost;		/* Total data packets lost incl. rexmits */
	u32	app_limited;	/* limited until "delivered" reaches this val */
	u64	first_tx_mstamp;  /* start of window send phase */
	u64	delivered_mstamp; /* time we reached "delivered" */
	u32	rate_delivered;    /* saved rate sample: packets delivered */
	u32	rate_interval_us;  /* saved rate sample: time elapsed */
	
//~tcp	u32	write_seq;	/* Tail(+1) of data held in tcp send buffer */
//~tcp	u32	lost_out;	/* Lost packets			*/
//~tcp	u32	sacked_out;	/* SACK'd packets			*/
};

static struct tcp_sock* tcp_sk(const struct sock* sk) {
	return (struct tcp_sock*) sk;
}


//
/// include/net/tcp.h
//

//~tso	#define MAX_TCP_HEADER	L1_CACHE_ALIGN(128 + MAX_HEADER)

//~ecn	#define	TCP_ECN_OK		1
//~ecn	#define	TCP_ECN_QUEUE_CWR	2
//~ecn	#define	TCP_ECN_DEMAND_CWR	4
//~ecn	#define	TCP_ECN_SEEN		8
//~ecn	#define	TCP_ECN_LOW		16
//~ecn	#define	TCP_ECN_ECT_PERMANENT	32

#define TCP_INIT_CWND		10

/* Events passed to congestion control interface */
enum tcp_ca_event {
	CA_EVENT_TX_START,	/* first transmit when no packets in flight */
	CA_EVENT_CWND_RESTART,	/* congestion window restart */
	CA_EVENT_COMPLETE_CWR,	/* end of congestion recovery */
	CA_EVENT_LOSS,		/* loss timeout */
//~ecn	CA_EVENT_ECN_NO_CE,	/* ECT set, but not CE marked */
//~ecn	CA_EVENT_ECN_IS_CE,	/* received CE marked IP packet */
//~tlp	CA_EVENT_TLP_RECOVERY,	/* a lost segment was repaired by TLP probe */
};

/* TCP uses 32bit jiffies to save some space.
 * Note that this is different from tcp_time_stamp, which
 * historically has been the same until linux-4.13.
 */
// bazoo these are passed from current-monotonic-nanoseconds
static u64 timer_base;
static u64 timer_frequency;

static u64 timer_to_ns(u64 timer)
{
	return ((timer - timer_base) / (float) timer_frequency * 1000000000);
}

static u32 tcp_jiffies32;

static void tcp_update_jiffies(u64 timer)
{
	tcp_jiffies32 = (u32) ((timer - timer_base) / (float) timer_frequency * HZ);
}

static inline bool before(__u32 seq1, __u32 seq2)
{
	return (__s32)(seq1-seq2) < 0;
}
#define after(seq2, seq1) 	before(seq1, seq2)

/* This is what the send packet queuing engine uses to pass
 * TCP per-packet control information to the transmission code.
 * We also store the host-order sequence numbers in here too.
 * This is 44 bytes if IPV6 is enabled.
 * If this grows please adjust skbuff.h:skbuff->cb[xxx] size appropriately.
 */
struct tcp_skb_cb {
	__u32		seq;		/* Starting sequence number	*/
	__u32		end_seq;	/* SEQ + FIN + SYN + datalen	*/

	u16     	tcp_gso_segs;

	__u8		sacked;		/* State flags for SACK.	*/
#define TCPCB_SACKED_ACKED	0x01	/* SKB ACK'd by a SACK block	*/
#define TCPCB_SACKED_RETRANS	0x02	/* SKB retransmitted		*/
#define TCPCB_LOST		0x04	/* SKB is lost			*/
#define TCPCB_TAGBITS		0x07	/* All tag bits			*/
#define TCPCB_REPAIRED		0x10	/* SKB repaired (no skb_mstamp_ns)	*/
#define TCPCB_EVER_RETRANS	0x80	/* Ever retransmitted frame	*/
#define TCPCB_RETRANS		(TCPCB_SACKED_RETRANS|TCPCB_EVER_RETRANS| \
				TCPCB_REPAIRED)

	union {
		struct {
			/* There is space for up to 24 bytes */
			__u32 is_app_limited:1, /* cwnd not fully used? */
//~ecn			      delivered_ce:20,
			      unused:11;
			/* pkts S/ACKed so far upon tx of skb, incl retrans: */
			__u32 delivered;
			/* start of send pipeline phase */
			u32 first_tx_mstamp;
			/* when we reached the "delivered" count */
			u32 delivered_mstamp;
#define TCPCB_IN_FLIGHT_BITS 20
#define TCPCB_IN_FLIGHT_MAX ((1U << TCPCB_IN_FLIGHT_BITS) - 1)
			u32 in_flight:20,   /* packets in flight at transmit */
			    unused2:12;
			u32 lost;	/* packets lost so far upon tx of skb */
		} tx;   /* only used for outgoing skbs */
	};
};

#define TCP_SKB_CB(__skb)	((struct tcp_skb_cb *)&((__skb)->cb[0]))

/* A rate sample measures the number of (original/retransmitted) data
 * packets delivered "delivered" over an interval of time "interval_us".
 * The tcp_rate.c code fills in the rate sample, and congestion
 * control modules that define a cong_control function to run at the end
 * of ACK processing can optionally chose to consult this sample when
 * setting cwnd and pacing rate.
 * A sample is invalid if "delivered" or "interval_us" is negative.
 */
struct rate_sample {
	u64  prior_mstamp;	/* starting timestamp for interval */
	u32  prior_lost;	/* tp->lost at "prior_mstamp" */
	u32  prior_delivered;	/* tp->delivered at "prior_mstamp" */
//~ecn	u32  prior_delivered_ce;/* tp->delivered_ce at "prior_mstamp" */
	u32 tx_in_flight;	/* packets in flight at starting timestamp */
	s32  lost;		/* number of packets lost over interval */
	s32  delivered;		/* number of packets delivered over interval */
//~ecn	s32  delivered_ce;	/* packets delivered w/ CE mark over interval */
	long interval_us;	/* time for tp->delivered to incr "delivered" */
	u32 snd_interval_us;	/* snd interval for delivered packets */
	u32 rcv_interval_us;	/* rcv interval for delivered packets */
	long rtt_us;		/* RTT of last (S)ACKed packet (or -1) */
	int  losses;		/* number of packets marked lost upon ACK */
	u32  acked_sacked;	/* number of packets newly (S)ACKed upon ACK */
	u32  prior_in_flight;	/* in flight before this ACK */
	u32  last_end_seq;	/* end_seq of most recently ACKed packet */
	bool is_app_limited;	/* is sample from packet with bubble in pipe? */
	bool is_retrans;	/* is sample from retransmission? */
//~tlp	bool is_acking_tlp_retrans_seq;  /* ACKed a TLP retransmit sequence? */
//~tcp	bool is_ack_delayed;	/* is this (likely) a delayed ACK? */
//~ecn	bool is_ece;		/* did this ACK have ECN marked? */
};

static inline u32 tcp_stamp_us_delta(u64 t1, u64 t0)
{
	return max_t(s64, t1 - t0, 0);
}

//~plb	/* State for PLB (Protective Load Balancing) for a single TCP connection. */
//~plb	struct tcp_plb_state {
//~plb		u8	consec_cong_rounds:5, /* consecutive congested rounds */
//~plb			unused:3;
//~plb		u32	pause_until; /* jiffies32 when PLB can resume rerouting */
//~plb	} __attribute__ ((__packed__));

/* Due to TSO, an SKB can be composed of multiple actual
 * packets.  To keep these tracked properly, we use this.
 */
static inline int tcp_skb_pcount(const struct sk_buff *skb)
{
	return TCP_SKB_CB(skb)->tcp_gso_segs;
}

static inline u32 tcp_stamp32_us_delta(u32 t1, u32 t0)
{
	return max_t(s32, t1 - t0, 0);
}

/* provide the departure time in us unit */
static inline u64 tcp_skb_timestamp_us(const struct sk_buff *skb)
{
	return div_u64(skb->skb_mstamp_ns, NSEC_PER_USEC);
}

static inline bool tcp_skb_sent_after(u64 t1, u64 t2, u32 seq1, u32 seq2)
{
	return t1 > t2 || (t1 == t2 && after(seq1, seq2));
}

/* If a retransmit failed due to local qdisc congestion or other local issues,
 * then we may have called tcp_set_skb_tso_segs() to increase the number of
 * segments in the skb without increasing the tx.in_flight. In all other cases,
 * the tx.in_flight should be at least as big as the pcount of the sk_buff.  We
 * do not have the state to know whether a retransmit failed due to local qdisc
 * congestion or other local issues, so to avoid spurious warnings we consider
 * that any skb marked lost may have suffered that fate.
 */
static inline bool tcp_skb_tx_in_flight_is_suspicious(u32 skb_pcount,
						      u32 skb_sacked_flags,
						      u32 tx_in_flight)
{
	return (skb_pcount > tx_in_flight) && !(skb_sacked_flags & TCPCB_LOST);
}

//~plb	void tcp_plb_update_state(const struct sock *sk, struct tcp_plb_state *plb, const int cong_ratio);
//~plb	void tcp_plb_check_rehash(struct sock *sk, struct tcp_plb_state *plb);
//~plb	void tcp_plb_update_state_upon_rto(struct sock *sk, struct tcp_plb_state *plb);
//~plb	void __tcp_send_ack(struct sock *sk, u32 rcv_nxt)

/* Minimum RTT in usec. ~0 means not available. */
static inline u32 tcp_min_rtt(const struct tcp_sock *tp)
{
	return minmax_get(&tp->rtt_min);
}

#define TCP_INFINITE_SSTHRESH	0x7fffffff

static inline u32 tcp_snd_cwnd(const struct tcp_sock *tp)
{
	return tp->snd_cwnd;
}

static inline void tcp_snd_cwnd_set(struct tcp_sock *tp, u32 val)
{
	tp->snd_cwnd = val;
}

static inline unsigned long tcp_pacing_rate(const struct tcp_sock *tp)
{
	struct sock *sk = (struct sock *) tp;
	return sk->sk_pacing_rate;
}

//~tcp	static inline unsigned int tcp_left_out(const struct tcp_sock *tp)
//~tcp	{
//~tcp	return tp->sacked_out + tp->lost_out;
//~tcp	}

/* This determines how many packets are "in the network" to the best
 * of our knowledge.  In many cases it is conservative, but where
 * detailed information is available from the receiver (via SACK
 * blocks etc.) we can make more aggressive calculations.
 *
 * Use this for decisions involving congestion control, use just
 * tp->packets_out to determine if the send queue is empty or not.
 *
 * Read this equation as:
 *
 *	"Packets sent once on transmission queue" MINUS
 *	"Packets left network, but not honestly ACKed yet" PLUS
 *	"Packets fast retransmitted"
 */
static inline unsigned int tcp_packets_in_flight(const struct tcp_sock *tp)
{
	return tp->packets_out; //~tcp - tcp_left_out(tp) + tp->retrans_out;
}


//~ecn	//
//~ecn	/// net/ipv4/tcp_dctcp.h
//~ecn	//
//~ecn	
//~ecn	static inline void dctcp_ece_ack_cwr(struct sock *sk, u32 ce_state)
//~ecn	{
//~ecn	struct tcp_sock *tp = tcp_sk(sk);
//~ecn
//~ecn	if (ce_state == 1)
//~ecn		tp->ecn_flags |= TCP_ECN_DEMAND_CWR;
//~ecn	else
//~ecn		tp->ecn_flags &= ~TCP_ECN_DEMAND_CWR;
//~ecn	}
//~ecn	
//~ecn	/* Minimal DCTP CE state machine:
//~ecn	 *
//~ecn	 * S:	0 <- last pkt was non-CE
//~ecn	 *	1 <- last pkt was CE
//~ecn	 */
//~ecn	static inline void dctcp_ece_ack_update(struct sock *sk, enum tcp_ca_event evt,
//~ecn						u32 *prior_rcv_nxt, u32 *ce_state)
//~ecn	{
//~ecn	u32 new_ce_state = (evt == CA_EVENT_ECN_IS_CE) ? 1 : 0;
//~ecn
//~ecn	if (*ce_state != new_ce_state) {
//~ecn		/* CE state has changed, force an immediate ACK to
//~ecn		 * reflect the new CE state. If an ACK was delayed,
//~ecn		 * send that first to reflect the prior CE state.
//~ecn		 */
//~ecn		if (inet_csk(sk)->icsk_ack.pending & ICSK_ACK_TIMER) {
//~ecn			dctcp_ece_ack_cwr(sk, *ce_state);
//~ecn			__tcp_send_ack(sk, *prior_rcv_nxt);
//~ecn		}
//~ecn		inet_csk(sk)->icsk_ack.pending |= ICSK_ACK_NOW;
//~ecn	}
//~ecn	*prior_rcv_nxt = tcp_sk(sk)->rcv_nxt;
//~ecn	*ce_state = new_ce_state;
//~ecn	dctcp_ece_ack_cwr(sk, new_ce_state);
//~ecn	}

//#)


;;;
;;;; MinMax
;;;


(c-declare win_minmax #/C/

//
/// lib/win_minmax.c
//

/*
 * lib/minmax.c: windowed min/max tracker
 *
 * Kathleen Nichols' algorithm for tracking the minimum (or maximum)
 * value of a data stream over some fixed time interval.  (E.g.,
 * the minimum RTT over the past five minutes.) It uses constant
 * space and constant time per update yet almost always delivers
 * the same minimum as an implementation that has to keep all the
 * data in the window.
 *
 * The algorithm keeps track of the best, 2nd best & 3rd best min
 * values, maintaining an invariant that the measurement time of
 * the n'th best >= n-1'th best. It also makes sure that the three
 * values are widely separated in the time window since that bounds
 * the worse case error when that data is monotonically increasing
 * over the window.
 *
 * Upon getting a new min, we can forget everything earlier because
 * it has no value - the new min is <= everything else in the window
 * by definition and it's the most recent. So we restart fresh on
 * every new min and overwrites 2nd & 3rd choices. The same property
 * holds for 2nd & 3rd best.
 */
// #include <linux/module.h>
// #include <linux/win_minmax.h>

/* As time advances, update the 1st, 2nd, and 3rd choices. */
static u32 minmax_subwin_update(struct minmax *m, u32 win,
				const struct minmax_sample *val)
{
	u32 dt = val->t - m->s[0].t;

	if (unlikely(dt > win)) {
		/*
		 * Passed entire window without a new val so make 2nd
		 * choice the new val & 3rd choice the new 2nd choice.
		 * we may have to iterate this since our 2nd choice
		 * may also be outside the window (we checked on entry
		 * that the third choice was in the window).
		 */
		m->s[0] = m->s[1];
		m->s[1] = m->s[2];
		m->s[2] = *val;
		if (unlikely(val->t - m->s[0].t > win)) {
			m->s[0] = m->s[1];
			m->s[1] = m->s[2];
			m->s[2] = *val;
		}
	} else if (unlikely(m->s[1].t == m->s[0].t) && dt > win/4) {
		/*
		 * We've passed a quarter of the window without a new val
		 * so take a 2nd choice from the 2nd quarter of the window.
		 */
		m->s[2] = m->s[1] = *val;
	} else if (unlikely(m->s[2].t == m->s[1].t) && dt > win/2) {
		/*
		 * We've passed half the window without finding a new val
		 * so take a 3rd choice from the last half of the window
		 */
		m->s[2] = *val;
	}
	return m->s[0].v;
}

/* Check if new measurement updates the 1st, 2nd or 3rd choice max. */
u32 minmax_running_max(struct minmax *m, u32 win, u32 t, u32 meas)
{
	struct minmax_sample val = { .t = t, .v = meas };

	if (unlikely(val.v >= m->s[0].v) ||	  /* found new max? */
	    unlikely(val.t - m->s[2].t > win))	  /* nothing left in window? */
		return minmax_reset(m, t, meas);  /* forget earlier samples */

	if (unlikely(val.v >= m->s[1].v))
		m->s[2] = m->s[1] = val;
	else if (unlikely(val.v >= m->s[2].v))
		m->s[2] = val;

	return minmax_subwin_update(m, win, &val);
}

/* Check if new measurement updates the 1st, 2nd or 3rd choice min. */
u32 minmax_running_min(struct minmax *m, u32 win, u32 t, u32 meas)
{
	struct minmax_sample val = { .t = t, .v = meas };

	if (unlikely(val.v <= m->s[0].v) ||	  /* found new min? */
	    unlikely(val.t - m->s[2].t > win))	  /* nothing left in window? */
		return minmax_reset(m, t, meas);  /* forget earlier samples */

	if (unlikely(val.v <= m->s[1].v))
		m->s[2] = m->s[1] = val;
	else if (unlikely(val.v <= m->s[2].v))
		m->s[2] = val;

	return minmax_subwin_update(m, win, &val);
}

//#)


;;;
;;;; Rate
;;;


(c-declare rate_sample #/C/

// #include <net/tcp.h>

/* The bandwidth estimator estimates the rate at which the network
 * can currently deliver outbound data packets for this flow. At a high
 * level, it operates by taking a delivery rate sample for each ACK.
 *
 * A rate sample records the rate at which the network delivered packets
 * for this flow, calculated over the time interval between the transmission
 * of a data packet and the acknowledgment of that packet.
 *
 * Specifically, over the interval between each transmit and corresponding ACK,
 * the estimator generates a delivery rate sample. Typically it uses the rate
 * at which packets were acknowledged. However, the approach of using only the
 * acknowledgment rate faces a challenge under the prevalent ACK decimation or
 * compression: packets can temporarily appear to be delivered much quicker
 * than the bottleneck rate. Since it is physically impossible to do that in a
 * sustained fashion, when the estimator notices that the ACK rate is faster
 * than the transmit rate, it uses the latter:
 *
 *    send_rate = #pkts_delivered/(last_snd_time - first_snd_time)
 *    ack_rate  = #pkts_delivered/(last_ack_time - first_ack_time)
 *    bw = min(send_rate, ack_rate)
 *
 * Notice the estimator essentially estimates the goodput, not always the
 * network bottleneck link rate when the sending or receiving is limited by
 * other factors like applications or receiver window limits.  The estimator
 * deliberately avoids using the inter-packet spacing approach because that
 * approach requires a large number of samples and sophisticated filtering.
 *
 * TCP flows can often be application-limited in request/response workloads.
 * The estimator marks a bandwidth sample as application-limited if there
 * was some moment during the sampled window of packets when there was no data
 * ready to send in the write queue.
 */

void tcp_set_tx_in_flight(struct sock *sk, struct sk_buff *skb)
{
	struct tcp_sock *tp = tcp_sk(sk);
	u32 in_flight;

	/* Check, sanitize, and record packets in flight after skb was sent. */
	in_flight = tcp_packets_in_flight(tp) + tcp_skb_pcount(skb);
	if (WARN_ONCE(in_flight > TCPCB_IN_FLIGHT_MAX,
		      "insane in_flight %u cc %s mss %u "
		      "cwnd %u pif %u %u %u %u\n",
		      in_flight, inet_csk(sk)->icsk_ca_ops->name,
		      tp->mss_cache, tp->snd_cwnd,
		      tp->packets_out, tp->retrans_out,
		      tp->sacked_out, tp->lost_out))
		in_flight = TCPCB_IN_FLIGHT_MAX;
	TCP_SKB_CB(skb)->tx.in_flight = in_flight;
}

/* Snapshot the current delivery information in the skb, to generate
 * a rate sample later when the skb is (s)acked in tcp_rate_skb_delivered().
 */
void tcp_rate_skb_sent(struct sock *sk, struct sk_buff *skb)
{
	struct tcp_sock *tp = tcp_sk(sk);

	 /* In general we need to start delivery rate samples from the
	  * time we received the most recent ACK, to ensure we include
	  * the full time the network needs to deliver all in-flight
	  * packets. If there are no packets in flight yet, then we
	  * know that any ACKs after now indicate that the network was
	  * able to deliver those packets completely in the sampling
	  * interval between now and the next ACK.
	  *
	  * Note that we use packets_out instead of tcp_packets_in_flight(tp)
	  * because the latter is a guess based on RTO and loss-marking
	  * heuristics. We don't want spurious RTOs or loss markings to cause
	  * a spuriously small time interval, causing a spuriously high
	  * bandwidth estimate.
	  */
	if (!tp->packets_out) {
		u64 tstamp_us = tcp_skb_timestamp_us(skb);

		tp->first_tx_mstamp  = tstamp_us;
		tp->delivered_mstamp = tstamp_us;
	}

	TCP_SKB_CB(skb)->tx.first_tx_mstamp	= tp->first_tx_mstamp;
	TCP_SKB_CB(skb)->tx.delivered_mstamp	= tp->delivered_mstamp;
	TCP_SKB_CB(skb)->tx.delivered		= tp->delivered;
//~ecn	TCP_SKB_CB(skb)->tx.delivered_ce	= tp->delivered_ce;
	TCP_SKB_CB(skb)->tx.lost		= tp->lost;
	TCP_SKB_CB(skb)->tx.is_app_limited	= tp->app_limited ? 1 : 0;
	tcp_set_tx_in_flight(sk, skb);
}

/* When an skb is sacked or acked, we fill in the rate sample with the (prior)
 * delivery information when the skb was last transmitted.
 *
 * If an ACK (s)acks multiple skbs (e.g., stretched-acks), this function is
 * called multiple times. We favor the information from the most recently
 * sent skb, i.e., the skb with the most recently sent time and the highest
 * sequence.
 */
void tcp_rate_skb_delivered(struct sock *sk, struct sk_buff *skb,
			    struct rate_sample *rs)
{
	struct tcp_sock *tp = tcp_sk(sk);
	struct tcp_skb_cb *scb = TCP_SKB_CB(skb);
	u64 tx_tstamp;

	if (!scb->tx.delivered_mstamp)
		return;

	tx_tstamp = tcp_skb_timestamp_us(skb);
	if (!rs->prior_delivered ||
	    tcp_skb_sent_after(tx_tstamp, tp->first_tx_mstamp,
			       scb->end_seq, rs->last_end_seq)) {
		rs->prior_lost	     = scb->tx.lost;
//~ecn		rs->prior_delivered_ce  = scb->tx.delivered_ce;
		rs->prior_delivered  = scb->tx.delivered;
		rs->prior_mstamp     = scb->tx.delivered_mstamp;
		rs->is_app_limited   = scb->tx.is_app_limited;
		rs->is_retrans	     = scb->sacked & TCPCB_RETRANS;
		rs->tx_in_flight     = scb->tx.in_flight;
		rs->last_end_seq     = scb->end_seq;

		/* Record send time of most recently ACKed packet: */
		tp->first_tx_mstamp  = tx_tstamp;
		/* Find the duration of the "send phase" of this window: */
		rs->interval_us      = tcp_stamp32_us_delta(
						tp->first_tx_mstamp,
						scb->tx.first_tx_mstamp);
	}
	/* Mark off the skb delivered once it's sacked to avoid being
	 * used again when it's cumulatively acked. For acked packets
	 * we don't need to reset since it'll be freed soon.
	 */
	if (scb->sacked & TCPCB_SACKED_ACKED)
		scb->tx.delivered_mstamp = 0;
}

/* Update the connection delivery information and generate a rate sample. */
void tcp_rate_gen(struct sock *sk, u32 delivered, u32 lost,
		  bool is_sack_reneg, struct rate_sample *rs)
{
	struct tcp_sock *tp = tcp_sk(sk);
	u32 snd_us, ack_us;

	/* Clear app limited if bubble is acked and gone. */
	if (tp->app_limited && after(tp->delivered, tp->app_limited))
		tp->app_limited = 0;

	/* TODO: there are multiple places throughout tcp_ack() to get
	 * current time. Refactor the code using a new "tcp_acktag_state"
	 * to carry current time, flags, stats like "tcp_sacktag_state".
	 */
	if (delivered)
		tp->delivered_mstamp = tp->tcp_mstamp;

	rs->acked_sacked = delivered;	/* freshly ACKed or SACKed */
	rs->losses = lost;		/* freshly marked lost */
	/* Return an invalid sample if no timing information is available or
	 * in recovery from loss with SACK reneging. Rate samples taken during
	 * a SACK reneging event may overestimate bw by including packets that
	 * were SACKed before the reneg.
	 */
	if (!rs->prior_mstamp || is_sack_reneg) {
		rs->delivered = -1;
		rs->interval_us = -1;
		return;
	}
	rs->delivered   = tp->delivered - rs->prior_delivered;
	rs->lost        = tp->lost - rs->prior_lost;

//~ecn	rs->delivered_ce = tp->delivered_ce - rs->prior_delivered_ce;
//~ecn	/* delivered_ce occupies less than 32 bits in the skb control block */
//~ecn	rs->delivered_ce &= TCPCB_DELIVERED_CE_MASK;

	/* Model sending data and receiving ACKs as separate pipeline phases
	 * for a window. Usually the ACK phase is longer, but with ACK
	 * compression the send phase can be longer. To be safe we use the
	 * longer phase.
	 */
	snd_us = rs->interval_us;				/* send phase */
	ack_us = tcp_stamp32_us_delta(tp->tcp_mstamp,
				    rs->prior_mstamp); /* ack phase */
	rs->interval_us = max(snd_us, ack_us);

	/* Record both segment send and ack receive intervals */
	rs->snd_interval_us = snd_us;
	rs->rcv_interval_us = ack_us;

	/* Normally we expect interval_us >= min-rtt.
	 * Note that rate may still be over-estimated when a spuriously
	 * retransmistted skb was first (s)acked because "interval_us"
	 * is under-estimated (up to an RTT). However continuously
	 * measuring the delivery rate during loss recovery is crucial
	 * for connections suffer heavy or prolonged losses.
	 */
	if (unlikely(rs->interval_us < tcp_min_rtt(tp))) {
		if (!rs->is_retrans)
			pr_debug("tcp rate: %ld %d %u %u %u\n",
				 rs->interval_us, rs->delivered,
				 inet_csk(sk)->icsk_ca_state,
				 tp->rx_opt.sack_ok, tcp_min_rtt(tp));
		rs->interval_us = -1;
		return;
	}

	/* Record the last non-app-limited or the highest app-limited bw */
	if (!rs->is_app_limited ||
	    ((u64)rs->delivered * tp->rate_interval_us >=
	     (u64)tp->rate_delivered * rs->interval_us)) {
		tp->rate_delivered = rs->delivered;
		tp->rate_interval_us = rs->interval_us;
	}
}

/* If a gap is detected between sends, mark the socket application-limited. */
void tcp_rate_check_app_limited(struct sock *sk, bool queue_empty)
{
	struct tcp_sock *tp = tcp_sk(sk);

	if (
//~tcp	    /* We have less than one packet to send. */
//~tcp	    tp->write_seq - tp->snd_nxt < tp->mss_cache &&
	    /* Nothing in sending host's qdisc queues or NIC tx queue. */
	    queue_empty &&
	    /* We are not limited by CWND. */
	    tcp_packets_in_flight(tp) < tcp_snd_cwnd(tp)
//~tcp	    &&
//~tcp	    /* All lost packets have been retransmitted. */
//~tcp	    tp->lost_out <= tp->retrans_out
	    )
		tp->app_limited =
			(tp->delivered + tcp_packets_in_flight(tp)) ? : 1;
}

//#)


;;;
;;;; BBR
;;;


(c-declare bbr #/C/

/* BBR (Bottleneck Bandwidth and RTT) congestion control
 *
 * BBR is a model-based congestion control algorithm that aims for low queues,
 * low loss, and (bounded) Reno/CUBIC coexistence. To maintain a model of the
 * network path, it uses measurements of bandwidth and RTT, as well as (if they
 * occur) packet loss and/or shallow-threshold ECN signals. Note that although
 * it can use ECN or loss signals explicitly, it does not require either; it
 * can bound its in-flight data based on its estimate of the BDP.
 *
 * The model has both higher and lower bounds for the operating range:
 *   lo: bw_lo, inflight_lo: conservative short-term lower bound
 *   hi: bw_hi, inflight_hi: robust long-term upper bound
 * The bandwidth-probing time scale is (a) extended dynamically based on
 * estimated BDP to improve coexistence with Reno/CUBIC; (b) bounded by
 * an interactive wall-clock time-scale to be more scalable and responsive
 * than Reno and CUBIC.
 *
 * Here is a state transition diagram for BBR:
 *
 *             |
 *             V
 *    +---> STARTUP  ----+
 *    |        |         |
 *    |        V         |
 *    |      DRAIN   ----+
 *    |        |         |
 *    |        V         |
 *    +---> PROBE_BW ----+
 *    |      ^    |      |
 *    |      |    |      |
 *    |      +----+      |
 *    |                  |
 *    +---- PROBE_RTT <--+
 *
 * A BBR flow starts in STARTUP, and ramps up its sending rate quickly.
 * When it estimates the pipe is full, it enters DRAIN to drain the queue.
 * In steady state a BBR flow only uses PROBE_BW and PROBE_RTT.
 * A long-lived BBR flow spends the vast majority of its time remaining
 * (repeatedly) in PROBE_BW, fully probing and utilizing the pipe's bandwidth
 * in a fair manner, with a small, bounded queue. *If* a flow has been
 * continuously sending for the entire min_rtt window, and hasn't seen an RTT
 * sample that matches or decreases its min_rtt estimate for 10 seconds, then
 * it briefly enters PROBE_RTT to cut inflight to a minimum value to re-probe
 * the path's two-way propagation delay (min_rtt). When exiting PROBE_RTT, if
 * we estimated that we reached the full bw of the pipe then we enter PROBE_BW;
 * otherwise we enter STARTUP to try to fill the pipe.
 *
 * BBR is described in detail in:
 *   "BBR: Congestion-Based Congestion Control",
 *   Neal Cardwell, Yuchung Cheng, C. Stephen Gunn, Soheil Hassas Yeganeh,
 *   Van Jacobson. ACM Queue, Vol. 14 No. 5, September-October 2016.
 *
 * There is a public e-mail list for discussing BBR development and testing:
 *   https://groups.google.com/forum/#!forum/bbr-dev
 *
 * NOTE: BBR might be used with the fq qdisc ("man tc-fq") with pacing enabled,
 * otherwise TCP stack falls back to an internal pacing using one high
 * resolution timer per TCP socket and may use more resources.
 */
// #include <linux/btf.h>
// #include <linux/btf_ids.h>
// #include <linux/module.h>
// #include <net/tcp.h>
// #include <linux/inet_diag.h>
// #include <linux/inet.h>
// #include <linux/random.h>
// #include <linux/win_minmax.h>
// 
// #include <trace/events/tcp.h>
// #include "tcp_dctcp.h"


//
/// net/ipv4/tcp_bbr.c
//

#define BBR_VERSION		3

// #define bbr_param(sk,name)	(bbr_ ## name)
#define bbr_param(sk,name)	name

/* Scale factor for rate in pkt/uSec unit to avoid truncation in bandwidth
 * estimation. The rate unit ~= (1500 bytes / 1 usec / 2^24) ~= 715 bps.
 * This handles bandwidths from 0.06pps (715bps) to 256Mpps (3Tbps) in a u32.
 * Since the minimum window is >=4 packets, the lower bound isn't
 * an issue. The upper bound isn't an issue with existing technologies.
 */
#define BW_SCALE 24
#define BW_UNIT (1 << BW_SCALE)

#define BBR_SCALE 8	/* scaling factor for fractions in BBR (e.g. gains) */
#define BBR_UNIT (1 << BBR_SCALE)

/* BBR has the following modes for deciding how fast to send: */
enum bbr_mode {
	BBR_STARTUP,	/* ramp up sending rate rapidly to fill pipe */
	BBR_DRAIN,	/* drain any queue created during startup */
	BBR_PROBE_BW,	/* discover, share bw: pace around estimated bw */
	BBR_PROBE_RTT,	/* cut inflight to min to probe min_rtt */
};

/* How does the incoming ACK stream relate to our bandwidth probing? */
enum bbr_ack_phase {
	BBR_ACKS_INIT,		  /* not probing; not getting probe feedback */
	BBR_ACKS_REFILLING,	  /* sending at est. bw to fill pipe */
	BBR_ACKS_PROBE_STARTING,  /* inflight rising to probe bw */
	BBR_ACKS_PROBE_FEEDBACK,  /* getting feedback from bw probing */
	BBR_ACKS_PROBE_STOPPING,  /* stopped probing; still getting feedback */
};

/* BBR congestion control block */
struct bbr {
	u32	min_rtt_us;	        /* min RTT in min_rtt_win_sec window */
	u32	min_rtt_stamp;	        /* timestamp of min_rtt_us */
	u32	probe_rtt_done_stamp;   /* end time for BBR_PROBE_RTT mode */
	u32	probe_rtt_min_us;	/* min RTT in probe_rtt_win_ms win */
	u32	probe_rtt_min_stamp;	/* timestamp of probe_rtt_min_us */
	u32     next_rtt_delivered;	/* scb->tx.delivered at end of round */
	u64	cycle_mstamp;		/* time of this cycle phase start */
	u32     mode:2,			/* current bbr_mode in state machine */
		prev_ca_state:3,	/* CA state on previous ACK */
		round_start:1,		/* start of packet-timed tx->ack round? */
//~ecn		ce_state:1,		/* If most recent data has CE bit set */
		bw_probe_up_rounds:5,   /* cwnd-limited rounds in PROBE_UP */
		try_fast_path:1,	/* can we take fast path? */
		idle_restart:1,		/* restarting after idle? */
		probe_rtt_round_done:1,	/* a BBR_PROBE_RTT round at 4 pkts? */
		init_cwnd:7,		/* initial cwnd */
		unused_1:10;
	u32	pacing_gain:10,		/* current gain for setting pacing rate */
		cwnd_gain:10,		/* current gain for setting cwnd */
		full_bw_reached:1,	/* reached full bw in Startup? */
		full_bw_cnt:2,		/* number of rounds without large bw gains */
		cycle_idx:2,		/* current index in pacing_gain cycle array */
		has_seen_rtt:1,		/* have we seen an RTT sample yet? */
		unused_2:6;
	u32	prior_cwnd;		/* prior cwnd upon entering loss recovery */
	u32	full_bw;		/* recent bw, to estimate if pipe is full */

	/* For tracking ACK aggregation: */
	u64	ack_epoch_mstamp;	/* start of ACK sampling epoch */
	u16	extra_acked[2];		/* max excess data ACKed in epoch */
	u32	ack_epoch_acked:20,	/* packets (S)ACKed in sampling epoch */
		extra_acked_win_rtts:5,	/* age of extra_acked, in round trips */
		extra_acked_win_idx:1,	/* current index in extra_acked array */
	/* BBR v3 state: */
		full_bw_now:1,		/* recently reached full bw plateau? */
//~ecn		startup_ecn_rounds:2,	/* consecutive hi ECN STARTUP rounds */
		loss_in_cycle:1,	/* packet loss in this cycle? */
//~ecn		ecn_in_cycle:1,		/* ECN in this cycle? */
		unused_3:1;
	u32	loss_round_delivered;	/* scb->tx.delivered ending loss round */
	u32	undo_bw_lo;		/* bw_lo before latest losses */
	u32	undo_inflight_lo;	/* inflight_lo before latest losses */
	u32	undo_inflight_hi;	/* inflight_hi before latest losses */
	u32	bw_latest;		/* max delivered bw in last round trip */
	u32	bw_lo;			/* lower bound on sending bandwidth */
	u32	bw_hi[2];		/* max recent measured bw sample */
	u32	inflight_latest;	/* max delivered data in last round trip */
	u32	inflight_lo;		/* lower bound of inflight data range */
	u32	inflight_hi;		/* upper bound of inflight data range */
	u32	bw_probe_up_cnt;	/* packets delivered per inflight_hi incr */
	u32	bw_probe_up_acks;	/* packets (S)ACKed since inflight_hi incr */
	u32	probe_wait_us;		/* PROBE_DOWN until next clock-driven probe */
//~plb	u32	prior_rcv_nxt;		/* tp->rcv_nxt when CE state last changed */
//~ecn	u32	ecn_eligible:1,		/* sender can use ECN (RTT, handshake)? */
//~ecn		ecn_alpha:9,		/* EWMA delivered_ce/delivered; 0..256 */
	u32	bw_probe_samples:1,	/* rate samples reflect bw probing? */
		prev_probe_too_high:1,	/* did last PROBE_UP go too high? */
		stopped_risky_probe:1,	/* last PROBE_UP stopped due to risk? */
//~reno		rounds_since_probe:8,	/* packet-timed rounds since probed bw */
		loss_round_start:1,	/* loss_round_delivered round trip? */
		loss_in_round:1,	/* loss marked in this round trip? */
//~ecn		ecn_in_round:1,		/* ECN marked in this round trip? */
		ack_phase:3,		/* bbr_ack_phase: meaning of ACKs */
		loss_events_in_round:4,	/* losses in STARTUP round */
		initialized:1;		/* has bbr_init() been called? */
//~ecn	u32	alpha_last_delivered;	/* tp->delivered    at alpha update */
//~ecn	u32	alpha_last_delivered_ce;/* tp->delivered_ce at alpha update */

	u8	unused_4;		/* to preserve alignment */

//~plb	struct tcp_plb_state plb;
};

struct bbr_context {
	u32 sample_bw;
};

/* Window length of min_rtt filter (in sec): */
static const u32 bbr_min_rtt_win_sec = 10;
/* Minimum time (in ms) spent at bbr_cwnd_min_target in BBR_PROBE_RTT mode: */
static const u32 bbr_probe_rtt_mode_ms = 200;
/* Window length of probe_rtt_min_us filter (in ms), and consequently the
 * typical interval between PROBE_RTT mode entries. The default is 5000ms.
 * Note that bbr_probe_rtt_win_ms must be <= bbr_min_rtt_win_sec * MSEC_PER_SEC
 */
static const u32 bbr_probe_rtt_win_ms = 5000;
/* Proportion of cwnd to estimated BDP in PROBE_RTT, in units of BBR_UNIT: */
static const u32 bbr_probe_rtt_cwnd_gain = BBR_UNIT * 1 / 2;

//~tso	/* Use min_rtt to help adapt TSO burst size, with smaller min_rtt resulting
//~tso	 * in bigger TSO bursts. We cut the RTT-based allowance in half
//~tso	 * for every 2^9 usec (aka 512 us) of RTT, so that the RTT-based allowance
//~tso	 * is below 1500 bytes after 6 * ~500 usec = 3ms.
//~tso	 */
//~tso	static const u32 bbr_tso_rtt_shift = 9;

/* Pace at ~1% below estimated bw, on average, to reduce queue at bottleneck.
 * In order to help drive the network toward lower queues and low latency while
 * maintaining high utilization, the average pacing rate aims to be slightly
 * lower than the estimated bandwidth. This is an important aspect of the
 * design.
 */
static const int bbr_pacing_margin_percent = 1;

/* We use a startup_pacing_gain of 4*ln(2) because it's the smallest value
 * that will allow a smoothly increasing pacing rate that will double each RTT
 * and send the same number of packets per RTT that an un-paced, slow-starting
 * Reno or CUBIC flow would:
 */
static const int bbr_startup_pacing_gain = BBR_UNIT * 277 / 100 + 1;
/* The gain for deriving startup cwnd: */
static const int bbr_startup_cwnd_gain = BBR_UNIT * 2;
/* The pacing gain in BBR_DRAIN is calculated to typically drain
 * the queue created in BBR_STARTUP in a single round:
 */
static const int bbr_drain_gain = BBR_UNIT * 1000 / 2885;
/* The gain for deriving steady-state cwnd tolerates delayed/stretched ACKs: */
static const int bbr_cwnd_gain  = BBR_UNIT * 2;
/* The pacing_gain values for the PROBE_BW gain cycle, to discover/share bw: */
static const int bbr_pacing_gain[] = {
	BBR_UNIT * 5 / 4,	/* UP: probe for more available bw */
	BBR_UNIT * 91 / 100,	/* DOWN: drain queue and/or yield bw */
	BBR_UNIT,		/* CRUISE: try to use pipe w/ some headroom */
	BBR_UNIT,		/* REFILL: refill pipe to estimated 100% */
};
enum bbr_pacing_gain_phase {
	BBR_BW_PROBE_UP		= 0,  /* push up inflight to probe for bw/vol */
	BBR_BW_PROBE_DOWN	= 1,  /* drain excess inflight from the queue */
	BBR_BW_PROBE_CRUISE	= 2,  /* use pipe, w/ headroom in queue/pipe */
	BBR_BW_PROBE_REFILL	= 3,  /* v2: refill the pipe again to 100% */
};

/* Try to keep at least this many packets in flight, if things go smoothly. For
 * smooth functioning, a sliding window protocol ACKing every other packet
 * needs at least 4 packets in flight:
 */
static const u32 bbr_cwnd_min_target = 4;

/* To estimate if BBR_STARTUP or BBR_BW_PROBE_UP has filled pipe... */
/* If bw has increased significantly (1.25x), there may be more bw available: */
static const u32 bbr_full_bw_thresh = BBR_UNIT * 5 / 4;
/* But after 3 rounds w/o significant bw growth, estimate pipe is full: */
static const u32 bbr_full_bw_cnt = 3;

/* Gain factor for adding extra_acked to target cwnd: */
static const int bbr_extra_acked_gain = BBR_UNIT;
/* Window length of extra_acked window. */
static const u32 bbr_extra_acked_win_rtts = 5;
/* Max allowed val for ack_epoch_acked, after which sampling epoch is reset */
static const u32 bbr_ack_epoch_acked_reset_thresh = 1U << 20;
/* Time period for clamping cwnd increment due to ack aggregation */
static const u32 bbr_extra_acked_max_us = 100 * 1000;

//~ecn	/* Flags to control BBR ECN-related behavior... */
//~ecn
//~ecn	/* Ensure ACKs only ACK packets with consistent ECN CE status? */
//~ecn	static const bool bbr_precise_ece_ack = true;

//~ecn	/* Max RTT (in usec) at which to use sender-side ECN logic.
//~ecn	 * Disabled when 0 (ECN allowed at any RTT).
//~ecn	 */
//~ecn	static const u32 bbr_ecn_max_rtt_us = 5000;

/* On losses, scale down inflight and pacing rate by beta scaled by BBR_SCALE.
 * No loss response when 0.
 */
static const u32 bbr_beta = BBR_UNIT * 30 / 100;

//~ecn	/* Gain factor for ECN mark ratio samples, scaled by BBR_SCALE (1/16 = 6.25%) */
//~ecn	static const u32 bbr_ecn_alpha_gain = BBR_UNIT * 1 / 16;

//~ecn	/* The initial value for ecn_alpha; 1.0 allows a flow to respond quickly
//~ecn	 * to congestion if the bottleneck is congested when the flow starts up.
//~ecn	 */
//~ecn	static const u32 bbr_ecn_alpha_init = BBR_UNIT;

//~ecn	/* On ECN, cut inflight_lo to (1 - ecn_factor * ecn_alpha) scaled by BBR_SCALE.
//~ecn	 * No ECN based bounding when 0.
//~ecn	 */
//~ecn	static const u32 bbr_ecn_factor = BBR_UNIT * 1 / 3;	 /* 1/3 = 33% */

//~ecn	/* Estimate bw probing has gone too far if CE ratio exceeds this threshold.
//~ecn	 * Scaled by BBR_SCALE. Disabled when 0.
//~ecn	 */
//~ecn	static const u32 bbr_ecn_thresh = BBR_UNIT * 1 / 2;  /* 1/2 = 50% */

//~ecn	/* If non-zero, if in a cycle with no losses but some ECN marks, after ECN
//~ecn	 * clears then make the first round's increment to inflight_hi the following
//~ecn	 * fraction of inflight_hi.
//~ecn	 */
//~ecn	static const u32 bbr_ecn_reprobe_gain = BBR_UNIT * 1 / 2;

/* Estimate bw probing has gone too far if loss rate exceeds this level. */
static const u32 bbr_loss_thresh = BBR_UNIT * 2 / 100;  /* 2% loss */

//~tlp	/* Slow down for a packet loss recovered by TLP? */
//~tlp	static const bool bbr_loss_probe_recovery = true;

/* Exit STARTUP if number of loss marking events in a Recovery round is >= N,
 * and loss rate is higher than bbr_loss_thresh.
 * Disabled if 0.
 */
static const u32 bbr_full_loss_cnt = 6;

//~ecn	/* Exit STARTUP if number of round trips with ECN mark rate above ecn_thresh
//~ecn	 * meets this count.
//~ecn	 */
//~ecn	static const u32 bbr_full_ecn_cnt = 2;

/* Fraction of unutilized headroom to try to leave in path upon high loss. */
static const u32 bbr_inflight_headroom = BBR_UNIT * 15 / 100;

/* How much do we increase cwnd_gain when probing for bandwidth in
 * BBR_BW_PROBE_UP? This specifies the increment in units of
 * BBR_UNIT/4. The default is 1, meaning 0.25.
 * The min value is 0 (meaning 0.0); max is 3 (meaning 0.75).
 */
static const u32 bbr_bw_probe_cwnd_gain = 1;

//~reno	/* Max number of packet-timed rounds to wait before probing for bandwidth.  If
//~reno	 * we want to tolerate 1% random loss per round, and not have this cut our
//~reno	 * inflight too much, we must probe for bw periodically on roughly this scale.
//~reno	 * If low, limits Reno/CUBIC coexistence; if high, limits loss tolerance.
//~reno	 * We aim to be fair with Reno/CUBIC up to a BDP of at least:
//~reno	 *  BDP = 25Mbps * .030sec /(1514bytes) = 61.9 packets
//~reno	 */
//~reno	static const u32 bbr_bw_probe_max_rounds = 63;

//~reno	/* Max amount of randomness to inject in round counting for Reno-coexistence.
//~reno	 */
//~reno	static const u32 bbr_bw_probe_rand_rounds = 2;

/* Use BBR-native probe time scale starting at this many usec.
 * We aim to be fair with Reno/CUBIC up to an inter-loss time epoch of at least:
 *  BDP*RTT = 25Mbps * .030sec /(1514bytes) * 0.030sec = 1.9 secs
 */
static const u32 bbr_bw_probe_base_us = 2 * USEC_PER_SEC;  /* 2 secs */

/* Use BBR-native probes spread over this many usec: */
static const u32 bbr_bw_probe_rand_us = 1 * USEC_PER_SEC;  /* 1 secs */

/* Use fast path if app-limited, no loss/ECN, and target cwnd was reached? */
static const bool bbr_fast_path = true;

/* Use fast ack mode? */
static const bool bbr_fast_ack_mode = true;

static u32 bbr_max_bw(const struct sock *sk);
static u32 bbr_bw(const struct sock *sk);
static void bbr_exit_probe_rtt(struct sock *sk);
static void bbr_reset_congestion_signals(struct sock *sk);
//~tlp	static void bbr_run_loss_probe_recovery(struct sock *sk);

static void bbr_check_probe_rtt_done(struct sock *sk);

//~ecn	/* This connection can use ECN if both endpoints have signaled ECN support in
//~ecn	 * the handshake and the per-route settings indicated this is a
//~ecn	 * shallow-threshold ECN environment, meaning both:
//~ecn	 *  (a) ECN CE marks indicate low-latency/shallow-threshold congestion, and
//~ecn	 *  (b) TCP endpoints provide precise ACKs that only ACK data segments
//~ecn	 *      with consistent ECN CE status
//~ecn	 */
//~ecn	static bool bbr_can_use_ecn(const struct sock *sk)
//~ecn	{
//~ecn		return (tcp_sk(sk)->ecn_flags & TCP_ECN_OK) &&
//~ecn		       (tcp_sk(sk)->ecn_flags & TCP_ECN_LOW);
//~ecn	}

/* Do we estimate that STARTUP filled the pipe? */
static bool bbr_full_bw_reached(const struct sock *sk)
{
	const struct bbr *bbr = inet_csk_ca(sk);

	return bbr->full_bw_reached;
}

/* Return the windowed max recent bandwidth sample, in pkts/uS << BW_SCALE. */
static u32 bbr_max_bw(const struct sock *sk)
{
	const struct bbr *bbr = inet_csk_ca(sk);

	return max(bbr->bw_hi[0], bbr->bw_hi[1]);
}

/* Return the estimated bandwidth of the path, in pkts/uS << BW_SCALE. */
static u32 bbr_bw(const struct sock *sk)
{
	const struct bbr *bbr = inet_csk_ca(sk);

	return min(bbr_max_bw(sk), bbr->bw_lo);
}

/* Return maximum extra acked in past k-2k round trips,
 * where k = bbr_extra_acked_win_rtts.
 */
static u16 bbr_extra_acked(const struct sock *sk)
{
	struct bbr *bbr = inet_csk_ca(sk);

	return max(bbr->extra_acked[0], bbr->extra_acked[1]);
}

/* Return rate in bytes per second, optionally with a gain.
 * The order here is chosen carefully to avoid overflow of u64. This should
 * work for input rates of up to 2.9Tbit/sec and gain of 2.89x.
 */
static u64 bbr_rate_bytes_per_sec(struct sock *sk, u64 rate, int gain,
				  int margin)
{
	unsigned int mss = tcp_sk(sk)->mss_cache;

	rate *= mss;
	rate *= gain;
	rate >>= BBR_SCALE;
	rate *= USEC_PER_SEC / 100 * (100 - margin);
	rate >>= BW_SCALE;
	rate = max(rate, 1ULL);
	return rate;
}

static u64 bbr_bw_bytes_per_sec(struct sock *sk, u64 rate)
{
	return bbr_rate_bytes_per_sec(sk, rate, BBR_UNIT, 0);
}

/* Convert a BBR bw and gain factor to a pacing rate in bytes per second. */
static unsigned long bbr_bw_to_pacing_rate(struct sock *sk, u32 bw, int gain)
{
	u64 rate = bw;

	rate = bbr_rate_bytes_per_sec(sk, rate, gain,
				      bbr_pacing_margin_percent);
	// bazoo not needed
	// rate = min_t(u64, rate, sk->sk_max_pacing_rate);
	return rate;
}

/* Initialize pacing rate to: startup_pacing_gain * init_cwnd / RTT. */
static void bbr_init_pacing_rate_from_rtt(struct sock *sk)
{
	struct tcp_sock *tp = tcp_sk(sk);
	struct bbr *bbr = inet_csk_ca(sk);
	u64 bw;
	u32 rtt_us;

	if (tp->srtt_us) {		/* any RTT sample yet? */
		rtt_us = max(tp->srtt_us >> 3, 1U);
		bbr->has_seen_rtt = 1;
	} else {			 /* no RTT sample yet */
		rtt_us = USEC_PER_MSEC;	 /* use nominal default RTT */
	}
	bw = (u64)tcp_snd_cwnd(tp) * BW_UNIT;
	do_div(bw, rtt_us);
	sk->sk_pacing_rate =
	  bbr_bw_to_pacing_rate(sk, bw, bbr_param(sk, bbr_startup_pacing_gain));
}

/* Pace using current bw estimate and a gain factor. */
static void bbr_set_pacing_rate(struct sock *sk, u32 bw, int gain)
{
	struct tcp_sock *tp = tcp_sk(sk);
	struct bbr *bbr = inet_csk_ca(sk);
	unsigned long rate = bbr_bw_to_pacing_rate(sk, bw, gain);

	if (unlikely(!bbr->has_seen_rtt && tp->srtt_us))
		bbr_init_pacing_rate_from_rtt(sk);
	if (bbr_full_bw_reached(sk) || rate > sk->sk_pacing_rate)
		sk->sk_pacing_rate = rate;
}

//~tso	/* Return the number of segments BBR would like in a TSO/GSO skb, given a
//~tso	 * particular max gso size as a constraint. TODO: make this simpler and more
//~tso	 * consistent by switching bbr to just call tcp_tso_autosize().
//~tso	 */
//~tso	static u32 bbr_tso_segs_generic(struct sock *sk, unsigned int mss_now,
//~tso					u32 gso_max_size)
//~tso	{
//~tso	struct bbr *bbr = inet_csk_ca(sk);
//~tso	u32 segs, r;
//~tso	u64 bytes;
//~tso
//~tso	/* Budget a TSO/GSO burst size allowance based on bw (pacing_rate). */
//~tso	bytes = sk->sk_pacing_rate >> sk->sk_pacing_shift;
//~tso
//~tso	/* Budget a TSO/GSO burst size allowance based on min_rtt. For every
//~tso	 * K = 2^tso_rtt_shift microseconds of min_rtt, halve the burst.
//~tso	 * The min_rtt-based burst allowance is: 64 KBytes / 2^(min_rtt/K)
//~tso	 */
//~tso	if (bbr_param(sk, bbr_tso_rtt_shift)) {
//~tso		r = bbr->min_rtt_us >> bbr_param(sk, bbr_tso_rtt_shift);
//~tso		if (r < BITS_PER_TYPE(u32))   /* prevent undefined behavior */
//~tso			bytes += GSO_LEGACY_MAX_SIZE >> r;
//~tso	}
//~tso
//~tso	bytes = min_t(u32, bytes, gso_max_size - 1 - MAX_TCP_HEADER);
//~tso	segs = max_t(u32, bytes / mss_now,
//~tso		     sysctl_tcp_min_tso_segs);
//~tso	return segs;
//~tso	}

//~tso	/* Custom tcp_tso_autosize() for BBR, used at transmit time to cap skb size. */
//~tso	__bpf_kfunc static u32 bbr_tso_segs(struct sock *sk, unsigned int mss_now)
//~tso	{
//~tso	return bbr_tso_segs_generic(sk, mss_now, sk->sk_gso_max_size);
//~tso	}

//~tso	/* Like bbr_tso_segs(), using mss_cache, ignoring driver's sk_gso_max_size. */
//~tso	static u32 bbr_tso_segs_goal(struct sock *sk)
//~tso	{
//~tso	struct tcp_sock *tp = tcp_sk(sk);
//~tso
//~tso	return  bbr_tso_segs_generic(sk, tp->mss_cache, GSO_LEGACY_MAX_SIZE);
//~tso	}

/* Save "last known good" cwnd so we can restore it after losses or PROBE_RTT */
static void bbr_save_cwnd(struct sock *sk)
{
	struct tcp_sock *tp = tcp_sk(sk);
	struct bbr *bbr = inet_csk_ca(sk);

	if (bbr->prev_ca_state < TCP_CA_Recovery && bbr->mode != BBR_PROBE_RTT)
		bbr->prior_cwnd = tcp_snd_cwnd(tp);  /* this cwnd is good enough */
	else  /* loss recovery or BBR_PROBE_RTT have temporarily cut cwnd */
		bbr->prior_cwnd = max(bbr->prior_cwnd, tcp_snd_cwnd(tp));
}

__bpf_kfunc static void bbr_cwnd_event(struct sock *sk, enum tcp_ca_event event)
{
	struct tcp_sock *tp = tcp_sk(sk);
	struct bbr *bbr = inet_csk_ca(sk);

	if (event == CA_EVENT_TX_START) {
		if (!tp->app_limited)
			return;
		bbr->idle_restart = 1;
		bbr->ack_epoch_mstamp = tp->tcp_mstamp;
		bbr->ack_epoch_acked = 0;
		/* Avoid pointless buffer overflows: pace at est. bw if we don't
		 * need more speed (we're restarting from idle and app-limited).
		 */
		if (bbr->mode == BBR_PROBE_BW)
			bbr_set_pacing_rate(sk, bbr_bw(sk), BBR_UNIT);
		else if (bbr->mode == BBR_PROBE_RTT)
			bbr_check_probe_rtt_done(sk);
	}
//~ecn	} else if ((event == CA_EVENT_ECN_IS_CE ||
//~ecn		    event == CA_EVENT_ECN_NO_CE) &&
//~ecn		   bbr_can_use_ecn(sk) &&
//~ecn		   bbr_param(sk, bbr_precise_ece_ack)) {
//~ecn		u32 state = bbr->ce_state;
//~ecn		dctcp_ece_ack_update(sk, event, &bbr->prior_rcv_nxt, &state);
//~ecn		bbr->ce_state = state;
//~tlp	} else if (event == CA_EVENT_TLP_RECOVERY &&
//~tlp		   bbr_param(sk, bbr_loss_probe_recovery)) {
//~tlp		bbr_run_loss_probe_recovery(sk);
//~tlp	}
}

/* Calculate bdp based on min RTT and the estimated bottleneck bandwidth:
 *
 * bdp = ceil(bw * min_rtt * gain)
 *
 * The key factor, gain, controls the amount of queue. While a small gain
 * builds a smaller queue, it becomes more vulnerable to noise in RTT
 * measurements (e.g., delayed ACKs or other ACK compression effects). This
 * noise may cause BBR to under-estimate the rate.
 */
static u32 bbr_bdp(struct sock *sk, u32 bw, int gain)
{
	struct bbr *bbr = inet_csk_ca(sk);
	u32 bdp;
	u64 w;

	/* If we've never had a valid RTT sample, cap cwnd at the initial
	 * default. This should only happen when the connection is not using TCP
	 * timestamps and has retransmitted all of the SYN/SYNACK/data packets
	 * ACKed so far. In this case, an RTO can cut cwnd to 1, in which
	 * case we need to slow-start up toward something safe: initial cwnd.
	 */
	if (unlikely(bbr->min_rtt_us == ~0U))	 /* no valid RTT samples yet? */
		return bbr->init_cwnd;  /* be safe: cap at initial cwnd */

	w = (u64)bw * bbr->min_rtt_us;

	/* Apply a gain to the given value, remove the BW_SCALE shift, and
	 * round the value up to avoid a negative feedback loop.
	 */
	bdp = (((w * gain) >> BBR_SCALE) + BW_UNIT - 1) / BW_UNIT;

	return bdp;
}

/* To achieve full performance in high-speed paths, we budget enough cwnd to
 * fit full-sized skbs in-flight on both end hosts to fully utilize the path:
 *   - one skb in sending host Qdisc,
 *   - one skb in sending host TSO/GSO engine
 *   - one skb being received by receiver host LRO/GRO/delayed-ACK engine
 * Don't worry, at low rates this won't bloat cwnd because
 * in such cases tso_segs_goal is small. The minimum cwnd is 4 packets,
 * which allows 2 outstanding 2-packet sequences, to try to keep pipe
 * full even with ACK-every-other-packet delayed ACKs.
 */
static u32 bbr_quantization_budget(struct sock *sk, u32 cwnd)
{
	struct bbr *bbr = inet_csk_ca(sk);
//~tso	u32 tso_segs_goal;

//~tso	tso_segs_goal = 3 * bbr_tso_segs_goal(sk);

	/* Allow enough full-sized skbs in flight to utilize end systems. */
//~tso	cwnd = max_t(u32, cwnd, tso_segs_goal);
	cwnd = max_t(u32, cwnd, bbr_param(sk, bbr_cwnd_min_target));
	/* Ensure gain cycling gets inflight above BDP even for small BDPs. */
	if (bbr->mode == BBR_PROBE_BW && bbr->cycle_idx == BBR_BW_PROBE_UP)
		cwnd += 2;

	return cwnd;
}

/* Find inflight based on min RTT and the estimated bottleneck bandwidth. */
static u32 bbr_inflight(struct sock *sk, u32 bw, int gain)
{
	u32 inflight;

	inflight = bbr_bdp(sk, bw, gain);
	inflight = bbr_quantization_budget(sk, inflight);

	return inflight;
}

/* With pacing at lower layers, there's often less data "in the network" than
 * "in flight". With TSQ and departure time pacing at lower layers (e.g. fq),
 * we often have several skbs queued in the pacing layer with a pre-scheduled
 * earliest departure time (EDT). BBR adapts its pacing rate based on the
 * inflight level that it estimates has already been "baked in" by previous
 * departure time decisions. We calculate a rough estimate of the number of our
 * packets that might be in the network at the earliest departure time for the
 * next skb scheduled:
 *   in_network_at_edt = inflight_at_edt - (EDT - now) * bw
 * If we're increasing inflight, then we want to know if the transmit of the
 * EDT skb will push inflight above the target, so inflight_at_edt includes
 * bbr_tso_segs_goal() from the skb departing at EDT. If decreasing inflight,
 * then estimate if inflight will sink too low just before the EDT transmit.
 */
static u32 bbr_packets_in_net_at_edt(struct sock *sk, u32 inflight_now)
{
	return inflight_now;
//~tcp	struct tcp_sock *tp = tcp_sk(sk);
//~tcp	struct bbr *bbr = inet_csk_ca(sk);
//~tcp	u64 now_ns, edt_ns, interval_us;
//~tcp	u32 interval_delivered, inflight_at_edt;
//~tcp
//~tcp	now_ns = tp->tcp_clock_cache;
//~tcp	edt_ns = max(tp->tcp_wstamp_ns, now_ns);
//~tcp	interval_us = div_u64(edt_ns - now_ns, NSEC_PER_USEC);
//~tcp	interval_delivered = (u64)bbr_bw(sk) * interval_us >> BW_SCALE;
//~tcp	inflight_at_edt = inflight_now;
//~tso	if (bbr->pacing_gain > BBR_UNIT)              /* increasing inflight */
//~tso		inflight_at_edt += bbr_tso_segs_goal(sk);  /* include EDT skb */
//~tcp	if (interval_delivered >= inflight_at_edt)
//~tcp		return 0;
//~tcp	return inflight_at_edt - interval_delivered;
}

/* Find the cwnd increment based on estimate of ack aggregation */
static u32 bbr_ack_aggregation_cwnd(struct sock *sk)
{
	u32 max_aggr_cwnd, aggr_cwnd = 0;

	if (bbr_param(sk, bbr_extra_acked_gain)) {
		max_aggr_cwnd = ((u64)bbr_bw(sk) * bbr_extra_acked_max_us)
				/ BW_UNIT;
		aggr_cwnd = (bbr_param(sk, bbr_extra_acked_gain) * bbr_extra_acked(sk))
			     >> BBR_SCALE;
		aggr_cwnd = min(aggr_cwnd, max_aggr_cwnd);
	}

	return aggr_cwnd;
}

/* Returns the cwnd for PROBE_RTT mode. */
static u32 bbr_probe_rtt_cwnd(struct sock *sk)
{
	return max_t(u32, bbr_param(sk, bbr_cwnd_min_target),
		     bbr_bdp(sk, bbr_bw(sk), bbr_param(sk, bbr_probe_rtt_cwnd_gain)));
}

/* Slow-start up toward target cwnd (if bw estimate is growing, or packet loss
 * has drawn us down below target), or snap down to target if we're above it.
 */
static void bbr_set_cwnd(struct sock *sk, const struct rate_sample *rs,
			 u32 acked, u32 bw, int gain, u32 cwnd,
			 struct bbr_context *ctx)
{
	struct tcp_sock *tp = tcp_sk(sk);
	struct bbr *bbr = inet_csk_ca(sk);
	u32 target_cwnd = 0;

	if (!acked)
		goto done;  /* no packet fully ACKed; just apply caps */

	target_cwnd = bbr_bdp(sk, bw, gain);

	/* Increment the cwnd to account for excess ACKed data that seems
	 * due to aggregation (of data and/or ACKs) visible in the ACK stream.
	 */
	target_cwnd += bbr_ack_aggregation_cwnd(sk);
	target_cwnd = bbr_quantization_budget(sk, target_cwnd);

	/* Update cwnd and enable fast path if cwnd reaches target_cwnd. */
	bbr->try_fast_path = 0;
	if (bbr_full_bw_reached(sk)) { /* only cut cwnd if we filled the pipe */
		cwnd += acked;
		if (cwnd >= target_cwnd) {
			cwnd = target_cwnd;
			bbr->try_fast_path = 1;
		}
	} else if (cwnd < target_cwnd || cwnd  < 2 * bbr->init_cwnd) {
		cwnd += acked;
	} else {
		bbr->try_fast_path = 1;
	}

	cwnd = max_t(u32, cwnd, bbr_param(sk, bbr_cwnd_min_target));
done:
	tcp_snd_cwnd_set(tp, min(cwnd, tp->snd_cwnd_clamp));  /* global cap */
	if (bbr->mode == BBR_PROBE_RTT)  /* drain queue, refresh min_rtt */
		tcp_snd_cwnd_set(tp, min_t(u32, tcp_snd_cwnd(tp),
					   bbr_probe_rtt_cwnd(sk)));
}

static void bbr_reset_startup_mode(struct sock *sk)
{
	struct bbr *bbr = inet_csk_ca(sk);

	bbr->mode = BBR_STARTUP;
}

/* See if we have reached next round trip. Upon start of the new round,
 * returns packets delivered since previous round start plus this ACK.
 */
static u32 bbr_update_round_start(struct sock *sk,
		const struct rate_sample *rs, struct bbr_context *ctx)
{
	struct tcp_sock *tp = tcp_sk(sk);
	struct bbr *bbr = inet_csk_ca(sk);
	u32 round_delivered = 0;

	bbr->round_start = 0;

	/* See if we've reached the next RTT */
	if (rs->interval_us > 0 &&
	    !before(rs->prior_delivered, bbr->next_rtt_delivered)) {
		round_delivered = tp->delivered - bbr->next_rtt_delivered;
		bbr->next_rtt_delivered = tp->delivered;
		bbr->round_start = 1;
	}
	return round_delivered;
}

/* Calculate the bandwidth based on how fast packets are delivered */
static void bbr_calculate_bw_sample(struct sock *sk,
			const struct rate_sample *rs, struct bbr_context *ctx)
{
	u64 bw = 0;

	/* Divide delivered by the interval to find a (lower bound) bottleneck
	 * bandwidth sample. Delivered is in packets and interval_us in uS and
	 * ratio will be <<1 for most connections. So delivered is first scaled.
	 * Round up to allow growth at low rates, even with integer division.
	 */
	if (rs->interval_us > 0) {
		if (WARN_ONCE(rs->delivered < 0,
			      "negative delivered: %d interval_us: %ld\n",
			      rs->delivered, rs->interval_us))
			return;

		bw = DIV_ROUND_UP_ULL((u64)rs->delivered * BW_UNIT, rs->interval_us);
	}

	ctx->sample_bw = bw;
}

/* Estimates the windowed max degree of ack aggregation.
 * This is used to provision extra in-flight data to keep sending during
 * inter-ACK silences.
 *
 * Degree of ack aggregation is estimated as extra data acked beyond expected.
 *
 * max_extra_acked = "maximum recent excess data ACKed beyond max_bw * interval"
 * cwnd += max_extra_acked
 *
 * Max extra_acked is clamped by cwnd and bw * bbr_extra_acked_max_us (100 ms).
 * Max filter is an approximate sliding window of 5-10 (packet timed) round
 * trips for non-startup phase, and 1-2 round trips for startup.
 */
static void bbr_update_ack_aggregation(struct sock *sk,
				       const struct rate_sample *rs)
{
	u32 epoch_us, expected_acked, extra_acked;
	struct bbr *bbr = inet_csk_ca(sk);
	struct tcp_sock *tp = tcp_sk(sk);
	u32 extra_acked_win_rtts_thresh = bbr_param(sk, bbr_extra_acked_win_rtts);

	if (!bbr_param(sk, bbr_extra_acked_gain) || rs->acked_sacked <= 0 ||
	    rs->delivered < 0 || rs->interval_us <= 0)
		return;

	if (bbr->round_start) {
		bbr->extra_acked_win_rtts = min(0x1F,
						bbr->extra_acked_win_rtts + 1);
		if (!bbr_full_bw_reached(sk))
			extra_acked_win_rtts_thresh = 1;
		if (bbr->extra_acked_win_rtts >=
		    extra_acked_win_rtts_thresh) {
			bbr->extra_acked_win_rtts = 0;
			bbr->extra_acked_win_idx = bbr->extra_acked_win_idx ?
						   0 : 1;
			bbr->extra_acked[bbr->extra_acked_win_idx] = 0;
		}
	}

	/* Compute how many packets we expected to be delivered over epoch. */
	epoch_us = tcp_stamp_us_delta(tp->delivered_mstamp,
				      bbr->ack_epoch_mstamp);
	expected_acked = ((u64)bbr_bw(sk) * epoch_us) / BW_UNIT;

	/* Reset the aggregation epoch if ACK rate is below expected rate or
	 * significantly large no. of ack received since epoch (potentially
	 * quite old epoch).
	 */
	if (bbr->ack_epoch_acked <= expected_acked ||
	    (bbr->ack_epoch_acked + rs->acked_sacked >=
	     bbr_ack_epoch_acked_reset_thresh)) {
		bbr->ack_epoch_acked = 0;
		bbr->ack_epoch_mstamp = tp->delivered_mstamp;
		expected_acked = 0;
	}

	/* Compute excess data delivered, beyond what was expected. */
	bbr->ack_epoch_acked = min_t(u32, 0xFFFFF,
				     bbr->ack_epoch_acked + rs->acked_sacked);
	extra_acked = bbr->ack_epoch_acked - expected_acked;
	extra_acked = min(extra_acked, tcp_snd_cwnd(tp));
	if (extra_acked > bbr->extra_acked[bbr->extra_acked_win_idx])
		bbr->extra_acked[bbr->extra_acked_win_idx] = extra_acked;
}

static void bbr_check_probe_rtt_done(struct sock *sk)
{
	struct tcp_sock *tp = tcp_sk(sk);
	struct bbr *bbr = inet_csk_ca(sk);

	if (!(bbr->probe_rtt_done_stamp &&
	      after(tcp_jiffies32, bbr->probe_rtt_done_stamp)))
		return;

	bbr->probe_rtt_min_stamp = tcp_jiffies32; /* schedule next PROBE_RTT */
	tcp_snd_cwnd_set(tp, max(tcp_snd_cwnd(tp), bbr->prior_cwnd));
	bbr_exit_probe_rtt(sk);
}

/* The goal of PROBE_RTT mode is to have BBR flows cooperatively and
 * periodically drain the bottleneck queue, to converge to measure the true
 * min_rtt (unloaded propagation delay). This allows the flows to keep queues
 * small (reducing queuing delay and packet loss) and achieve fairness among
 * BBR flows.
 *
 * The min_rtt filter window is 10 seconds. When the min_rtt estimate expires,
 * we enter PROBE_RTT mode and cap the cwnd at bbr_cwnd_min_target=4 packets.
 * After at least bbr_probe_rtt_mode_ms=200ms and at least one packet-timed
 * round trip elapsed with that flight size <= 4, we leave PROBE_RTT mode and
 * re-enter the previous mode. BBR uses 200ms to approximately bound the
 * performance penalty of PROBE_RTT's cwnd capping to roughly 2% (200ms/10s).
 *
 * Note that flows need only pay 2% if they are busy sending over the last 10
 * seconds. Interactive applications (e.g., Web, RPCs, video chunks) often have
 * natural silences or low-rate periods within 10 seconds where the rate is low
 * enough for long enough to drain its queue in the bottleneck. We pick up
 * these min RTT measurements opportunistically with our min_rtt filter. :-)
 */
static void bbr_update_min_rtt(struct sock *sk, const struct rate_sample *rs)
{
	struct tcp_sock *tp = tcp_sk(sk);
	struct bbr *bbr = inet_csk_ca(sk);
	bool probe_rtt_expired, min_rtt_expired;
	u32 expire;

	/* Track min RTT in probe_rtt_win_ms to time next PROBE_RTT state. */
	expire = bbr->probe_rtt_min_stamp +
		 msecs_to_jiffies(bbr_param(sk, bbr_probe_rtt_win_ms));
	probe_rtt_expired = after(tcp_jiffies32, expire);
	if (rs->rtt_us >= 0 &&
	    (rs->rtt_us < bbr->probe_rtt_min_us ||
	     (probe_rtt_expired //~tcp && !rs->is_ack_delayed
	))) {
		bbr->probe_rtt_min_us = rs->rtt_us;
		bbr->probe_rtt_min_stamp = tcp_jiffies32;
	}
	/* Track min RTT seen in the min_rtt_win_sec filter window: */
	expire = bbr->min_rtt_stamp + bbr_param(sk, bbr_min_rtt_win_sec) * HZ;
	min_rtt_expired = after(tcp_jiffies32, expire);
	if (bbr->probe_rtt_min_us <= bbr->min_rtt_us ||
	    min_rtt_expired) {
		bbr->min_rtt_us = bbr->probe_rtt_min_us;
		bbr->min_rtt_stamp = bbr->probe_rtt_min_stamp;
	}

	if (bbr_param(sk, bbr_probe_rtt_mode_ms) > 0 && probe_rtt_expired &&
	    !bbr->idle_restart && bbr->mode != BBR_PROBE_RTT) {
		bbr->mode = BBR_PROBE_RTT;  /* dip, drain queue */
		bbr_save_cwnd(sk);  /* note cwnd so we can restore it */
		bbr->probe_rtt_done_stamp = 0;
		bbr->ack_phase = BBR_ACKS_PROBE_STOPPING;
		bbr->next_rtt_delivered = tp->delivered;
	}

	if (bbr->mode == BBR_PROBE_RTT) {
		/* Ignore low rate samples during this mode. */
		tp->app_limited =
			(tp->delivered + tcp_packets_in_flight(tp)) ? : 1;
		/* Maintain min packets in flight for max(200 ms, 1 round). */
		if (!bbr->probe_rtt_done_stamp &&
		    tcp_packets_in_flight(tp) <= bbr_probe_rtt_cwnd(sk)) {
			bbr->probe_rtt_done_stamp = tcp_jiffies32 +
				msecs_to_jiffies(bbr_param(sk, bbr_probe_rtt_mode_ms));
			bbr->probe_rtt_round_done = 0;
			bbr->next_rtt_delivered = tp->delivered;
		} else if (bbr->probe_rtt_done_stamp) {
			if (bbr->round_start)
				bbr->probe_rtt_round_done = 1;
			if (bbr->probe_rtt_round_done)
				bbr_check_probe_rtt_done(sk);
		}
	}
	/* Restart after idle ends only once we process a new S/ACK for data */
	if (rs->delivered > 0)
		bbr->idle_restart = 0;
}

static void bbr_update_gains(struct sock *sk)
{
	struct bbr *bbr = inet_csk_ca(sk);

	switch (bbr->mode) {
	case BBR_STARTUP:
		bbr->pacing_gain = bbr_param(sk, bbr_startup_pacing_gain);
		bbr->cwnd_gain	 = bbr_param(sk, bbr_startup_cwnd_gain);
		break;
	case BBR_DRAIN:
		bbr->pacing_gain = bbr_param(sk, bbr_drain_gain);  /* slow, to drain */
		bbr->cwnd_gain	 = bbr_param(sk, bbr_startup_cwnd_gain);  /* keep cwnd */
		break;
	case BBR_PROBE_BW:
		bbr->pacing_gain = bbr_pacing_gain[bbr->cycle_idx];
		bbr->cwnd_gain	 = bbr_param(sk, bbr_cwnd_gain);
		if (bbr_param(sk, bbr_bw_probe_cwnd_gain) &&
		    bbr->cycle_idx == BBR_BW_PROBE_UP)
			bbr->cwnd_gain +=
				BBR_UNIT * bbr_param(sk, bbr_bw_probe_cwnd_gain) / 4;
		break;
	case BBR_PROBE_RTT:
		bbr->pacing_gain = BBR_UNIT;
		bbr->cwnd_gain	 = BBR_UNIT;
		break;
	default:
		WARN_ONCE(1, "BBR bad mode: %u\n", bbr->mode);
		break;
	}
}

__bpf_kfunc static u32 bbr_sndbuf_expand(struct sock *sk)
{
	/* Provision 3 * cwnd since BBR may slow-start even during recovery. */
	return 3;
}

/* Incorporate a new bw sample into the current window of our max filter. */
static void bbr_take_max_bw_sample(struct sock *sk, u32 bw)
{
	struct bbr *bbr = inet_csk_ca(sk);

	bbr->bw_hi[1] = max(bw, bbr->bw_hi[1]);
}

/* Keep max of last 1-2 cycles. Each PROBE_BW cycle, flip filter window. */
static void bbr_advance_max_bw_filter(struct sock *sk)
{
	struct bbr *bbr = inet_csk_ca(sk);

	if (!bbr->bw_hi[1])
		return;  /* no samples in this window; remember old window */
	bbr->bw_hi[0] = bbr->bw_hi[1];
	bbr->bw_hi[1] = 0;
}

/* Reset the estimator for reaching full bandwidth based on bw plateau. */
static void bbr_reset_full_bw(struct sock *sk)
{
	struct bbr *bbr = inet_csk_ca(sk);

	bbr->full_bw = 0;
	bbr->full_bw_cnt = 0;
	bbr->full_bw_now = 0;
}

/* How much do we want in flight? Our BDP, unless congestion cut cwnd. */
static u32 bbr_target_inflight(struct sock *sk)
{
	u32 bdp = bbr_inflight(sk, bbr_bw(sk), BBR_UNIT);

	return min(bdp, tcp_sk(sk)->snd_cwnd);
}

static bool bbr_is_probing_bandwidth(struct sock *sk)
{
	struct bbr *bbr = inet_csk_ca(sk);

	return (bbr->mode == BBR_STARTUP) ||
		(bbr->mode == BBR_PROBE_BW &&
		 (bbr->cycle_idx == BBR_BW_PROBE_REFILL ||
		  bbr->cycle_idx == BBR_BW_PROBE_UP));
}

/* Has the given amount of time elapsed since we marked the phase start? */
static bool bbr_has_elapsed_in_phase(const struct sock *sk, u32 interval_us)
{
	const struct tcp_sock *tp = tcp_sk(sk);
	const struct bbr *bbr = inet_csk_ca(sk);

	return tcp_stamp_us_delta(tp->tcp_mstamp,
				  bbr->cycle_mstamp + interval_us) > 0;
}

static void bbr_handle_queue_too_high_in_startup(struct sock *sk)
{
	struct bbr *bbr = inet_csk_ca(sk);
	u32 bdp;  /* estimated BDP in packets, with quantization budget */

	bbr->full_bw_reached = 1;

	bdp = bbr_inflight(sk, bbr_max_bw(sk), BBR_UNIT);
	bbr->inflight_hi = max(bdp, bbr->inflight_latest);
}

//~ecn	/* Exit STARTUP upon N consecutive rounds with ECN mark rate > ecn_thresh. */
//~ecn	static void bbr_check_ecn_too_high_in_startup(struct sock *sk, u32 ce_ratio)
//~ecn	{
//~ecn	struct bbr *bbr = inet_csk_ca(sk);
//~ecn
//~ecn	if (bbr_full_bw_reached(sk) || !bbr->ecn_eligible ||
//~ecn	    !bbr_param(sk, bbr_full_ecn_cnt) || !bbr_param(sk, bbr_ecn_thresh))
//~ecn		return;
//~ecn
//~ecn	if (ce_ratio >= bbr_param(sk, bbr_ecn_thresh))
//~ecn		bbr->startup_ecn_rounds++;
//~ecn	else
//~ecn		bbr->startup_ecn_rounds = 0;
//~ecn
//~ecn	if (bbr->startup_ecn_rounds >= bbr_param(sk, bbr_full_ecn_cnt)) {
//~ecn		bbr_handle_queue_too_high_in_startup(sk);
//~ecn		return;
//~ecn	}
//~ecn	}

//~ecn	/* Updates ecn_alpha and returns ce_ratio. -1 if not available. */
//~ecn	static int bbr_update_ecn_alpha(struct sock *sk)
//~ecn	{
//~ecn	struct tcp_sock *tp = tcp_sk(sk);
//~ecn	struct bbr *bbr = inet_csk_ca(sk);
//~ecn	s32 delivered, delivered_ce;
//~ecn	u64 alpha, ce_ratio;
//~ecn	u32 gain;
//~ecn	bool want_ecn_alpha;
//~ecn
//~ecn	/* See if we should use ECN sender logic for this connection. */
//~ecn	if (!bbr->ecn_eligible && bbr_can_use_ecn(sk) &&
//~ecn	    bbr_param(sk, bbr_ecn_factor) &&
//~ecn	    (bbr->min_rtt_us <= bbr_ecn_max_rtt_us ||
//~ecn	     !bbr_ecn_max_rtt_us))
//~ecn		bbr->ecn_eligible = 1;
//~ecn
//~ecn	/* Skip updating alpha only if not ECN-eligible and PLB is disabled. */
//~ecn	want_ecn_alpha = (bbr->ecn_eligible ||
//~ecn			  (bbr_can_use_ecn(sk) &&
//~ecn			   sysctl_tcp_plb_enabled));
//~ecn	if (!want_ecn_alpha)
//~ecn		return -1;
//~ecn
//~ecn	delivered = tp->delivered - bbr->alpha_last_delivered;
//~ecn	delivered_ce = tp->delivered_ce - bbr->alpha_last_delivered_ce;
//~ecn
//~ecn	if (delivered == 0 ||		/* avoid divide by zero */
//~ecn	    WARN_ON_ONCE(delivered < 0 || delivered_ce < 0))  /* backwards? */
//~ecn		return -1;
//~ecn
//~ecn	BUILD_BUG_ON(BBR_SCALE != TCP_PLB_SCALE);
//~ecn	ce_ratio = (u64)delivered_ce << BBR_SCALE;
//~ecn	do_div(ce_ratio, delivered);
//~ecn
//~ecn	gain = bbr_param(sk, bbr_ecn_alpha_gain);
//~ecn	alpha = ((BBR_UNIT - gain) * bbr->ecn_alpha) >> BBR_SCALE;
//~ecn	alpha += (gain * ce_ratio) >> BBR_SCALE;
//~ecn	bbr->ecn_alpha = min_t(u32, alpha, BBR_UNIT);
//~ecn
//~ecn	bbr->alpha_last_delivered = tp->delivered;
//~ecn	bbr->alpha_last_delivered_ce = tp->delivered_ce;
//~ecn
//~ecn	bbr_check_ecn_too_high_in_startup(sk, ce_ratio);
//~ecn	return (int)ce_ratio;
//~ecn	}

//~plb	/* Protective Load Balancing (PLB). PLB rehashes outgoing data (to a new IPv6
//~plb	 * flow label) if it encounters sustained congestion in the form of ECN marks.
//~plb	 */
//~plb	static void bbr_plb(struct sock *sk, const struct rate_sample *rs, int ce_ratio)
//~plb	{
//~plb	struct bbr *bbr = inet_csk_ca(sk);
//~plb
//~plb	if (bbr->round_start && ce_ratio >= 0)
//~plb		tcp_plb_update_state(sk, &bbr->plb, ce_ratio);
//~plb
//~plb	tcp_plb_check_rehash(sk, &bbr->plb);
//~plb	}

/* Each round trip of BBR_BW_PROBE_UP, double volume of probing data. */
static void bbr_raise_inflight_hi_slope(struct sock *sk)
{
	struct tcp_sock *tp = tcp_sk(sk);
	struct bbr *bbr = inet_csk_ca(sk);
	u32 growth_this_round, cnt;

	/* Calculate "slope": packets S/Acked per inflight_hi increment. */
	growth_this_round = 1 << bbr->bw_probe_up_rounds;
	bbr->bw_probe_up_rounds = min(bbr->bw_probe_up_rounds + 1, 30);
	cnt = tcp_snd_cwnd(tp) / growth_this_round;
	cnt = max(cnt, 1U);
	bbr->bw_probe_up_cnt = cnt;
}

/* In BBR_BW_PROBE_UP, not seeing high loss/ECN/queue, so raise inflight_hi. */
static void bbr_probe_inflight_hi_upward(struct sock *sk,
					  const struct rate_sample *rs)
{
	struct tcp_sock *tp = tcp_sk(sk);
	struct bbr *bbr = inet_csk_ca(sk);
	u32 delta;

	if (!tp->is_cwnd_limited || tcp_snd_cwnd(tp) < bbr->inflight_hi)
		return;  /* not fully using inflight_hi, so don't grow it */

	/* For each bw_probe_up_cnt packets ACKed, increase inflight_hi by 1. */
	bbr->bw_probe_up_acks += rs->acked_sacked;
	if (bbr->bw_probe_up_acks >=  bbr->bw_probe_up_cnt) {
		delta = bbr->bw_probe_up_acks / bbr->bw_probe_up_cnt;
		bbr->bw_probe_up_acks -= delta * bbr->bw_probe_up_cnt;
		bbr->inflight_hi += delta;
		bbr->try_fast_path = 0;  /* Need to update cwnd */
	}

	if (bbr->round_start)
		bbr_raise_inflight_hi_slope(sk);
}

/* Does loss/ECN rate for this sample say inflight is "too high"?
 * This is used by both the bbr_check_loss_too_high_in_startup() function,
 * which can be used in either v1 or v2, and the PROBE_UP phase of v2, which
 * uses it to notice when loss/ECN rates suggest inflight is too high.
 */
static bool bbr_is_inflight_too_high(const struct sock *sk,
				      const struct rate_sample *rs)
{
	const struct bbr *bbr = inet_csk_ca(sk);
	u32 loss_thresh;
//~ecn	u32 ecn_thresh;

	if (rs->lost > 0 && rs->tx_in_flight) {
		loss_thresh = (u64)rs->tx_in_flight * bbr_param(sk, bbr_loss_thresh) >>
				BBR_SCALE;
		if (rs->lost > loss_thresh) {
			return true;
		}
	}

//~ecn	if (rs->delivered_ce > 0 && rs->delivered > 0 &&
//~ecn	    bbr->ecn_eligible && bbr_param(sk, bbr_ecn_thresh)) {
//~ecn		ecn_thresh = (u64)rs->delivered * bbr_param(sk, bbr_ecn_thresh) >>
//~ecn				BBR_SCALE;
//~ecn		if (rs->delivered_ce > ecn_thresh) {
//~ecn			return true;
//~ecn		}
//~ecn	}

	return false;
}

/* Calculate the tx_in_flight level that corresponded to excessive loss.
 * We find "lost_prefix" segs of the skb where loss rate went too high,
 * by solving for "lost_prefix" in the following equation:
 *   lost                     /  inflight                     >= loss_thresh
 *  (lost_prev + lost_prefix) / (inflight_prev + lost_prefix) >= loss_thresh
 * Then we take that equation, convert it to fixed point, and
 * round up to the nearest packet.
 */
static u32 bbr_inflight_hi_from_lost_skb(const struct sock *sk,
					  const struct rate_sample *rs,
					  const struct sk_buff *skb)
{
	const struct tcp_sock *tp = tcp_sk(sk);
	u32 loss_thresh  = bbr_param(sk, bbr_loss_thresh);
	u32 pcount, divisor, inflight_hi;
	s32 inflight_prev, lost_prev;
	u64 loss_budget, lost_prefix;

	pcount = tcp_skb_pcount(skb);

	/* How much data was in flight before this skb? */
	inflight_prev = rs->tx_in_flight - pcount;
	if (inflight_prev < 0) {
		WARN_ONCE(tcp_skb_tx_in_flight_is_suspicious(
				  pcount,
				  TCP_SKB_CB(skb)->sacked,
				  rs->tx_in_flight),
			  "tx_in_flight: %u pcount: %u reneg: %u",
			  rs->tx_in_flight, pcount, tcp_sk(sk)->is_sack_reneg);
		return ~0U;
	}

	/* How much inflight data was marked lost before this skb? */
	lost_prev = rs->lost - pcount;
	if (WARN_ONCE(lost_prev < 0,
		      "cwnd: %u ca: %d out: %u lost: %u pif: %u "
		      "tx_in_flight: %u tx.lost: %u tp->lost: %u rs->lost: %d "
		      "lost_prev: %d pcount: %d seq: %u end_seq: %u reneg: %u",
		      tcp_snd_cwnd(tp), inet_csk(sk)->icsk_ca_state,
		      tp->packets_out, tp->lost_out, tcp_packets_in_flight(tp),
		      rs->tx_in_flight, TCP_SKB_CB(skb)->tx.lost, tp->lost,
		      rs->lost, lost_prev, pcount,
		      TCP_SKB_CB(skb)->seq, TCP_SKB_CB(skb)->end_seq,
		      tp->is_sack_reneg))
		return ~0U;

	/* At what prefix of this lost skb did losss rate exceed loss_thresh? */
	loss_budget = (u64)inflight_prev * loss_thresh + BBR_UNIT - 1;
	loss_budget >>= BBR_SCALE;
	if (lost_prev >= loss_budget) {
		lost_prefix = 0;   /* previous losses crossed loss_thresh */
	} else {
		lost_prefix = loss_budget - lost_prev;
		lost_prefix <<= BBR_SCALE;
		divisor = BBR_UNIT - loss_thresh;
		if (WARN_ON_ONCE(!divisor))  /* loss_thresh is 8 bits */
			return ~0U;
		do_div(lost_prefix, divisor);
	}

	inflight_hi = inflight_prev + lost_prefix;
	return inflight_hi;
}

/* If loss/ECN rates during probing indicated we may have overfilled a
 * buffer, return an operating point that tries to leave unutilized headroom in
 * the path for other flows, for fairness convergence and lower RTTs and loss.
 */
static u32 bbr_inflight_with_headroom(const struct sock *sk)
{
	struct bbr *bbr = inet_csk_ca(sk);
	u32 headroom, headroom_fraction;

	if (bbr->inflight_hi == ~0U)
		return ~0U;

	headroom_fraction = bbr_param(sk, bbr_inflight_headroom);
	headroom = ((u64)bbr->inflight_hi * headroom_fraction) >> BBR_SCALE;
	headroom = max(headroom, 1U);
	return max_t(s32, bbr->inflight_hi - headroom,
		     bbr_param(sk, bbr_cwnd_min_target));
}

/* Bound cwnd to a sensible level, based on our current probing state
 * machine phase and model of a good inflight level (inflight_lo, inflight_hi).
 */
static void bbr_bound_cwnd_for_inflight_model(struct sock *sk)
{
	struct tcp_sock *tp = tcp_sk(sk);
	struct bbr *bbr = inet_csk_ca(sk);
	u32 cap;

	/* tcp_rcv_synsent_state_process() currently calls tcp_ack()
	 * and thus cong_control() without first initializing us(!).
	 */
	if (!bbr->initialized)
		return;

	cap = ~0U;
	if (bbr->mode == BBR_PROBE_BW &&
	    bbr->cycle_idx != BBR_BW_PROBE_CRUISE) {
		/* Probe to see if more packets fit in the path. */
		cap = bbr->inflight_hi;
	} else {
		if (bbr->mode == BBR_PROBE_RTT ||
		    (bbr->mode == BBR_PROBE_BW &&
		     bbr->cycle_idx == BBR_BW_PROBE_CRUISE))
			cap = bbr_inflight_with_headroom(sk);
	}
	/* Adapt to any loss/ECN since our last bw probe. */
	cap = min(cap, bbr->inflight_lo);

	cap = max_t(u32, cap, bbr_param(sk, bbr_cwnd_min_target));
	tcp_snd_cwnd_set(tp, min(cap, tcp_snd_cwnd(tp)));
}

//~ecn	/* How should we multiplicatively cut bw or inflight limits based on ECN? */
//~ecn	u32 bbr_ecn_cut(struct sock *sk)
//~ecn	{
//~ecn	struct bbr *bbr = inet_csk_ca(sk);
//~ecn
//~ecn	return BBR_UNIT -
//~ecn		((bbr->ecn_alpha * bbr_param(sk, bbr_ecn_factor)) >> BBR_SCALE);
//~ecn	}

/* Init lower bounds if have not inited yet. */
static void bbr_init_lower_bounds(struct sock *sk, bool init_bw)
{
	struct tcp_sock *tp = tcp_sk(sk);
	struct bbr *bbr = inet_csk_ca(sk);

	if (init_bw && bbr->bw_lo == ~0U)
		bbr->bw_lo = bbr_max_bw(sk);
	if (bbr->inflight_lo == ~0U)
		bbr->inflight_lo = tcp_snd_cwnd(tp);
}

/* Reduce bw and inflight to (1 - beta). */
static void bbr_loss_lower_bounds(struct sock *sk, u32 *bw, u32 *inflight)
{
	struct bbr* bbr = inet_csk_ca(sk);
	u32 loss_cut = BBR_UNIT - bbr_param(sk, bbr_beta);

	*bw = max_t(u32, bbr->bw_latest,
		    (u64)bbr->bw_lo * loss_cut >> BBR_SCALE);
	*inflight = max_t(u32, bbr->inflight_latest,
			  (u64)bbr->inflight_lo * loss_cut >> BBR_SCALE);
}

//~ecn	/* Reduce inflight to (1 - alpha*ecn_factor). */
//~ecn	static void bbr_ecn_lower_bounds(struct sock *sk, u32 *inflight)
//~ecn	{
//~ecn	struct bbr *bbr = inet_csk_ca(sk);
//~ecn	u32 ecn_cut = bbr_ecn_cut(sk);
//~ecn
//~ecn	*inflight = (u64)bbr->inflight_lo * ecn_cut >> BBR_SCALE;
//~ecn	}

/* Estimate a short-term lower bound on the capacity available now, based
 * on measurements of the current delivery process and recent history. When we
 * are seeing loss/ECN at times when we are not probing bw, then conservatively
 * move toward flow balance by multiplicatively cutting our short-term
 * estimated safe rate and volume of data (bw_lo and inflight_lo). We use a
 * multiplicative decrease in order to converge to a lower capacity in time
 * logarithmic in the magnitude of the decrease.
 *
 * However, we do not cut our short-term estimates lower than the current rate
 * and volume of delivered data from this round trip, since from the current
 * delivery process we can estimate the measured capacity available now.
 *
 * Anything faster than that approach would knowingly risk high loss, which can
 * cause low bw for Reno/CUBIC and high loss recovery latency for
 * request/response flows using any congestion control.
 */
static void bbr_adapt_lower_bounds(struct sock *sk,
				    const struct rate_sample *rs)
{
	struct bbr *bbr = inet_csk_ca(sk);
//~ecn	u32 ecn_inflight_lo = ~0U;

	/* We only use lower-bound estimates when not probing bw.
	 * When probing we need to push inflight higher to probe bw.
	 */
	if (bbr_is_probing_bandwidth(sk))
		return;

//~ecn	/* ECN response. */
//~ecn	if (bbr->ecn_in_round && bbr_param(sk, bbr_ecn_factor)) {
//~ecn		bbr_init_lower_bounds(sk, false);
//~ecn		bbr_ecn_lower_bounds(sk, &ecn_inflight_lo);
//~ecn	}

	/* Loss response. */
	if (bbr->loss_in_round) {
		bbr_init_lower_bounds(sk, true);
		bbr_loss_lower_bounds(sk, &bbr->bw_lo, &bbr->inflight_lo);
	}

//~ecn	/* Adjust to the lower of the levels implied by loss/ECN. */
//~ecn	bbr->inflight_lo = min(bbr->inflight_lo, ecn_inflight_lo);
	bbr->bw_lo = max(1U, bbr->bw_lo);
}

/* Reset any short-term lower-bound adaptation to congestion, so that we can
 * push our inflight up.
 */
static void bbr_reset_lower_bounds(struct sock *sk)
{
	struct bbr *bbr = inet_csk_ca(sk);

	bbr->bw_lo = ~0U;
	bbr->inflight_lo = ~0U;
}

/* After bw probing (STARTUP/PROBE_UP), reset signals before entering a state
 * machine phase where we adapt our lower bound based on congestion signals.
 */
static void bbr_reset_congestion_signals(struct sock *sk)
{
	struct bbr *bbr = inet_csk_ca(sk);

	bbr->loss_in_round = 0;
//~ecn	bbr->ecn_in_round = 0;
	bbr->loss_in_cycle = 0;
//~ecn	bbr->ecn_in_cycle = 0;
	bbr->bw_latest = 0;
	bbr->inflight_latest = 0;
}

static void bbr_exit_loss_recovery(struct sock *sk)
{
	struct tcp_sock *tp = tcp_sk(sk);
	struct bbr *bbr = inet_csk_ca(sk);

	tcp_snd_cwnd_set(tp, max(tcp_snd_cwnd(tp), bbr->prior_cwnd));
	bbr->try_fast_path = 0; /* bound cwnd using latest model */
}

/* Update rate and volume of delivered data from latest round trip. */
static void bbr_update_latest_delivery_signals(
	struct sock *sk, const struct rate_sample *rs, struct bbr_context *ctx)
{
	struct tcp_sock *tp = tcp_sk(sk);
	struct bbr *bbr = inet_csk_ca(sk);

	bbr->loss_round_start = 0;
	if (rs->interval_us <= 0 || !rs->acked_sacked)
		return; /* Not a valid observation */

	bbr->bw_latest       = max_t(u32, bbr->bw_latest,       ctx->sample_bw);
	bbr->inflight_latest = max_t(u32, bbr->inflight_latest, rs->delivered);

	if (!before(rs->prior_delivered, bbr->loss_round_delivered)) {
		bbr->loss_round_delivered = tp->delivered;
		bbr->loss_round_start = 1;  /* mark start of new round trip */
	}
}

/* Once per round, reset filter for latest rate and volume of delivered data. */
static void bbr_advance_latest_delivery_signals(
	struct sock *sk, const struct rate_sample *rs, struct bbr_context *ctx)
{
	struct bbr *bbr = inet_csk_ca(sk);

	/* If ACK matches a TLP retransmit, persist the filter. If we detect
	 * that a TLP retransmit plugged a tail loss, we'll want to remember
	 * how much data the path delivered before the tail loss.
	 */
	if (bbr->loss_round_start //~tlp && !rs->is_acking_tlp_retrans_seq
	) {
		bbr->bw_latest = ctx->sample_bw;
		bbr->inflight_latest = rs->delivered;
	}
}

/* Update (most of) our congestion signals: track the recent rate and volume of
 * delivered data, presence of loss, and EWMA degree of ECN marking.
 */
static void bbr_update_congestion_signals(
	struct sock *sk, const struct rate_sample *rs, struct bbr_context *ctx)
{
	struct bbr *bbr = inet_csk_ca(sk);
	u64 bw;

	if (rs->interval_us <= 0 || !rs->acked_sacked)
		return; /* Not a valid observation */
	bw = ctx->sample_bw;

	if (!rs->is_app_limited || bw >= bbr_max_bw(sk))
		bbr_take_max_bw_sample(sk, bw);

	bbr->loss_in_round |= (rs->losses > 0);

	if (!bbr->loss_round_start)
		return;		/* skip the per-round-trip updates */
	/* Now do per-round-trip updates. */
	bbr_adapt_lower_bounds(sk, rs);

	bbr->loss_in_round = 0;
//~ecn	bbr->ecn_in_round  = 0;
}

//~reno	/* Bandwidth probing can cause loss. To help coexistence with loss-based
//~reno	 * congestion control we spread out our probing in a Reno-conscious way. Due to
//~reno	 * the shape of the Reno sawtooth, the time required between loss epochs for an
//~reno	 * idealized Reno flow is a number of round trips that is the BDP of that
//~reno	 * flow. We count packet-timed round trips directly, since measured RTT can
//~reno	 * vary widely, and Reno is driven by packet-timed round trips.
//~reno	 */
//~reno	static bool bbr_is_reno_coexistence_probe_time(struct sock *sk)
//~reno	{
//~reno	struct bbr *bbr = inet_csk_ca(sk);
//~reno	u32 rounds;
//~reno
//~reno	/* Random loss can shave some small percentage off of our inflight
//~reno	 * in each round. To survive this, flows need robust periodic probes.
//~reno	 */
//~reno	rounds = min_t(u32, bbr_param(sk, bbr_bw_probe_max_rounds), bbr_target_inflight(sk));
//~reno	return bbr->rounds_since_probe >= rounds;
//~reno	}

/* How long do we want to wait before probing for bandwidth (and risking
 * loss)? We randomize the wait, for better mixing and fairness convergence.
 *
 * We bound the Reno-coexistence inter-bw-probe time to be 62-63 round trips.
 * This is calculated to allow fairness with a 25Mbps, 30ms Reno flow,
 * (eg 4K video to a broadband user):
 *   BDP = 25Mbps * .030sec /(1514bytes) = 61.9 packets
 *
 * We bound the BBR-native inter-bw-probe wall clock time to be:
 *  (a) higher than 2 sec: to try to avoid causing loss for a long enough time
 *      to allow Reno at 30ms to get 4K video bw, the inter-bw-probe time must
 *      be at least: 25Mbps * .030sec / (1514bytes) * 0.030sec = 1.9secs
 *  (b) lower than 3 sec: to ensure flows can start probing in a reasonable
 *      amount of time to discover unutilized bw on human-scale interactive
 *      time-scales (e.g. perhaps traffic from a web page download that we
 *      were competing with is now complete).
 */
static void bbr_pick_probe_wait(struct sock *sk)
{
	struct bbr *bbr = inet_csk_ca(sk);

//~reno	/* Decide the random round-trip bound for wait until probe: */
//~reno	bbr->rounds_since_probe =
//~reno		get_random_u32_below(bbr_param(sk, bbr_bw_probe_rand_rounds));
	/* Decide the random wall clock bound for wait until probe: */
	bbr->probe_wait_us = bbr_param(sk, bbr_bw_probe_base_us) +
			     get_random_u32_below(bbr_param(sk, bbr_bw_probe_rand_us));
}

static void bbr_set_cycle_idx(struct sock *sk, int cycle_idx)
{
	struct bbr *bbr = inet_csk_ca(sk);

	bbr->cycle_idx = cycle_idx;
	/* New phase, so need to update cwnd and pacing rate. */
	bbr->try_fast_path = 0;
}

/* Send at estimated bw to fill the pipe, but not queue. We need this phase
 * before PROBE_UP, because as soon as we send faster than the available bw
 * we will start building a queue, and if the buffer is shallow we can cause
 * loss. If we do not fill the pipe before we cause this loss, our bw_hi and
 * inflight_hi estimates will underestimate.
 */
static void bbr_start_bw_probe_refill(struct sock *sk, u32 bw_probe_up_rounds)
{
	struct tcp_sock *tp = tcp_sk(sk);
	struct bbr *bbr = inet_csk_ca(sk);

	bbr_reset_lower_bounds(sk);
	bbr->bw_probe_up_rounds = bw_probe_up_rounds;
	bbr->bw_probe_up_acks = 0;
	bbr->stopped_risky_probe = 0;
	bbr->ack_phase = BBR_ACKS_REFILLING;
	bbr->next_rtt_delivered = tp->delivered;
	bbr_set_cycle_idx(sk, BBR_BW_PROBE_REFILL);
}

/* Now probe max deliverable data rate and volume. */
static void bbr_start_bw_probe_up(struct sock *sk, struct bbr_context *ctx)
{
	struct tcp_sock *tp = tcp_sk(sk);
	struct bbr *bbr = inet_csk_ca(sk);

	bbr->ack_phase = BBR_ACKS_PROBE_STARTING;
	bbr->next_rtt_delivered = tp->delivered;
	bbr->cycle_mstamp = tp->tcp_mstamp;
	bbr_reset_full_bw(sk);
	bbr->full_bw = ctx->sample_bw;
	bbr_set_cycle_idx(sk, BBR_BW_PROBE_UP);
	bbr_raise_inflight_hi_slope(sk);
}

/* Start a new PROBE_BW probing cycle of some wall clock length. Pick a wall
 * clock time at which to probe beyond an inflight that we think to be
 * safe. This will knowingly risk packet loss, so we want to do this rarely, to
 * keep packet loss rates low. Also start a round-trip counter, to probe faster
 * if we estimate a Reno flow at our BDP would probe faster.
 */
static void bbr_start_bw_probe_down(struct sock *sk)
{
	struct tcp_sock *tp = tcp_sk(sk);
	struct bbr *bbr = inet_csk_ca(sk);

	bbr_reset_congestion_signals(sk);
	bbr->bw_probe_up_cnt = ~0U;     /* not growing inflight_hi any more */
	bbr_pick_probe_wait(sk);
	bbr->cycle_mstamp = tp->tcp_mstamp;		/* start wall clock */
	bbr->ack_phase = BBR_ACKS_PROBE_STOPPING;
	bbr->next_rtt_delivered = tp->delivered;
	bbr_set_cycle_idx(sk, BBR_BW_PROBE_DOWN);
}

/* Cruise: maintain what we estimate to be a neutral, conservative
 * operating point, without attempting to probe up for bandwidth or down for
 * RTT, and only reducing inflight in response to loss/ECN signals.
 */
static void bbr_start_bw_probe_cruise(struct sock *sk)
{
	struct bbr *bbr = inet_csk_ca(sk);

	if (bbr->inflight_lo != ~0U)
		bbr->inflight_lo = min(bbr->inflight_lo, bbr->inflight_hi);

	bbr_set_cycle_idx(sk, BBR_BW_PROBE_CRUISE);
}

/* Loss and/or ECN rate is too high while probing.
 * Adapt (once per bw probe) by cutting inflight_hi and then restarting cycle.
 */
static void bbr_handle_inflight_too_high(struct sock *sk,
					  const struct rate_sample *rs)
{
	struct bbr *bbr = inet_csk_ca(sk);
	const u32 beta = bbr_param(sk, bbr_beta);

	bbr->prev_probe_too_high = 1;
	bbr->bw_probe_samples = 0;  /* only react once per probe */
	/* If we are app-limited then we are not robustly
	 * probing the max volume of inflight data we think
	 * might be safe (analogous to how app-limited bw
	 * samples are not known to be robustly probing bw).
	 */
	if (!rs->is_app_limited) {
		bbr->inflight_hi = max_t(u32, rs->tx_in_flight,
					 (u64)bbr_target_inflight(sk) *
					 (BBR_UNIT - beta) >> BBR_SCALE);
	}
	if (bbr->mode == BBR_PROBE_BW && bbr->cycle_idx == BBR_BW_PROBE_UP)
		bbr_start_bw_probe_down(sk);
}

/* If we're seeing bw and loss samples reflecting our bw probing, adapt
 * using the signals we see. If loss or ECN mark rate gets too high, then adapt
 * inflight_hi downward. If we're able to push inflight higher without such
 * signals, push higher: adapt inflight_hi upward.
 */
static bool bbr_adapt_upper_bounds(struct sock *sk,
				    const struct rate_sample *rs,
				    struct bbr_context *ctx)
{
	struct bbr *bbr = inet_csk_ca(sk);

	/* Track when we'll see bw/loss samples resulting from our bw probes. */
	if (bbr->ack_phase == BBR_ACKS_PROBE_STARTING && bbr->round_start)
		bbr->ack_phase = BBR_ACKS_PROBE_FEEDBACK;
	if (bbr->ack_phase == BBR_ACKS_PROBE_STOPPING && bbr->round_start) {
		/* End of samples from bw probing phase. */
		bbr->bw_probe_samples = 0;
		bbr->ack_phase = BBR_ACKS_INIT;
		/* At this point in the cycle, our current bw sample is also
		 * our best recent chance at finding the highest available bw
		 * for this flow. So now is the best time to forget the bw
		 * samples from the previous cycle, by advancing the window.
		 */
		if (bbr->mode == BBR_PROBE_BW && !rs->is_app_limited)
			bbr_advance_max_bw_filter(sk);
		/* If we had an inflight_hi, then probed and pushed inflight all
		 * the way up to hit that inflight_hi without seeing any
		 * high loss/ECN in all the resulting ACKs from that probing,
		 * then probe up again, this time letting inflight persist at
		 * inflight_hi for a round trip, then accelerating beyond.
		 */
		if (bbr->mode == BBR_PROBE_BW &&
		    bbr->stopped_risky_probe && !bbr->prev_probe_too_high) {
			bbr_start_bw_probe_refill(sk, 0);
			return true;  /* yes, decided state transition */
		}
	}
	if (bbr_is_inflight_too_high(sk, rs)) {
		if (bbr->bw_probe_samples)  /*  sample is from bw probing? */
			bbr_handle_inflight_too_high(sk, rs);
	} else {
		/* Loss/ECN rate is declared safe. Adjust upper bound upward. */

		if (bbr->inflight_hi == ~0U)
			return false;   /* no excess queue signals yet */

		/* To be resilient to random loss, we must raise bw/inflight_hi
		 * if we observe in any phase that a higher level is safe.
		 */
		if (rs->tx_in_flight > bbr->inflight_hi) {
			bbr->inflight_hi = rs->tx_in_flight;
		}

		if (bbr->mode == BBR_PROBE_BW &&
		    bbr->cycle_idx == BBR_BW_PROBE_UP)
			bbr_probe_inflight_hi_upward(sk, rs);
	}

	return false;
}

/* Check if it's time to probe for bandwidth now, and if so, kick it off. */
static bool bbr_check_time_to_probe_bw(struct sock *sk,
					const struct rate_sample *rs)
{
	struct bbr *bbr = inet_csk_ca(sk);
	u32 n;

//~ecn	/* If we seem to be at an operating point where we are not seeing loss
//~ecn	 * but we are seeing ECN marks, then when the ECN marks cease we reprobe
//~ecn	 * quickly (in case cross-traffic has ceased and freed up bw).
//~ecn	 */
//~ecn	if (bbr_param(sk, bbr_ecn_reprobe_gain) && bbr->ecn_eligible &&
//~ecn	    bbr->ecn_in_cycle && !bbr->loss_in_cycle &&
//~ecn	    inet_csk(sk)->icsk_ca_state == TCP_CA_Open) {
//~ecn		/* Calculate n so that when bbr_raise_inflight_hi_slope()
//~ecn		 * computes growth_this_round as 2^n it will be roughly the
//~ecn		 * desired volume of data (inflight_hi*ecn_reprobe_gain).
//~ecn		 */
//~ecn		n = ilog2((((u64)bbr->inflight_hi *
//~ecn			    bbr_param(sk, bbr_ecn_reprobe_gain)) >> BBR_SCALE));
//~ecn		bbr_start_bw_probe_refill(sk, n);
//~ecn		return true;
//~ecn	}

	if (bbr_has_elapsed_in_phase(sk, bbr->probe_wait_us) //~reno ||
	    //~reno bbr_is_reno_coexistence_probe_time(sk)
	) {
		bbr_start_bw_probe_refill(sk, 0);
		return true;
	}
	return false;
}

/* Is it time to transition from PROBE_DOWN to PROBE_CRUISE? */
static bool bbr_check_time_to_cruise(struct sock *sk, u32 inflight, u32 bw)
{
	/* Always need to pull inflight down to leave headroom in queue. */
	if (inflight > bbr_inflight_with_headroom(sk))
		return false;

	return inflight <= bbr_inflight(sk, bw, BBR_UNIT);
}

/* PROBE_BW state machine: cruise, refill, probe for bw, or drain? */
static void bbr_update_cycle_phase(struct sock *sk,
				    const struct rate_sample *rs,
				    struct bbr_context *ctx)
{
	struct tcp_sock *tp = tcp_sk(sk);
	struct bbr *bbr = inet_csk_ca(sk);
	bool is_bw_probe_done = false;
	u32 inflight, bw;

	if (!bbr_full_bw_reached(sk))
		return;

	/* In DRAIN, PROBE_BW, or PROBE_RTT, adjust upper bounds. */
	if (bbr_adapt_upper_bounds(sk, rs, ctx))
		return;		/* already decided state transition */

	if (bbr->mode != BBR_PROBE_BW)
		return;

	inflight = bbr_packets_in_net_at_edt(sk, rs->prior_in_flight);
	bw = bbr_max_bw(sk);

	switch (bbr->cycle_idx) {
	/* First we spend most of our time cruising with a pacing_gain of 1.0,
	 * which paces at the estimated bw, to try to fully use the pipe
	 * without building queue. If we encounter loss/ECN marks, we adapt
	 * by slowing down.
	 */
	case BBR_BW_PROBE_CRUISE:
		if (bbr_check_time_to_probe_bw(sk, rs))
			return;		/* already decided state transition */
		break;

	/* After cruising, when it's time to probe, we first "refill": we send
	 * at the estimated bw to fill the pipe, before probing higher and
	 * knowingly risking overflowing the bottleneck buffer (causing loss).
	 */
	case BBR_BW_PROBE_REFILL:
		if (bbr->round_start) {
			/* After one full round trip of sending in REFILL, we
			 * start to see bw samples reflecting our REFILL, which
			 * may be putting too much data in flight.
			 */
			bbr->bw_probe_samples = 1;
			bbr_start_bw_probe_up(sk, ctx);
		}
		break;

	/* After we refill the pipe, we probe by using a pacing_gain > 1.0, to
	 * probe for bw. If we have not seen loss/ECN, we try to raise inflight
	 * to at least pacing_gain*BDP; note that this may take more than
	 * min_rtt if min_rtt is small (e.g. on a LAN).
	 *
	 * We terminate PROBE_UP bandwidth probing upon any of the following:
	 *
	 * (1) We've pushed inflight up to hit the inflight_hi target set in the
	 *     most recent previous bw probe phase. Thus we want to start
	 *     draining the queue immediately because it's very likely the most
	 *     recently sent packets will fill the queue and cause drops.
	 * (2) If inflight_hi has not limited bandwidth growth recently, and
	 *     yet delivered bandwidth has not increased much recently
	 *     (bbr->full_bw_now).
	 * (3) Loss filter says loss rate is "too high".
	 * (4) ECN filter says ECN mark rate is "too high".
	 *
	 * (1) (2) checked here, (3) (4) checked in bbr_is_inflight_too_high()
	 */
	case BBR_BW_PROBE_UP:
		if (bbr->prev_probe_too_high &&
		    inflight >= bbr->inflight_hi) {
			bbr->stopped_risky_probe = 1;
			is_bw_probe_done = true;
		} else {
			if (tp->is_cwnd_limited &&
			    tcp_snd_cwnd(tp) >= bbr->inflight_hi) {
				/* inflight_hi is limiting bw growth */
				bbr_reset_full_bw(sk);
				bbr->full_bw = ctx->sample_bw;
			} else if (bbr->full_bw_now) {
				/* Plateau in estimated bw. Pipe looks full. */
				is_bw_probe_done = true;
			}
		}
		if (is_bw_probe_done) {
			bbr->prev_probe_too_high = 0;  /* no loss/ECN (yet) */
			bbr_start_bw_probe_down(sk);  /* restart w/ down */
		}
		break;

	/* After probing in PROBE_UP, we have usually accumulated some data in
	 * the bottleneck buffer (if bw probing didn't find more bw). We next
	 * enter PROBE_DOWN to try to drain any excess data from the queue. To
	 * do this, we use a pacing_gain < 1.0. We hold this pacing gain until
	 * our inflight is less then that target cruising point, which is the
	 * minimum of (a) the amount needed to leave headroom, and (b) the
	 * estimated BDP. Once inflight falls to match the target, we estimate
	 * the queue is drained; persisting would underutilize the pipe.
	 */
	case BBR_BW_PROBE_DOWN:
		if (bbr_check_time_to_probe_bw(sk, rs))
			return;		/* already decided state transition */
		if (bbr_check_time_to_cruise(sk, inflight, bw))
			bbr_start_bw_probe_cruise(sk);
		break;

	default:
		WARN_ONCE(1, "BBR invalid cycle index %u\n", bbr->cycle_idx);
	}
}

/* Exiting PROBE_RTT, so return to bandwidth probing in STARTUP or PROBE_BW. */
static void bbr_exit_probe_rtt(struct sock *sk)
{
	struct bbr *bbr = inet_csk_ca(sk);

	bbr_reset_lower_bounds(sk);
	if (bbr_full_bw_reached(sk)) {
		bbr->mode = BBR_PROBE_BW;
		/* Raising inflight after PROBE_RTT may cause loss, so reset
		 * the PROBE_BW clock and schedule the next bandwidth probe for
		 * a friendly and randomized future point in time.
		 */
		bbr_start_bw_probe_down(sk);
		/* Since we are exiting PROBE_RTT, we know inflight is
		 * below our estimated BDP, so it is reasonable to cruise.
		 */
		bbr_start_bw_probe_cruise(sk);
	} else {
		bbr->mode = BBR_STARTUP;
	}
}

/* Exit STARTUP based on loss rate > 1% and loss gaps in round >= N. Wait until
 * the end of the round in recovery to get a good estimate of how many packets
 * have been lost, and how many we need to drain with a low pacing rate.
 */
static void bbr_check_loss_too_high_in_startup(struct sock *sk,
						const struct rate_sample *rs)
{
	struct bbr *bbr = inet_csk_ca(sk);

	if (bbr_full_bw_reached(sk))
		return;

	/* For STARTUP exit, check the loss rate at the end of each round trip
	 * of Recovery episodes in STARTUP. We check the loss rate at the end
	 * of the round trip to filter out noisy/low loss and have a better
	 * sense of inflight (extent of loss), so we can drain more accurately.
	 */
	if (rs->losses && bbr->loss_events_in_round < 0xf)
		bbr->loss_events_in_round++;  /* update saturating counter */
	if (bbr_param(sk, bbr_full_loss_cnt) && bbr->loss_round_start &&
	    inet_csk(sk)->icsk_ca_state == TCP_CA_Recovery &&
	    bbr->loss_events_in_round >= bbr_param(sk, bbr_full_loss_cnt) &&
	    bbr_is_inflight_too_high(sk, rs)) {
		bbr_handle_queue_too_high_in_startup(sk);
		return;
	}
	if (bbr->loss_round_start)
		bbr->loss_events_in_round = 0;
}

/* Estimate when the pipe is full, using the change in delivery rate: BBR
 * estimates bw probing filled the pipe if the estimated bw hasn't changed by
 * at least bbr_full_bw_thresh (25%) after bbr_full_bw_cnt (3) non-app-limited
 * rounds. Why 3 rounds: 1: rwin autotuning grows the rwin, 2: we fill the
 * higher rwin, 3: we get higher delivery rate samples. Or transient
 * cross-traffic or radio noise can go away. CUBIC Hystart shares a similar
 * design goal, but uses delay and inter-ACK spacing instead of bandwidth.
 */
static void bbr_check_full_bw_reached(struct sock *sk,
				       const struct rate_sample *rs,
				       struct bbr_context *ctx)
{
	struct bbr *bbr = inet_csk_ca(sk);
	u32 bw_thresh, full_cnt, thresh;

	if (bbr->full_bw_now || rs->is_app_limited)
		return;

	thresh = bbr_param(sk, bbr_full_bw_thresh);
	full_cnt = bbr_param(sk, bbr_full_bw_cnt);
	bw_thresh = (u64)bbr->full_bw * thresh >> BBR_SCALE;
	if (ctx->sample_bw >= bw_thresh) {
		bbr_reset_full_bw(sk);
		bbr->full_bw = ctx->sample_bw;
		return;
	}
	if (!bbr->round_start)
		return;
	++bbr->full_bw_cnt;
	bbr->full_bw_now = bbr->full_bw_cnt >= full_cnt;
	bbr->full_bw_reached |= bbr->full_bw_now;
}

/* If pipe is probably full, drain the queue and then enter steady-state. */
static void bbr_check_drain(struct sock *sk, const struct rate_sample *rs,
			    struct bbr_context *ctx)
{
	struct bbr *bbr = inet_csk_ca(sk);

	if (bbr->mode == BBR_STARTUP && bbr_full_bw_reached(sk)) {
		bbr->mode = BBR_DRAIN;	/* drain queue we created */
		/* Set ssthresh to export purely for monitoring, to signal
		 * completion of initial STARTUP by setting to a non-
		 * TCP_INFINITE_SSTHRESH value (ssthresh is not used by BBR).
		 */
		tcp_sk(sk)->snd_ssthresh =
				bbr_inflight(sk, bbr_max_bw(sk), BBR_UNIT);
		bbr_reset_congestion_signals(sk);
	}	/* fall through to check if in-flight is already small: */
	if (bbr->mode == BBR_DRAIN &&
	    bbr_packets_in_net_at_edt(sk, tcp_packets_in_flight(tcp_sk(sk))) <=
	    bbr_inflight(sk, bbr_max_bw(sk), BBR_UNIT)) {
		bbr->mode = BBR_PROBE_BW;
		bbr_start_bw_probe_down(sk);
	}
}

static void bbr_update_model(struct sock *sk, const struct rate_sample *rs,
			      struct bbr_context *ctx)
{
	bbr_update_congestion_signals(sk, rs, ctx);
	bbr_update_ack_aggregation(sk, rs);
	bbr_check_loss_too_high_in_startup(sk, rs);
	bbr_check_full_bw_reached(sk, rs, ctx);
	bbr_check_drain(sk, rs, ctx);
	bbr_update_cycle_phase(sk, rs, ctx);
	bbr_update_min_rtt(sk, rs);
}

/* Fast path for app-limited case.
 *
 * On each ack, we execute bbr state machine, which primarily consists of:
 * 1) update model based on new rate sample, and
 * 2) update control based on updated model or state change.
 *
 * There are certain workload/scenarios, e.g. app-limited case, where
 * either we can skip updating model or we can skip update of both model
 * as well as control. This provides signifcant softirq cpu savings for
 * processing incoming acks.
 *
 * In case of app-limited, if there is no congestion (loss/ecn) and
 * if observed bw sample is less than current estimated bw, then we can
 * skip some of the computation in bbr state processing:
 *
 * - if there is no rtt/mode/phase change: In this case, since all the
 *   parameters of the network model are constant, we can skip model
 *   as well control update.
 *
 * - else we can skip rest of the model update. But we still need to
 *   update the control to account for the new rtt/mode/phase.
 *
 * Returns whether we can take fast path or not.
 */
static bool bbr_run_fast_path(struct sock *sk, bool *update_model,
		const struct rate_sample *rs, struct bbr_context *ctx)
{
	struct bbr *bbr = inet_csk_ca(sk);
	u32 prev_min_rtt_us, prev_mode;

	if (bbr_param(sk, bbr_fast_path) && bbr->try_fast_path &&
	    rs->is_app_limited && ctx->sample_bw < bbr_max_bw(sk) &&
	    !bbr->loss_in_round //~ecn && !bbr->ecn_in_round
	) {
		prev_mode = bbr->mode;
		prev_min_rtt_us = bbr->min_rtt_us;
		bbr_check_drain(sk, rs, ctx);
		bbr_update_cycle_phase(sk, rs, ctx);
		bbr_update_min_rtt(sk, rs);

		if (bbr->mode == prev_mode &&
		    bbr->min_rtt_us == prev_min_rtt_us &&
		    bbr->try_fast_path) {
			return true;
		}

		/* Skip model update, but control still needs to be updated */
		*update_model = false;
	}
	return false;
}

__bpf_kfunc void bbr_main(struct sock *sk, const struct rate_sample *rs)
{
	struct tcp_sock *tp = tcp_sk(sk);
	struct bbr *bbr = inet_csk_ca(sk);
	struct bbr_context ctx = { 0 };
	bool update_model = true;
	u32 bw, round_delivered;
//~ecn	int ce_ratio = -1;

	round_delivered = bbr_update_round_start(sk, rs, &ctx);
//~reno	if (bbr->round_start) {
//~reno		bbr->rounds_since_probe =
//~reno			min_t(s32, bbr->rounds_since_probe + 1, 0xFF);
//~ecn		ce_ratio = bbr_update_ecn_alpha(sk);
//~reno	}
//~ecn	bbr_plb(sk, rs, ce_ratio);

//~ecn	bbr->ecn_in_round  |= (bbr->ecn_eligible && rs->is_ece);
	bbr_calculate_bw_sample(sk, rs, &ctx);
	bbr_update_latest_delivery_signals(sk, rs, &ctx);

	if (bbr_run_fast_path(sk, &update_model, rs, &ctx))
		goto out;

	if (update_model)
		bbr_update_model(sk, rs, &ctx);

	bbr_update_gains(sk);
	bw = bbr_bw(sk);
	bbr_set_pacing_rate(sk, bw, bbr->pacing_gain);
	bbr_set_cwnd(sk, rs, rs->acked_sacked, bw, bbr->cwnd_gain,
		     tcp_snd_cwnd(tp), &ctx);
	bbr_bound_cwnd_for_inflight_model(sk);

out:
	bbr_advance_latest_delivery_signals(sk, rs, &ctx);
	bbr->prev_ca_state = inet_csk(sk)->icsk_ca_state;
	bbr->loss_in_cycle |= rs->lost > 0;
//~ecn	bbr->ecn_in_cycle  |= rs->delivered_ce > 0;
}

__bpf_kfunc static void bbr_init(struct sock *sk)
{
	struct tcp_sock *tp = tcp_sk(sk);
	struct bbr *bbr = inet_csk_ca(sk);

	bbr->initialized = 1;

	bbr->init_cwnd = min(0x7FU, tcp_snd_cwnd(tp));
	bbr->prior_cwnd = tp->prior_cwnd;
	tp->snd_ssthresh = TCP_INFINITE_SSTHRESH;
	bbr->next_rtt_delivered = tp->delivered;
	bbr->prev_ca_state = TCP_CA_Open;

	bbr->probe_rtt_done_stamp = 0;
	bbr->probe_rtt_round_done = 0;
	bbr->probe_rtt_min_us = tcp_min_rtt(tp);
	bbr->probe_rtt_min_stamp = tcp_jiffies32;
	bbr->min_rtt_us = tcp_min_rtt(tp);
	bbr->min_rtt_stamp = tcp_jiffies32;

	bbr->has_seen_rtt = 0;
	bbr_init_pacing_rate_from_rtt(sk);

	bbr->round_start = 0;
	bbr->idle_restart = 0;
	bbr->full_bw_reached = 0;
	bbr->full_bw = 0;
	bbr->full_bw_cnt = 0;
	bbr->cycle_mstamp = 0;
	bbr->cycle_idx = 0;

	bbr_reset_startup_mode(sk);

	bbr->ack_epoch_mstamp = tp->tcp_mstamp;
	bbr->ack_epoch_acked = 0;
	bbr->extra_acked_win_rtts = 0;
	bbr->extra_acked_win_idx = 0;
	bbr->extra_acked[0] = 0;
	bbr->extra_acked[1] = 0;

//~ecn	bbr->ce_state = 0;
//~plb	bbr->prior_rcv_nxt = tp->rcv_nxt;
	bbr->try_fast_path = 0;

//~tcp	cmpxchg(&sk->sk_pacing_status, SK_PACING_NONE, SK_PACING_NEEDED);

	/* Start sampling ECN mark rate after first full flight is ACKed: */
	bbr->loss_round_delivered = tp->delivered + 1;
	bbr->loss_round_start = 0;
	bbr->undo_bw_lo = 0;
	bbr->undo_inflight_lo = 0;
	bbr->undo_inflight_hi = 0;
	bbr->loss_events_in_round = 0;
//~ecn	bbr->startup_ecn_rounds = 0;
	bbr_reset_congestion_signals(sk);
	bbr->bw_lo = ~0U;
	bbr->bw_hi[0] = 0;
	bbr->bw_hi[1] = 0;
	bbr->inflight_lo = ~0U;
	bbr->inflight_hi = ~0U;
	bbr_reset_full_bw(sk);
	bbr->bw_probe_up_cnt = ~0U;
	bbr->bw_probe_up_acks = 0;
	bbr->bw_probe_up_rounds = 0;
	bbr->probe_wait_us = 0;
	bbr->stopped_risky_probe = 0;
	bbr->ack_phase = BBR_ACKS_INIT;
//~reno	bbr->rounds_since_probe = 0;
	bbr->bw_probe_samples = 0;
	bbr->prev_probe_too_high = 0;
//~ecn	bbr->ecn_eligible = 0;
//~ecn	bbr->ecn_alpha = bbr_param(sk, bbr_ecn_alpha_init);
//~ecn	bbr->alpha_last_delivered = 0;
//~ecn	bbr->alpha_last_delivered_ce = 0;
//~plb	bbr->plb.pause_until = 0;

	// bazoo not needed
	// tp->fast_ack_mode = bbr_fast_ack_mode ? 1 : 0;

//~ecn	if (bbr_can_use_ecn(sk))
//~ecn		tp->ecn_flags |= TCP_ECN_ECT_PERMANENT;
}

/* BBR marks the current round trip as a loss round. */
static void bbr_note_loss(struct sock *sk)
{
	struct tcp_sock *tp = tcp_sk(sk);
	struct bbr *bbr = inet_csk_ca(sk);

	/* Capture "current" data over the full round trip of loss, to
	 * have a better chance of observing the full capacity of the path.
	 */
	if (!bbr->loss_in_round)  /* first loss in this round trip? */
		bbr->loss_round_delivered = tp->delivered;  /* set round trip */
	bbr->loss_in_round = 1;
	bbr->loss_in_cycle = 1;
}

/* Core TCP stack informs us that the given skb was just marked lost. */
__bpf_kfunc static void bbr_skb_marked_lost(struct sock *sk,
					    const struct sk_buff *skb)
{
	struct tcp_sock *tp = tcp_sk(sk);
	struct bbr *bbr = inet_csk_ca(sk);
	struct tcp_skb_cb *scb = TCP_SKB_CB(skb);
	struct rate_sample rs = {};

	bbr_note_loss(sk);

	if (!bbr->bw_probe_samples)
		return;  /* not an skb sent while probing for bandwidth */
	if (unlikely(!scb->tx.delivered_mstamp))
		return;  /* skb was SACKed, reneged, marked lost; ignore it */
	/* We are probing for bandwidth. Construct a rate sample that
	 * estimates what happened in the flight leading up to this lost skb,
	 * then see if the loss rate went too high, and if so at which packet.
	 */
	rs.tx_in_flight = scb->tx.in_flight;
	rs.lost = tp->lost - scb->tx.lost;
	rs.is_app_limited = scb->tx.is_app_limited;
	if (bbr_is_inflight_too_high(sk, &rs)) {
		rs.tx_in_flight = bbr_inflight_hi_from_lost_skb(sk, &rs, skb);
		bbr_handle_inflight_too_high(sk, &rs);
	}
}

//~tlp	static void bbr_run_loss_probe_recovery(struct sock *sk)
//~tlp	{
//~tlp	struct tcp_sock *tp = tcp_sk(sk);
//~tlp	struct bbr *bbr = inet_csk_ca(sk);
//~tlp	struct rate_sample rs = {0};
//~tlp
//~tlp	bbr_note_loss(sk);
//~tlp
//~tlp	if (!bbr->bw_probe_samples)
//~tlp		return;  /* not sent while probing for bandwidth */
//~tlp	/* We are probing for bandwidth. Construct a rate sample that
//~tlp	 * estimates what happened in the flight leading up to this
//~tlp	 * loss, then see if the loss rate went too high.
//~tlp	 */
//~tlp	rs.lost = 1;	/* TLP probe repaired loss of a single segment */
//~tlp	rs.tx_in_flight = bbr->inflight_latest + rs.lost;
//~tlp	rs.is_app_limited = tp->tlp_orig_data_app_limited;
//~tlp	if (bbr_is_inflight_too_high(sk, &rs))
//~tlp		bbr_handle_inflight_too_high(sk, &rs);
//~tlp	}

/* Revert short-term model if current loss recovery event was spurious. */
__bpf_kfunc static u32 bbr_undo_cwnd(struct sock *sk)
{
	struct bbr *bbr = inet_csk_ca(sk);

	bbr_reset_full_bw(sk); /* spurious slow-down; reset full bw detector */
	bbr->loss_in_round = 0;

	/* Revert to cwnd and other state saved before loss episode. */
	bbr->bw_lo = max(bbr->bw_lo, bbr->undo_bw_lo);
	bbr->inflight_lo = max(bbr->inflight_lo, bbr->undo_inflight_lo);
	bbr->inflight_hi = max(bbr->inflight_hi, bbr->undo_inflight_hi);
	bbr->try_fast_path = 0;  /* take slow path to set proper cwnd, pacing */
	return bbr->prior_cwnd;
}

/* Entering loss recovery, so save state for when we undo recovery. */
__bpf_kfunc static u32 bbr_ssthresh(struct sock *sk)
{
	struct bbr *bbr = inet_csk_ca(sk);

	bbr_save_cwnd(sk);
	/* For undo, save state that adapts based on loss signal. */
	bbr->undo_bw_lo		= bbr->bw_lo;
	bbr->undo_inflight_lo	= bbr->inflight_lo;
	bbr->undo_inflight_hi	= bbr->inflight_hi;
	return tcp_sk(sk)->snd_ssthresh;
}

static enum tcp_bbr_phase bbr_get_phase(struct bbr *bbr)
{
	switch (bbr->mode) {
	case BBR_STARTUP:
		return BBR_PHASE_STARTUP;
	case BBR_DRAIN:
		return BBR_PHASE_DRAIN;
	case BBR_PROBE_BW:
		break;
	case BBR_PROBE_RTT:
		return BBR_PHASE_PROBE_RTT;
	default:
		return BBR_PHASE_INVALID;
	}
	switch (bbr->cycle_idx) {
	case BBR_BW_PROBE_UP:
		return BBR_PHASE_PROBE_BW_UP;
	case BBR_BW_PROBE_DOWN:
		return BBR_PHASE_PROBE_BW_DOWN;
	case BBR_BW_PROBE_CRUISE:
		return BBR_PHASE_PROBE_BW_CRUISE;
	case BBR_BW_PROBE_REFILL:
		return BBR_PHASE_PROBE_BW_REFILL;
	default:
		return BBR_PHASE_INVALID;
	}
}

static size_t bbr_get_info(struct sock *sk, u32 ext, int *attr,
			    struct tcp_bbr_info *bbr_info)
{
	struct bbr *bbr = inet_csk_ca(sk);
	u64 bw = bbr_bw_bytes_per_sec(sk, bbr_bw(sk));
	u64 bw_hi = bbr_bw_bytes_per_sec(sk, bbr_max_bw(sk));
	u64 bw_lo = bbr->bw_lo == ~0U ?
		~0ULL : bbr_bw_bytes_per_sec(sk, bbr->bw_lo);

	memset(bbr_info, 0, sizeof(*bbr_info));
	bbr_info->bbr_bw_lo		= (u32)bw;
	bbr_info->bbr_bw_hi		= (u32)(bw >> 32);
	bbr_info->bbr_min_rtt		= bbr->min_rtt_us;
	bbr_info->bbr_pacing_gain	= bbr->pacing_gain;
	bbr_info->bbr_cwnd_gain		= bbr->cwnd_gain;
	bbr_info->bbr_bw_hi_lsb		= (u32)bw_hi;
	bbr_info->bbr_bw_hi_msb		= (u32)(bw_hi >> 32);
	bbr_info->bbr_bw_lo_lsb		= (u32)bw_lo;
	bbr_info->bbr_bw_lo_msb		= (u32)(bw_lo >> 32);
	bbr_info->bbr_mode		= bbr->mode;
	bbr_info->bbr_phase		= (__u8)bbr_get_phase(bbr);
	bbr_info->bbr_version		= (__u8)BBR_VERSION;
	bbr_info->bbr_inflight_lo	= bbr->inflight_lo;
	bbr_info->bbr_inflight_hi	= bbr->inflight_hi;
	bbr_info->bbr_extra_acked	= bbr_extra_acked(sk);
	
	return sizeof(*bbr_info);
}

__bpf_kfunc static void bbr_set_state(struct sock *sk, u8 new_state)
{
	struct tcp_sock *tp = tcp_sk(sk);
	struct bbr *bbr = inet_csk_ca(sk);

	if (new_state == TCP_CA_Loss) {

		bbr->prev_ca_state = TCP_CA_Loss;
//~plb		tcp_plb_update_state_upon_rto(sk, &bbr->plb);
		/* The tcp_write_timeout() call to sk_rethink_txhash() likely
		 * repathed this flow, so re-learn the min network RTT on the
		 * new path:
		 */
		bbr_reset_full_bw(sk);
		if (!bbr_is_probing_bandwidth(sk) && bbr->inflight_lo == ~0U) {
			/* bbr_adapt_lower_bounds() needs cwnd before
			 * we suffered an RTO, to update inflight_lo:
			 */
			bbr->inflight_lo =
				max(tcp_snd_cwnd(tp), bbr->prior_cwnd);
		}
	} else if (bbr->prev_ca_state == TCP_CA_Loss &&
		   new_state != TCP_CA_Loss) {
		bbr_exit_loss_recovery(sk);
	}
}


// bazoo
// static struct tcp_congestion_ops tcp_bbr_cong_ops = {
// 	.flags		= TCP_CONG_NON_RESTRICTED | TCP_CONG_WANTS_CE_EVENTS,
// 	.name		= "bbr",
// 	.owner		= THIS_MODULE,
// 	.init		= bbr_init,
// 	.cong_control	= bbr_main,
// 	.sndbuf_expand	= bbr_sndbuf_expand,
// 	.skb_marked_lost = bbr_skb_marked_lost,
// 	.undo_cwnd	= bbr_undo_cwnd,
// 	.cwnd_event	= bbr_cwnd_event,
// 	.ssthresh	= bbr_ssthresh,
// 	.tso_segs	= bbr_tso_segs,
// 	.get_info	= bbr_get_info,
// 	.set_state	= bbr_set_state,
// };

// bazoo
// static const struct btf_kfunc_id_set tcp_bbr_kfunc_set = {
// 	.owner = THIS_MODULE,
// 	.set   = &tcp_bbr_check_kfunc_ids,
// };

// bazoo
// static int bbr_register(void)
// {
// 	int ret;
// 
// 	BUILD_BUG_ON(sizeof(struct bbr) > ICSK_CA_PRIV_SIZE);
// 
// 	ret = register_btf_kfunc_id_set(BPF_PROG_TYPE_STRUCT_OPS, &tcp_bbr_kfunc_set);
// 	if (ret < 0)
// 		return ret;
// 	return tcp_register_congestion_control(&tcp_bbr_cong_ops);
// }

// bazoo
// static void bbr_unregister(void)
// {
// 	tcp_unregister_congestion_control(&tcp_bbr_cong_ops);
// }

// bazoo
// module_init(bbr_register);
// module_exit(bbr_unregister);

// MODULE_AUTHOR("Van Jacobson <vanj@google.com>");
// MODULE_AUTHOR("Neal Cardwell <ncardwell@google.com>");
// MODULE_AUTHOR("Yuchung Cheng <ycheng@google.com>");
// MODULE_AUTHOR("Soheil Hassas Yeganeh <soheil@google.com>");
// MODULE_AUTHOR("Priyaranjan Jha <priyarjha@google.com>");
// MODULE_AUTHOR("Yousuk Seung <ysseung@google.com>");
// MODULE_AUTHOR("Kevin Yang <yyd@google.com>");
// MODULE_AUTHOR("Arjun Roy <arjunroy@google.com>");
// MODULE_AUTHOR("David Morley <morleyd@google.com>");

// MODULE_LICENSE("Dual BSD/GPL");
// MODULE_DESCRIPTION("TCP BBR (Bottleneck Bandwidth and RTT)");
// MODULE_VERSION(__stringify(BBR_VERSION));

//#)


;;;
;;;; TCP
;;;


(c-declare tcp #/C/
void tcp_init(struct sock* sk, u32 mss, u64 timer, u64 freq)
{
	memset(sk, 0, sizeof(struct tcp_sock));

	// from sock_init_data_uid
	sk->sk_pacing_rate = ~0UL;
//~tso	sk->sk_pacing_shift = 10;

	struct inet_connection_sock *icsk = inet_csk(sk);
	struct tcp_sock *tp = tcp_sk(sk);

	timer_base = timer;
	timer_frequency = freq;
	tcp_update_jiffies(timer);

	minmax_reset(&tp->rtt_min, tcp_jiffies32, ~0U);

	/* So many TCP implementations out there (incorrectly) count the
	 * initial SYN frame in their delayed-ACK and congestion control
	 * algorithms that we must have the following bandaid to talk
	 * efficiently to them.  -DaveM
	 */
	tcp_snd_cwnd_set(tp, TCP_INIT_CWND);

	/* There's a bubble in the pipe until at least the first ACK. */
	tp->app_limited = ~0U;

	/* See draft-stevens-tcpca-spec-01 for discussion of the
	 * initialization of these values.
	 */
	tp->snd_ssthresh = TCP_INFINITE_SSTHRESH;
	tp->snd_cwnd_clamp = ~0;
	tp->mss_cache = mss;
}
//#)


;;
;;; Output
;;


(c-declare output #/C/
static void tcp_mstamp_refresh(struct tcp_sock *tp, u64 timer)
{
	// bazoo receiving this from current-monotonic-nanoseconds is correct i think
	u64 ns = timer_to_ns(timer);

	tp->tcp_clock_cache = ns;
	tp->tcp_mstamp = div_u64(ns, NSEC_PER_USEC);
}

static void tcp_skb_sent(struct sock* sk, struct sk_buff* skb, bool queue_empty, u32 seq, u32 cnt, u64 timer)
{
	struct tcp_sock *tp = tcp_sk(sk);
	struct tcp_skb_cb *scb = TCP_SKB_CB(skb);

	tcp_rate_check_app_limited(sk, queue_empty);  /* is sending application-limited? */

	tp->packets_out += tcp_skb_pcount(skb);
//~tcp	tp->write_seq = seq + 1;
	tcp_mstamp_refresh(tp, timer);

	// bazoo quick try to refine as I think
	// skb_mstamp_ns is earliest departure time
	skb->skb_mstamp_ns = timer_to_ns(timer);

	// bazoo no idea about this
	scb->seq = seq;
	scb->end_seq = seq + 1;
	scb->tx.in_flight += cnt;
}
//#)


;;
;;; Input
;;


(c-declare input #/C/
/* Sum the number of packets on the wire we have marked as lost, and
 * notify the congestion control module that the given skb was marked lost.
 */
static void tcp_notify_skb_loss_event(struct tcp_sock *tp, const struct sk_buff *skb)
{
	struct sock *sk = (struct sock *)tp;

	tp->lost += tcp_skb_pcount(skb);
	// bbr_skb_marked_lost(sk, skb);
}

void tcp_mark_skb_lost(struct sock *sk, struct sk_buff *skb)
{
	struct tcp_sock *tp = tcp_sk(sk);

//~tcp	wait needs to go with tp->retrans_out
//~tcp	tp->lost_out += tcp_skb_pcount(skb);
	tcp_notify_skb_loss_event(tp, skb);
}

/* Updates the delivered and delivered_ce counts */
static void tcp_count_delivered(struct tcp_sock *tp, u32 delivered,
				bool ece_ack)
{
	tp->delivered += delivered;
//~ecn	if (ece_ack)
//~ecn		tp->delivered_ce += delivered;
}

static void tcp_update_rtt_min(struct sock *sk, u32 rtt_us)
{
	u32 wlen = 300 * HZ;
	struct tcp_sock *tp = tcp_sk(sk);

	minmax_running_min(&tp->rtt_min, wlen, tcp_jiffies32,
			   rtt_us ? : jiffies_to_usecs(1));
}

static bool tcp_ack_update_rtt(struct sock *sk, long ca_rtt_us, struct rate_sample *rs)
{
	const struct tcp_sock *tp = tcp_sk(sk);

	rs->rtt_us = ca_rtt_us; /* RTT of last (S)ACKed packet (or -1) */

	tcp_update_rtt_min(sk, ca_rtt_us);

	return true;
}

/* Returns the number of packets newly acked or sacked by the current ACK */
static u32 tcp_newly_delivered(struct sock *sk, u32 prior_delivered)
{
	struct tcp_sock *tp = tcp_sk(sk);
	u32 delivered;

	delivered = tp->delivered - prior_delivered;

	return delivered;
}

void tcp_ack(struct sock* sk, struct sk_buff* skb, u32 lost, float srtt, bool queue_empty, u64 timer, struct rate_sample* rateinfo)
{
	struct inet_connection_sock *icsk = inet_csk(sk);
	struct tcp_sock *tp = tcp_sk(sk);
	struct rate_sample rs = { .prior_delivered = 0 };

	u32 delivered = tp->delivered;
	bool is_sack_reneg = false; // bazoo tp->is_sack_reneg;
	u32 pcount = tcp_skb_pcount(skb);

	tcp_mstamp_refresh(tp, timer);

	tcp_update_jiffies(timer);

	if (srtt != -1.)
		tp->srtt_us = srtt * 1000000;

	rs.prior_in_flight = tcp_packets_in_flight(tp);
	tcp_rate_check_app_limited(sk, queue_empty);

	// from tcp_clean_rtx_queue
	tcp_count_delivered(tp, pcount, false);
	tp->packets_out -= pcount;
	tcp_rate_skb_delivered(sk, skb, &rs);
	u64 last_ackt = tcp_skb_timestamp_us(skb); // bazoo not sure
	long ca_rtt_us = tcp_stamp_us_delta(tp->tcp_mstamp, last_ackt); // bazoo not sure
	tcp_ack_update_rtt(sk, ca_rtt_us, &rs);

	delivered = tcp_newly_delivered(sk, delivered);

//~tcp	rs.is_ack_delayed = !!(flag & FLAG_ACK_MAYBE_DELAYED);
//~ecn	rs.is_ece = !!(flag & FLAG_ECE);
	tcp_rate_gen(sk, delivered, lost, is_sack_reneg, &rs);

	if (rateinfo)
		memcpy(rateinfo, &rs, sizeof(struct rate_sample));

	bbr_main(sk, &rs);
}

void tcp_skb_lost(struct sock* sk, struct sk_buff *skb)
{
	struct tcp_sock *tp = tcp_sk(sk);

	tp->packets_out -= tcp_skb_pcount(skb);

	tcp_mark_skb_lost(sk, skb);
}

void tcp_set_is_cwnd_limited(struct sock *sk, bool is_cwnd_limited)
{
	struct tcp_sock *tp = tcp_sk(sk);

	tp->is_cwnd_limited = is_cwnd_limited;
}

void tcp_set_ca_state(struct sock *sk, const u8 ca_state)
{
	struct inet_connection_sock *icsk = inet_csk(sk);

	bbr_set_state(sk, ca_state);
	icsk->icsk_ca_state = ca_state;
}
//#)


;;;
;;;; API
;;;


(c-enumerant TCP_CA_Open)
(c-enumerant TCP_CA_Disorder)
(c-enumerant TCP_CA_CWR)
(c-enumerant TCP_CA_Recovery)
(c-enumerant TCP_CA_Loss)


(c-enumerant BBR_STARTUP)
(c-enumerant BBR_DRAIN)
(c-enumerant BBR_PROBE_BW)
(c-enumerant BBR_PROBE_RTT)


(c-enumerant BBR_PHASE_INVALID)
(c-enumerant BBR_PHASE_STARTUP)
(c-enumerant BBR_PHASE_DRAIN)
(c-enumerant BBR_PHASE_PROBE_RTT)
(c-enumerant BBR_PHASE_PROBE_BW_UP)
(c-enumerant BBR_PHASE_PROBE_BW_DOWN)
(c-enumerant BBR_PHASE_PROBE_BW_CRUISE)
(c-enumerant BBR_PHASE_PROBE_BW_REFILL)


(c-declare typedef #/C/
	typedef struct sock sock;
	typedef struct tcp_sock tcpsock;
	typedef struct sk_buff skbuff;
	typedef struct tcp_skb_cb skbcb;
	typedef struct rate_sample ratesample;
	typedef struct bbr bbr;
	typedef struct tcp_bbr_info bbrinfo;
//#)


(c-type u8  uint8)
(c-type u16 uint16)
(c-type u32 uint32)
(c-type u64 uint64)


(c-type u8* (pointer u8))
(c-type u16* (pointer u16))
(c-type u32* (pointer u32))
(c-type u64* (pointer u64))


(c-type s8  int8)
(c-type s16 int16)
(c-type s32 int32)
(c-type s64 int64)


(c-type tcpsock  (type "tcpsock"))
(c-type tcpsock* (pointer tcpsock (sock* tcpsock*)))


(c-type sock  (type "sock"))
(c-type sock* (pointer sock sock*))


(c-type skbuff  (struct "sk_buff"))
(c-type skbuff* (pointer skbuff skbuff*))


(c-type ratesample  (type "ratesample"))
(c-type ratesample* (pointer ratesample ratesample*))


(c-type bbr  (type "bbr"))
(c-type bbr* (pointer bbr bbr*))


(c-type bbrinfo  (type "bbrinfo"))
(c-type bbrinfo* (pointer bbrinfo bbrinfo*))


(c-structure tcpsock
  ;; sock
  @tcp (u32   inet_conn.icsk_inet.sk.sk_pacing_status)
  (ulong inet_conn.icsk_inet.sk.sk_pacing_rate)
  @tso (uint  inet_conn.icsk_inet.sk.sk_gso_max_size)
  @tso (u8    inet_conn.icsk_inet.sk.sk_pacing_shift)
  ;; inet_connection_sock
  (u8    inet_conn.icsk_ca_state)
  @ecn (u8    inet_conn.icsk_ack.pending)
  (u64   inet_conn.icsk_ca_priv 18)
  ;; tcp_sock
  @plb (u32 rcv_nxt)
  @tcp (u32 snd_nxt)
  (u32 mss_cache)
  @tlp (bool tlp_orig_data_app_limited)
  (bool is_cwnd_limited)
  @tcp (u64 tcp_wstamp_ns)
  (u64 tcp_clock_cache)
  (u64 tcp_mstamp)
  (u32 srtt_us)
  (u32 packets_out)
  @tcp (u32 retrans_out)
  @ecn (u8 ecn_flags)
  (u32 snd_ssthresh)
  (u32 snd_cwnd)
  (u32 snd_cwnd_clamp)
  (u32 prior_cwnd)
  (u32 delivered)
  @ecn (u32 delivered_ce)
  (u32 lost)
  (u32 app_limited)
  (u64 first_tx_mstamp)
  (u64 delivered_mstamp)
  (u32 rate_delivered)
  (u32 rate_interval_us)
  @tcp (u32 write_seq)
  @tcp (u32 lost_out)
  @tcp (u32 sacked_out))


(c-structure skbuff
  (u64 skb_mstamp_ns))


(c-structure skbcb
  (u32  seq)
  (u32  end_seq)
  (u8   sacked)
  (bool tx.is_app_limited)
  @ecn (u32  tx.delivered_ce)
  (u32  tx.delivered)
  (u32  tx.first_tx_mstamp)
  (u32  tx.delivered_mstamp)
  (u32  tx.in_flight)
  (u32  tx.lost))


(c-structure ratesample
  (u64  prior_mstamp)
  (u32  prior_lost)
  (u32  prior_delivered)
  @ecn (u32  prior_delivered_ce)
  (u32  tx_in_flight)
  (s32  lost)
  (s32  delivered)
  @ecn (s32  delivered_ce)
  (long interval_us)
  (u32  snd_interval_us)
  (u32  rcv_interval_us)
  (long rtt_us)
  (int  losses)
  (u32  acked_sacked)
  (u32  prior_in_flight)
  (u32  last_end_seq)
  (bool is_app_limited)
  (bool is_retrans)
  @tlp (bool is_acking_tlp_retrans_seq)
  @tcp (bool is_ack_delayed)
  @ecn (bool is_ece))


(c-structure bbr
  (u32 min_rtt_us)
  (u32 min_rtt_stamp)
  (u32 probe_rtt_done_stamp)
  (u32 probe_rtt_min_us)
  (u32 probe_rtt_min_stamp)
  (u32 next_rtt_delivered)
  (u64 cycle_mstamp)
  (u32 mode)
  (u32 prev_ca_state)
  (bool round_start)
  @ecn (bool ce_state)
  (u32 bw_probe_up_rounds)
  (bool try_fast_path)
  (bool idle_restart)
  (bool probe_rtt_round_done)
  (u32 init_cwnd)
  (u32 pacing_gain)
  (u32 cwnd_gain)
  (bool full_bw_reached)
  (u32 full_bw_cnt)
  (u32 cycle_idx)
  (bool has_seen_rtt)
  (u32 prior_cwnd)
  (u32 full_bw)
  (u64 ack_epoch_mstamp)
  (u16 |extra_acked[0]|)
  (u16 |extra_acked[1]|)
  (u32 ack_epoch_acked)
  (u32 extra_acked_win_rtts)
  (bool extra_acked_win_idx)
  (bool full_bw_now)
  @ecn (u32 startup_ecn_rounds)
  (bool loss_in_cycle)
  @ecn (bool ecn_in_cycle)
  (u32 loss_round_delivered)
  (u32 undo_bw_lo)
  (u32 undo_inflight_lo)
  (u32 undo_inflight_hi)
  (u32 bw_latest)
  (u32 bw_lo)
  (u32 |bw_hi[0]|)
  (u32 |bw_hi[1]|)
  (u32 inflight_latest)
  (u32 inflight_lo)
  (u32 inflight_hi)
  (u32 bw_probe_up_cnt)
  (u32 bw_probe_up_acks)
  (u32 probe_wait_us)
  @plb (u32 prior_rcv_nxt)
  @ecn (bool ecn_eligible)
  @ecn (u32 ecn_alpha)
  (bool bw_probe_samples)
  (bool prev_probe_too_high)
  (bool stopped_risky_probe)
  @reno (u32 rounds_since_probe)
  (bool loss_round_start)
  (bool loss_in_round)
  @ecn (bool ecn_in_round)
  (u32 ack_phase)
  (u32 loss_events_in_round)
  (bool initialized)
  @ecn (u32 alpha_last_delivered)
  @ecn (u32 alpha_last_delivered_ce))


(c-structure bbrinfo
  (u32 bbr_bw_lo)
  (u32 bbr_bw_hi)
  (u32 bbr_min_rtt)
  (u32 bbr_pacing_gain)
  (u32 bbr_cwnd_gain)
  (u32 bbr_bw_hi_lsb)
  (u32 bbr_bw_hi_msb)
  (u32 bbr_bw_lo_lsb)
  (u32 bbr_bw_lo_msb)
  (u8 bbr_mode)
  (u8 bbr_phase)
  (u8 unused1)
  (u8 bbr_version)
  (u32 bbr_inflight_lo)
  (u32 bbr_inflight_hi)
  (u32 bbr_extra_acked))


;;
;;; TCP
;;


(c-external (new_tcpsock) sock*
  #/C/
	if (sizeof(struct bbr) > ICSK_CA_PRIV_SIZE)
		___return(NULL);
	else {
		struct tcp_sock *tp = (struct tcp_sock *) malloc(sizeof(struct tcp_sock));
		___return(tp);
	}
//#)


(c-external (free_tcpsock sock*) void
  #/C/
	free(___arg1);
//#)


(c-external (zero_tcp sock*) void
  #/C/
	memset(___arg1, 0, sizeof(struct tcp_sock));
//#)


(c-external (tcp_packets_in_flight tcpsock*) uint32)
(c-external (tcp_pacing_rate tcpsock*) ulong)
(c-external (tcp_snd_cwnd tcpsock*) uint32)
(c-external (tcp_min_rtt tcpsock*) uint32)


(c-external (tcp_init sock* u32 u64 u64) void)
(c-external (tcp_skb_sent sock* skbuff* bool u32 u32 u64) void)
(c-external (tcp_ack sock* skbuff* u32 float bool u64 ratesample*) void)
(c-external (tcp_skb_lost sock* skbuff*) void)
(c-external (tcp_set_is_cwnd_limited sock* bool) void)
(c-external (tcp_set_ca_state sock* u8) void)


;;
;;; SKBuff
;;


(c-external (new_skbuff u16) skbuff*
  #/C/
	struct sk_buff *skb = (struct sk_buff *) calloc(1, sizeof(struct sk_buff));
	struct tcp_skb_cb *scb = TCP_SKB_CB(skb);
	scb->tcp_gso_segs = ___arg1;
	___return(skb);
//#)


(c-external (free_skbuff skbuff*) void
  #/C/
	free(___arg1);
//#)


(c-external (zero_skbuff skbuff*) void
  #/C/
	memset(___arg1, 0, sizeof(struct sk_buff));
//#)


(c-external (skbuff_get_info skbuff* skbuff*) void
  #/C/
	memcpy(___arg2, ___arg1, sizeof(struct sk_buff));
//#)


;;
;;; SKBCB
;;


(c-external (new_skbcb) skbcb*
  #/C/
	struct tcp_skb_cb *scb = (struct tcp_skb_cb *) calloc(1, sizeof(struct tcp_skb_cb));
	___return(scb);
//#)


(c-external (free_skbcb skbcb*) void
  #/C/
	free(___arg1);
//#)


(c-external (zero_skbcb skbcb*) void
  #/C/
	memset(___arg1, 0, sizeof(struct tcp_skb_cb));
//#)


(c-external (skbcb_get_info skbuff* skbcb*) void
  #/C/
	struct tcp_skb_cb *dst = ___arg2;
	struct tcp_skb_cb *src = TCP_SKB_CB(___arg1);

	memcpy(dst, src, sizeof(struct tcp_skb_cb));
//#)


;;
;;; Rate
;;


(c-external (new_ratesample) ratesample*
  #/C/
	struct rate_sample *rs = (struct rate_sample *) calloc(1, sizeof(struct rate_sample));
	___return(rs);
//#)


(c-external (free_ratesample ratesample*) void
  #/C/
	free(___arg1);
//#)


(c-external (zero_ratesample ratesample*) void
  #/C/
	memset(___arg1, 0, sizeof(struct rate_sample));
//#)


(c-external (ratesample_get_info ratesample* ratesample*) void
  #/C/
	memcpy(___arg2, ___arg1, sizeof(struct rate_sample));
//#)


(c-external (tcp_rate_skb_sent sock* skbuff*) void)


;;
;;; BBR
;;


(c-external (socket->bbr sock*) bbr*
  #/C/
	struct bbr *bbr = inet_csk_ca(___arg1);
	___return(bbr);
//#)


(c-external (new_bbrinfo) bbrinfo*
  #/C/
	struct tcp_bbr_info *info = (struct tcp_bbr_info *) calloc(1, sizeof(struct tcp_bbr_info));
	___return(info);
//#)


(c-external (free_bbrinfo bbrinfo*) void
  #/C/
	free(___arg1);
//#)


(c-external (bbr_bw sock*) u32)
(c-external (bbr_bw_bytes_per_sec sock* u64) u64)
(c-external (bbr_probe_rtt_cwnd sock*) u32)


(c-external (bbr_init sock*) void)
(c-external (bbr_get_info sock* u32 void* void*) void))
