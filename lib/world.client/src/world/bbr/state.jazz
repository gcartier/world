;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; BBR State
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;    Barbara Samson


(module world.bbr.state jazz


(import (world.bbr)
        (world.event)
        (world.format)
        (world.record (phase syntax))
        (world.udp))


;; closest to a 1392 divisor near 50
(definition protected udp-mss <fx>
  48)


(definition protected (present-bbr-mode mode)
  (vector-ref #(Startup Drain ProbeBW ProbeRTT) mode))

(definition protected (present-bbr-phase phase)
  (vector-ref #(Invalid Startup Drain ProbeRTT Up Down Cruise Refill) phase))


;;;
;;;; State
;;;


(class BBR-State extends Object
  
  
  (slot inflight-buffers     getter generate)
  (slot inflight-datas       getter generate)
  (slot delivered-last-order getter generate)
  (slot last-sent-time       getter generate)
  (slot current-mode         getter generate)
  (slot current-phase        getter generate)
  (slot current-pacing       getter generate)
  (slot current-window       getter generate)
  (slot current-limited      getter generate)
  
  
  (method override (initialize self)
    (nextmethod self)
    (set! inflight-buffers (make-table test: equal?))
    (set! inflight-datas (make-table test: equal?))
    (set! delivered-last-order -1)
    (set! last-sent-time 0)
    (reset-current self))
  
  
  (method protected (reset self)
    (set! inflight-buffers (make-table test: equal?))
    (set! inflight-datas (make-table test: equal?))
    (set! delivered-last-order -1)
    (set! last-sent-time 0)
    (reset-current self))
  
  
  (method (reset-current self)
    (set! current-mode -1)
    (set! current-phase -1)
    (set! current-pacing -1)
    (set! current-window -1)
    (set! current-limited -1.))
  
  
  (method protected (packet-sent self sent-time order data)
    (let ((segs (max 1 (fxround/ (u8vector-length data) udp-mss))))
      (let ((skb (new_skbuff segs)))
        (table-set! inflight-buffers order skb)
        (table-set! inflight-datas order data)
        (set! last-sent-time sent-time)
        (values skb segs))))
  
  
  ;; for the visualizer
  (method protected (segs-sent self order segs)
    (let ((skb (new_skbuff segs)))
      (table-set! inflight-buffers order skb)
      skb))
  
  
  (method protected (pulse-sent self sent-time)
    (set! last-sent-time sent-time))
  
  
  (method protected (ack-received self socket order profile?)
    (if (<= order delivered-last-order)
        #f
      (let ((lost 0))
        (loop (for ord from (+ delivered-last-order 1) below order)
              (update-lost self socket ord profile?)
              (increase! lost))
        (set! delivered-last-order order)
        (let ((skb (table-ref inflight-buffers order #f))
              (data (table-ref inflight-datas order #f)))
          ;; pulses are not put in the inflight table
          (if (not skb)
              #f
            (table-clear inflight-buffers order)
            (table-clear inflight-datas order)
            (values skb data lost))))))
  
  
  (method protected (update-lost self socket ord profile?)
    (let ((skb (table-ref inflight-buffers ord #f))
          (data (table-ref inflight-datas ord #f)))
      (when skb
        (table-clear inflight-buffers ord)
        (table-clear inflight-datas ord)
        (tcp_skb_lost socket skb)
        (free_skbuff skb)
        (unless (emulation?)
          (with-record media
            (record-event udp-id-bbr-lost
                          (if profile? -1. (fixnum->flonum (read-media-channel data)))
                          (if profile? -1. (fixnum->flonum (read-header-sender data)))
                          (if profile? -1. (fixnum->flonum (read-header-kind data)))
                          (if profile? -1. (fixnum->flonum (read-media-sequence data)))
                          (fixnum->flonum ord)
                          -1.
                          -1.))))))
  
  
  (method protected (record-state self socket order)
    (let ((mode (bbr_get_mode socket))
          (phase (bbr_get_phase socket)))
      (when (or (/= mode current-mode)
                (/= phase current-phase))
        (record-event udp-id-bbr-state
                      -1.
                      -1.
                      -1.
                      -1.
                      (fixnum->flonum order)
                      (fixnum->flonum mode)
                      (fixnum->flonum phase))
        (set! current-mode mode)
        (set! current-phase phase))))
  
  
  (method protected (record-pacing self socket order)
    (let ((pacing (tcp_pacing_rate socket)))
      (when (/= pacing current-pacing)
        (record-event udp-id-bbr-pacing
                      -1.
                      -1.
                      -1.
                      -1.
                      (fixnum->flonum order)
                      (bytes->mbps pacing)
                      -1.)
        (set! current-pacing pacing))))
  
  
  (method protected (record-window self socket order)
    (let ((window (tcp_snd_cwnd socket)))
      (when (/= window current-window)
        (record-event udp-id-bbr-window
                      -1.
                      -1.
                      -1.
                      -1.
                      (fixnum->flonum order)
                      (fixnum->flonum window)
                      -1.)
        (set! current-window window))))
  
  
  (method protected (record-limited self limited? order)
    (let ((limited (if limited? 1. 0.)))
      (when (/= limited current-limited)
        (record-event udp-id-bbr-limited
                      -1.
                      -1.
                      -1.
                      -1.
                      (fixnum->flonum order)
                      limited
                      -1.)
        (set! current-limited limited))))))
