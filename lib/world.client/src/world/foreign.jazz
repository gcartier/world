;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; World Foreign
;;;


(module world.foreign jazz


(import (jazz.graphic.opengl.glew)
        (jazz.platform.types))


(c-include "<GL/glew.h>")


(definition public gl-sphere
  (c-function (GLdouble GLint GLint) void
    #<<end-of-c-code
    GLdouble radius = ___arg1;
    GLint slices = ___arg2;
    GLint stacks = ___arg3;
    
    GLUquadricObj *quadObj;
    quadObj = gluNewQuadric();
    gluQuadricDrawStyle(quadObj, GLU_FILL);
    gluQuadricNormals(quadObj, GLU_SMOOTH);
    /* If we ever changed/used the texture or orientation state
    of quadObj, we'd need to change it to the defaults here
    with gluQuadricTexture and/or gluQuadricOrientation. */
    gluSphere(quadObj, radius, slices, stacks);
    gluDeleteQuadric(quadObj);
end-of-c-code
))


(definition public render-block
  ;; x1 x2 y1 y2 z1 z2
  (c-function (GLfloat GLfloat GLfloat GLfloat GLfloat GLfloat GLuint) void
    "// top
     glNormal3f(0.0, 1.0, 0.0);
     glBegin(___arg7);
     glVertex3f(___arg2, ___arg4, ___arg5);
     glVertex3f(___arg1, ___arg4, ___arg5);
     glVertex3f(___arg1, ___arg4, ___arg6);
     glVertex3f(___arg2, ___arg4, ___arg6);
     glEnd();
     // bottom
     glNormal3f(0.0, -1.0, 0.0);
     glBegin(___arg7);
     glVertex3f(___arg2, ___arg3, ___arg6);
     glVertex3f(___arg1, ___arg3, ___arg6);
     glVertex3f(___arg1, ___arg3, ___arg5);
     glVertex3f(___arg2, ___arg3, ___arg5);
     glEnd();
     // front
     glNormal3f(0.0, 0.0, 1.0);
     glBegin(___arg7);
     glVertex3f(___arg1, ___arg3, ___arg6);
     glVertex3f(___arg2, ___arg3, ___arg6);
     glVertex3f(___arg2, ___arg4, ___arg6);
     glVertex3f(___arg1, ___arg4, ___arg6);
     glEnd();
     // back
     glNormal3f(0.0, 0.0, -1.0);
     glBegin(___arg7);
     glVertex3f(___arg2, ___arg3, ___arg5);
     glVertex3f(___arg1, ___arg3, ___arg5);
     glVertex3f(___arg1, ___arg4, ___arg5);
     glVertex3f(___arg2, ___arg4, ___arg5);
     glEnd();
     // left
     glNormal3f(-1.0, 0.0, 0.0);
     glBegin(___arg7);
     glVertex3f(___arg1, ___arg4, ___arg6);
     glVertex3f(___arg1, ___arg4, ___arg5);
     glVertex3f(___arg1, ___arg3, ___arg5);
     glVertex3f(___arg1, ___arg3, ___arg6);
     glEnd();
     // right
     glNormal3f(1.0, 0.0, 0.0);
     glBegin(___arg7);
     glVertex3f(___arg2, ___arg4, ___arg5);
     glVertex3f(___arg2, ___arg4, ___arg6);
     glVertex3f(___arg2, ___arg3, ___arg6);
     glVertex3f(___arg2, ___arg3, ___arg5);
     glEnd();"))
   
   
(definition public glGenFramebuffersEXT*
  (c-function () GLuint
    "GLuint buffer;
     glGenFramebuffersEXT(1, &buffer);
     ___result = buffer;"))
   
   
(definition public glGenRenderbuffersEXT*
  (c-function () GLuint
    "GLuint buffer;
     glGenRenderbuffersEXT(1, &buffer);
     ___result = buffer;"))
             
(definition public glDeleteVertexArrays*
  (c-function (GLuint) void
    "GLuint buffer;
     glDeleteVertexArrays(1, &buffer);"))
   
   
 (definition public glGenVertices*
   (c-function () GLuint
     "GLuint vbo_fbo_vertices = 0;
    GLfloat fbo_vertices[] = {
    -1, -1,
     1, -1,
    -1,  1,
     1,  1,
  };
  glGenBuffers(1, &vbo_fbo_vertices);
  glBindBuffer(GL_ARRAY_BUFFER, vbo_fbo_vertices);
  glBufferData(GL_ARRAY_BUFFER, sizeof(fbo_vertices), fbo_vertices, GL_STATIC_DRAW);
  glBindBuffer(GL_ARRAY_BUFFER, 0);
  ___result = vbo_fbo_vertices;"))

   
(definition public glGetInfoLogARB*
   (c-function (GLhandleARB GLsizei) char-string
    "GLchar* compiler_log = (GLchar*)malloc(___arg2);
     GLsizei slen = 0;                                                           
     glGetInfoLogARB(___arg1, ___arg2, &slen, compiler_log);
     ___result = compiler_log;")) 
             
 (definition public glTexCoordPointer*
   (c-function (GLint GLenum GLsizei scheme-object int) void
     "float *ptr = ___CAST(float*,___BODY(___arg4));        
      glTexCoordPointer(___arg1, ___arg2, ___arg3, ptr + ___arg5);"
   ))
             
 (definition public glVertexPointer*
   (c-function (GLint GLenum GLsizei scheme-object int) void
     "float *ptr = ___CAST(float*,___BODY(___arg4));        
      glVertexPointer(___arg1, ___arg2, ___arg3, ptr + ___arg5);"
   ))

 (definition public glVertexAttribPointerCustom*
   (c-function (GLuint GLint GLenum GLboolean GLsizei int) void
     "glVertexAttribPointer(___arg1, ___arg2, ___arg3, ___arg4, ___arg5, ___CAST(void*,___arg6));"
   ))
   
 )
