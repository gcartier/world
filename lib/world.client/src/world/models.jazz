;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; Models
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.models jazz


(import (jazz.geometry)
        (gaea.dye)
        (gaea.geometry)
        (world)
        (world.autoload)
        (world.context)
        (world.dyes)
        (world.entity)
        (world.face)
        (world.material)
        (world.model)
        (world.object)
        (world.quad)
        (world.renderers)
        (world.syntax (phase syntax))
        (world.texture)
        (world.triangle))


;;;
;;;; Circle
;;;


(define-model Circle
  (lambda ()
    (make-circle-model))
  showcase?: #f)


(definition public (make-circle-model)
  (let ((world (current-world))
        (left -1.)
        (bottom -1.)
        (back -1.)
        (right 1.)
        (top 1.)
        (front 1.))
    (let ((material (opaque-material))
          (uv (image-coordinates "stone")))
      (let ((tl (uv-left uv))
            (tt (uv-top uv))
            (tr (uv-right uv))
            (tb (uv-bottom uv))
            (texture-depth (uv-depth uv)))
        (let ((faces
                (list
                  (make-face material
                             (f32vector tl tb tl tt tr tt tr tb)
                             texture-depth
                             (make-quad #f
                                        (vertex left top back) (vertex left top front) (vertex right top front) (vertex right top back))))))
          (make-model faces bounds: (cuboid left 0. back right 0. front)))))))


;;;
;;;; Sphere
;;;


(define-model Sphere
  (lambda ()
    (make-sphere-model 48 24))
  showcase?: #f)


(class Color-Sphere-Model extends Model
  
  
  (property color initialize #f accessors generate)
  
  
  (method override (model-renderer self)
    color-renderer)
  
  
  (method override (model-bind-uniforms self entity program overlay alpha-cut)
    (bind-uniforms program overlay alpha-cut color)))


(definition public (make-color-sphere-model slices stacks color (class: class #f))
  (let ((model (make-sphere-model slices stacks class: (or class Color-Sphere-Model))))
    (set-color model color)
    model))


;;;
;;;; Gravity
;;;


(define-model Gravity
  (lambda ()
    (make-color-sphere-model 48 24 ochre-dye))
  showcase?: #f)


;;;
;;;; Camera
;;;


(definition public (make-camera-model class)
  (let ((world (current-world))
        (zone (current-zone))
        (left -.15)
        (bottom -.3)
        (back -.15)
        (center 0.)
        (right .15)
        (top .3)
        (front .15))
    (let ((material (opaque-material)))
      (let ((uv (image-rect (get-atlas material) (sample-program-image zone 'opaque))))
        (let ((tl (uv-left uv))
              (tt (uv-top uv))
              (tr (uv-right uv))
              (tb (uv-bottom uv))
              (texture-depth (uv-depth uv)))
          (let ((faces
                  (list
                    ;; bottom
                    (make-face material
                               (f32vector tl tt tl tb tr tb tr tt)
                               texture-depth
                               (make-quad #f
                                          (vertex left  bottom front)
                                          (vertex left  bottom back)
                                          (vertex right bottom back)
                                          (vertex right bottom front)))
                    ;; front
                    (make-face material
                               (f32vector tl tt tl tb tr tb tr tt)
                               texture-depth
                               (make-triangle #f
                                              (vertex center top    center)
                                              (vertex left   bottom front)
                                              (vertex right  bottom front)))
                    ;; right
                    (make-face material
                               (f32vector tl tt tl tb tr tb tr tt)
                               texture-depth
                               (make-triangle #f
                                              (vertex center top    center)
                                              (vertex right  bottom front)
                                              (vertex right  bottom back)))
                    ;; back
                    (make-face material
                               (f32vector tl tt tl tb tr tb tr tt)
                               texture-depth
                               (make-triangle #f
                                              (vertex center top    center)
                                              (vertex right  bottom back)
                                              (vertex left   bottom back)))
                    ;; left
                    (make-face material
                               (f32vector tl tt tl tb tr tb tr tt)
                               texture-depth
                               (make-triangle #f
                                              (vertex center top    center)
                                              (vertex left   bottom back)
                                              (vertex left   bottom front))))))
            (make-model faces class: class rotation: (vertex PI/2 0. 0.))))))))


(class Camera-Model extends Model
  
  
  (method override (model-renderer self)
    orb-renderer)
  
  
  (method override (model-bind-uniforms self entity program overlay alpha-cut)
    (let ((color red-dye))
      (let ((wire-color red-dye)
            (fill-color (dye .8 .2 .2 .6)))
        (bind-uniforms program #f overlay alpha-cut wire-color: wire-color fill-color: fill-color)))))


(define-model Camera
  (lambda ()
    (make-camera-model Camera-Model))
  showcase?: #f)


;;;
;;;; Sun
;;;


(class Sun-Model extends Color-Sphere-Model
  
  
  (method override (model-bind-uniforms self entity program overlay alpha-cut)
    (bind-uniforms program overlay alpha-cut color)))


(define-model Sun
  (lambda ()
    (make-color-sphere-model 48 24 (dye .964 .859 .005 1.) class: Sun-Model))
  showcase?: #f)


;;;
;;;; Orb
;;;


(class Body-Model extends Model
  
  
  (method override (model-renderer self)
    orb-renderer)
  
  
  (method override (model-bind-uniforms self entity program overlay alpha-cut)
    (let ((color (get-color entity)))
      (let ((wire-color color)
            (fill-color (copy-dye color)))
        (dye-alpha-set! fill-color 0.)
        (bind-uniforms program #f overlay alpha-cut wire-color: wire-color fill-color: fill-color)))))


(class Eye-Model extends Model
  
  
  (method override (model-renderer self)
    eye-renderer)
  
  
  (method override (model-bind-uniforms self entity program overlay alpha-cut)
    (bind-uniforms program overlay alpha-cut (dye 0. 0. 1. (get-alpha entity)))))


(class Wheel-Model extends Model
  
  
  (method override (model-renderer self)
    orb-renderer)
  
  
  (method override (model-bind-uniforms self entity program overlay alpha-cut)
    (let ((color (dye .6 .6 .6 1.)))
      (let ((wire-color color)
            (fill-color (copy-dye (get-color entity))))
        (dye-alpha-set! fill-color 0.)
        (bind-uniforms program #f overlay alpha-cut wire-color: wire-color fill-color: fill-color)))))


(class Saucer-Model extends Model
  
  
  (method override (model-renderer self)
    orb-renderer)
  
  
  (method override (model-bind-uniforms self entity program overlay alpha-cut)
    (let ((color white-dye))
      (let ((wire-color color)
            (fill-color (copy-dye (get-color entity))))
        (dye-alpha-set! fill-color 0.)
        (bind-uniforms program #f overlay alpha-cut wire-color: wire-color fill-color: fill-color)))))


(class Rocket-Model extends Model
  
  
  (method override (model-renderer self)
    orb-renderer)
  
  
  (method override (model-bind-uniforms self entity program overlay alpha-cut)
    (let ((color white-dye))
      (let ((wire-color color)
            (fill-color (copy-dye (get-color entity))))
        (dye-alpha-set! fill-color 0.)
        (bind-uniforms program #f overlay alpha-cut wire-color: wire-color fill-color: fill-color)))))


(definition (make-orb-model (scale: scale #f) (pumps: pumps #f))
  (let ((model (make-model '() bounds: (cuboid 0. 0. 0. 0. 0. 0.))) ;; bounds are recalculated after adding children
        (body (make-sphere-model 26 52 class: Body-Model name: 'body))
        (eyes (list (make-sphere-model 48 24 class: Eye-Model name: 'left-eye)
                    (make-sphere-model 48 24 class: Eye-Model name: 'right-eye))))
    ;; model
    (if scale
        (set-scale model scale)
      (set-scaling model .4))
    (when pumps
      (set-pumps model pumps))
    (set-ride-saddle model -.4)
    (set-fly-saddle model 1.1)
    
    ;; eyes
    (for-each (lambda (eye rank)
                (set-position eye (case rank
                                     ((0) (vertex -.45 .4 .6))
                                     ((1) (vertex .45 .4 .6))))
                (set-scaling eye .1)
                (set-parent eye model))
              eyes
              (naturals 0 (length eyes)))
    
    ;; body
    (set-rotation body (vertex 0. PI/2 0.))
    (set-parent body model)
    
    (set-bounds model (determine-bounds model))
    (set-sounds model 'none)
    (set-steps? model #f)
    model))


(definition (make-vehicle-model vehicle (scale: scale #f) (pumps: pumps #f) (saddle: saddle #f))
  (let ((model (make-model '() bounds: (cuboid 0. 0. 0. 0. 0. 0.))))
    (if scale
        (set-scale model scale)
      (set-scaling model .4))
    (when pumps
      (set-pumps model pumps))
    (when saddle
      (set-saddle model saddle))
    (case vehicle
      ((wheels)
       (let ((wheels (list (make-sphere-model 15 30 class: Wheel-Model name: 'wheel1)
                           (make-sphere-model 15 30 class: Wheel-Model name: 'wheel2)
                           (make-sphere-model 15 30 class: Wheel-Model name: 'wheel3)
                           (make-sphere-model 15 30 class: Wheel-Model name: 'wheel4))))
         (for-each (lambda (wheel rank)
                     (set-position wheel (let ((d .75)
                                                (h .25))
                                            (case rank
                                              ((0) (vertex d h d))
                                              ((1) (vertex (- d) h d))
                                              ((2) (vertex  d h (- d)))
                                              ((3) (vertex (- d) h (- d))))))
                     (set-rotation wheel (vertex 0. PI/2 0.))
                     (set-scaling wheel .25)
                     (set-parent wheel model))
                   wheels
                   (naturals 0 (length wheels)))))
      ((hummer)
       (let ((wheels (list (make-sphere-model 15 30 class: Wheel-Model name: 'wheel1)
                           (make-sphere-model 15 30 class: Wheel-Model name: 'wheel2)
                           (make-sphere-model 15 30 class: Wheel-Model name: 'wheel3)
                           (make-sphere-model 15 30 class: Wheel-Model name: 'wheel4))))
         (for-each (lambda (wheel rank)
                     (set-position wheel (let ((d 2.5)
                                                (h 2.))
                                            (case rank
                                              ((0) (vertex d h d))
                                              ((1) (vertex (- d) h d))
                                              ((2) (vertex  d h (- d)))
                                              ((3) (vertex (- d) h (- d))))))
                     (set-rotation wheel (vertex 0. PI/2 0.))
                     (set-scaling wheel 2.)
                     (set-parent wheel model))
                   wheels
                   (naturals 0 (length wheels)))))
      ((saucer)
       (set! model (make-sphere-model 15 30 class: Saucer-Model name: 'saucer))
       (set-position model (vertex 0. 0.5 0.))
       (unless scale
         (set-scale model (vertex 1. .21 1.))))
      ((rocket)
       (set! model (make-sphere-model 15 30 class: Rocket-Model name: 'rocket))
       (set-position model (vertex 0. 0.5 0.))
       (unless scale
         (set-scale model (vertex .63 .21 1.57)))))
    (set-sounds model 'none)
    (set-steps? model #f)
    model))


(define-model Orb
  (lambda ()
    (make-orb-model pumps: (vertex 0. .12 0.)))
  showcase?: #f)


(define-model OrbLong
  (lambda ()
    (make-orb-model scale: (vertex .2 .4 1.)))
  showcase?: #f)


(define-model OrbWide
  (lambda ()
    (make-orb-model scale: (vertex 1. .4 .2)))
  showcase?: #f)


(define-model OrbTall
  (lambda ()
    (make-orb-model scale: (vertex .3 1.2 .3)))
  showcase?: #f)


(define-model Wheels
  (lambda ()
    (make-vehicle-model 'wheels saddle: .5))
  showcase?: #f)


(define-model Hummer
  (lambda ()
    (make-vehicle-model 'hummer saddle: 1.5))
  showcase?: #f)


(define-model Saucer
  (lambda ()
    (make-vehicle-model 'saucer saddle: .5))
  showcase?: #f)


(define-model Rocket
  (lambda ()
    (make-vehicle-model 'rocket saddle: .5))
  showcase?: #f)


;;;
;;;; Enemy
;;;


(class Enemy-Body-Model extends Model
  
  
  (method override (model-renderer self)
    enemy-renderer)
  
  
  (method override (model-bind-uniforms self entity program overlay alpha-cut)
    (bind-uniforms program overlay alpha-cut (get-color entity))))


(class Enemy-Eye-Model extends Model
  
  
  (method override (model-renderer self)
    enemy-renderer)
  
  
  (method override (model-bind-uniforms self entity program overlay alpha-cut)
    (bind-uniforms program overlay alpha-cut (dye .392 .392 .392 1.))))


(definition public (make-enemy-model (walk-speed: walk-speed #f) (run-speed: run-speed #f))
  (let ((model (make-model '() bounds: (cuboid -1. -1. -1. 1. 1. 1.) walk-speed: walk-speed run-speed: run-speed)))
    ;; quick try
    (if (not (window?))
        model
      (let ((body (make-sphere-model 26 52 class: Enemy-Body-Model name: 'body))
            (left-eye (make-sphere-model 48 24 class: Enemy-Eye-Model name: 'left-eye))
            (right-eye (make-sphere-model 48 24 class: Enemy-Eye-Model name: 'right-eye)))
        ;; left-eye
        (set-position left-eye (vertex -.45 .4 .8))
        (set-scaling left-eye .1)
        (set-parent left-eye model)
        
        ;; right-eye
        (set-position right-eye (vertex .45 .4 .8))
        (set-scaling right-eye .1)
        (set-parent right-eye model)
        
        ;; body
        (set-rotation body (vertex 0. PI/2 0.))
        (set-parent body model)
        
        model))))


(define-model Wolf
  (lambda ()
    (make-enemy-model walk-speed: 3. run-speed: 6.5))
  showcase?: #f)


(define-model Spider
  (lambda ()
    (make-enemy-model walk-speed: 1.5 run-speed: 3.25))
  showcase?: #f)


(define-model Jumper
  (lambda ()
    (make-enemy-model walk-speed: 2. run-speed: 5.))
  showcase?: #f)


;;;
;;;; Turtle
;;;


@wait-missing-turf-tile
(define-model Turtle
  (lambda ()
    (let ((model (make-cube-model "turf")))
      (set-scaling model .4)
      (set-walk-speed model .3)
      (set-run-speed model .75)
      model)))


;;;
;;;; Missile
;;;


(class Missile-Model extends Model
  
  
  (property color initialize #f accessors generate)
  
  
  (method override (model-renderer self)
    missile-renderer)
  
  
  (method override (model-bind-uniforms self entity program overlay alpha-cut)
    (let ((wire-color color)
          (fill-color (copy-dye (get-color entity))))
      (dye-alpha-set! fill-color 0.)
      (bind-uniforms program #f overlay alpha-cut wire-color: wire-color fill-color: fill-color))))


(definition (make-missile-model color)
  (let ((model (make-sphere-model 48 24 class: Missile-Model)))
    (set-scaling model .05)
    (set-color model color)
    model))


(define-model Bullet
  (lambda ()
    (make-missile-model red-dye))
  showcase?: #f)


(define-model Arrow
  (lambda ()
    (make-missile-model blue-dye))
  showcase?: #f)


;;;
;;;; Cube
;;;


(class Cube-Model extends Model
  
  
  (slot opaque? initialize #t accessors generate)
  
  
  (method override (opaque-cube? self)
    opaque?))


(define-model Cube
  (lambda ()
    (make-cube-model "stone"))
  showcase?: #f)


(definition public (make-cube-model images (materials: materials #f) (opaque?: opaque? #t))
  (if (not (window?))
      (make-model '() class: Cube-Model)
    (let ((world (current-world)))
      (define (listify-images)
        (if (pair? images)
            images
          (list images images images images images images)))
      
      (define (listify-materials)
        (if (pair? materials)
            materials
          (list materials materials materials materials materials materials)))
      
      (bind (left-image right-image bottom-image top-image back-image front-image) (listify-images)
        (bind (left-material right-material bottom-material top-material back-material front-material) (listify-materials)
          (let ((left -.5)
                (bottom -.5)
                (back -.5)
                (right .5)
                (top .5)
                (front .5)
                (right-image (or right-image left-image))
                (bottom-image (or bottom-image left-image))
                (top-image (or top-image left-image))
                (back-image (or back-image left-image))
                (front-image (or front-image left-image))
                (default-image (get-default-image world))
                (opaque-material (opaque-material)))
            (let ((faces
                    (list
                      ;; front
                      (let ((image (or front-image default-image)))
                        (let ((uv (image-coordinates image)))
                          (let ((tl (uv-left uv))
                                (tt (uv-top uv))
                                (tr (uv-right uv))
                                (tb (uv-bottom uv))
                                (texture-depth (uv-depth uv)))
                            (make-face (or front-material opaque-material)
                                       (f32vector tl tt tl tb tr tb tr tt)
                                       texture-depth
                                       (make-quad #f
                                                  (vertex left top front) (vertex left bottom front) (vertex right bottom front) (vertex right top front))))))
                      ;; back
                      (let ((image (or back-image default-image)))
                        (let ((uv (image-coordinates image)))
                          (let ((tl (uv-left uv))
                                (tt (uv-top uv))
                                (tr (uv-right uv))
                                (tb (uv-bottom uv))
                                (texture-depth (uv-depth uv)))
                            (make-face (or back-material opaque-material)
                                       (f32vector tr tt tr tb tl tb tl tt)
                                       texture-depth
                                       (make-quad #f
                                                  (vertex right top back) (vertex right bottom back) (vertex left bottom back) (vertex left top back))))))
                      ;; left
                      (let ((image (or left-image default-image)))
                        (let ((uv (image-coordinates image)))
                          (let ((tl (uv-left uv))
                                (tt (uv-top uv))
                                (tr (uv-right uv))
                                (tb (uv-bottom uv))
                                (texture-depth (uv-depth uv)))
                            (make-face (or left-material opaque-material)
                                       (f32vector tl tt tl tb tr tb tr tt)
                                       texture-depth
                                       (make-quad #f
                                                  (vertex left top back) (vertex left bottom back) (vertex left bottom front) (vertex left top front))))))
                      ;; right
                      (let ((image (or right-image default-image)))
                        (let ((uv (image-coordinates image)))
                          (let ((tl (uv-left uv))
                                (tt (uv-top uv))
                                (tr (uv-right uv))
                                (tb (uv-bottom uv))
                                (texture-depth (uv-depth uv)))
                            (make-face (or right-material opaque-material)
                                       (f32vector tl tt tl tb tr tb tr tt)
                                       texture-depth
                                       (make-quad #f
                                                  (vertex right top front) (vertex right bottom front) (vertex right bottom back) (vertex right top back))))))
                      ;; top
                      (let ((image (or top-image default-image)))
                        (let ((uv (image-coordinates image)))
                          (let ((tl (uv-left uv))
                                (tt (uv-top uv))
                                (tr (uv-right uv))
                                (tb (uv-bottom uv))
                                (texture-depth (uv-depth uv)))
                            (make-face (or top-material opaque-material)
                                       (f32vector tl tb tl tt tr tt tr tb)
                                       texture-depth
                                       (make-quad #f
                                                  (vertex left top back) (vertex left top front) (vertex right top front) (vertex right top back))))))
                      ;; bottom
                      (let ((image (or bottom-image default-image)))
                        (let ((uv (image-coordinates image)))
                          (let ((tl (uv-left uv))
                                (tt (uv-top uv))
                                (tr (uv-right uv))
                                (tb (uv-bottom uv))
                                (texture-depth (uv-depth uv)))
                            (make-face (or bottom-material opaque-material)
                                       (f32vector tl tt tl tb tr tb tr tt)
                                       texture-depth
                                       (make-quad #f
                                                  (vertex left bottom front) (vertex left bottom back) (vertex right bottom back) (vertex right bottom front)))))))))
              (let ((model (make-model faces class: Cube-Model)))
                (set-opaque? model opaque?)
                model))))))))


;;;
;;;; Step
;;;


(define-model StepBig
  (lambda ()
    (let ((scaling (exact->inexact (/ 2 3)))
          (translation (- (exact->inexact (/ 1 6)))))
      (make-step-model scaling translation)))
  showcase?: #f)


(define-model StepSmall
  (lambda ()
    (let ((scaling (exact->inexact (/ 1 3)))
          (translation (- (exact->inexact (/ 1 3)))))
      (make-step-model scaling translation)))
  showcase?: #f)


(define-model Step
  (lambda ()
    (make-step-model .5 -.25))
  showcase?: #f)


(definition public (make-step-model scaling translation)
  (transform-model (registered-model 'Cube)
                   (matrix-multiply (make-translation-matrix (vertex 0. translation 0.))
                                    (make-scaling-matrix (vertex 1. scaling 1.)))))


;;;
;;;; Slope
;;;


(define-model Slope
  (lambda ()
    (make-slope-model "stone"))
  showcase?: #f)


(definition public (make-slope-model image (material: material #f))
  (let ((left -.5)
        (bottom -.5)
        (back -.5)
        (right .5)
        (top .5)
        (front .5))
    (if (not (window?))
        (make-model '())
      (let ((material (or material (opaque-material)))
            (uv (image-coordinates image)))
        (let ((tl (uv-left uv))
              (tt (uv-top uv))
              (tr (uv-right uv))
              (tb (uv-bottom uv))
              (texture-depth (uv-depth uv)))
          (let ((faces
                  (list
                    ;; bottom
                    (make-face material
                               (f32vector tl tt tl tb tr tb tr tt)
                               texture-depth
                               (make-quad #f
                                          (vertex left  bottom front)
                                          (vertex left  bottom back)
                                          (vertex right bottom back)
                                          (vertex right bottom front)))
                    ;; left
                    (make-face material
                               (f32vector tl tt tl tb tr tb tr tt)
                               texture-depth
                               (make-quad #f
                                          (vertex left top    back)
                                          (vertex left bottom back)
                                          (vertex left bottom front)
                                          (vertex left top    front)))
                    ;; front
                    (make-face material
                               (f32vector tl tt tl tb tr tb tr tt)
                               texture-depth
                               (make-triangle #f
                                              (vertex left   top    front)
                                              (vertex left   bottom front)
                                              (vertex right  bottom front)))
                    ;; back
                    (make-face material
                               (f32vector tl tt tl tb tr tb tr tt)
                               texture-depth
                               (make-triangle #f
                                              (vertex left   top    back)
                                              (vertex right  bottom back)
                                              (vertex left   bottom back)))
                    ;; slope
                    (make-face material
                               (f32vector tl tt tl tb tr tb tr tt)
                               texture-depth
                               (make-quad #f
                                          (vertex left  top front)
                                          (vertex right bottom front)
                                          (vertex right bottom back)
                                          (vertex left  top back))))))
            (make-model faces)))))))


;;;
;;;; Corner
;;;


(define-model CornerLeft
  (lambda ()
    (make-corner-model PI/2))
  showcase?: #f)


(define-model CornerRight
  (lambda ()
    (make-corner-model (- PI/2)))
  showcase?: #f)


(definition public (make-corner-model rotation)
  (transform-model (registered-model 'Slope)
                   (make-x-rotation-matrix rotation)))


;;;
;;;; CornerPyramid
;;;


(define-model CornerPyramid
  (lambda ()
    (make-corner-pyramid-model "stone"))
  showcase?: #f)


(definition public (make-corner-pyramid-model image (material: material #f))
  (let ((left -.5)
        (bottom -.5)
        (back -.5)
        (center 0.)
        (right .5)
        (top .5)
        (front .5))
    (if (not (window?))
        (make-model '())
      (let ((material (or material (opaque-material)))
            (uv (image-coordinates image)))
        (let ((tl (uv-left uv))
              (tt (uv-top uv))
              (tr (uv-right uv))
              (tb (uv-bottom uv))
              (texture-depth (uv-depth uv)))
          (let ((faces
                  (list
                    ;; bottom
                    (make-face material
                               (f32vector tl tt tl tb tr tb tr tt)
                               texture-depth
                               (make-quad #f
                                          (vertex left  bottom front)
                                          (vertex left  bottom back)
                                          (vertex right bottom back)
                                          (vertex right bottom front)))
                    ;; front
                    (make-face material
                               (f32vector tl tt tl tb tr tb tr tt)
                               texture-depth
                               (make-triangle #f
                                              (vertex left   top    back)
                                              (vertex left   bottom front)
                                              (vertex right  bottom front)))
                    ;; right
                    (make-face material
                               (f32vector tl tt tl tb tr tb tr tt)
                               texture-depth
                               (make-triangle #f
                                              (vertex left   top    back)
                                              (vertex right  bottom front)
                                              (vertex right  bottom back)))
                    ;; back
                    (make-face material
                               (f32vector tl tt tl tb tr tb tr tt)
                               texture-depth
                               (make-triangle #f
                                              (vertex left   top    back)
                                              (vertex right  bottom back)
                                              (vertex left   bottom back)))
                    ;; left
                    (make-face material
                               (f32vector tl tt tl tb tr tb tr tt)
                               texture-depth
                               (make-triangle #f
                                              (vertex left   top    back)
                                              (vertex left   bottom back)
                                              (vertex left   bottom front))))))
            (make-model faces)))))))


;;;
;;;; CornerSlope
;;;


(define-model CornerSlope
  (lambda ()
    (make-corner-slope-model "stone"))
  showcase?: #f)


(definition public (make-corner-slope-model image (material: material #f))
  (let ((left -.5)
        (bottom -.5)
        (back -.5)
        (right .5)
        (top .5)
        (front .5))
    (if (not (window?))
        (make-model '())
      (let ((material (or material (opaque-material)))
            (uv (image-coordinates image)))
        (let ((tl (uv-left uv))
              (tt (uv-top uv))
              (tr (uv-right uv))
              (tb (uv-bottom uv))
              (texture-depth (uv-depth uv)))
          (let ((faces
                  (list
                    ;; bottom
                    (make-face material
                               (f32vector tl tt tl tb tr tb tr tt)
                               texture-depth
                               (make-triangle #f
                                              (vertex left  bottom front)
                                              (vertex left  bottom back)
                                              (vertex right bottom back)))
                    ;; left
                    (make-face material
                               (f32vector tl tt tl tb tr tb tr tt)
                               texture-depth
                               (make-triangle #f
                                              (vertex left top    back)
                                              (vertex left bottom back)
                                              (vertex left bottom front)))
                    ;; back
                    (make-face material
                               (f32vector tl tt tl tb tr tb tr tt)
                               texture-depth
                               (make-triangle #f
                                              (vertex left   top    back)
                                              (vertex right  bottom back)
                                              (vertex left   bottom back)))
                    ;; slope
                    (make-face material
                               (f32vector tl tt tl tb tr tb tr tt)
                               texture-depth
                               (make-triangle #f
                                              (vertex left bottom front)
                                              (vertex right bottom back)
                                              (vertex left  top back))))))
            (make-model faces)))))))


;;;
;;;; Pyramid
;;;


(define-model Pyramid
  (lambda ()
    (make-pyramid-model "stone"))
  showcase?: #f)


(definition public (make-pyramid-model image (material: material #f))
  (let ((left -.5)
        (bottom -.5)
        (back -.5)
        (center 0.)
        (right .5)
        (top .5)
        (front .5))
    (if (not (window?))
        (make-model '())
      (let ((material (or material (opaque-material)))
            (uv (image-coordinates image)))
        (let ((tl (uv-left uv))
              (tt (uv-top uv))
              (tr (uv-right uv))
              (tb (uv-bottom uv))
              (texture-depth (uv-depth uv)))
          (let ((faces
                  (list
                    ;; bottom
                    (make-face material
                               (f32vector tl tt tl tb tr tb tr tt)
                               texture-depth
                               (make-quad #f
                                          (vertex left  bottom front)
                                          (vertex left  bottom back)
                                          (vertex right bottom back)
                                          (vertex right bottom front)))
                    ;; front
                    (make-face material
                               (f32vector tl tt tl tb tr tb tr tt)
                               texture-depth
                               (make-triangle #f
                                              (vertex center top    center)
                                              (vertex left   bottom front)
                                              (vertex right  bottom front)))
                    ;; right
                    (make-face material
                               (f32vector tl tt tl tb tr tb tr tt)
                               texture-depth
                               (make-triangle #f
                                              (vertex center top    center)
                                              (vertex right  bottom front)
                                              (vertex right  bottom back)))
                    ;; back
                    (make-face material
                               (f32vector tl tt tl tb tr tb tr tt)
                               texture-depth
                               (make-triangle #f
                                              (vertex center top    center)
                                              (vertex right  bottom back)
                                              (vertex left   bottom back)))
                    ;; left
                    (make-face material
                               (f32vector tl tt tl tb tr tb tr tt)
                               texture-depth
                               (make-triangle #f
                                              (vertex center top    center)
                                              (vertex left   bottom back)
                                              (vertex left   bottom front))))))
            (make-model faces)))))))


;;;
;;;; Floor
;;;


@wait
(define-model Floor
  (lambda ()
    (make-floor-model "stone"))
  showcase?: #f)


(definition public (make-floor-model image (material: material #f))
  (let ((left -.5)
        (bottom -.5)
        (back -.5)
        (right .5)
        (top .5)
        (front .5))
    (if (not (window?))
        (make-model '() bounds: (cuboid left bottom back right top front) flat?: #t)
      (let ((material (or material (opaque-material)))
            (uv (image-coordinates image)))
        (let ((tl (uv-left uv))
              (tt (uv-top uv))
              (tr (uv-right uv))
              (tb (uv-bottom uv))
              (texture-depth (uv-depth uv)))
          (let ((faces
                  (list
                    (make-face material
                               (f32vector tl tb tl tt tr tt tr tb)
                               texture-depth
                               (make-quad #f
                                          (vertex left top back) (vertex left top front) (vertex right top front) (vertex right top back))))))
            (make-model faces bounds: (cuboid left bottom back right top front) flat?: #t)))))))


;;;
;;;; Wall
;;;


@wait
(define-model Wall
  (lambda ()
    (make-wall-model "stone"))
  showcase?: #f)


(definition public (make-wall-model image (material: material #f))
  (let ((left -.5)
        (bottom -.5)
        (back -.5)
        (right .5)
        (top .5)
        (front .5))
    (if (not (window?))
        (make-model '() bounds: (cuboid left bottom back right top front) flat?: #t)
      (let ((material (or material (opaque-material)))
            (uv (image-coordinates image)))
        (let ((tl (uv-left uv))
              (tt (uv-top uv))
              (tr (uv-right uv))
              (tb (uv-bottom uv))
              (texture-depth (uv-depth uv)))
          (let ((faces
                  (list
                    (make-face material
                               (f32vector tl tt tl tb tr tb tr tt)
                               texture-depth
                               (make-quad #f
                                          (vertex right top front) (vertex right bottom front) (vertex right bottom back) (vertex right top back))))))
            (make-model faces bounds: (cuboid left bottom back right top front) flat?: #t)))))))


;;;
;;;; Ceiling
;;;


@wait
(define-model Ceiling
  (lambda ()
    (make-ceiling-model "stone"))
  showcase?: #f)


(definition public (make-ceiling-model image (material: material #f))
  (let ((left -.5)
        (bottom -.5)
        (back -.5)
        (right .5)
        (top .5)
        (front .5))
    (if (not (window?))
        (make-model '() bounds: (cuboid left bottom back right top front) flat?: #t)
      (let ((material (or material (opaque-material)))
            (uv (image-coordinates image)))
        (let ((tl (uv-left uv))
              (tt (uv-top uv))
              (tr (uv-right uv))
              (tb (uv-bottom uv))
              (texture-depth (uv-depth uv)))
          (let ((faces
                  (list
                    (make-face material
                               (f32vector tl tt tl tb tr tb tr tt)
                               texture-depth
                               (make-quad #f
                                          (vertex left bottom front) (vertex left bottom back) (vertex right bottom back) (vertex right bottom front))))))
            (make-model faces bounds: (cuboid left bottom back right top front) flat?: #t)))))))


;;;
;;;; Cross
;;;


;; backward compatible
(define-model Cross
  (lambda ()
    (make-cross-model '("fire" "fire")))
  showcase?: #f)


(definition public (make-cross-model images (material: material #f))
  (if (not (window?))
      (make-model '())
    (let ()
      (define (with-images proc)
        (if (string? images)
            (proc images images)
          (bind (image1 image2) images
            (proc image1 image2))))
      
      (with-images
        (lambda (image1 image2)
          (let ((material (or material (transparent-material)))
                (left -.5)
                (bottom -.5)
                (back -.5)
                (right .5)
                (top .5)
                (front .5))
            (let ((faces
                    (list
                      (let ((uv (image-coordinates image1)))
                        (let ((tl (uv-left uv))
                              (tt (uv-top uv))
                              (tr (uv-right uv))
                              (tb (uv-bottom uv))
                              (texture-depth (uv-depth uv)))
                          (make-face material
                                     (f32vector tl tt tl tb tr tb tr tt)
                                     texture-depth
                                     (make-quad #f
                                                (vertex right top back) (vertex right bottom back) (vertex left bottom front) (vertex left top front)))))
                      (let ((uv (image-coordinates image2)))
                        (let ((tl (uv-left uv))
                              (tt (uv-top uv))
                              (tr (uv-right uv))
                              (tb (uv-bottom uv))
                              (texture-depth (uv-depth uv)))
                          (make-face material
                                     (f32vector tl tt tl tb tr tb tr tt)
                                     texture-depth
                                     (make-quad #f
                                                (vertex right top front) (vertex right bottom front) (vertex left bottom back) (vertex left top back))))))))
              (make-model faces))))))))


;;;
;;;; Fire
;;;


@wait
(define-model Fire
  (lambda ()
    (let ((world (current-world)))
      (let ((texture (find-texture world "fire")))
        (bind-values (atlas texture uv) (atlas-texture texture)
          (let ((material (new Material atlas: atlas texture: texture)))
            (make-cross-model '("fire" "fire") material: material)))))))


;;;
;;;; Materials
;;;


(definition (opaque-material)
  (let ((world (current-world)))
    (get-material-opaque world)))


(definition (transparent-material)
  (let ((world (current-world)))
    (get-material-transparent world)))


;;;
;;;; Floor
;;;


(definition public (generate-floor-model image width depth)
  (let ((world (current-world)))
    (let ((material (opaque-material))
          (uv (image-coordinates image)))
      (let ((tl (uv-left uv))
            (tt (uv-top uv))
            (tr (uv-right uv))
            (tb (uv-bottom uv))
            (texture-depth (uv-depth uv))
            (queue (new-queue)))
        (loop (for i from (- width) to width)
              (loop (for k from (- depth) to depth)
                    (let ((x (cast <fl> i))
                          (y 0.)
                          (z (cast <fl> k)))
                      (enqueue queue
                               (make-face material
                                          (f32vector tl tb tl tt tr tt tr tb)
                                          texture-depth
                                          (make-quad #f
                                                     (vertex x y (+ z 1.))
                                                     (vertex (+ x 1.) y (+ z 1.))
                                                     (vertex (+ x 1.) y z)
                                                     (vertex x y z)))))))
        (let ((faces (queue-list queue)))
          (make-model faces))))))


(definition public (generate-floor x y z width depth)
  (let ((zone (current-zone)))
    (add-element zone
      (let ((model (generate-floor-model "stone" width depth))
            (entity (new Entity parent: zone position: (vertex x y z) physical?: #t)))
        (set-model entity model)
        (add-element zone entity)))))


;;;
;;;; Wall
;;;


(definition public (generate-wall-model image width height)
  (let ((world (current-world)))
    (let ((material (opaque-material))
          (uv (image-coordinates image)))
      (let ((tl (uv-left uv))
            (tt (uv-top uv))
            (tr (uv-right uv))
            (tb (uv-bottom uv))
            (texture-depth (uv-depth uv))
            (queue (new-queue)))
        (loop (for i from (- width) to width)
              (loop (for j from 0 to (* height 2))
                    (let ((x (cast <fl> i))
                          (y (cast <fl> j))
                          (z 0.))
                      (enqueue queue
                               (make-face material
                                          (f32vector tl tb tl tt tr tt tr tb)
                                          texture-depth
                                          (make-quad #f
                                                     (vertex x (+ y 1.) z)
                                                     (vertex (+ x 1.) (+ y 1.) z)
                                                     (vertex (+ x 1.) y z)
                                                     (vertex x y z)))))))
        (let ((faces (queue-list queue)))
          (make-model faces))))))


(definition public (generate-wall x y z width height)
  (let ((zone (current-zone)))
    (add-element zone
      (let ((model (generate-wall-model "stone" width height))
            (entity (new Entity parent: zone position: (vertex x y z) physical?: #t)))
        (set-model entity model)
        (add-element zone entity)))))


;;;
;;;; Slope
;;;


(definition public (generate-slope-model image height x-count z-count)
  (let ((world (current-world)))
    (let ((material (opaque-material))
          (uv (image-coordinates image)))
      (let ((tl (uv-left uv))
            (tt (uv-top uv))
            (tr (uv-right uv))
            (tb (uv-bottom uv))
            (texture-depth (uv-depth uv))
            (queue (new-queue))
            (width 1.)
            (depth 1.))
        (loop (for d from 0 below z-count)
              (loop (for i from 0 below x-count)
                    (let ((x (* (cast <fl> i) width))
                          (y (* (cast <fl> d) height))
                          (z (* (cast <fl> d) depth)))
                      (enqueue queue
                               (make-face material
                                          (f32vector tl tb tl tt tr tt tr tb)
                                          texture-depth
                                          (make-quad #f
                                                     (vertex x (+ y height) (+ z depth))
                                                     (vertex (+ x width) (+ y height) (+ z depth))
                                                     (vertex (+ x width) y z)
                                                     (vertex x y z)))))))
        (let ((faces (queue-list queue)))
          (make-model faces))))))


(definition public (generate-slope x y z height x-count z-count)
  (let ((zone (current-zone)))
    (add-element zone
      (let ((model (generate-slope-model "stone" height x-count z-count))
            (entity (new Entity parent: zone position: (vertex x y z) physical?: #t)))
        (set-model entity model)
        (add-element zone entity)))))


;;;
;;;; Stairs
;;;


(definition public (generate-stairs-model image stairs width height depth x-count y-count z-count)
  (let ((world (current-world)))
    (let ((material (opaque-material))
          (uv (image-coordinates image)))
      (let ((tl (uv-left uv))
            (tt (uv-top uv))
            (tr (uv-right uv))
            (tb (uv-bottom uv))
            (texture-depth (uv-depth uv))
            (queue (new-queue)))
        (loop (for d from 0 below stairs)
              (loop (for i from (- x-count) to x-count)
                    (let ((x (* (cast <fl> i) width))
                          (y (* (cast <fl> d) height))
                          (z (* (cast <fl> d) (* depth z-count))))
                      ;; front
                      (enqueue queue
                               (make-face material
                                          (f32vector tl tb tl tt tr tt tr tb)
                                          texture-depth
                                          (make-quad #f
                                                     (vertex x (+ y height) z)
                                                     (vertex (+ x width) (+ y height) z)
                                                     (vertex (+ x width) y z)
                                                     (vertex x y z))))
                      ;; flat
                      (loop (for n from 0 below z-count)
                            (let ((z (+ z (* (cast <fl> n) depth))))
                              (enqueue queue
                                       (make-face material
                                                  (f32vector tl tb tl tt tr tt tr tb)
                                                  texture-depth
                                                  (make-quad #f
                                                             (vertex x (+ y height) (+ z depth))
                                                             (vertex (+ x width) (+ y height) (+ z depth))
                                                             (vertex (+ x width) (+ y height) z)
                                                             (vertex x (+ y height) z)))))))))
        (let ((faces (queue-list queue)))
          (make-model faces))))))


(definition public (generate-stairs stairs x y z width height depth x-count y-count z-count)
  (let ((zone (current-zone)))
    (add-element zone
      (let ((model (generate-stairs-model "stone" stairs width height depth x-count y-count z-count))
            (entity (new Entity parent: zone position: (vertex x y z) physical?: #t)))
        (set-model entity model)
        (add-element zone entity))))))
