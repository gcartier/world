;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Grid
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.grid jazz


(import (jazz.geometry)
        (jazz.opengl.glew)
        (world)
        (world.autoload)
        (world.dye)
        (world.dyes)
        (world.generate)
        (world.geometry)
        (world.homogeneous)
        (world.lighting)
        (world.overlay)
        (world.syntax (phase syntax))
        (world.texture))


;;;
;;;; Grid
;;;


(definition (grid-generator level radius uv)
  (lambda (setup-proc triangle-proc quad-proc)
    (let ((diameter (* radius 2))
          (tl uv/left)
          (tt uv/top)
          (tr uv/right)
          (tb uv/bottom)
          (texture-depth (uv-depth uv)))
      (define (add-quad v1 v2 v3 v4)
        (quad-proc
          v1 #f tl tb 0
          v2 #f tr tb 0
          v3 #f tr tt 0
          v4 #f tl tt 0
          uv
          texture-depth))
      
      (setup-proc 0 (* diameter diameter))
      (let ((radius (cast <fl> radius)))
        (loop (for x <fl> from (- radius) to (- radius 1.) by 1.)
              (loop (for z <fl> from (- radius) to (- radius 1.) by 1.)
                    (let ((l x)
                          (b z)
                          (r (+ x 1.))
                          (f (+ z 1.)))
                      (add-quad (vertex l level b)
                                (vertex l level f)
                                (vertex r level f)
                                (vertex r level b)))))))))


(definition (generate-grid)
  (let ((world (current-world)))
    (let ((mesh (generate-mesh (grid-generator 0. 100 (f32vector 0. 0. 0. 0. 0. 0. 0. 0.)))))
      (setup-array~ mesh (find-mesh-program~ world 'color))
      mesh)))


(definition grid-mesh
  #f)


(definition (get-grid-mesh)
  (or grid-mesh
      (begin
        (set! grid-mesh (generate-grid))
        grid-mesh)))


(definition public (draw-grid)
  (let ((world (current-world))
        (zone (current-zone)))
    (let ((mesh (get-grid-mesh)))
      (define (render-mesh matrix grid-color)
        (let ((program (find-mesh-program~ world 'color)))
          (use~ program)
          (bind-uniforms~ program matrix no-overlay 0. (current-lighting) grid-color)
          (glBindVertexArray (get-array~ mesh))
          (glDrawArrays GL_LINES 0 (get-indices~ (get-vertices-buffer~ mesh)))
          (glBindVertexArray 0)
          (unbind-uniforms~ program)
          (unuse~ program)))
      
      (let ((index (position-area-index~ zone (get-position~ (current-camera))))
            (size (get-area-size~ zone)))
        (let ((bx (fl& (cast <fl> (* (cast <fx> (vector-ref index 0)) size))))
              (by (fl& (cast <fl> (* (cast <fx> (vector-ref index 1)) size))))
              (bz (fl& (cast <fl> (* (cast <fx> (vector-ref index 2)) size)))))
          (case (get-grid-plane~ world)
            ((x)
             (let ((matrix (matrix-multiply& (make-translation-matrix& (vertex (get-grid-position~ world) by bz))
                                             (make-z-rotation-matrix& PI/2))))
               (render-mesh matrix yellow-dye)))
            ((y)
             (let ((matrix (make-translation-matrix& (vertex bx (get-grid-position~ world) bz))))
               (render-mesh matrix green-dye)))
            ((z)
             (let ((matrix (matrix-multiply& (make-translation-matrix& (vertex bx by (get-grid-position~ world)))
                                             (make-x-rotation-matrix& PI/2))))
               (render-mesh matrix red-dye)))))))))


;;;
;;;; 3d Grid
;;;


(definition (3d-grid-generator radius uv)
  (lambda (setup-proc triangle-proc quad-proc)
    (let ((diameter (* radius 2))
          (tl uv/left)
          (tt uv/top)
          (tr uv/right)
          (tb uv/bottom)
          (texture-depth (uv-depth uv)))
      (define (add-quad v1 v2 v3 v4)
        (quad-proc
          v1 #f tl tb 0
          v2 #f tr tb 0
          v3 #f tr tt 0
          v4 #f tl tt 0
          uv
          texture-depth))
      
      (setup-proc 0 (+ (* diameter diameter 2)
                       (* diameter (+ diameter 1))))
      (let ((radius (cast <fl> radius)))
        (loop (for y <fl> from 0. to 1. by 1.)
              (loop (for x <fl> from (- radius) to (- radius 1.) by 1.)
                    (loop (for z <fl> from (- radius) to (- radius 1.) by 1.)
                          (let ((l x)
                                (b z)
                                (r (+ x 1.))
                                (f (+ z 1.)))
                            (add-quad (vertex l y b)
                                      (vertex l y f)
                                      (vertex r y f)
                                      (vertex r y b))))))
        (loop (for x <fl> from (- radius) to radius by 1.)
              (loop (for z <fl> from (- radius) to (- radius 1.) by 1.)
                    (add-quad (vertex x 0. z)
                              (vertex x 1. z)
                              (vertex x 1. (+ z 1.))
                              (vertex x 0. (+ z 1.)))))))))


(definition (generate-3d-grid)
  (let ((world (current-world)))
    (let ((mesh (generate-mesh (3d-grid-generator 5 (f32vector 0. 0. 0. 0. 0. 0. 0. 0.)) neighbors?: #t)))
      (setup-array~ mesh (find-mesh-program~ world 'squareframe))
      mesh)))


(definition 3d-grid-mesh
  #f)


(definition (get-3d-grid-mesh)
  (or 3d-grid-mesh
      (begin
        (set! 3d-grid-mesh (generate-3d-grid))
        3d-grid-mesh)))


(definition public (draw-3d-grid index size)
  (let ((world (current-world))
        (zone (current-zone)))
    (let ((mesh (get-3d-grid-mesh)))
      (define (render-mesh matrix grid-color)
        (let ((program (find-mesh-program~ world 'squareframe)))
          (use~ program)
          (bind-uniforms~ program matrix #f no-overlay 0. (current-lighting) wire-color: red-dye fill-color: (dye 1. 0. 0. 0.))
          (glEnable GL_BLEND)
          ;(glDisable GL_DEPTH_TEST)
          ;(glEnable GL_CULL_FACE)
          ;(glCullFace GL_FRONT)
          (glBindVertexArray (get-array~ mesh))
          (glDrawArrays GL_TRIANGLES 0 (get-indices~ (get-vertices-buffer~ mesh)))
          (glBindVertexArray 0)
          ;(glCullFace GL_BACK)
          ;(glDisable GL_CULL_FACE)
          ;(glEnable GL_DEPTH_TEST)
          (glDisable GL_BLEND)
          (unbind-uniforms~ program)
          (unuse~ program)))
      
      (let ((bx (fl& (cast <fl> (* (cast <fx> (vector-ref index 0)) size))))
            (by (fl& (cast <fl> (* (cast <fx> (vector-ref index 1)) size))))
            (bz (fl& (cast <fl> (* (cast <fx> (vector-ref index 2)) size)))))
        (let ((matrix (matrix-multiply& (make-translation-matrix& (vertex bx by bz))
                                        (make-scaling-matrix& (vertex (cast <fl> size) (cast <fl> size) (cast <fl> size))))))
          (render-mesh matrix red-dye)))))))
