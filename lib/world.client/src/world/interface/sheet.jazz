;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Sheet
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2016
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.interface.sheet jazz


(import (jazz.opengl.glew)
        (jazz.ui)
        (world)
        (world.autoload)
        (world.geometry)
        (world.syntax (phase syntax))
        (world.texture))


(definition public (make-world-sheet name class width height)
  (if (not (window?))
      (new class name: name)
    (let ((world (current-world)))
      (let ((player (new class name: name))
            (program (get-player-program~ world)))
        (set-program~ player program)
        (set-array~ player (let ((w (cast <fl> width))
                                 (h (cast <fl> height)))
                             (let ((vertices (f32vector
                                               0. h  0. 0. 0. 0.
                                               w  h  0. 1. 0. 0.
                                               0. 0. 0. 0. 1. 0.
                                               w  0. 0. 1. 1. 0.
                                               0. 0. 0. 0. 1. 0.
                                               w  h  0. 1. 0. 0.)))
                               (create-vertices-array~ program vertices))))
        (set-texture~ player (make-cairo-texture width height))
        player))))

;;
(class World-Sheet extends Layout-View
  
  
  (slot program           <object> initialize #f            accessors generate)
  (slot array             <object> initialize #f            accessors generate)
  (slot texture           <object> initialize #f            accessors generate)
  (slot projection-matrix <object> initialize (make-matrix) accessors generate)
  (slot view-matrix       <object> initialize (make-matrix) accessors generate)
  
  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method override (cursor-update evt)
    )
  
  
  ;;;
  ;;;; Draw
  ;;;
  
  
  (method protected virtual (draw-player)
    )
  
  
  ;;;
  ;;;; Render
  ;;;
  
  
  (method public (render-sheet (matrix #f))
    (draw-player)
    (glEnable GL_BLEND)
    (glDisable GL_DEPTH_TEST)
    (use~ program)
    (bind-uniforms~ program projection-matrix (or matrix view-matrix) (get-id~ texture))
    (glBindVertexArray array)
    (glDrawArrays GL_TRIANGLES 0 6)
    (glBindVertexArray 0)
    (unbind-uniforms~ program)
    (unuse~ program)
    (glEnable GL_DEPTH_TEST)
    (glDisable GL_BLEND))))
