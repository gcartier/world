;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Sheet
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.interface.sheet jazz


(import (jazz.opengl.glew)
        (jazz.ui)
        (world)
        (world.context)
        (world.foreign)
        (world.geometry)
        (world.texture))


(definition public (make-world-sheet name class size (resolution: resolution #f))
  (if (not (window?))
      (new class name: name)
    (let ((world (current-world)))
      (let ((sheet (new class name: name))
            (program (get-sheet-program world)))
        (set-program sheet program)
        (setup-array/buffer sheet size)
        (set-resolution sheet resolution)
        (set-texture sheet (make-cairo-texture (get-width (or resolution size)) (get-height (or resolution size)) retina?: #t))
        sheet))))


(class World-Sheet extends Layout-View
  
  
  (slot program           <object> initialize #f            accessors generate)
  (slot array             <object> initialize #f            accessors generate)
  (slot buffer            <object> initialize #f            accessors generate)
  (slot resolution        <object> initialize #f            accessors generate)
  (slot texture           <object> initialize #f            accessors generate)
  (slot projection-matrix <object> initialize (make-matrix) accessors generate)
  (slot view-matrix       <object> initialize (make-matrix) accessors generate)
  
  
  (method package (setup-array/buffer self size)
    (receive (array buffer) (let ((width (get-width size))
                                  (height (get-height size)))
                              (let ((w (cast <fl> width))
                                    (h (cast <fl> height)))
                                (let ((vertices (f32vector
                                                  0. h  0. 0. 0. 0.
                                                  w  h  0. 1. 0. 0.
                                                  0. 0. 0. 0. 1. 0.
                                                  w  0. 0. 1. 1. 0.
                                                  0. 0. 0. 0. 1. 0.
                                                  w  h  0. 1. 0. 0.)))
                                  (create-vertices-array program vertices))))
      (set-array self array)
      (set-buffer self buffer)))
  
  
  (method override (destroy self)
    (nextmethod self)
    (glDeleteVertexArrays* array)
    (glDeleteBuffers* buffer)
    (close texture))
  
  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method override (cursor-update self evt)
    )
  
  
  (method override (size-change self size)
    (nextmethod self size)
    ;; quick hack for interface
    (unless (eq? name 'root)
      (when array
        (glDeleteVertexArrays* array))
      (when buffer
        (glDeleteBuffers* buffer))
      (setup-array/buffer self size))
    (when (not resolution)
      (when texture
        (close texture))
      (set! texture (make-cairo-texture (get-width size) (get-height size) retina?: #t))))
  
  
  ;;;
  ;;;; Draw
  ;;;
  
  
  (method protected virtual (draw-player self)
    )
  
  
  ;;;
  ;;;; Render
  ;;;
  
  
  (method public (render-sheet self (matrix #f))
    (draw-player self)
    (glEnable GL_BLEND)
    (glDisable GL_DEPTH_TEST)
    (use program)
    (bind-uniforms program projection-matrix (or matrix view-matrix) (get-id texture))
    (glBindVertexArray array)
    (glDrawArrays GL_TRIANGLES 0 6)
    (glBindVertexArray 0)
    (unbind-uniforms program)
    (unuse program)
    (glEnable GL_DEPTH_TEST)
    (glDisable GL_BLEND))))
