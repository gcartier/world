;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Sheet
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.interface.sheet jazz


(import (jazz.geometry)
        (jazz.opengl.glew)
        (jazz.opengl.texture)
        (jazz.ui)
        (jazz.view)
        (world)
        (world.context)
        (world.foreign)
        (gaea.geometry)
        (world.texture))


;;;
;;;; Mousable
;;;


(interface Mousable
  
  
  (method public virtual abstract (mousable? self))
  (method public virtual abstract (mousable-down self x y))
  (method public virtual abstract (mousable-moved self x y))
  (method public virtual abstract (mousable-up self x y))
  (method public virtual abstract (mousable-double self x y))
  (method public virtual abstract (mousable-multiple self count x y))
  (method public virtual abstract (mousable-right-down self x y))
  (method public virtual abstract (mousable-right-up self x y))
  (method public virtual abstract (mousable-wheel self x y delta)))


;;;
;;;; Sheet
;;;


(definition public (make-world-sheet name class size (resolution: resolution #f) (texture: texture #f) (retina?: retina? #t) (flipped?: flipped? #f))
  (if (not (window?))
      (new class name: name)
    (let ((world (current-world)))
      (let ((sheet (new class name: name))
            (program (if flipped? (get-sheet-flipped-program world) (get-sheet-program world))))
        (set-size-noevent sheet size)
        (set-program sheet program)
        (setup-array/buffer sheet)
        (set-resolution sheet resolution)
        (set-texture sheet (or texture (make-cairo-texture (get-width (or resolution size)) (get-height (or resolution size)) retina?: retina?)))
        sheet))))


(class World-Sheet extends Layout-View implements Mousable
  
  
  (slot program           <object> initialize #f            accessors generate)
  (slot array             <object> initialize #f            accessors generate)
  (slot buffer            <object> initialize #f            accessors generate)
  (slot resolution        <object> initialize #f            accessors generate)
  (slot texture           <object> initialize #f            accessors generate)
  (slot projection-matrix <object> initialize (make-matrix) accessors generate)
  (slot root-view         <object> initialize #f            accessors generate)
  
  
  (method package (setup-array/buffer self)
    (receive (array buffer) (let ((h (cast <fl> (get-h position)))
                                  (v (cast <fl> (get-v position)))
                                  (width (cast <fl> (get-width size)))
                                  (height (cast <fl> (get-height size)))
                                  (world-height (get-height (current-world))))
                              (let ((l h)
                                    (r (+ h width))
                                    (t (- world-height (+ v height)))
                                    (b (- world-height v)))
                                (let ((vertices (f32vector
                                                  l  b  0. 0. 0. 0.
                                                  r  b  0. 1. 0. 0.
                                                  l  t  0. 0. 1. 0.
                                                  r  t  0. 1. 1. 0.
                                                  l  t  0. 0. 1. 0.
                                                  r  b  0. 1. 0. 0.)))
                                  (create-vertices-array program vertices))))
      (set-array self array)
      (set-buffer self buffer)))
  
  
  (method override (destroy self)
    (nextmethod self)
    (glDeleteVertexArrays* array)
    (glDeleteBuffers* buffer)
    (close texture))
  
  
  (method protected (effective-rect self)
    (position/size->rect (get-position self) (get-size root-view)))
  
  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method override (cursor-update self evt)
    )
  
  
  (method override (position-change self position)
    (nextmethod self position)
    (refresh-array/buffer self))
  
  
  (method override (size-change self size)
    (nextmethod self size)
    (refresh-array/buffer self)
    (when (not resolution)
      (when texture
        (close texture))
      (set! texture (make-cairo-texture (get-width size) (get-height size) retina?: #t))))
  
  
  (method protected (refresh-array/buffer self)
    (when array
      (glDeleteVertexArrays* array))
    (when buffer
      (glDeleteBuffers* buffer))
    (setup-array/buffer self))
  
  
  ;;;
  ;;;; Mousable
  ;;;
  
  
  (method override (mousable? self)
    root-view)
  
  
  (method override (mousable-down self x y)
    (parameterize ((event-type 'mouse))
      (when root-view
        (root-mouse-down root-view (fxround x) (fxround y)))))
  
  
  (method override (mousable-moved self x y)
    (parameterize ((event-type 'mouse))
      (when root-view
        (dispatch-mouse-move root-view (fxround x) (fxround y)))))
  
  
  (method override (mousable-up self x y)
    (parameterize ((event-type 'mouse))
      (when root-view
        (root-mouse-up root-view (fxround x) (fxround y)))))
  
  
  (method override (mousable-double self x y)
    (parameterize ((event-type 'mouse))
      (when root-view
        (root-double-click root-view (fxround x) (fxround y)))))
  
  
  (method override (mousable-multiple self count x y)
    (parameterize ((event-type 'mouse))
      (when root-view
        (root-multiple-click root-view count (fxround x) (fxround y)))))
  
  
  (method override (mousable-right-down self x y)
    (parameterize ((event-type 'mouse))
      (when root-view
        (root-right-mouse-down root-view (fxround x) (fxround y)))))
  
  
  (method override (mousable-right-up self x y)
    (parameterize ((event-type 'mouse))
      (when root-view
        (root-right-mouse-up root-view (fxround x) (fxround y)))))
  
  
  (method override (mousable-wheel self x y delta)
    (when root-view
      (root-mouse-wheel root-view (fxround x) (fxround y) delta)))
  
  
  ;;;
  ;;;; Draw
  ;;;
  
  
  (method protected virtual (draw-player self)
    )
  
  
  ;;;
  ;;;; Render
  ;;;
  
  
  (method public (render-sheet self)
    (draw-player self)
    (glEnable GL_BLEND)
    (glDisable GL_DEPTH_TEST)
    (use program)
    (bind-uniforms program projection-matrix (get-id texture))
    (glBindVertexArray array)
    (glDrawArrays GL_TRIANGLES 0 6)
    (glBindVertexArray 0)
    (unbind-uniforms program)
    (unuse program)
    (glEnable GL_DEPTH_TEST)
    (glDisable GL_BLEND))))
