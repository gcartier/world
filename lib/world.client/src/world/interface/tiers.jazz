;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; Tier Open
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2016
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.interface.tiers jazz


(import (jazz.graphic)
        (jazz.handler)
        (jazz.io)
        (jazz.jml)
        (jazz.outline)
        (jazz.tree)
        (jazz.ui)
        (world)
        (world.autoload)
        (world.context)
        (world.io)
        (world.interface.frame)
        (world.syntax (phase syntax))
        (world.window))


(class Tier-Open extends World-Frame
  
  
  (property start-script? initialize #t accessors generate)
  
  
  (form
    (<install>                    size: {Dimension 420 639} layout-type: border
      (<caption~>                 title: "Tiers")
      (<content~>                 layout-type: fill
        (<Tiers-View> name: tiers))))
  
  
  (method override (focus-default self)
    (acquire-focus (get-tree self)))
  
  
  (method package (get-tree self)
    (locate self '(tiers tiers))))


;;;
;;;; Tiers-View
;;;


(class Tiers-View extends Scroller-View
  
  
  (form
    (<install>                                style: document hscroll?: #t vscroll?: #t
      (<content~>                             layout-type: fill
        (<Tree-Header>                        style: document shown?: #f
          (<content~>
            (<Tree-View>          name: tiers portfolio: :images filled-column: tier multiple-selection?: #t background: #f double-click-handler: {Event-Handler :form on-double-click} return-press-handler: {Event-Handler :form on-return-press} escape-press-handler: {Event-Handler :form on-escape-press}
              (<Tree-Node-Column> name: tier  title: "Tier" width: 235 toplevel-controls?: #f display-images?: #f display-levels?: #f)))))))
    
  
  (method override (conclude self initargs)
    (nextmethod self initargs)
    (view-tiers self))

  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method package (get-tree self)
    (locate self 'tiers))
  
  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method (on-double-click self evt)
    (open-selected self))
  
  
  (method override (on-return-press self evt)
    (open-selected self))
  
  
  (method override (on-escape-press self evt)
    (close (find-ascendant self World-Frame)))
  
  
  ;;;
  ;;;; Open
  ;;;
  
  
  (method package (open-selected self)
    (let ((world (current-world)))
      (let ((file (get-single-selected-data (get-tree self))))
        (when file
          (close (find-ascendant self World-Frame))
          (open-log-file self file)))))
  
  
  (method package virtual (open-log-file self file)
    (with-window-cursor :wait
      (lambda ()
        (let ((world (current-world)))
          (let ((zone (open-local file @start-script?: start-script?)))
            (display-message world (get-title zone)))))))
  
  
  ;;;
  ;;;; Update
  ;;;
  
  
  (method package virtual (view-tiers self)
    (update-tiers self 'local
      ignore?: (lambda (path)
                 (or (filename=? (car path) "welcome")
                     (filename=? (car path) "tutorial")))))
  
  
  (method (update-tiers self kind (ignore?: ignore? #f))
    (let ((world (current-world)))
      (define (collect-tiers)
        (let ((directory (get-tiers-directory world kind))
              (queue (new-queue)))
          (when (exists? directory)
            (iterate-directory directory
              (lambda (path path-kind)
                (unless (and ignore? (ignore? path))
                  (let ((dir (new-directory directory path)))
                    (let ((file (tier-file dir kind)))
                      (when (exists? file)
                        (enqueue queue (cons path file)))))))
              full?: #f
              files?: #f
              directories?: #t))
          (queue-list queue)))
      
      (define (partition-tiers tiers)
        (partition tiers key: (lambda (info)
                                (let ((path (car info)))
                                  (if (> (length path) 1)
                                      (car path)
                                    "")))
          test: filename=?))
      
      (let ((tree (get-tree self)))
        (remove-every-row tree)
        (with-update-locked self
          (lambda ()
            (define (add-children father children)
              (for-each (lambda (info)
                          (bind (path . file) info
                            (let ((title (extract-spine (join (if (> (length path) 1) (cdr path) path) "/"))))
                              (add-row tree
                                father: father
                                children: (list (new Tree-Node title: title font: {Font Label-User} color: {Color White}))
                                user-data: file))))
                        children))
            
            (for-each (lambda (partition)
                        (bind (title . children) partition
                          (if (empty-string? title)
                              (add-children #f children)
                            (let ((father (add-row tree
                                            state: 'expanded
                                            children: (list (new Tree-Node title: title font: {Font Label-User} color: {Color red: 220 green: 0 blue: 0})))))
                              (add-children father children)))))
                      (sort ci<? (partition-tiers (collect-tiers)) key: car))
            (select-first-data tree))))))))
