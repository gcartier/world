;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Interface Layout
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.interface.layout jazz


(import (jazz.figure)
        (jazz.geometry)
        (jazz.layout)
        (jazz.view)
        (world.interface.autoload))


;;;
;;;; Central
;;;


(class Central-Layout extends Layout
  
  
  (property insets        <Rect> initialize {Rect 0 0 0 0} accessors generate)
  (property justification        initialize 'horizontal    accessors generate)
  (property padding       <fx>   initialize 0              accessors generate)
  (property fill?         <bool> initialize #f             accessors generate)
  
  
  ;;;
  ;;;; Layout
  ;;;


  (method override (layout self view figures width height)
    (let ((figures (collect-if get-visible? figures)))
      (let ((count (- (length figures) 1))
            (pad 37))
        (define (determine-radius)
          80.
          @wait
          (if (<= count 4)
              120.
            (+ 120. (* (- count 4) 10.))))
        
        (let ((radius (determine-radius))
              (angle .2)
              (increment (/ PI*2 (cast <fl> count))))
          (let ((center (car figures)))
            (set-position center (new Point
                                   (+ pad (- (fxround radius) (quotient (get-width center) 2)))
                                   (+ pad (- (fxround radius) (quotient (get-height center) 2) 7)))))
          (for-each (lambda (figure <Figure>)
                      (if (= count 1)
                          (begin
                            (set-angle figure 0.)
                            (set-visible? figure #f))
                        (set-angle figure angle)
                        (set-position figure (new Point
                                               (+ pad (- (fxround (+ radius (* (cos angle) radius))) (quotient (get-width figure) 2)))
                                               (+ pad (- (fxround (+ radius (* (sin angle) radius))) (quotient (get-height figure) 2)))))
                        (increase! angle increment)))
                    (cdr figures))
          (let ((diameter (+ pad (fxround radius) (fxround radius) pad)))
            (set-size view (new Dimension diameter diameter))))))))



;;;
;;;; Radial
;;;

(class Radial-Layout extends Layout
  
  
  (property insets        <Rect> initialize {Rect 0 0 0 0} accessors generate)
  (property justification        initialize 'horizontal    accessors generate)
  (property padding       <fx>   initialize 0              accessors generate)
  (property fill?         <bool> initialize #f             accessors generate)
  
  
  ;;;
  ;;;; Layout
  ;;;


  (method override (layout self view figures width height)
    (let ((figures (collect-if get-visible? figures)))
      (let ((count (length figures))
            (nudge 10))
        (define (determine-radius)
          180.
          @wait
          (if (<= count 4)
              120.
            (+ 120. (* (- count 4) 10.))))
        
        (let ((radius (determine-radius))
              (increment (/ PI*2 10.))
              (ch (quotient (get-width view) 2))
              (cv (quotient (get-height view) 2))
              (button (child (child (get-parent view) 'wheel) (get-name view))))
          (let ((angle (- (get-angle button) (* increment (/ (- count 1) 2.)))))
            (for-each (lambda (figure <Figure>)
                        (set-position figure (new Point
                                               (- (+ ch (fxround (* (cos angle) radius))) (quotient (get-width figure) 2))
                                               (- (+ cv (fxround (* (sin angle) radius))) (quotient (get-height figure) 2) nudge)))
                        (increase! angle increment))
                      figures))))))))
