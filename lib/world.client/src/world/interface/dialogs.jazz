;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Dialogs
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.interface.dialogs jazz


(import (jazz.handler)
        (jazz.ui)
        (world)
        (world.autoload)
        (world.interface.frame)
        (world.interface.string)
        (world.syntax (phase syntax)))


(definition public (open-dialog view (title: title #f) (size: size #f))
  (let ((world (current-world)))
    (let ((interface (get-interface~ world)))
      (let ((pane (new World-Dialog parent: interface size: (or size (nu+ (get-size~ view) {Dimension 100 70})) location: 'center layout-type: 'border)))
        (when title
          (set-title~ (locate~ pane 'caption) title))
        (let ((content (locate~ pane 'content)))
          (set-layout-type~ content 'center)
          (set-parent~ view content))
        (layout-view~ interface)
        (set-interface?~ world #t)
        (focus-default~ view)))))


(definition public (open-message title . rest)
  (bind-keywords ((caption #f) . others) rest
    (let ((box (new World-Box)))
      (let ((size (apply process-box~ box title icon: 'none process-modal?: #f others)))
        (set-size~ box size)
        (open-dialog box title: caption)))))


(definition public (open-string (class: class World-String-Request) (title: title #f) (size: size #f) (prefix: prefix #f) (initial-value: initial-value #f) (action: action #f))
  (define (ok-action view)
    (let ((str (get-modal-result~ view)))
      (close-dialog view)
      (when action
        (action str))))
  
  (define (cancel-action view)
    (close-dialog view))
  
  (define (close-dialog view)
    (close~ (find-ascendant~ view World-Dialog)))
  
  (let ((view (new class)))
    (let ((text (locate~ view 'text)))
      (set-prefix~ view (or prefix "String:"))
      (set-string-content~ text (if initial-value (->string initial-value) ""))
      (select-all~ text)
      (set-action-handler~ (locate~ view 'ok) (new Event-Handler execute: (lambda (evt) (ok-action view))))
      (set-action-handler~ (locate~ view 'cancel) (new Event-Handler execute: (lambda (evt) (cancel-action view))))
      (open-dialog view title: title size: size)
      (acquire-focus~ text))))


;;;
;;;; World-Dialog
;;;


(class World-Dialog extends World-Frame)


;;;
;;;; World-Box
;;;


(class World-Box extends Message-Box


  (method override (resize dh dv)
    )
  
  
  (method override (process-return)
    (let ((button (find action-buttons default-button key: get-name~ return: 'item)))
      (when button
        (process-action~ button self))))
  
  
  (method override (process-key key)
    (when process-keys?
      (let ((button (find-button key)))
        (when button
          (process-action~ button self)))))))
