;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; Propagation Debugger
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.interface.propagation jazz


(import (jazz.geometry)
        (jazz.graphic)
        (jazz.graphic.image)
        (jazz.io)
        (jazz.jml)
        (jazz.ui)
        (world)
        (world.autoload)
        (world.external.nbt)
        (world.interface.frame)
        (world.section)
        (world.syntax (phase syntax))
        (world.texture))


(definition slot-size
  48)

(definition propagation-size
  8)


(definition (propagation-index x y)
  (+ x (* y propagation-size)))


(definition dummy-section
  #f)

(definition (cache-dummy-section)
  (or dummy-section
      (let ((section (new World-Section #f #f #f #f)))
        (set-sector~ section #f)
        (set! dummy-section section)
        section)))


;;;
;;;; Slot
;;;


(class Propagation-Slot extends View
  
  
  (property x     initialize #f accessors generate)
  (property y     initialize #f accessors generate)
  (property id    initialize 0  accessors generate)
  (property light initialize 0  accessors generate)
  
  
  ;;;
  ;;;; Draw
  ;;;
     
  
  (method override (draw surface context)
    (let ((bounds (get-bounds)))
      (when (and id (/= id 0) (< id 256))
        (let ((str (->string id)))
          (let ((extent (get-text-extent~ surface str)))
            (draw-text~ surface (- (get-right~ bounds) (get-width~ extent)) (- (get-bottom~ bounds) (get-height~ extent)) str {Color White}))))
      (let ((str (->string light)))
        (let ((extent (get-text-extent~ surface str)))
          (let ((pos (center extent (rect-size bounds))))
            (draw-text~ surface (get-h~ pos) (get-v~ pos) str {Color Yellow}))))
      (frame-partial-rect~ surface bounds '(left top) {Color Entry-Border})
      (frame-partial-rect~ surface bounds '(right bottom) {Color Entry-Border alpha: .6})))
  
  
  ;;;
  ;;;; Mouse
  ;;;
  
  
  (define (add-sector sector)
    )
  
  
  (define (with-field i j k proc)
    (proc (and  (>= i 0)
                (< i propagation-size)
                (= j 0)
                (>= k 0)
                (< k propagation-size)
                (cache-dummy-section))
          (propagation-index i k)))
  
  
  (method (block-ref section index)
    (let ((slot (propagation-slot~ parent index)))
      (if slot
          (get-id~ slot)
        1)))
  
  
  (method (block-set! section index id)
    (let ((slot (propagation-slot~ parent index)))
      (when slot
        (set-id~ slot id))))
  
  
  (method (blocklight-ref section index)
    (let ((slot (propagation-slot~ parent index)))
      (if slot
          (get-light~ slot)
        0)))
  
  
  (method (blocklight-set! section index light)
    (let ((slot (propagation-slot~ parent index)))
      (when slot
        (set-light~ slot light))))
  
  
  (method override (mouse-down evt)
    (let ((game (current-game))
          (region #f)
          (sector #f)
          (section #f))
      (delete-block~ game
        region sector 1 0 x 0 y 0. 0. 0. #f #f add-sector with-field block-ref block-set! #f #f blocklight-ref blocklight-set! #f #f)
      (invalidate-view~ parent)))
  
  
  (method override (right-mouse-down evt)
    (let ((game (current-game))
          (region #f)
          (sector #f)
          (section #f))
      (let ((id (if (get-control?~ evt) 50 1)))
        (add-block~ game
          id region sector 1 0 x 0 y 0. 0. 0. #f #f add-sector with-field block-ref block-set! #f #f blocklight-ref blocklight-set! #f #f))
      (invalidate-view~ parent))))


;;;
;;;; Frame
;;;


(class Propagation-Frame extends World-Frame
  
  
  (form
    (<install>                                layout-type: border
      (<caption~>                             title: "Propagation")
      (<content~>                             layout-type: fill
        (<Propagation-View> name: propagation))))
  
  
  (method override (focus-default)
    (acquire-focus~ (locate 'propagation))))


;;;
;;;; Frame
;;;


(class Propagation-View extends View
  
  
  (slot slot-table initialize (make-table) getter generate)
  (slot data       initialize #f           getter generate)
  
  
  (form
    (<install> background: {Color Black alpha: 0.3}))
  
  
  (method override (conclude initargs)
    (nextmethod initargs)
    (setup-propagation))
  
  
  ;;;
  ;;;; Update
  ;;;
  
  
  (method (propagation-slot index)
    (table-ref slot-table index #f))
  
  
  (method (setup-propagation)
    (loop (for x from 0 below propagation-size)
          (loop (for y from 0 below propagation-size)
                (let ((view (new Propagation-Slot parent: self position: (new Point (* x slot-size) (* y slot-size)) size: (new Dimension slot-size slot-size) x: x y: y)))
                  (table-set! slot-table (propagation-index x y) view)))))
  
  
  ;;;
  ;;;; Draw
  ;;;
  
  
  (method override (draw surface context)
    (let ((bounds (get-bounds)))
      (frame-partial-rect~ surface bounds '(right bottom) {Color Entry-Border})))))
