;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Command Bar
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.interface.command jazz


(import (jazz.graphic)
        (jazz.handler)
        (jazz.markup)
        (jazz.text)
        (jazz.ui)
        (gaea.geometry)
        (world)
        (world.context)
        (world.interface)
        (world.interface.panel)
        (world.interface.text))


;;;
;;;; Panel
;;;


(class Command-Bar extends World-Panel
  
  
  (slot return-handler initialize #f accessors generate)
  (slot escape-handler initialize #f accessors generate)
  
  
  (form
    (<install>                                    size: {Dimension 420 639} background: {Color Black alpha: 0.3} layout-type: fill
      (<Border-View>                 name: border border-color: {Color Medium-Gray} border-type: edge style: entry layout-type: fill
        (<Scroller-View>                          style: document hscroll?: #f vscroll?: #f
          (<content~>                             layout-type: fill
            (<Command-Bar-Text-View> name: text   background: #f return-press-handler: {Event-Handler :form on-return} escape-press-handler: {Event-Handler :form on-escape}))))))
  
  
  (method package (command-slash self)
    (let ((world (current-world)))
      (let ((text (locate self 'text)))
        (let ((content (get-string-content text)))
          (cond ((equal? content "/")
                 (set-visible? self #f)
                 (set-string-content text "")
                 (focus-world)
                 (interface-layout world))
                (else
                 (set-visible? self #t)
                 (acquire-focus text)
                 (insert-char text #\/)
                 (interface-layout world)))))))
  
  
  (method (on-return self evt)
    (define (parse-content content)
      (cond ((starts-with? content "/a ")
             (values 'server #f (substring content 3 (string-length content))))
            ((starts-with? content "/y ")
             (values 'yell #f (substring content 3 (string-length content))))
            ((starts-with? content "/s ")
             (values 'say #f (substring content 3 (string-length content))))
            ((starts-with? content "/w ")
             (let ((str (substring content 3 (string-length content))))
               (let ((pos (find str #\space)))
                 (if (not pos)
                     (values 'whisper (get-name (current-me)) str)
                   (let ((recipient (substring str 0 pos))
                         (message (substring str (+ pos 1) (string-length str))))
                     (show-panel-whisper recipient message)
                     (values 'whisper recipient message))))))
            ((starts-with? content "/r ")
             (let ((last-whisperer (get-last-whisperer (current-world)))
                   (message (substring content 3 (string-length content))))
               (if (not last-whisperer)
                   (values 'say #f message)
                 (show-panel-whisper last-whisperer message)
                 (values 'whisper last-whisperer message))))
            ((equal? content "/clear")
             (let ((interface (current-interface)))
               (let ((panel (child interface 'chat)))
                 (clear panel)))
             (values #f #f #f))
            ((starts-with? content "/bp ")
             (let ((y (string->number (substring content 4 (string-length content)))))
               (set-block-pumps (cache-model (current-me)) (vertex 0. y 0.))
               (show-panel-message #f 'command (format "block pumps set to {a}" y))
               (values #f #f #f)))
            ((equal? content "/sbp")
             (let ((block-pumps (get-block-pumps (cache-model (current-me)))))
               (show-panel-message #f 'command (->string (and block-pumps (vertex-y block-pumps))))
               (values #f #f #f)))
            (else
             (values 'say #f content))))
    
    (define (show-panel-whisper recipient message)
      (let ((client (current-client))
            (interface (current-interface)))
        (let ((panel (child interface 'chat))
              (sender (get-character-name client)))
          (show-whisper panel recipient message sender))))
    
    (define (show-panel-message sender kind message)
      (let ((interface (current-interface)))
        (let ((panel (child interface 'chat)))
          (show-message panel sender kind message))))
    
    (if return-handler
        (return-handler self)
      (let ((world (current-world))
            (tier (current-client)))
        (let ((text (locate self 'text)))
          (let ((content (get-string-content text)))
            (if (empty-string? content)
                (hide-command world)
              (receive (kind recipient message) (parse-content content)
                (when kind
                  (client-message tier kind recipient message))
                (set-string-content text "")
                (hide-command world))))))))
  
  
  (method (on-escape self evt)
    (if escape-handler
        (escape-handler self)
      (let ((world (current-world)))
        (hide-command world)))))


;;;
;;;; Command-Bar-Text-View
;;;


(class Command-Bar-Text-View extends World-Text-View
  
  
  (form
    (<install>
      focus-selects-all?: #t
      show-unfocused-selection?: #f
      accepts-returns?: #f))
  
  
  (method override (mouse-insert self object)
    (define (remove-group-markers str)
      (remove-leading #\< (remove-trailing #\> str)))
    
    (nextmethod self (remove-group-markers object)))
  
  
  (method override (new-model self)
    (new Text-Model base-style: {Text-Style Code-Base} left-padding: 1 top-padding: 1))
  
  
  (method override (handle-escape? self)
    #t)))
