;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Command Bar
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2016
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.interface.command jazz


(import (jazz.graphic)
        (jazz.handler)
        (jazz.jml)
        (jazz.text)
        (jazz.ui)
        (world)
        (world.actor)
        (world.autoload)
        (world.interface.inventory)
        (world.interface.pane)
        (world.interface.text)
        (world.interface.tooltip)
        (world.player)
        (world.settings)
        (world.syntax (phase syntax)))


;;;
;;;; Pane
;;;


(class Command-Bar extends World-Pane
  
  
  (form
    (<install>                                  size: {Dimension 420 639} background: {Color Black alpha: 0.3} layout-type: fill
      (<Border-View>                            border-color: {Color Medium-Gray} border-type: edge style: entry layout-type: fill
        (<Scroller-View>                        style: document hscroll?: #f vscroll?: #f
          (<content~>                           layout-type: fill
            (<Command-Bar-Text-View> name: text background: #f return-press-handler: {Event-Handler :form on-return} escape-press-handler: {Event-Handler :form on-escape}))))))
  
  
  (method (command-slash)
    (let ((world (current-world)))
      (let ((text (locate 'text)))
        (let ((content (get-string-content~ text)))
          (cond ((empty-string? content)
                 (set-visible? #t)
                 (acquire-focus~ text)
                 (insert-char~ text #\/)
                 (interface-layout~ world))
                ((equal? content "/")
                 (set-visible? #f)
                 (set-string-content~ text "")
                 (reset-focus~ (get-window~ world))
                 (interface-layout~ world)))))))
  
  
  ;; aec quicky
  (method (on-return evt)
    (define (parse-content content)
      (cond ((starts-with? content "/a ")
             (values 'server #f (substring content 3 (string-length content))))
            ((starts-with? content "/y ")
             (values 'yell #f (substring content 3 (string-length content))))
            ((starts-with? content "/s ")
             (values 'say #f (substring content 3 (string-length content))))
            ((starts-with? content "/w ")
             (let ((str (substring content 3 (string-length content))))
               (let ((pos (find str #\space)))
                 (if (not pos)
                     (values 'whisper (get-name~ (current-me)) str)
                   (values 'whisper (substring str 0 pos) (substring str (+ pos 1) (string-length str)))))))
            (else
             (values 'say #f content))))
    
    (when (eq? zone-kind 'client)
      (let ((world (current-world)))
        (let ((text (locate 'text)))
          (let ((content (get-string-content~ text)))
            (if (empty-string? content)
                (hide-command~ world)
              (receive (kind recipient message) (parse-content content)
                (client-message~ (client-tier) kind recipient message)
                (set-string-content~ text "")
                (hide-command~ world))))))))
  
  
  (method (on-escape evt)
    (let ((world (current-world)))
      (hide-command~ world))))


;;;
;;;; Command-Bar-Text-View
;;;


(class Command-Bar-Text-View extends World-Text-View
  
  
  (form
    (<install>
      focus-selects-all?: #t
      show-unfocused-selection?: #f
      accepts-returns?: #f))
  
  
  (method override (new-model)
    (new Text-Model base-style: {Text-Style Code-Base} left-padding: 1 top-padding: 1))))
