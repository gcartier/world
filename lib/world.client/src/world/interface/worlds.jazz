;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Open
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2016
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.interface.worlds jazz


(import (jazz.graphic)
        (jazz.handler)
        (jazz.io)
        (jazz.jml)
        (jazz.resource)
        (jazz.tree)
        (jazz.ui)
        (world)
        (world.autoload)
        (world.io)
        (world.interface.frame)
        (world.syntax (phase syntax))
        (world.window))


(class World-Open extends World-Frame
  
  
  (form
    (<install>                                     size: {Dimension 420 639} layout-type: border
      (<caption~>                                  title: "Worlds")
      (<content~>                                  layout-type: fill
        (<Scroller-View>                           style: document hscroll?: #t vscroll?: #t
          (<content~>                              layout-type: fill
            (<Tree-Header>                         style: document shown?: #f
              (<content~>
                (<Tree-View>          name: worlds portfolio: :images filled-column: world background: #f double-click-handler: {Event-Handler :form on-double-click} return-press-handler: {Event-Handler :form on-return-press} escape-press-handler: {Event-Handler :form on-escape-press}
                  (<Tree-Node-Column> name: world  title: "World" width: 235 toplevel-controls?: #f)))))))))
  
  
  (method override (conclude initargs)
    (nextmethod initargs)
    (view-worlds))
  
  
  (method override (focus-default)
    (acquire-focus~ (get-tree)))
  
  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method (get-tree)
    (locate 'worlds))
  
  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method (on-double-click evt)
    (open-selected))
  
  
  (method override (on-return-press evt)
    (open-selected))
  
  
  (method override (on-escape-press evt)
    (close))
  
  
  (method (open-selected)
    (let ((world (current-world)))
      (let ((info (get-single-selected-data~ (get-tree))))
        (when info
          (bind (name . dir) info
            (close)
            (open-directory name dir))))))
  
  
  (method (open-directory name dir)
    (with-window-cursor :wait
      (lambda ()
        (let ((zone (current-zone)))
          (let ((world (open-world (new-file~ dir ".world"))))
            (display-message~ world (format "{a}{a}"
                                            (get-title~ world)
                                            (let ((title (get-title~ zone)))
                                              (if (not title)
                                                  ""
                                                (format " / {a}" title))))))))))
  
  
  ;;;
  ;;;; Update
  ;;;
  
  
  (method (view-worlds)
    (let ((tree (get-tree)))
      (remove-every-row~ tree)
      (with-update-locked
        (lambda ()
          (for-each (lambda (info)
                      (bind (name . dir) info
                        (add-row~ tree children: (list (new Tree-Node image: {Image-Resource "Document"} title: name font: {Font Label-User} color: {Color White}))
                          user-data: info)))
                    (sort ci<? (world-directories) key: car))))))))
