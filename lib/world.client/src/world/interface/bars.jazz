;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; World Interface Bars
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2013
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.interface.bars jazz


(import (jazz.io)
        (jazz.jml)
        (jazz.graphic)
        (jazz.graphic.opengl.glew)
        (jazz.library)
        (jazz.literals)
        (jazz.platform)
        (jazz.platform.cairo)
        (jazz.system)
        (jazz.ui)
        (jazz.ui.view)
        (world)
        (world.autoload)
        (world.interface)
        (world.interface.actions)
        (world.interface.pane)
        (world.syntax (phase syntax)))


;;;
;;;; Install
;;;


(definition public (install-bars bars)
  (let ((world (current-world)))
    (let ((interface (get-interface~ world))
          (appl (get-application)))
      (define (install-bar class name orientation location initially-visible?)
        (let ((bar (new class parent: interface name: name visible?: #f))
              (trait (find-role-trait~ appl name)))
          (when trait
            (replace-active-trait~ bar trait))
          (let ((count (length (get-visible-children~ bar))))
            (set-layout-justification~ bar orientation)
            (set-size~ bar (case orientation
                             ((vertical) (new Dimension 22 (+ (* count 22) (* (- count 1) 2))))
                             ((horizontal) (new Dimension (+ (* count 22) (* (- count 1) 2)) 22))
                             (else (error "Invalid orientation: {s}" orientation))))
            (set-location~ bar
              ;; quick hack
              (if (eq? name 'camera)
                  (case (get-current-role~ appl)
                    ((programmer) '(-10 -36))
                    ((user) '(-44 -10)))
                location))
            (when initially-visible?
              (set-visible?~ bar #t)))))
      
      (for-each (lambda (child)
                  (when (is? child World-Actionbar)
                    (close~ child)))
                (get-children~ interface))
      (for-each (lambda (bar)
                  (bind (class name orientation location . rest) bar
                    (let ((initially-visible? (if (null? rest) #t (car rest))))
                      (install-bar class name orientation location initially-visible?))))
                bars)
      (layout-view~ interface))))


;;;
;;;; Find
;;;


(definition public (find-bar name)
  (let ((world (current-world)))
    (find-component~ (get-interface~ world) name)))


(definition public (find-button bar-name name)
  (let ((bar (find-bar bar-name)))
    (and bar (find-component~ bar name)))))
