;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Interface Bars
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is WorldScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2014
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See http://github.com/gcartier/world for details.


(module world.interface.bars jazz


(import (jazz.system)
        (world)
        (world.autoload)
        (world.interface.actions)
        (world.syntax (phase syntax)))


;;;
;;;; Install
;;;


(definition public (install-bars bars)
  (let ((world (current-world)))
    (let ((interface (get-interface~ world))
          (appl (get-application)))
      (define (install-bar class name orientation location initially-visible?)
        (let ((bar (new class parent: interface name: name visible?: #f))
              (trait (find-role-trait~ appl name)))
          (when initially-visible?
            (set-visible?~ bar #t))
          (when trait
            (replace-active-trait~ bar trait))
          (let ((role (get-current-role~ appl))
                (count (length (get-visible-children~ bar))))
            (set-layout-justification~ bar orientation)
            (set-size~ bar (let ((extent (if (= count 0)
                                             0
                                           (+ (* count 22) (* (- count 1) 2)))))
                             (case orientation
                               ((vertical) (new Dimension 22 extent))
                               ((horizontal) (new Dimension extent 22))
                               (else (error "Invalid orientation: {s}" orientation)))))
            (set-location~ bar
              ;; quick hack
              (if (eq? name 'camera)
                  (case role
                    ((programmer) '(-10 -36))
                    ((user designer admin) '(-44 -10)))
                location)))))
      
      (for-each (lambda (child)
                  (when (is? child World-Actionbar)
                    (close~ child)))
                (get-children~ interface))
      (for-each (lambda (bar)
                  (bind (class name orientation location . rest) bar
                    (let ((initially-visible? (if (null? rest) #t (car rest))))
                      (install-bar class name orientation location initially-visible?))))
                bars)
      (layout-view~ interface))))


;;;
;;;; Find
;;;


(definition public (find-bar name)
  (let ((world (current-world)))
    (find-component~ (get-interface~ world) name)))


(definition public (find-button bar-name name)
  (let ((bar (find-bar bar-name)))
    (and bar (find-component~ bar name)))))
