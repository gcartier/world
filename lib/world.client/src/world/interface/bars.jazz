;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Interface Bars
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.interface.bars jazz


(import (jazz.application)
        (world)
        (world.autoload)
        (world.interface.actions)
        (world.settings)
        (world.syntax (phase syntax)))


;;;
;;;; Install
;;;


(definition public (install-bars bars)
  (let ((interface (current-interface))
        (world (current-world)))
    (let ((appl (get-application)))
      (define (install-bar class name orientation location initially-visible?)
        (let ((bar (new class parent: interface name: name visible?: #f))
              (trait (find-role-trait~ appl name)))
          (when initially-visible?
            (set-visible?~ bar #t))
          (when trait
            (replace-active-trait~ bar trait))
          (let ((children (get-visible-children~ bar)))
            (let ((count (length children))
                  (height (bar-height~ bar))
                  (len (apply + (map (case orientation
                                         ((vertical) get-height~)
                                         (else get-width~))
                                     children))))
              (set-layout-justification~ bar orientation)
              (set-size~ bar (let ((extent (if (= count 0)
                                               0
                                             (+ len (* (- count 1) 2)))))
                               (case orientation
                                 ((vertical) (new Dimension height extent))
                                 ((horizontal) (new Dimension extent height))
                                 (else (error "Invalid orientation: {s}" orientation)))))
              (set-location~ bar
                ;; quick hack
                (if (eq? name 'camera)
                    (case current-role
                      ((programmer) '(-10 -36))
                      ((user designer admin) '(-44 -10)))
                  location))))))
      
      (for-each (lambda (child)
                  (when (is? child World-Actionbar)
                    (close~ child)))
                (get-children~ interface))
      (for-each (lambda (bar)
                  (bind (class name orientation location . rest) bar
                    (let ((initially-visible? (if (null? rest) #t (car rest))))
                      (install-bar class name orientation location initially-visible?))))
                bars)
      (layout-view~ interface))))


;;;
;;;; Find
;;;


(definition public (find-bar name)
  (let ((interface (current-interface)))
    (find-component~ interface name)))


(definition public (find-button bar-name name)
  (let ((bar (find-bar bar-name)))
    (and bar (find-component~ bar name)))))
