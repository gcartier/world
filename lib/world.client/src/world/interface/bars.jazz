;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Interface Bars
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.interface.bars jazz


(import (jazz.application)
        (jazz.component)
        (jazz.ui)
        (jazz.view)
        (world)
        (world.context)
        (world.interface)
        (world.interface.actions)
        (world.settings))


;;;
;;;; Install
;;;


(definition public (install-bar class name orientation location (initially-visible? #t))
  (let ((interface (current-interface)))
    (let ((appl (current-application))
          ;; quick try
          (parent (if (eq? orientation 'radial)
                      (child interface 'central-menu)
                    interface)))
      (let ((bar (new class parent: parent name: name visible?: #f))
            (trait (find-role-trait appl name)))
        (when initially-visible?
          (set-visible? bar #t)
          (set-auto-show/hide? bar #t))
        (when trait
          (replace-active-trait bar trait))
        (if (memq? orientation '(central radial))
            (set-layout-insets bar {Rect 50 50 50 50})
          (set-layout-justification bar orientation))
        (if (eq? orientation 'central)
            (set-size bar {Dimension 500 500})
          (set-layout-fit bar 'around))
        (set-location bar location)))))


(definition public (close-bars)
  (let ((interface (current-interface)))
    (for-each (lambda (child)
                (when (is? child World-Actionbar)
                  (close child)))
              (get-children interface))))


(definition public (install-bars bars)
  (close-bars)
  (for-each (lambda (bar)
              (bind (class name orientation location . rest) bar
                (let ((initially-visible? (if (null? rest) #t (car rest))))
                  (install-bar class name orientation location initially-visible?))))
            bars)
  (layout-interface))


;;;
;;;; Find
;;;


(definition public (find-bar name)
  (let ((interface (current-interface)))
    (find-component interface name)))


(definition public (find-button bar-name name)
  (let ((bar (find-bar bar-name)))
    (and bar (find-component bar name)))))
