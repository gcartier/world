;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Interface Bars
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.interface.bars jazz


(import (jazz.application)
        (jazz.component)
        (jazz.ui)
        (jazz.view)
        (world)
        (world.context)
        (world.interface.actions)
        (world.settings))


;;;
;;;; Install
;;;


(definition public (install-bars bars)
  (let ((interface (current-interface))
        (world (current-world)))
    (let ((appl (current-application)))
      (define (install-bar class name orientation location initially-visible?)
        (let ((bar (new class parent: interface name: name visible?: #f))
              (trait (find-role-trait appl name)))
          (when initially-visible?
            (set-visible? bar #t)
            (set-auto-show/hide? bar #t))
          (when trait
            (replace-active-trait bar trait))
          (set-layout-justification bar orientation)
          (set-layout-fit bar 'around)
          (set-location bar
            ;; quick hack
            (if (eq? name 'camera)
                (case current-role
                  ((developer) '(-10 -36))
                  ((user creator designer admin) '(-44 -10)))
              location))))
      
      (for-each (lambda (child)
                  (when (is? child World-Actionbar)
                    (close child)))
                (get-children interface))
      (for-each (lambda (bar)
                  (bind (class name orientation location . rest) bar
                    (let ((initially-visible? (if (null? rest) #t (car rest))))
                      (install-bar class name orientation location initially-visible?))))
                bars)
      (layout-view interface))))


;;;
;;;; Find
;;;


(definition public (find-bar name)
  (let ((interface (current-interface)))
    (find-component interface name)))


(definition public (find-button bar-name name)
  (let ((bar (find-bar bar-name)))
    (and bar (find-component bar name)))))
