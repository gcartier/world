;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; World Showcase
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2013
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.interface.showcase jazz


(import (jazz.graphic.opengl.glew)
        (jazz.system)
        (world)
        (world.autoload)
        (world.camera)
        (world.draw)
        (world.dye)
        (world.dyes)
        (world.entity)
        (world.generate)
        (world.geometry)
        (world.material)
        (world.object)
        (world.opengl)
        (world.syntax (phase syntax))
        (world.texture))


(class World-Showcase extends Object
  
  
  (slot camera initialize #f getter generate)
  (slot target initialize #f getter generate)
  (slot point  initialize #f getter generate)
  (slot moved? initialize #f getter generate)
  
  
  ;;;
  ;;;; Camera
  ;;;
  
  
  (method (size-change size)
    (size-change~ (cache-camera) size))
  
  
  (method (cache-camera)
    (or camera
        (let ((world (current-world))
              (cam (new Camera)))
          (set-width~ cam (get-width~ world))
          (set-height~ cam (get-height~ world))
          (vertex-copy! (get-position~ cam) (vertex 10. 0. 0.))
          (let ((lookat (get-lookat~ cam))
                (sight (vertex -1. 0. 0.))
                (up (vertex 0. 1. 0.)))
            (set-sight~ lookat sight)
            (set-up~ lookat up)
            (set-right~ lookat (cross-normal sight up)))
          (update-target~ cam)
          (setup-camera~ cam)
          (set! camera cam)
          camera)))
  
  
  ;;;
  ;;;; Draw
  ;;;


  (method protected virtual (draw-showcase)
    ;; Preserve
    (glPushMatrix)
    (glDisable GL_LIGHTING)
    
    ;; Reset and transform the matrix
    (glMatrixMode GL_MODELVIEW)
    (glLoadIdentity)
    (setup-camera~ (cache-camera))
    
    ;; Clear depth buffer
    (glClear GL_DEPTH_BUFFER_BIT)
    
    ;; Elements
    (draw-elements)
    
    ;; Target
    (draw-target)
    
    ;; Restore
    (glEnable GL_LIGHTING)
    (glPopMatrix))
  
  
  (method protected virtual (draw-elements)
    )
  
  
  (method protected virtual (draw-target)
    )
  
  
  ;;;
  ;;;; Mouse
  ;;;
  
  
  (method protected virtual (showcase-spacing)
    1.)
  
  
  (method protected virtual (showcase-mouse-down h v)
    (set! point h)
    (set! moved? #f))
  
  
  (method protected virtual (showcase-mouse-move h v)
    (when (and point (not (near? h point 2)))
      (let ((delta (/ (cast <fl> (- h point)) 100.)))
        (let ((camera (cache-camera)))
          (let ((position (get-position~ camera)))
            (vertex+! position position (vertex 0. 0. delta))
            (update-target~ camera))))
      (set! point h)
      (set! moved? #t)))

  
  (method protected virtual (showcase-mouse-up h v)
    (let ((world (current-world)))
      (when (not moved?)
        (receive (position direction) (screen->ray~ camera h v)
          (let ((closest (ray-closest-entity position direction)))
            (when closest
              (bind (poly dist) closest
                (let ((element (get-element~ poly)))
                  (unless (eq? element target)
                    (set! target element)
                    (when (find-setting 'world.selection-sounds? #t)
                      (play-sound-file~ world "sound/user/selectTarget"))))))))
        (set! point h)
        (set! moved? #f))))
  
  
  (method protected virtual (showcase-wheel reversed?)
    (let ((spacing (showcase-spacing))
          (camera (cache-camera)))
      (let ((position (get-position~ camera)))
        (vertex+! position position (vertex 0. 0. (if reversed? spacing (- spacing))))
        (update-target~ camera))))
  
  
  ;;;
  ;;;; Hit
  ;;;
  
  
  (method protected virtual (ray-closest-entity orig <f64vector> dir <f64vector>)
    (let ((entities (showcase-entities)))
      (when entities
        (let ((closest #f)
              (distance #f))
          (loop (for n from 0 below (vector-length entities))
                (let ((entity (vector-ref entities n)))
                  (when (ray-intersects-sphere? orig dir (get-center~ entity) (get-radius~ entity))
                    (for-each-bounding-quad~ entity #f #f
                      (lambda (poly)
                        (let ((cls (ray-closest-triangle~ poly orig dir #f)))
                          (when cls
                            (bind (poly dist) cls
                              (when (or (not distance)
                                        (< dist distance))
                                (set! closest (list poly dist))
                                (set! distance dist))))))))))
          closest))))
  
  
  (method protected virtual (showcase-entities)
    #f)))
