;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; Zone New
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2016
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.interface.templates jazz


(import (jazz.graphic)
        (jazz.handler)
        (jazz.io)
        (jazz.jml)
        (jazz.tree)
        (jazz.ui)
        (world)
        (world.autoload)
        (world.io)
        (world.interface.dialogs)
        (world.interface.frame)
        (world.settings)
        (world.syntax (phase syntax))
        (world.window))


(class Zone-New extends World-Frame
  
  
  (property start-script? initialize #t accessors generate)
  
  
  (form
    (<install>                            size: {Dimension 420 639} layout-type: border
      (<caption~>                         title: "Templates")
      (<content~>                         layout-type: fill
        (<Templates-View> name: templates))))
  
  
  (method override (conclude initargs)
    (nextmethod initargs)
    (let ((tree (get-tree)))
      (when (>= (get-visible-count~ tree) 2)
        (set-single-selection~ tree 1))))
  
  
  (method override (focus-default)
    (acquire-focus~ (get-tree)))
  
  
  (method (get-tree)
    (locate '(templates templates))))


;;;
;;;; Templates-View
;;;


(class Templates-View extends Scroller-View
  
  
  (property kind   initialize 'local accessors generate)
  (property create initialize #f     accessors generate)
  
  
  (form
    (<install>                                    style: document hscroll?: #t vscroll?: #t
      (<content~>                                 layout-type: fill
        (<Tree-Header>                            style: document shown?: #f
          (<content~>
            (<Templates-Tree>     name: templates portfolio: :images filled-column: template background: #f double-click-handler: {Event-Handler :form on-double-click} return-press-handler: {Event-Handler :form on-return-press} escape-press-handler: {Event-Handler :form on-escape-press}
              (<Tree-Node-Column> name: template  title: "Template" width: 235 toplevel-controls?: #f display-images?: #f display-levels?: #f)))))))
  
  
  (method override (conclude initargs)
    (nextmethod initargs)
    (view-templates))
  
  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method (get-tree)
    (locate 'templates))
  
  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method (on-double-click evt)
    (create-selected))
  
  
  (method override (on-return-press evt)
    (create-selected))
  
  
  (method override (on-escape-press evt)
    (close~ (find-ascendant World-Frame)))
  
  
  (method (create-selected)
    (let ((world (current-world)))
      (let ((tree (get-tree)))
        (let ((from (get-single-selected-data~ tree)))
          (when from
            (close~ (find-ascendant World-Frame))
            (let ((from-base (get-name~ (get-parent~ from))))
              (define (find-unique-base)
                (let (iter (id #f))
                  ;; no space between base and id until gambit bug fixed
                  (let ((base (if (not id) from-base (format "{a}{a}" from-base id))))
                    (if (exists?~ (new-zone-file base kind))
                        (iter (+ (or id 1) 1))
                      base))))
              
              (choose-new~ world "New Zone" "Zone:" (find-unique-base)
                (lambda (to)
                  (let ((from-dir (get-parent~ from))
                        (to-dir (get-parent~ to)))
                    (copy-directory~ from-dir to-dir)
                    (call-with-output-file (path-settings (new-file~ to-dir ".instance"))
                      (lambda (output)
                        (format output ";;;========={%}")
                        (format output ";;;  Yownu{%}")
                        (format output ";;;========={%}")
                        (format output ";;;{%}")
                        (format output ";;;; Instance{%}")
                        (format output ";;;{%}")
                        (format output "{%}")
                        (format output "{%}")
                        (format output "(data jazz{%}")
                        (format output "{%}")
                        (format output "{%}")
                        (format output "(version {a}){%}" (present-string~ zone-version))
                        (format output "(import world.data){%}")
                        (format output "{%}")
                        (format output "{%}")
                        (format output "(form{%}")
                        (format output "  (<Instance> template: {s}))){%}" from-dir)))
                    (let ((zone ((or create open-local) to)))
                      (teleport~ zone (find-spawnpoint~ zone))
                      (save-zone~ zone)
                      (save-designer~ zone))))
                kind: kind)))))))
  
  
  ;;;
  ;;;; Update
  ;;;
  
  
  (method (view-templates)
    (let ((world (current-world)))
      (define (collect-templates)
        (let ((templates-directories (get-templates-directories~ world))
              (queue (new-queue)))
          (for-each  (lambda (directory)
                       (when (exists?~ directory)
                         (iterate-directory~ directory
                           (lambda (path kind)
                             (unless (or (filename=? (car path) "welcome")
                                         (filename=? (car path) "tutorial")
                                         (and (not (programmer?))
                                              (or (filename=? (car path) "world")
                                                  (filename=? (car path) "yownu"))))
                               (let ((file (new-file~ directory path)))
                                 (when (extension=? (get-extension~ file) "zone")
                                   (enqueue queue (cons (butlast path) file))))))
                           full?: #f
                           files?: #t
                           directories?: #f)))
                     templates-directories)
          (queue-list queue)))
      
      (define (partition-templates templates)
        (partition templates key: (lambda (info)
                                    (let ((path (car info)))
                                      (if (> (length path) 1)
                                          (car path)
                                        "")))
          test: filename=?))
      
      (let ((tree (get-tree)))
        (remove-every-row~ tree)
        (with-update-locked
          (lambda ()
            (define (add-children father children)
              (for-each (lambda (info)
                          (bind (path . file) info
                            (let ((title (extract-spine (join (if (> (length path) 1) (cdr path) path) "/"))))
                              (add-row~ tree
                                father: father
                                children: (list (new Tree-Node title: title font: {Font Label-User} color: {Color White}))
                                user-data: file))))
                        children))
            
            (for-each (lambda (partition)
                        (bind (title . children) partition
                          (if (empty-string? title)
                              (add-children #f children)
                            (let ((father (add-row~ tree
                                            state: 'expanded
                                            children: (list (new Tree-Node title: title font: {Font Label-User} color: {Color red: 220 green: 0 blue: 0})))))
                              (add-children father children)))))
                      (sort ci<? (partition-templates (collect-templates)) key: car))
            (select-first-data~ tree)))))))


;;;
;;;; Templates-Tree
;;;


(class Templates-Tree extends Tree-View
  
  
  (method override (get-tab-stops)
    (let ((zone (current-zone)))
      (if (welcome?~ zone)
          (tab-stops~ zone)
        (nextmethod))))))
