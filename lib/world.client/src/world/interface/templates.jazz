;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; Zone New
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2016
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.interface.templates jazz


(import (jazz.graphic)
        (jazz.handler)
        (jazz.io)
        (jazz.markup)
        (jazz.outline)
        (jazz.tree)
        (jazz.ui)
        (world)
        (world.autoload)
        (world.context)
        (world.io)
        (world.interface.frame)
        (world.settings)
        (world.syntax (phase syntax)))


(class Zone-New extends World-Frame
  
  
  (property start-script? initialize #t accessors generate)
  
  
  (form
    (<install>                            size: {Dimension 420 639} layout-type: border
      (<caption~>                         title: "Templates")
      (<content~>                         layout-type: fill
        (<Templates-View> name: templates))))
  
  
  (method override (conclude self initargs)
    (nextmethod self initargs)
    (let ((tree (get-tree self)))
      (when (>= (get-visible-count tree) 2)
        (set-single-selection tree 1))))
  
  
  (method override (focus-default self)
    (acquire-focus (get-tree self)))
  
  
  (method package (get-tree self)
    (locate self '(templates templates))))


;;;
;;;; Templates-View
;;;


(class Templates-View extends Scroller-View
  
  
  (property kind   initialize 'local accessors generate)
  (property create initialize #f     accessors generate)
  
  
  (form
    (<install>                                    style: document hscroll?: #t vscroll?: #t
      (<content~>                                 layout-type: fill
        (<Tree-Header>                            style: document shown?: #f
          (<content~>
            (<Templates-Tree>     name: templates portfolio: :images filled-column: template background: #f double-click-handler: {Event-Handler :form on-double-click} return-press-handler: {Event-Handler :form on-return-press} escape-press-handler: {Event-Handler :form on-escape-press}
              (<Tree-Node-Column> name: template  title: "Template" width: 235 toplevel-controls?: #f display-images?: #f display-levels?: #f)))))))
  
  
  (method override (conclude self initargs)
    (nextmethod self initargs)
    (view-templates self))
  
  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method package (get-tree self)
    (locate self 'templates))
  
  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method (on-double-click self evt)
    (create-selected self))
  
  
  (method override (on-return-press self evt)
    (create-selected self))
  
  
  (method override (on-escape-press self evt)
    (close (find-ascendant self World-Frame)))
  
  
  (method package (create-selected self (title: title "Zone") (initial-value: initial-value #f) (kind: kind kind) (kind-name: kind-name #f))
    (let ((tier (current-tier))
          (world (current-world)))
      (let ((tree (get-tree self)))
        (let ((from (get-single-selected-data tree)))
          (when from
            (close (find-ascendant self World-Frame))
            (choose-new world (format "New {a}" title) (format "{a}:" title) (or initial-value (available-zone-base tier from))
              (lambda (base)
                (if create
                    (create from base)
                  (create-zone tier from base)))
              kind: kind
              kind-name: kind-name))))))
  
  
  ;;;
  ;;;; Update
  ;;;
  
  
  (method (view-templates self)
    (let ((tier (current-tier)))
      (define (partition-templates templates)
        (partition templates key: (lambda (info)
                                    (let ((path (car info)))
                                      (if (> (length path) 1)
                                          (car path)
                                        "")))
          test: filename=?))
      
      (let ((tree (get-tree self)))
        (remove-every-row tree)
        (with-update-locked self
          (lambda ()
            (define (add-children father children)
              (for-each (lambda (info)
                          (bind (path . file) info
                            (let ((title (extract-spine (join (if (> (length path) 1) (cdr path) path) "/"))))
                              (add-row tree
                                father: father
                                children: (list (new Tree-Node title: title font: {Font Label-User} color: {Color White}))
                                user-data: file))))
                        children))
            
            (for-each (lambda (partition)
                        (bind (title . children) partition
                          (if (empty-string? title)
                              (add-children #f children)
                            (let ((father (add-row tree
                                            state: 'expanded
                                            children: (list (new Tree-Node title: title font: {Font Label-User} color: {Color red: 220 green: 0 blue: 0})))))
                              (add-children father children)))))
                      (sort ci<? (partition-templates (available-templates tier)) key: car))
            (select-first-data tree)))))))


;;;
;;;; Templates-Tree
;;;


(class Templates-Tree extends Tree-View
  
  
  (method override (get-tab-stops self)
    (let ((zone (current-zone)))
      (if (welcome? zone)
          (tab-stops zone)
        (nextmethod self))))))
