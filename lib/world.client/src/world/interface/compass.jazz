;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Compass Panel
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.interface.compass jazz


(import (jazz.cairo)
        (jazz.component)
        (jazz.figure)
        (jazz.geometry)
        (jazz.graphic)
        (jazz.opengl.texture)
        (jazz.view)
        (gaea.geometry)
        (world)
        (world.autoload)
        (world.client.tier)
        (world.colors)
        (world.context)
        (world.hierarchy)
        (world.interface.panel)
        (world.interface.sheet)
        (world.interface.tooltip)
        (world.player)
        (world.rune)
        (world.zone))


(definition player-r (get-red circler-color))
(definition player-g (get-green circler-color))
(definition player-b (get-blue circler-color))
(definition player-a (get-alpha circler-color))

(definition circler-r (get-red circler-color))
(definition circler-g (get-green circler-color))
(definition circler-b (get-blue circler-color))
(definition circler-a (get-alpha circler-color))

(definition circle-r (get-red group-color))
(definition circle-g (get-green group-color))
(definition circle-b (get-blue group-color))
(definition circle-a (get-alpha group-color))

(definition rune-r (get-red rune-color))
(definition rune-g (get-green rune-color))
(definition rune-b (get-blue rune-color))
(definition rune-a (get-alpha rune-color))

(definition origin-r (get-red origin-color))
(definition origin-g (get-green origin-color))
(definition origin-b (get-blue origin-color))
(definition origin-a (get-alpha origin-color))


;;;
;;;; Player
;;;


(definition protected (layout-compass (top 0))
  (let ((window (current-window))
        (world (current-world)))
    (let ((world-width (get-width window))
          (world-height (get-height window))
          (sheet (get-compass-sheet world)))
      (let ((h (- world-width (get-width sheet) 3))
            (v (- world-height (get-height sheet) top 3)))
        (set-position sheet (new Point h v))))))


(definition protected (draw-compass)
  (let ((world (current-world))
        (interface (current-interface)))
    (let ((view (child interface 'compass))
          (sheet (get-compass-sheet world)))
      (unless (get-uptodate? view)
        (let ((texture (get-texture sheet)))
          (let ((surface (get-surface texture))
                (data (get-data texture)))
            (draw-view view surface data)
            (flush surface)
            (map-texture texture)
            (set-uptodate? view #t))))
      (render-sheet sheet))))


;;;
;;;; Compass
;;;


(definition max-targets <fx>
  256)


(class Compass-Panel extends World-Panel
  
  
  (slot scale     initialize 1.                           accessors generate)
  (slot targets   initialize (make-vector max-targets #f) getter generate)
  (slot xs        initialize (make-f64vector max-targets) getter generate)
  (slot ys        initialize (make-f64vector max-targets) getter generate)
  (slot count     initialize 0                            getter generate)
  (slot uptodate? initialize #f                           accessors generate)
  
  
  ;;;
  ;;;; Drawing
  ;;;


  (method package (draw-view self surface data)
    (let ((zone (current-zone))
          (camera (current-camera))
          (me (current-me)))
      (let ((context (get-context surface))
            (bounds (get-bounds self)))
        (let ((width (cast <fl> (- (rect-width bounds) 10)))
              (height (cast <fl> (- (rect-height bounds) 10))))
          (let ((cx (+ 5. (/ width 2.)))
                (cy (+ 5. (/ height 2.)))
                (radius (- (/ width 2.) 2.))
                (old-count count))
            (clear surface)
            ;; background
            (cairo_arc context cx cy radius 0. PI*2)
            (cairo_clip context)
            (cairo_set_source_rgba context 0. 0. 0. .3)
            (cairo_arc context cx cy radius 0. PI*2)
            (cairo_fill context)
            ;; border
            (cairo_reset_clip context)
            (cairo_set_line_width context 1.5)
            (cairo_set_source_rgba context 1. 1. 1. .5)
            (cairo_arc context cx cy radius 0. PI*2)
            (cairo_stroke context)
            ;; me
            (let ((w 4.)
                  (h 12.))
              (with-preserved-matrix surface
                (lambda ()
                  (cairo_translate context cx cy)
                  (cairo_rotate context (vector-signed-angle (get-sight camera) (vertex 0. 0. 1.) (vertex 0. 1. 0.)))
                  (cairo_move_to context (- w) 0.)
                  (cairo_line_to context 0. h)
                  (cairo_line_to context w 0.)
                  (cairo_line_to context (- w) 0.)
                  (cairo_set_source_rgba context 1. 1. 0. 1.)
                  (cairo_fill context))))
            ;; targets
            (vector-set! targets 0 me)
            (f64vector-set! xs 0 cx)
            (f64vector-set! ys 0 cy)
            (set! count 1)
            (let ((position (get-position me))
                  (sight (get-sight me)))
              (receive (left top) (cairo_user_to_device context 0. 0.)
                (define (draw-target target target-position target-sight target-r target-g target-b target-a)
                  (with-preserved-matrix surface
                    (lambda ()
                      (let ((delta (vertex- target-position position)))
                        (define (draw-player x y near?)
                          (let ((radius 4.5))
                            (cairo_set_source_rgba context target-r target-g target-b target-a)
                            (cairo_arc context x y radius 0. PI*2)
                            (if near?
                                (cairo_fill context)
                              (cairo_stroke context)))
                          (receive (x y) (cairo_user_to_device context x y)
                            (vector-set! targets count target)
                            (f64vector-set! xs count (- x left))
                            (f64vector-set! ys count (- y top))
                            (increase! count)))
                        
                        (let ((dx (vertex-x delta))
                              (dz (vertex-z delta)))
                          (let ((dir (vertex-scalar/ (vertex& dx 0. dz) scale)))
                            (let ((distance (vertex-norm dir)))
                              (let ((near? (<= distance (- radius 3.)))
                                    (angle (vector-signed-angle sight target-sight (vertex 0. 1. 0.))))
                                (let ((dir (rotate-vertex-upon angle (vertex 0. 1. 0.) dir)))
                                  (cairo_translate context cx cy)
                                  (cairo_rotate context angle)
                                  (if near?
                                      (draw-player (vertex-x dir) (vertex-z dir) #t)
                                    (let ((dir (vertex-scalar* (vertex-normalize dir) radius)))
                                      (draw-player (vertex-x dir) (vertex-z dir) #f))))))))))))
                
                ;; draw players
                (for-each (lambda (player)
                            (unless (eq? player me)
                              (let ((position (get-position player))
                                    (sight (get-sight player)))
                                (if (get-disconnected? player)
                                    (draw-target player position sight .5 .5 .5 1.)
                                  (let ((player-info (find-player-info (get-name player))))
                                    (if (and player-info (let ((player-group (get-group player-info))) (and player-group (circle? player-group))))
                                        (draw-target player position sight circler-r circler-g circler-b circler-a)
                                      (draw-target player position sight player-r player-g player-b player-a)))))))
                          (nearest-players self))
                ;; draw circles
                (for-each (lambda (circle)
                            (bind (name position) circle
                              (draw-target circle position (vertex& 0. 0. -1.) circle-r circle-g circle-b circle-a)))
                          (nearest-circles self))
                ;; draw runes
                (for-each (lambda (rune)
                            (let ((position (get-position rune)))
                              (draw-target rune position (vertex& 0. 0. -1.) rune-r rune-g rune-b rune-a)))
                          (nearest-runes self))
                ;; draw origin
                (let ((vista-target (get-vista-target zone)))
                  (let ((origin (or vista-target (vertex 0. 0. 0.))))
                    (draw-target 'origin origin (vertex& 0. 0. -1.) origin-r origin-g origin-b origin-a)))))
            ;; so we do not leak memory
            (when (> old-count count)
              (loop (for n from count below old-count)
                    (vector-set! targets n #f))))))))
  
  
  (method (nearest-players self)
    (let ((zone (current-zone))
          (me (current-me)))
      (let ((position (get-position me)))
        (let ((players (sort < (collect-players zone) key: (lambda (player)
                                                             (vertex-distance (get-position player) position)))))
          (if (<= (length players) max-targets)
              players
            (subseq players 0 max-targets))))))
  
  
  (method (nearest-circles self)
    (let ((client (current-client))
          (queue (new-queue)))
      (table-iterate (get-circles client)
        (lambda (name stone)
          ;; quick hack
          (when stone
            (bind (id position) stone
              (enqueue queue (list name position))))))
      (queue-list queue)))
  
  
  (method (nearest-runes self)
    (let ((zone (current-zone)))
      (get-runes zone)))
  
  
  ;;;
  ;;;; Tooltip
  ;;;
  
  
  (method override (get-tooltip? self)
    #t)
  
  
  (method override (get-tooltip-bounds self pos)
    (let ((nearest (nearest-target self pos)))
      (and nearest
           (nearest-bounds self nearest))))
  
  
  (definition nearest-tolerance
    7)
  
  
  (method (nearest-target self pos)
    (let ((nearest #f))
      (loop (for rank from 0 below count)
            (when (and (in-rect? pos (nearest-bounds self rank))
                       (or (not nearest)
                           (< (distance (nearest-position self rank) pos) (distance (nearest-position self nearest) pos))))
              (set! nearest rank)))
      nearest))
  
  
  (method (nearest-position self rank)
    (let ((h (fxround (f64vector-ref xs rank)))
          (v (fxround (f64vector-ref ys rank))))
      (new Point h v)))
  
  
  (method (nearest-bounds self rank)
    (let ((h (fxround (f64vector-ref xs rank)))
          (v (fxround (f64vector-ref ys rank))))
      (new Rect (- h nearest-tolerance) (- v nearest-tolerance) (+ h nearest-tolerance) (+ v nearest-tolerance))))
  
  
  (method override (tooltip-use-position? self)
    #t)
  
  
  (method override (get-tooltip-context self pos)
    (define (present-target target)
      (cond ((eq? target (current-me)) (present-me))
            ((is? target Player) (present-player target))
            ((is? target Rune) (present-rune target))
            ((eq? target 'origin) (present-origin))
            (else (present-circle target))))
    
    (define (present-me)
      `(<span>
         (<paragraph>
           (<text> color: World-Green "Me"))))
    
    (define (present-player player)
      `(<span>
         (<paragraph>
           (<text> color: World-Green ,(->string (or (get-name player) (anonymous (current-tier))))))))
    
    (define (present-rune rune)
      (let ((path (get-path rune)))
        (let ((title (cond ((not path) "Unassigned Portal")
                           ((eq? path 'start) "Portal to World")
                           (else (format "Portal to {a}" (last path))))))
          `(<span>
             (<paragraph>
               (<text> color: World-Green ,title))))))
    
    (define (present-origin)
      `(<span>
         (<paragraph>
           (<text> color: World-Green "Origin"))))
    
    (define (present-circle circle)
      (bind (name) circle
        `(<span>
           (<paragraph>
             (<text> color: World-Green ,(->string name))))))
    
    (let ((nearest (nearest-target self pos)))
      (and nearest
           (let ((text (present-target (vector-ref targets nearest)))
                 (bounds (nearest-bounds self nearest)))
             (tooltip-context self text bounds padding: 0)))))))
