;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Sign
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2016
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.interface.sign jazz


(import (jazz.action)
        (jazz.component)
        (jazz.graphic)
        (jazz.handler)
        (jazz.jml)
        (jazz.text)
        (jazz.ui)
        (jazz.view)
        (world)
        (world.interface.dialogs)
        (world.interface.text))


(definition public (open-sign (size: size #f) (initial-value: initial-value #f) (action: action #f))
  (define (ok-action view)
    (let ((texts (get-modal-result~ view)))
      (close-dialog view)
      (when action
        (action texts))))
    
  (define (cancel-action view)
    (close-dialog view))
  
  (define (close-dialog view)
    (close~ (find-ascendant~ view World-Dialog)))
  
  (let ((view (new World-Sign-Request)))
    (let ((text (locate~ view 'text1)))
      (unless initial-value
        (set! initial-value '("" "" "" "")))
      (loop (for i from 1 to 4)
            (set-string-content~ (locate~ view (symbol-append 'text (->string i))) (list-ref initial-value (- i 1))))
      (select-all~ text)
      (set-action-handler~ (locate~ view 'ok) (new Event-Handler execute: (lambda (evt) (ok-action view))))
      (set-action-handler~ (locate~ view 'cancel) (new Event-Handler execute: (lambda (evt) (cancel-action view))))
      (prog1 (open-dialog view title: "Edit SignPost" size: size)
        (acquire-focus~ text)))))


(definition (symbol-append symbol string)
  (string->symbol (string-append (symbol->string symbol) string)))


(class World-Sign-Request extends View
  
  
  (slot selected-line initialize 1 getter generate)

  (form
    (<install>                                    size: {Dimension 322 120}
      (<Layout-View>               name: layout1 position: {Point 10 0} size: {Dimension 294 35} layout-type: border layout-padding: 10
        (<Label-View>              name: prefix1  title: "Line 1" location: west font: {Font Label antialias: none} color: {Color red: .809 green: .701 blue: .263} justification: (head -19) auto-size?: width)
        (<Layout-View>                            location: center layout-type: border
          (<Border-View>                          location: center border-type: edge style: entry
            (<Scroller-View>                      hscroll?: #f vscroll?: #f
              (<content~>                         layout-type: fill
                (<World-Text-View> name: text1    accepts-returns?: #f left-padding: 1 top-padding: 1 background: #f return-press-handler: {Event-Handler :form on-return-press} escape-press-handler: {Event-Handler :host on-cancel}))))
          (<Label-View>            name: message1 size: {Dimension 100 16} location: south font: {Font Label} color: {Color Entry-Border} justification: center)))
      (<Layout-View>               name: layout2  position: {Point 10 22} size: {Dimension 294 35} layout-type: border layout-padding: 10
        (<Label-View>              name: prefix2  title: "Line 2" location: west font: {Font Label antialias: none} color: {Color red: .809 green: .701 blue: .263} justification: (head -19) auto-size?: width)
        (<Layout-View>                            location: center layout-type: border
          (<Border-View>                          location: center border-type: edge style: entry
            (<Scroller-View>                      hscroll?: #f vscroll?: #f
              (<content~>                         layout-type: fill
                (<World-Text-View> name: text2    accepts-returns?: #f left-padding: 1 top-padding: 1 background: #f return-press-handler: {Event-Handler :form on-return-press} escape-press-handler: {Event-Handler :host on-cancel}))))
          (<Label-View>            name: message2 size: {Dimension 100 16} location: south font: {Font Label} color: {Color Entry-Border} justification: center)))
      (<Layout-View>               name: layout3  position: {Point 10 44} size: {Dimension 294 35} layout-type: border layout-padding: 10
        (<Label-View>              name: prefix3  title: "Line 3" location: west font: {Font Label antialias: none} color: {Color red: .809 green: .701 blue: .263} justification: (head -19) auto-size?: width)
        (<Layout-View>                            location: center layout-type: border
          (<Border-View>                          location: center border-type: edge style: entry
            (<Scroller-View>                      hscroll?: #f vscroll?: #f
              (<content~>                         layout-type: fill
                (<World-Text-View> name: text3    accepts-returns?: #f left-padding: 1 top-padding: 1 background: #f return-press-handler: {Event-Handler :form on-return-press} escape-press-handler: {Event-Handler :host on-cancel}))))
          (<Label-View>            name: message3 size: {Dimension 100 16} location: south font: {Font Label} color: {Color Entry-Border} justification: center)))
      (<Layout-View>               name: layout4  position: {Point 10 66} size: {Dimension 294 35} layout-type: border layout-padding: 10
        (<Label-View>              name: prefix4  title: "Line 4" location: west font: {Font Label antialias: none} color: {Color red: .809 green: .701 blue: .263} justification: (head -19) auto-size?: width)
        (<Layout-View>                            location: center layout-type: border
          (<Border-View>                          location: center border-type: edge style: entry
            (<Scroller-View>                      hscroll?: #f vscroll?: #f
              (<content~>                         layout-type: fill
                (<World-Text-View> name: text4    accepts-returns?: #f left-padding: 1 top-padding: 1 background: #f return-press-handler: {Event-Handler :form on-return-press} escape-press-handler: {Event-Handler :host on-cancel}))))
          (<Label-View>            name: message4 size: {Dimension 100 16} location: south font: {Font Label} color: {Color Entry-Border} justification: center)))
      (<Push-Button>               name: ok       title: "OK" position: {Point 80 95} size: {Dimension 80 24} default?: #t)
      (<Push-Button>               name: cancel   title: "Cancel" position: {Point 167 95} size: {Dimension 80 24})))

  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method public (get-prefix line)
    (get-title~ (locate (symbol-append 'prefix (->string line)))))
  
  
  (method public (set-prefix line value)
    (set-title~ (locate (symbol-append 'prefix (->string line))) value)
    (layout-view~ (locate (symbol-append 'layout (->string line)))))
  
  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method override (on-return-press evt)
    (let ((ok (locate 'ok)))
      (when (get-enabled?~ ok)
        (process-action~ ok ok))))
  
  
  (method (on-sign-up evt)
    (set! selected-line (max 1 (- selected-line 1)))
    (acquire-focus~ (locate (symbol-append 'text selected-line))))
  
  
  (method (on-sign-down evt)
    (set! selected-line (min 4 (+ selected-line 1)))
    (acquire-focus~ (locate (symbol-append 'text selected-line))))
      

  ;;;
  ;;;; Modal
  ;;;

  
  (method override (get-modal-result)
    (list (get-string-content~ (locate 'text1))
          (get-string-content~ (locate 'text2))
          (get-string-content~ (locate 'text3))
          (get-string-content~ (locate 'text4))))))
