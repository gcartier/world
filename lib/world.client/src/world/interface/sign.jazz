;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Sign
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2016
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.interface.sign jazz


(import (jazz.action)
        (jazz.component)
        (jazz.graphic)
        (jazz.handler)
        (jazz.jml)
        (jazz.text)
        (jazz.ui)
        (jazz.view)
        (world)
        (world.interface.dialogs)
        (world.interface.text))


(definition public (open-sign (size: size #f) (initial-value: initial-value #f) (action: action #f))
  (define (ok-action view)
    (let ((texts (get-modal-result~ view)))
      (close-dialog view)
      (when action
        (action texts))))
    
  (define (cancel-action view)
    (close-dialog view))
  
  (define (close-dialog view)
    (close~ (find-ascendant~ view World-Dialog)))
  
  (let ((view (new World-Sign-Request)))
    (when initial-value
      (loop (for i from 1 to 4)
            (set-string-content~ (get-text~ view i) (list-ref initial-value (- i 1)))))
    (let ((text (get-text~ view 1)))
      (select-all~ text)
      (set-action-handler~ (locate~ view 'ok) (new Event-Handler execute: (lambda (evt) (ok-action view))))
      (set-action-handler~ (locate~ view 'cancel) (new Event-Handler execute: (lambda (evt) (cancel-action view))))
      (prog1 (open-dialog view title: "Edit SignPost" size: size)
        (acquire-focus~ text)))))


;;;
;;;; Request
;;;


(class World-Sign-Request extends View
  
  
  (slot selected-line initialize 1 getter generate)

  
  (form
    (<install>                    size: {Dimension 322 135}
      (<World-Sign>  name: 1      position: {Point 10 0}
        (<label~>                 title: "Line 1"))
      (<World-Sign>  name: 2      position: {Point 10 22}
        (<label~>                 title: "Line 2"))
      (<World-Sign>  name: 3      position: {Point 10 44}
        (<label~>                 title: "Line 3"))
      (<World-Sign>  name: 4      position: {Point 10 66}
        (<label~>                 title: "Line 4"))
      (<Push-Button> name: ok     title: "OK" position: {Point 80 110} size: {Dimension 80 24} default?: #t)
      (<Push-Button> name: cancel title: "Cancel" position: {Point 167 110} size: {Dimension 80 24})))

  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method protected (get-text no)
    (locate (list no 'text 'text)))
      

  ;;;
  ;;;; Tabs
  ;;;
  
  
  (method override (get-tab-stops)
    (list (get-text 1)
          (get-text 2)
          (get-text 3)
          (get-text 4)))
      

  ;;;
  ;;;; Modal
  ;;;

  
  (method override (get-modal-result)
    (list (get-string-content~ (get-text 1))
          (get-string-content~ (get-text 2))
          (get-string-content~ (get-text 3))
          (get-string-content~ (get-text 4)))))


;;;
;;;; Sign
;;;


(class World-Sign extends Layout-View


  (form
    (<install>                        size: {Dimension 294 19} layout-type: border layout-padding: 10
      (<World-Sign-Label> name: label)
      (<World-Sign-Text>  name: text))))


;;;
;;;; Label
;;;


(class World-Sign-Label extends Label-View
  
  
  (form
    (<install> location: west font: {Font Label antialias: none} color: {Color red: .809 green: .701 blue: .263} justification: head auto-size?: width)))


;;;
;;;; Text
;;;


(class World-Sign-Text extends Border-View
  
  
  (form
    (<install>                          location: center border-type: edge style: entry
      (<Scroller-View>                  hscroll?: #f vscroll?: #f
        (<content~>                     layout-type: fill
          (<World-Text-View> name: text accepts-returns?: #f left-padding: 1 top-padding: 1 background: #f show-unfocused-selection?: #f focus-selects-all?: #t return-press-handler: {Event-Handler :form on-return-press} escape-press-handler: {Event-Handler :form on-escape-press})))))
  
  
  (method override (on-return-press evt)
    (let ((ok (locate~ (find-ascendant World-Sign-Request) 'ok)))
      (when (get-enabled?~ ok)
        (process-action~ ok ok))))
  
  
  (method override (on-escape-press evt)
    (let ((cancel (locate~ (find-ascendant World-Sign-Request) 'cancel)))
      (when (get-enabled?~ cancel)
        (process-action~ cancel cancel))))))
