;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Crafting
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2016
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.interface.crafting jazz


(import (jazz.action)
        (jazz.component)
        (jazz.graphic)
        (jazz.handler)
        (jazz.jml)
        (jazz.text)
        (jazz.ui)
        (jazz.view)
        (world)
        (world.interface)
        (world.interface.dialogs)
        (world.interface.inventory)
        (world.interface.pane)
        (world.interface.text)
        (world.generation)
        (world.generation.building)
        (world.syntax (phase syntax)))


;;;
;;;; Pane
;;;


(class Crafting-Pane extends World-Pane implements Inventory-Container
  
  
  (form
    (<install>                    background: {Color Black alpha: .3}
      (<Border-View>              size: {Dimension 550 300} border-color: {Color Dark} border-type: solid style: entry
        (<Layout-View>            name: layout layout-type: border
          (<Crafting-Filter>      name: inventory position: {Point 0 0} size: {Dimension 550 80})
          (<Crafting-Library>     name: library position: {Point 42 150} size: {Dimension 464 100})
          (<Push-Button>          name: up title: "up"   position: {Point 247 110} size: {Dimension 50 30} action-handler: {Event-Handler :form on-recipes-up})
          (<Push-Button>          name: up title: "down" position: {Point 247 264} size: {Dimension 50 30} action-handler: {Event-Handler :form on-recipes-down})))))
  
  
  (method (on-recipes-up evt)
    (selection-up~ (locate 'library)))
  
  
  (method (on-recipes-down evt)
    (selection-down~ (locate 'library)))
  
  
  (method override (iterate-panes proc)
    (proc (locate 'inventory))
    (proc (locate 'library)))
  
  
  (method override (entity-slot-rank slot)
    (get-rank~ slot)))


;;;
;;;; Filter
;;;


(class Crafting-Filter extends Inventory-Pane
  
  
  (form
    (<install>
      (<Label-View>  title: "Filters:" position: {Point 90 30} size: {Dimension 60 20} font: {Font Label point-size: 18} color: {Color Entry-Border} justification: center)))
  
  
  (method override (conclude initargs)
    (loop (for x from 0 below 3)
          (table-set! slot-table x (new Inventory-Slot name: x parent: self position: (new Point (+ 180 (* x 70)) 16) rank: (+ 60 x))))))


;;;
;;;; Slot
;;;


(class Recipe-Slot extends Inventory-Slot
  
  
  (slot recipe initialize #f getter generate)
  
  
  (form
    (<install>   size: {Dimension 48 48} tooltip?: #t draggable?: #f))
  
  
  (method override (allow-start-drag? pos)
    #f)
  
  
  (method override (mouse-down evt)
    )
  
  
  (method override (current-drop drag-drop pos)
    #f)
  
  
  (method (set-recipe new-recipe)
    (if new-recipe
        (let ((block/item (name->block/item (car (get-output~ new-recipe)))))
          (set! id (get-id~ block/item))
          (set! durability (if (is? block/item Block) (get-variant-id~ block/item) (get-durability~ block/item)))
          (when recipe
            (reset-inventory-block self)))
      (set! id #f)
      (set! durability #f))
    (set! recipe~self new-recipe)))


;;;
;;;; Library
;;;


(class Crafting-Library extends Inventory-Pane
  
  
  (slot slot-index      <fx>    initialize 0            getter explicit)
  (slot selection-index <fx>    initialize 0            getter explicit)
  
  
  (method override (conclude initargs)
    (nextmethod initargs)
    (loop (for i from 0 below 2)
          (loop (for j from 0 below 9)
                (add-slot (new Recipe-Slot parent: self position: (new Point (* j 52) (* i 52)) size: (new Dimension 48 48) rank: (+ 36 (* i 9) j) count: 1))))
    (change-slots))
  
  
  (method override (iterate-panes proc)
    (proc self))
  
  
  (method override (entity-slot-rank slot)
    (get-rank~ slot))
  
  
  (method (selection-up)
    (when (> selection-index 0)
      (decrease! selection-index)
      (change-slots)))
  
  (method (selection-down)
    (when (< (* (+ selection-index 1) 9) (table-length recipes))
      (increase! selection-index)
      (change-slots)))
  
  
  (method (add-slot slot)
    (table-set! slot-table slot-index slot)
    (increase! slot-index))
  
  
  (method (change-slots)
    (iterate-table slot-table
      (lambda (index slot)
        (set-recipe~ slot (table-ref recipes (+ index (* selection-index 9)) #f)))))
  
  
  (method override (draw surface context)
    ))


(definition protected (name->block/item name)
  (or (name->block name) (name->item name)))


;;;
;;;; Recipe
;;;


(class Crafting-Recipe extends Object
  
  
  (slot inputs  <list> initialize '() getter generate)
  (slot output  <pair> initialize '() getter generate)
  
  
  (method override (initialize inputs output)
    (set! inputs~self inputs)
    (set! output~self output)))


;;;
;;;; Recipes
;;;


(definition protected recipes <table>
  (make-table))

(definition protected recipes-index <fx>
  0)


(definition protected (add-recipe recipe)
  (table-set! recipes recipes-index recipe)
  (increase! recipes-index))


(definition protected (register-crafting-recipe inputs <list> output <pair>)
  (add-recipe (new Crafting-Recipe inputs output)))


(define-crafting-recipe '((OakWood . 1)) '(Torch . 4))
(define-crafting-recipe '((SpruceWood . 1)) '(SprucePlank . 4))
(define-crafting-recipe '((BirchWood . 1)) '(BirchPlank . 4))
(define-crafting-recipe '((JungleWood . 1)) '(JunglePlank . 4))
(define-crafting-recipe '((OakWood . 2)) '(DiamondBlock . 4))
(define-crafting-recipe '((SpruceWood . 3)) '(GoldBlock . 5))
(define-crafting-recipe '((BirchWood . 1)) '(IronBlock . 1))
(define-crafting-recipe '((JungleWood . 15)) '(EmeraldBlock . 42))
(define-crafting-recipe '((Cobblestone . 4) (OakWood . 3) (RedstoneWire . 1) (IronDoorBlock 1)) '(Piston 1))
(define-crafting-recipe '((Diamond . 2) (Stick . 1)) '(GoldOre . 1)))
