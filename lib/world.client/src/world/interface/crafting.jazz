;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Crafting
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2016
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.interface.crafting jazz


(import (jazz.action)
        (jazz.component)
        (jazz.graphic)
        (jazz.handler)
        (jazz.jml)
        (jazz.text)
        (jazz.ui)
        (jazz.view)
        (world)
        (world.interface.dialogs)
        (world.interface.inventory)
        (world.interface.pane)
        (world.interface.text)
        (world.syntax (phase syntax)))



;;;
;;;; Crafting window
;;;



(class Crafting-Pane extends World-Pane implements Inventory-Container
  
  (form
    (<install>                    background: {Color Black alpha: .3}
      (<Border-View>              size: {Dimension 550 300} border-color: {Color Dark} border-type: solid style: entry
        (<Layout-View>            layout-type: border
          (<Crafting-Inventory>   name: inventory position: {Point 0 0} size: {Dimension 550 300}
            (<Inventory-Slot>     name: slot1 position: {Point 100 10} rank: 42))
          (<Crafting-Library>     name: library position: {Point 0 0} size: {Dimension 550 300}
            (<Recipe-Slot>        name: recipe1 position: {Point 10 100}))))))
  
  
  (method override (get-inventory-pane)
    (let ((pane (locate 'inventory)))
      (when (get-setup?~ pane)
        (setup-inventory~ pane)
        (set-setup?~ pane #f))
      pane)))



(class Crafting-Inventory extends Inventory-Pane
  
  
  (slot setup? initialize #t accessors generate)
        
  
  (method override (setup-inventory)
    (set! slot-table (make-table))
    (loop (for x from 0 below (length children))
          (table-set! slot-table x (list-ref children x)))))



(class Crafting-Recipe extends Object
  
  
  (slot inputs  <list> initialize '() getter generate)
  (slot output <list> initialize '() getter generate)
  (slot name                          getter generate)
  
  
  (method override (initialize inputs outputs)
    (set! inputs~self inputs)
    (set! outputs~self outputs)
    (set! name~self (get-name~ (world.generation:id->block (car output))))))



(class Recipe-Slot extends Inventory-Slot
  
  
  (property recipe initialize #f getter generate)
  
  
  (form
    (<install>   size: {Dimension 48 48} tooltip?: #t))
  
  
  (method override (draw surface context)
    (let ((bounds (get-bounds)))
      (frame-partial-rect~ surface bounds '(left top) {Color Entry-Border})
      (frame-partial-rect~ surface bounds '(right bottom) {Color Entry-Border alpha: .6}))))



(class Crafting-Library extends World-Pane
  
  
  (slot recipes <table> initialize (make-table) getter generate)
  
  
  (method (add-recipe recipe)
    (table-set! recipes (get-name~ recipe) recipe))) 


(definition crafting-library
  (new Crafting-Library))


(definition protected (register-crafting-recipe input <list> output <list>)
  ))
