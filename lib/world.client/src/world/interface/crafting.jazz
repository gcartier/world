;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Crafting
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2016
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s): Edouard Hebert


(module world.interface.crafting jazz


(import (jazz.graphic)
        (jazz.handler)
        (jazz.jml)
        (jazz.ui)
        (world)
        (world.context)
        (world.generation.block)
        (world.interface)
        (world.interface.inventory)
        (world.interface.panel)
        (world.interface.tooltip)
        (world.syntax (phase syntax)))


;;;
;;;; Panel
;;;


(class Crafting-Panel extends World-Panel implements Inventory-Container
  
  
  (form
    (<install>                    background: {Color Black alpha: .2}
      (<Border-View>              size: {Dimension 550 300} border-color: {Color Dark} border-type: solid style: entry
        (<Layout-View>            name: layout layout-type: border
          (<Crafting-Filter>      name: inventory position: {Point 0 0} size: {Dimension 550 80})
          (<Crafting-Library>     name: library position: {Point 42 150} size: {Dimension 464 100})
          (<Push-Button>          name: up title: "up"   position: {Point 247 110} size: {Dimension 50 30} action-handler: {Event-Handler :form on-recipes-up})
          (<Push-Button>          name: up title: "down" position: {Point 247 264} size: {Dimension 50 30} action-handler: {Event-Handler :form on-recipes-down})))))
  
  
  (method override (set-visible? self flag <bool>)
    (when flag
      (invalidate-recipes self))
    (nextmethod self flag))
  
  
  (method package (invalidate-recipes self)
    (when visible?
      (iterate-table recipes
        (lambda (index recipe)
          (set-verified? recipe #f)))
      (verify-recipes (locate self 'library) #t)))
  
  
  (method (on-recipes-up self evt)
    (selection-up (locate self 'library)))
  
  
  (method (on-recipes-down self evt)
    (selection-down (locate self 'library)))
  
  
  (method override (iterate-panels self proc)
    (proc (locate self 'inventory))
    (proc (locate self 'library)))
  
  
  (method override (entity-slot-rank self slot)
    (get-rank slot)))


;;;
;;;; Filter
;;;


(class Crafting-Filter extends Inventory-Panel
  
  
  (form
    (<install>
      (<Label-View>  title: "Filters:" position: {Point 90 30} size: {Dimension 60 20} font: {Font Label point-size: 18} color: {Color Entry-Border} justification: center)))
  
  
  (method override (conclude self initargs)
    (loop (for x from 0 below 3)
          (table-set! slot-table x (new Filter-Slot name: x parent: self position: (new Point (+ 180 (* x 70)) 16) rank: (+ 60 x) count: 1))))
  
  
  (method package (update-filter self)
    (let ((filters (new-queue)))
      (define (add-filter name)
        (unless (memq? name (queue-list filters))
          (enqueue filters name)))
      
      (iterate-table slot-table
        (lambda (index slot)
          (let ((id (get-id slot)))
            (when id
              (add-filter (if (< id 256)
                                   (get-name (id/durability->block id (get-durability slot)))
                                 (get-name (id->item id))))))))
      (filter-slots (locate (find-ascendant self Crafting-Panel) 'library) (queue-list filters)))))
              


(class Filter-Slot extends Inventory-Slot
  
  
  (method override (set-count self value <fx>)
    )
  
  
  (method override (double-click self evt)
    (set! id #f)
    (set! durability #f)
    (update-filter parent)))


;;;
;;;; Slot
;;;


(class Recipe-Slot extends Inventory-Slot
  
  
  (slot recipe initialize #f getter generate)
  
  
  (form
    (<install>   size: {Dimension 48 48} background: {Color Black alpha: 0.} tooltip?: #t draggable?: #f))
  
  
  (method package (set-recipe self new-recipe)
    (if new-recipe
        (let ((block/item (name->block/item (car (get-output new-recipe)))))
          (set! id (if (is? block/item Block) (get-id block/item) (get-id block/item)))
          (set! durability (if (is? block/item Block) (get-variant-id block/item) (get-durability block/item)))
          (set! count (cdr (get-output new-recipe)))
          (when recipe
            (reset-inventory-block self)))
      (set! id #f)
      (set! durability #f))
    (set! self.recipe new-recipe))
  
  
  (method override (allow-start-drag? self pos)
    #f)
  
  
  (method override (mouse-down self evt)
    (verify-crafting self))
  
  
  (method (verify-crafting self)
    (when (get-craftable? recipe)
      (let ((interface (current-interface)))
        (let ((belt (child interface 'belt))
              (bag (child interface 'bag))
              (items (get-inventory-items parent))
              (input-slots (make-table)))
          (define (rank->inventory-slot rank)
            (if (< rank 9)
                (rank->slot belt rank)
              (rank->slot bag rank)))
          
          (for-each (lambda (input)
                      (let ((amount (cdr input)))
                        (let ((slot-ranks (get-indexes (table-ref items (car input)))))
                          (let (iter (index 0))
                            (let ((slot (rank->inventory-slot (list-ref slot-ranks index))))
                              (table-set! input-slots slot amount)
                              (decrease! amount (get-count slot)))
                            (unless (<= amount 0)
                              (iter (+ index 1)))))))
                    (get-inputs recipe))
          (process-crafting self input-slots)))))
  
  
  (method (process-crafting self input-slots)
    (iterate-table input-slots
      (lambda (slot amount)
        (decrease-count slot amount)))
    (deposit-inventory (name->block/item (car (get-output recipe))) count: (cdr (get-output recipe)) notify-changed?: #f)
    (save-inventory)
    (inventory-changed))
  
  
  (method override (current-drop self drag-drop pos)
    #f)
  
  
  (method override (get-tooltip-context self pos)
    (let ((items (get-inventory-items parent)))
      (define (present-text)
        (define (present-item item)
          (let ((missing-state (if (memq? (car item) (get-missing-items recipe)) (if (table-ref items (car item) #f) 'partial 'total) 'none)))
            `(<paragraph>
               (<text> "   ")
               (<text> color: ,(case missing-state ((partial) 'World-Orange) ((total) 'World-Red) ((none) 'World-Green)) ,(->string (car item)))
               (<text> " x ")
               (<text> ,(string-append (->string (cdr item)) (if (eq? missing-state 'partial) (string-append " (missing " (->string (- (cdr item) (get-count (table-ref items (car item))))) ")") ""))))))
        
        `(<span>
           (<paragraph>
             (<text> "Requires: "))
           ,@(map (lambda (input)
                    (present-item input))
                  (get-inputs recipe))
           (<paragraph>
             (<text> "Makes: "))
           (<paragraph>
             (<text> "   ")
             (<text> color: World-Yellow ,(->string (car (get-output recipe))))
             (<text> " x ")
             (<text> ,(->string (cdr (get-output recipe)))))))
      
      (and recipe
           (let ((text (present-text))
                 (bounds (get-tooltip-bounds self pos)))
             (tooltip-context self text bounds))))))


;;;
;;;; Library
;;;


(class Crafting-Library extends Inventory-Panel
  
  
  (slot slot-index       <fx>     initialize 0            getter explicit)
  (slot selection-index  <fx>     initialize 0            getter explicit)
  (slot inventory-items  <table>  initialize (make-table) getter generate)
  (slot filtered-recipes <table+> initialize #f           getter explicit)
  
  
  (method override (conclude self initargs)
    (nextmethod self initargs)
    (loop (for i from 0 below 2)
          (loop (for j from 0 below 9)
                (add-slot self (new Recipe-Slot parent: self position: (new Point (* j 52) (* i 52)) size: (new Dimension 48 48) rank: (+ 36 (* i 9) j) count: 1))))
    (change-slots self))
  
  
  (method override (iterate-panels self proc)
    (proc self))
  
  
  (method override (entity-slot-rank self slot)
    (get-rank slot))
  
  
  (method package (selection-up self)
    (when (> selection-index 0)
      (decrease! selection-index)
      (change-slots self)
      (verify-recipes self #f))
    (invalidate-view self))
  
  (method package (selection-down self)
    (when (< (* (+ selection-index 1) 9) (table-length recipes))
      (increase! selection-index)
      (change-slots self)
      (verify-recipes self #f))
    (invalidate-view self))
  
  
  (method (add-slot self slot)
    (table-set! slot-table slot-index slot)
    (increase! slot-index))
  
  
  (method (change-slots self)
    (iterate-table slot-table
      (lambda (index slot)
        (set-recipe slot (table-ref (or filtered-recipes recipes) (+ index (* selection-index 9)) #f))))
    (invalidate-view self))
  
  
  (method package (filter-slots self filters)
    (set! selection-index 0)
    (if (null? filters)
        (set! filtered-recipes #f)
      (let ((filtered-recipes (make-table)))
        (define (sorted-recipes)
          (let ((indexed (make-table))
                (sorted (sort nu<? (table->list filtered-recipes) key: (lambda (element)
                                                                         (let ((recipe (cdr element))
                                                                               (no (length filters)))
                                                                           (let ((output (car (get-output recipe))))
                                                                             (list
                                                                               (if (eq? (car filters) output) 0 1)
                                                                               (if (and (> no 1) (eq? (cadr filters) output)) 0 1)
                                                                               (if (and (> no 2) (eq? (caddr filters) output)) 0 1)
                                                                               (car element))))))))
            (loop (for x from 0 below (length sorted))
                  (table-set! indexed x (cdr (list-ref sorted x))))
            indexed))
        
        (define (recipe-filter recipe-names)
          (every? (lambda (name) (memq? name recipe-names)) filters))
        
        (iterate-table recipes
          (lambda (index recipe)
            (when (recipe-filter (get-collected-names recipe))
              (table-set! filtered-recipes index recipe))))
        (set! self.filtered-recipes (sorted-recipes))))
    (change-slots self))
  
  
  (method (collect-inventory self)
    (let ((items (make-table))
          (interface (current-interface)))
      (let ((bag (child interface 'bag))
            (belt (child interface 'belt)))
        (define (collect-panel panel)
          (for-each (lambda (slot)
                      (let ((id (get-id slot)))
                        (when id
                          (let ((name (if (< id 256) (get-name (id/durability->block id (get-durability slot))) (get-name (id->item id)))))
                            (let ((indexer (table-ref items name #f)))
                              (if (not indexer)
                                  (table-set! items name (new Item-Indexer (get-count slot) (get-rank slot)))
                                (increase-count indexer (get-count slot))
                                (add-slot-index indexer (get-rank slot))))))))
                    (get-children panel)))
        
        (collect-panel belt)
        (collect-panel bag)
        (set! inventory-items items))))
  
  
  (method package (verify-recipes self collect?)
    (when collect?
      (collect-inventory self))
    (iterate-table slot-table
      (lambda (index slot)
        (let ((recipe (get-recipe slot)))
          (when recipe
            (verify-recipe recipe inventory-items))))))
  
  
  (method override (draw self surface context)
    ))


(definition protected (name->block/item name)
  (or (name->block name) (name->item name)))


;;;
;;;; Indexer
;;;


(class Item-Indexer extends Object
  
  
  (slot count   <fx>    initialize 0           getter generate)
  (slot indexes         initialize (new-queue) getter explicit)
  
  
  (method override (initialize self count index)
    (set! self.count count)
    (enqueue indexes index))
  
  
  (method package (add-slot-index self index)
    (enqueue indexes index))
  
  
  (method package (get-indexes self)
    (queue-list indexes))
  
  
  (method package (increase-count self delta)
    (increase! count delta)))


;;;
;;;; Recipe
;;;


(class Crafting-Recipe extends Object
  
  
  (slot inputs          <list> initialize '() getter generate)
  (slot output          <pair> initialize '() getter generate)
  (slot collected-names <list> initialize '() getter generate)
  (slot missing-items   <list> initialize '() getter generate)
  (slot craftable?      <bool> initialize #f  getter generate)
  (slot verified?       <bool> initialize #f  accessors generate)
  
  
  (method override (initialize self inputs output)
    (set! self.inputs inputs)
    (set! self.output output)
    (collect-names self))
  
  
  (method (collect-names self)
    (let ((names (new-queue)))
      (for-each (lambda (input)
                  (enqueue names (car input)))
                inputs)
      (enqueue names (car output))
      (set! collected-names (queue-list names))))
  
  
  (method (set-missing-items self missing)
    (set! missing-items missing)
    (set! craftable? (null? missing-items)))
  
  
  (method package (verify-recipe self items)
    (unless verified?
      (let ((missing (new-queue)))
        (for-each (lambda (input)
                    (let ((indexer (table-ref items (car input) #f)))
                      (when (or (not indexer) (< (get-count indexer) (cdr input)))
                        (enqueue missing (car input)))))
                  inputs)
        (set-missing-items self (queue-list missing))
        (set! verified? #t)))))


;;;
;;;; Recipes
;;;


(definition protected recipes <table>
  (make-table))

(definition protected recipes-index <fx>
  0)


(definition protected (add-recipe recipe)
  (table-set! recipes recipes-index recipe)
  (increase! recipes-index))


(definition protected (register-crafting-recipe inputs <list> output <pair>)
  (add-recipe (new Crafting-Recipe inputs output)))


(define-crafting-recipe '((SpruceWood . 1)) '(SprucePlank . 4))
(define-crafting-recipe '((BirchWood . 1)) '(BirchPlank . 4))
(define-crafting-recipe '((JungleWood . 1)) '(JunglePlank . 4))
(define-crafting-recipe '((OakWood . 2)) '(OakPlank . 4))
(define-crafting-recipe '((OakPlank . 1)) '(Torch . 3))
(define-crafting-recipe '((IronIngot . 10)) '(IronBlock . 1))
(define-crafting-recipe '((GoldIngot . 10)) '(GoldBlock . 1))
(define-crafting-recipe '((Cobblestone . 4) (OakWood . 3) (RedstoneDust . 1) (IronIngot . 1)) '(Piston . 1))
(define-crafting-recipe '() '(OakWood . 1))
(define-crafting-recipe '((Coal . 1) (Cobblestone . 1)) '(Diamond . 1))
(define-crafting-recipe '((GoldBlock . 1)) '(GoldIngot . 10)))
