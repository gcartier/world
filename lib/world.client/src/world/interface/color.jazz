;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; Color Panel
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.interface.color jazz


(import (jazz.graphic)
        (jazz.markup)
        (jazz.ui)
        (gaea.dye)
        (world)
        (world.changes)
        (world.context)
        (world.interface.panel)
        (world.light))


;;;
;;;; Color-Panel
;;;


(class Color-Panel extends World-Panel
  
  
  (form
    (<install>                               layout-type: fill
      (<Border-View>                         border-color: {Color Medium-Gray} border-type: edge style: entry layout-type: fill
        (<World-Color-Chooser> name: chooser))))
  
  
  (method override (finish self rest)
    (nextmethod self rest)
    (set-feedback (locate self 'chooser)
      (~ change-color self)))
  
  
  (method (change-color self color)
    (let ((world (current-world))
          (zone (current-zone)))
      (let ((dye (color->dye color)))
        (for-each (lambda (element)
                    (when (is? element Light)
                      (let ((old-dye (copy-dye (get-color element))))
                        (with-designer zone element
                          (lambda (designer container)
                            (set-property designer element 'color dye)))
                        (set-property-change (current-seconds) element 'color old-dye dye))))
                  (get-selection world))))))


;;;
;;;; World-Color-Chooser
;;;


(class World-Color-Chooser extends Color-Choose
  
  
  (form
    (<install> background: {Color red: .000 green: .000 blue: .000 alpha: .450}))
  
  
  ;;;
  ;;;; Panel
  ;;;
  
  
  (method (find-panel self)
    (find-ascendant self World-Panel))
  
  
  ;;;
  ;;;; Mouse
  ;;;
  
  
  (method override (mouse-down self evt)
    (let ((panel (find-panel self))
          (pos (get-position evt)))
      (move-panel-down panel self pos)))
  
  
  (method override (drag-move self evt)
    (let ((panel (find-panel self))
          (pos (get-position evt)))
      (move-panel-drag panel self pos)))
  
  
  (method override (drag-up self evt . rest)
    (let ((panel (find-panel self))
          (pos (get-position evt)))
      (move-panel-up panel self pos)))))
