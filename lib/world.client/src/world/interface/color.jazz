;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; Color Pane
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2016
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.interface.color jazz


(import (jazz.jml)
        (jazz.graphic)
        (jazz.ui)
        (world)
        (world.autoload)
        (world.dye)
        (world.interface.pane)
        (world.light)
        (world.syntax (phase syntax)))


;;;
;;;; Color-Pane
;;;


(class Color-Pane extends World-Pane
  
  
  (form
    (<install>                               layout-type: fill
      (<Border-View>                         border-color: {Color Medium-Gray} border-type: edge style: entry layout-type: fill
        (<World-Color-Chooser> name: chooser))))
  
  
  (method override (finish rest)
    (nextmethod rest)
    (set-feedback~ (locate 'chooser)
      change-color))
  
  
  (method (change-color color)
    (let ((world (current-world))
          (zone (current-zone)))
      (let ( (dye (color->dye color)))
        (for-each (lambda (element)
                    (when (is? element Light)
                      (with-designer~ zone element
                        (lambda (designer container)
                          (set-property~ designer element 'color dye)))))
                  (get-selection~ world))))))


;;;
;;;; World-Color-Chooser
;;;


(class World-Color-Chooser extends Color-Choose
  
  
  (form
    (<install> background: {Color red: .000 green: .000 blue: .000 alpha: .450}))
  
  
  ;;;
  ;;;; Pane
  ;;;
  
  
  (method (find-pane)
    (find-ascendant World-Pane))
  
  
  ;;;
  ;;;; Mouse
  ;;;
  
  
  (method override (mouse-down evt)
    (let ((pane (find-pane))
          (pos (get-position~ evt)))
      (move-pane-down~ pane self pos)))
  
  
  (method override (drag-move evt)
    (let ((pane (find-pane))
          (pos (get-position~ evt)))
      (move-pane-drag~ pane self pos)))
  
  
  (method override (drag-up evt . rest)
    (let ((pane (find-pane))
          (pos (get-position~ evt)))
      (move-pane-up~ pane self pos)))))
