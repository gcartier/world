;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Blocks
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.interface.blocks jazz


(import (jazz.graphic)
        (jazz.jml)
        (jazz.platform)
        (jazz.view)
        (world)
        (world.autoload)
        (world.dyes)
        (world.block)
        (world.generation)
        (world.geometry)
        (world.interface.bars)
        (world.interface.inventory)
        (world.interface.showcase)
        (world.model)
        (world.settings)
        (world.syntax (phase syntax)))


(class Blocks-Showcase extends World-Showcase
  
  
  (property category initialize #f accessors generate)
  
  
  (method override (activate)
    (nextmethod)
    (set-visible?~ (find-bar 'blocks) #t))
  
  
  (method override (deactivate)
    (nextmethod)
    (set-visible?~ (find-bar 'blocks) #f))
  
  
  (method override (showcase-showing)
    (current-zone))
  
  
  (method override (showcase-spacing)
    .8)
  
  
  (method override (showcase-y)
    -2.8)
  
  
  (method override (showcase-z)
    -.3)
  
  
  (method override (showcase-wait?)
    (not showing))
  
  
  (method override (showcase-elements showing)
    (let ((world (current-world)))
      (define (collect-blocks)
        (let ((queue (new-queue)))
          (loop (for n from 0 below (vector-length blockids))
                (let ((block (vector-ref blockids n)))
                  (let ((name (get-name~ block)))
                    (unless (or (= (get-id~ block) 0)
                                (not (get-category~ block))
                                (and category
                                     (neq? (get-category~ block) category))
                                (eq? (get-name~ block) 'Unknown))
                      (enqueue queue block)))))
          (queue-list queue)))
      
      (define (sorted-models)
        (let ((blocks (collect-blocks)))
          (map get-name~ (sort nu<? blocks key: (lambda (block)
                                                  (let ((category (get-category~ block)))
                                                    (let ((rank (get-rank~ category))
                                                          (id (get-id~ block)))
                                                      (cons rank id))))))))
      
      (let ((camera (cache-camera))
            (spacing (showcase-spacing))
            (models (sorted-models))
            (x (showcase-x))
            (y (showcase-y))
            (z 0.))
        (map (lambda (model)
               (let ((scaling .6))
                 (let ((entity (new Block-Entity parent: self model: model position: (vertex x y z) scale: (vertex scaling scaling scaling))))
                   (set-camera~ entity camera)
                   (set-model~ entity model)
                   (increase! z spacing)
                   entity)))
             models))))
  
  
  (method override (showcase-selection showing elements)
    (or selection (first elements)))
  
  
  (method override (draw-selection)
    (when selection
      (draw-target~ selection red-dye)))
  
  
  (method override (ray-closest-element orig <f64vector> dir <f64vector>)
    (let ((blocks (cache-elements))
          (radius (showcase-spacing)))
      (when blocks
        (let ((closest #f)
              (distance #f))
          (loop (for n from 0 below (vector-length blocks))
                (let ((block (vector-ref blocks n)))
                  (when (ray-intersects-sphere? orig dir (get-position~ block) radius)
                    (for-each (lambda (poly)
                                (let ((cls (ray-closest-triangle~ poly orig dir #f)))
                                  (when cls
                                    (bind (poly dist) cls
                                      (when (or (not distance)
                                                (< dist distance))
                                        (set! closest (list poly dist))
                                        (set! distance dist))))))
                              (element-polygons~ block)))))
          closest))))
  
  
  (method override (selection-addable?)
    #t)
  
  
  (method override (showcase-double-click h v)
    (let ((zone (current-zone)))
      (unless (user-role?)
        (if (not selection)
            (bell)
          (let ((count (if (shift-down?) 10 1))
                (id (get-id~ (world.generation:name->block (get-name~ (cache-model~ selection))))))
            (deposit-inventory id count: count)))))))


;;;
;;;; Blocks
;;;


(class Block-Category-Icon extends View
  
  
  (property selected? initialize #f getter generate setter explicit)
  
  
  (form
    (<install> size: {Dimension 48 52}))
  
  
  (method (selected-icon)
    (find-if (lambda (icon)
               (get-selected?~ icon))
             (get-brothers)))
  
  
  (method (set-selected? flag)
    (set! selected? flag)
    (invalidate-view))
  
  
  (method override (mouse-up evt)
    (let ((world (current-world)))
      (when (not selected?)
        (let ((selected (selected-icon)))
          (when selected
            (set-selected?~ selected #f)))
        (set-selected? #t)
        (let ((showcase (get-showcase~ world)))
          (when (is? showcase Blocks-Showcase)
            (set-category~ showcase (name->block-category name))
            (reset-elements~ showcase))))))
  
  
  (method override (draw surface context)
    (let ((bounds (get-bounds))
          (texture (get-texture~ (name->block-category name))))
      (blit-surface~ surface (get-slot-image texture))
      (when selected?
        (let ((left (get-left~ bounds))
              (right (get-right~ bounds))
              (bottom (get-bottom~ bounds)))
          (set-line-width~ surface 2)
          (set-color~ surface {Color Medium-Gray})
          (move-to~ surface (+ left 4) (- bottom 2))
          (line-to~ surface (- right 4) (- bottom 2))))))))
