;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; World Blocks
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2013
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.interface.blocks jazz


(import (jazz.geometry)
        (jazz.graphic.opengl.glew)
        (world)
        (world.autoload)
        (world.block)
        (world.blocks)
        (world.camera)
        (world.draw)
        (world.dye)
        (world.dyes)
        (world.entity)
        (world.face)
        (world.generate)
        (world.geometry)
        (world.interface)
        (world.interface.showcase)
        (world.material)
        (world.model)
        (world.object)
        (world.opengl)
        (world.quad)
        (world.renderer)
        (world.syntax (phase syntax))
        (world.texture))


(class Blocks-Showcase extends World-Showcase
  
  
  (method override (showcase-showing)
    (current-zone))
  
  
  (method override (showcase-spacing)
    .8)
  
  
  (method override (showcase-y)
    -2.8)
  
  
  (method override (showcase-z)
    -.3)
  
  
  (method override (showcase-wait?)
    (not showing))
  
  
  (method override (showcase-elements showing)
    (let ((world (current-world)))
      (define (showcase-blocks)
        (let ((camera (cache-camera))
              (spacing (showcase-spacing))
              (scaling .6)
              (x (showcase-x))
              (y (showcase-y))
              (z 0.)
              (models (collect-if get-id~ (collect-if block?~ (map registered-model (table-keys (registered-models)))))))
          (map (lambda (model)
                 (let ((path (get-name~ model)))
                   (let ((entity (new Block parent: self model: path position: (vertex x y z) scale: (vertex scaling scaling scaling))))
                     (set-camera~ entity camera)
                     (increase! z spacing)
                     entity)))
               (sort < models key: get-id~))))
      
      (define (showcase-minecraft)
        (define (collect-blocks)
          (let ((queue (new-queue))
                (blockids (minecraft-blockids~ showing)))
            (loop (for n from 0 below (vector-length blockids))
                  (let ((block (vector-ref blockids n)))
                    (unless (or (= (get-id~ block) 0)
                                (eq? (get-name~ block) 'Unknown))
                      (enqueue queue block))))
            (queue-list queue)))
        
        (let ((camera (cache-camera))
              (spacing (showcase-spacing))
              (blocks (collect-blocks))
              (x (showcase-x))
              (y (showcase-y))
              (z 0.))
          (map (lambda (block)
                 (let ((model (make-block-model (minecraft-block-model~ showing block 0. 0. 0.)))
                       (scaling .6))
                   (let ((entity (new Block parent: self position: (vertex x y z) scale: (vertex scaling scaling scaling))))
                     (set-camera~ entity camera)
                     (set-model~ entity model)
                     (increase! z spacing)
                     entity)))
               blocks)))
      
      (if (minecraft?~ showing)
          (showcase-minecraft)
        (showcase-blocks))))
  
  
  (method override (showcase-selection showing elements)
    (or selection (first elements)))
  
  
  (method override (draw-selection)
    (when selection
      (draw-target~ selection red-dye)))
  
  
  (method override (ray-closest-element orig <f64vector> dir <f64vector>)
    (let ((blocks (cache-elements))
          (radius (showcase-spacing)))
      (when blocks
        (let ((closest #f)
              (distance #f))
          (loop (for n from 0 below (vector-length blocks))
                (let ((block (vector-ref blocks n)))
                  (when (ray-intersects-sphere? orig dir (get-position~ block) radius)
                    (for-each (lambda (poly)
                                (let ((cls (ray-closest-triangle~ poly orig dir #f)))
                                  (when cls
                                    (bind (poly dist) cls
                                      (when (or (not distance)
                                                (< dist distance))
                                        (set! closest (list poly dist))
                                        (set! distance dist))))))
                              (element-polygons~ block)))))
          closest))))
  
  
  (method override (selection-addable?)
    #t)))
