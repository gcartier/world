;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Blocks
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2016
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.interface.blocks jazz


(import (jazz.graphic)
        (jazz.jml)
        (jazz.view)
        (world)
        (world.autoload)
        (world.context)
        (world.dyes)
        (world.block)
        (world.generation.block)
        (world.generation.building)
        (world.generation.categories)
        (world.geometry)
        (world.interface.bars)
        (world.interface.category)
        (world.interface.inventory)
        (world.interface.showcase)
        (world.renderer)
        (world.settings)
        (world.syntax (phase syntax)))


(class Blocks-Showcase extends World-Showcase
  
  
  (form
    (<install> category: building))
  
  
  (method override (activate self)
    (nextmethod self)
    (set-visible? (find-bar 'blocks) #t))
  
  
  (method override (deactivate self)
    (nextmethod self)
    (set-visible? (find-bar 'blocks) #f))
  
  
  (method override (showcase-categories self)
    '(building wood decoration plants wool redstone))
  
  
  (method override (showcase-showing self)
    (current-zone))
  
  
  (method override (showcase-radius self)
    .3)
  
  
  (method override (showcase-spacing self)
    .8)
  
  
  (method override (showcase-wait? self)
    (not showing))
  
  
  (method override (showcase-elements self showing)
    (let ((world (current-world)))
      (define (collect-blocks)
        (let ((queue (new-queue)))
          (loop (for n from 0 below (vector-length blockids))
                (let ((block (vector-ref blockids n)))
                  (when (and block (not (get-generic? block)))
                    (let ((name (get-name block)))
                      (unless (or (= (get-id block) 0)
                                  (not (get-category block))
                                  (neq? (get-name (get-category block)) category)
                                  (eq? (get-name block) 'Unknown))
                        (enqueue queue block))))))
          (queue-list queue)))
      
      (define (sorted-blocks)
        (let ((blocks (collect-blocks)))
          (sort nu<? blocks key: (lambda (block)
                                   (let ((category (get-category block))
                                         (kind (get-kind block)))
                                     (list (get-rank category)
                                           (if kind (get-rank kind) 100)
                                           (get-id block)
                                           (or (get-variant-id block) 0)))))))
      
      (let ((camera (cache-camera self))
            (spacing (showcase-spacing self))
            (blocks (sorted-blocks))
            (x 0.)
            (y 0.)
            (z 0.))
        (map (lambda (block)
               (let ((model (get-name block))
                     (bed? (id? (get-id block) BedBlock))
                     (door? (id? (get-id block) WoodenDoorBlock IronDoorBlock)))
                 (let ((scaling (if door? .46 (if bed? .5 .6)))
                       (x (if bed? (- x .25) x))
                       (y (if door? (- y .2) y)))
                   (let ((entity (new Block-Entity parent: self model: model position: (vertex x y z) scale: (vertex scaling scaling scaling))))
                     (set-camera entity camera)
                     (set-model entity model)
                     (increase! z spacing)
                     entity))))
             blocks))))


  (method override (draw-element self element)
    (let ((block (name->block (get-model element))))
      (if (get-ambient? block)
          (register-entity element #f #f (cache-ambient-lighting self))
        (register-entity element))))
  
  
  (method override (showcase-selection self showing elements)
    (or selection (first elements)))
  
  
  (method override (draw-selection self)
    (when selection
      (draw-polygons selection red-dye)))
  
  
  (method override (ray-closest-element self orig <vertex> dir <vertex>)
    (let ((blocks (cache-elements self))
          (radius (showcase-spacing self)))
      (and blocks
           (let ((closest #f)
                 (distance #f))
             (loop (for n from 0 below (vector-length blocks))
                   (let ((block (vector-ref blocks n)))
                     (when (ray-intersects-sphere? orig dir (get-position block) radius)
                       (for-each (lambda (poly)
                                   (let ((cls (ray-closest-triangle poly orig dir #f)))
                                     (when cls
                                       (bind (poly dist) cls
                                         (when (or (not distance)
                                                   (< dist distance))
                                           (set! closest (list poly dist))
                                           (set! distance dist))))))
                                 (element-polygons block)))))
             closest))))
  
  
  (method override (selection-addable? self)
    #t)
  
  
  (method override (showcase-double-click self h v)
    (let ((zone (current-zone)))
      (unless (user?)
        (if (not selection)
            (bell)
          (let ((block (name->block (get-name (cache-model selection)))))
            (deposit-inventory block)))))))


;;;
;;;; Blocks
;;;


(class Block-Category-Icon extends Category-Icon
  
  
  (method override (name->category self name)
    (name->block-category name))))
