;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Blocks
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.interface.blocks jazz


(import (jazz.platform)
        (world)
        (world.autoload)
        (world.block)
        (world.dyes)
        (world.generation)
        (world.geometry)
        (world.interface.inventory)
        (world.interface.showcase)
        (world.model)
        (world.settings)
        (world.syntax (phase syntax)))


(class Blocks-Showcase extends World-Showcase
  
  
  (method override (showcase-showing)
    (current-zone))
  
  
  (method override (showcase-spacing)
    .8)
  
  
  (method override (showcase-y)
    -2.8)
  
  
  (method override (showcase-z)
    -.3)
  
  
  (method override (showcase-wait?)
    (not showing))
  
  
  (method override (showcase-elements showing)
    (let ((world (current-world)))
      (define (showcase-blocks)
        (let ((camera (cache-camera))
              (spacing (showcase-spacing))
              (scaling .6)
              (x (showcase-x))
              (y (showcase-y))
              (z 0.)
              (models (registered-block-models)))
          (map (lambda (model)
                 (let ((path (get-name~ model)))
                   (let ((entity (new Block parent: self model: path position: (vertex x y z) scale: (vertex scaling scaling scaling))))
                     (set-camera~ entity camera)
                     (increase! z spacing)
                     entity)))
               (sort < models key: get-id~))))
      
      (define (showcase-minecraft)
        (define (collect-models)
          (let ((queue (new-queue)))
            (loop (for n from 0 below (vector-length blockids))
                  (let ((block (vector-ref blockids n)))
                    (let ((name (get-name~ block)))
                      (unless (or (= (get-id~ block) 0)
                                  (eq? name 'Unknown))
                        (enqueue queue name)))))
            (queue-list queue)))
        
        (let ((camera (cache-camera))
              (spacing (showcase-spacing))
              (models (collect-models))
              (x (showcase-x))
              (y (showcase-y))
              (z 0.))
          (map (lambda (model)
                 (let ((scaling .6))
                   (let ((entity (new Block parent: self model: model position: (vertex x y z) scale: (vertex scaling scaling scaling))))
                     (set-camera~ entity camera)
                     (set-model~ entity model)
                     (increase! z spacing)
                     entity)))
               models)))
      
      (append @minecraft-convert (showcase-blocks)
              (showcase-minecraft))))
  
  
  (method override (showcase-selection showing elements)
    (or selection (first elements)))
  
  
  (method override (draw-selection)
    (when selection
      (draw-target~ selection red-dye)))
  
  
  (method override (ray-closest-element orig <f64vector> dir <f64vector>)
    (let ((blocks (cache-elements))
          (radius (showcase-spacing)))
      (when blocks
        (let ((closest #f)
              (distance #f))
          (loop (for n from 0 below (vector-length blocks))
                (let ((block (vector-ref blocks n)))
                  (when (ray-intersects-sphere? orig dir (get-position~ block) radius)
                    (for-each (lambda (poly)
                                (let ((cls (ray-closest-triangle~ poly orig dir #f)))
                                  (when cls
                                    (bind (poly dist) cls
                                      (when (or (not distance)
                                                (< dist distance))
                                        (set! closest (list poly dist))
                                        (set! distance dist))))))
                              (element-polygons~ block)))))
          closest))))
  
  
  (method override (selection-addable?)
    #t)
  
  
  (method override (showcase-double-click h v)
    (let ((zone (current-zone)))
      (unless (user-role?)
        (if (not selection)
            (bell)
          (let ((count (if (shift-down?) 10 1))
                (id (get-id~ (world.generation:name->block (get-name~ (cache-model~ selection))))))
            (deposit-inventory id count: count))))))))
