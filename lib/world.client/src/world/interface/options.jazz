;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Options
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.interface.options jazz


(import (jazz.application)
        (jazz.jml)
        (jazz.graphic)
        (jazz.system)
        (jazz.ui)
        (world.interface.frame)
        (world.settings))


;;;
;;;; Frame
;;;


(class World-Options-Frame extends World-Frame
  
  
  (form
    (<install>                                              size: {Dimension 420 639} layout-type: border
      (<caption~>                                           title: "Options")
      (<content~>                                           layout-type: fill
        (<Scroller-View>                                    style: document hscroll?: #t vscroll?: #t
          (<content~>                                       layout-type: fill
            (<Tree-Header>                                  style: document shown?: #f
              (<content~>
                (<Tree-View>           name: options        portfolio: :images filled-column: option background: #f
                  (<Tree-Node-Column>  name: option         title: "Option" width: 235 toplevel-controls?: #f display-images?: #f display-levels?: #f)
                  (<Tree-Label-Column> name: shortcut       title: "Value" width: 115)))))))))
  
  
  (method override (conclude initargs)
    (nextmethod initargs)
    (view-options))
  
  
  (method override (focus-default)
    (acquire-focus~ (get-tree)))
  
  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method (get-tree)
    (locate 'options))
  
  
  ;;;
  ;;;; Update
  ;;;
  
  
  (method protected virtual (options-name)
    )
  
  
  (method (view-options)
    (let ((appl (get-application)))
      (let ((options (child~ (get-options~ appl) (options-name)))
            (tree (get-tree)))
        (define (view-options)
          (for-each (lambda (options)
                      (let ((father (add-row~ tree
                                      state: 'expanded
                                      children: (list (new Tree-Node title: (get-title~ options) font: {Font Label-User} color: {Color red: 220 green: 0 blue: 0})
                                                      (new Tree-Label title: "" font: {Font Label-User} color: {Color White}))
                                      user-data: options)))
                        (for-each (lambda (option)
                                    (let ((setting (get-setting~ option)))
                                      (add-row~ tree
                                        father: father
                                        children: (list (new Tree-Node title: (or (get-title~ option) (format "{a}:{a}" (get-name~ options) (get-name~ option))) font: {Font Label-User} color: {Color White})
                                                        (new Tree-Label title: (present-setting setting) font: {Font Label-User} color: {Color White}))
                                        user-data: option)))
                                  (get-children~ options))))
                    (get-children~ options)))
        
        (define (present-setting setting)
          (let ((value (world-setting setting #f)))
            (->string value)))
        
        (remove-every-row~ tree)
        (with-update-locked
          (lambda ()
            (view-options)))))))


;;;
;;;; Video
;;;


(class World-Video-Options extends World-Options-Frame
  
  
  (form
    (<install>
      (<caption~> title: "Video Options")))
  
  
  (method override (options-name)
    'video))


;;;
;;;; Audio
;;;


(class World-Audio-Options extends World-Options-Frame
  
  
  (form
    (<install>
      (<caption~> title: "Audio Options")))
  
  
  (method override (options-name)
    'audio))


;;;
;;;; Interface
;;;


(class World-Interface-Options extends World-Options-Frame
  
  
  (form
    (<install>
      (<caption~> title: "Interface Options")))
  
  
  (method override (options-name)
    'interface)))
