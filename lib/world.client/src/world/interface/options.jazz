;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Options
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.interface.options jazz


(import (jazz.application)
        (jazz.component)
        (jazz.event)
        (jazz.graphic)
        (jazz.markup)
        (jazz.outline)
        (jazz.screen)
        (jazz.text)
        (jazz.tree)
        (jazz.ui)
        (jazz.view)
        (world)
        (world.configure)
        (world.context)
        (world.creature)
        (world.interface.dialogs)
        (world.interface.frame)
        (world.interface.panel)
        (world.settings)
        (world.sound)
        (world.support)
        (world.task))


;;;
;;;; Restart
;;;


(definition install-needed
  #f)

(definition restart-needed?
  #f)

(definition (reset-install/restart)
  (set! install-needed #f)
  (set! restart-needed? #f))

(definition (need-install proc)
  (set! install-needed proc))

(definition (need-restart)
  (set! restart-needed? #t))

(definition (warn-if-restart-needed)
  (when restart-needed?
    (delay-event
      (lambda ()
        (with-task-mutex
          (lambda ()
            (when install-needed
              (install-needed))
            (open-message (format "{a} needs to be restarted for some options to take effect" tier-title)
                          caption: "Restart"
                          type: 'message
                          execute: (lambda (evt)
                                     (let ((dialog (find-ascendant (get-sender evt) World-Dialog)))
                                       (close dialog))))))))))


;;;
;;;; Frame
;;;


(class World-Options-Frame extends World-Frame
  
  
  (form
    (<install>                                              size: {Dimension 420 639} layout-type: border
      (<caption~>                                           title: "Options")
      (<content~>                                           layout-type: fill
        (<Scroller-View>                                    style: document hscroll?: #t vscroll?: #t
          (<content~>                                       layout-type: fill
            (<Tree-Header>                                  style: document shown?: #f
              (<content~>
                (<Tree-View>           name: options        portfolio: :images filled-column: option background: #f
                  (<Tree-Node-Column>  name: option         title: "Option" width: 235 toplevel-controls?: #f display-images?: #f display-levels?: #f)
                  (<Tree-Label-Column> name: shortcut       title: "Value" width: 115)))))))))
  
  
  (method override (conclude self initargs)
    (nextmethod self initargs)
    (view-options self))
  
  
  (method override (focus-default self)
    (acquire-focus (get-tree self)))
  
  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method package (get-tree self)
    (locate self 'options))
  
  
  ;;;
  ;;;; Update
  ;;;
  
  
  (method protected virtual (options-name self)
    )
  
  
  (method (view-options self)
    (let ((appl (current-application)))
      (let ((options (child (get-options appl) (options-name self)))
            (tree (get-tree self)))
        (define (view-options)
          (for-each (lambda (options)
                      (let ((father (add-row tree
                                      state: 'expanded
                                      children: (list (new Tree-Node title: (get-title options) font: {Font Label-User} color: {Color red: 220 green: 0 blue: 0})
                                                      (new Tree-Label title: "" font: {Font Label-User} color: {Color White}))
                                      user-data: options)))
                        (for-each (lambda (option)
                                    (let ((setting (get-setting option)))
                                      (add-row tree
                                        father: father
                                        children: (list (new Tree-Node title: (or (get-title option) (format "{a}:{a}" (get-name options) (get-name option))) font: {Font Label-User} color: {Color White})
                                                        (new Tree-Label title: (present-setting setting) font: {Font Label-User} color: {Color White}))
                                        user-data: option)))
                                  (get-children options))))
                    (get-children options)))
        
        (define (present-setting setting)
          (let ((value (world-setting setting #f)))
            (->string value)))
        
        (remove-every-row tree)
        (with-update-locked self
          (lambda ()
            (view-options)))))))


;;;
;;;; Option
;;;


(class Option-Label extends Label-View
  
  
  (form
    (<install> color: {Color red: .892 green: .773 blue: .290})))


(class Option-Box extends Combo-Box
  
  
  ;; quick hack
  (method override (new-choices-menu self)
    (let ((menu (nextmethod self)))
      (set-background menu {Color red: .000 green: .000 blue: .000 alpha: .700})
      menu))
  
  
  (method override (content-change self origin)
    (option-change parent (get-value self))))


(class Boolean-Option extends Check-Box
  
  
  (property option initialize #f accessors generate)
  
  
  (method override (conclude self initargs)
    (nextmethod self initargs)
    (set-checked? self (case option
                    ((world.post-processing?) (get-post-processing? (current-world)))
                    ((world.retina?) (world-setting 'world.retina? #t))
                    @wait
                    ((world.creature-models?) creature-models?)
                    ((world.music?) (get-music? (current-music)))
                    ((world.ambience?) (get-ambience? (current-ambience)))
                    ((world.sounds?) sounds?)
                    ((world.independent-camera?) (get-independent-camera?))
                    ((world.camera-smoothing?) (get-camera-smoothing?))
                    ((world.script-toolbox?) (world-setting 'world.script-toolbox? #t))
                    ((world.live-coding?) (world-setting 'world.live-coding? #t)))))


  (method override (process-action self sender (properties (action-properties self)))
    (case option
      ((world.post-processing?) (change-post-processing (current-world) checked?))
      @wait
      ((world.creature-models?) (change-creature-models? (current-zone) checked?))
      ((world.music?) (change-music? (current-music) checked?))
      ((world.ambience?) (change-ambience? (current-ambience) checked?))
      ((world.sounds?) (set-sounds? checked?))
      ((world.independent-camera?) (set-independent-camera? checked?))
      ((world.camera-smoothing?) (change-camera-smoothing (current-world) checked?)))
    (set-setting options-settings option checked?)
    (save-content options-settings)
    (when (memq? option '(world.retina?))
      (need-restart))))


(class Combo-Option extends Border-View
  
  
  (property option initialize #f accessors generate)
  
  
  (form
    (<install>                  size: {Dimension 100 19} border-type: solid border-color: {Color red: 100 green: 100 blue: 100}
      (<Option-Box> name: combo)))
  
  
  (method override (conclude self initargs)
    (nextmethod self initargs)
    (let ((combo (child self 'combo)))
      (case option
        ((world.view-distance)
         (set-choices combo '((ultra "Ultra (15)")
                              (high "High(11)")
                              (medium "Medium (7)")
                              (low "Low (5)")))
         (let ((value (case (world-setting 'world.view-distance 7)
                        ((15) 'ultra)
                        ((11) 'high)
                        ((7) 'medium)
                        ((5) 'low)
                        (else #f))))
           (if (not value)
               (set-entry combo "<invalid>")
             (set-value combo value))))
        ((world.tile-resolution)
         (set-choices combo '((high "High (128)")
                              (medium "Medium (32)")
                              (low "Low (16)")))
         (let ((value (case (world-setting 'world.tile-resolution 128)
                        ((128) 'high)
                        ((32) 'medium)
                        ((16) 'low)
                        (else #f))))
           (if (not value)
               (set-entry combo "<invalid>")
             (set-value combo value))))
        ((world.render-rate)
         (set-choices combo '((high "High (60)")
                              (medium "Medium (30)")
                              (low "Low (20)")))
         (let ((value (case (world-setting 'world.render-rate 60.)
                        ((60.) 'high)
                        ((30.) 'medium)
                        ((20.) 'low)
                        (else #f))))
           (if (not value)
               (set-entry combo "<invalid>")
             (set-value combo value)))))))
  
  
  (method package (option-change self value)
    (let ((option-value
            (case option
              ((world.view-distance)
               (let ((distance
                       (case value
                         ((ultra) 15)
                         ((high) 11)
                         ((medium) 7)
                         ((low) 5))))
                 @wait-update-view-distance-converted
                 (change-view-distance (current-world) distance)
                 distance))
              ((world.tile-resolution)
               (let ((resolution
                       (case value
                         ((high) 128)
                         ((medium) 32)
                         ((low) 16))))
                 resolution))
              ((world.render-rate)
               (let ((rate
                       (case value
                         ((high) 60.)
                         ((medium) 30.)
                         ((low) 20.))))
                 rate)))))
      (case option
        ((world.tile-resolution)
         (case option-value
           ((16)
            (need-install
              (lambda ()
                (require-pack (current-zone) "block/16x16")))
            (set-setting   options-settings 'world.tile-resolution  16)
            (set-setting   options-settings 'world.tile-pack        "minecraft")
            (set-setting   options-settings 'world.generate-mipmap? #t)
            (set-setting   options-settings 'world.min-filter       'linear)
            (set-setting   options-settings 'world.mag-filter       'nearest))
           ((32)
            (need-install
              (lambda ()
                (require-pack (current-zone) "block/32x32")))
            (set-setting   options-settings 'world.tile-resolution  32)
            (clear-setting options-settings 'world.tile-pack)
            (clear-setting options-settings 'world.generate-mipmap?)
            (clear-setting options-settings 'world.min-filter)
            (clear-setting options-settings 'world.mag-filter))
           ((128)
            (set-setting   options-settings 'world.tile-resolution  128)
            (clear-setting options-settings 'world.tile-pack)
            (clear-setting options-settings 'world.generate-mipmap? )
            (clear-setting options-settings 'world.min-filter)
            (clear-setting options-settings 'world.mag-filter))))
        ((world.render-rate)
         (let ((active option-value)
               (inactive (/ option-value 2.)))
           (setup-render-rate active inactive)
           (set-setting options-settings 'world.render-rate active)
           (set-setting options-settings 'world.render-rate-inactive inactive)))
        (else
         (set-setting options-settings option option-value)))
      (save-content options-settings)
      (when (memq? option '(world.view-distance world.tile-resolution))
        (need-restart)))))


;;;
;;;; Video
;;;


(class World-Video-Options extends World-Frame
  
  
  (form
    (<install>
      (<caption~>           title: "Video Options")
      (<content~>                                    layout-type: center
        (<View>                                      size: {Dimension 190 164}
          (<Option-Label>   title: "View Distance"   position: {Point  0   1})
          (<Combo-Option>                            position: {Point 90   0} option: world.view-distance)
          (<Option-Label>   title: "Tile Resolution" position: {Point  0  36})
          (<Combo-Option>                            position: {Point 90  35} option: world.tile-resolution)
          (<Option-Label>   title: "Render Rate"     position: {Point  0  71})
          (<Combo-Option>                            position: {Point 90  70} option: world.render-rate)
          (<Option-Label>   title: "Post Processing" position: {Point 20 120})
          (<Boolean-Option>                          position: {Point  0 120} option: world.post-processing?)
          (<Option-Label>   title: "Use Retina"      position: {Point 20 150})
          (<Boolean-Option>                          position: {Point  0 150} option: world.retina?)
          @wait
          (<Option-Label>   title: "Enemy Models (experimental)" position: {Point 20 120} size: {Dimension 180 16})
          @wait
          (<Boolean-Option>                          position: {Point  0 120}  option: world.creature-models?)))))
  
  
  (method override (prepare self rest)
    (nextmethod self rest)
    (reset-install/restart))
  
  
  (method override (destroy self)
    (warn-if-restart-needed)
    (nextmethod self)))


;;;
;;;; Audio
;;;


(class World-Audio-Options extends World-Frame
  
  
  (form
    (<install>
      (<caption~>           title: "Audio Options")
      (<content~>                                  layout-type: center
        (<View>                                    size: {Dimension 80 94}
          (<Option-Label>   title: "Music"         position: {Point 20  0})
          (<Boolean-Option>                        position: {Point  0  0}  option: world.music?)
          (<Option-Label>   title: "Ambience"      position: {Point 20 40})
          (<Boolean-Option>                        position: {Point  0 40}  option: world.ambience?)
          (<Option-Label>   title: "Sounds"        position: {Point 20 80})
          (<Boolean-Option>                        position: {Point  0 80}  option: world.sounds?))))))


;;;
;;;; Interface
;;;


(class World-Interface-Options extends World-Frame
  
  
  (form
    (<install>
      (<caption~>           title: "Interface Options")
      (<content~>                                       layout-type: center
        (<View>                                         size: {Dimension 150 174}
          (<Option-Label>   title: "Independent Camera" position: {Point 20  40} size: {Dimension 140 16})
          (<Boolean-Option>                             position: {Point  0  40} option: world.independent-camera?)
          (<Option-Label>   title: "Camera Smoothing"   position: {Point 20  80} size: {Dimension 140 16})
          (<Boolean-Option>                             position: {Point  0  80} option: world.camera-smoothing?)
          @waitscript (<Option-Label>   title: "Script Toolbox"     position: {Point 20 120} size: {Dimension 140 16})
          @waitscript (<Boolean-Option>                             position: {Point  0 120} option: world.script-toolbox?)
          @waitscript (<Option-Label>   title: "Live coding"        position: {Point 20 160} size: {Dimension 140 16})
          @waitscript (<Boolean-Option>                             position: {Point  0 160} option: world.live-coding?))))))


;;;
;;;; Sample
;;;


@sample
(class World-Sample-Options extends World-Frame
  
  
  (form
    (<install>
      (<caption~>                    title: "Video Options")
      (<content~>
        (<Group-Box>                 title: "Advanced" position: {Point 20 20} size: {Dimension 400 200} border-color: {Color White alpha: .5}
          (<content~>
            (<Label-View>            title: "Setting" position: {Point 200 22} color: {Color red: .892 green: .773 blue: .290})
            (<Border-View>           position: {Point 250 21} size: {Dimension 100 19} border-type: solid border-color: {Color red: 100 green: 100 blue: 100}
              (<Scroller-View>       hscroll?: #f vscroll?: #f
                (<content~>          layout-type: fill
                  (<World-Text-View> focus-selects-all?: #t show-unfocused-selection?: #f left-padding: 1 top-padding: 1))))
            (<Push-Button>           title: "Push-Button" position: {Point 50 20})
            (<Check-Box>             title: "Check-Box" position: {Point 50 60})
            (<Radio-Button>          title: "Radio-Button 1" position: {Point 50 90} selected?: #t)
            (<Radio-Button>          title: "Radio-Button 2" position: {Point 50 110})
            (<Label-View>            title: "View distance" position: {Point 50 140} color: {Color red: .892 green: .773 blue: .290})
            (<Border-View>           position: {Point 140 139} size: {Dimension 80 19} border-type: solid border-color: {Color red: 100 green: 100 blue: 100}
              (<Combo-Box>           title: "Combo-Box" choices: ((ultra "Ultra") (high "High") (medium "Medium") (low "Low")) content: "High")))))))))
