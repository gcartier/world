;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; World Textures
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2013
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.interface.textures jazz


(import (jazz.graphic.opengl.glew)
        (world)
        (world.autoload)
        (world.geometry)
        (world.interface.showcase)
        (world.quad)
        (world.syntax (phase syntax)))


(class Textures-Showcase extends World-Showcase
  
  
  (method override (showcase-margin)
    .3)
  
  
  (method override (showcase-spacing)
    .85)
  
  
  (method override (showcase-z)
    -.35)
  
  
  (method override (showcase-wait?)
    #t)
  
  
  (method override (showcase-elements showing)
    (let ((world (current-world))
          (spacing (showcase-spacing))
          (z 0.))
      (map (lambda (texture)
             (prog1 (list (find-texture~ world texture) z)
               (increase! z spacing)))
           (sort ci<? (table-keys (collect-textures~ world))))))
  
  
  (method override (element-center info)
    (bind (texture z) info
      (vertex (showcase-x) (showcase-y) z)))
  
  
  (method override (showcase-lighting)
    (cache-texture-lighting))


  (method override (draw-elements)
    (let ((camera (cache-camera))
          (elements (cache-elements)))
      (loop (for n from 0 below (vector-length elements))
            (let ((element (vector-ref elements n)))
              (when (in-frustum?~ camera (element-center element))
                (draw-element element))))))


  (method (draw-element info)
    (bind (texture z) info
      (glPushMatrix)
      (glTranslatef (showcase-x) (showcase-y) (+ z .35))
      (glRotatef 180. 0. 1. 0.)
      (let ((width .7)
            (height .7))
        (textured-quad~ texture
          (lambda () (glVertex3f 0.0 0.0 height))
          (lambda () (glVertex3f 0.0 0.0 0.0))
          (lambda () (glVertex3f 0.0 width 0.0))
          (lambda () (glVertex3f 0.0 width height))))
      (glPopMatrix)))
  
  
  (method override (draw-selection)
    (when selection
      (draw-selection-quad (texture-quad selection))))
  
  
  (method override (ray-closest-element orig <f64vector> dir <f64vector>)
    (let ((textures (cache-elements)))
      (let ((closest #f)
            (distance #f))
        (loop (for n from 0 below (vector-length textures))
              (let ((info (vector-ref textures n)))
                (let ((poly (texture-quad info)))
                  (let ((cls (ray-closest-triangle~ poly orig dir #f)))
                    (when cls
                      (bind (poly dist) cls
                        (when (or (not distance)
                                  (< dist distance))
                          (set! closest (list poly dist))
                          (set! distance dist))))))))
        closest)))
  
  
  (method (texture-quad info)
    (bind (texture z) info
      (let ((translation (vertex (showcase-x) (showcase-y) (- z .35)))
            (width .7)
            (height .7))
        (let ((v1 (vertex+ translation (vertex 0.0 0.0 height)))
              (v2 (vertex+ translation (vertex 0.0 0.0 0.0)))
              (v3 (vertex+ translation (vertex 0.0 width 0.0)))
              (v4 (vertex+ translation (vertex 0.0 width height))))
          (make-quad info v1 v2 v3 v4)))))))
