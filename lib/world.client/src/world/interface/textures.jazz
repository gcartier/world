;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Textures
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.interface.textures jazz


(import (jazz.geometry)
        (jazz.graphic.opengl.glew)
        (world)
        (world.autoload)
        (world.entity)
        (world.geometry)
        (world.interface.showcase)
        (world.interface.tiles)
        (world.material)
        (world.object)
        (world.quad)
        (world.syntax (phase syntax))
        (world.texture))


(class Textures-Showcase extends World-Showcase
  
  
  (method override (showcase-margin)
    .3)
  
  
  (method override (showcase-spacing)
    .85)
  
  
  (method override (showcase-z)
    -.35)
  
  
  (method override (showcase-wait?)
    #t)
  

  (method override (showcase-elements showing)
    (define (rotate entity)
      (rotate~ entity PI)
      entity)
    
    (let ((world (current-world)))
      (let ((block-atlas (get-block-atlas~ world))
            (camera (cache-camera))
            (spacing (showcase-spacing))
            (x (showcase-x))
            (y (showcase-y))
            (z 0.))
        (map (lambda (name)
               (let ((texture (find-texture~ world name)))
                 (receive (atlas texture uv) (atlas-texture texture)
                   (let ((material (new Material atlas: atlas texture: texture)))
                     (let ((model (make-tile-model material uv))
                           (scaling .7))
                       (let ((entity (rotate (new Entity parent: self position: (vertex x (+ y .35) z) scale: (vertex scaling scaling scaling) user-data: texture))))
                         (set-camera~ entity camera)
                         (set-model~ entity model)
                         (increase! z spacing)
                         entity))))))
             (sort ci<? (table-keys (collect-textures~ world)))))))
  
  
  (method override (showcase-lighting)
    (cache-texture-lighting))
  
  
  (method override (draw-selection)
    (when selection
      (draw-selection-quad (texture-quad selection))))
  
  
  (method override (ray-closest-element orig <f64vector> dir <f64vector>)
    (let ((entities (cache-elements)))
      (let ((closest #f)
            (distance #f))
        (loop (for n from 0 below (vector-length entities))
              (let ((entity (vector-ref entities n)))
                (let ((poly (texture-quad entity)))
                  (let ((cls (ray-closest-triangle~ poly orig dir #f)))
                    (when cls
                      (bind (poly dist) cls
                        (when (or (not distance)
                                  (< dist distance))
                          (set! closest (list poly dist))
                          (set! distance dist))))))))
        closest)))
  
  
  (method (texture-quad entity)
    (let ((pos (get-position~ entity))
          (half .35))
      (let ((v1 (vertex+ pos (vertex 0. (- half) (- half))))
            (v2 (vertex+ pos (vertex 0. half (- half))))
            (v3 (vertex+ pos (vertex 0. half half)))
            (v4 (vertex+ pos (vertex 0. (- half) half))))
        (make-quad entity v1 v2 v3 v4))))))
