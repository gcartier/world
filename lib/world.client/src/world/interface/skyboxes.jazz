;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Skyboxes
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is WorldScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2014
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See http://github.com/gcartier/world for details.


(module world.interface.skyboxes jazz


(import (jazz.graphic.opengl.glew)
        (world)
        (world.autoload)
        (world.dyes)
        (world.geometry)
        (world.interface.showcase)
        (world.opengl)
        (world.quad)
        (world.skybox)
        (world.syntax (phase syntax)))


(class Skyboxes-Showcase extends World-Showcase
  
  
  (method override (showcase-showing)
    (current-zone))
  
  
  (method override (showcase-spacing)
    .85)
  
  
  (method override (showcase-wait?)
    (not showing))
  
  
  (method override (showcase-elements showing)
    (let ((zone (current-zone))
          (spacing (showcase-spacing))
          (z 0.))
      (map (lambda (skybox)
             (when skybox
               (prepare~ skybox))
             (prog1 (list skybox (and skybox (get-front~ skybox)) z)
               (increase! z spacing)))
           (cons #f (get-skyboxes)))))
  
  
  (method override (showcase-selection zone elements)
    (define (determine-selection zone-skybox)
      (find-if (lambda (info)
                 (bind (skybox texture z) info
                   (eq? zone-skybox skybox)))
               elements))
    
    (and zone (determine-selection (get-skybox~ zone))))
  
  
  (method override (element-center info)
    (bind (skybox texture z) info
      (vertex (showcase-x) (showcase-y) z)))
  
  
  (method override (showcase-lighting)
    (cache-texture-lighting))


  (method override (draw-elements)
    (let ((camera (cache-camera))
          (elements (cache-elements)))
      (loop (for n from 0 below (vector-length elements))
            (let ((element (vector-ref elements n)))
              (when (in-frustum?~ camera (element-center element))
                (draw-element element))))))


  (method (draw-element info)
    (bind (skybox texture z) info
      (if (not skybox)
          (begin
            (gl-colorize-dye black-dye)
            (glBegin GL_QUADS)
            (let ((quad (texture-quad info)))
              (let ((v1 (get-v1~ quad))
                    (v2 (get-v2~ quad))
                    (v3 (get-v3~ quad))
                    (v4 (get-v4~ quad)))
                (glVertex3f (vertex-x v1) (vertex-y v1) (vertex-z v1))
                (glVertex3f (vertex-x v2) (vertex-y v2) (vertex-z v2))
                (glVertex3f (vertex-x v3) (vertex-y v3) (vertex-z v3))
                (glVertex3f (vertex-x v4) (vertex-y v4) (vertex-z v4))))
            (glEnd))
        (glPushMatrix)
        (glTranslatef (showcase-x) (showcase-y) z)
        (let ((width .7)
              (height .7))
          (textured-quad~ texture
            (lambda () (glVertex3f 0.0 0.0 height))
            (lambda () (glVertex3f 0.0 0.0 0.0))
            (lambda () (glVertex3f 0.0 width 0.0))
            (lambda () (glVertex3f 0.0 width height))))
        (glPopMatrix))))
  
  
  (method override (draw-selection)
    (when selection
      (draw-selection-quad (texture-quad selection))))
  
  
  (method override (ray-closest-element orig <f64vector> dir <f64vector>)
    (let ((textures (cache-elements)))
      (let ((closest #f)
            (distance #f))
        (loop (for n from 0 below (vector-length textures))
              (let ((info (vector-ref textures n)))
                (let ((poly (texture-quad info)))
                  (let ((cls (ray-closest-triangle~ poly orig dir #f)))
                    (when cls
                      (bind (poly dist) cls
                        (when (or (not distance)
                                  (< dist distance))
                          (set! closest (list poly dist))
                          (set! distance dist))))))))
        closest)))
  
  
  (method (texture-quad info)
    (bind (skybox texture z) info
      (let ((translation (vertex (showcase-x) (showcase-y) z))
            (width .7)
            (height .7))
        (let ((v1 (vertex+ translation (vertex 0.0 0.0 height)))
              (v2 (vertex+ translation (vertex 0.0 0.0 0.0)))
              (v3 (vertex+ translation (vertex 0.0 width 0.0)))
              (v4 (vertex+ translation (vertex 0.0 width height))))
          (make-quad info v1 v2 v3 v4)))))
  
  
  (method override (selection-update selection)
    (let ((zone (current-zone)))
      (let ((designer (get-designer~ zone)))
        (bind (skybox texture z) selection
          (set-property~ designer zone 'start-skybox (and skybox (get-name~ skybox)))
          (if (not skybox)
              (remove-skybox~ zone)
            (install-skybox~ zone skybox))))))))
