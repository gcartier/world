;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Skyboxes
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.interface.skyboxes jazz


(import (jazz.geometry)
        (world)
        (world.asset)
        (world.autoload)
        (world.context)
        (world.entity)
        (world.geometry)
        (world.interface.showcase)
        (world.interface.tiles)
        (world.material)
        (world.object)
        (world.quad)
        (world.skybox))


(class Skyboxes-Showcase extends World-Showcase
  
  
  (method override (showcase-showing self)
    (current-zone))
  
  
  (method override (showcase-front self)
    0.)
  
  
  (method override (showcase-back self)
    0.)
  
  
  (method override (showcase-radius self)
    .35)
  
  
  (method override (showcase-spacing self)
    .85)
  
  
  (method override (showcase-wait? self)
    (not showing))
  
  
  (method override (showcase-elements self showing)
    (define (rotate-90 entity)
      (rotate entity PI)
      entity)
    
    (let ((world (current-world)))
      (parameterize ((inhibit-working? #t))
        (let ((camera (cache-camera self))
              (spacing (showcase-spacing self))
              (x 0.)
              (y 0.)
              (z 0.))
          (map (lambda (skybox)
                 (when skybox
                   (prepare skybox))
                 (let ((texture (if (not skybox) (find-texture world "world/black") (sample-texture skybox))))
                   (bind-values (atlas texture uv) (atlas-texture texture)
                     (let ((material (new Material atlas: atlas texture: texture)))
                       (let ((model (make-tile-model material uv))
                             (scaling .7))
                         (let ((entity (rotate-90 (new Entity parent: self position: (vertex x y z) scale: (vertex scaling scaling scaling) user-data: skybox))))
                           (set-camera entity camera)
                           (set-model entity model)
                           (increase! z spacing)
                           entity))))))
               (cons #f (get-skyboxes)))))))
  
  
  (method override (showcase-selection self zone elements)
    (define (determine-selection zone-skybox)
      (find-if (lambda (element)
                 (let ((skybox (get-user-data element)))
                   (eq? zone-skybox skybox)))
               elements))
    
    (and zone (determine-selection (get-skybox zone))))
  
  
  (method override (showcase-lighting self)
    (cache-texture-lighting self))
  
  
  (method override (draw-selection self)
    (when selection
      (draw-selection-quad self (texture-quad self selection))))
  
  
  (method override (ray-closest-element self orig <vertex> dir <vertex>)
    (let ((entities (cache-elements self)))
      (let ((closest #f)
            (distance #f))
        (loop (for n from 0 below (vector-length entities))
              (let ((entity (vector-ref entities n)))
                (let ((poly (texture-quad self entity)))
                  (let ((cls (ray-closest-triangle poly orig dir #f)))
                    (when cls
                      (bind (poly dist) cls
                        (when (or (not distance)
                                  (< dist distance))
                          (set! closest (list poly dist))
                          (set! distance dist))))))))
        closest)))
  
  
  (method (texture-quad self entity)
    (let ((pos (get-position entity))
          (half .35))
      (let ((v1 (vertex+ pos (vertex 0. (- half) (- half))))
            (v2 (vertex+ pos (vertex 0. half (- half))))
            (v3 (vertex+ pos (vertex 0. half half)))
            (v4 (vertex+ pos (vertex 0. (- half) half))))
        (make-quad entity v1 v2 v3 v4))))
  
  
  (method override (selection-update self selection)
    (let ((zone (current-zone)))
      (let ((designer (get-designer zone)))
        (let ((skybox (get-user-data selection)))
          (set-property designer zone 'start-skybox (and skybox (get-path skybox)))
          (if (not skybox)
              (remove-skybox zone)
            (install-skybox zone skybox))))))))
