;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Skyboxes
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is WorldScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2014
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See http://github.com/gcartier/world for details.


(module world.interface.skyboxes jazz


(import (jazz.geometry)
        (jazz.graphic.opengl.glew)
        (world)
        (world.autoload)
        (world.dyes)
        (world.entity)
        (world.geometry)
        (world.interface.showcase)
        (world.interface.tiles)
        (world.material)
        (world.object)
        (world.opengl)
        (world.quad)
        (world.skybox)
        (world.syntax (phase syntax)))


(class Skyboxes-Showcase extends World-Showcase
  
  
  (method override (showcase-showing)
    (current-zone))
  
  
  (method override (showcase-margin)
    .3)
  
  
  (method override (showcase-spacing)
    .85)
  
  
  (method override (showcase-z)
    -.35)
  
  
  (method override (showcase-wait?)
    (not showing))
  
  
  (method override (showcase-elements showing)
    (define (rotate entity)
      (rotate~ entity PI)
      entity)
    
    (let ((world (current-world)))
      (let ((block-atlas (get-block-atlas~ world))
            (camera (cache-camera))
            (spacing (showcase-spacing))
            (x (showcase-x))
            (y (showcase-y))
            (z 0.))
        (map (lambda (skybox)
               (when skybox
                 (prepare~ skybox))
               (let ((texture (if (not skybox) (find-texture~ world "black") (get-sample~ skybox))))
                 (receive (atlas texture uv) (atlas-texture texture)
                   (let ((material (new Material atlas: atlas texture: texture)))
                     (let ((model (make-tile-model material uv))
                           (scaling .7))
                       (let ((entity (rotate (new Entity parent: self position: (vertex x (+ y .35) z) scale: (vertex scaling scaling scaling) user-data: skybox))))
                         (set-camera~ entity camera)
                         (set-model~ entity model)
                         (increase! z spacing)
                         entity))))))
             (cons #f (get-skyboxes))))))
  
  
  (method override (showcase-selection zone elements)
    (define (determine-selection zone-skybox)
      (find-if (lambda (element)
                 (let ((skybox (get-user-data~ element)))
                   (eq? zone-skybox skybox)))
               elements))
    
    (and zone (determine-selection (get-skybox~ zone))))
  
  
  (method override (showcase-lighting)
    (cache-texture-lighting))
  
  
  (method override (draw-selection)
    (when selection
      (draw-selection-quad (texture-quad selection))))
  
  
  (method override (ray-closest-element orig <f64vector> dir <f64vector>)
    (let ((entities (cache-elements)))
      (let ((closest #f)
            (distance #f))
        (loop (for n from 0 below (vector-length entities))
              (let ((entity (vector-ref entities n)))
                (let ((poly (texture-quad entity)))
                  (let ((cls (ray-closest-triangle~ poly orig dir #f)))
                    (when cls
                      (bind (poly dist) cls
                        (when (or (not distance)
                                  (< dist distance))
                          (set! closest (list poly dist))
                          (set! distance dist))))))))
        closest)))
  
  
  (method (texture-quad entity)
    (let ((pos (get-position~ entity))
          (half .35))
      (let ((v1 (vertex+ pos (vertex 0. (- half) (- half))))
            (v2 (vertex+ pos (vertex 0. half (- half))))
            (v3 (vertex+ pos (vertex 0. half half)))
            (v4 (vertex+ pos (vertex 0. (- half) half))))
        (make-quad entity v1 v2 v3 v4))))
  
  
  (method override (selection-update selection)
    (let ((zone (current-zone)))
      (let ((designer (get-designer~ zone)))
        (let ((skybox (get-user-data~ selection)))
          (set-property~ designer zone 'start-skybox (and skybox (get-name~ skybox)))
          (if (not skybox)
              (remove-skybox~ zone)
            (install-skybox~ zone skybox))))))))
