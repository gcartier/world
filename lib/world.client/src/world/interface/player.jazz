;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Player
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is WorldScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2014
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See http://github.com/gcartier/world for details.


(module world.interface.player jazz


(import (jazz.jml)
        (jazz.graphic)
        (jazz.graphic.opengl.glew)
        (jazz.platform.cairo)
        (jazz.ui)
        (jazz.ui.window)
        (world.geometry)
        (world.material)
        (world.programs)
        (world.syntax (phase syntax))
        (world.texture))


(definition public (make-world-player name class width height)
  (let ((player (new class name: name))
        (program (new Player-Program)))
    (set-program~ player program)
    (set-array~ player (let ((w (cast <fl> width))
                             (h (cast <fl> height)))
                         (let ((vertices (f32vector 0.0 h   0.0 0.0 0.0 0.0
                                                    w   h   0.0 1.0 0.0 0.0
                                                    0.0 0.0 0.0 0.0 1.0 0.0
                                                    w   0.0 0.0 1.0 1.0 0.0
                                                    0.0 0.0 0.0 0.0 1.0 0.0
                                                    w   h   0.0 1.0 0.0 0.0)))
                           (create-vertices-array~ program vertices))))
    (set-texture~ player (make-cairo-texture width height))
    player))


(class World-Player extends Layout-View
  
  
  (slot program           <object> initialize #f            accessors generate)
  (slot projection-matrix <object> initialize (make-matrix) accessors generate)
  (slot view-matrix       <object> initialize (make-matrix) accessors generate)
  (slot array             <object> initialize #f            accessors generate)
  (slot texture           <object> initialize #f            accessors generate)
  
  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method override (cursor-update evt)
    )
  
  
  ;;;
  ;;;; Draw
  ;;;
  
  
  (method protected virtual (draw-player)
    )
  
  
  ;;;
  ;;;; Render
  ;;;
  
  
  (method public (render-player (matrix #f))
    (draw-player)
    (glEnable GL_BLEND)
    (glDisable GL_DEPTH_TEST)
    (use~ program)
    (bind-uniforms~ program projection-matrix (or matrix view-matrix) (get-id~ texture))
    (glBindVertexArray array)
    (glDrawArrays GL_TRIANGLES 0 6)
    (glBindVertexArray 0)
    (unbind-uniforms~ program)
    (unuse~ program)
    (glEnable GL_DEPTH_TEST)
    (glDisable GL_BLEND))))
