;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Category Icons
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.interface.category jazz


(import (jazz.graphic)
        (jazz.markup)
        (jazz.view)
        (world)
        (world.autoload)
        (world.block)
        (world.context)
        (world.dyes)
        (world.generation.block)
        (world.generation.building)
        (world.generation.categories)
        (world.geometry)
        (world.interface.bars)
        (world.interface.inventory)
        (world.interface.showcase)
        (world.renderer)
        (world.settings)
        (world.syntax (phase syntax)))


(class Category-Icon extends View
  
  
  (form
    (<install> size: {Dimension 48 52}))
  
  
  (method protected virtual (name->category self name)
    )
  
  
  (method (selected-category self)
    (let ((world (current-world)))
      (get-category (get-showcase world))))
  
  
  (method package (selected? self)
    (eq? name (selected-category self)))
  
  
  (method package (select self)
    (let ((world (current-world)))
      (let ((showcase (get-showcase world)))
        (update-category showcase name))))
  
  
  (method override (mouse-up self evt)
    (unless (selected? self)
      (let ((previous (selected-category self)))
        (select self)
        (when previous
          (invalidate-view (child parent previous))))))
  
  
  (method override (draw self surface context)
    (let ((bounds (get-bounds self))
          (texture (get-texture (name->category self name))))
      (blit-surface surface (get-slot-image texture -1))
      (when (selected? self)
        (let ((left (get-left bounds))
              (right (get-right bounds))
              (bottom (get-bottom bounds)))
          (set-line-width surface 2)
          (set-color surface {Color Medium-Gray})
          (move-to surface (+ left 4) (- bottom 2))
          (line-to surface (- right 4) (- bottom 2))))))))
