;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Animations
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.interface.animations jazz


(import (jazz.geometry)
        (world)
        (world.autoload)
        (world.block)
        (world.entity)
        (world.geometry)
        (world.interface.showcase)
        (world.syntax (phase syntax)))


(class Animations-Showcase extends World-Showcase
  
  
  (method override (showcase-showing)
    (let ((world (current-world)))
      (let ((target (first-target~ world)))
        (when (and (is? target Entity)
                   (is-not? target Block))
          target))))
  
  
  (method override (showcase-margin)
    .25)
  
  
  (method override (showcase-spacing)
    .75)
  
  
  (method override (showcase-z)
    -.25)
  
  
  (method override (showcase-elements showing)
    (let ((world (current-world)))
      (if (not showing)
          '()
        (let ((model (cache-model~ showing)))
          (let ((path (get-model~ showing))
                (bounds (get-bounds~ model)))
            (let ((camera (cache-camera))
                  (spacing (showcase-spacing))
                  (width (cuboid-width bounds))
                  (height (cuboid-height bounds))
                  (scaling .25)
                  (x (showcase-x))
                  (y (showcase-y))
                  (z 0.))
              (map (lambda (animation)
                     ;; ignore depth
                     (let ((block? (is? showing Block))
                           (max (max width height)))
                       (let ((class (if block? Block Entity))
                             (offset (if block? .25 0.))
                             (scaling (if block? .5 (if (> max 1.) (/ 1. max) 1.))))
                         (let ((entity (new class parent: self model: path position: (vertex x (+ y offset) z) scale: (vertex scaling scaling scaling) animate?: #t)))
                           (set-camera~ entity camera)
                           (set-lookat~ entity (rotate-lookat& (get-lookat~ entity) PI/2 (get-world-up~ world)))
                           (unless block?
                             (set-animation~ entity animation)
                             (transition-morphing~ entity animation))
                           (increase! z spacing)
                           entity))))
                   (all-animation-names~ model))))))))
  
  
  (method override (showcase-selection entity entities)
    (define (determine-selection animation)
      (find-if (lambda (entity)
                 (equal? animation (get-animation~ entity)))
               entities))
    
    (and entity (determine-selection (get-animation~ entity))))
  
  
  (method override (draw-selection)
    (when selection
      (draw-target-circle~ selection)))
  
  
  (method override (selection-addable?)
    #t)
  
  
  (method override (selection-update selection)
    (let ((world (current-world))
          (zone (current-zone)))
      (let ((model (cache-model~ selection))
            (animation (get-animation~ selection))
            (designer (get-designer~ zone)))
        (for-each (lambda (entity)
                    (when (and (is? entity Entity)
                               (eq? (cache-model~ entity) model))
                      (set-property~ designer entity 'animation animation)
                      (transition-morphing~ entity animation)))
                  (get-target~ world)))))))
