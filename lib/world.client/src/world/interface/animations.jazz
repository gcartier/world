;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; World Animations
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2013
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.interface.animations jazz


(import (jazz.geometry)
        (jazz.graphic.opengl.glew)
        (world)
        (world.autoload)
        (world.draw)
        (world.dye)
        (world.dyes)
        (world.entity)
        (world.generate)
        (world.geometry)
        (world.interface)
        (world.interface.showcase)
        (world.material)
        (world.object)
        (world.opengl)
        (world.syntax (phase syntax))
        (world.texture))


(class Animations-Showcase extends World-Showcase
  
  
  (slot showing  initialize #f getter generate)
  (slot entities initialize #f getter generate)
  
  
  (method override (showcase-spacing)
    .75)
  
  
  (method override (showcase-elements)
    (let ((world (current-world)))
      (define (first-entity)
        (let ((target (first-target~ world)))
          (and target
               (is? target Entity)
               target)))
      
      (define (compute-entities model)
        (let ((path (get-path~ model)))
          (define (collect-animations)
            (let ((animations (get-animations~ model)))
              (if (not animations)
                  (list #f)
                (cons #f (sort di<? (table-keys animations))))))
          
          (let ((spacing (showcase-spacing))
                (scale .25)
                (y -3.2)
                (z 5.))
            (let ((entities
                    (map (lambda (animation)
                           (let ((bounds (get-bounds~ model)))
                             (let ((width (cuboid-width bounds))
                                   (height (cuboid-height bounds)))
                               ;; ignore depth
                               (let ((max (max width height)))
                                 (let ((scale (if (> max 1.) (/ 1. max) 1.)))
                                   (let ((entity (new Entity path: path position: (vertex 0. y z) scale: (vertex scale scale scale) animate?: #t)))
                                     (set-animation~ entity animation)
                                     (transition-morphing~ entity animation)
                                     (decrease! z spacing)
                                     entity))))))
                         (collect-animations))))
              (list->vector entities)))))
      
      (define (determine-target animation entities)
        (find-if (lambda (entity)
                   (eq? animation (get-animation~ entity)))
                 entities))
      
      (let ((entity (first-entity)))
        (let ((model (and entity (get-model~ entity))))
          (if (and entities (eq? model showing))
              entities
            (set! showing model)
            (set! entities (and model (compute-entities model)))
            (set! target (and entity (determine-target (get-animation~ entity) entities)))
            entities)))))


  (method override (draw-elements)
    (let ((entities (showcase-elements)))
      (when entities
        (loop (for n from 0 below (vector-length entities))
              (let ((rank n))
                (let ((entity (vector-ref entities rank)))
                  (draw-entity~ entity)))))))
  
  
  (method override (draw-target)
    (when target
      (draw-actor-target~ target)))
  
  
  (method override (target-addable?)
    #t)
  
  
  (method override (target-update target)
    (let ((world (current-world)))
      (let ((entity (first-target~ world))
            (animation (get-animation~ target)))
        (set-animation~ entity animation)
        (transition-morphing~ entity animation))))))
