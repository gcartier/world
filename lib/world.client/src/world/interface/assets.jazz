;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; World Assets
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2013
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.interface.assets jazz


(import (jazz.io)
        (jazz.jml)
        (jazz.graphic)
        (jazz.graphic.opengl.glew)
        (jazz.library)
        (jazz.literals)
        (jazz.platform)
        (jazz.platform.cairo)
        (jazz.system)
        (jazz.ui)
        (jazz.ui.view)
        (world)
        (world.autoload)
        (world.io)
        (world.interface)
        (world.interface.frame)
        (world.syntax (phase syntax)))


(class Model-Import extends World-Frame
  
  
  (form
    (<install>                                     size: {Dimension 420 639} layout-type: border
      (<caption~>                                  title: "Models")
      (<content~>                                  layout-type: fill
        (<Scroller-View>                           style: document hscroll?: #t vscroll?: #t
          (<content~>                              layout-type: fill
            (<Tree-Header>                         style: document shown?: #f
              (<content~>
                (<Tree-View>          name: models portfolio: :images filled-column: model double-click-handler: {Event-Handler :form on-double-click} return-press-handler: {Event-Handler :form on-return-press} escape-press-handler: {Event-Handler :form on-escape-press}
                  (<Tree-Node-Column> name: model  title: "Model" width: 235 toplevel-controls?: #f display-images?: #f)))))))))
  
  
  (method override (conclude initargs)
    (nextmethod initargs)
    (view-models))
  
  
  (method override (focus-default)
    (acquire-focus~ (get-tree)))
  
  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method (get-tree)
    (locate 'models))
  
  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method (on-double-click evt)
    (add-selected))
  
  
  (method override (on-return-press evt)
    (add-selected))
  
  
  (method override (on-escape-press evt)
    (close))
  
  
  (method (add-selected)
    (let ((world (current-world)))
      (let ((model (get-single-selected-data~ (get-tree))))
        (when model
          (close)
          (add-model~ world model)))))
  
  
  ;;;
  ;;;; Update
  ;;;
  
  
  (method (view-models)
    (let ((world (current-world)))
      (define (partition-models models)
        (partition models key: (lambda (model)
                                 (if (> (length model) 1)
                                     (car model)
                                   ""))
          test: filename=?))
      
      (let ((models (partition-models (map (lambda (path) (split path "/")) (collect-models~ world))))
            (tree (get-tree)))
        (remove-every-row~ tree)
        (with-update-locked
          (lambda ()
            (define (add-children father children)
              (for-each (lambda (model)
                          (let ((path (join model "/"))
                                (title (join (if (> (length model) 1) (cdr model) model) "/")))
                            (add-row~ tree
                              father: father
                              children: (list (new Tree-Node title: title font: {Font Label-User^} color: {Color White}))
                              user-data: path)))
                        children))
            
            (for-each (lambda (partition)
                        (bind (title . children) partition
                          (if (empty-string? title)
                              (add-children #f children)
                            (let ((father (add-row~ tree
                                            state: 'expanded
                                            children: (list (new Tree-Node title: title font: {Font Label-User^} color: {Color red: 220 green: 0 blue: 0})))))
                              (add-children father children)))))
                      models))))))))
