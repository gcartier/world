;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; World Actions
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2013
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.interface.actions jazz


(import (jazz.io)
        (jazz.jml)
        (jazz.graphic)
        (jazz.graphic.opengl.glew)
        (jazz.library)
        (jazz.literals)
        (jazz.platform)
        (jazz.platform.cairo)
        (jazz.system)
        (jazz.ui)
        (jazz.ui.view)
        (world)
        (world.autoload)
        (world.interface)
        (world.interface.pane)
        (world.interface.tooltip)
        (world.parameters)
        (world.syntax (phase syntax)))


;;;
;;;; World-Actionbar
;;;


(class World-Actionbar extends World-Pane
  
  
  (form
    (<install> background: {Color Medium alpha: .75} layout-type: flow layout-padding: 2))
  
  
  (method override (draw-background surface context)
    (let ((world (current-world)))
      (when (get-interface-bars?~ world)
        (nextmethod surface context))))
  
  
  (method override (draw-children surface nodes context)
    (let ((world (current-world)))
      (when (get-interface-bars?~ world)
        (nextmethod surface nodes context)))))


;;;
;;;; World-Action-Button
;;;


(class World-Action-Button extends Action-Icon
  

  (property selected? initialize #f accessors explicit)
  
  
  ;;;
  ;;;; Tooltip
  ;;;
  
  
  (method override (get-tooltip-context pos)
    (define (new-view text)
      (let* ((view (new World-Tooltip-Text size: {Dimension 4000 100}))
             (text-view (get-text~ view))
             (text-model (get-model~ text-view)))
        (set-text~ text-model text)
        (set-size~ view (nu+ (scrollee-content-size~ text-view) {Dimension 2 2}))
        view))
    
    (define (new-border)
      (new Border-View border-type: 'solid border-color: {Color red: .308 green: .381 blue: .448}))
    
    (define (present-text)
      (when tooltip-text
        (let ((shortcut (and (is? action-handler Action) (get-shortcut~ (require-action-item action-handler))))
              (alternate-shortcut (and (is? action-handler Action) (get-alternate-shortcut~ (require-action-item action-handler)))))
          `(<span>
             (<paragraph>
               ,@(if shortcut
                     `((<text> ,tooltip-text)
                       (<text> " ")
                       (<text> color: World-Yellow ,(format "({a})" (present-shortcuts shortcut alternate-shortcut))))
                   `(,tooltip-text)))
             @w
             ""
             @w
             (<paragraph> (<text> color: World-Green "Run at high speed for a short period of time."))))))
    
    (let ((text (present-text))
          (bounds (get-tooltip-bounds pos)))
      (when text
        (new Tooltip-Context
          view: self
          text: text
          bounds: bounds
          new-view: new-view
          new-border: new-border))))
  
  
  ;;;
  ;;;; Drawing
  ;;;
  
  
  (method override (draw-frame surface)
    (define frame-color
      {Color red: .938 green: .938 blue: .005})
    
    (if (and selected? (memq? (get-state) '(inactive highlighted out-pushed)))
        (draw-border surface frame-color frame-color)
      (nextmethod surface)))
  
  
  ;;;
  ;;;; Selected
  ;;;


  (method public (get-selected?)
    selected?)


  (method public (set-selected? flag)
    (when (neq? flag selected?)
      (set! selected? flag)
      (invalidate-view))))


;;;
;;;; World-Parameter-Button
;;;


(class World-Parameter-Button extends World-Action-Button
  
  
  (property parameter initialize #f accessors generate)
  
  
  ;;;
  ;;;; Drawing
  ;;;
  
  
  (method override (draw-frame surface)
    (define frame-color
      {Color red: .938 green: .938 blue: .005})
    
    (if (world-parameter parameter)
        (draw-border surface frame-color frame-color)
      (nextmethod surface)))))
