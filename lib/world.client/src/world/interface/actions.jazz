;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; World Actions
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2013
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.interface.actions jazz


(import (jazz.jml)
        (jazz.graphic)
        (jazz.ui)
        (world)
        (world.autoload)
        (world.interface)
        (world.interface.pane)
        (world.interface.tooltip)
        (world.parameters)
        (world.syntax (phase syntax)))


;;;
;;;; World-Actionbar
;;;


(class World-Actionbar extends World-Pane
  
  
  (form
    (<install> background: {Color Medium alpha: .75} layout-type: flow layout-padding: 2))
  
  
  (method override (draw-background surface context)
    (let ((world (current-world)))
      (when (get-interface-bars?~ world)
        (nextmethod surface context))))
  
  
  (method override (draw-children surface nodes context)
    (let ((world (current-world)))
      (when (get-interface-bars?~ world)
        (nextmethod surface nodes context)))))


;;;
;;;; World-Action-Button
;;;


(class World-Action-Button extends Action-Icon
  

  (property selected? initialize #f accessors explicit)
  
  
  ;;;
  ;;;; Tooltip
  ;;;
  
  
  (method override (get-tooltip-context pos)
    (define (new-view text)
      (let* ((view (new World-Tooltip-Text size: {Dimension 4000 10}))
             (text-view (get-text~ view))
             (text-model (get-model~ text-view)))
        (set-text~ text-model text)
        (let ((size (scrollee-content-size~ text-view))
              (max-width 310))
          (if (< (get-width~ size) max-width)
              (set-size~ view (nu+ (scrollee-content-size~ text-view) {Dimension 2 2}))
            (set-size~ view (nu+ (new Dimension max-width 10) {Dimension 2 2}))
            (set-wrap?~ text-model #t)
            (wrap-content~ text-model '())
            (set-wrap?~ text-model #f)
            (set-size~ view (nu+ (new Dimension (+ (calculate-contour-scrollee-width~ text-model) 2) (get-height~ text-view)) {Dimension 2 2}))))
        view))
    
    (define (new-border)
      (new Border-View border-type: 'solid border-color: {Color red: .308 green: .381 blue: .448}))
    
    (define (present-text)
      (let ((action-item (require-action-item action-handler)))
        (let ((title (get-title~ action-item))
              (shortcut (get-shortcut~ action-item))
              (alternate-shortcut (get-alternate-shortcut~ action-item))
              (description (get-description~ action-item)))
          `(<span>
             (<paragraph>
               ,@(if shortcut
                     `((<text> ,title)
                       (<text> " ")
                       (<text> color: World-Yellow ,(format "({a})" (present-shortcuts shortcut alternate-shortcut))))
                   `(,title)))
             ,@(if description
                   (if (string? description)
                       `(""
                         (<paragraph> (<text> color: World-Green ,description)))
                     `(""
                       ,@(map (lambda (par)
                                (if (string? par)
                                    `(<paragraph> (<text> color: World-Green ,par))
                                  par))
                              description)))
                 '())))))
    
    (let ((text (present-text))
          (bounds (get-tooltip-bounds pos)))
      (when text
        (new Tooltip-Context
          view: self
          text: text
          bounds: bounds
          new-view: new-view
          new-border: new-border))))
  
  
  ;;;
  ;;;; Drawing
  ;;;
  
  
  (method override (draw-frame surface)
    (define frame-color
      {Color red: .938 green: .938 blue: .005})
    
    (if (and selected? (memq? (get-state) '(inactive highlighted out-pushed)))
        (draw-border surface frame-color frame-color)
      (nextmethod surface)))
  
  
  ;;;
  ;;;; Selected
  ;;;


  (method public (get-selected?)
    selected?)


  (method public (set-selected? flag)
    (when (neq? flag selected?)
      (set! selected? flag)
      (invalidate-view))))


;;;
;;;; World-Parameter-Button
;;;


(class World-Parameter-Button extends World-Action-Button
  
  
  (property parameter initialize #f accessors generate)
  
  
  ;;;
  ;;;; Drawing
  ;;;
  
  
  (method override (draw-frame surface)
    (define frame-color
      {Color red: .938 green: .938 blue: .005})
    
    (if (world-parameter parameter)
        (draw-border surface frame-color frame-color)
      (nextmethod surface))))


;;;
;;;; World-Ongoing-Button
;;;


(class World-Ongoing-Button extends World-Action-Button
  
  
  (property key initialize #f accessors generate)
  
  
  (method override (set-state value)
    (nextmethod value)
    (let ((world (current-world)))
      (set-ongoing-key~ world
        (if (memq? value '(pushed out-pushed))
            key
          #f))))))
