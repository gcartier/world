;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Actions
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.interface.actions jazz


(import (jazz.action)
        (jazz.geometry)
        (jazz.graphic)
        (jazz.markup)
        (jazz.ui)
        (world)
        (world.context)
        (world.interface)
        (world.interface.panel)
        (world.interface.tooltip)
        (world.parameters))


;;;
;;;; World-Actionbar
;;;


(class World-Actionbar extends World-Panel
  
  
  ;; YOWNU quick try
  (property auto-show/hide? initialize #f accessors generate)
  
  
  (form
    (<install> background: {Color Medium alpha: .7} layout-type: flow layout-padding: 2))
  
  
  (method package virtual (bar-height self)
    38)
  
  
  (method override (draw-background self surface context)
    (let ((world (current-world)))
      (when (get-interface-bars? world)
        (nextmethod self surface context))))
  
  
  (method override (draw-children self surface nodes context)
    (let ((world (current-world)))
      (when (get-interface-bars? world)
        (nextmethod self surface nodes context)))))


;;;
;;;; World-Iconbar
;;;


(class World-Iconbar extends World-Actionbar
  
  
  (form
    (<install> background: #f))
  
  
  (method override (bar-height self)
    38))


;;;
;;;; World-Radialbar
;;;


(class World-Radialbar extends World-Iconbar
  
  
  (form
    (<install> layout-type: radial layout-insets: {Rect 20 20 20 20}))
  
  
  (method protected (setup-visibility self)
    (for-each (lambda (child)
                (let ((action-item (require-action-item (get-action-handler child))))
                  (set-visible? child (get-visible? action-item))))
              (cdr children)))
  
  
  (method override (draw-children self surface nodes context)
    (set-font surface {Font Label-User})
    (for-each (lambda (child)
                (when (get-visible? child)
                  (let ((bounds (inflate-rect (acquire self child (get-bounds child)) 9 9)))
                    (ellipse surface bounds {Color Black alpha: .0} {Color Black alpha: .45})
                    (unless (eq? child (car children))
                      (let ((action-item (require-action-item (get-action-handler child))))
                        (let ((title (get-title action-item)))
                          (let ((width (get-text-width surface title)))
                            (let ((h (+ (get-left bounds) (center width (rect-width bounds)))))
                              (draw-text surface h (get-bottom bounds) title {Color World-Ochre})))))))))
              children)
    (nextmethod self surface nodes context)))


;;;
;;;; World-Action-Button
;;;


(class World-Action-Button extends Action-Icon
  

  (property selected? initialize #f accessors explicit)
  
  
  (form
    (<install> size: {Dimension 38 38} portfolio: :icons))
  
  
  ;;;
  ;;;; Tooltip
  ;;;
  
  
  (method override (get-tooltip-context self pos)
    (define (present-text)
      (let ((action-item (require-action-item action-handler)))
        (let ((title (get-title action-item))
              (shortcut (get-shortcut action-item))
              (alternate-shortcut (first-alternate-shortcut action-item))
              (description (get-description action-item)))
          `(<span>
             (<paragraph>
               ,@(if shortcut
                     `((<text> ,title)
                       (<text> " ")
                       (<text> color: World-Yellow ,(format "({a})" (shortcuts-present shortcut alternate-shortcut))))
                   `(,title)))
             ,@(if description
                   (if (string? description)
                       `(""
                         (<paragraph> (<text> color: World-Green ,description)))
                     `(""
                       ,@(map (lambda (par)
                                (if (string? par)
                                    `(<paragraph> (<text> color: World-Green ,par))
                                  par))
                              description)))
                 '())))))
    
    ;; quick hack
    (and action-handler
    (let ((text (present-text))
          (bounds (get-tooltip-bounds self pos)))
      (tooltip-context self text bounds))))
  
  
  ;;;
  ;;;; Drawing
  ;;;
  
  
  (method override (draw-frame self surface)
    (define frame-color
      {Color red: .938 green: .938 blue: .005})
    
    (if (and selected? (memq? (get-state self) '(inactive highlighted out-pushed)))
        (draw-border self surface frame-color frame-color)
      (nextmethod self surface)))
  
  
  ;;;
  ;;;; Selected
  ;;;


  (method public (get-selected? self)
    selected?)


  (method public (set-selected? self flag)
    (when (neq? flag selected?)
      (set! selected? flag)
      (invalidate-view self))))


;;;
;;;; World-Parameter-Button
;;;


(class World-Parameter-Button extends World-Action-Button
  
  
  (property parameter initialize #f accessors generate)
  
  
  ;;;
  ;;;; Drawing
  ;;;
  
  
  (method override (draw-frame self surface)
    (define frame-color
      {Color red: .938 green: .938 blue: .005})
    
    (if (world-parameter parameter)
        (draw-border self surface frame-color frame-color)
      (nextmethod self surface))))


;;;
;;;; World-Ongoing-Button
;;;


(class World-Ongoing-Button extends World-Action-Button
  
  
  (property key initialize #f accessors generate)
  
  
  (method override (set-state self value)
    (nextmethod self value)
    (let ((world (current-world)))
      (set-ongoing-key world
        (if (memq? value '(pushed out-pushed))
            key
          #f))))))
