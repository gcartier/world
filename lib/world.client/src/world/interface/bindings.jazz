;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; World Bindings
;;;


(module world.interface.bindings jazz


(import (jazz.jml)
        (jazz.graphic)
        (jazz.graphic.opengl.glew)
        (jazz.library)
        (jazz.literals)
        (jazz.platform)
        (jazz.platform.cairo)
        (jazz.system)
        (jazz.ui)
        (jazz.ui.view)
        (world)
        (world.interface)
        (world.interface.pane))


(class World-Bindings-Viewer extends Pane
  
  
  (form
    (<install>                                              size: {Dimension 420 639} layout-type: border
      (<Border-View>                   name: actions-border location: center border-type: edge style: entry
        (<Scroller-View>                                    style: document hscroll?: #t vscroll?: #t
          (<content~>                                       layout-type: fill
            (<Tree-Header>                                  style: document shown?: #t
              (<content~>
                (<Tree-View>           name: actions        portfolio: :images filled-column: action
                  (<Tree-Node-Column>  name: action         title: "Action" width: 235 toplevel-controls?: #f)
                  (<Tree-Label-Column> name: shortcut       title: "Shortcut" width: 115)))))))))
  
  
  (method override (conclude initargs)
    (nextmethod initargs)
    (view-bindings))
  
  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method (get-tree)
    (locate 'actions))
  
  
  ;;;
  ;;;; Update
  ;;;
  
  
  (method (view-bindings)
    (let ((appl (get-application)))
      (let ((designer (get-bindings-designer~ appl))
            (bindings (get-bindings))
            (tree (get-tree)))
        (define (view-actions-flat)
          (for-each (lambda (actions)
                      (when (is? actions Actions)
                        (for-each (lambda (action)
                                    (let ((shortcut (get-shortcut~ action)))
                                      (add-row~ tree children: (list (new Tree-Node title: (format "{a}:{a}" (get-name~ actions) (get-name~ action)) color: {Color White})
                                                                     (new Tree-Label title: (present-shortcut shortcut) color: {Color White}))
                                        user-data: action)))
                                  (get-children~ actions))))
                    (list (find-actions 'world))))
        
        (define (present-shortcut shortcut)
          (if (not shortcut)
              ""
            (present~ shortcut)))
        
        (remove-every-row~ tree)
        (with-update-locked
          (lambda ()
            (view-actions-flat))))))))
