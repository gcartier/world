;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Bindings Frame
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.interface.bindings jazz


(import (jazz.action)
        (jazz.application)
        (jazz.graphic)
        (jazz.handler)
        (jazz.markup)
        (jazz.outline)
        (jazz.tree)
        (jazz.ui)
        (world.client.actions)
        (world.interface)
        (world.interface.frame))


(class World-Bindings-Viewer extends World-Frame
  
  
  (property show-uninstalled? initialize #f accessors generate)
  
  
  (form
    (<install>                                              size: {Dimension 420 639} layout-type: border background: {Color red: .000 green: .000 blue: .000 alpha: .500}
      (<caption~>                                           title: "Key Bindings"
        (<Push-Button>                 name: toggle-show    title: "Show All" style: text background: #f position: {Point 4 0} size: {Dimension 100 22} action-handler: {Event-Handler :form on-toggle-show-uninstalled?}))
      (<content~>                                           layout-type: fill
        (<Scroller-View>                                    style: document hscroll?: #t vscroll?: #t
          (<content~>                                       layout-type: fill
            (<Tree-Header>                                  style: document shown?: #f
              (<content~>
                (<Tree-View>           name: actions        portfolio: :images filled-column: action background: #f
                  (<Tree-Node-Column>  name: action         title: "Action" width: 235 toplevel-controls?: #f display-images?: #f display-levels?: #f)
                  (<Tree-Label-Column> name: shortcut       title: "Shortcut" width: 185)))))))))
  
  
  (method override (conclude self initargs)
    (nextmethod self initargs)
    (view-bindings self))
  
  
  (method override (focus-default self)
    (acquire-focus (get-tree self)))
  
  
  (method (on-toggle-show-uninstalled? self evt)
    (set! show-uninstalled? (not show-uninstalled?))
    (set-title (child (locate self 'caption) 'toggle-show) (if show-uninstalled? "Show Active" "Show All"))
    (view-bindings self))
  
  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method package (get-tree self)
    (locate self 'actions))
  
  
  ;;;
  ;;;; Update
  ;;;
  
  
  (method package (view-bindings self)
    (let ((appl (current-application)))
      (let ((designer (get-bindings-designer appl))
            (bindings (current-bindings))
            (tree (get-tree self)))
        (define (view-actions-flat)
          (for-each (lambda (actions)
                      (let ((children (get-visible-children actions)))
                        (unless (null? children)
                          (let ((installed-actions
                                  (collect (lambda (action)
                                             (and (get-visible? action)
                                                  (get-title action)
                                                  (let ((shortcut (get-shortcut action)))
                                                    (and (or show-uninstalled?
                                                             (and shortcut (not-null? (get-allowed-actions appl shortcut))))
                                                         action))))
                                           children)))
                            (when (not-null? installed-actions)
                              (let ((father (add-row tree
                                                     state: 'expanded
                                                     children: (list (new Tree-Node title: (get-title actions) font: {Font Label-User} color: {Color red: 220 green: 0 blue: 0})
                                                                     (new Tree-Label title: "" font: {Font Label-User} color: {Color White}))
                                                     user-data: actions)))
                                (for-each (lambda (action)
                                            (let ((title (get-title action))
                                                  (shortcut (get-shortcut action))
                                                  (alternate-shortcut (first-alternate-shortcut action)))
                                              (let ((font {Font Label-User})
                                                    (color (if (and shortcut (not-null? (get-allowed-actions appl shortcut)))
                                                               {Color World-Blue}
                                                             {Color Medium-Gray})))
                                                (add-row tree
                                                         father: father
                                                         children: (list (new Tree-Node title: title font: font color: color)
                                                                         (new Tree-Label title: (shortcuts-present shortcut alternate-shortcut) font: font color: color))
                                                         user-data: action))))
                                          installed-actions)))))))
                    (collect-type World-Actions (get-visible-children (current-bindings)))))
        
        (remove-every-row tree)
        (with-update-locked self
          (lambda ()
            (view-actions-flat))))))))
