;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Bindings Frame
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is WorldScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2014
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See http://github.com/gcartier/world for details.


(module world.interface.bindings jazz


(import (jazz.jml)
        (jazz.graphic)
        (jazz.system)
        (jazz.ui)
        (world.client.actions)
        (world.interface)
        (world.interface.frame))


(class World-Bindings-Viewer extends World-Frame
  
  
  (form
    (<install>                                              size: {Dimension 420 639} layout-type: border
      (<caption~>                                           title: "Key Bindings")
      (<content~>                                           layout-type: fill
        (<Scroller-View>                                    style: document hscroll?: #t vscroll?: #t
          (<content~>                                       layout-type: fill
            (<Tree-Header>                                  style: document shown?: #f
              (<content~>
                (<Tree-View>           name: actions        portfolio: :images filled-column: action
                  (<Tree-Node-Column>  name: action         title: "Action" width: 235 toplevel-controls?: #f display-images?: #f)
                  (<Tree-Label-Column> name: shortcut       title: "Shortcut" width: 185)))))))))
  
  
  (method override (conclude initargs)
    (nextmethod initargs)
    (view-bindings))
  
  
  (method override (focus-default)
    (acquire-focus~ (get-tree)))
  
  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method (get-tree)
    (locate 'actions))
  
  
  ;;;
  ;;;; Update
  ;;;
  
  
  (method (view-bindings)
    (let ((appl (get-application)))
      (let ((designer (get-bindings-designer~ appl))
            (bindings (get-bindings))
            (tree (get-tree)))
        (define (view-actions-flat)
          (for-each (lambda (actions)
                      (let ((children (get-visible-children~ actions)))
                        (unless (null? children)
                          (let ((father (add-row~ tree
                                          state: 'expanded
                                          children: (list (new Tree-Node title: (get-title~ actions) font: {Font Label-User} color: {Color red: 220 green: 0 blue: 0})
                                                          (new Tree-Label title: "" font: {Font Label-User} color: {Color White}))
                                          user-data: actions)))
                            (for-each (lambda (action)
                                        (when (get-visible?~ action)
                                          (let ((title (get-title~ action)))
                                            (when title
                                              (let ((shortcut (get-shortcut~ action))
                                                    (alternate-shortcut (get-alternate-shortcut~ action)))
                                                (add-row~ tree
                                                  father: father
                                                  children: (list (new Tree-Node title: title font: {Font Label-User} color: {Color White})
                                                                  (new Tree-Label title: (present-shortcuts shortcut alternate-shortcut) font: {Font Label-User} color: {Color White}))
                                                  user-data: action))))))
                                      children)))))
                    (collect-type World-Actions (get-children~ (get-bindings)))))
        
        (remove-every-row~ tree)
        (with-update-locked
          (lambda ()
            (view-actions-flat))))))))
