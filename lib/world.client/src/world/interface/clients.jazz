;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; Client Open
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2016
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.interface.clients jazz


(import (jazz.graphic)
        (jazz.handler)
        (jazz.io)
        (jazz.jml)
        (jazz.tree)
        (jazz.ui)
        (world)
        (world.autoload)
        (world.io)
        (world.interface.frame)
        (world.syntax (phase syntax))
        (world.task)
        (world.window))


(class Client-Open extends World-Frame
  
  
  (form
    (<install>                      size: {Dimension 420 639} layout-type: border
      (<caption~>                   title: "Clients")
      (<content~>                   layout-type: fill
        (<Clients-View> name: zones))))
  
  
  (method override (focus-default)
    (acquire-focus~ (get-tree)))
  
  
  (method (get-tree)
    (locate '(zones zones))))


;;;
;;;; Clients-View
;;;


(class Clients-View extends Scroller-View
  
  
  (form
    (<install>                                style: document hscroll?: #t vscroll?: #t
      (<content~>                             layout-type: fill
        (<Tree-Header>                        style: document shown?: #f
          (<content~>
            (<Tree-View>          name: zones portfolio: :images filled-column: zone multiple-selection?: #t background: #f double-click-handler: {Event-Handler :form on-double-click} return-press-handler: {Event-Handler :form on-return-press} escape-press-handler: {Event-Handler :form on-escape-press}
              (<Tree-Node-Column> name: zone  title: "Client" width: 235 toplevel-controls?: #f display-images?: #f display-levels?: #f)))))))
    
  
  (method override (conclude initargs)
    (nextmethod initargs)
    (view-clients))

  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method (get-tree)
    (locate 'zones))
  
  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method (on-double-click evt)
    (open-selected))
  
  
  (method override (on-return-press evt)
    (open-selected))
  
  
  (method override (on-escape-press evt)
    (close~ (find-ascendant World-Frame)))
  
  
  (method (open-selected)
    (let ((world (current-world)))
      (let ((file (get-single-selected-data~ (get-tree))))
        (when file
          (close~ (find-ascendant World-Frame))
          (open-file file)))))
  
  
  (method (open-file file)
    (with-window-cursor :wait
      (lambda ()
        (let ((world (current-world)))
          (let ((zone (open-zone file kind: 'client)))
            (display-message~ world (get-title~ zone)))))))
  
  
  ;;;
  ;;;; Update
  ;;;
  
  
  (method (view-clients)
    (let ((world (current-world)))
      (define (collect-clients)
        (let ((directory (get-clients-directory~ world))
              (queue (new-queue)))
          (when (exists?~ directory)
            (iterate-directory~ directory
              (lambda (dir)
                (let ((client (new-file~ dir ".client")))
                  (when (exists?~ client)
                    (let ((file (zone-file dir)))
                      (when (exists?~ file)
                        (enqueue queue file))))))
              files?: #f
              directories?: #t
              recursive?: #f))
          (queue-list queue)))
      
      (let ((tree (get-tree)))
        (remove-every-row~ tree)
        (with-update-locked
          (lambda ()
            (for-each (lambda (file)
                        (let ((title (get-name~ (get-parent~ file))))
                          (add-row~ tree
                            children: (list (new Tree-Node title: title font: {Font Label-User} color: {Color White}))
                            user-data: file)))
                      (sort ci<? (collect-clients) key: (lambda (file) (get-name~ (get-parent~ file)))))
            (select-first-data~ tree))))))))
