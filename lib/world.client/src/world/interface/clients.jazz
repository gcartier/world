;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; Client Open
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2016
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.interface.clients jazz


(import (jazz.graphic)
        (jazz.handler)
        (jazz.io)
        (jazz.jml)
        (jazz.tree)
        (jazz.ui)
        (world)
        (world.autoload)
        (world.io)
        (world.interface.frame)
        (world.interface.zones)
        (world.syntax (phase syntax))
        (world.task)
        (world.window))


(class Client-Open extends Zone-Open
  
  
  (form
    (<install>
      (<caption~> title: "Clients")))
  
  
  (method override (form-model form)
    (case (get-name~ form)
      ((zones) Clients-View)
      (else (nextmethod form)))))


;;;
;;;; Clients-View
;;;


(class Clients-View extends Zones-View
  
  
  ;;;
  ;;;; Open
  ;;;
  
  
  (method override (open-file file)
    (with-window-cursor :wait
      (lambda ()
        (let ((world (current-world)))
          (let ((zone (open-zone file kind: 'client)))
            (display-message~ world (get-title~ zone)))))))
  
  
  ;;;
  ;;;; Update
  ;;;
  
  
  (method override (view-zones)
    (let ((world (current-world)))
      (define (collect-clients)
        (let ((directory (get-clients-directory~ world))
              (queue (new-queue)))
          (when (exists?~ directory)
            (iterate-directory~ directory
              (lambda (dir)
                (let ((client (new-file~ dir ".client")))
                  (when (exists?~ client)
                    (let ((file (zone-file dir)))
                      (enqueue queue file)))))
              files?: #f
              directories?: #t
              recursive?: #f))
          (queue-list queue)))
      
      (let ((tree (get-tree)))
        (remove-every-row~ tree)
        (with-update-locked
          (lambda ()
            (for-each (lambda (file)
                        (let ((title (get-name~ (get-parent~ file))))
                          (add-row~ tree
                            children: (list (new Tree-Node title: title font: {Font Label-User} color: {Color White}))
                            user-data: file)))
                      (sort ci<? (collect-clients) key: (lambda (file) (get-name~ (get-parent~ file)))))
            (select-first-data~ tree))))))))
