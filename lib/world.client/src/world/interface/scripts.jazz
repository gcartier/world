;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Scripts
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.interface.scripts jazz


(import (jazz.io)
        (jazz.graphic)
        (jazz.handler)
        (jazz.markup)
        (jazz.outline)
        (jazz.tree)
        (jazz.ui)
        (world)
        (world.context)
        (world.interface.frame)
        (world.settings))


(class Script-Run extends World-Frame
  
  
  (form
    (<install>                                      size: {Dimension 420 639} layout-type: border
      (<caption~>                                   title: "Scripts")
      (<content~>                                   layout-type: fill
        (<Scroller-View>                            style: document hscroll?: #t vscroll?: #t
          (<content~>                               layout-type: fill
            (<Tree-Header>                          style: document shown?: #f
              (<content~>
                (<Tree-View>          name: scripts portfolio: :images filled-column: script background: #f double-click-handler: {Event-Handler :form on-double-click} return-press-handler: {Event-Handler :form on-return-press} escape-press-handler: {Event-Handler :form on-escape-press}
                  (<Tree-Node-Column> name: script  title: "Script" width: 235 toplevel-controls?: #f display-images?: #f display-levels?: #f)))))))))
  
  
  (method override (conclude self initargs)
    (nextmethod self initargs)
    (view-scripts self))
  
  
  (method override (focus-default self)
    (acquire-focus (get-tree self)))
  
  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method package (get-tree self)
    (locate self 'scripts))
  
  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method (on-double-click self evt)
    (add-selected self))
  
  
  (method override (on-return-press self evt)
    (add-selected self))
  
  
  (method override (on-escape-press self evt)
    (close self))
  
  
  (method (add-selected self)
    (let ((world (current-world)))
      (let ((script (get-single-selected-data (get-tree self))))
        (when script
          (close self)
          (run-script world script)))))
  
  
  ;;;
  ;;;; Update
  ;;;
  
  
  (method (view-scripts self)
    (let ((world (current-world)))
      (let ((user? (user?))
            (scripts (partition-scripts world (collect-scripts world)))
            (tree (get-tree self)))
        (remove-every-row tree)
        (with-update-locked self
          (lambda ()
            (define (add-children father children)
              (for-each (lambda (script)
                          (let ((path (get-path script)))
                            (let ((title (filename-spine (join (if (> (length path) 1) (cdr path) path) "."))))
                              (add-row tree
                                father: father
                                children: (list (new Tree-Node title: title font: {Font Label-User} color: {Color White}))
                                user-data: script))))
                        children))
            
            (for-each (lambda (partition)
                        (bind (title . children) partition
                          (unless (and user? (filename=? title "tutorial"))
                            (if (empty-string? title)
                                (add-children #f children)
                              (let ((father (add-row tree
                                              state: 'expanded
                                              children: (list (new Tree-Node title: title font: {Font Label-User} color: {Color red: 220 green: 0 blue: 0})))))
                                (add-children father children))))))
                      scripts))))))))
