;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Panes
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2016
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.interface.pane jazz


(import (jazz.ui)
        (world)
        (world.autoload)
        (world.syntax (phase syntax)))


(definition pane-stack
  '())

(definition protected (get-pane-stack)
  pane-stack)


(definition protected (top-pane)
  (and (not-null? pane-stack)
       (car pane-stack)))


(definition public (push-pane pane)
  (let ((top (top-pane)))
    (when top
      (set-visible?~ top #f)))
  (set! pane-stack (cons pane pane-stack)))


(definition public (pop-pane pane)
  (let ((top (top-pane)))
    (when (eq? top pane)
      (set! pane-stack (cdr pane-stack))
      (when (not-null? pane-stack)
        (set-visible?~ (car pane-stack) #t)))))


;;;
;;;; World-Pane
;;;


(class World-Pane extends Layout-View
  
  
  (property layouter initialize #f getter generate setter explicit)
  
  
  (slot moving?        initialize #f)
  (slot start-mouse    initialize #f)
  (slot start-position initialize #f)
  
  
  (method override (destroy)
    (nextmethod)
    (pop-pane self))
  
  
  (method protected virtual (tooltip-default-popup?)
    #f)
  
  
  (method (set-layouter proc)
    (set! layouter proc)
    (when layouter
      (layouter self)))
  
  
  (method (move-pane-down origin pos)
    (let ((interface (current-interface)))
      (set! moving? #t)
      (set! start-mouse (acquire~ interface origin pos))
      (set! start-position (get-position))
      (acquire-capture~ origin)))
  
  
  (method (move-pane-drag origin pos)
    (let ((interface (current-interface)))
      (when moving?
        (let ((delta (nu- (acquire~ interface origin pos) start-mouse)))
          (let ((pos (nu+ start-position delta)))
            (set-location (list (get-h~ pos) (get-v~ pos)))
            (set-position (nu+ start-position delta)))))))
  
  
  (method (move-pane-up origin pos)
    (when moving?
      (release-capture~ origin)
      (set! moving? #f)))))
