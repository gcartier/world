;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; World Info Pane
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2013
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.interface.info jazz


(import (jazz.jml)
        (jazz.graphic)
        (jazz.graphic.opengl.glew)
        (jazz.library)
        (jazz.literals)
        (jazz.platform)
        (jazz.platform.cairo)
        (jazz.system)
        (jazz.ui)
        (jazz.ui.view)
        (world)
        (world.autoload)
        (world.info)
        (world.interface)
        (world.interface.pane)
        (world.texture)
        (world.syntax (phase syntax)))


(class Info-Pane extends World-Pane
  
  
  (form
    (<install>                                        size: {Dimension 420 639} background: {Color red: .000 green: .000 blue: .000 alpha: .650} layout-type: border layout-type: fill
      (<Border-View>                                  border-color: {Color Medium-Gray} border-type: edge style: entry layout-type: fill
        (<Scroller-View>                              style: document hscroll?: #t vscroll?: #t
          (<content~>                                 layout-type: fill
            (<Tree-Header>                            style: document shown?: #f
              (<content~>
                (<Info-Tree>           name: info     portfolio: :images filled-column: value show-unfocused-selection?: #f
                  (<Tree-Node-Column>  name: property title: "Property" width: 150 toplevel-controls?: #f display-images?: #f)
                  (<Tree-Label-Column> name: value    title: "Value" width: 65)))))))))
  
  
  (method (view-info)
    (let ((tree (locate 'info))
          (section-color {Color red: 220 green: 0 blue: 0})
          (content-color {Color Light-Gray}))
      (remove-every-row~ tree)
        (with-update-locked
          (lambda ()
            (define (add-section title (info #f))
              (add-row~ tree
                state: 'expanded
                children: (list (new Tree-Node title: title font: {Font Label-User^} color: section-color)
                                (new Tree-Label title: (if info (->string info) "") font: {Font Label-User^} color: content-color))))
            
            (define (add-info father title info)
              (add-row~ tree
                father: father
                state: 'expanded
                children: (list (new Tree-Node title: title font: {Font Label-User^} color: content-color)
                                (new Tree-Label title: (->string info) font: {Font Label-User^} color: content-color))))
            
            (let ((sections (map car (registered-infos)))
                  (display (find-setting 'world.info-display #f)))
              (let ((effective-sections (if display (collect-if registered-info? display) sections)))
                (for-each (lambda (section)
                            (let ((proc (registered-info section)))
                              (proc add-section add-info)))
                          effective-sections))))))))


;;;
;;;; Info-Tree
;;;


(class Info-Tree extends Tree-View
  
  
  (method override (mouse-down evt)
    )))
