;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Info Pane
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is WorldScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2014
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See http://github.com/gcartier/world for details.


(module world.interface.info jazz


(import (jazz.jml)
        (jazz.graphic)
        (jazz.system)
        (jazz.ui)
        (world.info)
        (world.interface.pane)
        (world.settings)
        (world.syntax (phase syntax)))


(class Info-Pane extends World-Pane
  
  
  (form
    (<install>                                        size: {Dimension 420 639} background: {Color red: .000 green: .000 blue: .000 alpha: .650} layout-type: border layout-type: fill
      (<Border-View>                                  border-color: {Color Medium-Gray} border-type: edge style: entry layout-type: fill
        (<Scroller-View>                              style: document hscroll?: #t vscroll?: #t
          (<content~>                                 layout-type: fill
            (<Tree-Header>                            style: document shown?: #f
              (<content~>
                (<Info-Tree>           name: info     portfolio: :images filled-column: value show-unfocused-selection?: #f
                  (<Tree-Node-Column>  name: property title: "Property" width: 150 toplevel-controls?: #f display-images?: #f display-levels?: #f)
                  (<Tree-Label-Column> name: value    title: "Value" width: 65)))))))))
  
  
  (method (view-info)
    (let ((tree (locate 'info))
          (section-color {Color red: 220 green: 0 blue: 0})
          (content-color {Color Light-Gray}))
      (remove-every-row~ tree)
      (with-update-locked
        (lambda ()
          (define (add-section title (info #f))
            (add-row~ tree
              state: 'expanded
              children: (list (new Tree-Node title: title font: {Font Label-User} color: section-color)
                              (new Tree-Label title: (if info (->string info) "") font: {Font Label-User} color: content-color))))
          
          (define (add-info father title info)
            (add-row~ tree
              father: father
              state: 'expanded
              children: (list (new Tree-Node title: title font: {Font Label-User} color: content-color)
                              (new Tree-Label title: (->string info) font: {Font Label-User} color: content-color))))
          
          (let ((sections (map car (registered-infos)))
                (display (world-setting 'world.info-display #f)))
            (let ((effective-sections (if display (collect-if registered-info? display) sections)))
              (for-each (lambda (section)
                          (let ((proc (registered-info section)))
                            (proc add-section add-info)))
                        effective-sections))))))))


;;;
;;;; Info-Tree
;;;


(class Info-Tree extends Tree-View
  
  
  (method override (mouse-down evt)
    )))
