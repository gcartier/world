;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Documents
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is WorldScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2014
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See http://github.com/gcartier/world for details.


(module world.interface.documents jazz


(import (jazz.jml)
        (jazz.graphic)
        (jazz.ui)
        (world)
        (world.autoload)
        (world.interface.frame)
        (world.syntax (phase syntax)))


(definition public (open-document file (class: class #f) (location: location #f) (size: size #f) (editable?: editable? #f))
  (let ((world (current-world)))
    (let ((interface (get-interface~ world)))
      (let ((pane (new World-Document parent: interface size: (or size {Dimension 460 639}) location: (or location 'center) layout-type: 'border)))
        (set-title~ (locate~ pane 'caption) (get-base~ file))
        (let ((content (locate~ pane 'content)))
          (set-layout-type~ content 'fill)
          (let ((scroller (new Scroller-View parent: content style: 'document hscroll?: #t vscroll?: #t)))
            (let ((content (get-content~ scroller)))
              (set-layout-type~ content 'fill)
              (let ((text (new (or class Plain-Text-View) parent: content editable?: editable?)))
                (set-moniker~ (get-document-controller~ text) file)
                (set-client~ scroller text)))))
        (layout-view~ interface)
        (set-interface?~ world #t)
        (focus-default~ pane)
        pane))))


(class World-Document extends World-Frame
  
  
  (form
    (<install> background: {Color red: .000 green: .000 blue: .000 alpha: .650})))


(class World-Formatted-Text-View extends Plain-Formatted-Text-View
  
  
  (method override (new-model)
    (new Formatted-Text-Model base-style: {Text-Style font: {Font Text shadow: thin antialias: none} color: {Color White}} left-padding: 8))
  
  
  (method override (install rest)
    (nextmethod rest)
    ;; Screen Formats
    (add-format 'Heading1 {Format Base})
    (add-format 'Heading2 {Format Base})
    (add-format 'Heading3 {Format Base})
    ;; Screen Styles
    (add-style 'Heading1  {Text-Style Base font: {Font Heading1^} color: {Color Dark-Red}})
    (add-style 'Heading2  {Text-Style Base font: {Font Heading2^} color: {Color Dark-Red}})
    (add-style 'Heading3  {Text-Style Base font: {Font Heading3^} color: {Color Dark-Red}}))))
