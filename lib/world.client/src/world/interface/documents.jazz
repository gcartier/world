;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Documents
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.interface.documents jazz


(import (jazz.component)
        (jazz.document)
        (jazz.graphic)
        (jazz.io)
        (jazz.markup)
        (jazz.text)
        (jazz.ui)
        (jazz.view)
        (world)
        (world.context)
        (world.interface.frame)
        (world.interface.text))


(definition public (open-world-document file/string (class: class #f) (name: name #f) (title: title #f) (movable?: movable? #t) (closable?: closable? #t) (closer: closer #f) (location: location #f) (size: size #f) (background: background #f) (selectable?: selectable? #t) (editable?: editable? #f))
  (let ((interface (current-interface))
        (world (current-world)))
    (let ((frame (new World-Document parent: interface name: name size: (or size {Dimension 460 639}) location: (or location 'center) layout-type: 'border)))
      (let ((caption (locate frame 'caption)))
        (when (or title (file? file/string))
          (set-title caption (or title (get-base file/string))))
        (set-movable? caption movable?)
        (set-closable? caption closable?))
      (set-closer frame closer)
      (when background
        (set-background frame background))
      (let ((content (locate frame 'content)))
        (set-layout-type content 'fill)
        (let ((scroller (new Scroller-View parent: content style: 'document hscroll?: #t vscroll?: #t)))
          (let ((content (get-content scroller)))
            (set-layout-type content 'fill)
            (let ((text (new (or class World-Text-View) parent: content background: #f selectable?: selectable? editable?: editable?)))
              (if (file? file/string)
                  (set-moniker (get-document-controller text) file/string)
                (let ((model (get-model text)))
                  (set-formatted-content model (read-formatted-string model file/string))))
              (set-client scroller text)))))
      (layout-view interface)
      (set-interface? world #t)
      (focus-default frame)
      frame)))


(class World-Document extends World-Frame
  
  
  (form
    (<install> background: {Color red: .000 green: .000 blue: .000 alpha: .450})))


(class World-Formatted-Text-View extends Plain-Formatted-Text-View
  
  
  (method override (new-model self)
    (new Formatted-Text-Model base-style: {Text-Style font: {Font Text shadow: thin} color: {Color White}} left-padding: 8))
  
  
  (method override (install self rest)
    (nextmethod self rest)
    ;; Screen Formats
    (add-format self 'Heading1 {Format Base})
    (add-format self 'Heading2 {Format Base})
    (add-format self 'Heading3 {Format Base})
    ;; Screen Styles
    (add-style self 'Heading1  {Text-Style Base font: {Font Heading1} color: {Color Dark-Red}})
    (add-style self 'Heading2  {Text-Style Base font: {Font Heading2} color: {Color Dark-Red}})
    (add-style self 'Heading3  {Text-Style Base font: {Font Heading3} color: {Color Dark-Red}}))))
