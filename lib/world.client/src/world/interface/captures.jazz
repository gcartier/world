;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; Audio Captures
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.interface.captures jazz


(import (jazz.io)
        (jazz.graphic)
        (jazz.handler)
        (jazz.markup)
        (jazz.outline)
        (jazz.tree)
        (jazz.ui)
        (world)
        (world.context)
        (world.interface.frame)
        (world.settings))


(class Captures-Viewer extends World-Frame
  
  
  (form
    (<install>                                      size: {Dimension 420 639} layout-type: border
      (<caption~>                                   title: "Captures")
      (<content~>                                   layout-type: fill
        (<Scroller-View>                            style: document hscroll?: #t vscroll?: #t
          (<content~>                               layout-type: fill
            (<Tree-Header>                          style: document shown?: #f
              (<content~>
                (<Captures-Tree>     name: captures portfolio: :images filled-column: capture background: #f action-handler: {Event-Handler :form on-action} escape-press-handler: {Event-Handler :form on-escape-press}
                  (<Captures-Column> name: capture  title: "Capture" width: 235 toplevel-controls?: #f display-images?: #f display-levels?: #f)))))))))
  
  
  (method override (conclude self initargs)
    (nextmethod self initargs)
    (view-captures self))
  
  
  (method override (focus-default self)
    (acquire-focus (get-tree self)))
  
  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method package (get-tree self)
    (locate self 'captures))
  
  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method (on-action self evt)
    (play-selected self))
  
  
  (method override (on-escape-press self evt)
    (close self))
  
  
  (method (play-selected self)
    (let ((world (current-world)))
      (let ((capture (get-single-selected-data (get-tree self))))
        (when capture
          (terminal capture)))))
  
  
  ;;;
  ;;;; Update
  ;;;
  
  
  (method (view-captures self)
    (let ((world (current-world)))
      (let ((tree (get-tree self)))
        (remove-every-row tree)
        (with-update-locked self
          (lambda ()
            (define (add-children father dir)
              (iterate-directory dir
                (lambda (file)
                  (let ((title (get-base file)))
                    (add-row tree
                             father: father
                             children: (list (new Tree-Node title: title font: {Font Label-User} color: {Color White}))
                             user-data: file)))
                recursive?: #f))
            
            (let ((first? #t))
              (iterate-directory {Directory Documents "captures"}
                (lambda (dir)
                  (if first?
                      (set! first? #f)
                    (add-row tree
                             state: 'collapsed
                             children: (list (new Tree-Node title: "" font: {Font Label-User} color: {Color White}))))
                  (let ((title (get-base dir)))
                    (let ((father (add-row tree
                                           state: 'expanded
                                           children: (list (new Tree-Node title: title font: {Font Label-User} color: {Color red: 220 green: 0 blue: 0})))))
                      (add-children father dir))))
                files?: #f
                directories?: #t
                recursive?: #f))))))))


;;;
;;;; Captures-Tree
;;;


(class Captures-Tree extends Tree-View)


;;;
;;;; Captures-Column
;;;


(class Captures-Column extends Tree-Node-Column
  
  
  (method override (draw-background self surface context row data width height)
    )
  
  
  (method override (cell-color self color context)
    color)))
