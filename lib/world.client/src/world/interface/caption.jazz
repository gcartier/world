;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Captions
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2016
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.interface.caption jazz


(import (jazz.geometry)
        (jazz.graphic)
        (jazz.view)
        (world.interface.pane))


;;;
;;;; World-Caption
;;;


(class World-Caption extends View
  
  
  (slot movable?  initialize #t accessors generate)
  (slot closable? initialize #t accessors generate)
  
  
  ;;;
  ;;;; Pane
  ;;;
  
  
  (method (find-pane)
    (find-ascendant World-Pane))
  
  
  ;;;
  ;;;; Draw
  ;;;
  
  
  (method override (draw surface context)
    (let ((width (get-width))
          (height (get-height)))
      (set-color~ surface {Color red: .308 green: .381 blue: .448})
      (set-line-width~ surface 1)
      (line~ surface 0 (- height 1) width (- height 1))
      (when closable?
        (set-color~ surface {Color World-Caption})
        (set-line-width~ surface 1.5)
        (line~ surface (- width 13) 6 (- width 5) 14)
        (line~ surface (- width 5) 6 (- width 13) 14)))
    (when title
      (let ((extent (get-text-extent~ surface title)))
        (let ((pos (center extent size)))
          (set-font~ surface {Font Label-User})
          (draw-text~ surface (get-h~ pos) (get-v~ pos) title {Color World-Caption})))))
  
  
  ;;;
  ;;;; Mouse
  ;;;
  
  
  (method override (mouse-down evt)
    (when movable?
      (let ((pane (find-pane))
            (pos (get-position~ evt)))
        (unless (in-close? pos)
          (move-pane-down~ pane self pos)))))
  
  
  (method override (mouse-up evt)
    (let ((pane (find-pane))
          (pos (get-position~ evt)))
      (when (in-close? pos)
        (close~ pane))))
  
  
  (method override (drag-move evt)
    (when movable?
      (let ((pane (find-pane))
            (pos (get-position~ evt)))
        (move-pane-drag~ pane self pos))))
  
  
  (method override (drag-up evt . rest)
    (when movable?
      (let ((pane (find-pane))
            (pos (get-position~ evt)))
        (move-pane-up~ pane self pos))))
  
  
  (method (in-close? pos)
    (and closable?
         (let ((width (get-width))
               (height (get-height)))
           (in-rect? pos (new Rect (- width 20) 0 width 20)))))))
