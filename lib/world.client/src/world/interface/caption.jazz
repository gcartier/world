;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Captions
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.interface.caption jazz


(import (jazz.geometry)
        (jazz.graphic)
        (jazz.view)
        (world.interface.panel))


;;;
;;;; World-Caption
;;;


(class World-Caption extends View
  
  
  (slot movable?  initialize #t accessors generate)
  (slot closable? initialize #t accessors generate)
  
  
  ;;;
  ;;;; Panel
  ;;;
  
  
  (method (find-panel self)
    (find-ascendant self World-Panel))
  
  
  ;;;
  ;;;; Draw
  ;;;
  
  
  (method override (draw self surface context)
    (let ((width (get-width self))
          (height (get-height self)))
      (set-color surface {Color red: .308 green: .381 blue: .448})
      (set-line-width surface 1)
      (line surface 0 (- height 1) width (- height 1))
      (when closable?
        (set-color surface {Color World-Caption})
        (set-line-width surface 1.5)
        (line surface (- width 13) 6 (- width 5) 14)
        (line surface (- width 5) 6 (- width 13) 14)))
    (when title
      (let ((extent (get-text-extent surface title)))
        (let ((pos (center extent size)))
          (set-font surface {Font Label-User})
          (draw-text surface (get-h pos) (get-v pos) title {Color World-Caption})))))
  
  
  ;;;
  ;;;; Mouse
  ;;;
  
  
  (method override (mouse-down self evt)
    (when movable?
      (let ((panel (find-panel self))
            (pos (get-position evt)))
        (unless (in-close? self pos)
          (move-panel-down panel self pos)))))
  
  
  (method override (mouse-up self evt)
    (let ((panel (find-panel self))
          (pos (get-position evt)))
      (when (in-close? self pos)
        (close panel))))
  
  
  (method override (drag-move self evt)
    (when movable?
      (let ((panel (find-panel self))
            (pos (get-position evt)))
        (move-panel-drag panel self pos))))
  
  
  (method override (drag-up self evt . rest)
    (when movable?
      (let ((panel (find-panel self))
            (pos (get-position evt)))
        (move-panel-up panel self pos))))
  
  
  (method (in-close? self pos)
    (and closable?
         (let ((width (get-width self))
               (height (get-height self)))
           (in-rect? pos (new Rect (- width 20) 0 width 20)))))))
