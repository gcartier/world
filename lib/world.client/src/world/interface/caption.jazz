;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Captions
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is WorldScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2014
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See http://github.com/gcartier/world for details.


(module world.interface.caption jazz


(import (jazz.geometry)
        (jazz.graphic)
        (jazz.ui)
        (world.interface.pane))


;;;
;;;; World-Caption
;;;


(class World-Caption extends View
  
  
  ;;;
  ;;;; Pane
  ;;;
  
  
  (method (find-pane)
    (find-ascendant World-Pane))
  
  
  ;;;
  ;;;; Draw
  ;;;
  
  
  (method override (draw surface context)
    (let ((width (get-width))
          (height (get-height)))
      (set-color~ surface {Color red: .308 green: .381 blue: .448})
      (set-line-width~ surface 1)
      (line~ surface 0 (- height 1) width (- height 1))
      (set-color~ surface {Color World-Caption})
      (set-line-width~ surface 1.5)
      (line~ surface (- width 13) 6 (- width 5) 14)
      (line~ surface (- width 5) 6 (- width 13) 14))
    (when title
      (let ((extent (get-text-extent~ surface title)))
        (let ((pos (center extent size)))
          (set-font~ surface {Font Label-User})
          (draw-text~ surface (get-h~ pos) (get-v~ pos) title {Color World-Caption})))))
  
  
  ;;;
  ;;;; Mouse
  ;;;
  
  
  (method override (mouse-down evt)
    (let ((pane (find-pane))
          (pos (get-position~ evt)))
      (unless (in-close? pos)
        (move-pane-down~ pane self pos))))
  
  
  (method override (mouse-up evt)
    (let ((pane (find-pane))
          (pos (get-position~ evt)))
      (when (in-close? pos)
        (close~ pane))))
  
  
  (method override (drag-move evt)
    (let ((pane (find-pane))
          (pos (get-position~ evt)))
      (move-pane-drag~ pane self pos)))
  
  
  (method override (drag-up evt . rest)
    (let ((pane (find-pane))
          (pos (get-position~ evt)))
      (move-pane-up~ pane self pos)))
  
  
  (method (in-close? pos)
    (let ((width (get-width))
          (height (get-height)))
      (in-rect? pos (new Rect (- width 20) 0 width 20))))))
