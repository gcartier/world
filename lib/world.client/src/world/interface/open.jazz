;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; World Open
;;;


(module world.interface.open jazz


(import (jazz.jml)
        (jazz.graphic)
        (jazz.graphic.opengl.glew)
        (jazz.library)
        (jazz.literals)
        (jazz.platform)
        (jazz.platform.cairo)
        (jazz.system)
        (jazz.ui)
        (jazz.ui.view))


;;;
;;;; World-Open
;;;


(class World-Open extends Layout-View
  
  
  (form
    (<install>                                          size: {Dimension 420 639} layout-type: border
      (<Border-View>               name: actions-border location: center border-type: edge style: entry
        (<Scroller-View>                                style: document hscroll?: #t vscroll?: #t
          (<content~>                                   layout-type: fill
            (<Tree-Header>                              style: document shown?: #t
              (<content~>
                (<World-Open-Tree> name: actions))))))))
  
  
  (method override (conclude initargs)
    (nextmethod initargs)
    (set-background #f)
    (set-background~ (locate 'actions) #f)
    (view-bindings))
  
  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method (get-tree)
    (locate 'actions))
  
  
  (method override (draw surface context)
    (fill-rect~ surface (new Rect 0 0 1200 800) {Color red: 0. green: 0. blue: 0. alpha: .6}))
  
  
  ;;;
  ;;;; Update
  ;;;
  
  
  (method (view-worlds)
    (let ((appl (get-application)))
      (let ((designer (get-bindings-designer~ appl))
            (bindings (get-bindings))
            (tree (get-tree)))
        (view-bindings~ tree designer bindings)))))


;;;
;;;; Actions Tree
;;;


(class World-Actions-Tree extends Tree-View
  
  
  (form
    (<install>                                portfolio: :images filled-column: action
      (<World-Action-Column>   name: action   title: "Action" width: 235 toplevel-controls?: #f)
      (<World-Shortcut-Column> name: shortcut title: "Shortcut" width: 115)))
  
  
  ;;;
  ;;;; Update
  ;;;
  
  
  (definition action-icon
    {Image-Resource "Script"})
  
  
  (method protected (view-bindings designer bindings)
    (define (view-actions-flat)
      (for-each (lambda (actions)
                  (when (is? actions Actions)
                    (for-each (lambda (action)
                                (let ((shortcut (get-shortcut~ action)))
                                  (add-row children: (list (new Tree-Node title: (format "{a}:{a}" (get-name~ actions) (get-name~ action)) color: {Color White})
                                                           (new Tree-Label title: (present-shortcut shortcut) color: {Color White}))
                                    user-data: action)))
                              (get-children~ actions))))
                (get-children~ bindings)))
    
    (define (present-shortcut shortcut)
      (if (not shortcut)
          ""
        (present~ shortcut)))
    
    (remove-every-row)
    (with-update-locked
      (lambda ()
        (view-actions-flat)))))


;;;
;;;; Action Column
;;;


(class World-Action-Column extends Tree-Node-Column
  
  
  (method override (draw-background surface context row data width height)
    ))


;;;
;;;; Shortcut Column
;;;


(class World-Shortcut-Column extends Tree-Label-Column
  
  
  (method override (draw-background surface context row data width height)
    )))
