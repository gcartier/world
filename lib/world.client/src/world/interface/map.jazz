;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Map Pane
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2016
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.interface.map jazz


(import (jazz.cairo)
        (jazz.geometry)
        (jazz.graphic)
        (jazz.jml)
        (jazz.ui)
        (jazz.view)
        (world)
        (world.actor)
        (world.autoload)
        (world.biome)
        (world.geometry)
        (world.interface.inventory)
        (world.interface.pane)
        (world.interface.text)
        (world.interface.tooltip)
        (world.layer)
        (world.player)
        (world.settings)
        (world.syntax (phase syntax)))


;;;
;;;; Map
;;;


(class Map-Pane extends World-Pane
  
  
  (slot scale initialize 1. accessors generate)
  
  
  (method (reset-biomes)
    (let ((zone (current-zone)))
      (loop (for region-x from 0 to 3)
            (loop (for region-z from 0 to 1)
                  (let ((region (get-region~ zone region-x region-z)))
                    (loop (for chunk-x from 0 below 32)
                          (loop (for chunk-z from 0 below 32)
                                (let ((chunk (get-chunk~ region chunk-x chunk-z)))
                                  (set-biomes~ chunk (generate-biomes region-x region-z chunk-x chunk-z))))))))
      (invalidate-view)))
  
  
  (method override (mouse-down evt)
    (reset-biomes))
  
  
  ;;;
  ;;;; Drawing
  ;;;
  
  
  @zoomed-in
  (method override (draw surface context)
    (let ((zone (current-zone)))
      (let ((context (get-context~ surface))
            (bounds (get-bounds)))
        (loop (for region-x from 0 to 0)
              (loop (for region-z from 0 to 0)
                    (let ((region (get-region~ zone region-x region-z)))
                      (loop (for chunk-x from 0 below 32)
                            (loop (for chunk-z from 0 below 32)
                                  (let ((chunk (get-chunk~ region chunk-x chunk-z)))
                                    (let ((biomes (get-biomes~ chunk)))
                                      (loop (for x from 0 below 16)
                                            (loop (for z from 0 below 16)
                                                  (let ((biome (u8vector-ref biomes (+ x (* z 16))))
                                                        (size 1))
                                                    (let ((h (* (+ (* region-x 256) (* chunk-x 16) x) size))
                                                          (v (* (+ (* region-z 256) (* chunk-z 16) z) size)))
                                                      (let ((rect (new Rect h v (+ h size) (+ v size))))
                                                        (fill-rect~ surface rect (get-color~ (id->biome biome))))))))))))))))))
  
  
  @zommed-out
  (method override (draw surface context)
    (let ((zone (current-zone)))
      (let ((context (get-context~ surface))
            (bounds (get-bounds)))
        (loop (for region-x from 0 to 1)
              (loop (for region-z from 0 to 0)
                    (let ((region (get-region~ zone region-x region-z)))
                      (loop (for chunk-x from 0 below 32)
                            (loop (for chunk-z from 0 below 32)
                                  (let ((chunk (get-chunk~ region chunk-x chunk-z)))
                                    (let ((biomes (get-biomes~ chunk)))
                                      (loop (for x from 0 to 1)
                                            (loop (for z from 0 to 1)
                                                  (let ((biome (u8vector-ref biomes (+ (* x 8) (* z 8 16))))
                                                        (size 8))
                                                    (let ((h (* (+ (* region-x 64) (* chunk-x 2) x) size))
                                                          (v (* (+ (* region-z 64) (* chunk-z 2) z) size)))
                                                      (let ((rect (new Rect h v (+ h size) (+ v size))))
                                                        (fill-rect~ surface rect (get-color~ (id->biome biome))))))))))))))))))


  ;;@even-more-zommed-out
  (method override (draw surface context)
    (let ((zone (current-zone)))
      (let ((context (get-context~ surface))
            (bounds (get-bounds)))
        (loop (for region-x from 0 to 3)
              (loop (for region-z from 0 to 1)
                    (let ((region (get-region~ zone region-x region-z)))
                      (loop (for chunk-x from 0 below 32)
                            (loop (for chunk-z from 0 below 32)
                                  (let ((chunk (get-chunk~ region chunk-x chunk-z)))
                                    (let ((biomes (get-biomes~ chunk)))
                                      (loop (for x from 0 to 1)
                                            (loop (for z from 0 to 1)
                                                  (let ((biome (u8vector-ref biomes (+ (* x 8) (* z 8 16))))
                                                        (size 4))
                                                    (let ((h (* (+ (* region-x 64) (* chunk-x 2) x) size))
                                                          (v (* (+ (* region-z 64) (* chunk-z 2) z) size)))
                                                      (let ((rect (new Rect h v (+ h size) (+ v size))))
                                                        (fill-rect~ surface rect (get-color~ (id->biome biome))))))))))))))))))))
