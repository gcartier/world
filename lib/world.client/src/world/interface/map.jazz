;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Map Pane
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2016
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.interface.map jazz


(import (jazz.cairo)
        (jazz.geometry)
        (jazz.graphic)
        (jazz.jml)
        (jazz.ui)
        (jazz.view)
        (world)
        (world.actor)
        (world.autoload)
        (world.biome)
        (world.geometry)
        (world.interface.inventory)
        (world.interface.pane)
        (world.interface.text)
        (world.interface.tooltip)
        (world.layer)
        (world.player)
        (world.settings)
        (world.syntax (phase syntax)))


;;;
;;;; Map
;;;


(class Map-Pane extends World-Pane
  
  
  (slot scale          <fl> initialize 1.   accessors generate)
  (slot sampling       <fx> initialize 2    accessors generate)
  (slot map-width      <fx> initialize 1024 accessors generate)
  (slot map-height     <fx> initialize 512  accessors generate)
  (slot regions-width  <fx> initialize 8    accessors generate)
  (slot regions-height <fx> initialize 4    accessors generate)
  (slot regions-x      <fx> initialize -4   accessors generate)
  (slot regions-z      <fx> initialize -2   accessors generate)
  (slot cache               initialize #f   getter generate)
  
  
  (method (setup-map)
    (set! regions-x 0)
    (set! regions-z 0)
    (reset-cache))
  
  
  (method (reset-cache)
    (set! cache #f)
    (invalidate-view))
  
  
  (method override (mouse-down evt)
    (define (move dx dz)
      (increase! regions-x dx)
      (increase! regions-z dz)
      (reset-cache))
    
    (when (get-control?~ evt)
      (let ((h (get-h~ evt))
            (v (get-v~ evt))
            (quater 4))
        (let ((qh (/ map-width quater))
              (qv (/ map-height quater)))
          (cond ((< h qh)
                 (move (- regions-width) 0))
                ((> h (- map-width qh))
                 (move regions-width 0))
                ((< v qv)
                 (move 0 (- regions-height)))
                ((> v (- map-height qv))
                 (move 0 regions-height))
                (else
                 (reset-cache))))))
    
    ;; quick hack around right-mouse being pass-through
    (when (get-alt?~ evt)
      (cond ((= sampling 2)
             (set! sampling (/ sampling 2))
             (set! regions-width (* regions-width 2))
             (set! regions-height (* regions-height 2))
             (reset-cache))
            (else
             (set! sampling (* sampling 2))
             (set! regions-width (/ regions-width 2))
             (set! regions-height (/ regions-height 2))
             (reset-cache)))))
  
  
  (method override (mouse-move evt)
    (let ((world (current-world)))
      (let ((h (get-h~ evt))
            (v (get-v~ evt)))
        (receive (region-x region-z chunk-x chunk-z x z) (position->info h v)
          (let ((biomes (region-biomes region-x region-z)))
            (let ((biome (s32vector-ref biomes (+ (+ (* chunk-x 16) x) (* (+ (* chunk-z 16) z) 512)))))
              (display-message~ world (format "{a}" (get-name~ (id->biome biome))))))))))
  
  
  (method override (double-click evt)
    (let ((zone (current-zone))
          (me (current-me)))
      (let ((h (get-h~ evt))
            (v (get-v~ evt)))
        (receive (region-x region-z chunk-x chunk-z x z) (position->info h v)
          (let ((x (cast <fl> (+ (* region-x 512) (* chunk-x 16) x)))
                (z (cast <fl> (+ (* region-z 512) (* chunk-z 16) z)))
                (y (vertex-y (get-position~ me)))
                (sight (get-sight~ me)))
            (teleport~ zone (vertex x y z) sight))))))
  
  
  (method (position->info h v)
    (let ((rs (* 32 sampling 2))
          (cs (* sampling 2)))
      (let ((region-x (+ regions-x (quotient h rs)))
            (region-z (+ regions-z (quotient v rs))))
        (let ((x (modulo h rs))
              (z (modulo v rs)))
          (let ((chunk-x (quotient x cs))
                (chunk-z (quotient z cs)))
            (let ((x (modulo x cs))
                  (z (modulo z cs)))
              (let ((x (* (quotient x sampling) 8))
                    (z (* (quotient z sampling) 8)))
                (values region-x region-z chunk-x chunk-z x z))))))))
            
  
  (method (cache-biomes) <vector>
    (or cache
        (let ((vec (make-vector (* regions-width regions-height) #f)))
          (set! cache vec)
          vec)))
  
  
  (method (region-biomes region-x region-z)
    (let ((cache (cache-biomes))
          (index (cache-index (- region-x regions-x) (- region-z regions-z))))
      (or (vector-ref cache index)
          (let ((biomes (generate~ (world-layer) (* region-x 512) (* region-z 512) 512 512)))
            (vector-set! cache index biomes)
            biomes))))
  
  
  (method (cache-index region-x <fx> region-z <fx>) <fx>
    (+ region-x (* region-z regions-width)))
  
  
  ;;;
  ;;;; Drawing
  ;;;


  (method override (draw surface context)
    (let ((zone (current-zone)))
      (let ((context (get-context~ surface))
            (bounds (get-bounds)))
        (loop (for region-x from regions-x below (+ regions-x regions-width))
              (loop (for region-z from regions-z below (+ regions-z regions-height))
                    (let ((biomes (region-biomes region-x region-z)))
                      (loop (for chunk-x from 0 below 32)
                            (loop (for chunk-z from 0 below 32)
                                  (loop (for x from 0 to 1)
                                        (loop (for z from 0 to 1)
                                              (let ((biome (s32vector-ref biomes (+ (+ (* chunk-x 16) (* x 8)) (* (+ (* chunk-z 16) (* z 8)) 512)))))
                                                (let ((h (* (+ (* (- region-x regions-x) 64) (* chunk-x 2) x) sampling))
                                                      (v (* (+ (* (- region-z regions-z) 64) (* chunk-z 2) z) sampling)))
                                                  (let ((rect (new Rect h v (+ h sampling) (+ v sampling))))
                                                    (fill-rect~ surface rect (get-color~ (id->biome biome)))))))))))))
        (set-color~ surface {Color Dark-Gray alpha: .5})
        (set-line-width~ surface 1)
        (loop (for region-x from 1 below regions-width)
              (let ((h (* region-x (/ map-width regions-width))))
                (line~ surface h 0 h map-height)))
        (loop (for region-z from 1 below regions-height)
              (let ((v (* region-z (/ map-height regions-height))))
                (line~ surface 0 v map-width v))))))))
