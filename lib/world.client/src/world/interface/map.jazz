;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Map Panel
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.interface.map jazz


(import (jazz.cairo)
        (jazz.component)
        (jazz.event)
        (jazz.graphic)
        (jazz.syntax (phase syntax))
        (profiler)
        (gaea.geometry)
        (world)
        (world.biome)
        (world.context)
        (world.foreign)
        (world.interface.panel)
        (world.layer))


(proclaim (not check bounds)
          (warn optimizations))


;;;
;;;; Player
;;;


(definition protected (layout-map)
  (let ((window (current-window))
        (world (current-world)))
    (let ((world-width (get-width window))
          (world-height (get-height window))
          (sheet (get-map-sheet world)))
      (let ((h (- world-width (get-width sheet)))
            (v 0))
        (set-position sheet (new Point h v))))))


(definition protected (draw-map)
  (let ((world (current-world))
        (interface (current-interface)))
    (let ((view (child interface 'map))
          (sheet (get-map-sheet world)))
      (unless (get-uptodate? view)
        (let ((texture (get-texture sheet)))
          (let ((surface (get-surface texture))
                (data (get-data texture))
                (stride 1024))
            (draw-view view surface data stride)
            (flush surface)
            (map-texture texture)
            (set-uptodate? view #t))))
      (render-sheet sheet))))


;;;
;;;; Map
;;;


(class Map-Panel extends World-Panel
  
  
  (slot scale          <fl> initialize 0    accessors generate)
  (slot sampling       <fx> initialize 2    accessors generate)
  (slot map-width      <fx> initialize 1024 accessors generate)
  (slot map-height     <fx> initialize 512  accessors generate)
  (slot regions-width  <fx> initialize 8    accessors generate)
  (slot regions-height <fx> initialize 4    accessors generate)
  (slot regions-x      <fx> initialize -4   accessors generate)
  (slot regions-z      <fx> initialize -2   accessors generate)
  (slot cache               initialize #f   getter generate)
  (slot uptodate?           initialize #f   accessors generate)
  
  
  (method (setup-map self)
    (case scale
      ((0)
       (set! sampling 2)
       (set! regions-width 8)
       (set! regions-height 4))
      ((1)
       (set! sampling 1)
       (set! regions-width 16)
       (set! regions-height 8)))
    (reset-cache self))
  
  
  (method package (reset-cache self)
    (set! cache #f)
    (set! uptodate? #f))
  
  
  (method override (mouse-down self evt)
    (define (move dx dz)
      (increase! regions-x dx)
      (increase! regions-z dz)
      (reset-cache self))
    
    (let ((control? (get-control? evt))
          (alt? (get-alt? evt)))
      (cond ((and control? alt?)
             (reset-cache self)
             (time
               (with-profile 'biomes
                 (lambda ()
                   (loop (for region-x from regions-x below (+ regions-x regions-width))
                         (loop (for region-z from regions-z below (+ regions-z regions-height))
                               (region-biomes self region-x region-z)))))))
            (control?
             (let ((h (get-h evt))
                   (v (get-v evt))
                   (quater 4))
               (let ((qh (/ map-width quater))
                     (qv (/ map-height quater)))
                 (cond ((< h qh)
                        (move (- regions-width) 0))
                       ((> h (- map-width qh))
                        (move regions-width 0))
                       ((< v qv)
                        (move 0 (- regions-height)))
                       ((> v (- map-height qv))
                        (move 0 regions-height))
                       (else
                        (reset-cache self))))))
            (alt?
             (set! scale (modulo (+ scale (if (get-shift? evt) -1 1)) 2))
             (setup-map self)))))
  
  
  (method override (mouse-move self evt)
    (let ((world (current-world)))
      (let ((h (get-h evt))
            (v (get-v evt)))
        (receive (region-x region-z chunk-x chunk-z x z) (position->info self h v)
          (let ((biomes (region-biomes self region-x region-z)))
            (let ((biome (s32vector-ref biomes (+ (+ (* chunk-x 16) x) (* (+ (* chunk-z 16) z) 512)))))
              (display-message world (format "{a}" (get-name (id->biome biome))))))))))
  
  
  (method override (double-click self evt)
    (let ((zone (current-zone))
          (me (current-me)))
      (let ((h (get-h evt))
            (v (get-v evt)))
        (receive (region-x region-z chunk-x chunk-z x z) (position->info self h v)
          (let ((x (cast <fl> (+ (* region-x 512) (* chunk-x 16) x)))
                (z (cast <fl> (+ (* region-z 512) (* chunk-z 16) z)))
                (y (vertex-y (get-position me)))
                (sight (get-sight me)))
            (teleport zone (vertex x y z) sight))))))
  
  
  (method (position->info self h <fx> v <fx>)
    (let ((rs (* 32 sampling 2))
          (cs (* sampling 2)))
      (let ((region-x (+ regions-x (quotient h rs)))
            (region-z (+ regions-z (quotient v rs))))
        (let ((x (modulo h rs))
              (z (modulo v rs)))
          (let ((chunk-x (quotient x cs))
                (chunk-z (quotient z cs)))
            (let ((x (modulo x cs))
                  (z (modulo z cs)))
              (let ((x (* (quotient x sampling) 8))
                    (z (* (quotient z sampling) 8)))
                (values region-x region-z chunk-x chunk-z x z))))))))
            
  
  (method (cache-biomes self) <vector>
    (or cache
        (let ((vec (make-vector (* regions-width regions-height) #f)))
          (set! cache vec)
          vec)))
  
  
  (method (region-biomes self region-x <fx> region-z <fx>) <s32vector>
    (let ((cache (cache-biomes self))
          (index (cache-index self (- region-x regions-x) (- region-z regions-z))))
      (or (vector-ref cache index)
          (let ((biomes (generate (world-layer) (* region-x 512) (* region-z 512) 512 512)))
            (vector-set! cache index biomes)
            biomes))))
  
  
  (method (cache-index self region-x <fx> region-z <fx>) <fx>
    (+ region-x (* region-z regions-width)))
  
  
  ;;;
  ;;;; Drawing
  ;;;


  (method package (draw-view self surface <Surface> data stride <fx>)
    (cairo_surface_flush (get-handle surface))
    (loop (for region-x from regions-x below (+ regions-x regions-width))
          (loop (for region-z from regions-z below (+ regions-z regions-height))
                (let ((biomes (region-biomes self region-x region-z)))
                  (loop (for chunk-x from 0 below 32)
                        (loop (for chunk-z from 0 below 32)
                              (loop (for x from 0 to 1)
                                    (loop (for z from 0 to 1)
                                          (let ((biome (s32vector-ref biomes (+ (+ (* chunk-x 16) (* x 8)) (* (+ (* chunk-z 16) (* z 8)) 512)))))
                                            (let ((h (* (+ (* (- region-x regions-x) 64) (* chunk-x 2) x) sampling))
                                                  (v (* (+ (* (- region-z regions-z) 64) (* chunk-z 2) z) sampling))
                                                  (color (get-color (id->biome biome))))
                                              (loop (for dh from 0 below sampling)
                                                    (loop (for dv from 0 below sampling)
                                                          (pixel-float-set! data (pixel (+ h dh) (+ v dv) stride) (get-red color) (get-green color) (get-blue color) (get-alpha color)))))))))))))
    (cairo_surface_mark_dirty (get-handle surface))
    (set-color surface {Color Dark-Gray alpha: .5})
    (set-line-width surface 1)
    (loop (for region-x from 1 below regions-width)
          (let ((h (* region-x (/ map-width regions-width))))
            (line surface h 0 h map-height)))
    (loop (for region-z from 1 below regions-height)
          (let ((v (* region-z (/ map-height regions-height))))
            (line surface 0 v map-width v))))))
