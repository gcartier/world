;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Map Pane
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2016
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.interface.map jazz


(import (jazz.cairo)
        (jazz.geometry)
        (jazz.graphic)
        (jazz.jml)
        (jazz.ui)
        (jazz.view)
        (world)
        (world.actor)
        (world.autoload)
        (world.biome)
        (world.geometry)
        (world.interface.inventory)
        (world.interface.pane)
        (world.interface.text)
        (world.interface.tooltip)
        (world.layer)
        (world.player)
        (world.settings)
        (world.syntax (phase syntax)))


;;;
;;;; Map
;;;


(class Map-Pane extends World-Pane
  
  
  (slot scale    <fl> initialize 1. accessors generate)
  (slot offset-x <fx> initialize 0  accessors generate)
  (slot offset-z <fx> initialize 0  accessors generate)
  (slot cache         initialize #f getter generate)
  
  
  (method (reset-cache)
    (set! cache #f))
  
  
  (method override (mouse-down evt)
    (define (move dx dz)
      (increase! offset-x dx)
      (increase! offset-z dz)
      (reset-cache))
    
    (let ((h (get-h~ evt))
          (v (get-v~ evt)))
      (let ((qh (/ 1024 4))
            (qv (/ 512 4)))
        (cond ((< h qh)
               (move -1 0))
              ((> h (- 1024 qh))
               (move 1 0))
              ((< v qv)
               (move 0 -1))
              ((> v (- 512 qv))
               (move 0 1))
              (else
               (reset-cache))))))
  
  
  (method override (mouse-move evt)
    (let ((world (current-world)))
      (let ((h (get-h~ evt))
            (v (get-v~ evt))
            (rs (* 32 4 2))
            (cs (* 4 2)))
        (let ((region-x (+ offset-x (quotient h rs)))
              (region-z (+ offset-z (quotient v rs))))
          (let ((x (modulo h rs))
                (z (modulo v rs)))
            (let ((chunk-x (quotient x cs))
                  (chunk-z (quotient z cs)))
              (let ((x (modulo x cs))
                    (z (modulo z cs)))
                (let ((x (* (quotient x 4) 8))
                      (z (* (quotient z 4) 8)))
                  (let ((biomes (chunk-biomes region-x region-z chunk-x chunk-z)))
                    (let ((biome (vector-ref biomes (+ x (* z 16)))))
                      (display-message~ world (format "{a}" (get-name~ (id->biome biome))))))))))))))
            
  
  (method (cache-biomes) <vector>
    (or cache
        (let ((vec (make-vector (* (* 4 32 2) (* 2 32 2)) #f)))
          (set! cache vec)
          vec)))
  
  
  (method (chunk-biomes region-x region-z chunk-x chunk-z)
    (let ((cache (cache-biomes))
          (index (biome-index (- region-x offset-x) (- region-z offset-z) chunk-x chunk-z)))
      (or (vector-ref cache index)
          (let ((biomes (generate-biomes region-x region-z chunk-x chunk-z)))
            (vector-set! cache index biomes)
            biomes))))
  
  
  (method (biome-index region-x <fx> region-z <fx> chunk-x <fx> chunk-z <fx>) <fx>
    (let ((x (+ (* region-x 32) chunk-x))
          (z (+ (* region-z 32) chunk-z)))
      (+ x (* z 512))))
  
  
  ;;;
  ;;;; Drawing
  ;;;
  
  
  @zoomed-in
  (method override (draw surface context)
    (let ((zone (current-zone)))
      (let ((context (get-context~ surface))
            (bounds (get-bounds)))
        (loop (for region-x from 0 to 0)
              (loop (for region-z from 0 to 0)
                    (let ((region (get-region~ zone region-x region-z)))
                      (loop (for chunk-x from 0 below 32)
                            (loop (for chunk-z from 0 below 32)
                                  (let ((chunk (get-chunk~ region chunk-x chunk-z)))
                                    (let ((biomes (get-biomes~ chunk)))
                                      (loop (for x from 0 below 16)
                                            (loop (for z from 0 below 16)
                                                  (let ((biome (vector-ref biomes (+ x (* z 16))))
                                                        (size 1))
                                                    (let ((h (* (+ (* region-x 256) (* chunk-x 16) x) size))
                                                          (v (* (+ (* region-z 256) (* chunk-z 16) z) size)))
                                                      (let ((rect (new Rect h v (+ h size) (+ v size))))
                                                        (fill-rect~ surface rect (get-color~ (id->biome biome))))))))))))))))))
  
  
  @zommed-out
  (method override (draw surface context)
    (let ((zone (current-zone)))
      (let ((context (get-context~ surface))
            (bounds (get-bounds)))
        (loop (for region-x from 0 to 1)
              (loop (for region-z from 0 to 0)
                    (let ((region (get-region~ zone region-x region-z)))
                      (loop (for chunk-x from 0 below 32)
                            (loop (for chunk-z from 0 below 32)
                                  (let ((chunk (get-chunk~ region chunk-x chunk-z)))
                                    (let ((biomes (get-biomes~ chunk)))
                                      (loop (for x from 0 to 1)
                                            (loop (for z from 0 to 1)
                                                  (let ((biome (vector-ref biomes (+ (* x 8) (* z 8 16))))
                                                        (size 8))
                                                    (let ((h (* (+ (* region-x 64) (* chunk-x 2) x) size))
                                                          (v (* (+ (* region-z 64) (* chunk-z 2) z) size)))
                                                      (let ((rect (new Rect h v (+ h size) (+ v size))))
                                                        (fill-rect~ surface rect (get-color~ (id->biome biome))))))))))))))))))


  ;;@even-more-zommed-out
  (method override (draw surface context)
    (let ((zone (current-zone)))
      (let ((context (get-context~ surface))
            (bounds (get-bounds)))
        (loop (for region-x from offset-x below (+ offset-x 4))
              (loop (for region-z from offset-z below (+ offset-z 2))
                    (loop (for chunk-x from 0 below 32)
                          (loop (for chunk-z from 0 below 32)
                                (let ((biomes (chunk-biomes region-x region-z chunk-x chunk-z)))
                                  (loop (for x from 0 to 1)
                                        (loop (for z from 0 to 1)
                                              (let ((biome (vector-ref biomes (+ (* x 8) (* z 8 16))))
                                                    (size 4))
                                                (let ((h (* (+ (* (- region-x offset-x) 64) (* chunk-x 2) x) size))
                                                      (v (* (+ (* (- region-z offset-z) 64) (* chunk-z 2) z) size)))
                                                  (let ((rect (new Rect h v (+ h size) (+ v size))))
                                                    (fill-rect~ surface rect (get-color~ (id->biome biome))))))))))))))))))
