;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Script Panel
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.interface.script jazz


(require (world.script))

(import (jazz.catalog)
        (jazz.component)
        (jazz.debugger)
        (jazz.editor.jazz)
        (jazz.editor.lisp)
        (jazz.event)
        (jazz.exemplar)
        (jazz.handler)
        (jazz.io)
        (jazz.graphic)
        (jazz.markup)
        (jazz.outline)
        (jazz.project)
        (jazz.search)
        (jazz.text)
        (jazz.tree)
        (jazz.ui)
        (jazz.view)
        (jazz.window)
        (world)
        (world.asset)
        (world.autoload)
        (world.block)
        (world.changes)
        (world.context)
        (world.console)
        (world.contour)
        (world.entity)
        (world.interface)
        (world.interface.panel)
        (world.script.asset)
        (world.scripter)
        (world.settings)
        (world.support)
        (world.window))


(definition protected edited-entity
  #f)

(definition protected (set-edited-entity entity)
  (set! edited-entity entity))

(definition protected (reset-edited-entity)
  (set! edited-entity #f))


(definition protected (effective-edited)
  (let ((world (current-world)))
    (or edited-entity (first-target world))))


(definition public (toggle-script)
  (interface-script (not interface-script?)))


(definition public (toggle-script-paused)
  (let ((world (current-world)))
    (let ((target (first-target world)))
      (when (is? target Entity)
        (let ((script (get-script target)))
          (when script
            (enqueue-event script 'toggle-paused)))))))


(definition public (interface-script flag (update-debugger?: update-debugger? #t) (force?: force? #f))
  (let ((window (current-window))
        (world (current-world)))
    (set-interface-script? flag)
    (update-script-panel update-debugger?: update-debugger? force?: force?)
    (update-parameter world 'script)
    (update-window-cursor window)))


(definition public (view-workspace)
  (when (developer?)
    (let ((visible? interface-script?))
      (interface-script #t force?: #t)
      (let ((interface (current-interface)))
        (let ((panel (child interface 'script)))
          (let ((manager (get-manager panel)))
            (let ((splitter (locate manager 'workspace-splitter)))
              (when (zoomed? splitter)
                (update-workspace manager))
              (if (not visible?)
                  (unzoom splitter)
                (toggle-zoom splitter 'second))
              (if (zoomed? splitter)
                  (acquire-focus (locate manager '(script text)))
                (let ((tree (locate manager '(modules modules))))
                  (acquire-focus tree))))))))))


(definition public (view-console)
  (interface-script #t)
  (let ((interface (current-interface)))
    (let ((panel (child interface 'script)))
      (let ((manager (get-manager panel)))
        (let ((splitter (locate manager 'console-splitter)))
          (update-console (get-edited manager))
          (toggle-zoom splitter 'second))))))


(definition public (update-console entity)
  (when (eq? (effective-edited) entity)
    (let ((interface (current-interface)))
      (let ((panel (child interface 'script)))
        (let ((manager (get-manager panel)))
          (let ((border (locate manager 'console-border))
                (output (get-output entity)))
            (close-children border)
            (when output
              (let ((view (console-view (get-content output) (or (get-size output) 24))))
                ;; barbara quick hack. this triggers a not primordial thread
                ;; assertion that should be solved by not recreating the view
                (execute-event
                  (lambda ()
                    (set-parent view border)))))))))))


(definition public (view-script)
  (let ((window (current-window))
        (world (current-world))
        (me (current-me)))
    (let ((entity (first-target world)))
      (if (not entity)
          (bell)
        (if (get-script-pane entity)
            (deactivate-script-pane entity)
          (activate-script-pane entity))))))


(definition public (view-debugger)
  (when (developer?)
    (interface-script #t update-debugger?: #f)
    (let ((interface (current-interface)))
      (let ((manager (get-manager (child interface 'script))))
        (let ((splitter (locate manager 'script-splitter)))
          (when (zoomed? splitter)
            (update-debugger manager))
          (toggle-zoom splitter 'first))))))


(definition public (update-debugger-panel target)
  (when (and interface-script? (developer?))
    (unless (world-setting 'world.live-coding? #t)
      (let ((interface (current-interface)))
        (let ((panel (child interface 'script)))
          (when (get-visible? panel)
            (let ((manager (get-manager panel)))
              (let ((edited (get-edited manager)))
                (when (eq? edited target)
                  (update-debugger manager)
                  (let ((splitter (locate manager 'script-splitter)))
                    (if (and edited
                             (get-script edited)
                             (eq? (get-state (get-script edited)) 'error))
                        (unzoom splitter)
                      (zoom splitter 'first))))))))))))


(definition public (view-toolbox)
  (interface-script #t)
  (let ((interface (current-interface)))
    (let ((manager (get-manager (child interface 'script))))
      (let ((splitter (locate manager 'toolbox-splitter)))
        (toggle-zoom splitter 'first)))))


(definition public (run-selected-script)
  (let ((world (current-world)))
    (let ((entity (first-target world)))
      (if (not entity)
          (bell)
        (let ((script (get-script entity)))
          (if (not script)
              (bell)
            (run-script-change (current-seconds) entity)))))))


(definition public (update-script-panel (update-debugger?: update-debugger? #t) (force?: force? #f))
  (let ((window (current-window))
        (interface (current-interface))
        (world (current-world))
        (zone (current-zone)))
    (let* ((panel (child interface 'script))
           (manager (get-manager panel)))
      (define (hide-panel)
        (save-panel)
        (let ((edited (get-edited manager)))
          ;; in case element was deleted
          (when (and edited (get-designer-chunk edited))
            (edit-script-change (current-seconds) edited #f)))
        (unless (or (standalone?) local?)
          (set-visible? (child interface 'chat) #t))
        (set-edited manager #f)
        (set-visible? panel #f)
        (focus-world))
      
      (define (show-panel edited)
        (let ((actual (get-edited manager)))
          (when (and actual (neq? actual edited))
            (edit-script-change (current-seconds) actual #f)))
        (set-edited manager edited)
        (when edited
          (edit-script-change (current-seconds) edited #t))
        (set-visible? (locate manager '(script run)) (and (not (admin?)) (not (world-setting 'world.live-coding? #t))))
        (let ((splitter (locate manager 'toolbox-splitter)))
          ;; put back to #t when it's really working well and useful
          (if (world-setting 'world.script-toolbox? #f)
              (unzoom splitter)
            (zoom splitter 'first)))
        (set-visible? panel #t)
        (unless (or (standalone?) local?)
          (set-visible? (child interface 'chat) #f))
        (when (and update-debugger? edited)
          (update-debugger-panel edited)))
      
      (define (save-panel)
        (save-script manager))
      
      (if (not interface-script?)
          (hide-panel)
        (let ((targ (effective-edited)))
          (unless (and targ (eq? targ (get-edited manager)))
            (typecase targ
              ((Asset-Entity)
               (save-panel)
               (let ((text (locate manager '(script text))))
                 (set-moniker text (get-file (get-asset targ)))
                 (show-panel targ)))
              ((Block-Entity)
               (if #t ;; todo
                   (hide-panel)
                 ;; standalone code
                 (save-panel)
                 (let ((text (locate manager '(script text)))
                       (script (get-script targ)))
                   (set-string-content text (if script (get-text script) ""))
                   (show-panel targ))))
              ((Entity)
               (if (not (designable? zone targ))
                   (hide-panel)
                 (save-panel)
                 (let ((text (locate manager '(script text)))
                       (script (get-script targ)))
                   (set-string-content text (if script (get-text script) ""))
                   (show-panel targ))))
              (else
               (if force?
                   (show-panel #f)
                 (hide-panel))
               @obsolete-scriptable!?
               (let ((scriptable? (and targ (scriptable? targ))))
                 (if (not scriptable?)
                     (hide-panel)
                   (let ((name (get-name targ)))
                     (if (not name)
                         (hide-panel)
                       (if (not (get-cataloguer))
                           (hide-panel)
                         (let ((locator (compose-reference 'tutorial.objectives name)))
                           (let ((entry (locator->entry locator)))
                             (if (not entry)
                                 (hide-panel)
                               (save-panel)
                               (let ((text (locate manager '(script text))))
                                 (set-moniker (get-document-controller text) (get-moniker entry))
                                 (set-selection-safe text (get-range entry) reposition: 'vertical ensure-displayed?: #t)
                                 (show-panel #f))))))))))))))))))


;;;
;;;; Zoom
;;;


@wait
(definition zoom-factors
  '(25 33 50 67 75 80 90 100 110 125 150 175 200 250 300 400 500))


@wait
(definition zoom-factor
  #f)


(definition public (setup-script-zoom)
  @wait (
  (set! zoom-factor (world-setting 'world.zoom-factor #f))
  (zoom-factor-update)))


@wait
(definition (set-zoom-factor factor)
  (let ((world (current-world)))
    (set! zoom-factor factor)
    (set-setting options-settings 'world.zoom-factor factor)
    (save-content options-settings)
    (zoom-factor-update)
    (display-message world (format "{a}%" (or factor 100)))))


@wait
(definition (zoom-factor-update)
  (let ((interface (current-interface)))
    (let ((panel (child interface 'script)))
      (let ((text (locate (get-manager panel) '(script text))))
        (set-scaling text (and zoom-factor (/ (cast <fl> zoom-factor) 100.)))))))


(definition public (script-zoom-in)
  @wait
  (let ((current (or zoom-factor 100)))
    (let ((next (next-element zoom-factors current cycle?: #f)))
      (if (not next)
          (bell)
        (set-zoom-factor next)))))


(definition public (script-zoom-out)
  @wait
  (let ((current (or zoom-factor 100)))
    (let ((previous (previous-element zoom-factors current cycle?: #f)))
      (if (not previous)
          (bell)
        (set-zoom-factor previous)))))


(definition public (script-unzoom)
  @wait
  (set-zoom-factor #f))


;;;
;;;; Panel
;;;


(class Script-Panel extends World-Panel
  
  
  (form
    (<install>                          size: {Dimension 420 639} layout-type: fill
      (<Border-View>      name: border  border-type: none
        (<Script-Manager> name: manager))))
  
  
  (method override (escape-close? self)
    #t)
  
  
  (method public (get-manager self)
    (locate self 'manager)))


;;;
;;;; Manager
;;;


(class Script-Manager extends Layout-View
  
  
  (form
    (<install>                                                               size: {Dimension 420 639} layout-type: fill
      (<Splitter-View>                                                       location: first separator: none mode: absolute division: -17 orientation: vert state: zoom target: first
        (<Splitter-View>                            name: workspace-splitter location: first separator: none orientation: vert mode: absolute division: 250 state: zoom target: second
          (<Splitter-View>                          name: workspace-border   location: first separator: none orientation: horz mode: relative division: 33
            (<Border-View>                                                   location: first border-color: {Color Medium-Gray} border-type: edge style: entry
              (<Pad-View>
                (<Docked-Host>                                               title: "Modules" location: selection
                  (<Modules-View>                   name: modules))))
            (<Splitter-View>                                                 location: second separator: none orientation: horz mode: relative division: 50
              (<Border-View>                                                 location: first border-color: {Color Medium-Gray} border-type: edge style: entry
                (<Pad-View>
                  (<Docked-Host>                                             title: "Scripts" location: selection
                    (<Scripts-View>                 name: scripts))))
              (<Border-View>                                                 location: second border-color: {Color Medium-Gray} border-type: edge style: entry
                (<Pad-View>
                  (<Docked-Host>                                             title: "Events" location: selection
                    (<Events-View>                  name: events))))))
          (<Splitter-View>                          name: toolbox-splitter   location: second separator: none orientation: horz mode: relative division: -30 state: zoom target: first
            (<Splitter-View>                        name: console-splitter   location: first separator: none orientation: vert mode: relative division: 20 state: zoom target: second
              (<Border-View>                        name: console-border     location: first border-color: {Color Medium-Gray} border-type: edge style: entry layout-type: center)
              (<Splitter-View>                      name: script-splitter    location: second separator: none orientation: vert mode: relative division: -27 state: zoom target: first
                (<Border-View>                      name: script-border      location: first border-color: {Color Medium-Gray} border-type: none @w edge style: entry
                  (<Pad-View>
                    (<Script-View>                  name: script             location: selection)
                    @w
                    (<Docked-Host>                                           title: "Script" location: selection
                      (<Script-View>                name: script))))
                (<Border-View>                      name: stack-border       location: second border-color: {Color Medium-Gray} border-type: edge style: entry layout-type: fill
                  (<Pad-View>
                    (<Docked-Host>                                           title: "Stack" location: selection
                      (<Scroller-View>                                       style: document hscroll?: #f vscroll?: #f
                        (<content~>                                          layout-type: fill
                          (<Tree-Header>                                     style: document shown?: #f
                            (<content~>
                              (<Stack-Tree-View>    name: stack              portfolio: :images filled-column: frame background: #f
                                (<Tree-Node-Column> name: frame              title: "Frame" width: 235 toplevel-controls?: #f display-images?: #f display-levels?: #f)))))))))))
            (<Border-View>                          name: toolbox-border     location: second border-color: {Color Medium-Gray} border-type: edge style: entry layout-type: fill
              (<Pad-View>
                (<Docked-Host>                                               title: "Toolbox" location: selection
                  (<Scroller-View>                                           style: document hscroll?: #f vscroll?: #f
                    (<content~>                                              layout-type: fill
                      (<Tree-Header>                                         style: document shown?: #f
                        (<content~>
                          (<Contours-Tree-View>     name: contours           portfolio: :images filled-column: contour background: #f
                            (<Tree-Node-Column>     name: contour            title: "Contour" width: 235 toplevel-controls?: #f display-images?: #f display-levels?: #f)))))))))))
        (<Border-View>                                                       location: second border-color: {Color Medium-Gray} border-type: edge style: entry
          (<Minibuffer-Toolbar>                     name: command
            (<!>                                    name: command-shell
              (<!>                                  name: scroller
                (<!>                                name: content
                  (<!>                              name: text               background: #f)))
              (<!>                                  name: status             background: #f)))))))
  
  
  (slot edited initialize #f accessors generate)
  
  
  (method override (finish self initargs)
    (nextmethod self initargs)
    (when (admin?)
      (set-editable? (locate self '(script text)) #f)))
  
  
  (method override (focus-default self)
    (let ((text (locate self '(script text))))
      (acquire-focus text)))
  
  
  (method package (update-background self)
    (set-background self
      (if (world-setting 'world.script-fullscreen? #f)
          ;; kinda prefer using the same background in fullscreen
          {Color red: .000 green: .000 blue: .000 alpha: .450}
        {Color red: .000 green: .000 blue: .000 alpha: .450})))
  
  
  (method package (update-workspace self)
    (update (locate self 'modules))
    (update (locate self 'scripts))
    (update (locate self 'events)))
  
  
  (method package (update-debugger self)
    (update (locate self 'stack) edited))
  
  
  (method package (save-script self)
    (let ((zone (current-zone)))
      (when edited
        (let ((script (need-script zone edited create?: #f)))
          ;; sejour quicky
          (when script
            (let ((text (locate self '(script text))))
              (let ((content (get-string-content text)))
                (unless (equal? (if script (or (get-text script) "") "") content)
                  (if (is? edited Asset-Entity)
                      ;; quicky
                      (begin
                        (set-text script content)
                        (save-asset-script (get-asset edited) edited))
                    ;; in case element was deleted
                    (when (get-designer-chunk edited)
                      (let ((script (or script (need-script zone edited))))
                        ;; sejour quicky
                        (when script
                          (write-element zone script 'text content))))))))))))))


;;;
;;;; Modules
;;;


(class Modules-View extends Scroller-View
  
  
  (form
    (<install>                                  style: document hscroll?: #f vscroll?: #f
      (<content~>                               layout-type: fill
        (<Tree-Header>                          style: document shown?: #f
          (<content~>
            (<Modules-Tree>       name: modules portfolio: :images filled-column: module background: #f show-unfocused-selection?: #f always-select?: #t selection-handler: {Event-Handler :form on-selection} double-click-handler: {Event-Handler :form on-double-click} return-press-handler: {Event-Handler :form on-return-press} escape-press-handler: {Event-Handler :form on-escape-press}
              (<Tree-Node-Column> name: module  title: "Module" width: 235 toplevel-controls?: #f display-images?: #f display-levels?: #f)))))))
  
  
  (method package (update self)
    (let ((world (current-world)))
      (let ((modules (collect-modules world))
            (tree (locate self 'modules)))
        (define (present-spine spine)
          (filename-base
            (let ((last (last spine)))
              (if (and (starts-with? last "_")
                       (ends-with? last ".jazz"))
                  (let ((len (string-length last)))
                    (join (append (butlast (butlast spine)) (list (substring last 1 (- len 5)))) "."))
                (join spine ".")))))
        
        (remove-every-row tree)
        (for-each (lambda (module)
                    (let ((spine (get-spine module)))
                      (let ((title (present-spine spine)))
                        (add-row tree
                          children: (list (new Tree-Node title: title font: {Font Label-User} color: {Color White}))
                          user-data: module))))
                  modules))))
  
  
  (method (on-selection self evt)
    (edit-module self #f))
  
  
  (method (on-double-click self evt)
    (edit-module self))
  
  
  (method override (on-return-press self evt)
    (edit-module self))
  
  
  (method override (on-escape-press self evt)
    (view-workspace))
  
  
  (method (edit-module self (close? #t))
    (let ((manager (find-ascendant self Script-Manager))
          (tree (locate self 'modules)))
      (let ((module (get-single-selected-data tree)))
        (when module
          (let ((entity (register-asset-script module)))
            (set-edited-entity entity)
            (update-script-panel)
            (when close?
              (toggle-zoom (locate manager 'workspace-splitter) 'second)
              (acquire-focus (locate manager '(script text))))))))))


(class Modules-Tree extends Tree-View)


;;;
;;;; Scripts
;;;


(class Scripts-View extends Scroller-View
  
  
  (form
    (<install>                                  style: document hscroll?: #f vscroll?: #f
      (<content~>                               layout-type: fill
        (<Tree-Header>                          style: document shown?: #f
          (<content~>
            (<Scripts-Tree>       name: scripts portfolio: :images filled-column: script background: #f show-unfocused-selection?: #f always-select?: #t selection-handler: {Event-Handler :form on-selection} double-click-handler: {Event-Handler :form on-double-click} return-press-handler: {Event-Handler :form on-return-press} escape-press-handler: {Event-Handler :form on-escape-press}
              (<Tree-Node-Column> name: script  title: "Script" width: 235 toplevel-controls?: #f display-images?: #f display-levels?: #f)))))))
  
  
  (method package (update self)
    (let ((world (current-world)))
      (let ((scripts (partition-scripts world (collect-scripts world)))
            (tree (locate self 'scripts)))
        (remove-every-row tree)
        (for-each (lambda (partition)
                    (bind (title . children) partition
                      (let ((father (add-row tree
                                      state: 'expanded
                                      children: (list (new Tree-Node title: title font: {Font Label-User} color: {Color red: 220 green: 0 blue: 0})))))
                        (for-each (lambda (script)
                                    (let ((spine (get-spine script)))
                                      (let ((title (filename-spine (join (if (> (length spine) 1) (cdr spine) spine) "."))))
                                        (add-row tree
                                          father: father
                                          children: (list (new Tree-Node title: title font: {Font Label-User} color: {Color White}))
                                          user-data: script))))
                                  children))))
                  scripts))))
  
  
  (method (on-selection self evt)
    (edit-script self #f))
  
  
  (method (on-double-click self evt)
    (edit-script self))
  
  
  (method override (on-return-press self evt)
    (edit-script self))
  
  
  (method override (on-escape-press self evt)
    (view-workspace))
  
  
  (method (edit-script self (close? #t))
    (let ((manager (find-ascendant self Script-Manager))
          (tree (locate self 'scripts)))
      (let ((script (get-single-selected-data tree)))
        (when script
          (let ((entity (register-asset-script script)))
            (set-edited-entity entity)
            (update-script-panel)
            (when close?
              (toggle-zoom (locate manager 'workspace-splitter) 'second)
              (acquire-focus (locate manager '(script text))))))))))


(class Scripts-Tree extends Tree-View)


;;;
;;;; Events
;;;


(class Events-View extends Scroller-View
  
  
  (form
    (<install>                                  style: document hscroll?: #f vscroll?: #f
      (<content~>                               layout-type: fill
        (<Tree-Header>                          style: document shown?: #f
          (<content~>
            (<Events-Tree>        name: events portfolio: :images filled-column: event background: #f show-unfocused-selection?: #f always-select?: #t selection-handler: {Event-Handler :form on-selection} double-click-handler: {Event-Handler :form on-double-click} return-press-handler: {Event-Handler :form on-return-press} escape-press-handler: {Event-Handler :form on-escape-press}
              (<Tree-Node-Column> name: event  title: "Event" width: 235 toplevel-controls?: #f display-images?: #f display-levels?: #f)))))))
  
  
  (method package (update self)
    (let ((world (current-world)))
      (let ((assets (unique-zone-assets world)))
        (when assets
          (let ((events (list (list "zone"
                                    (new Asset assets '("event") '("zone" "enter.jazz"))
                                    (new Asset assets '("event") '("zone" "exit.jazz")))))
                (tree (locate self 'events)))
            (remove-every-row tree)
            (for-each (lambda (partition)
                        (bind (title . children) partition
                          (let ((father (add-row tree
                                          state: 'expanded
                                          children: (list (new Tree-Node title: title font: {Font Label-User} color: {Color red: 220 green: 0 blue: 0})))))
                            (for-each (lambda (event)
                                        (define (determine-frame-color)
                                          (let ((entity (find-asset-entity event)))
                                            (and entity
                                                 @w
                                                 (get-task entity)
                                                 (case (get-state (get-script entity))
                                                   ((read) {Color Dark-Orange})
                                                   ((walk) {Color Dark-Orange})
                                                   ((error) {Color Dark-Red})
                                                   (else {Color red: .084 green: .598 blue: .145})))))
                                        
                                        (let ((spine (get-spine event)))
                                          (let ((title (filename-spine (join (if (> (length spine) 1) (cdr spine) spine) ".")))
                                                (frame-color (determine-frame-color)))
                                            (add-row tree
                                              father: father
                                              children: (list (new Tree-Node title: title font: {Font Label-User} color: {Color White} frame-color: frame-color))
                                              user-data: event))))
                                      children))))
                      events))))))
  
  
  (method (on-selection self evt)
    (edit-event self #f))
  
  
  (method (on-double-click self evt)
    (edit-event self))
  
  
  (method override (on-return-press self evt)
    (edit-event self))
  
  
  (method override (on-escape-press self evt)
    (view-workspace))
  
  
  (method (edit-event self (close? #t))
    (let ((manager (find-ascendant self Script-Manager))
          (tree (locate self 'events)))
      (let ((event (get-single-selected-data tree)))
        (when event
          (let ((entity (register-asset-script event)))
            (set-edited-entity entity)
            (update-script-panel)
            (when close?
              (toggle-zoom (locate manager 'workspace-splitter) 'second)
              (acquire-focus (locate manager '(script text))))))))))


(class Events-Tree extends Tree-View)


;;;
;;;; Script
;;;


(class Script-View extends Layout-View
  
  
  (form
    (<install>                            layout-type: border
      ;; together make tools invisible for now
      (<Layout-View>          name: tools visible?: #f location: north size: {Dimension 100 22}
        (<Push-Button>        name: run   title: "Run" style: text background: #f size: {Dimension 30 22} action-handler: {Event-Handler :guest on-run}))
      (<Scroller-View>                    location: center style: document hscroll?: #f vscroll?: #f
        (<content~>
          (<Script-Text-View> name: text  background: #f)))))
  

  (method override (get-tools-view self)
    (locate self 'tools))
  
  
  (method (on-run self evt)
    (let ((zone (current-zone)))
      (let ((manager (find-ascendant self Script-Manager)))
        (let ((edited (get-edited manager)))
          (when (is? edited Entity)
            (let ((script (need-script zone edited)))
              ;; sejour quicky
              (when script
                (save-script manager)
                (run-script-change (current-seconds) edited)))))))))


;;;
;;;; Text
;;;


(definition symbol-completer
  #f)

(definition (get-symbol-completer)
  (or symbol-completer
      (let ((completer (new Symbol-Completer (map symbol->string (table-keys (registered-contours))))))
        (set! symbol-completer completer)
        completer)))


(class Script-Text-Model extends Text-Model
  
  
  @why-did-i-do-this?
  (method override (replace-recolorize self start count)
    ))


(class Script-Text-View extends Jazz-Text-View
  
  
  (method override (install self rest)
    (nextmethod self rest)
    (add-style self 'Walk  {Text-Style Base frame: {Color Orange} highlight: {Color Orange alpha: .4}})
    (add-style self 'Error {Text-Style Base frame: {Color Red} highlight: {Color Red alpha: .4}}))
  
  
  (method override (new-model self)
    (new Script-Text-Model base-style: {Text-Style Code-Base} left-padding: 6))
  
  
  (method override (context-menu? self)
    #f)
  
  
  (method override (content-changed self range strings undo-range undo-strings)
    (let ((zone (current-zone)))
      (unless (inhibit-content-changes?)
        (let ((manager (find-ascendant self Script-Manager)))
          (let ((edited (get-edited manager)))
            (when (is? edited Entity)
              (let ((script (need-script zone edited))
                    (run? (world-setting 'world.live-coding? #t)))
                ;; sejour quicky
                (when script
                  (save-script manager)
                  (unless (world-setting 'world.inhibit-scripts? #f)
                    (when run?
                      (unless (client?)
                        (evaluate-script edited script))))
                  (update-script-change (current-seconds) edited range strings undo-range undo-strings run?)))))))))

  
  (method override (show-arguments self)
    )
  
  
  (method override (evaluate-selection self)
    ;; quicky for now
    (if (and edited-entity (equal? (car (get-root (get-asset edited-entity))) "module"))
        (nextmethod self)
      (let ((zone (current-zone)))
        (let ((manager (find-ascendant self Script-Manager)))
          (let ((edited (get-edited manager)))
            (when (is? edited Entity)
              (let ((script (need-script zone edited)))
                ;; sejour quicky
                (when script
                  (save-script manager)
                  (run-script-change (current-seconds) edited)))))))))


  (method override (favorite-completions? self)
    #f)
  
  
  (method override (symbol-completions self name)
    (if (numeric? name)
        '()
      (let ((completer (get-symbol-completer)))
        (complete completer name)))))


;;;
;;;; Contours
;;;


(class Contours-Tree-View extends Tree-View
  
  
  @should-be-done-lazily
  (setup-contours (locate self 'contours))
  
  
  (method package (setup-contours self)
    (define (add-category title)
      (add-row self
        state: 'expanded
        children: (list (new Tree-Node title: title font: {Font Label-User} color: {Color red: 220 green: 0 blue: 0}))))
    
    (define (add-contour father name)
      (add-row self
        father: father
        children: (list (new Tree-Node title: (->string name) font: {Font Label-User} color: {Color White}))
        user-data: name))
    
    (for-each (lambda (category)
                (let ((contours (sorted-category-contours category)))
                  (unless (null? contours)
                    (let ((father (add-category (capitalize (symbol->string (get-name category))))))
                      (for-each (lambda (contour)
                                  (add-contour father (get-name contour)))
                                contours)))))
              (sorted-contour-categories)))
  
  
  (method override (cursor-update self evt)
    (set-cursor :finger))
  
  
  (method override (mouse-activate? self)
    #f)

  
  (method override (mouse-down self evt)
    )
  
  
  (method override (mouse-move self evt)
    )
  
  
  (method override (mouse-up self evt)
    )
  
  
  (method override (drag-move self evt)
    )
  
  
  (method override (drag-up self evt . rest)
    )
  
  
  (method override (mouse-copy? self event)
    #t)
  
  
  (method override (mouse-data self pos)
    (let ((cell (view->tree self pos)))
      (and cell
           (let ((row (get-row self (get-line cell))))
             (and row
                  (let ((name (get-user-data row)))
                    (and name
                         (->string (get-signature (registered-contour name)))))))))))


;;;
;;;; Stack
;;;


(class Stack-Tree-View extends Tree-View
  
  
  (method package (update self edited)
    (remove-every-row self)
    (when edited
      (let ((script (get-script edited)))
        (when script
          (when (eq? (get-state script) 'error)
            (let ((stack (get-stack script)))
              (when stack
                (for-each (lambda (frame)
                            (add-row self
                              children: (list (new Tree-Node title: (->string frame) font: {Font Label-User}))))
                          stack)))))))))


;;;
;;;; Expression
;;;


(define-expression instance
  namespace?: #t
  declaration?: #t
  anonymous?: #t
  modifiers: ()
  tabulate: -1
  walk: :script)


(define-expression handle
  declaration?: #t
  tabulate: 1
  walk: :define))
