;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Script Pane
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2016
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.interface.script jazz


(import (jazz.catalog)
        (jazz.editor.jazz)
        (jazz.editor.lisp)
        (jazz.jml)
        (jazz.graphic)
        (jazz.project)
        (jazz.text)
        (jazz.ui)
        (world)
        (world.actor)
        (world.autoload)
        (world.block)
        (world.contour)
        (world.creature)
        (world.interface.pane)
        (world.script) ;; for contours
        (world.scripter)
        (world.scripting)
        (world.support)
        (world.syntax (phase syntax))
        (world.window))


(definition public (toggle-script)
  (let ((window (current-world-window))
        (world (current-world)))
    (set-interface-script? (not interface-script?))
    (update-script-pane)
    (update-parameter~ world 'script)
    (update-window-cursor~ window)))


(definition public (update-script-pane)
  (let ((interface (current-interface))
        (world (current-world))
        (zone (current-zone)))
    (let ((window (get-window~ world))
          (pane (child~ interface 'script)))
      (define (hide-pane)
        (save-pane)
        (set-actor~ pane #f)
        (set-visible?~ pane #f)
        (reset-focus~ window))
      
      (define (show-pane actor)
        (set-actor~ pane actor)
        (set-visible?~ pane #t))
      
      (define (save-pane)
        (save-script~ pane))
      
      (if (not interface-script?)
          (hide-pane)
        (let ((targ (first-target~ world)))
          (cond ((and (is? targ Block-Entity) (eq? (get-model~ targ) 'CommandBlock))
                 (save-pane)
                 (let ((block-proxy (find-block-proxy~ targ)))
                   (let ((text (locate~ pane 'text))
                         (content (if block-proxy (get-text~ (get-script~ block-proxy)) "")))
                     (set-string-content~ text (or content ""))
                     (show-pane (or block-proxy targ)))))
                ((is? targ Block-Proxy)
                 (save-pane)
                 (let ((text (locate~ pane 'text))
                       (script (get-script~ targ)))
                   (set-string-content~ text (if script (get-text~ script) ""))
                   (show-pane targ)))
                ((is? targ Actor)
                 (save-pane)
                 (let ((text (locate~ pane 'text))
                       (script (get-script~ targ)))
                   (set-string-content~ text (if script (get-text~ script) ""))
                   (show-pane targ)))
                (else
                 (let ((scriptable? (and targ (scriptable?~ targ))))
                   (if (not scriptable?)
                       (hide-pane)
                     (let ((name (get-name~ targ)))
                       (if (not name)
                           (hide-pane)
                         (if (not (get-cataloguer))
                             (hide-pane)
                           (let ((locator (compose-reference 'tutorial.objectives name)))
                             (let ((entry (locator->entry locator)))
                               (if (not entry)
                                   (hide-pane)
                                 (save-pane)
                                 (let ((text (locate~ pane 'text)))
                                   (set-moniker~ (get-document-controller~ text) (get-moniker~ entry))
                                   (set-selection-safe~ text (get-range~ entry) reposition: 'vertical ensure-displayed?: #t)
                                   (show-pane #f)))))))))))))))))


(definition (need-script obj (create?: create? #t))
  (let ((zone (current-zone)))
    (if (and (is? obj Block-Entity)
             (is-not? obj Block-Proxy))
        (let ((block-proxy (find-block-proxy~ obj)))
          (if block-proxy
              (get-script~ block-proxy)
            (and create?
                 (let ((pos (get-position~ obj)))
                   (let ((section (position-section~ zone pos create?: #t)))
                     (with-section-designer~ zone section
                       (lambda (designer container)
                         (let ((block-proxy (new Block-Proxy parent: container)))
                           (set-designer-section~ block-proxy section)
                           (add-child~ designer block-proxy container properties: (list 'position pos))
                           (let ((script (new Script parent: block-proxy)))
                             (add-child~ designer script block-proxy)
                             script)))))))))
      (get/create-script obj create?: create?))))


;;;
;;;; Script-Pane
;;;


(class Script-Pane extends World-Pane
  
  
  (form
    (<install>                                              size: {Dimension 420 639} background: {Color red: .000 green: .000 blue: .000 alpha: .450} layout-type: fill
      (<Border-View>                                        border-color: {Color Medium-Gray} border-type: edge style: entry layout-type: fill
        (<Tab-View>                   name: tab             separator?: #t
          (<Tab-Sheet>                name: script-sheet    title: "Script"
            (<!>                      name: content         layout-type: fill
              (<Scroller-View>                              style: document hscroll?: #t vscroll?: #t
                (<content~>                                 layout-type: fill
                  (<Script-Text-View> name: text            background: #f)))))
          (<Tab-Sheet>                name: console-sheet   title: "Console")
          (<Tab-Sheet>                name: exception-sheet title: "Exception")))))
  
  
  (slot actor initialize #f accessors generate)
  
  
  (method (save-script)
    (let ((zone (current-zone)))
      (when actor
        (let ((script (need-script actor create?: #f))
              (text (locate 'text)))
          (let ((content (get-string-content~ text)))
            (unless (equal? (if script (or (get-text~ script) "") "") content)
              (let ((script (or script (need-script actor))))
                (write-element~ zone script 'text content)))))))))


;;;
;;;; Script-Text-View
;;;


(definition symbol-completer
  #f)

(definition (get-symbol-completer)
  (or symbol-completer
      (let ((completer (new Symbol-Completer (map symbol->string (table-keys (registered-contours))))))
        (set! symbol-completer completer)
        completer)))


(class Script-Text-View extends Jazz-Text-View
  
  
  (method override (new-model)
    (new Text-Model base-style: {Text-Style Code-Base} left-padding: 6))
  
  
  (method override (context-menu?)
    #f)
  
  
  (method override (evaluate-selection)
    (let ((range (current-declaration-range)))
      (if (not range)
          (bell)
        (let ((pane (find-ascendant Script-Pane)))
          (let ((script (need-script (get-actor~ pane)))
                (code (get-string range)))
            (evaluate-script~ script code))))))


  (method override (favorite-completions?)
    #f)
  
  
  (method override (symbol-completions name)
    (if (numeric? name)
        '()
      (let ((completer (get-symbol-completer)))
        (complete~ completer name)))))


;;;
;;;; Expression
;;;


(define-expression instance
  namespace?: #t
  declaration?: #t
  anonymous?: #t
  modifiers: ()
  tabulate: -1
  walk: :script)


(define-expression handle
  declaration?: #t
  tabulate: 1
  walk: :define))
