;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Script Pane
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2016
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.interface.script jazz


(import (jazz.catalog)
        (jazz.editor.jazz)
        (jazz.editor.lisp)
        (jazz.jml)
        (jazz.graphic)
        (jazz.project)
        (jazz.ui)
        (world)
        (world.actor)
        (world.autoload)
        (world.creature)
        (world.interface.pane)
        (world.scripting)
        (world.support)
        (world.syntax (phase syntax)))


(definition public (toggle-script)
  (let ((world (current-world)))
    (set-interface-script? (not interface-script?))
    (update-script-pane)
    (update-parameter~ world 'script)))


(definition public (update-script-pane)
  (let ((interface (current-interface))
        (world (current-world)))
    (let ((window (get-window~ world))
          (pane (child~ interface 'script)))
      (define (hide-pane)
        (save-script~ pane)
        (set-actor~ pane #f)
        (set-visible?~ pane #f)
        (reset-focus~ window))
      
      (define (show-pane actor)
        (set-actor~ pane actor)
        (set-visible?~ pane #t))
      
      (if (not interface-script?)
          (hide-pane)
        (let ((targ (first-target~ world)))
          (if (is? targ Actor)
              (let ((text (locate~ pane 'text))
                    (script (get-script~ targ)))
                (set-string-content~ text (or script ""))
                (show-pane targ))
            (let ((scriptable? (and targ (scriptable?~ targ))))
              (if (not scriptable?)
                  (hide-pane)
                (let ((name (get-name~ targ)))
                  (if (not name)
                      (hide-pane)
                    (if (not (get-cataloguer))
                        (hide-pane)
                      (let ((locator (compose-reference 'tutorial.objectives name)))
                        (let ((entry (locator->entry locator)))
                          (if (not entry)
                              (hide-pane)
                            (let ((text (locate~ pane 'text)))
                              (set-moniker~ (get-document-controller~ text) (get-moniker~ entry))
                              (set-selection-safe~ text (get-range~ entry) reposition: 'vertical ensure-displayed?: #t)
                              (show-pane #f))))))))))))))))


;;;
;;;; Script-Pane
;;;


(class Script-Pane extends World-Pane
  
  
  (form
    (<install>                        size: {Dimension 420 639} background: {Color red: .000 green: .000 blue: .000 alpha: .450} layout-type: fill
      (<Border-View>                  border-color: {Color Medium-Gray} border-type: edge style: entry layout-type: fill
        (<Scroller-View>              style: document hscroll?: #t vscroll?: #t
          (<content~>                 layout-type: fill
            (<Script-Text> name: text background: #f))))))
  
  
  (slot actor initialize #f accessors generate)
  
  
  (method (save-script)
    (let ((zone (current-zone)))
      (when actor
        (let ((text (locate 'text)))
          (let ((content (get-string-content~ text)))
            (let ((script (if (empty-string? content) #f content)))
              (write-element~ zone actor 'script script))))))))


;;;
;;;; Script-Text
;;;


(class Script-Text extends Jazz-Text-View
  
  
  (method override (evaluate-selection)
    (let ((pane (find-ascendant Script-Pane)))
      (let ((actor (get-actor~ pane))
            (script (get-string-content)))
        (evaluate-script~ actor script)))))


;;;
;;;; Expression
;;;


(define-expression instance
  namespace?: #t
  declaration?: #t
  anonymous?: #t
  modifiers: ()
  tabulate: -1
  walk: :script)


(define-expression handle
  declaration?: #t
  tabulate: 1
  walk: :define))
