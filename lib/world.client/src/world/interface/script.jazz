;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Script Pane
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2016
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.interface.script jazz


(import (jazz.catalog)
        (jazz.debugger)
        (jazz.editor.jazz)
        (jazz.editor.lisp)
        (jazz.handler)
        (jazz.io)
        (jazz.jml)
        (jazz.graphic)
        (jazz.project)
        (jazz.resource)
        (jazz.search)
        (jazz.text)
        (jazz.tree)
        (jazz.ui)
        (world)
        (world.actor)
        (world.autoload)
        (world.block)
        (world.changes)
        (world.contour)
        (world.creature)
        (world.interface.pane)
        (world.script) ;; for contours
        (world.scripter)
        (world.scripting)
        (world.settings)
        (world.support)
        (world.syntax (phase syntax))
        (world.window))


(definition protected edited-file
  #f)

(definition protected (set-edited-file file)
  (set! edited-file file))

(definition protected (reset-edited-file)
  (set! edited-file #f))


(definition public (toggle-script)
  (interface-script (not interface-script?)))


(definition public (toggle-script-paused)
  (let ((world (current-world)))
    (let ((target (first-target~ world)))
      (when (is? target Entity)
        (let ((script (get-script~ target)))
          (when script
            (enqueue-event~ script 'toggle-paused)))))))


(definition (interface-script flag (update-debugger?: update-debugger? #t) (force?: force? #f))
  (let ((window (current-world-window))
        (world (current-world)))
    (set-interface-script? flag)
    (update-script-pane update-debugger?: update-debugger? force?: force?)
    (update-parameter~ world 'script)
    (update-window-cursor~ window)))


(definition public (view-workspace)
  (let ((visible? interface-script?))
    (interface-script #t force?: #t)
    (let ((interface (current-interface)))
      (let ((pane (child~ interface 'script)))
        (let ((splitter (locate~ pane 'workspace-splitter)))
          (when (zoomed?~ splitter)
            (update-workspace~ pane))
          (if (not visible?)
              (unzoom~ splitter)
            (toggle-zoom~ splitter (locate~ pane 'horz-splitter)))
          @wait
          (if (zoomed?~ splitter)
              (acquire-focus~ (locate~ pane '(script text)))
            (let ((tree (locate~ pane '(scripts scripts))))
              (set-single-selection~ tree 0)
              (acquire-focus~ tree))))))))


(definition public (view-script)
  (interface-script #t)
  (let ((interface (current-interface)))
    (let ((pane (child~ interface 'script)))
      (let ((splitter (locate~ pane 'console-splitter)))
        (zoom~ splitter (locate~ pane 'console-border))
        (acquire-focus~ (locate~ pane '(script text)))))))


(definition public (view-debugger)
  (interface-script #t update-debugger?: #f)
  (let ((interface (current-interface)))
    (let ((pane (child~ interface 'script)))
      (let ((splitter (locate~ pane 'console-splitter)))
        (when (zoomed?~ splitter)
          (update-debugger~ pane))
        (toggle-zoom~ splitter (locate~ pane 'console-border))))))


(definition public (update-debugger target)
  (when interface-script?
    (unless (world-setting 'world.live-coding? #t)
      (let ((interface (current-interface)))
        (let ((pane (child~ interface 'script)))
          (when (get-visible?~ pane)
            (let ((edited (get-edited~ pane)))
              (when (eq? edited target)
                (update-debugger~ pane)
                (let ((splitter (locate~ pane 'console-splitter)))
                  (if (and edited
                           (get-script~ edited)
                           (neq? (get-state~ (get-script~ edited)) 'run))
                      (unzoom~ splitter)
                    (zoom~ splitter (locate~ pane 'console-border))))))))))))


(definition public (view-toolbox)
  (interface-script #t)
  (let ((interface (current-interface)))
    (let ((pane (child~ interface 'script)))
      (let ((splitter (locate~ pane 'horz-splitter)))
        (toggle-zoom~ splitter (locate~ pane 'vert-splitter))))))


(definition public (run-selected-script)
  (let ((world (current-world)))
    (let ((entity (first-target~ world)))
      (if (not entity)
          (bell)
        (let ((script (get-script~ entity)))
          (if (not script)
              (bell)
            (evaluate-script~ entity script)))))))


(definition public (update-script-pane (update-debugger?: update-debugger? #t) (force?: force? #f))
  (let ((interface (current-interface))
        (world (current-world))
        (zone (current-zone)))
    (let ((window (get-window~ world))
          (pane (child~ interface 'script)))
      (define (hide-pane)
        (save-pane)
        (let ((edited (get-edited~ pane)))
          ;; in case element was deleted
          (when (and edited (get-designer-chunk~ edited))
            (edit-script-change (current-seconds) edited #f)))
        ;; collabo hack
        (unless (local?)
          (set-visible?~ (child~ interface 'chat) #t))
        (set-edited~ pane #f)
        (set-visible?~ pane #f)
        (reset-focus~ window))
      
      (define (show-pane edited)
        (let ((actual (get-edited~ pane)))
          (when (and actual (neq? actual edited))
            (edit-script-change (current-seconds) actual #f)))
        (set-edited~ pane edited)
        (when edited
          (edit-script-change (current-seconds) edited #t))
        (set-visible?~ pane #t)
        ;; collabo hack
        (unless (local?)
          (set-visible?~ (child~ interface 'chat) #f))
        (when (and update-debugger? edited)
          (update-debugger edited)))
      
      (define (save-pane)
        (save-script~ pane))
      
      (if (not interface-script?)
          (hide-pane)
        (if edited-file
            (begin
              (save-pane)
              (let ((text (locate~ pane '(script text))))
                (load-content~ text edited-file)
                (show-pane #f)))
          (let ((targ (first-target~ world)))
            (unless (and targ (eq? targ (get-edited~ pane)))
              (cond ((is? targ Block-Proxy)
                     (save-pane)
                     (let ((text (locate~ pane '(script text)))
                           (script (get-script~ targ)))
                       (set-string-content~ text (if script (get-text~ script) ""))
                       (show-pane targ)))
                    ((and (is? targ Block-Entity) (eq? (get-model~ targ) 'CommandBlock))
                     (save-pane)
                     (let ((block-proxy (or (find-block-proxy~ targ) (create-block-proxy~ zone targ))))
                       (let ((text (locate~ pane '(script text)))
                             (content (get-text~ (get-script~ block-proxy))))
                         (set-string-content~ text (or content ""))
                         (show-pane block-proxy))))
                    ;; quick test if we are editing grass for instance. need to think this through
                    ((and (is? targ Entity) (get-designer-chunk~ targ))
                     (save-pane)
                     (let ((text (locate~ pane '(script text)))
                           (script (get-script~ targ)))
                       (set-string-content~ text (if script (get-text~ script) ""))
                       (show-pane targ)))
                    (else
                     (if force?
                         (show-pane #f)
                       (hide-pane))
                     @obsolete-scriptable!?
                     (let ((scriptable? (and targ (scriptable?~ targ))))
                       (if (not scriptable?)
                           (hide-pane)
                         (let ((name (get-name~ targ)))
                           (if (not name)
                               (hide-pane)
                             (if (not (get-cataloguer))
                                 (hide-pane)
                               (let ((locator (compose-reference 'tutorial.objectives name)))
                                 (let ((entry (locator->entry locator)))
                                   (if (not entry)
                                       (hide-pane)
                                     (save-pane)
                                     (let ((text (locate~ pane '(script text))))
                                       (set-moniker~ (get-document-controller~ text) (get-moniker~ entry))
                                       (set-selection-safe~ text (get-range~ entry) reposition: 'vertical ensure-displayed?: #t)
                                       (show-pane #f)))))))))))))))))))


;;;
;;;; Pane
;;;


(class Script-Pane extends World-Pane
  
  
  (form
    (<install>                                                               size: {Dimension 420 639} background: {Color red: .000 green: .000 blue: .000 alpha: .450} layout-type: fill
      (<Splitter-View>                              name: workspace-splitter location: first separator: none orientation: vert mode: absolute division: 250 state: zoom target: second
        (<Splitter-View>                            name: workspace-border   location: first separator: none orientation: horz mode: relative division: 50
          (<Border-View>                                                     location: first border-color: {Color Medium-Gray} border-type: edge style: entry
            (<Pad-View>
              (<Docked-Host>                                                 title: "Scripts" location: selection
                (<Scripts-Guest>                    name: scripts))))
          (<Border-View>                                                     location: second border-color: {Color Medium-Gray} border-type: edge style: entry
            (<Pad-View>
              (<Docked-Host>                                                 title: "Modules" location: selection
                (<Modules-Guest>                    name: modules)))))
        (<Splitter-View>                            name: horz-splitter      location: second separator: none orientation: horz mode: relative division: -30 state: zoom target: first
          (<Splitter-View>                          name: vert-splitter      location: first separator: none orientation: vert mode: absolute division: -17 state: zoom target: first
            (<Splitter-View>                        name: console-splitter   location: first separator: none orientation: vert mode: relative division: -27 state: zoom target: first
              (<Border-View>                        name: console-border     location: first border-color: {Color Medium-Gray} border-type: edge style: entry
                (<Pad-View>
                  (<Docked-Host>                                             title: "Script" location: selection
                    (<Script-Guest>                 name: script))))
              (<Splitter-View>                                               location: second separator: none orientation: horz mode: relative division: 40
                (<Border-View>                      name: exception-border   location: first border-color: {Color Medium-Gray} border-type: edge style: entry layout-type: fill
                  (<Pad-View>
                    (<Docked-Host>                                           title: "Exception" location: selection
                      @w
                      (<Exception-View>             name: exception)
                      (<Scroller-View>                                       style: document hscroll?: #f vscroll?: #f
                        (<content~>                                          layout-type: fill
                          (<Exception-Text-View>    name: exception-text     background: #f))))))
                (<Border-View>                      name: stack-border       location: second border-color: {Color Medium-Gray} border-type: edge style: entry layout-type: fill
                  (<Pad-View>
                    (<Docked-Host>                                           title: "Stack" location: selection
                      (<Scroller-View>                                       style: document hscroll?: #f vscroll?: #f
                        (<content~>                                          layout-type: fill
                          (<Tree-Header>                                     style: document shown?: #f
                            (<content~>
                              (<Stack-Tree-View>    name: stack              portfolio: :images filled-column: frame background: #f double-click-handler: {Event-Handler :form on-double-click} return-press-handler: {Event-Handler :form on-return-press} escape-press-handler: {Event-Handler :form on-escape-press}
                                (<Tree-Node-Column> name: frame              title: "Frame" width: 235 toplevel-controls?: #f display-images?: #f display-levels?: #f)))))))))))
            (<Minibuffer-Toolbar>))
          (<Border-View>                            name: toolbox-border     location: second border-color: {Color Medium-Gray} border-type: edge style: entry layout-type: fill
            (<Pad-View>
              (<Docked-Host>                                                 title: "Toolbox" location: selection
                (<Scroller-View>                                             style: document hscroll?: #f vscroll?: #f
                  (<content~>                                                layout-type: fill
                    (<Tree-Header>                                           style: document shown?: #f
                      (<content~>
                        (<Contours-Tree-View>       name: contours           portfolio: :images filled-column: contour background: #f double-click-handler: {Event-Handler :form on-double-click} return-press-handler: {Event-Handler :form on-return-press} escape-press-handler: {Event-Handler :form on-escape-press}
                          (<Tree-Node-Column>       name: contour            title: "Contour" width: 235 toplevel-controls?: #f display-images?: #f display-levels?: #f)))))))))))))
  
  
  (slot edited initialize #f accessors generate)
  
  
  (method override (finish initargs)
    (nextmethod initargs)
    (when (world-setting 'world.live-coding? #t)
      (set-visible?~ (locate '(script run)) #f))
    (setup-contours~ (locate 'contours)))
  
  
  (method (update-workspace)
    (update~ (locate 'scripts))
    (update~ (locate 'modules)))
  
  
  (method (update-debugger)
    (update~ (locate 'exception-text) edited)
    (update~ (locate 'stack) edited))
  
  
  (method (save-script)
    (let ((zone (current-zone)))
      (when edited
        (let ((script (need-script~ zone edited create?: #f))
              (text (locate '(script text))))
          (let ((content (get-string-content~ text)))
            (unless (equal? (if script (or (get-text~ script) "") "") content)
              ;; in case element was deleted
              (when (get-designer-chunk~ edited)
                (let ((script (or script (need-script~ zone edited))))
                  ;; save new block proxy
                  (when (and (is? edited Block-Proxy) (not (get-parent~ edited)))
                    (with-designer~ zone edited
                      (lambda (designer container)
                        (add-child~ designer edited container properties: (list 'position (get-position~ edited)))
                        (add-child~ designer (get-script~ edited) edited))))
                  (write-element~ zone script 'text content))))))))))


;;;
;;;; Scripts
;;;


(class Scripts-Guest extends Scroller-View
  
  
  (form
    (<install>                                  style: document hscroll?: #f vscroll?: #f
      (<content~>                               layout-type: fill
        (<Tree-Header>                          style: document shown?: #f
          (<content~>
            (<Scripts-Tree>       name: scripts portfolio: :images filled-column: script background: #f show-unfocused-selection?: #f double-click-handler: {Event-Handler :form on-double-click} return-press-handler: {Event-Handler :form on-return-press} escape-press-handler: {Event-Handler :form on-escape-press}
              (<Tree-Node-Column> name: script  title: "Script" width: 235 toplevel-controls?: #f display-images?: #f display-levels?: #f)))))))
  
  
  (method (update)
    (let ((world (current-world)))
      (let ((scripts (partition-scripts~ world (collect-scripts~ world)))
            (tree (locate 'scripts)))
        (remove-every-row~ tree)
        (for-each (lambda (partition)
                    (bind (title . children) partition
                      (let ((father (add-row~ tree
                                      state: 'expanded
                                      children: (list (new Tree-Node title: title font: {Font Label-User} color: {Color red: 220 green: 0 blue: 0})))))
                        (for-each (lambda (script)
                                    (bind (dir . path) script
                                      (let ((title (extract-spine (join (if (> (length path) 1) (cdr path) path) "."))))
                                        (add-row~ tree
                                          father: father
                                          children: (list (new Tree-Node title: title font: {Font Label-User} color: {Color White}))
                                          user-data: script))))
                                  children))))
                  scripts))))
  
  
  (method (on-double-click evt)
    (edit-script))
  
  
  (method override (on-return-press evt)
    (edit-script))
  
  
  (method override (on-escape-press evt)
    (view-workspace))
  
  
  (method (edit-script)
    (let ((pane (find-ascendant Script-Pane))
          (tree (locate 'scripts)))
      (let ((script (get-single-selected-data~ tree)))
        (when script
          (bind (dir . path) script
            (let ((file (new-file~ dir path)))
              (set-edited-file file)
              (update-script-pane)
              (toggle-zoom~ (locate~ pane 'workspace-splitter) (locate~ pane 'horz-splitter))
              (acquire-focus~ (locate~ pane '(script text))))))))))


(class Scripts-Tree extends Tree-View)


;;;
;;;; Modules
;;;


(class Modules-Guest extends Scroller-View
  
  
  (form
    (<install>                                  style: document hscroll?: #f vscroll?: #f
      (<content~>                               layout-type: fill
        (<Tree-Header>                          style: document shown?: #f
          (<content~>
            (<Modules-Tree>       name: modules portfolio: :images filled-column: module background: #f show-unfocused-selection?: #f double-click-handler: {Event-Handler :form on-double-click} return-press-handler: {Event-Handler :form on-return-press} escape-press-handler: {Event-Handler :form on-escape-press}
              (<Tree-Node-Column> name: module  title: "Module" width: 235 toplevel-controls?: #f display-images?: #f display-levels?: #f)))))))
  
  
  (method (update)
    (let ((world (current-world)))
      (let ((modules (collect-modules~ world))
            (tree (locate 'modules)))
        (define (present-path path)
          (let ((last (last path)))
            (if (and (starts-with? last "_")
                     (ends-with? last ".jazz"))
                (let ((len (string-length last)))
                  (join (append (butlast (butlast path)) (list (substring last 1 (- len 5)))) "."))
              (join path "."))))
        
        (remove-every-row~ tree)
        (for-each (lambda (module)
                    (bind (dir . path) module
                      (let ((title (present-path path)))
                        (add-row~ tree
                          children: (list (new Tree-Node title: title font: {Font Label-User} color: {Color White}))
                          user-data: module))))
                  modules))))
  
  
  (method (on-double-click evt)
    (edit-module))
  
  
  (method override (on-return-press evt)
    (edit-module))
  
  
  (method override (on-escape-press evt)
    (view-workspace))
  
  
  (method (edit-module)
    (let ((pane (find-ascendant Script-Pane))
          (tree (locate 'modules)))
      (let ((module (get-single-selected-data~ tree)))
        (bind (dir . path) module
          (let ((file (new-file~ dir path)))
            (set-edited-file file)
            (update-script-pane)
            (toggle-zoom~ (locate~ pane 'workspace-splitter) (locate~ pane 'horz-splitter))
            (acquire-focus~ (locate~ pane '(script text)))))))))


(class Modules-Tree extends Tree-View)


;;;
;;;; Script
;;;


(class Script-Guest extends Layout-View
  
  
  (form
    (<install>                            layout-type: border
      (<Layout-View>          name: tools
        (<Push-Button>        name: run   title: "Run" style: text background: #f size: {Dimension 30 22} action-handler: {Event-Handler :guest on-run}))
      (<Scroller-View>                    location: center style: document hscroll?: #f vscroll?: #f
        (<content~>                       layout-type: fill
          (<Script-Text-View> name: text  background: #f content-change-handler: {Event-Handler :guest on-text-change})))))
  
  
  (method override (get-tools-view)
    (locate 'tools))
  
  
  (method (on-run evt)
    (let ((zone (current-zone)))
      (let ((pane (find-ascendant Script-Pane)))
        (let ((edited (get-edited~ pane)))
          (when (is? edited Entity)
            (let ((script (need-script~ zone edited)))
              (save-script~ pane)
              (evaluate-script~ edited script)))))))
  
  
  (method (on-text-change evt)
    (let ((zone (current-zone)))
      (unless (world-setting 'world.inhibit-scripts? #f)
        (unless (inhibit-content-changes?)
          (when (world-setting 'world.live-coding? #t)
            (let ((pane (find-ascendant Script-Pane)))
              (let ((edited (get-edited~ pane)))
                (when (is? edited Entity)
                  (let ((script (need-script~ zone edited)))
                    (save-script~ pane)
                    (evaluate-script~ edited script)
                    (update-script-change (current-seconds) edited (get-range~ evt) (get-strings~ evt) (get-undo-range~ evt) (get-undo-strings~ evt))))))))))))


;;;
;;;; Code
;;;


(definition symbol-completer
  #f)

(definition (get-symbol-completer)
  (or symbol-completer
      (let ((completer (new Symbol-Completer (map symbol->string (table-keys (registered-contours))))))
        (set! symbol-completer completer)
        completer)))


(class Script-Text-View extends Jazz-Text-View
  
  
  (method override (new-model)
    (new Text-Model base-style: {Text-Style Code-Base} left-padding: 6))
  
  
  (method override (context-menu?)
    #f)
  
  
  (method override (evaluate-selection)
    (let ((zone (current-zone)))
      (let ((pane (find-ascendant Script-Pane)))
        (let ((edited (get-edited~ pane)))
          (when (is? edited Entity)
            (let ((script (need-script~ zone edited)))
              (save-script~ pane)
              (evaluate-script~ edited script)))))))


  (method override (favorite-completions?)
    #f)
  
  
  (method override (symbol-completions name)
    (if (numeric? name)
        '()
      (let ((completer (get-symbol-completer)))
        (complete~ completer name)))))


;;;
;;;; Contours
;;;


(class Contours-Guest extends Scroller-View
  
  
  (form
    (<install>                                   style: document hscroll?: #f vscroll?: #f
      (<content~>                                layout-type: fill
        (<Tree-Header>                           style: document shown?: #f
          (<content~>
            (<Contours-Tree-View> name: contours portfolio: :images filled-column: contour background: #f double-click-handler: {Event-Handler :form on-double-click} return-press-handler: {Event-Handler :form on-return-press} escape-press-handler: {Event-Handler :form on-escape-press}
              (<Tree-Node-Column> name: contour  title: "Contour" width: 235 toplevel-controls?: #f display-images?: #f display-levels?: #f))))))))


(class Contours-Tree-View extends Tree-View
  
  
  (method (setup-contours)
    (define (add-father title)
      (add-row
        state: 'expanded
        children: (list (new Tree-Node title: title font: {Font Label-User} color: {Color red: 220 green: 0 blue: 0}))))
    
    (define (add father name)
      (add-row
        father: father
        children: (list (new Tree-Node title: (->string name) font: {Font Label-User} color: {Color White}))
        user-data: name))
    
    (let ((father (add-father "Event")))
      (add father 'handle)
      (add father 'accept)
      (add father 'interact)
      (add father 'double-click)
      (add father 'power)
      (add father 'unpower)
      (add father 'teleport)
      (add father 'explode)
      (add father 'hit))
    (let ((father (add-father "Interface")))
      (add father 'message)
      (add father 'sound))
    (let ((father (add-father "Move")))
      (add father 'walk)
      (add father 'run)
      (add father 'sprint)
      (add father 'stay)
      (add father 'move)
      (add father 'move-to)
      (add father 'rotate)
      (add father 'jump))
    (let ((father (add-father "Block")))
      (add father 'add-block)
      (add father 'delete-block)
      (add father 'change-block))
    (let ((father (add-father "Actor")))
      (add father 'near-player?))
    (let ((father (add-father "Trail")))
      (add father 'trail)
      (add father 'untrail)
      (add father 'trail-color)
      (add father 'clear-trail))
    (let ((father (add-father "Plot")))
      (add father 'plot-axes)
      (add father 'plot-line)))
  
  
  (method override (mouse-data pos)
    (let ((cell (view->tree pos)))
      (and cell
           (let ((row (get-row (get-line~ cell))))
             (and row
                  (let ((name (get-user-data~ row)))
                    (and name
                         (->string (get-signature~ (registered-contour name)))))))))))


;;;
;;;; Exception
;;;


(class Exception-Text-View extends Plain-Text-View
  
  
  (method override (new-model)
    (new Text-Model base-style: {Text-Style Code-Base} left-padding: 6))
  
  
  (method override (context-menu?)
    #f)
  
  
  (method (update edited)
    (if edited
        (let ((script (get-script~ edited)))
          (if script
              (set-string-content (or (get-reason~ script) ""))
            (set-string-content "")))
      (set-string-content ""))))


;;;
;;;; Stack
;;;


(class Stack-Tree-View extends Tree-View
  
  
  (method (update edited)
    (remove-every-row)
    (when edited
      (let ((script (get-script~ edited)))
        (when script
          (let ((stack (get-stack~ script)))
            (when stack
              (for-each (lambda (frame)
                          (add-row
                            children: (list (new Tree-Node title: (->string frame) font: {Font Label-User}))))
                        stack))))))))


;;;
;;;; Expression
;;;


(define-expression instance
  namespace?: #t
  declaration?: #t
  anonymous?: #t
  modifiers: ()
  tabulate: -1
  walk: :script)


(define-expression handle
  declaration?: #t
  tabulate: 1
  walk: :define)


(define-expression accept
  declaration?: #t
  tabulate: 1
  walk: :define))
