;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Script Pane
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2016
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.interface.script jazz


(import (jazz.catalog)
        (jazz.debugger)
        (jazz.editor.jazz)
        (jazz.editor.lisp)
        (jazz.handler)
        (jazz.ide)
        (jazz.jml)
        (jazz.graphic)
        (jazz.project)
        (jazz.resource)
        (jazz.search)
        (jazz.text)
        (jazz.tree)
        (jazz.ui)
        (world)
        (world.actor)
        (world.autoload)
        (world.block)
        (world.contour)
        (world.creature)
        (world.interface.pane)
        (world.script) ;; for contours
        (world.scripter)
        (world.scripting)
        (world.support)
        (world.syntax (phase syntax))
        (world.window))


(definition public (toggle-script)
  (interface-script (not interface-script?)))


(definition (interface-script flag)
  (let ((window (current-world-window))
        (world (current-world)))
    (set-interface-script? flag)
    (update-script-pane)
    (update-parameter~ world 'script)
    (update-window-cursor~ window)))


(definition public (view-script)
  (interface-script #t)
  (let ((interface (current-interface)))
    (let ((pane (child~ interface 'script)))
      (let ((splitter (locate~ pane 'vert-splitter)))
        (zoom~ splitter (locate~ pane 'console-border))
        (acquire-focus~ (locate~ pane '(script text)))))))


(definition public (view-debugger)
  (interface-script #t)
  (let ((interface (current-interface)))
    (let ((pane (child~ interface 'script)))
      (update-exception~ pane)
      (let ((splitter (locate~ pane 'vert-splitter)))
        (toggle-zoom~ splitter (locate~ pane 'console-border))))))


(definition public (update-debugger target)
  (when interface-script?
    (let ((interface (current-interface)))
      (let ((pane (child~ interface 'script)))
        (when (get-visible?~ pane)
          (let ((entity (get-entity~ pane)))
            (when (eq? entity target)
              (update-exception~ pane)
              (let ((splitter (locate~ pane 'vert-splitter)))
                (if (and entity
                         (get-script~ entity)
                         (eq? (get-state~ (get-script~ entity)) 'run))
                    (zoom~ splitter (locate~ pane 'console-border))
                  (unzoom~ splitter))))))))))


(definition public (view-toolbox)
  (interface-script #t)
  (let ((interface (current-interface)))
    (let ((pane (child~ interface 'script)))
      (let ((splitter (locate~ pane 'horz-splitter)))
        (toggle-zoom~ splitter (locate~ pane 'right-splitter))))))


(definition public (update-script-pane)
  (let ((interface (current-interface))
        (world (current-world))
        (zone (current-zone)))
    (let ((window (get-window~ world))
          (pane (child~ interface 'script)))
      (define (hide-pane)
        (save-pane)
        (set-entity~ pane #f)
        (set-visible?~ pane #f)
        (reset-focus~ window))
      
      (define (show-pane entity)
        (set-entity~ pane entity)
        (set-visible?~ pane #t)
        (update-debugger entity))
      
      (define (save-pane)
        (save-script~ pane))
      
      (if (not interface-script?)
          (hide-pane)
        (let ((targ (first-target~ world)))
          (cond ((and (is? targ Block-Entity) (eq? (get-model~ targ) 'CommandBlock))
                 (save-pane)
                 (let ((block-proxy (find-block-proxy~ targ)))
                   (let ((text (locate~ pane '(script text)))
                         (content (if block-proxy (get-text~ (get-script~ block-proxy)) "")))
                     (set-string-content~ text (or content ""))
                     (show-pane (or block-proxy targ)))))
                ((is? targ Block-Proxy)
                 (save-pane)
                 (let ((text (locate~ pane '(script text)))
                       (script (get-script~ targ)))
                   (set-string-content~ text (if script (get-text~ script) ""))
                   (show-pane targ)))
                ((is? targ Actor)
                 (save-pane)
                 (let ((text (locate~ pane '(script text)))
                       (script (get-script~ targ)))
                   (set-string-content~ text (if script (get-text~ script) ""))
                   (show-pane targ)))
                (else
                 (let ((scriptable? (and targ (scriptable?~ targ))))
                   (if (not scriptable?)
                       (hide-pane)
                     (let ((name (get-name~ targ)))
                       (if (not name)
                           (hide-pane)
                         (if (not (get-cataloguer))
                             (hide-pane)
                           (let ((locator (compose-reference 'tutorial.objectives name)))
                             (let ((entry (locator->entry locator)))
                               (if (not entry)
                                   (hide-pane)
                                 (save-pane)
                                 (let ((text (locate~ pane '(script text))))
                                   (set-moniker~ (get-document-controller~ text) (get-moniker~ entry))
                                   (set-selection-safe~ text (get-range~ entry) reposition: 'vertical ensure-displayed?: #t)
                                   (show-pane #f)))))))))))))))))


(definition (need-script obj (create?: create? #t))
  (let ((zone (current-zone)))
    (if (and (is? obj Block-Entity)
             (is-not? obj Block-Proxy))
        (let ((block-proxy (find-block-proxy~ obj)))
          (if block-proxy
              (get-script~ block-proxy)
            (and create?
                 (let ((pos (get-position~ obj)))
                   (let ((section (position-section~ zone pos create?: #t)))
                     (with-section-designer~ zone section
                       (lambda (designer container)
                         (let ((block-proxy (new Block-Proxy parent: container)))
                           (set-designer-section~ block-proxy section)
                           (add-child~ designer block-proxy container properties: (list 'position pos))
                           (let ((script (new Script parent: block-proxy)))
                             (add-child~ designer script block-proxy)
                             script)))))))))
      (or (get-script~ obj)
          (and create?
               (let ((script (new Script parent: obj)))
                 (with-designer~ zone obj
                   (lambda (designer container)
                     (add-child~ designer script obj)))
                 script))))))


;;;
;;;; Script-Pane
;;;


(class Script-Guest extends Layout-View
  
  
  (form
    (<install>                           layout-type: border
      (<Scroller-View>                   location: center style: document hscroll?: #f vscroll?: #f
        (<content~>                      layout-type: fill
          (<Script-Text-View> name: text background: #f))))))


(class Script-Pane extends World-Pane
  
  
  (form
    (<install>                                                      size: {Dimension 420 639} background: {Color red: .000 green: .000 blue: .000 alpha: .450} layout-type: fill
      (<Splitter-View>                       name: horz-splitter    location: first separator: none orientation: horz mode: relative division: -30 state: zoom target: first
        (<Splitter-View>                     name: right-splitter   location: first separator: none orientation: vert mode: absolute division: -17 state: zoom target: first
          (<Splitter-View>                   name: vert-splitter    location: first separator: none orientation: vert mode: relative division: -27 state: zoom target: first
            (<Border-View>                   name: console-border   border-color: {Color Medium-Gray} border-type: edge style: entry
              (<Pad-View>
                (<Docked-Host>               name: script-sheet     title: "Script" location: selection
                  (<Script-Guest>            name: script))))
            (<Splitter-View>                                        separator: none orientation: horz mode: relative division: 40
              (<Border-View>                   name: exception-border location: first border-color: {Color Medium-Gray} border-type: edge style: entry layout-type: fill
                (<Pad-View>
                  (<Docked-Host>                                      title: "Exception" location: selection
                    @w
                    (<Exception-View> name: exception)
                    (<Scroller-View>                                  style: document hscroll?: #f vscroll?: #f
                      (<content~>                                     layout-type: fill
                        (<Exception-Text-View> name: exception-text   background: #f))))))
              (<Border-View>                   name: stack-border location: second border-color: {Color Medium-Gray} border-type: edge style: entry layout-type: fill
                (<Pad-View>
                  (<Docked-Host>                                      title: "Stack" location: selection
                    (<Scroller-View>                                  style: document hscroll?: #f vscroll?: #f
                      (<content~>                                     layout-type: fill
                        (<Tree-Header>                                    style: document shown?: #f
                    (<content~>
                      (<Tree-View>           name: frames        portfolio: :images filled-column: frame background: #f double-click-handler: {Event-Handler :form on-double-click} return-press-handler: {Event-Handler :form on-return-press} escape-press-handler: {Event-Handler :form on-escape-press}
                        (<Tree-Node-Column>  name: frame         title: "Frame" width: 235 toplevel-controls?: #f display-images?: #f display-levels?: #f)))))))))))
          (<Minibuffer-Toolbar>))
        (<Border-View>                       name: toolbox-border   location: second border-color: {Color Medium-Gray} border-type: edge style: entry layout-type: fill
          (<Pad-View>
            (<Docked-Host>                                          title: "Toolbox" location: selection
              (<Scroller-View>                                      style: document hscroll?: #f vscroll?: #f
                (<content~>                                         layout-type: fill
                  (<Tree-Header>                                    style: document shown?: #f
                    (<content~>
                      (<Tree-View>           name: functions        portfolio: :images filled-column: function background: #f double-click-handler: {Event-Handler :form on-double-click} return-press-handler: {Event-Handler :form on-return-press} escape-press-handler: {Event-Handler :form on-escape-press}
                        (<Tree-Node-Column>  name: function         title: "Function" width: 235 toplevel-controls?: #f display-images?: #f display-levels?: #f))))))))))))
  
  
  (slot entity initialize #f accessors generate)
  
  
  (method override (finish initargs)
    (nextmethod initargs)
    (let ((tree (locate 'functions)))
      (define (add-father title)
        (add-row~ tree
          state: 'expanded
          children: (list (new Tree-Node title: title font: {Font Label-User} color: {Color red: 220 green: 0 blue: 0}))))
      
      (define (add father title)
        (add-row~ tree
          father: father
          children: (list (new Tree-Node title: title font: {Font Label-User} color: {Color White}))))
      
      (let ((father (add-father "Event")))
        (add father "handle")
        (add father "interact")
        (add father "double-click")
        (add father "power")
        (add father "unpower")
        (add father "teleport")
        (add father "explode")
        (add father "hit"))
      (add-father "")
      (let ((father (add-father "Interface")))
        (add father "message")
        (add father "sound"))
      (add-father "")
      (let ((father (add-father "Move")))
        (add father "walk")
        (add father "run")
        (add father "sprint")
        (add father "move")
        (add father "move-to")
        (add father "rotate"))
      (add-father "")
      (let ((father (add-father "Block")))
        (add father "add-block")
        (add father "delete-block")
        (add father "change-block"))
      (add-father "")
      (let ((father (add-father "Player")))
        (add father "near-player?"))
      (add-father "")
      (let ((father (add-father "Trail")))
        (add father "trail")
        (add father "untrail")
        (add father "trail-color")
        (add father "clear-trail"))
      (add-father "")
      (let ((father (add-father "Plot")))
        (add father "plot-axes")
        (add father "plot-line"))))
  
  
  (method (update-exception)
    (let ((text (locate 'exception-text)))
      (if entity
          (let ((script (get-script~ entity)))
            (if script
                (set-string-content~ text (or (get-reason~ script) ""))
              (set-string-content~ text "")))
        (set-string-content~ text "")))
    (let ((tree (locate 'frames)))
      (remove-every-row~ tree)
      (when entity
        (let ((script (get-script~ entity)))
          (when script
            (let ((stack (get-stack~ script)))
              (when stack
                (for-each (lambda (frame)
                            (add-row~ tree
                              children: (list (new Tree-Node title: (->string frame) font: {Font Label-User}))))
                          stack))))))))
        
  
  
  (method (save-script)
    (let ((zone (current-zone)))
      (when entity
        (let ((script (need-script entity create?: #f))
              (text (locate '(script text))))
          (let ((content (get-string-content~ text)))
            (unless (equal? (if script (or (get-text~ script) "") "") content)
              (let ((script (or script (need-script entity))))
                (write-element~ zone script 'text content)))))))))


;;;
;;;; Script-Text-View
;;;


(definition symbol-completer
  #f)

(definition (get-symbol-completer)
  (or symbol-completer
      (let ((completer (new Symbol-Completer (map symbol->string (table-keys (registered-contours))))))
        (set! symbol-completer completer)
        completer)))


(class Script-Text-View extends Jazz-Text-View
  
  
  (method override (new-model)
    (new Text-Model base-style: {Text-Style Code-Base} left-padding: 6))
  
  
  (method override (context-menu?)
    #f)
  
  
  (method override (evaluate-selection)
    (let ((pane (find-ascendant Script-Pane)))
      (let ((entity (get-entity~ pane)))
        (let ((script (need-script entity)))
          (save-script~ pane)
          (evaluate-script~ entity script)))))


  (method override (favorite-completions?)
    #f)
  
  
  (method override (symbol-completions name)
    (if (numeric? name)
        '()
      (let ((completer (get-symbol-completer)))
        (complete~ completer name)))))


;;;
;;;; Exception-Text-View
;;;


(class Exception-Text-View extends Plain-Text-View
  
  
  (method override (new-model)
    (new Text-Model base-style: {Text-Style Code-Base} left-padding: 6))
  
  
  (method override (context-menu?)
    #f))


;;;
;;;; Expression
;;;


(define-expression instance
  namespace?: #t
  declaration?: #t
  anonymous?: #t
  modifiers: ()
  tabulate: -1
  walk: :script)


(define-expression handle
  declaration?: #t
  tabulate: 1
  walk: :define))
