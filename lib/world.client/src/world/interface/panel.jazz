;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Panels
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.interface.panel jazz


(import (jazz.component)
        (jazz.ui)
        (world)
        (world.context))


(definition panel-stack
  '())

(definition protected (get-panel-stack)
  panel-stack)


(definition protected (top-panel)
  (and (not-null? panel-stack)
       (car panel-stack)))


(definition public (push-panel panel)
  (let ((top (top-panel)))
    (when top
      (set-visible? top #f)))
  (set! panel-stack (cons panel panel-stack)))


(definition public (pop-panel panel)
  (let ((top (top-panel)))
    (when (eq? top panel)
      (set! panel-stack (cdr panel-stack))
      (when (not-null? panel-stack)
        (set-visible? (car panel-stack) #t)))))


(definition protected (reset-panel-stack)
  (set! panel-stack '()))


;;;
;;;; World-Panel
;;;


(class World-Panel extends Layout-View
  
  
  (property layouter initialize #f getter generate setter explicit)
  (property closer   initialize #f accessors generate)
  
  
  (slot moving?        initialize #f)
  (slot start-mouse    initialize #f)
  (slot start-position initialize #f)
  
  
  (method override (close self)
    (nextmethod self)
    (when closer
      (closer self)))
  
  
  (method override (destroy self)
    (nextmethod self)
    (pop-panel self))
  
  
  (method package virtual (user-close self)
    (close self))
  
  
  (method package virtual (escape-close? self)
    #f)
  
  
  (method package virtual (tooltip-use-position? self)
    #f)
  
  
  (method package (set-layouter self proc)
    (set! layouter proc)
    (when layouter
      (layouter self)))
  
  
  (method package (move-panel-down self origin pos)
    (let ((interface (current-interface)))
      (set! moving? #t)
      (bring-to-front self)
      (set! start-mouse (acquire interface origin pos))
      (set! start-position (get-position self))
      (acquire-capture origin)))
  
  
  (method package (move-panel-drag self origin pos)
    (let ((interface (current-interface)))
      (when moving?
        (let ((delta (nu- (acquire interface origin pos) start-mouse)))
          (let ((pos (nu+ start-position delta)))
            (set-location self (list (get-h pos) (get-v pos)))
            (set-position self (nu+ start-position delta)))))))
  
  
  (method package (move-panel-up self origin pos)
    (when moving?
      (release-capture origin)
      (set! moving? #f)))))
