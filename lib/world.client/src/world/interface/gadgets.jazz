;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; World Gadgets
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2013
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.interface.gadgets jazz


(import (jazz.geometry)
        (jazz.graphic)
        (jazz.graphic.opengl.glew)
        (world)
        (world.autoload)
        (world.draw)
        (world.dye)
        (world.dyes)
        (world.enemy)
        (world.entity)
        (world.generate)
        (world.geometry)
        (world.gravity)
        (world.interface)
        (world.interface.bars)
        (world.interface.showcase)
        (world.light)
        (world.material)
        (world.object)
        (world.opengl)
        (world.syntax (phase syntax))
        (world.texture))


(class Gadgets-Showcase extends World-Showcase
  
  
  (method override (showcase-spacing)
    .75)
  
  
  (method override (showcase-elements showing)
    (let ((world (current-world)))
      (let ((spacing (showcase-spacing))
            (names '(light-point light-directional light-ambient gravity))
            (scale .3)
            (x (showcase-x))
            (y (showcase-y))
            (z 0.))
        (map (lambda (name)
               (let ((entity (case name
                               ((light-point)       (new Light-Point       position: (vertex x y z) scales: (vertex scale scale scale)))
                               ((light-directional) (new Light-Directional position: (vertex x y z) scales: (vertex scale scale scale)))
                               ((light-ambient)     (new Light-Ambient     position: (vertex x y z) scales: (vertex scale scale scale)))
                               ((gravity)           (new Gravity           position: (vertex x y z) scales: (vertex scale scale scale))))))
                 (increase! z spacing)
                 entity))
             names))))


  (method override (draw-element entity)
    (draw~ entity))
  
  
  (method override (draw-selection)
    (when selection
      (draw-actor-target~ selection)))
  
  
  (method override (selection-addable?)
    #t)))
