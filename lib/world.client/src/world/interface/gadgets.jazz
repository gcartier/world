;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; World Gadgets
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2013
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.interface.gadgets jazz


(import (jazz.geometry)
        (jazz.graphic)
        (jazz.graphic.opengl.glew)
        (world)
        (world.autoload)
        (world.draw)
        (world.dye)
        (world.dyes)
        (world.entity)
        (world.generate)
        (world.geometry)
        (world.interface)
        (world.interface.bars)
        (world.interface.showcase)
        (world.material)
        (world.object)
        (world.opengl)
        (world.syntax (phase syntax))
        (world.texture))


;; quicky for tests
(import (world.enemy)
        (world.gravity)
        (world.light))


(class Gadgets-Showcase extends World-Showcase
  
  
  (slot entities initialize #f getter generate)
  
  
  (method override (showcase-spacing)
    .75)
  
  
  (method override (showcase-elements)
    (or entities
        (let ((world (current-world)))
          (let ((spacing (showcase-spacing))
                (names '(light-point light-directional light-ambient sphere wolf spider turtle gravity @wait template)))
            (let ((scale .25)
                  (y -3.2)
                  (z 5.))
              (let ((all
                      (map (lambda (name)
                             (let ((scale .3))
                               (let ((entity (case name
                                               ((light-point)       (new Light-Point       position: (vertex 0. y z) scale: (vertex scale scale scale) color: (dye .6 .6 .6 1.)))
                                               ((light-directional) (new Light-Directional position: (vertex 0. y z) scale: (vertex scale scale scale) color: (dye .8 .8 .8 1.)))
                                               ((light-ambient)     (new Light-Ambient     position: (vertex 0. y z) scale: (vertex scale scale scale) color: (dye 1. 1. 1. 1.)))
                                               ((sphere)            (new Sphere            position: (vertex 0. y z) scale: (vertex scale scale scale)))
                                               ((wolf)              (new Wolf              position: (vertex 0. y z) scale: (vertex .6 .6 .6) radiuses: (vertex .6 .6 .6)))
                                               ((spider)            (new Spider            position: (vertex 0. y z) scale: (vertex .6 .6 .6) radiuses: (vertex .6 .6 .6)))
                                               ((turtle)            (new Turtle            position: (vertex 0. y z) scale: (vertex .1 .1 .1) radiuses: (vertex .1 .1 .1)))
                                               ((gravity)           (new Gravity           position: (vertex 0. y z) scale: (vertex .15 .15 .15) radiuses: (vertex .15 .15 .15))))))
                                 (decrease! z spacing)
                                 entity)))
                           names)))
                (set! entities (list->vector all))
                entities))))))


  (method override (draw-elements)
    (let ((entities (showcase-elements)))
      (loop (for n from 0 below (vector-length entities))
            (let ((rank (modulo n (vector-length entities))))
              (let ((entity (vector-ref entities rank)))
                (draw~ entity))))))
  
  
  (method override (draw-target)
    (when target
      (draw-actor-target~ target)))))
