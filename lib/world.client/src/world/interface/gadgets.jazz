;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Gadgets
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.interface.gadgets jazz


(import (jazz.system)
        (world)
        (world.autoload)
        (world.gadget)
        (world.geometry)
        (world.gravity)
        (world.interface.showcase)
        (world.light)
        (world.role)
        (world.syntax (phase syntax)))


(class Gadgets-Showcase extends World-Showcase
  
  
  (method override (deactivate)
    (nextmethod)
    (let ((world (current-world)))
      (update-gadgets~ world (get-draw-gadgets?~ world))))
  
  
  (method override (showcase-spacing)
    .75)
  
  
  (method override (showcase-y)
    -3.)
  
  
  (method override (showcase-z)
    -.35)
  
  
  (method override (showcase-elements showing)
    (let ((world (current-world)))
      (let ((camera (cache-camera))
            (spacing (showcase-spacing))
            (names '(light-point light-directional light-ambient gravity))
            (scaling .3)
            (x (showcase-x))
            (y (showcase-y))
            (z 0.))
        (append (map (lambda (name)
                       (let ((entity (case name
                                       ((light-point)       (new Light-Point       parent: self position: (vertex x y z) scale: (vertex scaling scaling scaling)))
                                       ((light-directional) (new Light-Directional parent: self position: (vertex x y z) scale: (vertex scaling scaling scaling)))
                                       ((light-ambient)     (new Light-Ambient     parent: self position: (vertex x y z) scale: (vertex scaling scaling scaling)))
                                       ((gravity)           (new Gravity           parent: self position: (vertex x y z) scale: (vertex scaling scaling scaling))))))
                         (set-camera~ entity camera)
                         (increase! z spacing)
                         entity))
                     names)
                (if (programmer-role?)
                    (map (lambda (class)
                           (let ((properties (registered-gadget class)))
                             (let ((entity (apply new class parent: self position: (vertex x -3.25 z) scale: (vertex scaling scaling scaling) (properties))))
                               (set-visible?~ entity #t)
                               (set-camera~ entity camera)
                               (increase! z spacing)
                               entity)))
                         (registered-gadget-classes))
                  '())))))
  
  
  (method override (showcase-selection showing elements)
    (or selection (first elements)))
  
  
  (method override (draw-selection)
    (when selection
      (draw-target-circle~ selection)))
  
  
  (method override (selection-addable?)
    #t)))
