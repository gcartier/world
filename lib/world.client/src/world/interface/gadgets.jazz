;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Gadgets
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.interface.gadgets jazz


(import (gaea.geometry)
        (world)
        (world.context)
        (world.gadget)
        (world.gravity)
        (world.interface.showcase)
        (world.light)
        (world.settings))


(class Gadgets-Showcase extends World-Showcase
  
  
  (method override (deactivate self)
    (nextmethod self)
    (let ((world (current-world)))
      (update-gadgets world (get-draw-gadgets? world))))
  
  
  (method override (showcase-front self)
    0.)
  
  
  (method override (showcase-back self)
    0.)
  
  
  (method override (showcase-radius self)
    .3)
  
  
  (method override (showcase-spacing self)
    .75)
  
  
  (method override (showcase-elements self showing)
    (let ((world (current-world)))
      (let ((camera (cache-camera self))
            (spacing (showcase-spacing self))
            (names '(point-light directional-light ambient-light gravity))
            (scaling .3)
            (x 0.)
            (y 0.)
            (z 0.))
        (append (map (lambda (name)
                       (let ((entity (case name
                                       ((point-light)       (new Point-Light       parent: self position: (vertex x y z) scale: (vertex scaling scaling scaling)))
                                       ((directional-light) (new Directional-Light parent: self position: (vertex x y z) scale: (vertex scaling scaling scaling)))
                                       ((ambient-light)     (new Ambient-Light     parent: self position: (vertex x y z) scale: (vertex scaling scaling scaling)))
                                       ((gravity)           (new Gravity           parent: self position: (vertex x y z) scale: (vertex scaling scaling scaling))))))
                         (set-camera entity camera)
                         (increase! z spacing)
                         entity))
                     names)
                (if (developer?)
                    (map (lambda (class)
                           (let ((properties (registered-gadget class)))
                             (let ((entity (apply new class parent: self position: (vertex x y z) scale: (vertex scaling scaling scaling) (properties))))
                               (set-visible? entity #t)
                               (set-camera entity camera)
                               (increase! z spacing)
                               entity)))
                         (registered-gadget-classes))
                  '())))))
  
  
  (method override (showcase-selection self showing elements)
    (or selection (first elements)))
  
  
  (method override (draw-selection self)
    (when selection
      (draw-target-circle selection)))
  
  
  (method override (selection-addable? self)
    #t)))
