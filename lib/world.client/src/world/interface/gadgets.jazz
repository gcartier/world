;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; World Gadgets
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2013
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.interface.gadgets jazz


(import (jazz.geometry)
        (jazz.graphic)
        (jazz.graphic.opengl.glew)
        (world)
        (world.autoload)
        (world.draw)
        (world.dye)
        (world.dyes)
        (world.enemy)
        (world.entity)
        (world.generate)
        (world.geometry)
        (world.gravity)
        (world.interface)
        (world.interface.bars)
        (world.interface.showcase)
        (world.light)
        (world.material)
        (world.object)
        (world.opengl)
        (world.syntax (phase syntax))
        (world.texture))


(class Gadgets-Showcase extends World-Showcase
  
  
  (slot entities initialize #f getter generate)
  
  
  (method (test-screen)
    (let ((entities (showcase-elements))
          (bounds (make-cuboid))
          (front #f)
          (back #f))
      (loop (for n from 0 below (vector-length entities))
            (let ((entity (vector-ref entities n)))
              (get-bounds!~ entity bounds)
              (let ((f (cuboid-front bounds))
                    (b (cuboid-back bounds)))
                (when (or (not front)
                          (> f front))
                  (set! front f))
                (when (or (not back)
                          (< b back))
                  (set! back b)))))
      (values front
              back
              (world->screen~ camera (vertex 0. 0. front))
              (world->screen~ camera (vertex 0. 0. back)))))
  
  
  (method override (showcase-spacing)
    .75)
  
  
  (method override (showcase-elements)
    (define (rotate entity)
      (let ((lookat (get-lookat~ entity)))
        (standardize-lookat! (get-lookat~ entity))
        (rotate-lookat! lookat (- PI/2) (get-up~ lookat))
        (update-matrix~ entity))
      entity)
    
    (or entities
        (let ((world (current-world)))
          (let ((spacing (showcase-spacing))
                (names '(light-point light-directional light-ambient sphere wolf spider turtle gravity @wait template)))
            (let ((scale .25)
                  (y -3.2)
                  (z 0.))
              (let ((all
                      (map (lambda (name)
                             (let ((scale .3))
                               (let ((entity (case name
                                               ((light-point)       (new Light-Point       position: (vertex 0. y z) scale: (vertex scale scale scale)))
                                               ((light-directional) (new Light-Directional position: (vertex 0. y z) scale: (vertex scale scale scale)))
                                               ((light-ambient)     (new Light-Ambient     position: (vertex 0. y z) scale: (vertex scale scale scale)))
                                               ((sphere)            (new Sphere            position: (vertex 0. y z) scale: (vertex scale scale scale)))
                                               ((wolf)      (rotate (new Wolf              position: (vertex 0. y z) scale: (vertex .6 .6 .6) radiuses: (vertex .6 .6 .6))))
                                               ((spider)    (rotate (new Spider            position: (vertex 0. y z) scale: (vertex .6 .6 .6) radiuses: (vertex .6 .6 .6))))
                                               ((turtle)            (new Turtle            position: (vertex 0. y z) scale: (vertex .1 .1 .1) radiuses: (vertex .1 .1 .1)))
                                               ((gravity)           (new Gravity           position: (vertex 0. y z) scale: (vertex scale scale scale))))))
                                 (decrease! z spacing)
                                 entity)))
                           names)))
                (set! entities (list->vector all))
                entities))))))


  (method override (draw-elements)
    (let ((entities (showcase-elements)))
      (loop (for n from 0 below (vector-length entities))
            (let ((entity (vector-ref entities n)))
              (draw~ entity)))))
  
  
  (method override (draw-selection)
    (when selection
      (draw-actor-target~ selection)))
  
  
  (method override (selection-addable?)
    #t)))
