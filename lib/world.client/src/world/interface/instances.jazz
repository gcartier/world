;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; Instance Open
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2016
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.interface.instances jazz


(import (jazz.graphic)
        (jazz.handler)
        (jazz.io)
        (jazz.jml)
        (jazz.tree)
        (jazz.ui)
        (world)
        (world.autoload)
        (world.io)
        (world.interface.frame)
        (world.syntax (phase syntax))
        (world.task)
        (world.window))


(class Instance-Open extends World-Frame
  
  
  (property start-script? initialize #t accessors generate)
  
  
  (form
    (<install>                            size: {Dimension 420 639} layout-type: border
      (<caption~>                         title: "Instances")
      (<content~>                         layout-type: fill
        (<Instances-View> name: instances))))
  
  
  (method override (focus-default)
    (acquire-focus~ (get-tree)))
  
  
  (method (get-tree)
    (locate '(instances instances))))


;;;
;;;; Instances-View
;;;


(class Instances-View extends Scroller-View
  
  
  (form
    (<install>                                    style: document hscroll?: #t vscroll?: #t
      (<content~>                                 layout-type: fill
        (<Tree-Header>                            style: document shown?: #f
          (<content~>
            (<Tree-View>          name: instances portfolio: :images filled-column: instance multiple-selection?: #t background: #f double-click-handler: {Event-Handler :form on-double-click} return-press-handler: {Event-Handler :form on-return-press} escape-press-handler: {Event-Handler :form on-escape-press}
              (<Tree-Node-Column> name: instance  title: "Instance" width: 235 toplevel-controls?: #f display-images?: #f display-levels?: #f)))))))
    
  
  (method override (conclude initargs)
    (nextmethod initargs)
    (view-instances))

  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method (get-tree)
    (locate 'instances))
  
  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method (on-double-click evt)
    (open-selected))
  
  
  (method override (on-return-press evt)
    (open-selected))
  
  
  (method override (on-escape-press evt)
    (close~ (find-ascendant World-Frame)))
  
  
  ;;;
  ;;;; Open
  ;;;
  
  
  (method (open-selected)
    (let ((instance (get-single-selected-data~ (get-tree))))
      (when instance
        (close~ (find-ascendant World-Frame))
        (open-instance instance))))
  
  
  (method (open-instance instance)
    (with-window-cursor :wait
      (lambda ()
        (change-instance~ (client-tier) (if (eq? instance 'main)
                                            #f
                                          instance)))))
  
  
  ;;;
  ;;;; Update
  ;;;
  
  
  (method (view-instances)
    (update-instances))
  
  
  (method (update-instances)
    (let ((tree (get-tree)))
      (remove-every-row~ tree)
      (with-update-locked
        (lambda ()
          (add-row~ tree
            children: (list (new Tree-Node title: "<Main>" font: {Font Label-User} color: {Color White}))
            user-data: 'main)
          (for-each (lambda (instance)
                      (add-row~ tree
                        children: (list (new Tree-Node title: instance font: {Font Label-User} color: {Color White}))
                        user-data: instance))
                    (sort ci<? (available-instances~ (client-tier))))
          (select-first-data~ tree)))))))
