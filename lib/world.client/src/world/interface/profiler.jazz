;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; World Profiler Pane
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2013
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.interface.profiler jazz


(import (jazz.jml)
        (jazz.graphic)
        (jazz.graphic.opengl.glew)
        (jazz.library)
        (jazz.literals)
        (jazz.platform)
        (jazz.platform.cairo)
        (jazz.ui)
        (jazz.ui.view)
        (world)
        (world.autoload)
        (world.interface)
        (world.interface.pane)
        (world.profiling)
        (world.syntax (phase syntax))
        (world.texture))


(class Profiler-Pane extends World-Pane
  
  
  (form
    (<install>                                          size: {Dimension 420 639} background: {Color red: .000 green: .000 blue: .000 alpha: .450} layout-type: border layout-type: fill
      (<Border-View>                                    border-color: {Color Medium-Gray} border-type: edge style: entry layout-type: fill
        (<Scroller-View>                                style: document hscroll?: #t vscroll?: #t
          (<content~>                                   layout-type: fill
            (<Tree-Header>                              style: document selectable?: #f
              (<content~>
                (<Tree-View>           name: sites      portfolio: :images filled-column: site show-unfocused-selection?: #f
                  (<Tree-Node-Column>  name: site       title: "Site" width: 300 toplevel-controls?: #f display-images?: #f)
                  (<Tree-Label-Column> name: time       title: "Time" width: 75)
                  (<Tree-Label-Column> name: memory     title: "Memory" width: 75)
                  (<Tree-Label-Column> name: percentage title: "Percentage" width: 75)
                  (<Tree-Label-Column> name: rate       title: "Rate" width: 75)
                  @wait
                  (<Tree-Label-Column> name: calls      title: "Calls" width: 75)))))))))
  
  
  (method (view-sites)
    (let ((world (current-world))
          (tree (locate 'sites))
          (sites (order-sites))
          (n/a ""))
      (remove-every-row~ tree)
        (with-update-locked
          (lambda ()
            (define (add father nodes)
              (for-each (lambda (node)
                          (let ((site (car node))
                                (children (cdr node)))
                            (let ((name (get-name~ site))
                                  (profile (get-profile~ site)))
                              (when profile
                                (let ((started (site-profile-started profile))
                                      (elapsed (site-profile-elapsed profile))
                                      (allocated (site-profile-allocated profile))
                                      (called (site-profile-called profile)))
                                  (define (compute-percentage)
                                    0.)
                                  
                                  (let ((time (if (> called 0.) (format "{r precision: 0}ms" (* (/ elapsed called) 1000.)) n/a))
                                        (memory (if (> called 0.) (format "{a}k" (fxround (/ allocated called 1024.))) n/a))
                                        (percentage (if (> called 0.) (format "{a}%" (compute-percentage)) n/a))
                                        (rate (if (> called 0.) (format "{a}m" (fxround (/ allocated (- (current-seconds) started) 1024. 1024.))) n/a)))
                                    (let ((row (add-row~ tree
                                                 father: father
                                                 state: 'expanded
                                                 children: (list (new Tree-Node title: (->string name) font: {Font Label-User^} color: (if (not father) {Color red: 220 green: 0 blue: 0} {Color Light-Gray}))
                                                                 (new Tree-Label title: time font: {Font Label-User^} color: {Color Light-Gray})
                                                                 (new Tree-Label title: memory font: {Font Label-User^} color: {Color Light-Gray})
                                                                 (new Tree-Label title: percentage font: {Font Label-User^} color: {Color Light-Gray})
                                                                 (new Tree-Label title: rate font: {Font Label-User^} color: {Color Light-Gray})
                                                                 @wait
                                                                 (new Tree-Label title: (->string (fxround called)) font: {Font Label-User^} color: {Color Light-Gray}))
                                                 user-data: site)))
                                      (add row children))))))))
                        (sort nu<? nodes key: (lambda (node) (get-name~ (car node))))))
            
            (add #f sites)))))))
