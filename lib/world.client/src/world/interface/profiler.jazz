;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; World Profiler Pane
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2013
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.interface.profiler jazz


(import (jazz.jml)
        (jazz.graphic)
        (jazz.graphic.opengl.glew)
        (jazz.library)
        (jazz.literals)
        (jazz.platform)
        (jazz.platform.cairo)
        (jazz.ui)
        (jazz.ui.view)
        (world)
        (world.autoload)
        (world.interface)
        (world.interface.pane)
        (world.profiling)
        (world.syntax (phase syntax))
        (world.texture))


(class Profiler-Pane extends World-Pane
  
  
  (form
    (<install>                                       size: {Dimension 420 639} background: {Color red: .000 green: .000 blue: .000 alpha: .450} layout-type: border layout-type: fill
      (<Border-View>                                 border-color: {Color Medium-Gray} border-type: edge style: entry layout-type: fill
        (<Scroller-View>                             style: document hscroll?: #t vscroll?: #t
          (<content~>                                layout-type: fill
            (<Tree-Header>                           style: document shown?: #f
              (<content~>
                (<Tree-View>           name: sites   portfolio: :images filled-column: site show-unfocused-selection?: #f
                  (<Tree-Node-Column>  name: site    title: "Site" width: 235 toplevel-controls?: #f display-images?: #f)
                  (<Tree-Label-Column> name: average title: "Average" width: 100)
                  (<Tree-Label-Column> name: rate    title: "Rate" width: 100)))))))))
  
  
  (method (view-sites)
    (let ((world (current-world))
          (tree (locate 'sites))
          (sites (registered-sites)))
      (remove-every-row~ tree)
        (with-update-locked
          (lambda ()
            (for-each (lambda (site)
                        (let ((name (get-name~ site))
                              (profile (get-profile~ site)))
                          (when profile
                            (let ((started (f64vector-ref profile 0))
                                  (allocated (f64vector-ref profile 1))
                                  (called (f64vector-ref profile 2)))
                              (when (> called 0.)
                                (let ((average (fxround (/ allocated called 1024.)))
                                      (rate (fxround (/ allocated (- (current-seconds) started) 1024. 1024.))))
                                  (add-row~ tree
                                    state: 'expanded
                                    children: (list (new Tree-Node title: (->string name) font: {Font Label-User^} color: {Color Light-Gray})
                                                    (new Tree-Label title: (format "{a}k" average) font: {Font Label-User^} color: {Color Light-Gray})
                                                    (new Tree-Label title: (format "{a}m" rate) font: {Font Label-User^} color: {Color Light-Gray}))
                                    user-data: site)))))))
                      (sort nu<? (table-values sites) key: get-name~))))))))
