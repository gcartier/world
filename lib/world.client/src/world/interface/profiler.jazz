;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Profiler Panel
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.interface.profiler jazz


(import (jazz.graphic)
        (jazz.markup)
        (jazz.outline)
        (jazz.resource)
        (jazz.tree)
        (jazz.ui)
        (world)
        (world.autoload)
        (world.chronology)
        (world.context)
        (world.interface.panel)
        (world.profiling)
        (world.settings))


(definition protected profiler-range
  #t)

(definition protected (set-profiler-range range)
  (set! profiler-range range))


(definition protected aggregate-sites?
  #t)

(definition protected (set-aggregate-sites? flag)
  (set! aggregate-sites? flag))


(definition protected profiler-all?
  #f)

(definition protected (toggle-profiler-all?)
  (set! profiler-all? (not profiler-all?)))


(class Profiler-Panel extends World-Panel
  
  
  (form
    (<install>                                          size: {Dimension 420 639} background: {Color red: .000 green: .000 blue: .000 alpha: .450} layout-type: fill
      (<Border-View>                                    border-type: edge style: entry layout-type: fill
        (<Scroller-View>                                style: document hscroll?: #t vscroll?: #t
          (<content~>                                   layout-type: fill
            (<Tree-Header>                              style: document selectable?: #f
              (<content~>
                (<Profiler-Tree>       name: sites      portfolio: :images filled-column: site show-unfocused-selection?: #f background: #f
                  (<Tree-Node-Column>  name: site       title: "Site" width: 300 controls?: #f display-images?: #f display-levels?: #f)
                  (<Tree-Label-Column> name: time%      title: "Percent" width: 65)
                  (<Tree-Label-Column> name: time       title: "Time" width: 65)
                  (<Tree-Label-Column> name: time-calls title: "Calls" width: 65)
                  (<Tree-Label-Column> name: time-rate  title: "Rate" width: 100)
                  (<Tree-Label-Column> name: memory%    title: "Percent" width: 65)
                  (<Tree-Label-Column> name: memory     title: "Memory" width: 65)
                  (<Tree-Label-Column> name: rate       title: "Rate" width: 50)
                  (<Tree-Image-Column> name: monitor    title: "" width: 20 justification: center offset: 3)))))))))
  
  
  (method package (view-sites self)
    (let ((world (current-world))
          (chronology (current-chronology)))
      (receive (threads elapsed) (profile-sites chronology profiler-range)
        (let ((tree (locate self 'sites))
              (n/a "")
              (max-rate (world-setting 'world.profiler-max-rate 5000))
              (time-units (world-setting 'world.profiler-time-units 'ms))
              (header-color {Color red: 220 green: 0 blue: 0})
              (content-color {Color Light-Gray})
              (memory-color {Color red: .004 green: .688 blue: .856})
              (memory-rate (chronology-rate chronology))
              (aggregate? (if (eq? profiler-range #t) aggregate-sites? #f))
              (show (world-setting 'world.profiler-show #f))
              (hide (world-setting 'world.profiler-hide #f)))
          (remove-every-row tree)
          (with-update-locked self
            (lambda ()
              (bind-values (last-gc-heap-size last-gc-live last-gc-movable last-gc-still) (process-memory)
                (define (root-profile)
                  (let ((running 0.)
                        (allocated 0.)
                        (toplevel (if aggregate? (make-table test: eqv?) '())))
                    (table-iterate-safe threads
                      (lambda (thread profile)
                        (table-iterate-safe (get-children profile)
                          (lambda (id profile)
                            (increase! running (get-running profile))
                            (increase! allocated (get-allocated profile))
                            (if aggregate?
                                (let ((aggregate (table-ref toplevel id #f)))
                                  (if (not aggregate)
                                      (table-set! toplevel id profile)
                                    (set-running aggregate (+ (get-running aggregate) (get-running profile)))
                                    (set-allocated aggregate (+ (get-allocated aggregate) (get-allocated profile)))
                                    (set-called aggregate (+ (get-called aggregate) (get-called profile)))))
                              (set! toplevel (cons (cons id profile) toplevel)))))))
                    (values running allocated (if aggregate? (table->list toplevel) toplevel))))
                
                (define (add father parent-running parent-allocated parent-called id profile)
                  (let ((site (id->site id)))
                    (let ((name (get-name site))
                          (kind (getf (get-properties site) kind:)))
                      (let ((running (get-running profile))
                            (allocated (get-allocated profile))
                            (called (get-called profile)))
                        (define (compute-time running called)
                          (and (> called 0.) (* (/ running called) (if (eq? time-units 'us) 1000000. 1000.))))
                        
                        (define (compute-memory allocated called)
                          (and (> called 0.) (fxround (/ allocated called 1024.))))
                        
                        (define (compute-rate elapsed allocated)
                          (and (> called 0.) (fxround (/ allocated elapsed 1024. 1024.))))
                        
                        (when (> called 0)
                          (let ((time (compute-time running called))
                                (memory (compute-memory allocated called))
                                (rate (compute-rate elapsed allocated)))
                            (define (compute-time%)
                              (and parent-running running (> parent-running 0.)
                                (percentage running parent-running)))
                            
                            (define (compute-memory%)
                              (and parent-allocated allocated (> parent-allocated 0.)
                                (percentage allocated parent-allocated)))
                            
                            (define (present-time-calls)
                              (cond ((= called 0)
                                     n/a)
                                    ((not parent-called)
                                     (if (> elapsed 0.)
                                         (let ((fps (/ called elapsed)))
                                           (if (and max-rate (> fps max-rate))
                                               (format ">{a}/s" max-rate)
                                             (format "{r precision: 0}/s" fps)))
                                       ">>>"))
                                    (else
                                     n/a)))
                            
                            (define (present-time-rate)
                              (cond ((= called 0)
                                     n/a)
                                    ((not parent-called)
                                     (if (> running 0.)
                                         (let ((rate (/ called running)))
                                           (if (and max-rate (> rate max-rate))
                                               (format ">{a}/s" max-rate)
                                             (format "{r precision: 0}/s" rate)))
                                       ">>>"))
                                    ((and parent-called called (> called 0.) (> parent-called 0.))
                                     (format "{r precision: 0}" (/ called parent-called)))
                                    (else
                                     n/a)))
                            
                            (define (present-memory-period)
                              (if (> called 0.)
                                  (format "{r precision: 1}s" (/ elapsed called))
                                n/a))
                            
                            (define (present-memory-count)
                              (format "{a}" (gc-count)))
                            
                            (define (present-meg bytes)
                              (format "{a}m" (meg bytes)))
                            
                            (define (present-meg-rate bytes)
                              (format "{a}m/s" (meg bytes)))
                            
                            (define (meg bytes)
                              (fxround (/ bytes 1024. 1024.)))
                            
                            (when (or profiler-all?
                                      (and (or (not show) (memq? name show))
                                           (or (not hide) (not (memq? name hide)))))
                              (let ((time% (and (> called 0.) (compute-time%)))
                                    (memory% (and (> called 0.) (compute-memory%)))
                                    (color (if (not father) header-color content-color)))
                                (let ((row (add-row tree
                                                    father: father
                                                    state: 'expanded
                                                    children: (list (new Tree-Node title: (->string name) font: {Font Label-User} color: color)
                                                                    (new Tree-Label title: (if time% (format "{r precision: 0}%" time%) n/a) font: {Font Label-User} color: color)
                                                                    (new Tree-Label title: (if time (format "{r precision: 0}{a}" time time-units) n/a) font: {Font Label-User} color: color)
                                                                    (new Tree-Label title: (if (eq? kind 'memory) (present-memory-period) (present-time-calls)) font: {Font Label-User} color: color)
                                                                    (new Tree-Label title: (if (eq? kind 'memory) (present-memory-count) (present-time-rate)) font: {Font Label-User} color: color)
                                                                    (new Tree-Label title: (if (eq? kind 'memory) (present-meg last-gc-movable) (if memory% (format "{r precision: 0}%" memory%) n/a)) font: {Font Label-User} color: (if (eq? kind 'memory) memory-color color))
                                                                    (new Tree-Label title: (if (eq? kind 'memory) (present-meg last-gc-still) (if memory (format "{a}k" memory) n/a)) font: {Font Label-User} color: (if (eq? kind 'memory) memory-color color))
                                                                    (new Tree-Label title: (if (eq? kind 'memory) (present-meg-rate memory-rate) (if rate (format "{a}m/s" rate) n/a)) font: {Font Label-User} color: (if (eq? kind 'memory) memory-color color))
                                                                    (new Tree-Image image: (case (get-monitor site)
                                                                                             ((performance) {Image-Resource "Green"})
                                                                                             ((memory) {Image-Resource "Blue"})
                                                                                             (else #f))))
                                                    user-data: site)))
                                  (for-each (lambda (info)
                                              (bind (id . profile) info
                                                (add row running allocated called id profile)))
                                            (sort-profiles (table->list (get-children profile)))))))))))))
                
                (define (sort-profiles infos)
                  (sort nu<? infos key: (lambda (info)
                                          (let ((site (id->site (car info))))
                                            (let ((name (get-name site))
                                                  (kind (getf (get-properties site) kind:)))
                                              (if (eq? kind 'memory)
                                                  (cons 0 name)
                                                (cons 1 name)))))))
                
                (bind-values (root-running root-allocated toplevel) (root-profile)
                  (for-each (lambda (info)
                              (bind (id . profile) info
                                (add #f root-running root-allocated #f id profile)))
                            (sort-profiles toplevel)))))))))))


;;;
;;;; Profiler-Tree
;;;


(class Profiler-Tree extends Tree-View
  
  
  (method override (mouse-down self evt)
    (toggle-monitor self (get-position evt) 'performance))
  
  
  (method override (double-click self evt)
    (toggle-monitor self (get-position evt) 'performance))
  
  
  (method override (right-mouse-down self evt)
    (toggle-monitor self (get-position evt) 'memory))
  
  
  (method (toggle-monitor self pos monitor)
    (let ((cell (view->tree self pos)))
      (when cell
        (let ((site (get-user-data (get-row self (get-line cell)))))
          (set-monitor site (if (eq? (get-monitor site) monitor) #f monitor))
          (invalidate-cell self cell)
          (refresh-interface (current-world))))))))
