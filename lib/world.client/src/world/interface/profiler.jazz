;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; World Profiler Pane
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2013
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.interface.profiler jazz


(import (jazz.jml)
        (jazz.graphic)
        (jazz.graphic.opengl.glew)
        (jazz.library)
        (jazz.literals)
        (jazz.platform)
        (jazz.platform.cairo)
        (jazz.ui)
        (jazz.ui.view)
        (world)
        (world.autoload)
        (world.interface)
        (world.interface.pane)
        (world.profiling)
        (world.syntax (phase syntax))
        (world.texture))


(class Profiler-Pane extends World-Pane
  
  
  (form
    (<install>                                          size: {Dimension 420 639} background: {Color red: .000 green: .000 blue: .000 alpha: .650} layout-type: border layout-type: fill
      (<Border-View>                                    border-color: {Color Medium-Gray} border-type: edge style: entry layout-type: fill
        (<Scroller-View>                                style: document hscroll?: #t vscroll?: #t
          (<content~>                                   layout-type: fill
            (<Tree-Header>                              style: document selectable?: #f
              (<content~>
                (<Profiler-Tree>       name: sites      portfolio: :images filled-column: site show-unfocused-selection?: #f
                  (<Tree-Node-Column>  name: site       title: "Site" width: 300 toplevel-controls?: #f display-images?: #f)
                  (<Tree-Label-Column> name: time       title: "Time" width: 65)
                  (<Tree-Label-Column> name: time%      title: "Percent" width: 65)
                  (<Tree-Label-Column> name: time-rate  title: "Rate" width: 65)
                  (<Tree-Label-Column> name: time-calls title: "Calls" width: 100)
                  (<Tree-Label-Column> name: memory     title: "Memory" width: 65)
                  (<Tree-Label-Column> name: memory%    title: "Percent" width: 65)
                  (<Tree-Label-Column> name: rate       title: "Rate" width: 65)))))))))
  
  
  (method (view-sites)
    (let ((world (current-world))
          (tree (locate 'sites))
          (root (sites-tree))
          (n/a "")
          (now (current-seconds)))
      (remove-every-row~ tree)
        (with-update-locked
          (lambda ()
            (define (root-profile)
              (let ((elapsed 0.)
                    (allocated 0.))
                (for-each (lambda (node)
                            (let ((site (car node)))
                              (let ((profile (get-profile~ site)))
                                (when profile
                                  (increase! elapsed (site-profile-elapsed profile))
                                  (increase! allocated (site-profile-allocated profile))))))
                          (cdr root))
                (values elapsed allocated)))
            
            (define (add father parent parent-elapsed parent-allocated parent-called nodes)
              (for-each (lambda (node)
                          (let ((site (car node))
                                (children (cdr node)))
                            (let ((name (get-name~ site))
                                  (profile (get-profile~ site)))
                              (when profile
                                (let ((started (site-profile-started profile))
                                      (elapsed (site-profile-elapsed profile))
                                      (allocated (site-profile-allocated profile))
                                      (called (site-profile-called profile)))
                                  (define (compute-time elapsed called)
                                    (and (> called 0.) (* (/ elapsed called) 1000.)))
                                  
                                  (define (compute-memory allocated called)
                                    (and (> called 0.) (fxround (/ allocated called 1024.))))
                                  
                                  (define (compute-rate started allocated)
                                    (and (> called 0.) (fxround (/ allocated (- now started) 1024. 1024.))))
                                  
                                  (let ((time (compute-time elapsed called))
                                        (memory (compute-memory allocated called))
                                        (rate (compute-rate started allocated)))
                                    (define (compute-time%)
                                      (when (and parent-elapsed elapsed (> parent-elapsed 0.))
                                        (percentage elapsed parent-elapsed)))
                                    
                                    (define (compute-memory%)
                                      (when (and parent-allocated allocated (> parent-allocated 0.))
                                        (percentage allocated parent-allocated)))
                                    
                                    (define (present-time-rate)
                                      (cond ((and (not parent-called) (> elapsed 0.))
                                             (let ((fps (/ called (- now started)))
                                                   (rate (/ called elapsed)))
                                               (format "{a}"
                                                       (if (> fps 200.) ">200/s" (format "{r precision: 0}/s" fps))
                                                       )))
                                            ((and parent-called called (> parent-called 0.))
                                             n/a)
                                            (else
                                             n/a)))
                                    
                                    (define (present-time-calls)
                                      (cond ((and (not parent-called) (> elapsed 0.))
                                             (let ((fps (/ called (- now started)))
                                                   (rate (/ called elapsed)))
                                               (format "{a}"
                                                       
                                                       (if (> rate 200.) ">200/s" (format "{r precision: 0}/s" rate)))))
                                            ((and parent-called called (> parent-called 0.))
                                             (format "{r precision: 0}" (/ called parent-called)))
                                            (else
                                             n/a)))
                                    
                                    (let ((time% (and (> called 0.) (compute-time%)))
                                          (memory% (and (> called 0.) (compute-memory%)))
                                          (color (if (not father) {Color red: 220 green: 0 blue: 0} {Color Light-Gray})))
                                      (let ((row (add-row~ tree
                                                   father: father
                                                   state: 'expanded
                                                   children: (list (new Tree-Node title: (->string name) font: {Font Label-User^} color: color)
                                                                   (new Tree-Label title: (if time (format "{r precision: 0}ms" time) n/a) font: {Font Label-User^} color: color)
                                                                   (new Tree-Label title: (if time% (format "{r precision: 0}%" time%) n/a) font: {Font Label-User^} color: color)
                                                                   (new Tree-Label title: (present-time-rate) font: {Font Label-User^} color: color)
                                                                   (new Tree-Label title: (present-time-calls) font: {Font Label-User^} color: color)
                                                                   (new Tree-Label title: (if memory (format "{a}k" memory) n/a) font: {Font Label-User^} color: color)
                                                                   (new Tree-Label title: (if memory% (format "{r precision: 0}%" memory%) n/a) font: {Font Label-User^} color: color)
                                                                   (new Tree-Label title: (if rate (format "{a}m/s" rate) n/a) font: {Font Label-User^} color: color))
                                                   user-data: site)))
                                        (add row node elapsed allocated called children)))))))))
                        (sort nu<? nodes key: (lambda (node) (get-name~ (car node))))))
            
            (receive (root-elapsed root-allocated) (root-profile)
              (add #f root root-elapsed root-allocated #f (cdr root))))))))


;;;
;;;; Profiler-Tree
;;;


(class Profiler-Tree extends Tree-View
  
  
  (method override (mouse-down evt)
    )))
