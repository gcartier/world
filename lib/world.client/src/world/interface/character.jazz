;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Character Pane
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2016
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.interface.character jazz


(import (jazz.graphic)
        (jazz.jml)
        (jazz.ui)
        (world)
        (world.actor)
        (world.interface.inventory)
        (world.interface.tooltip)
        (world.player)
        (world.settings)
        (world.syntax (phase syntax)))


;;;
;;;; Pane
;;;


(class Character-Pane extends Inventory-Pane
  
  
  (form
    (<install>
      (<Character-Label>   title: "Health:"    position: {Point 10 25})
      (<Health-Info>       name: health        position: {Point 60 25})
      (<Character-Label>   title: "Armor:"     position: {Point 10 70})
      (<Armor-Info>        name: armor         position: {Point 85 70})
      (<Character-Label>   title: "Power:"     position: {Point 10 90})
      (<Power-Info>        name: power         position: {Point 85 90})
      (<Character-Label>   title: "Bow Power:" position: {Point 10 110})
      (<Ranged-Power-Info> name: ranged-power  position: {Point 85 110})))
  
  
  (method override (conclude initargs)
    (nextmethod initargs)
    (setup-character))
  
  
  ;;;
  ;;;; Update
  ;;;
  
  
  (method (setup-character)
    (define (add-slot category kind rank position)
      (let ((view (new Character-Slot parent: self position: position size: (new Dimension slot-size slot-size) rank: rank category: category kind: kind)))
        (table-set! slot-table rank view)))
    
    (add-slot 'armor  'head  103 {Point 180  10}) (add-slot 'armor  'legs  101 {Point 240  10})
    (add-slot 'armor  'chest 102 {Point 180  70}) (add-slot 'armor  'boots 100 {Point 240  70})
    (add-slot 'weapon 'melee 150 {Point 150 130}) (add-slot 'weapon 'range 151 {Point 210 130}) (add-slot 'missile 'arrow 152 {Point 270 130}))
  
  
  (method override (view-inventory)
    (nextmethod)
    (view-health)
    (view-armor)
    (view-power)
    (view-ranged-power))
  
  
  (method (view-health)
    (let ((me (current-me)))
      (set-title~ (locate 'health) (format "{a}/100" (fxround (get-life~ me))))))
  
  
  (method (view-armor)
    (let ((me (current-me)))
      (set-title~ (locate 'armor) (format "{a}" (fxround (get-armor~ me))))))
  
  
  (method (view-power)
    (let ((me (current-me)))
      (set-title~ (locate 'power) (format "{a}" (fxround (get-power~ me))))))
  
  
  (method (view-ranged-power)
    (let ((me (current-me)))
      (set-title~ (locate 'ranged-power) (format "{a}" (fxround (get-ranged-power~ me))))))
  
  
  ;;;
  ;;;; Update
  ;;;
  
  
  (method (update)
    (update-armor)
    (update-power)
    (update-ranged-power))
  
  
  (method (update-armor)
    (define (calculate-armor)
      (define (item-armor rank)
        (let ((item (unbroken-item rank)))
          (or (and item (get-armor~ item))
              0)))
      
      (let ((head  (item-armor 103))
            (chest (item-armor 102))
            (legs  (item-armor 101))
            (boots (item-armor 100)))
        (+ base-armor head chest legs boots)))
    
    (let ((me (current-me)))
      (setup-armor~ me (calculate-armor)))
    (view-armor))
  
  
  (method (update-power)
    (define (calculate-power)
      (define (item-power rank)
        (let ((item (unbroken-item rank)))
          (or (and item (get-power~ item))
              0)))
      
      (let ((weapon (item-power 150)))
        (+ base-power weapon)))
    
    (let ((me (current-me)))
      (setup-power~ me (calculate-power)))
    (view-power))
  
  
  (method (update-ranged-power)
    (define (calculate-ranged-power)
      (define (item-ranged-power rank)
        (let ((item (unbroken-item rank)))
          (or (and item (get-power~ item))
              0)))
      
      (let ((bow (item-ranged-power 151)))
        (+ base-ranged-power bow)))
    
    (let ((me (current-me)))
      (setup-ranged-power~ me (calculate-ranged-power)))
    (view-ranged-power))
  
  
  (method (unbroken-item rank)
    (let ((slot (rank->slot rank)))
      (let ((id (get-id~ slot)))
        (and id
             (let ((durability (get-durability~ slot)))
               (and (or (not durability) (> durability 0))
                    (id->item id)))))))
  
  
  ;;;
  ;;;; Combat
  ;;;
  
  
  (method (damage-armor critical?)
    (let ((hit (if critical? 2 1)))
      (let ((head?  (damage-item 103 hit))
            (chest? (damage-item 102 hit))
            (legs?  (damage-item 101 hit))
            (boots? (damage-item 100 hit)))
        (when (or head? chest? legs? boots?)
          (update-armor)
          (invalidate-view~ (rank->slot 103))
          (invalidate-view~ (rank->slot 102))
          (invalidate-view~ (rank->slot 101))
          (invalidate-view~ (rank->slot 100))))))
  
  
  (method (damage-weapon)
    (let ((hit 1))
      (let ((weapon? (damage-item 150 hit)))
        (when weapon?
          (update-power)
          (invalidate-view~ (rank->slot 150))))))
  
  
  (method (damage-bow)
    (let ((hit 1))
      (let ((bow? (damage-item 151 hit)))
        (when bow?
          (update-ranged-power)
          (invalidate-view~ (rank->slot 151))))))
  
  
  (method (damage-item rank hit)
    (let ((slot (rank->slot rank)))
      (let ((id (get-id~ slot)))
        (when id
          (let ((new-durability (max 0 (- (or (get-durability~ slot) (get-durability~ (id->item id))) hit))))
            (set-durability~ slot new-durability)
            (<= new-durability 0))))))
  
  
  (method (count-arrows)
    (let ((slot (rank->slot 152)))
      (if (not (get-id~ slot))
          0
        (get-count~ slot))))
  
  
  (method (use-arrow)
    (when (user?)
      (let ((slot (rank->slot 152)))
        (when (get-id~ slot)
          (let ((new-count (- (get-count~ slot) 1)))
            (set-count~ slot new-count)
            (when (<= new-count 0)
              (set-id~ slot #f)
              (set-count~ slot #f)
              (set-durability~ slot #f)))
          (invalidate-view~ slot)))))
  
  
  ;;;
  ;;;; Draw
  ;;;
  
  
  (method override (draw surface context)
    (let ((bounds (get-bounds)))
      (frame-rect~ surface bounds {Color Entry-Border}))))


;;;
;;;; Slot
;;;


(class Character-Slot extends Inventory-Slot
  
  
  (property category initialize #f accessors generate)
  (property kind     initialize #f accessors generate)
  
  
  ;;;
  ;;;; Drop
  ;;;
  
  
  (method override (accept-drop? drag-drop)
    (and (nextmethod drag-drop)
         (let ((sender (get-view~ (get-source~ drag-drop))))
           (let ((id (get-id~ sender)))
             (let ((item (and id (id->item id))))
               (and item
                    (eq? (get-category~ item) category)
                    (eq? (get-kind~ item) kind)))))))
  
  
  (method override (receive-drop sender pos drag-drop)
    (nextmethod sender pos drag-drop)
    (update~ parent))
  
  
  (method override (drop drag-drop pos)
    (nextmethod drag-drop pos)
    (update~ parent))
  
  
  (method override (drop-void drag-drop)
    (nextmethod drag-drop)
    (update~ parent))
  
  
  ;;;
  ;;;; Draw
  ;;;
  
  
  (method override (right/bottom-color)
    {Color Entry-Border}))


;;;
;;;; Label
;;;


(class Character-Label extends Label-View
  
  
  (form
    (<install> color: {Color red: .892 green: .773 blue: .290})))


;;;
;;;; Info
;;;


(class Character-Info extends Label-View
  
  
  (form
    (<install> color: {Color World-Green} tooltip?: #t)))


;;;
;;;; Health
;;;


(class Health-Info extends Character-Info
  
  
  (method override (get-tooltip-context pos)
    (define (present-text)
      (let ((me (current-me)))
        `(<span>
           (<paragraph>
             (<text> "Health"))
           ""
           (<paragraph>
             (<text> color: World-Green "When your health reaches zero you die!")))))
    
    (let ((text (present-text))
          (bounds (get-tooltip-bounds pos)))
      (tooltip-context self text bounds))))


;;;
;;;; Armor
;;;


(class Armor-Info extends Character-Info
  
  
  (method override (get-tooltip-context pos)
    (define (present-text)
      (let ((me (current-me)))
        `(<span>
           (<paragraph>
             (<text> "Armor"))
           ""
           (<paragraph>
             (<text> color: World-Green ,(format "Reduces damage from enemies by {a}%" (fxround (* (- (get-armor-factor~ me) 1.) 100.))))))))
    
    (let ((text (present-text))
          (bounds (get-tooltip-bounds pos)))
      (tooltip-context self text bounds))))


;;;
;;;; Power
;;;


(class Power-Info extends Character-Info
  
  
  (method override (get-tooltip-context pos)
    (define (present-text)
      (let ((me (current-me)))
        `(<span>
           (<paragraph>
             (<text> "Power"))
           ""
           (<paragraph>
             (<text> color: World-Green ,(format "Increases damage to enemies by {a}%" (fxround (* (- (get-power-factor~ me) 1.) 100.))))))))
    
    (let ((text (present-text))
          (bounds (get-tooltip-bounds pos)))
      (tooltip-context self text bounds))))


;;;
;;;; Ranged Power
;;;


(class Ranged-Power-Info extends Character-Info
  
  
  (method override (get-tooltip-context pos)
    (define (present-text)
      (let ((me (current-me)))
        `(<span>
           (<paragraph>
             (<text> "Bow Power"))
           ""
           (<paragraph>
             (<text> color: World-Green ,(format "Increases damage to enemies by {a}%" (fxround (* (- (get-ranged-power-factor~ me) 1.) 100.))))))))
    
    (let ((text (present-text))
          (bounds (get-tooltip-bounds pos)))
      (tooltip-context self text bounds)))))
