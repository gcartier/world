;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Character Pane
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.interface.character jazz


(import (jazz.graphic)
        (jazz.jml)
        (jazz.ui)
        (world)
        (world.actor)
        (world.interface.inventory)
        (world.interface.pane)
        (world.interface.tooltip)
        (world.player)
        (world.syntax (phase syntax)))


;;;
;;;; Pane
;;;


(class Character-Pane extends Inventory-Pane
  
  
  (form
    (<install>
      (<Character-Label> title: "Health:" position: {Point 10 25})
      (<Health-Info>     name: health     position: {Point 60 25})
      (<Character-Label> title: "Armor:"  position: {Point 10 70})
      (<Armor-Info>      name: armor      position: {Point 60 70})
      (<Character-Label> title: "Power:"  position: {Point 10 90})
      (<Power-Info>      name: power      position: {Point 60 90})))
  
  
  (method override (conclude initargs)
    (nextmethod initargs)
    (setup-character))
  
  
  ;;;
  ;;;; Update
  ;;;
  
  
  (method (setup-character)
    (define (add-slot rank position)
      (let ((view (new Character-Slot parent: self position: position size: (new Dimension slot-size slot-size) rank: rank)))
        (table-set! slot-table rank view)))
    
    (add-slot 103 {Point 180 10}) (add-slot 101 {Point 240 10})
    (add-slot 102 {Point 180 70}) (add-slot 100 {Point 240 70})
    (add-slot 150 {Point 210 130}))
  
  
  (method override (view-inventory)
    (nextmethod)
    (view-health)
    (view-armor)
    (view-power))
  
  
  (method (view-health)
    (let ((me (current-me)))
      (set-title~ (locate 'health) (format "{a}/100" (fxround (get-life~ me))))))
  
  
  (method (view-armor)
    (let ((me (current-me)))
      (set-title~ (locate 'armor) (format "{a}" (fxround (get-armor~ me))))))
  
  
  (method (view-power)
    (let ((me (current-me)))
      (set-title~ (locate 'power) (format "{a}" (fxround (get-power~ me))))))
  
  
  ;;;
  ;;;; Update
  ;;;
  
  
  (method (update)
    (update-armor)
    (update-power))
  
  
  (method (update-armor)
    (define (calculate-armor)
      (define (item-armor rank)
        (let ((id (get-id~ (table-ref slot-table rank))))
          (if (not id)
              0
            (or (get-armor~ (id->item id))
                0))))
      
      (let ((head  (item-armor 103))
            (chest (item-armor 102))
            (legs  (item-armor 101))
            (boots (item-armor 100)))
        (+ base-armor head chest legs boots)))
    
    (let ((me (current-me)))
      (setup-armor~ me (calculate-armor)))
    (view-armor))
  
  
  (method (update-power)
    (define (calculate-power)
      (define (item-power rank)
        (let ((id (get-id~ (table-ref slot-table rank))))
          (if (not id)
              0
            (or (get-power~ (id->item id))
                0))))
      
      (let ((weapon (item-power 150)))
        (+ base-power weapon)))
    
    (let ((me (current-me)))
      (setup-power~ me (calculate-power)))
    (view-power))
  
  
  ;;;
  ;;;; Draw
  ;;;
  
  
  (method override (draw surface context)
    (let ((bounds (get-bounds)))
      (frame-rect~ surface bounds {Color Entry-Border}))))


;;;
;;;; Slot
;;;


(class Character-Slot extends Inventory-Slot
  
  
  ;;;
  ;;;; Drop
  ;;;
  
  
  (method override (receive-drop sender pos drag-drop)
    (nextmethod sender pos drag-drop)
    (update~ parent))
  
  
  (method override (drop drag-drop pos)
    (nextmethod drag-drop pos)
    (update~ parent))
  
  
  (method override (drop-void)
    (nextmethod)
    (update~ parent))
  
  
  ;;;
  ;;;; Draw
  ;;;
  
  
  (method override (draw-count?)
    #f)
  
  
  (method override (right/bottom-color)
    {Color Entry-Border}))


;;;
;;;; Label
;;;


(class Character-Label extends Label-View
  
  
  (form
    (<install> color: {Color red: .892 green: .773 blue: .290})))


;;;
;;;; Info
;;;


(class Character-Info extends Label-View
  
  
  (form
    (<install> color: {Color World-Green} tooltip?: #t)))


;;;
;;;; Health
;;;


(class Health-Info extends Character-Info
  
  
  (method override (get-tooltip-context pos)
    (define (present-text)
      (let ((me (current-me)))
        `(<span>
           (<paragraph>
             (<text> "Health"))
           ""
           (<paragraph>
             (<text> color: World-Green "When your health reaches zero you die!")))))
    
    (let ((text (present-text))
          (bounds (get-tooltip-bounds pos)))
      (tooltip-context self text bounds))))


;;;
;;;; Armor
;;;


(class Armor-Info extends Character-Info
  
  
  (method override (get-tooltip-context pos)
    (define (present-text)
      (let ((me (current-me)))
        `(<span>
           (<paragraph>
             (<text> "Armor"))
           ""
           (<paragraph>
             (<text> color: World-Green ,(format "Reduces damage from enemies by {a}%" (fxround (* (- (get-armor-factor~ me) 1.) 100.))))))))
    
    (let ((text (present-text))
          (bounds (get-tooltip-bounds pos)))
      (tooltip-context self text bounds))))


;;;
;;;; Power
;;;


(class Power-Info extends Character-Info
  
  
  (method override (get-tooltip-context pos)
    (define (present-text)
      (let ((me (current-me)))
        `(<span>
           (<paragraph>
             (<text> "Power"))
           ""
           (<paragraph>
             (<text> color: World-Green ,(format "Increases damage to enemies by {a}%" (fxround (* (- (get-power-factor~ me) 1.) 100.))))))))
    
    (let ((text (present-text))
          (bounds (get-tooltip-bounds pos)))
      (tooltip-context self text bounds)))))
