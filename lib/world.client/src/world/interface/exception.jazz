;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Interface Exception
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.interface.exception jazz


(import (jazz.component)
        (jazz.graphic)
        (jazz.ui)
        (world)
        (world.context)
        (world.interface)
        (world.settings))


(definition public (add-exception-view)
  (let ((interface (current-interface)))
    (let ((view (find-component interface 'exception)))
      (if view
          (begin
            (set-visible? view #t)
            view)
        (new Exception-Label name: 'exception parent: interface title: "" location: '(center 107) size: {Dimension 600 40} font: {Font font-name: tahoma point-size: 28 shadow: thin} justification: 'center)))))


(definition public (find-exception-view)
  (let ((interface (current-interface)))
    (child interface 'exception)))


(definition public (report-exception title exc (stack #f))
  (let ((view (find-exception-view)))
    (set-title view title)
    (set-exception view exc)
    (set-stack view stack)))


(definition public (clear-exception)
  (let ((view (find-exception-view)))
    (set-title view "")
    (set-exception view #f)))


(class Exception-Label extends Label-View
  
  
  (property exception initialize #f accessors generate)
  (property stack     initialize #f accessors generate)
  
  
  (method override (text-color self)
    {Color World-Red})
  
  
  (method override (get-tooltip? self)
    #t)
  
  
  (method override (get-tooltip-text self)
    (define (present-exception)
      (split-string (exception-reason exception) #\newline))
    
    (define (present-stack)
      (if (and (world-setting 'world.show-stacks? #f) stack)
          (map (lambda (frame)
                 (format "> {a}" frame))
               (if (> (length stack) 16)
                   (subseq stack 0 16)
                 stack))
        '()))
    
    (if exception
        (append (present-exception)
                (present-stack))
      #f))))
