;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; World Meshes
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2013
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.interface.meshes jazz


(import (jazz.geometry)
        (jazz.graphic.opengl.glew)
        (world)
        (world.autoload)
        (world.draw)
        (world.dye)
        (world.dyes)
        (world.entity)
        (world.generate)
        (world.geometry)
        (world.interface)
        (world.interface.showcase)
        (world.material)
        (world.object)
        (world.opengl)
        (world.syntax (phase syntax))
        (world.texture))


(class Meshes-Showcase extends World-Showcase
  
  
  (method (showcase-entity)
    (let ((world (current-world)))
      (let ((target (first-target~ world)))
        (when (and target (is? target Entity))
          target))))
  
  
  (method override (showcase-showing)
    (let ((entity (showcase-entity)))
      (and entity (cache-model~ entity))))
  
  
  (method override (showcase-margin)
    .25)
  
  
  (method override (showcase-spacing)
    .75)
  
  
  (method override (showcase-z)
    -.25)
  
  
  (method override (showcase-elements showing)
    (let ((world (current-world)))
      (if (not showing)
          '()
        (let ((path (get-path~ showing))
              (bounds (get-bounds~ showing)))
          (define (collect-meshes)
            (cons #f (vector->list (get-meshes~ showing))))
          
          (let ((camera (cache-camera))
                (spacing (showcase-spacing))
                (width (cuboid-width bounds))
                (height (cuboid-height bounds))
                (scaling .25)
                (x (showcase-x))
                (y (showcase-y))
                (z 0.))
            (map (lambda (mesh)
                   ;; ignore depth
                   (let ((max (max width height)))
                     (let ((scaling (if (> max 1.) (/ 1. max) 1.)))
                       (let ((entity (new Entity path: path position: (vertex x y z) scale: (vertex scaling scaling scaling) animate?: #t)))
                         (set-camera~ entity camera)
                         (let ((lookat (get-lookat~ entity)))
                           (rotate-lookat! lookat PI/2 (get-up~ lookat))
                           (update-matrix~ entity))
                         (when mesh
                           (set-meshes-mask~ entity (vector mesh)))
                         (increase! z spacing)
                         entity))))
                 (collect-meshes)))))))
  
  
  (method override (showcase-selection entities)
    (define (determine-selection meshes-mask)
      (find-if (lambda (entity)
                 (equal? meshes-mask (get-meshes-mask~ entity)))
               entities))
    
    (let ((entity (showcase-entity)))
      (and entity (determine-selection (get-meshes-mask~ entity)))))
  
  
  (method override (draw-selection)
    (when selection
      (draw-target-circle~ selection)))
  
  
  (method override (selection-addable?)
    #t)
  
  
  (method override (selection-update selection)
    (let ((world (current-world)))
      (let ((entity (first-target~ world))
            (meshes-mask (get-meshes-mask~ selection)))
        (set-meshes-mask~ entity meshes-mask))))))
