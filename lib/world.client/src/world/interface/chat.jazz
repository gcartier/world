;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Chat Pane
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2016
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.interface.chat jazz


(import (jazz.graphic)
        (jazz.jml)
        (jazz.text)
        (jazz.ui)
        (world)
        (world.actor)
        (world.autoload)
        (world.interface.inventory)
        (world.interface.pane)
        (world.interface.text)
        (world.interface.tooltip)
        (world.player)
        (world.settings)
        (world.syntax (phase syntax)))


;;;
;;;; Pane
;;;


(class Chat-Pane extends World-Pane
  
  
  (form
    (<install>                           size: {Dimension 420 639} background: {Color Black alpha: 0.3} layout-type: fill
      (<Border-View>                     border-color: {Color Medium-Gray} border-type: edge style: entry layout-type: fill
        (<Scroller-View>                 style: document hscroll?: #f vscroll?: #t
          (<content~>                    layout-type: fill
            (<Chat-Text-View> name: text background: #f))))))
  
  
  (method (show-welcome welcome)
    (fresh)
    (insert welcome 'Welcome)
    (displayed))
  
  
  (method (show-message sender kind message)
    (fresh)
    (case kind
      ((server)
       (insert "[Server]: " 'Server-Sender)
       (insert message 'Server-Message)
       (display-message~ (current-world) (format "[Server]: {a}" message) color: {Color World-Red}))
      ((yell)
       (insert (format "[{a}]: " sender) 'Yell-Sender)
       (insert message 'Yell-Message)
       (display-message~ (current-world) (format "[{a}]: {a}" sender message) color: {Color World-Red}))
      ((whisper)
       (insert (format "[{a}]: " sender) 'Whisper-Sender)
       (insert message 'Whisper-Message))
      (else
       (insert (format "[{a}]: " sender) 'Say-Sender)
       (insert message 'Say-Message)))
    (displayed)
    (when (eq? kind 'whisper)
      (set-last-whisperer~ (current-world) sender)))
  
  
  (method (fresh)
    (let ((text (locate 'text)))
      (let ((model (get-model~ text))
            (end (text-ending~ text)))
        (when (/= (get-col~ end) 0)
          (insert-newline~ model (tail))))))
  
  
  (method (insert string style)
    (let ((text (locate 'text)))
      (let ((model (get-model~ text)))
        (insert-styled~ model (tail) string style))))
  
  
  (method (displayed)
    (let ((text (locate 'text)))
      ;; quick hack
      (scroll~ text (new Point 0 -10000))
      @wait-this-can-bug
      (ensure-range-displayed~ text (tail))))
  
  
  (method (tail)
    (let ((text (locate 'text)))
      (let ((end (text-ending~ text)))
        (new Range$Cell$ end end)))))


;;;
;;;; Chat-Text-View
;;;


(class Chat-Text-View extends World-Text-View
  
  
  (form
    (<install> editable?: #f selectable?: #f))
  
  
  (method override (new-model)
    (new Text-Model wrap?: #t left-padding: 1 top-padding: 1))

  
  (method override (install rest)
    (nextmethod rest)
    (add-style 'Welcome {Text-Style Text-Base color: {Color red: .118 green: .943 blue: .122}})
    (add-style 'Say-Sender {Text-Style Text-Base color: {Color World-Ochre}})
    (add-style 'Say-Message {Text-Style Text-Base color: {Color White}})
    (add-style 'Whisper-Sender {Text-Style Text-Base color: {Color red: .995 green: .400 blue: .983}})
    (add-style 'Whisper-Message {Text-Style Text-Base color: {Color White}})
    (add-style 'Yell-Sender {Text-Style Text-Base color: {Color World-Red}})
    (add-style 'Yell-Message {Text-Style Text-Base color: {Color White}})
    (add-style 'Server-Sender {Text-Style Text-Base color: {Color World-Red}})
    (add-style 'Server-Message {Text-Style Text-Base color: {Color World-Blue}}))))
