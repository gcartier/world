;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; World Tiles
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2013
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.interface.tiles jazz


(import (jazz.graphic.opengl.glew)
        (world)
        (world.autoload)
        (world.draw)
        (world.dye)
        (world.dyes)
        (world.entity)
        (world.face)
        (world.generate)
        (world.geometry)
        (world.interface)
        (world.interface.showcase)
        (world.material)
        (world.model)
        (world.object)
        (world.opengl)
        (world.quad)
        (world.syntax (phase syntax))
        (world.texture)
        (world.tile))


(definition (make-block-model left-image right-image bottom-image top-image back-image front-image)
  (let ((world (current-world)))
    (let ((faces
            (let ((x 0.)
                  (y 0.)
                  (z 0.)
                  (bounds (cuboid -1. -1. -1. 1. 1. 1.)))
              (let ((left (cuboid-left bounds))
                    (right (cuboid-right bounds))
                    (bottom (cuboid-bottom bounds))
                    (top (cuboid-top bounds))
                    (back (cuboid-back bounds))
                    (front (cuboid-front bounds))
                    (default-image (get-default-image~ world)))
                (list
                  ;; front face
                  (let ((image (or front-image default-image)))
                    (let ((uv (image-coordinates image)))
                      (let ((tl (uv-left uv))
                            (tt (uv-top uv))
                            (tr (uv-right uv))
                            (tb (uv-bottom uv))
                            (texture-depth (uv-depth uv)))
                        (make-face image
                                   (f32vector tl tt tl tb tr tb tr tt)
                                   texture-depth
                                   (make-quad #f
                                              (vertex left top front) (vertex left bottom front) (vertex right bottom front) (vertex right top front))))))
                  ;; back face
                  (let ((image (or back-image default-image)))
                    (let ((uv (image-coordinates image)))
                      (let ((tl (uv-left uv))
                            (tt (uv-top uv))
                            (tr (uv-right uv))
                            (tb (uv-bottom uv))
                            (texture-depth (uv-depth uv)))
                        (make-face image
                                   (f32vector tr tt tr tb tl tb tl tt)
                                   texture-depth
                                   (make-quad #f
                                              (vertex right top back) (vertex right bottom back) (vertex left bottom back) (vertex left top back))))))
                  ;; left face
                  (let ((image (or left-image default-image)))
                    (let ((uv (image-coordinates image)))
                      (let ((tl (uv-left uv))
                            (tt (uv-top uv))
                            (tr (uv-right uv))
                            (tb (uv-bottom uv))
                            (texture-depth (uv-depth uv)))
                        (make-face image
                                   (f32vector tl tt tl tb tr tb tr tt)
                                   texture-depth
                                   (make-quad #f
                                              (vertex left top back) (vertex left bottom back) (vertex left bottom front) (vertex left top front))))))
                  ;; right face
                  (let ((image (or right-image default-image)))
                    (let ((uv (image-coordinates image)))
                      (let ((tl (uv-left uv))
                            (tt (uv-top uv))
                            (tr (uv-right uv))
                            (tb (uv-bottom uv))
                            (texture-depth (uv-depth uv)))
                        (make-face image
                                   (f32vector tl tt tl tb tr tb tr tt)
                                   texture-depth
                                   (make-quad #f
                                              (vertex right top front) (vertex right bottom front) (vertex right bottom back) (vertex right top back))))))
                  ;; top face
                  (let ((image (or top-image default-image)))
                    (let ((uv (image-coordinates image)))
                      (let ((tl (uv-left uv))
                            (tt (uv-top uv))
                            (tr (uv-right uv))
                            (tb (uv-bottom uv))
                            (texture-depth (uv-depth uv)))
                        (make-face image
                                   (f32vector tl tb tl tt tr tt tr tb)
                                   texture-depth
                                   (make-quad #f
                                              (vertex left top back) (vertex left top front) (vertex right top front) (vertex right top back))))))
                  ;; bottom face
                  (let ((image (or bottom-image default-image)))
                    (let ((uv (image-coordinates image)))
                      (let ((tl (uv-left uv))
                            (tt (uv-top uv))
                            (tr (uv-right uv))
                            (tb (uv-bottom uv))
                            (texture-depth (uv-depth uv)))
                        (make-face image
                                   (f32vector tl tt tl tb tr tb tr tt)
                                   texture-depth
                                   (make-quad #f
                                              (vertex left bottom front) (vertex left bottom back) (vertex right bottom back) (vertex right bottom front))))))))))
          (material (get-tile-material~ world)))
      (let ((model (new Model name: 'test faces: faces material: material)))
        model))))


(definition spacing
  1.)


(class Tiles-Showcase extends Showcase
  
  
  (slot tiles  initialize #f getter generate)
  (slot camera initialize 0. getter generate)
  
  
  (method (showcased-tiles)
    (or tiles
        (let ((world (current-world))
              (y -2.8)
              (z 0.))
          (let ((all (map (lambda (name)
                            (let ((model (make-block-model name name name name name name))
                                  (scale .4))
                              (let ((entity (new Entity position: (vertex 0. y z) scale: (vertex scale scale scale))))
                                (set-radiuses~ entity (vertex 1. 1. 1.))
                                (set-model~ entity model)
                                (decrease! z spacing)
                                entity)))
                          (image-names~ (get-tile-atlas~ world)))))
            (set! tiles (list->vector all))
            tiles))))
  
  
  (method override (showcase-wheel reversed?)
    (if (not reversed?)
        (decrease! camera spacing)
      (increase! camera spacing)))


  (method override (draw-showcase)
    ;; Preserve
    (glPushMatrix)
    (glDisable GL_LIGHTING)
    
    ;; Reset and transform the matrix
    (glMatrixMode GL_MODELVIEW)
    (glLoadIdentity)
    (gluLookAt
      10. 0. camera
      -1. 0. camera
      0. 1. 0.)
    
    ;; Clear depth buffer
    (glClear GL_DEPTH_BUFFER_BIT)
    
    ;; Tiles
    (let ((tiles (showcased-tiles)))
      (loop (for n from 0 below (vector-length tiles))
            (let ((rank n))
              (let ((entity (vector-ref tiles rank)))
                (draw-entity~ entity)))))
    
    ;; Restore
    (glEnable GL_LIGHTING)
    (glPopMatrix))))
