;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; World Tiles
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2013
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.interface.tiles jazz


(import (jazz.graphic.opengl.glew)
        (world)
        (world.autoload)
        (world.block)
        (world.camera)
        (world.draw)
        (world.dye)
        (world.dyes)
        (world.entity)
        (world.face)
        (world.generate)
        (world.geometry)
        (world.interface)
        (world.interface.showcase)
        (world.material)
        (world.model)
        (world.object)
        (world.opengl)
        (world.quad)
        (world.syntax (phase syntax))
        (world.texture)
        (world.tile)
        (world.tiles))


(class Tiles-Showcase extends World-Showcase
  
  
  (method override (showcase-spacing)
    .8)
  
  
  (method override (showcase-showing)
    (current-zone))
  
  
  (method override (showcase-y)
    -2.8)
  
  
  (method override (showcase-elements showing)
    (let ((world (current-world)))
      (define (showcase-blocks)
        (let ((spacing (showcase-spacing))
              (scale .6)
              (x (showcase-x))
              (y (showcase-y))
              (z 0.))
          (map (lambda (name)
                 (let ((model (registered-tile name)))
                   (let ((entity (new Tile model: name position: (vertex x y z) scale: (vertex scale scale scale))))
                     (set-radiuses~ entity (vertex .3 .3 .3))
                     (increase! z spacing)
                     entity)))
               (sort di<? (table-keys (registered-tiles)) key: symbol->string))))
      
      (define (showcase-minecraft)
        (define (collect-blocks)
          (let ((queue (new-queue))
                (blockids (minecraft-blockids~ showing)))
            (loop (for n from 0 below (vector-length blockids))
                  (let ((block (vector-ref blockids n)))
                    (unless (eq? (get-name~ block) 'Unknown)
                      (enqueue queue block))))
            (queue-list queue)))
        
        (let ((spacing (showcase-spacing))
              (blocks (collect-blocks))
              (x (showcase-x))
              (y (showcase-y))
              (z 0.))
          (map (lambda (block)
                 (let ((model (make-faces-model (minecraft-block-model~ showing block 0. 0. 0.)))
                       (scale .6))
                   (let ((entity (new Entity position: (vertex x y z) scale: (vertex scale scale scale))))
                     (set-radiuses~ entity (vertex .3 .3 .3))
                     (set-model~ entity model)
                     (increase! z spacing)
                     entity)))
               blocks)))
      
      (if (minecraft?~ showing)
          (showcase-minecraft)
        (showcase-blocks))))


  (method override (draw-element tile)
    (draw~ tile))
  
  
  (method override (draw-selection)
    (when selection
      (draw-target~ selection red-dye)))
  
  
  (method override (ray-closest-element orig <f64vector> dir <f64vector>)
    (let ((tiles (cache-elements)))
      (when tiles
        (let ((closest #f)
              (distance #f))
          (loop (for n from 0 below (vector-length tiles))
                (let ((tile (vector-ref tiles n)))
                  (when (ray-intersects-sphere? orig dir (get-position~ tile) (get-radius~ tile))
                    (for-each (lambda (poly)
                                (let ((cls (ray-closest-triangle~ poly orig dir #f)))
                                  (when cls
                                    (bind (poly dist) cls
                                      (when (or (not distance)
                                                (< dist distance))
                                        (set! closest (list poly dist))
                                        (set! distance dist))))))
                              (element-polygons~ tile)))))
          closest))))
  
  
  (method override (selection-addable?)
    #t)))
