;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; World Tiles
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2013
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.interface.tiles jazz


(import (jazz.geometry)
        (jazz.graphic.opengl.glew)
        (jazz.io)
        (world)
        (world.autoload)
        (world.block)
        (world.blocks)
        (world.draw)
        (world.dye)
        (world.dyes)
        (world.entity)
        (world.face)
        (world.generate)
        (world.geometry)
        (world.interface)
        (world.interface.showcase)
        (world.material)
        (world.model)
        (world.object)
        (world.opengl)
        (world.quad)
        (world.syntax (phase syntax))
        (world.texture))


(class Tiles-Showcase extends World-Showcase
  
  
  (method override (showcase-showing)
    (let ((world (current-world)))
      (get-block-atlas~ world)))
  
  
  (method override (showcase-margin)
    .3)
  
  
  (method override (showcase-spacing)
    .85)
  
  
  (method override (showcase-z)
    -.35)
  

  (method override (showcase-elements showing)
    (define (rotate entity)
      (rotate~ entity PI)
      entity)
    
    (let ((world (current-world)))
      (let ((camera (cache-camera))
            (spacing (showcase-spacing))
            (x (showcase-x))
            (y (showcase-y))
            (z 0.))
        (map (lambda (texture)
               (let ((model (make-wall-model texture))
                     (scaling .7))
                 (let ((entity (rotate (new Entity position: (vertex x y z) scale: (vertex scaling scaling scaling) user-data: texture))))
                   (set-camera~ entity camera)
                   (set-model~ entity model)
                   (increase! z spacing)
                   entity)))
             (image-names~ (get-block-atlas~ world))))))


  (method override (draw-element entity)
    (draw-entity~ entity))
  
  
  (method override (draw-selection)
    (when selection
      (gl-colorize-dye red-dye)
      (glLineWidth 2.)
      (glDisable GL_LIGHTING)
      (glBegin GL_LINE_LOOP)
      (let ((quad (texture-quad selection)))
        (let ((v1 (get-v1~ quad))
              (v2 (get-v2~ quad))
              (v3 (get-v3~ quad))
              (v4 (get-v4~ quad)))
          (glVertex3f (vertex-x v1) (vertex-y v1) (vertex-z v1))
          (glVertex3f (vertex-x v2) (vertex-y v2) (vertex-z v2))
          (glVertex3f (vertex-x v3) (vertex-y v3) (vertex-z v3))
          (glVertex3f (vertex-x v4) (vertex-y v4) (vertex-z v4))))
      (glEnd)
      (glEnable GL_LIGHTING)
      (glLineWidth 1.)))
  
  
  (method override (ray-closest-element orig <f64vector> dir <f64vector>)
    (let ((entities (cache-elements)))
      (let ((closest #f)
            (distance #f))
        (loop (for n from 0 below (vector-length entities))
              (let ((entity (vector-ref entities n)))
                (let ((poly (texture-quad entity)))
                  (let ((cls (ray-closest-triangle~ poly orig dir #f)))
                    (when cls
                      (bind (poly dist) cls
                        (when (or (not distance)
                                  (< dist distance))
                          (set! closest (list poly dist))
                          (set! distance dist))))))))
        closest)))
  
  
  (method (texture-quad entity)
    (let ((pos (get-position~ entity))
          (height .7)
          (half-depth .35))
      (let ((v1 (vertex+ pos (vertex 0. height (- half-depth))))
            (v2 (vertex+ pos (vertex 0. 0. (- half-depth))))
            (v3 (vertex+ pos (vertex 0. 0. half-depth)))
            (v4 (vertex+ pos (vertex 0. height half-depth))))
        (make-quad entity v1 v2 v3 v4))))))
