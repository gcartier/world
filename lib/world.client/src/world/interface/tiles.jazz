;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Tiles
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is WorldScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2014
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See http://github.com/gcartier/world for details.


(module world.interface.tiles jazz


(import (jazz.geometry)
        (jazz.system)
        (world)
        (world.autoload)
        (world.entity)
        (world.face)
        (world.geometry)
        (world.interface.showcase)
        (world.material)
        (world.object)
        (world.quad)
        (world.syntax (phase syntax))
        (world.texture))


(definition public (make-tile-model material uv)
  (let ((bottom -.5)
        (back -.5)
        (top .5)
        (front .5))
    (let ((tl (uv-left uv))
          (tt (uv-top uv))
          (tr (uv-right uv))
          (tb (uv-bottom uv))
          (texture-depth (uv-depth uv)))
      (let ((faces
              (list
                (make-face material
                           (f32vector tl tt tl tb tr tb tr tt)
                           texture-depth
                           (make-quad #f
                                      (vertex 0. top front) (vertex 0. bottom front) (vertex 0. bottom back) (vertex 0. top back))))))
        (make-block-model faces rotation: (vertex 0. PI 0.) bounds: (cuboid 0. bottom back 0. top front) flat?: #t)))))


(class Tiles-Showcase extends World-Showcase
  
  
  (method override (showcase-showing)
    (let ((world (current-world)))
      (let ((entity (first-target~ world)))
        (or (and entity (get-atlas~ (cache-model~ entity)))
            (get-block-atlas~ world)))))
  
  
  (method override (showcase-margin)
    .3)
  
  
  (method override (showcase-spacing)
    .85)
  
  
  (method override (showcase-z)
    -.35)
  

  (method override (showcase-elements showing)
    (define (rotate entity)
      (rotate~ entity PI)
      entity)
    
    (let ((world (current-world)))
      (let ((block-atlas (get-block-atlas~ world))
            (camera (cache-camera))
            (spacing (showcase-spacing))
            (x (showcase-x))
            (y (showcase-y))
            (z 0.))
        (map (lambda (texture)
               (let ((coord (image-rect~ showing texture)))
                 (let ((uv (if (find-setting 'world.debug-textures? #f) (uv 0. 0. 1. 1. (uv-depth coord)) coord)))
                   (let ((model (make-tile-model (if (eq? showing block-atlas) (find-block-material~ world (or (find-texture-shader~ world texture) 'transparent)) (new Material atlas: showing texture: (get-texture~ showing))) uv))
                         (scaling .7))
                     (let ((entity (rotate (new Entity parent: self position: (vertex x (+ y .35) z) scale: (vertex scaling scaling scaling) user-data: texture))))
                       (set-camera~ entity camera)
                       (set-model~ entity model)
                       (increase! z spacing)
                       entity)))))
             (image-names~ showing)))))
  
  
  (method override (showcase-lighting)
    (cache-texture-lighting))
  
  
  (method override (draw-selection)
    (when selection
      (draw-selection-quad (texture-quad selection))))
  
  
  (method override (ray-closest-element orig <f64vector> dir <f64vector>)
    (let ((entities (cache-elements)))
      (let ((closest #f)
            (distance #f))
        (loop (for n from 0 below (vector-length entities))
              (let ((entity (vector-ref entities n)))
                (let ((poly (texture-quad entity)))
                  (let ((cls (ray-closest-triangle~ poly orig dir #f)))
                    (when cls
                      (bind (poly dist) cls
                        (when (or (not distance)
                                  (< dist distance))
                          (set! closest (list poly dist))
                          (set! distance dist))))))))
        closest)))
  
  
  (method (texture-quad entity)
    (let ((pos (get-position~ entity))
          (half .35))
      (let ((v1 (vertex+ pos (vertex 0. (- half) (- half))))
            (v2 (vertex+ pos (vertex 0. half (- half))))
            (v3 (vertex+ pos (vertex 0. half half)))
            (v4 (vertex+ pos (vertex 0. (- half) half))))
        (make-quad entity v1 v2 v3 v4))))))
