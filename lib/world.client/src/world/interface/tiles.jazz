;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; World Tiles
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2013
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.interface.tiles jazz


(import (jazz.graphic.opengl.glew)
        (world)
        (world.autoload)
        (world.block)
        (world.camera)
        (world.draw)
        (world.dye)
        (world.dyes)
        (world.entity)
        (world.face)
        (world.generate)
        (world.geometry)
        (world.interface)
        (world.interface.showcase)
        (world.material)
        (world.model)
        (world.object)
        (world.opengl)
        (world.quad)
        (world.syntax (phase syntax))
        (world.texture)
        (world.tile))


(class Tiles-Showcase extends World-Showcase
  
  
  (slot showing  initialize #f getter generate)
  (slot entities initialize #f getter generate)
  
  
  (method override (showcase-spacing)
    .8)
  
  
  (method override (showcase-entities)
    (let ((world (current-world))
          (zone (current-zone)))
      (define (showcase-blocks)
        (let ((spacing (showcase-spacing))
              (y -2.8)
              (z 0.))
          (let ((all (map (lambda (name)
                            (let ((model (make-block-model name name name name name name))
                                  (scale .3))
                              (let ((entity (new Entity position: (vertex 0. y z) scale: (vertex scale scale scale))))
                                (set-radiuses~ entity (vertex .3 .3 .3))
                                (set-model~ entity model)
                                (decrease! z spacing)
                                entity)))
                          (image-names~ (get-tile-atlas~ world)))))
            (list->vector all))))
      
      (define (showcase-minecraft)
        (define (collect-blocks)
          (let ((queue (new-queue))
                (blockids (minecraft-blockids~ zone)))
            (loop (for n from 0 below (vector-length blockids))
                  (let ((block (vector-ref blockids n)))
                    (unless (eq? (get-name~ block) 'Unknown)
                      (enqueue queue block))))
            (queue-list queue)))
        
        (let ((spacing (showcase-spacing))
              (blocks (collect-blocks))
              (y -2.8)
              (z 0.))
          (let ((all (map (lambda (block)
                            (let ((model (make-faces-model (minecraft-block-model~ zone block 0. 0. 0.)))
                                  (scale .6))
                              (let ((entity (new Entity position: (vertex 0. y z) scale: (vertex scale scale scale))))
                                (set-radiuses~ entity (vertex .3 .3 .3))
                                (set-model~ entity model)
                                (decrease! z spacing)
                                entity)))
                          blocks)))
            (list->vector all))))
      
      (if (and entities (eq? zone showing))
          entities
        (set! showing zone)
        (set! entities (if (minecraft?~ zone)
                           (showcase-minecraft)
                         (showcase-blocks)))
        entities)))


  (method override (draw-elements)
    (let ((entities (showcase-entities)))
      (loop (for n from 0 below (vector-length entities))
            (let ((rank n))
              (let ((entity (vector-ref entities rank)))
                (draw-entity~ entity))))))
  
  
  (method override (draw-target)
    (when target
      (draw-target~ target red-dye)))))
