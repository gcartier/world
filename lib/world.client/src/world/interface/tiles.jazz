;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Tiles
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.interface.tiles jazz


(import (jazz.geometry)
        (gaea.geometry)
        (world)
        (world.autoload)
        (world.context)
        (world.entity)
        (world.face)
        (world.interface.showcase)
        (world.material)
        (world.object)
        (world.quad)
        (world.settings)
        (world.texture))


(definition public (make-tile-model material uv)
  (let ((bottom -.5)
        (back -.5)
        (top .5)
        (front .5))
    (let ((tl (uv-left uv))
          (tt (uv-top uv))
          (tr (uv-right uv))
          (tb (uv-bottom uv))
          (texture-depth (uv-depth uv)))
      (let ((faces
              (list
                (make-face material
                           (f32vector tl tt tl tb tr tb tr tt)
                           texture-depth
                           (make-quad #f
                                      (vertex 0. top front) (vertex 0. bottom front) (vertex 0. bottom back) (vertex 0. top back))))))
        (make-model faces rotation: (vertex 0. PI 0.) bounds: (cuboid 0. bottom back 0. top front) flat?: #t)))))


(class Tiles-Showcase extends World-Showcase
  
  
  (method override (showcase-showing self)
    (let ((world (current-world)))
      (let ((entity (first-target world)))
        (or (and entity (get-atlas (cache-model entity)))
            (get-block-atlas world)))))
  
  
  (method override (showcase-front self)
    0.)
  
  
  (method override (showcase-back self)
    0.)
  
  
  (method override (showcase-radius self)
    .35)
  
  
  (method override (showcase-spacing self)
    .85)
  

  (method override (showcase-elements self showing)
    (define (rotate-90 entity)
      (rotate entity PI)
      entity)
    
    (let ((world (current-world)))
      (let ((block-atlas (get-block-atlas world))
            (camera (cache-camera self))
            (spacing (showcase-spacing self))
            (x 0.)
            (y 0.)
            (z 0.))
        (map (lambda (texture)
               (let ((coord (image-rect showing texture)))
                 (let ((uv (if (world-setting 'world.debug-textures? #f) (uv 0. 0. 1. 1. (uv-depth coord)) coord)))
                   (let ((model (make-tile-model (if (eq? showing block-atlas) (get-material-transparent world) (new Material atlas: showing texture: (get-texture showing))) uv))
                         (scaling .7))
                     (let ((entity (rotate-90 (new Entity parent: self position: (vertex x y z) scale: (vertex scaling scaling scaling) user-data: texture))))
                       (set-camera entity camera)
                       (set-model entity model)
                       (increase! z spacing)
                       entity)))))
             (image-names showing)))))
  
  
  (method override (showcase-sun self)
    (vertex -1000. 20. -5.))
  
  
  (method override (draw-selection self)
    (when selection
      (draw-selection-quad self (texture-quad self selection))))
  
  
  (method override (ray-closest-element self orig <vertex> dir <vertex>)
    (let ((entities (cache-elements self)))
      (let ((closest #f)
            (distance #f))
        (loop (for n from 0 below (vector-length entities))
              (let ((entity (vector-ref entities n)))
                (let ((poly (texture-quad self entity)))
                  (let ((cls (ray-closest-triangle poly orig dir #f)))
                    (when cls
                      (bind (poly dist) cls
                        (when (or (not distance)
                                  (< dist distance))
                          (set! closest (list poly dist))
                          (set! distance dist))))))))
        closest)))
  
  
  (method (texture-quad self entity)
    (let ((pos (get-position entity))
          (half .35))
      (let ((v1 (vertex+ pos (vertex 0. (- half) (- half))))
            (v2 (vertex+ pos (vertex 0. half (- half))))
            (v3 (vertex+ pos (vertex 0. half half)))
            (v4 (vertex+ pos (vertex 0. (- half) half))))
        (make-quad entity v1 v2 v3 v4))))))
