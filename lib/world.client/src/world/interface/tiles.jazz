;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; World Tiles
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2013
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.interface.tiles jazz


(import (jazz.graphic.opengl.glew)
        (world)
        (world.autoload)
        (world.block)
        (world.draw)
        (world.dye)
        (world.dyes)
        (world.entity)
        (world.face)
        (world.generate)
        (world.geometry)
        (world.interface)
        (world.interface.showcase)
        (world.material)
        (world.model)
        (world.object)
        (world.opengl)
        (world.quad)
        (world.syntax (phase syntax))
        (world.texture)
        (world.tile))


(definition spacing
  1.)


;; quicky for tests
(definition showing-zone
  #f)


(class Tiles-Showcase extends Showcase
  
  
  (slot tiles  initialize #f getter generate)
  (slot camera initialize 0. getter generate)
  
  
  (method (showcased-tiles)
    (let ((zone (current-zone)))
      (if (and tiles (eq? zone showing-zone))
          tiles
        (set! showing-zone zone)
        (set! tiles (if (minecraft?~ zone)
                        (showcased-minecraft)
                      (showcased-blocks)))
        tiles)))
  
  
  (method (showcased-blocks)
    (let ((world (current-world)))
      (let ((y -2.8)
            (z 0.))
        (let ((all (map (lambda (name)
                          (let ((model (make-block-model name name name name name name))
                                (scale .4))
                            (let ((entity (new Entity position: (vertex 0. y z) scale: (vertex scale scale scale))))
                              (set-radiuses~ entity (vertex 1. 1. 1.))
                              (set-model~ entity model)
                              (decrease! z spacing)
                              entity)))
                        (image-names~ (get-tile-atlas~ world)))))
          (list->vector all)))))
  
  
  (method (showcased-minecraft)
    (let ((world (current-world))
          (zone (current-zone)))
      (let ((blocks (minecraft-blocks~ zone))
            (y -2.8)
            (z 0.))
        (let ((all (map (lambda (block)
                          (let ((model (make-faces-model (minecraft-block-model~ zone block 0. 0. 0.)))
                                (scale .8))
                            (let ((entity (new Entity position: (vertex 0. y z) scale: (vertex scale scale scale))))
                              (set-radiuses~ entity (vertex 1. 1. 1.))
                              (set-model~ entity model)
                              (decrease! z spacing)
                              entity)))
                        (table-values blocks))))
          (list->vector all)))))
  
  
  (method override (showcase-wheel reversed?)
    (if (not reversed?)
        (decrease! camera spacing)
      (increase! camera spacing)))


  (method override (draw-showcase)
    ;; Preserve
    (glPushMatrix)
    (glDisable GL_LIGHTING)
    
    ;; Reset and transform the matrix
    (glMatrixMode GL_MODELVIEW)
    (glLoadIdentity)
    (gluLookAt
      10. 0. camera
      -1. 0. camera
      0. 1. 0.)
    
    ;; Clear depth buffer
    (glClear GL_DEPTH_BUFFER_BIT)
    
    ;; Tiles
    (let ((tiles (showcased-tiles)))
      (loop (for n from 0 below (vector-length tiles))
            (let ((rank n))
              (let ((entity (vector-ref tiles rank)))
                (draw-entity~ entity)))))
    
    ;; Restore
    (glEnable GL_LIGHTING)
    (glPopMatrix))))
