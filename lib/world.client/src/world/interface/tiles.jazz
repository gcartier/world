;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; World Tiles
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2013
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.interface.tiles jazz


(import (jazz.graphic.opengl.glew)
        (world)
        (world.autoload)
        (world.block)
        (world.camera)
        (world.draw)
        (world.dye)
        (world.dyes)
        (world.entity)
        (world.face)
        (world.generate)
        (world.geometry)
        (world.interface)
        (world.interface.showcase)
        (world.material)
        (world.model)
        (world.object)
        (world.opengl)
        (world.quad)
        (world.syntax (phase syntax))
        (world.texture)
        (world.tile)
        (world.tiles))


(class Tiles-Showcase extends World-Showcase
  
  
  (slot showing initialize #f getter generate)
  (slot tiles   initialize #f getter generate)
  
  
  (method override (showcase-spacing)
    .8)
  
  
  (method override (showcase-elements)
    (let ((world (current-world))
          (zone (current-zone)))
      (define (showcase-blocks)
        (let ((spacing (showcase-spacing))
              (scale .6)
              (y -2.8)
              (z 0.))
          (let ((all (map (lambda (name)
                            (let ((model (registered-tile name)))
                              (let ((entity (new Tile model: name position: (vertex 0. y z) scale: (vertex scale scale scale))))
                                (set-radiuses~ entity (vertex .3 .3 .3))
                                (decrease! z spacing)
                                entity)))
                          (sort di<? (table-keys (registered-tiles)) key: symbol->string))))
            (list->vector all))))
      
      (define (showcase-minecraft)
        (define (collect-blocks)
          (let ((queue (new-queue))
                (blockids (minecraft-blockids~ zone)))
            (loop (for n from 0 below (vector-length blockids))
                  (let ((block (vector-ref blockids n)))
                    (unless (eq? (get-name~ block) 'Unknown)
                      (enqueue queue block))))
            (queue-list queue)))
        
        (let ((spacing (showcase-spacing))
              (blocks (collect-blocks))
              (y -2.8)
              (z 0.))
          (let ((all (map (lambda (block)
                            (let ((model (make-faces-model (minecraft-block-model~ zone block 0. 0. 0.)))
                                  (scale .6))
                              (let ((entity (new Entity position: (vertex 0. y z) scale: (vertex scale scale scale))))
                                (set-radiuses~ entity (vertex .3 .3 .3))
                                (set-model~ entity model)
                                (decrease! z spacing)
                                entity)))
                          blocks)))
            (list->vector all))))
      
      (if (and tiles (eq? zone showing))
          tiles
        (set! showing zone)
        (set! tiles (if (minecraft?~ zone)
                        (showcase-minecraft)
                      (showcase-blocks)))
        tiles)))


  (method override (draw-elements)
    (let ((tiles (showcase-elements)))
      (loop (for n from 0 below (vector-length tiles))
            (let ((rank n))
              (let ((tile (vector-ref tiles rank)))
                (draw~ tile))))))
  
  
  (method override (draw-selection)
    (when selection
      (draw-target~ selection red-dye)))
  
  
  (method override (ray-closest-element orig <f64vector> dir <f64vector>)
    (let ((tiles (showcase-elements)))
      (when tiles
        (let ((closest #f)
              (distance #f))
          (loop (for n from 0 below (vector-length tiles))
                (let ((tile (vector-ref tiles n)))
                  (when (ray-intersects-sphere? orig dir (get-center~ tile) (get-radius~ tile))
                    (for-each (lambda (poly)
                                (let ((cls (ray-closest-triangle~ poly orig dir #f)))
                                  (when cls
                                    (bind (poly dist) cls
                                      (when (or (not distance)
                                                (< dist distance))
                                        (set! closest (list poly dist))
                                        (set! distance dist))))))
                              (element-polygons~ tile)))))
          closest))))
  
  
  (method override (selection-addable?)
    #t)))
