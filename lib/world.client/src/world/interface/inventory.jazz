;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Inventory
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.interface.inventory jazz


(import (jazz.geometry)
        (jazz.graphic)
        (jazz.graphic.image)
        (jazz.io)
        (jazz.jml)
        (jazz.ui)
        (world)
        (world.autoload)
        (world.external.nbt)
        (world.interface.pane)
        (world.syntax (phase syntax))
        (world.texture))


(definition slot-size
  48)

(definition belt-slot-size
  60)


(definition slot-images
  (make-table))

(definition protected (get-slot-image id)
  (let ((world (current-world)))
    (or (table-ref slot-images id #f)
        (let ((block (world.external.minecraft:blockid->block id)))
          (receive (width height image) (cairo-surface-from-file (image-file~ (get-block-atlas~ world) (get-texture~ block)))
            (let ((resized-image (resize-image image slot-size slot-size)))
              (table-set! slot-images id resized-image)
              resized-image))))))


(definition item-images
  (list->table
    '((256 . "iron_shovel")
      (257 . "iron_pickaxe")
      (258 . "iron_axe")
      (259 . "flint_and_steel")
      (260 . "apple")
      (261 . "bow_standby")
      (262 . "arrow")
      (263 . "coal")
      (264 . "diamond")
      (281 . "bowl"))))

(definition (make-item-table)
    (let ((world (current-world)))
      (let ((queue (new-queue)))
        (for-each (lambda (assets)
                    (let ((items-dir (new-directory~ assets "items")))
                      (when (exists?~ items-dir)
                        (iterate-directory~ items-dir
                          (lambda (path kind)
                            (let ((path (join path "/")))
                              (when (extension=? (extract-extension path) "png")
                                (enqueue queue (extract-base path)))))
                          full?: #f
                          files?: #t
                          directories?: #f))))
                  (get-all-assets~ world))
        (let ((items-list (queue-list queue)))))))


(class Inventory-Slot extends View
  
  
  (property id       initialize #f accessors generate)
  (property number   initialize #f accessors generate)
  
  
  (form
    (<install> draggable?: #t))
  
  
  ;;;
  ;;;; Drag
  ;;;
  
  
  (method override (drag-acquires-focus?)
    #f)
  
  
  ;;;
  ;;;; Mouse
  ;;;
  
  
  (method override (mouse-down evt)
    (down~ parent self))
  
  
  ;;;
  ;;;; Draw
  ;;;
     
  
  (method override (draw surface context)
    (let ((bounds (get-bounds)))
      (when id
        (if (< id 256)
            (let ((str (->string number)))
              (let ((extent (get-text-extent~ surface str)))
                (blit-surface~ surface (get-slot-image id) destination: {Point 1 1})
                (draw-text~ surface (- (get-right~ bounds) (get-width~ extent)) (- (get-bottom~ bounds) (get-height~ extent)) str {Color White})))
          (let ((str (->string id)))
            (let ((extent (get-text-extent~ surface str)))
              (let ((pos (center extent (rect-size bounds))))
                (draw-text~ surface (get-h~ pos) (get-v~ pos) str {Color Yellow}))))))
      (frame-partial-rect~ surface bounds '(left top) {Color Entry-Border})
      (frame-partial-rect~ surface bounds '(right bottom) {Color Entry-Border alpha: .6})))
  
  
  (method override (current-drop drag-drop pos)
    (let ((sender (get-view~ (get-source~ drag-drop))))
      (new Drop-Target view: self user-data: #f)))
  
  
  (method override (receive-drop sender pos drag-drop)
    (when (get-id~ sender)
      (if id
          (let ((temp-id (get-id~ sender))
                (temp-number (get-number~ sender)))
            (set-id~ sender id)
            (set-number~ sender number)
            (set! id temp-id)
            (set! number temp-number))
        (begin (set! id (get-id~ sender))
          (set! number (get-number~ sender))
          (set-id~ sender #f)
          (set-number~ sender #f)
          (invalidate-view)
          (invalidate-view~ sender))))))


;;;
;;;; Inventory
;;;


(class Inventory-Pane extends World-Pane
  
  
  (slot slot-table initialize (make-table) getter generate)
  (slot data       initialize #f           getter generate)
  
  
  (form
    (<install> background: {Color Black alpha: 0.3}))
  
  
  ;;;
  ;;;; Update
  ;;;
  
  
  (method protected virtual (setup-inventory width height)
    (loop (for x from 0 below width)
          (loop (for y from 0 below height)
                (let ((number (+ x (* y width)))
                      (view (new Inventory-Slot parent: self position: (new Point (* x slot-size) (* y slot-size)) size: (new Dimension slot-size slot-size))))
                  (table-set! slot-table number view)))))
  
  
  (method (reset-inventory)
    (iterate-table slot-table
      (lambda (id view)
        (set-id~ view #f))))
  
  
  (method protected virtual (view-inventory)
    )
  
  
  ;;;
  ;;;; Mouse
  ;;;
  
  
  (method protected virtual (down evt)
    )
  
  
  ;;;
  ;;;; Draw
  ;;;
  
  
  (method override (draw surface context)
    (let ((bounds (get-bounds)))
      (frame-partial-rect~ surface bounds '(right bottom) {Color Entry-Border}))))


;;;
;;;; Bag
;;;


(class Bag-Pane extends Inventory-Pane
  
  
  (method override (conclude initargs)
    (nextmethod initargs)
    (setup-inventory 9 3))
  
  
  (method override (setup-inventory width height)
    (loop (for x from 0 below width)
          (loop (for y from 0 below height)
                (let ((number (+ x (* y width) 9))
                      (view (new Inventory-Slot parent: self position: (new Point (* x slot-size) (* y slot-size)) size: (new Dimension slot-size slot-size))))
                  (table-set! slot-table number view)))))
  
  
  (method override (view-inventory)
    (let ((zone (current-zone)))
      (reset-inventory)
      (when (minecraft?~ zone)
        (let ((level (get-level-nbt~ zone)))
          (let ((inventory (list-payload-content (tag-assoc "Inventory" (tag-assoc "Player" (tag-assoc "Data" (tag-value level)))))))
            (for-each (lambda (item)
                        (let ((id (tag-assoc "id" item))
                              (count (tag-assoc "Count" item))
                              (slot-number (tag-assoc "Slot" item)))
                          (let ((view (table-ref slot-table slot-number #f)))
                            (when view
                              (set-id~ view id)
                              (set-number~ view count)))))
                      inventory)))))))


;;;
;;;; Chest
;;;


(class Chest-Pane extends Inventory-Pane
  
  
  (method override (conclude initargs)
    (nextmethod initargs)
    (setup-inventory 9 3))
  
  
  (method override (view-inventory data)
    (set! data~self data)
    (reset-inventory)
    (let ((inventory (list-payload-content (tag-assoc "Items" data))))
      (for-each (lambda (item)
                  (let ((id (tag-assoc "id" item))
                        (count (tag-assoc "Count" item))
                        (slot-number (tag-assoc "Slot" item)))
                    (let ((view (table-ref slot-table slot-number)))
                      (set-id~ view id)
                      (set-number~ view count))))
                inventory))))


;;;
;;;; Belt
;;;


(class Belt-Pane extends Inventory-Pane
  
  
  (slot selection initialize #f accessors generate)
  
  
  (method override (conclude initargs)
    (nextmethod initargs)
    (setup-inventory 9 1)
    (set! selection (table-ref slot-table 0)))
  
  
  (method override (setup-inventory width height)
    (loop (for x from 0 below width)
          (loop (for y from 0 below height)
                (let ((number (+ x (* y width)))
                      (view (new Inventory-Slot parent: self position: (new Point (* x belt-slot-size) (* y belt-slot-size)) size: (new Dimension belt-slot-size belt-slot-size))))
                  (table-set! slot-table number view)))))
  
  
  (method override (view-inventory)
    (let ((zone (current-zone)))
      (reset-inventory)
      (let ((level (get-level-nbt~ zone)))
        (let ((inventory (list-payload-content (tag-assoc "Inventory" (tag-assoc "Player" (tag-assoc "Data" (tag-value level)))))))
          (for-each (lambda (item)
                      (let ((id (tag-assoc "id" item))
                            (count (tag-assoc "Count" item))
                            (slot-number (tag-assoc "Slot" item)))
                        (let ((view (table-ref slot-table slot-number #f)))
                          (when view
                            (set-id~ view id)
                            (set-number~ view count)))))
                    inventory)))))
  
  
  (method override (down slot)
    (set! selection slot)
    (invalidate-view))
  
  
  (method override (draw-children surface nodes context)
    (nextmethod surface nodes context)
    (when selection
      (let ((outer (expand-rect (acquire selection (get-bounds~ selection)) 0 0 1 1)))
        (let ((inner (inflate-rect outer -1 -1)))
          (frame-rect~ surface outer {Color red: .072 green: .072 blue: .995})
          (frame-rect~ surface inner {Color red: .072 green: .072 blue: .995})))))))
