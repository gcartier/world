;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Inventory
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is WorldScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2014
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See http://github.com/gcartier/world for details.


(module world.interface.inventory jazz


(import (jazz.graphic)
        (jazz.graphic.image)
        (jazz.io)
        (jazz.jml)
        (jazz.ui)
        (world)
        (world.autoload)
        (world.external.nbt)
        (world.interface.pane)
        (world.syntax (phase syntax))
        (world.texture))


(definition slot-size
  48)


(definition slot-images
  (make-table))

(definition (get-slot-image id)
  (let ((world (current-world)))
    (or (table-ref slot-images id #f)
        (let ((block (world.external.minecraft:blockid->block id)))
          (receive (width height image) (cairo-surface-from-file (image-file~ (get-block-atlas~ world) (get-texture~ block)))
            (let ((resized-image (resize-image image slot-size slot-size)))
              (table-set! slot-images id resized-image)
              resized-image))))))


(class Inventory-Slot extends View
  
  
  (property id       initialize #f accessors generate)
  (property number   initialize #f accessors generate)
     
  
  (method override (draw surface context)
    (let ((bounds (get-bounds)))
      (when (and id (< id 256))
        (let ((str (->string number)))
          (let ((extent (get-text-extent~ surface str)))
            (blit-surface~ surface (get-slot-image id))
            (draw-text~ surface (- (get-right~ bounds) (get-width~ extent)) (- (get-bottom~ bounds) (get-height~ extent)) str {Color White}))))
      (frame-rect~ surface bounds {Color Blue}))))


(class Inventory-Pane extends World-Pane
  
  
  (slot slot-table initialize (make-table) getter generate)
  
  
  (form
    (<install> background: {Color Black alpha: 0.3}))
  
  
  (method override (conclude initargs)
    (nextmethod initargs)
    (setup-inventory))
  
  
  ;;;
  ;;;; Update
  ;;;
  
  (method (setup-inventory)
    (loop (for x from 0 below 9)
          (loop (for y from 0 below 4)
                (let ((number (+ x (* y 9)))
                      (view (new Inventory-Slot parent: self position: (new Point (* x slot-size) (* y slot-size)) size: (new Dimension slot-size slot-size))))
                  (table-set! slot-table number view)))))
  
  
  (method (view-inventory)
    (let ((level (world.external.minecraft:get-minecraft-level)))
      (let ((inventory (list-payload-content (tag-assoc "Inventory" (tag-assoc "Player" (tag-assoc "Data" (tag-value level)))))))
        (for-each (lambda (item)
                    (let ((id (tag-assoc "id" item))
                          (count (tag-assoc "Count" item))
                          (slot-number (tag-assoc "Slot" item)))
                      (let ((view (table-ref slot-table slot-number)))
                        (set-id~ view id)
                        (set-number~ view count))))
                  inventory))))))
