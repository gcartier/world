;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Inventory
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.interface.inventory jazz


(import (jazz.geometry)
        (jazz.graphic)
        (jazz.graphic.image)
        (jazz.io)
        (jazz.jml)
        (jazz.view)
        (jazz.view.dnd)
        (world)
        (world.autoload)
        (world.external.nbt)
        (world.interface.pane)
        (world.syntax (phase syntax))
        (world.texture))


(definition slot-size
  48)


(definition slot-images
  (make-table))

(definition protected (get-slot-image id)
  (let ((world (current-world)))
    (define (determine-file)
      (if (< id 256)
          (let ((block (world.external.minecraft:blockid->block id)))
            (image-file~ (get-block-atlas~ world) (or (get-image~ block) (get-texture~ block))))
        (item-image id)))
    
    (or (table-ref slot-images id #f)
        (let ((file (determine-file)))
          (assert file)
          (receive (width height image) (cairo-surface-from-file file)
            (let ((resized-image (resize-image image slot-size slot-size)))
              (table-set! slot-images id resized-image)
              resized-image))))))


(definition item-table
  #f)

(definition protected (get-item-table)
  (or item-table
      (let ((table (make-item-table)))
        (set! item-table table)
        table)))

(definition (make-item-table)
  (let ((world (current-world)))
    (let ((table (make-table test: equal?)))
      (iterate-assets~ world
        (lambda (assets)
          (let ((items-dir (new-directory~ (get-directory~ assets) "items")))
            (when (exists?~ items-dir)
              (iterate-directory~ items-dir
                (lambda (path kind)
                  (let ((path (join path "/")))
                    (when (extension=? (extract-extension path) "png")
                      (table-set! table (extract-base path) (make-file~ assets (string-append "items/" path))))))
                full?: #f
                files?: #t
                directories?: #f)))))
      table)))


(definition protected item-names
  (list->table
    '((256 . "iron_shovel")
      (257 . "iron_pickaxe")
      (258 . "iron_axe") ;; weapon
      (259 . "flint_and_steel")
      (260 . "apple") ;; food
      (261 . "bow_standby") ;; weapon
      (262 . "arrow") ;; missile
      (263 . "coal")
      (264 . "diamond")
      (265 . "iron_ingot")
      (266 . "gold_ingot")
      (267 . "iron_sword") ;; weapon
      (268 . "wood_sword") ;; weapon
      (272 . "stone_sword") ;; weapon
      (273 . "stone_shovel")
      (274 . "stone_pickaxe")
      (275 . "stone_axe") ;; weapon
      (276 . "diamond_sword") ;; weapon
      (278 . "diamond_pickaxe")
      (280 . "stick")
      (281 . "bowl")
      (282 . "mushroom_stew") ;; food
      (283 . "gold_sword") ;; weapon
      (284 . "gold_shovel")
      (286 . "gold_axe") ;; weapon
      (287 . "string")
      (288 . "feather")
      (289 . "gunpowder")
      (292 . "iron_hoe")
      (294 . "gold_hoe")
      (295 . "seeds_wheat")
      (296 . "wheat")
      (297 . "bread") ;; food
      (298 . "leather_helmet") ;; armor
      (299 . "leather_chestplate") ;; armor
      (300 . "leather_leggings") ;; armor
      (301 . "leather_boots") ;; armor
      (302 . "chainmail_helmet") ;; armor
      (303 . "chainmail_chestplate") ;; armor
      (304 . "chainmail_leggings") ;; armor
      (305 . "chainmail_boots") ;; armor
      (306 . "iron_helmet") ;; armor
      (307 . "iron_chestplate") ;; armor
      (308 . "iron_leggings") ;; armor
      (309 . "iron_boots") ;; armor
      (310 . "diamond_helmet") ;; armor
      (311 . "diamond_chestplate") ;; armor
      (312 . "diamond_leggings") ;; armor
      (313 . "diamond_boots") ;; armor
      (314 . "gold_helmet") ;; armor
      (315 . "gold_chestplate") ;; armor
      (316 . "gold_leggings") ;; armor
      (317 . "gold_boots") ;; armor
      (318 . "flint")
      (319 . "porkchop_raw") ;; food
      (320 . "porkchop_cooked") ;; food
      (321 . "painting") ;; later
      (322 . "apple_golden") ;; super food
      (325 . "bucket_empty")
      (326 . "bucket_water")
      (327 . "bucket_lava")
      (328 . "minecart_normal") ;; later
      (329 . "saddle")
      (331 . "redstone_dust")
      (334 . "leather")
      (335 . "bucket_milk")
      (336 . "brick")
      (337 . "clay_ball")
      (338 . "reeds")
      (339 . "paper")
      (340 . "book_normal")
      (341 . "slimeball")
      (347 . "clock")
      (348 . "glowstone_dust")
      (349 . "fish_raw") ;; food
      (350 . "fish_cooked") ;; food
      (351 . "dye_powder_black")
      (352 . "bone") ;; later
      (353 . "sugar")
      (355 . "bed")
      (356 . "repeater")
      (359 . "shears")
      (362 . "seeds_melon")
      (364 . "beef_cooked") ;; food
      (365 . "chicken_raw") ;; food
      (368 . "ender_pearl")
      (371 . "gold_nugget")
      (373 . "potion_bottle_drinkable") ;; potion
      (374 . "potion_bottle_empty") ;; potion
      (375 . "spider_eye")
      (377 . "blaze_powder")
      (380 . "cauldron")
      (2256 . "record_13")
      (2257 . "record_cat")
      (2258 . "record_blocks")
      (2259 . "record_chirp")
      (2260 . "record_far")
      (2261 . "record_mall")
      (2262 . "record_mellohi")
      (2263 . "record_stal")
      (2264 . "record_strad")
      (2265 . "record_ward")
      (2266 . "record_11"))))

(definition protected (item-image item)
  (let ((name (table-ref item-names item #f)))
    (and name (table-ref (get-item-table) name #f))))


(definition (supported-id? id)
  (or (< id 256)
      (table-ref item-names id #f)))


(definition countless-placeholder
  127)

(definition (standarize-count count)
  (if (eqv? count countless-placeholder)
      #f
    count))


;;;
;;;; Slot
;;;


(class Inventory-Slot extends View
  
  
  (property id    initialize #f accessors generate)
  (property count initialize #f accessors generate)
  (property rank  initialize #f accessors generate)
  
  
  (form
    (<install> draggable?: #t))
  
  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method (increase-count (delta 1))
    (when count
      (increase! count delta)
      (invalidate-view)))
  
  
  (method (decrease-count (delta 1))
    (when count
      (decrease! count delta)
      (when (<= count 0)
        (set! id #f))
      (invalidate-view)))
  
  
  ;;;
  ;;;; Drag
  ;;;
  
  
  (method override (drag-acquires-focus?)
    #f)
  
  
  ;;;
  ;;;; Drop
  ;;;
  
  
  (method override (current-drop drag-drop pos)
    (let ((sender (get-view~ (get-source~ drag-drop))))
      (new Drop-Target view: self user-data: #f)))
  
  
  (method override (receive-drop sender pos drag-drop)
    (let ((sender-id (get-id~ sender))
          (sender-count (get-count~ sender)))
      (when sender-id
        (cond ((not id)
               (set! id sender-id)
               (set! count sender-count)
               (set-id~ sender #f)
               (set-count~ sender #f))
              ((= id sender-id)
               (set! count (+ count sender-count))
               (set-id~ sender #f)
               (set-count~ sender #f))
              (else
               (set-id~ sender id)
               (set-count~ sender count)
               (set! id sender-id)
               (set! count sender-count)))
        (invalidate-view)
        (invalidate-view~ sender))))
  
  
  (method override (drop-void)
    (set-id #f)
    (invalidate-view))
  
  
  ;;;
  ;;;; Mouse
  ;;;
  
  
  (method override (mouse-down evt)
    (down~ parent self))
  
  
  (method override (right-mouse-down evt)
    (down~ parent self))
  
  
  ;;;
  ;;;; Draw
  ;;;
     
  
  (method override (draw surface context)
    (let ((bounds (get-bounds)))
      ;; integer test is a quick hack for minecraft 1.8 format
      (when (and id (integer? id))
        (if (supported-id? id)
            (begin
              (blit-surface~ surface (get-slot-image id) destination: {Point 1 1})
              (when count
                (let ((str (->string count)))
                  (let ((extent (get-text-extent~ surface str)))
                    (draw-text~ surface (- (get-right~ bounds) (get-width~ extent)) (- (get-bottom~ bounds) (get-height~ extent)) str {Color White})))))
          (let ((str (->string id)))
            (let ((extent (get-text-extent~ surface str)))
              (let ((pos (center extent (rect-size bounds))))
                (draw-text~ surface (get-h~ pos) (get-v~ pos) str {Color Yellow}))))))
      (frame-partial-rect~ surface bounds '(left top) {Color Entry-Border})
      (frame-partial-rect~ surface bounds '(right bottom) {Color Entry-Border alpha: .6}))))


;;;
;;;; Inventory
;;;


(class Inventory-Pane extends World-Pane
  
  
  (slot slot-table initialize (make-table) getter generate)
  
  
  (form
    (<install> background: {Color Black alpha: 0.3}))
  
  
  ;;;
  ;;;; Update
  ;;;
  
  
  (method protected virtual (setup-inventory offset width height)
    (loop (for x from 0 below width)
          (loop (for y from 0 below height)
                (let ((rank (+ offset (+ x (* y width)))))
                  (let ((view (new Inventory-Slot parent: self position: (new Point (* x slot-size) (* y slot-size)) size: (new Dimension slot-size slot-size) rank: rank)))
                    (table-set! slot-table rank view))))))
  
  
  (method (reset-inventory)
    (iterate-table slot-table
      (lambda (id view)
        (set-id~ view #f))))
  
  
  (method protected virtual (view-inventory)
    (let ((zone (current-zone)))
      (reset-inventory)
      (let ((level (get-level-nbt~ zone)))
        (let ((inventory (list-payload-content (tag-assoc "Inventory" (tag-assoc "Player" (tag-assoc "Data" (tag-value level)))))))
          (for-each (lambda (item)
                      (let ((id (tag-assoc "id" item))
                            (count (tag-assoc "Count" item))
                            (rank (tag-assoc "Slot" item)))
                        (let ((view (table-ref slot-table rank #f)))
                          (when view
                            (set-id~ view id)
                            (set-count~ view (standarize-count count))))))
                    inventory)))))
  
  
  ;;;
  ;;;; Mouse
  ;;;
  
  
  (method protected virtual (down evt)
    )
  
  
  ;;;
  ;;;; Draw
  ;;;
  
  
  (method override (draw surface context)
    (let ((bounds (get-bounds)))
      (frame-partial-rect~ surface bounds '(right bottom) {Color Entry-Border}))))


;;;
;;;; Bag
;;;


(class Bag-Pane extends Inventory-Pane
  
  
  (method override (conclude initargs)
    (nextmethod initargs)
    (setup-inventory 9 9 3)))


;;;
;;;; Belt
;;;


;; global to survive role change
(definition belt-selection
  0)


(class Belt-Pane extends Inventory-Pane
  
  
  (method override (conclude initargs)
    (nextmethod initargs)
    (setup-inventory 0 9 1))
  
  
  (method override (down slot)
    (set! belt-selection (find children slot))
    (invalidate-view))
  
  
  (method (selected-slot)
    (list-ref children belt-selection))
  
  
  (method (cycle-selection d)
    (unless (= d 0)
      (set! belt-selection (modulo ((if (< d 0) + -) belt-selection 1) (length children)))
      (invalidate-view)))
  
  
  (method override (draw-children surface nodes context)
    (nextmethod surface nodes context)
    (when belt-selection
      (let ((slot (selected-slot)))
        (let ((outer (expand-rect (acquire slot (get-bounds~ slot)) 0 0 1 1)))
          (let ((inner (inflate-rect outer -1 -1)))
            (frame-rect~ surface outer {Color red: .072 green: .072 blue: .995})
            (frame-rect~ surface inner {Color red: .072 green: .072 blue: .995})))))))


;;;
;;;; Chest
;;;


(class Chest-Pane extends Inventory-Pane
  
  
  (slot section initialize #f getter generate)
  (slot data    initialize #f getter generate)
  
  
  (method override (conclude initargs)
    (nextmethod initargs)
    (setup-inventory 0 9 3))
  
  
  (method (view-chest section data)
    (set! section~self section)
    (set! data~self data)
    (reset-inventory)
    (let ((inventory (list-payload-content (tag-assoc "Items" data))))
      (for-each (lambda (item)
                  (let ((id (tag-assoc "id" item))
                        (count (tag-assoc "Count" item))
                        (rank (tag-assoc "Slot" item)))
                    (let ((view (table-ref slot-table rank)))
                      (set-id~ view id)
                      (set-count~ view (standarize-count count)))))
                inventory))))


;;;
;;;; Add
;;;


(definition public (deposit-inventory id (count: count 1))
  (let ((world (current-world)))
    (continuation-capture
      (lambda (done)
        (define (deposit view)
          (define (save&return)
            (save-inventory)
            (continuation-return done #f))
          
          (for-each (lambda (slot)
                      (when (eqv? (get-id~ slot) id)
                        (increase-count~ slot count)
                        (save&return)))
                    (get-children~ view))
          (for-each (lambda (slot)
                      (when (not (get-id~ slot))
                        (set-id~ slot id)
                        (set-count~ slot count)
                        (invalidate-view~ slot)
                        (save&return)))
                    (get-children~ view)))
        
        (let ((interface (get-interface~ world)))
          (let ((bag-pane (child~ interface 'bag))
                (belt-pane (child~ interface 'belt)))
            (deposit belt-pane)
            (deposit bag-pane)))
        (bell)
        (display-message~ world "Inventory is full!")))))


;;;
;;;; Save
;;;


(definition (inventory-save list-payload proc)
  (set-list-payload-type list-payload TAG_Compound)
  (set-list-payload-content list-payload (let ((queue (new-queue)))
                                             (define (add-slot slot)
                                               (let ((id (get-id~ slot))
                                                     (count (get-count~ slot))
                                                     (rank (get-rank~ slot)))
                                                 (when id
                                                   (enqueue queue (list (make-tag "id" TAG_Int id)
                                                                        (make-tag "Count" TAG_Int (or count countless-placeholder))
                                                                        (make-tag "Slot" TAG_Int rank))))))
                                             
                                             (proc add-slot)
                                             (queue-list queue))))


(definition protected (save-inventory)
  (let ((world (current-world))
        (zone (current-zone)))
    (let ((interface (get-interface~ world))
          (level (get-level-nbt~ zone)))
      (let ((bag-pane (child~ interface 'bag))
            (belt-pane (child~ interface 'belt))
            (list-payload (tag-assoc "Inventory" (tag-assoc "Player" (tag-assoc "Data" (tag-value level))))))
        (inventory-save list-payload
          (lambda (add-slot)
            (for-each add-slot (get-children~ belt-pane))
            (for-each add-slot (get-children~ bag-pane))))))))


(definition protected (save-chest (save-region?: save-region? #f))
  (let ((world (current-world)))
    (let ((chest (child~ (get-interface~ world) 'chest)))
      (when (get-visible?~ chest)
        (let ((list-payload (tag-assoc "Items" (get-data~ chest))))
          (inventory-save list-payload
            (lambda (add-slot)
              (for-each add-slot (get-children~ chest)))))
        (when save-region?
          (let ((section (get-section~ chest)))
            (let ((chunk (get-chunk~ section)))
              (modified~ chunk)
              (save-region~ (get-region~ chunk))))))))))
