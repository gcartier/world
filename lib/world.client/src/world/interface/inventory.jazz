;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Inventory
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.interface.inventory jazz


(import (jazz.geometry)
        (jazz.graphic)
        (jazz.graphic.image)
        (jazz.io)
        (jazz.jml)
        (jazz.ui)
        (world)
        (world.autoload)
        (world.external.nbt)
        (world.interface.pane)
        (world.syntax (phase syntax))
        (world.texture))


(definition slot-size
  48)


(definition slot-images
  (make-table))

(definition (get-slot-image id)
  (let ((world (current-world)))
    (or (table-ref slot-images id #f)
        (let ((block (world.external.minecraft:blockid->block id)))
          (receive (width height image) (cairo-surface-from-file (image-file~ (get-block-atlas~ world) (get-texture~ block)))
            (let ((resized-image (resize-image image slot-size slot-size)))
              (table-set! slot-images id resized-image)
              resized-image))))))


(class Inventory-Slot extends View
  
  
  (property id       initialize #f accessors generate)
  (property number   initialize #f accessors generate)
  
  
  (form
    (<install> draggable?: #t))
  
  
  ;;;
  ;;;; Draw
  ;;;
     
  
  (method override (draw surface context)
    (let ((bounds (get-bounds)))
      (when (and id (< id 256))
        (let ((str (->string number)))
          (let ((extent (get-text-extent~ surface str)))
            (blit-surface~ surface (get-slot-image id) destination: {Point 1 1})
            (draw-text~ surface (- (get-right~ bounds) (get-width~ extent)) (- (get-bottom~ bounds) (get-height~ extent)) str {Color White}))))
      (frame-partial-rect~ surface bounds '(left top) {Color Entry-Border})
      (frame-partial-rect~ surface bounds '(right bottom) {Color Entry-Border alpha: .6})))
  
  
  (method override (current-drop drag-drop pos)
    (let ((sender (get-view~ (get-source~ drag-drop))))
      (new Drop-Target view: self user-data: #f)))
  
  
  (method override (receive-drop sender pos drag-drop)
    (debug 'receive sender)))


(class Inventory-Pane extends World-Pane
  
  
  (slot slot-table initialize (make-table) getter generate)
  (slot data       initialize #f           getter generate)
  
  (form
    (<install> background: {Color Black alpha: 0.3}))
  
  
  ;;;
  ;;;; Update
  ;;;
  
  
  (method (setup-inventory width height)
    (loop (for x from 0 below width)
          (loop (for y from 0 below height)
                (let ((number (+ x (* y width)))
                      (view (new Inventory-Slot parent: self position: (new Point (* x slot-size) (* y slot-size)) size: (new Dimension slot-size slot-size))))
                  (table-set! slot-table number view)))))
  
  
  (method (reset-inventory)
    (iterate-table slot-table
      (lambda (id view)
        (set-id~ view #f))))
  
  
  (method protected virtual (view-inventory)
    )
  
  
  ;;;
  ;;;; Draw
  ;;;
  
  
  (method override (draw surface context)
    (let ((bounds (get-bounds)))
      (frame-partial-rect~ surface bounds '(right bottom) {Color Entry-Border}))))



(class Bag-Pane extends Inventory-Pane
  
  
  (method override (conclude initargs)
    (nextmethod initargs)
    (setup-inventory 9 4))
  
  (method override (view-inventory)
    (let ((zone (current-zone)))
      (reset-inventory)
      (let ((level (get-level-nbt~ zone)))
        (let ((inventory (list-payload-content (tag-assoc "Inventory" (tag-assoc "Player" (tag-assoc "Data" (tag-value level)))))))
          (for-each (lambda (item)
                      (let ((id (tag-assoc "id" item))
                            (count (tag-assoc "Count" item))
                            (slot-number (tag-assoc "Slot" item)))
                        (let ((view (table-ref slot-table slot-number)))
                          (set-id~ view id)
                          (set-number~ view count))))
                    inventory))))))
  

(class Chest-Pane extends Inventory-Pane
  
  
  (method override (conclude initargs)
    (nextmethod initargs)
    (setup-inventory 9 3))
  
  (method override (view-inventory data)
    (set! data~self data)
    (reset-inventory)
    (let ((inventory (list-payload-content (tag-assoc "Items" data))))
      (for-each (lambda (item)
                  (let ((id (tag-assoc "id" item))
                        (count (tag-assoc "Count" item))
                        (slot-number (tag-assoc "Slot" item)))
                    (let ((view (table-ref slot-table slot-number)))
                      (set-id~ view id)
                      (set-number~ view count))))
                inventory)))))
