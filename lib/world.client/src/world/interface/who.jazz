;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Who Pane
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2016
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.interface.who jazz


(import (jazz.graphic)
        (jazz.handler)
        (jazz.jml)
        (jazz.text)
        (jazz.tree)
        (jazz.ui)
        (world)
        (world.actor)
        (world.autoload)
        (world.interface.frame)
        (world.interface.inventory)
        (world.interface.text)
        (world.interface.tooltip)
        (world.player)
        (world.settings)
        (world.syntax (phase syntax)))


(class Who-Pane extends World-Frame
  
  
  (form
    (<install>                                      size: {Dimension 420 639} layout-type: border
      (<caption~>                                   title: "Who")
      (<content~>                                   layout-type: fill
        (<Scroller-View>                            style: document hscroll?: #t vscroll?: #t
          (<content~>                               layout-type: fill
            (<Tree-Header>                          style: document shown?: #f
              (<content~>
                (<Tree-View>          name: players portfolio: :images filled-column: player background: #f double-click-handler: {Event-Handler :form on-double-click} return-press-handler: {Event-Handler :form on-return-press} escape-press-handler: {Event-Handler :form on-escape-press}
                  (<Tree-Node-Column> name: player  title: "Player" width: 235 toplevel-controls?: #f display-images?: #f display-levels?: #f)))))))))
  
  
  (method override (conclude initargs)
    (nextmethod initargs)
    (view-players))
  
  
  (method override (focus-default)
    )
  
  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method (get-tree)
    (locate 'players))
  
  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method (on-double-click evt)
    (teleport-selected))
  
  
  (method override (on-return-press evt)
    (teleport-selected))
  
  
  (method override (on-escape-press evt)
    (close))
  
  
  (method (teleport-selected)
    (when (or (programmer?) (admin?))
      (let ((zone (current-zone)))
        (let ((player (get-single-selected-data~ (get-tree))))
          (when player
            (close)
            (teleport~ zone (get-position~ player) (get-sight~ player)))))))
  
  
  ;;;
  ;;;; Update
  ;;;
  
  
  (method (view-players)
    (let ((zone (current-zone))
          (me (current-me)))
      (let ((players (get-players~ zone))
            (tree (get-tree)))
        (remove-every-row~ tree)
        (with-update-locked
          (lambda ()
            (for-each (lambda (player)
                        (unless (eq? player me)
                          (let ((title (get-name~ player)))
                            (add-row~ tree
                              children: (list (new Tree-Node title: title font: {Font Label-User} color: {Color World-Ochre}))
                              user-data: player))))
                      (sort nu<? players key: get-name~)))))))))
