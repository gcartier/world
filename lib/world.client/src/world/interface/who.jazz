;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Who Pane
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2016
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.interface.who jazz


(import (jazz.graphic)
        (jazz.handler)
        (jazz.jml)
        (jazz.text)
        (jazz.tree)
        (jazz.ui)
        (world)
        (world.actor)
        (world.autoload)
        (world.interface.frame)
        (world.interface.inventory)
        (world.interface.text)
        (world.interface.tooltip)
        (world.player)
        (world.settings)
        (world.syntax (phase syntax)))


(class Who-Pane extends World-Frame
  
  
  (form
    (<install>                                            size: {Dimension 420 639} layout-type: border
      (<caption~>                                         title: "Who")
      (<content~>                                         layout-type: fill
        (<Tab-View>                         name: tab     selection-handler: {Event-Handler :form on-selection-change}
          (<Tab-Sheet>                      name: server  title: "Server"
            (<!>                            name: content layout-type: fill
              (<Who-Server>)))
          (<Tab-Sheet>                      name: zone    title: "Zone"
            (<!>                            name: content layout-type: fill
              (<Who-Zone>)))))))
  
  
  (method override (conclude initargs)
    (nextmethod initargs)
    (update-players 'server))
  
  
  (method override (focus-default)
    )
  
  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method override (on-escape-press evt)
    (close))
  
  
  (method (on-selection-change evt)
    (let ((sender (get-sender~ evt)))
      (update-players (get-selection-name~ sender))))
  
  
  ;;;
  ;;;; Update
  ;;;
  
  
  (method (update-players sheet-name)
    (let ((view (first-child~ (get-content~ (locate sheet-name)))))
      (view-players~ view))))


;;;
;;;; Who-View
;;;


(class Who-View extends Scroller-View
  
  
  (form
    (<install>                                 style: document hscroll?: #t vscroll?: #t
      (<content~>                                    layout-type: fill
        (<Tree-Header>                               style: document shown?: #f
          (<content~>
            (<Tree-View>          name: players      portfolio: :images filled-column: player background: #f double-click-handler: {Event-Handler :form on-double-click} return-press-handler: {Event-Handler :form on-return-press} escape-press-handler: {Event-Handler :form on-escape-press}
              (<Tree-Node-Column> name: player       title: "Player" width: 235 toplevel-controls?: #f display-images?: #f display-levels?: #f)))))))
  
  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method (get-tree)
    (locate 'players))
  
  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method (on-double-click evt)
    (travel-to))
  
  
  (method override (on-return-press evt)
    (travel-to))
  
  
  ;;;
  ;;;; Travel
  ;;;
  
  
  (method protected virtual (travel-to)
    )
  
  
  ;;;
  ;;;; Update
  ;;;
  
  
  (method protected virtual (view-players)
    ))


;;;
;;;; Who-Server
;;;


(class Who-Server extends Who-View
  
  
  (method override (travel-to)
    (let ((player (get-single-selected-data~ (get-tree))))
      (when player
        (bind (name zone) player
          (close~ (find-ascendant Who-Pane))
          (change-zone~ (client-tier) zone)))))
  
  
  (method override (view-players)
    (let ((zone (current-zone))
          (me (current-me)))
      (let ((players (connected-players~ (client-tier)))
            (tree (get-tree)))
        (remove-every-row~ tree)
        (with-update-locked
          (lambda ()
            (for-each (lambda (player)
                        (bind (name zone presentation) player
                          (unless (equal? name (get-name~ me))
                            (let ((title (format "{a} @ {a}" name presentation)))
                              (add-row~ tree
                                children: (list (new Tree-Node title: title font: {Font Label-User} color: {Color World-Ochre}))
                                user-data: player)))))
                      (sort nu<? players key: first))))))))


;;;
;;;; Who-Zone
;;;


(class Who-Zone extends Who-View
  
  
  (method override (travel-to)
    (when (or (programmer?) (admin?))
      (let ((zone (current-zone)))
        (let ((player (get-single-selected-data~ (get-tree))))
          (when player
            (close~ (find-ascendant Who-Pane))
            (teleport~ zone (get-position~ player) (get-sight~ player)))))))
  
  
  (method override (view-players)
    (let ((zone (current-zone))
          (me (current-me)))
      (let ((players (get-players~ zone))
            (tree (get-tree)))
        (remove-every-row~ tree)
        (with-update-locked
          (lambda ()
            (for-each (lambda (player)
                        (unless (eq? player me)
                          (let ((title (get-name~ player)))
                            (add-row~ tree
                              children: (list (new Tree-Node title: title font: {Font Label-User} color: {Color World-Ochre}))
                              user-data: player))))
                      (sort nu<? players key: get-name~)))))))))
