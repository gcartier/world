;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; World Interface
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2013
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.interface jazz


(import (jazz.jml)
        (jazz.geometry)
        (jazz.graphic)
        (jazz.graphic.opengl.glew)
        (jazz.library)
        (jazz.literals)
        (jazz.platform)
        (jazz.platform.cairo)
        (jazz.ui)
        (jazz.ui.window)
        (world)
        (world.autoload)
        (world.syntax (phase syntax))
        (world.texture))


(class World-Interface extends Layout-View
  
  
  (form
    (<install> layout-type: justify))
  
  
  (slot texture initialize #f getter generate)
  
  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method override (size-change size)
    (nextmethod size)
    (when texture
      (close~ texture))
    (set! texture (make-cairo-texture (get-width~ size) (get-height~ size))))
  
  
  (method override (cursor-update evt)
    )
  
  
  ;;;
  ;;;; Draw
  ;;;
  
  
  (slot draw-hooks initialize '() getter generate)
  
  
  (method (register-draw-hook proc)
    (set! draw-hooks (cons proc draw-hooks)))
  
  
  (method (unregister-draw-hook proc)
    (set! draw-hooks (remove! proc draw-hooks)))
  
  
  (method (draw-interface)
    (let ((surface (get-surface~ texture))
          (handle (get-handle~ player)))
      (when (offscreen-region-invalid? handle)
        (set-operator~ surface CAIRO_OPERATOR_CLEAR)
        (paint~ surface)
        (set-operator~ surface CAIRO_OPERATOR_OVER)
        (set-clipper~ surface (new Rect 0 0 (get-width) (get-height)))
        (paint-drawing surface '())
        (for-each (lambda (proc)
                    (proc surface))
                  draw-hooks)
        (map-texture~ texture)
        (validate-offscreen handle))
      (let ((width (cast <fl> (get-width)))
            (height (cast <fl> (get-height))))
        (textured-quad~ texture
          (lambda () (glVertex3f 0.0 0.0 0.0))
          (lambda () (glVertex3f width 0.0 0.0))
          (lambda () (glVertex3f width height 0.0))
          (lambda () (glVertex3f 0.0 height 0.0))))))))
