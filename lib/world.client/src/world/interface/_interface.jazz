;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Interface
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.interface jazz


(import (jazz.action)
        (jazz.component)
        (jazz.event)
        (jazz.graphic)
        (jazz.markup)
        (jazz.view)
        (jazz.window)
        (world)
        (world.autoload)
        (world.context)
        (world.interface.sheet)
        (world.settings)
        (world.task)
        (world.texture))


(definition protected message-size
  {Dimension 800 120})

(definition protected status-size
  {Dimension 800 35})

(definition protected compass-size
  {Dimension 170 170})

(definition protected map-size
  {Dimension 1024 512})

(definition protected timeline-size
  (if together?
      {Dimension 790 220}
    {Dimension 690 220}))


;;;
;;;; Layout
;;;


(definition (showcase)
  (let ((world (current-world)))
    (get-showcase world)))


(definition (showcase-top)
  (let ((world (current-world)))
    (let ((showcase (get-showcase world)))
      (and showcase (get-top showcase)))))


(definition (effective-top (blocks? #f))
  (let ((interface (current-interface)))
    (let ((top (showcase-top)))
      (if top
          (- (get-height interface) top (if blocks? -52 0))
        ;; top of second row bars
        (- 58 (case current-role
                ((user creator)
                 26)
                (else
                 0)))))))


(definition public (info-panel-layouter panel)
  (let ((interface (current-interface)))
    (set-size panel (new Dimension 350 (get-height interface)))
    (set-location panel (if together? '(tail head) 'head))))


(definition public (profiler-panel-layouter panel)
  (let ((top (effective-top)))
    (set-size panel {Dimension 690 632})
    (set-location panel (if together? 'center (list 6 (- (- top) (if (showcase-top) 80 7)))))))


(definition public (together-visualizer-panel-layouter panel)
  (let ((interface (current-interface)))
    (let ((width (get-width interface))
          (height (get-height interface)))
      (set-size panel {Dimension 790 150})
      (set-location panel '(center 10)))))


(definition public (together-simulator-panel-layouter panel)
  (let ((interface (current-interface)))
    (let ((width (get-width interface))
          (height (get-height interface)))
      (set-size panel {Dimension 790 150})
      (set-location panel '(center 10)))))


(definition public (together-timeline-panel-layouter panel)
  (let ((interface (current-interface)))
    (let ((width (get-width interface))
          (height (get-height interface))
          (visualizer? (get-visible? (child interface '(replay visualizer)))))
      (set-size panel timeline-size)
      (set-location panel (list 'center (if visualizer? 159 10))))))


(definition public (together-evolution-panel-layouter panel)
  (let ((interface (current-interface)))
    (let ((width (get-width interface))
          (height (get-height interface))
          (visualizer? (get-visible? (child interface '(replay visualizer)))))
      (set-size panel (new Dimension 790 (- height (get-height timeline-size) (if visualizer? 168 19))))
      (set-location panel (list 'center (if visualizer? 378 229))))))


(definition public (timeline-panel-layouter panel)
  (set-size panel timeline-size)
  (set-location panel '(center 10)))


(definition public (evolution-panel-layouter panel)
  (set-size panel {Dimension 790 530})
  (set-location panel '(center 209)))


(definition public (color-panel-layouter panel)
  (set-size panel (new Dimension 430 110))
  (set-location panel '(center 10)))


(definition public (target-panel-layouter panel)
  (let ((top (effective-top)))
    (set-size panel {Dimension 300 178})
    (set-location panel (list -6 (- (- top) (if (showcase-top) 12 7))))))


(definition public (compass-panel-layouter panel)
  (set-size panel {Dimension 170 170})
  (set-location panel '(-5 5)))


(definition public (map-panel-layouter panel)
  (set-size panel {Dimension 1024 512})
  (set-location panel '(center center)))


(definition public (combat-panel-layouter panel)
  (set-size panel {Dimension 160 40})
  (set-location panel '(10 10)))


(definition public (character-panel-layouter panel)
  (let ((top (effective-top)))
    (set-size panel {Dimension 330 190})
    (set-location panel (list 10 (- (- top) 250)))))


(definition public (belt-panel-layouter panel)
  (let ((slot-size 48)
        (top (effective-top)))
    (set-size panel (new Dimension (+ (* slot-size 9) 1) (+ slot-size 1)))
    (set-location panel (list 'center (- (- top) 27)))))


(definition public (bag-panel-layouter panel)
  (let ((slot-size 48)
        (top (effective-top)))
    (set-size panel (new Dimension (+ (* slot-size 9) 1) (+ (* slot-size 3) 1)))
    (set-location panel (list 'center (- (- top) 102)))))


(definition public (chest-panel-layouter panel)
  (let ((slot-size 48)
        (top (effective-top)))
    (set-size panel (new Dimension (+ (* slot-size 9) 1) (+ (* slot-size 3) 1)))
    (set-location panel (list 'center (- (- top) 272)))))


(definition public (crafting-panel-layouter panel)
  (let ((top (effective-top)))
    (set-size panel {Dimension 550 300})
    (set-location panel (list 'center (- (- top) 272)))))


(definition public (chat-panel-layouter panel)
  (unless together?
    (let ((interface (current-interface)))
      (let ((width (get-width interface))
            (height (get-height interface))
            (top (effective-top #t)))
        (set-size panel (new Dimension (fxround (percent 28. width)) (fxround (percent 12. height))))
        (set-location panel (list 10 (- (- top) 27)))))))


(definition public (command-bar-layouter bar)
  (unless together?
    (let ((interface (current-interface)))
      (let ((width (get-width interface))
            (height (get-height interface))
            (top (effective-top #t)))
        (set-size bar (new Dimension (fxround (percent 28. width)) 19))
        (set-location bar (list 10 (- (- top) 7)))))))


(definition public (script-panel-layouter panel)
  (let ((interface (current-interface)))
    (let ((width (get-width interface))
          (height (get-height interface)))
      (if together?
          (begin
            (set-size panel (new Dimension width height))
            (set-location panel (list 0 0)))
        (let ((top (effective-top))
              (border 63)
              (fullscreen? (world-setting 'world.script-fullscreen? #f))
              (horizontal? (world-setting 'world.script-horizontal? #f))
              (vertical? (world-setting 'world.script-vertical? #f)))
          (if fullscreen?
              (begin
                (set-size panel (new Dimension (- width border) (- height border)))
                (set-location panel (list 0 0)))
            (let ((chat (if vertical? 0 (+ (fxround (percent 12. height)) 30))))
              (set-size panel (new Dimension (if horizontal? (- width border 10) (fxround (percent 50. width))) (max 10 (- height 120 chat))))
              (set-location panel (list 10 (- (- top) (if (showcase-top) 80 7) chat))))))))))


(definition public (models-bar-layouter bar)
  (let ((top (showcase-top)))
    (when top
      (set-position bar (new Point 10 (- top (get-height bar) 15))))))


(definition public (blocks-bar-layouter bar)
  (let ((top (showcase-top)))
    (when top
      (set-position bar (new Point 10 (- top (get-height bar) 15))))))


;;;
;;;; Interface
;;;


(class World-Interface extends World-Sheet
  
  
  (form
    (<install> layout-type: justify))
  
  
  (method override (resize-array/buffer self size)
    )
  
  
  (method override (focus-actions self)
    '())
  
  
  ;;;
  ;;;; Draw
  ;;;
  
  
  (slot draw-hooks initialize '() getter generate)
  
  
  (method protected (register-draw-hook self proc)
    (set! draw-hooks (cons proc draw-hooks)))
  
  
  (method protected (unregister-draw-hook self proc)
    (set! draw-hooks (remove! proc draw-hooks)))
  
  
  (method override (draw-player self)
    (let ((surface (get-surface texture))
          (handle (get-handle player)))
      (when (offscreen-region-invalid? handle)
        (set-clipper surface (get-box (get-offscreen-invalid-region handle)))
        (clear surface)
        (for-each (lambda (proc)
                    (proc surface))
                  draw-hooks)
        (paint-drawing self surface '())
        (map-texture texture)
        (validate-offscreen handle)))))


;;;
;;;; Script
;;;


(definition public (with-interface thunk)
  (delay-event
    (lambda ()
      (with-task-mutex
        (lambda ()
          (thunk))))))


;;;
;;;; Focus
;;;


(definition public (world-focused?)
  (world-focus? (active-focus)))


(definition public (world-focus? focus)
  (or ;; jazz resets the focus when a view
      ;; containing the active focus is closed
      (not focus)
      (let ((interface (current-interface+)))
        (and interface
             (eq? focus interface)))))


(definition public (focus-world)
  (let ((interface (current-interface+)))
    (when interface
      (acquire-focus interface))))


(definition public (refocus-world)
  (let ((interface (current-interface+)))
    (if (not interface)
        #f
      (acquire-focus interface)
      interface)))


;;;
;;;; Invalidate
;;;


(definition public (invalidate-interface)
  (let ((interface (current-interface+)))
    (when interface
      (invalidate-view interface))))


;;;
;;;; Shortcut
;;;


(definition public (shortcut-present shortcut)
  (let ((modifiers (sort < (get-modifiers shortcut) key: (lambda (modifier)
                                                           (case modifier
                                                             ((:control) 0)
                                                             ((:alt) 1)
                                                             ((:meta) 2)
                                                             ((:shift) 3)))))
        (key (get-key shortcut)))
    (format "{?:{l} ~}{a}" (not-null? modifiers) (map (lambda (modifier)
                                                        (case modifier
                                                          ((:control) 'control)
                                                          ((:alt) 'alt)
                                                          ((:meta) 'command)
                                                          ((:shift) 'shift)))
                                                      modifiers)
      key)))


(definition public (shortcuts-present shortcut alternate-shortcut)
  (if (not shortcut)
      ""
    (let ((shortcut (shortcut-present shortcut)))
      (if (not alternate-shortcut)
          shortcut
        (format "{a}, {a}" shortcut (shortcut-present alternate-shortcut)))))))
