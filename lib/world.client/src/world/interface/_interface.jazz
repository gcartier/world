;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Interface
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2016
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.interface jazz


(import (jazz.jml)
        (jazz.window)
        (world)
        (world.autoload)
        (world.interface.player)
        (world.settings)
        (world.syntax (phase syntax))
        (world.texture))


;;;
;;;; Layout
;;;


(definition (showcase)
  (let ((world (current-world)))
    (get-showcase~ world)))


(definition (showcase-top)
  (let ((world (current-world)))
    (let ((showcase (get-showcase~ world)))
      (and showcase (get-top~ showcase)))))


(definition (effective-top (blocks? #f))
  (let ((interface (current-interface)))
    (let ((top (showcase-top)))
      (if top
          (- (get-height~ interface) top (if blocks? -52 0))
        ;; top of second row bars
        (- 58 (case current-role
                ((user creator)
                 26)
                (else
                 0)))))))


(definition public (info-pane-layouter pane)
  (set-size~ pane {Dimension 350 1200})
  (set-location~ pane 'head))


(definition public (profiler-pane-layouter pane)
  (let ((top (effective-top)))
    (set-size~ pane {Dimension 690 555})
    (set-location~ pane (list 6 (- (- top) (if (showcase-top) 80 7))))))


(definition public (chronology-pane-layouter pane)
  (let ((top (effective-top)))
    (set-size~ pane {Dimension 600 105})
    (set-location~ pane '(center 110))))


(definition public (color-pane-layouter pane)
  (set-size~ pane (new Dimension 430 110))
  (set-location~ pane '(center 10)))


(definition public (target-pane-layouter pane)
  (let ((top (effective-top)))
    (set-size~ pane {Dimension 300 178})
    (set-location~ pane (list -6 (- (- top) (if (showcase-top) 12 7))))))


(definition public (compass-pane-layouter pane)
  (set-size~ pane {Dimension 170 170})
  (set-location~ pane '(-5 5)))


(definition public (map-pane-layouter pane)
  (set-size~ pane {Dimension 1024 512})
  (set-location~ pane '(center center)))


(definition public (combat-pane-layouter pane)
  (set-size~ pane {Dimension 160 40})
  (set-location~ pane '(10 10)))


(definition public (character-pane-layouter pane)
  (let ((top (effective-top)))
    (set-size~ pane {Dimension 330 190})
    (set-location~ pane (list 10 (- (- top) 250)))))


(definition public (belt-pane-layouter pane)
  (let ((slot-size 48)
        (top (effective-top)))
    (set-size~ pane (new Dimension (+ (* slot-size 9) 1) (+ slot-size 1)))
    (set-location~ pane (list 'center (- (- top) 27)))))


(definition public (bag-pane-layouter pane)
  (let ((slot-size 48)
        (top (effective-top)))
    (set-size~ pane (new Dimension (+ (* slot-size 9) 1) (+ (* slot-size 3) 1)))
    (set-location~ pane (list 'center (- (- top) 102)))))


(definition public (chest-pane-layouter pane)
  (let ((slot-size 48)
        (top (effective-top)))
    (set-size~ pane (new Dimension (+ (* slot-size 9) 1) (+ (* slot-size 3) 1)))
    (set-location~ pane (list 'center (- (- top) 272)))))


(definition public (crafting-pane-layouter pane)
  (let ((top (effective-top)))
    (set-size~ pane {Dimension 550 300})
    (set-location~ pane (list 'center (- (- top) 272)))))


(definition public (chat-pane-layouter pane)
  (let ((interface (current-interface)))
    (let ((width (get-width~ interface))
          (height (get-height~ interface))
          (top (effective-top #t)))
      (set-size~ pane (new Dimension (fxround (percent 28. width)) (fxround (percent 12. height))))
      (set-location~ pane (list 10 (- (- top) 27))))))


(definition public (command-bar-layouter bar)
  (let ((interface (current-interface)))
    (let ((width (get-width~ interface))
          (height (get-height~ interface))
          (top (effective-top #t)))
      (set-size~ bar (new Dimension (fxround (percent 28. width)) 19))
      (set-location~ bar (list 10 (- (- top) 7))))))


(definition public (script-pane-layouter pane)
  (let ((interface (current-interface)))
    (let ((width (get-width~ interface))
          (height (get-height~ interface))
          (top (effective-top))
          (border 63))
      (let ((fullscreen? (world-setting 'world.script-fullscreen? #f))
            (horizontal? (world-setting 'world.script-horizontal? #f))
            (vertical? (world-setting 'world.script-vertical? #f)))
        (if fullscreen?
            (begin
              (set-size~ pane (new Dimension (- width border) (- height border)))
              (set-location~ pane (list 0 0)))
          (let ((chat (if vertical? 0 (+ (fxround (percent 12. height)) 30))))
            (set-size~ pane (new Dimension (if horizontal? (- width border 10) (fxround (percent 37. width))) (max 10 (- height 120 chat))))
            (set-location~ pane (list 10 (- (- top) (if (showcase-top) 80 7) chat)))))))))


(definition public (models-bar-layouter bar)
  (let ((top (showcase-top)))
    (when top
      (set-position~ bar (new Point 10 (- top (get-height~ bar) 15))))))


(definition public (blocks-bar-layouter bar)
  (let ((top (showcase-top)))
    (when top
      (set-position~ bar (new Point 10 (- top (get-height~ bar) 15))))))


;;;
;;;; Interface
;;;


(class World-Interface extends World-Player
  
  
  (form
    (<install> layout-type: justify))
  
  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method override (size-change size)
    (nextmethod size)
    (when texture
      (close~ texture))
    (set! texture (make-cairo-texture (get-width~ size) (get-height~ size))))
  
  
  ;;;
  ;;;; Draw
  ;;;
  
  
  (slot draw-hooks initialize '() getter generate)
  
  
  (method (register-draw-hook proc)
    (set! draw-hooks (cons proc draw-hooks)))
  
  
  (method (unregister-draw-hook proc)
    (set! draw-hooks (remove! proc draw-hooks)))
  
  
  (method override (draw-player)
    (let ((surface (get-surface~ texture))
          (handle (get-handle~ player)))
      (when (offscreen-region-invalid? handle)
        (set-clipper~ surface (get-box~ (get-offscreen-invalid-region handle)))
        (clear~ surface)
        (paint-drawing surface '())
        (for-each (lambda (proc)
                    (proc surface))
                  draw-hooks)
        (map-texture~ texture)
        (validate-offscreen handle)))))


;;;
;;;; Shortcut
;;;


(definition public (present-shortcut shortcut)
  (let ((modifiers (get-modifiers~ shortcut))
        (key (get-key~ shortcut)))
    (format "{?:{l} ~}{a}" (not-null? modifiers) (map enumerator->symbol modifiers) key)))


(definition public (present-shortcuts shortcut alternate-shortcut)
  (if (not shortcut)
      ""
    (let ((shortcut (present-shortcut shortcut)))
      (if (not alternate-shortcut)
          shortcut
        (format "{a}, {a}" shortcut (present-shortcut alternate-shortcut)))))))
