;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Interface
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.interface jazz


(import (jazz.jml)
        (jazz.window)
        (world)
        (world.autoload)
        (world.interface.player)
        (world.syntax (phase syntax))
        (world.texture))


;;;
;;;; Properties
;;;


(definition (showcase?)
  (let ((world (current-world)))
    (get-showcase~ world)))


(definition public (info-pane-layouter pane)
  (set-size~ pane {Dimension 350 1200})
  (set-location~ pane 'head))


(definition public (profiler-pane-layouter pane)
  (set-size~ pane {Dimension 690 480})
  (set-location~ pane (if (showcase?) '(head -285) '(head -69))))


(definition public (target-pane-layouter pane)
  (set-size~ pane {Dimension 300 178})
  (set-location~ pane (if (showcase?) '(tail -210) '(tail -69))))


(definition public (script-pane-layouter pane)
  (set-size~ pane {Dimension 800 500})
  (set-location~ pane (if (showcase?) '(6 -285) '(6 -65))))


(definition public (combat-pane-layouter pane)
  (set-size~ pane {Dimension 200 16})
  (set-location~ pane '(10 10)))


(definition public (character-pane-layouter pane)
  (set-size~ pane {Dimension 330 190})
  (set-location~ pane (if (showcase?) '(10 -300) '(10 -200))))


(definition public (belt-pane-layouter pane)
  (let ((slot-size 48))
    (set-size~ pane (new Dimension (+ (* slot-size 9) 1) (+ slot-size 1)))
    (set-location~ pane (if (showcase?) '(center -230) '(center -85)))))


(definition public (bag-pane-layouter pane)
  (let ((slot-size 48))
    (set-size~ pane (new Dimension (+ (* slot-size 9) 1) (+ (* slot-size 3) 1)))
    (set-location~ pane (if (showcase?) '(center -295) '(center -160)))))


(definition public (chest-pane-layouter pane)
  (let ((slot-size 48))
    (set-size~ pane (new Dimension (+ (* slot-size 9) 1) (+ (* slot-size 3) 1)))
    (set-location~ pane (if (showcase?) '(center -455) '(center -330)))))


;;;
;;;; Interface
;;;


(class World-Interface extends World-Player
  
  
  (form
    (<install> layout-type: justify))
  
  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method override (size-change size)
    (nextmethod size)
    (when texture
      (close~ texture))
    (set! texture (make-cairo-texture (get-width~ size) (get-height~ size))))
  
  
  ;;;
  ;;;; Draw
  ;;;
  
  
  (slot draw-hooks initialize '() getter generate)
  
  
  (method (register-draw-hook proc)
    (set! draw-hooks (cons proc draw-hooks)))
  
  
  (method (unregister-draw-hook proc)
    (set! draw-hooks (remove! proc draw-hooks)))
  
  
  (method override (draw-player)
    (let ((surface (get-surface~ texture))
          (handle (get-handle~ player)))
      (when (offscreen-region-invalid? handle)
        (set-clipper~ surface (get-box~ (get-offscreen-invalid-region handle)))
        (clear~ surface)
        (paint-drawing surface '())
        (for-each (lambda (proc)
                    (proc surface))
                  draw-hooks)
        (map-texture~ texture)
        (validate-offscreen handle)))))


;;;
;;;; Shortcut
;;;


(definition public (present-shortcut shortcut)
  (let ((modifiers (get-modifiers~ shortcut))
        (key (get-key~ shortcut)))
    (format "{?:{l} ~}{a}" (not-null? modifiers) (map enumerator->symbol modifiers) key)))


(definition public (present-shortcuts shortcut alternate-shortcut)
  (if (not shortcut)
      ""
    (let ((shortcut (present-shortcut shortcut)))
      (if (not alternate-shortcut)
          shortcut
        (format "{a}, {a}" shortcut (present-shortcut alternate-shortcut)))))))
