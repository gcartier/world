;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World History
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2016
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.interface.history jazz


(import (jazz.cairo)
        (jazz.component)
        (jazz.debuggee)
        (jazz.graphic)
        (jazz.markup)
        (jazz.view)
        (world)
        (world.autoload)
        (world.change)
        (world.context)
        (world.geometry)
        (world.geometry.syntax (phase syntax))
        (world.history)
        (world.interface.bars)
        (world.interface.tooltip)
        (world.parts)
        (world.syntax (phase syntax)))


;;;
;;;; Update
;;;


(set-update-at-logic
  (lambda ()
    (let ((title (if at-logic (->string at-logic) "")))
      (set-title (child (find-bar 'history) 'at-logic) title))))


;;;
;;;; Slider
;;;


(class History-Slider extends View
  
  
  (form
    (<install> tooltip?: #t tooltip-in?: #t))
  
  
  (slot sliding? initialize #f)
  
  
  (method (call-with-slider-info self proc)
    (let ((world (current-world))
          (history (current-history)))
      (let ((offset 7))
        (let ((width (- (get-width self) offset offset)))
          (proc offset width
            (let ((end (history-end history)))
              (and (> end 0)
                   (fxround (* (/ (cast <fl> (get-now history)) end) (cast <fl> (- width 2)))))))))))
  
  
  (method (inside-slider-thumb? self h v)
    (call-with-slider-info self
      (lambda (offset width thumb)
        (and thumb
             (<= (distance thumb h) 7)))))
  
  
  ;;;
  ;;;; Draw
  ;;;
  
  
  (method override (draw self surface context)
    (let ((world (current-world)))
      (call-with-slider-info self
        (lambda (offset width thumb)
          (define (circle at size color)
            (let ((top 12))
              (ellipse surface (new Rect (+ at thumb) (+ top at) (+ at thumb size) (+ top at size)) color #f)))
          
          (let ((antialias (get-antialias surface)))
            (set-antialias surface CAIRO_ANTIALIAS_NONE)
            (frame-rect surface (new Rect offset 19 (+ offset width) 21) {Color Gray})
            (when thumb
              (circle 2 12 {Color Light-Blue alpha: .5})
              (circle 1 14 {Color Light-Blue})
              (circle 0 16 {Color Light-Blue alpha: .5}))
            (set-antialias surface antialias))))))
  
  
  ;;;
  ;;;; Mouse
  ;;;
  
  
  (method override (mouse-down self evt)
    (let ((world (current-world))
          (history (current-history)))
      (let ((h (get-h evt))
            (v (get-v evt)))
        (set! sliding? #t)
        (unless (inside-slider-thumb? self h v)
          (slide-history history (h->where self h))))))
  
  
  (method override (drag-move self evt)
    (let ((world (current-world))
          (history (current-history)))
      (when sliding?
        (slide-history history (h->where self (get-h evt))))))
  
  
  (method override (mouse-up self evt)
    (when sliding?
      (set! sliding? #f)))
  
  
  (method (h->where self h)
    (let ((world (current-world)))
      (call-with-slider-info self
        (lambda (offset width thumb)
          (let ((where (/ (cast <fl> (- h offset)) (cast <fl> width))))
            (max 0. (min 1. where)))))))
  
  
  ;;;
  ;;;; Tooltip
  ;;;
  
  
  (method override (get-tooltip-context self pos)
    (define (present-text)
      (let ((tier (current-tier))
            (history (current-history)))
        (let ((now (get-now history)))
          (if (= now (history-end history))
              `(<span>
                 (<paragraph> (<text> color: World-Yellow "History End"))
                 (<paragraph>)
                 (<bulleted> ,(format "count: {a}" (get-count history))))
            (let ((time (historical-time history now))
                  (sent (historical-sent history now))
                  (received (historical-received history now))
                  (client-id (historical-client-id history now))
                  (change-id (historical-change-id history now))
                  (offset (historical-forward-index history now))
                  (changes (get-changes history))
                  (boot kernel-boot))
              (let ((change (id->change change-id)))
                (let ((change-name (get-name change)))
                  (define (pop)
                    (prog1 (f64vector-ref changes offset)
                      (increase! offset)))
                  
                  (define (present-entity entity)
                    `(,(format "{a} #{a}" (category-name (class-of entity)) (literal->id (get-id entity)))))
                  
                  `(<span>
                     (<paragraph>
                       (<text> color: World-Yellow ,(format "{a}" (cond ((standalone?)
                                                                         "Standalone")
                                                                        ((server?)
                                                                         (if (= client-id client-no)
                                                                             "Server"
                                                                           (get-name (find-delegate-by-no tier client-id))))
                                                                        ((client?)
                                                                         (if (= client-id client-no)
                                                                             (get-character-name tier)
                                                                           (connected-player tier client-id)))))))
                     (<paragraph> ,(let ((time (- time boot)))
                                     (if (nan? sent)
                                         (format "{r precision: 3}" time)
                                       ;; not 100% correct as this includes the time it
                                       ;; takes the server to process and broacast the change
                                       (let ((network (- received sent)))
                                         (format "{r precision: 3} {r precision: 3}" time network)))))
                     (<paragraph>)
                     (<paragraph>
                       (<text> color: World-Green ,(format "{a}" change-name)))
                     ,@(case change-name
                         ((move)
                          (let* ((entity (pop-entity pop))
                                 (position (pop-vertex& pop))
                                 (velocity (pop-vertex& pop)))
                            `((<bulleted> ,@(present-entity entity))
                              (<bulleted> ,(format "position: {a}" (present-xyz position))))))
                         ((lookat)
                          (let* ((entity (pop-entity pop))
                                 (lookat (pop-lookat& pop)))
                            `((<bulleted> ,@(present-entity entity))
                              (<bulleted> ,(format "sight: {a}" (present-xyz (get-sight lookat)))))))
                         ((animate)
                          (let* ((entity (pop-entity pop))
                                 (animation (pop-literal pop)))
                            `((<bulleted> ,@(present-entity entity))
                              (<bulleted> ,(format "animation: {a}" animation)))))
                         ((add-block)
                          (let* ((position (pop-vertex& pop))
                                 (block-id (pop-integer pop))
                                 (data-id (pop-integer pop)))
                            `((<bulleted> ,(format "block-id: {a}" block-id))
                              (<bulleted> ,(format "data-id: {a}" data-id))
                              (<bulleted> ,(format "position: {a}" (present-block position))))))
                         ((delete-block)
                          (let* ((position (pop-vertex& pop)))
                            `((<bulleted> ,(format "position: {a}" (present-block position))))))
                         ((add-entity)
                          (let* ((class (pop-class pop))
                                 (entity-id (pop-id pop))
                                 (position (pop-vertex& pop))
                                 (model (pop-literal pop)))
                            `((<bulleted> ,(format "id: {a}" (literal->id entity-id)))
                              (<bulleted> ,(format "class: {a}" (category-name class)))
                              (<bulleted> ,(format "position: {a}" (present-xyz position))))))
                         ((remove-entity)
                          (let* ((entity (pop-entity pop)))
                            `((<bulleted> ,@(present-entity entity)))))
                         ((action)
                          (let* ((position (pop-vertex& pop)))
                            `((<bulleted> ,(format "position: {a}" (present-xyz position))))))
                         ((interact)
                          (let* ((entity (pop-entity pop)))
                            `((<bulleted> ,@(present-entity entity)))))
                         ((edit-script)
                          (let* ((entity (pop-entity pop))
                                 (edit? (pop-literal pop)))
                            `((<bulleted> ,(format "entity: {a}" (or entity '<not-found>)))
                              (<bulleted> ,(format "edit?: {a}" edit?)))))
                         ((update-script)
                          (let* ((entity (pop-entity pop))
                                 (range (pop-literal pop))
                                 (strings (pop-literal pop)))
                            `((<bulleted> ,@(present-entity entity))
                              (<bulleted> ,(format "range: {a} {a}" (get-start range) (get-end range)))
                              (<bulleted> ,(format "strings: {l}" strings)))))
                         ((fire)
                          (let* ((entity-id (pop-id pop))
                                 (position (pop-vertex& pop))
                                 (dir (pop-vertex& pop))
                                 (kind (pop-literal pop))
                                 (actor-id (pop-id pop)))
                            `((<bulleted> ,(format "id: {a}" (literal->id entity-id)))
                              (<bulleted> ,(format "actor-id: {a}" (literal->id actor-id)))
                              (<bulleted> ,(format "kind: {a}" kind))
                              (<bulleted> ,(format "position: {a}" (present-xyz position))))))
                         ((spawn)
                          (let* ((class (pop-class pop))
                                 (entity-id (pop-id pop))
                                 (position (pop-vertex& pop))
                                 (lookat (pop-lookat& pop)))
                            `((<bulleted> ,(format "id: {a}" (literal->id entity-id)))
                              (<bulleted> ,(format "class: {a}" (category-name class)))
                              (<bulleted> ,(format "position: {a}" (present-xyz position))))))
                         ((die)
                          (let* ((actor (pop-entity pop)))
                            `((<bulleted> ,@(present-entity actor)))))
                         (else
                          '()))))))))))
    
    (let ((text (present-text))
          (bounds (get-tooltip-bounds self pos)))
      (tooltip-context self text bounds position-hack: {Point -1 -1})))))
