;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World History
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.interface.history jazz


(import (jazz.cairo)
        (jazz.debuggee)
        (jazz.event)
        (jazz.graphic)
        (jazz.view)
        (world)
        (world.autoload)
        (world.history)
        (world.interface.bars)
        (world.syntax (phase syntax)))


;;;
;;;; Update
;;;


(set-update-at-logic
  (lambda ()
    (let ((title (if at-logic (->string at-logic) "")))
      (set-title~ (child~ (find-bar 'history) 'at-logic) title))))


;;;
;;;; Slider
;;;


(class History-Slider extends View
  
  
  (slot sliding? initialize #f)
  
  
  (method (call-with-slider-info proc)
    (let ((world (current-world)))
      (let ((offset 7))
        (let ((width (- (get-width) offset offset))
              (history (get-history~ world)))
          (proc offset width
            (let ((end (history-end~ history)))
              (when (> end 0)
                (fxround (* (/ (cast <fl> (get-now~ history)) end) (cast <fl> (- width 2)))))))))))
  
  
  (method (inside-slider-thumb? h v)
    (call-with-slider-info
      (lambda (offset width thumb)
        (and thumb
             (<= (distance thumb h) 7)))))
  
  
  ;;;
  ;;;; Draw
  ;;;
  
  
  (method override (draw surface context)
    (let ((world (current-world)))
      (call-with-slider-info
        (lambda (offset width thumb)
          (define (circle at size color)
            (let ((top 12))
              (ellipse~ surface (new Rect (+ at thumb) (+ top at) (+ at thumb size) (+ top at size)) color #f)))
          
          (let ((antialias (get-antialias~ surface)))
            (set-antialias~ surface CAIRO_ANTIALIAS_NONE)
            (frame-rect~ surface (new Rect offset 19 (+ offset width) 21) {Color Gray})
            (when thumb
              (circle 2 12 {Color Light-Blue alpha: .5})
              (circle 1 14 {Color Light-Blue})
              (circle 0 16 {Color Light-Blue alpha: .5}))
            (set-antialias~ surface antialias))))))
  
  
  ;;;
  ;;;; Mouse
  ;;;
  
  
  (method override (mouse-down evt)
    (let ((world (current-world)))
      (let ((history (get-history~ world))
            (h (get-h~ evt))
            (v (get-v~ evt)))
        (set! sliding? #t)
        (unless (inside-slider-thumb? h v)
          (slide-history~ history (h->where h))))))
  
  
  (method override (drag-move evt)
    (let ((world (current-world)))
      (let ((history (get-history~ world)))
        (when sliding?
          (slide-history~ history (h->where (get-h~ evt)))))))
  
  
  (method override (mouse-up evt)
    (when sliding?
      (set! sliding? #f)))
  
  
  (method (h->where h)
    (let ((world (current-world)))
      (call-with-slider-info
        (lambda (offset width thumb)
          (let ((where (/ (cast <fl> (- h offset)) (cast <fl> width))))
            (max 0. (min 1. where)))))))))
