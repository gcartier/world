;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World History
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.interface.history jazz


(import (jazz.cairo)
        (jazz.component)
        (jazz.debuggee)
        (jazz.graphic)
        (jazz.markup)
        (jazz.view)
        (world)
        (world.change)
        (world.chronology)
        (world.context)
        (world.geometry)
        (world.geometry.syntax (phase syntax))
        (world.history)
        (world.interface.timeline)
        (world.parts))


;;;
;;;; Update
;;;


@convert-to-central-menu
(set-update-at-logic
  (lambda ()
    (let ((title (if at-logic (->string at-logic) "")))
      (set-title (child (find-bar 'history) 'at-logic) title))))


;;;
;;;; Timeline
;;;


(class History-Timeline-Panel extends Timeline-Panel
  
  
  (method override (live-information self)
    (set! history (current-history))
    (set! chronology (current-chronology))
    (set! evolution #f))
  
  
  (method override (copy-information self)
    (set! history (copy-history (current-history)))
    (set! chronology (copy-chronology (current-chronology)))
    (set! evolution #f)
    (set! base-time kernel-boot)
    (reset-start/end self)
    (let ((start (timeline-start self))
          (end (timeline-end self)))
      (set-now self #f)
      (set-bounds self start end)
      (adjust-bounds self)
      (update-span self))
    (redraw self))
  
  
  (method override (plot-chronology self surface <Surface> from <fl> to <fl>)
    (nextmethod self surface from to)
    (let ((interface (current-interface)))
      (let ((profiler (child interface 'profiler)))
        (when (get-visible? profiler)
          (view-sites profiler)))))
  
  
  (method override (adjust-bounds self)
    (let ((effective-from (max from (- to 10.))))
      (set! from effective-from)))
  
  
  (method override (now-update self)
    (let ((history (current-history)))
      (goto-time history now)))))
