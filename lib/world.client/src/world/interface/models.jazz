;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; World Models
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2013
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.interface.models jazz


(import (jazz.geometry)
        (jazz.graphic.opengl.glew)
        (jazz.system)
        (world)
        (world.autoload)
        (world.draw)
        (world.dye)
        (world.dyes)
        (world.enemy)
        (world.entities)
        (world.entity)
        (world.generate)
        (world.geometry)
        (world.interface)
        (world.interface.bars)
        (world.interface.showcase)
        (world.material)
        (world.model)
        (world.models)
        (world.object)
        (world.opengl)
        (world.sphere)
        (world.syntax (phase syntax))
        (world.texture))


(class Models-Showcase extends World-Showcase
  
  
  (method override (activate)
    (nextmethod)
    (when (programmer-role?~ (get-application))
      (set-visible?~ (find-bar 'models) #t)))
  
  
  (method override (deactivate)
    (nextmethod)
    (when (programmer-role?~ (get-application))
      (set-visible?~ (find-bar 'models) #f)))
  
  
  (method override (showcase-margin)
    .25)
  
  
  (method override (showcase-spacing)
    .75)
  
  
  (method override (showcase-z)
    -.3)
  
  
  (method override (showcase-wait?)
    #t)
  
  
  (method override (showcase-elements showing)
    (define (entity-class path)
      (cond ((equal? path '("creature" "cow")) Cow)
            ((equal? path '("creature" "camel")) Camel)
            (else Entity)))
    
    (define (setup-mob mob)
      (set-tick?~ mob #f))
    
    (define (rotate entity)
      (rotate~ entity PI/2)
      entity)
    
    (define (vertical model scaling)
      (* (case (get-anchor~ model)
           ((center)
            (vertex-y (cuboid-radiuses (get-bounds~ model))))
           ((origin)
            0.))
         scaling))
    
    (let ((world (current-world)))
      (let ((camera (cache-camera))
            (spacing (showcase-spacing))
            (models (collect-if get-id~ (map registered-model (table-keys (registered-models)))))
            (paths (collect-models~ world)))
        (let ((x (showcase-x))
              (y (showcase-y))
              (z 0.))
          (append (map (lambda (model)
                         (let ((class (or (get-entity-class~ model) Entity))
                               (scaling .25))
                           (let ((entity (new class position: (vertex x (+ y (vertical model scaling)) z) scale: (vertex scaling scaling scaling))))
                             (set-camera~ entity camera)
                             (set-model~ entity model)
                             (increase! z spacing)
                             entity)))
                       (sort < models key: get-id~))
                  (map (lambda (path)
                         (let ((class (entity-class path))
                               (scaling 1.))
                           (let ((entity (rotate (new class path: path position: (vertex x y z) scale: (vertex scaling scaling scaling) animate?: #t))))
                             (set-camera~ entity camera)
                             (set-model-update~ entity
                               (lambda (entity model)
                                 (let ((bounds (get-bounds~ model)))
                                   (let ((width (cuboid-width bounds))
                                         (height (cuboid-height bounds)))
                                     ;; ignore depth
                                     (let ((max (max width height)))
                                       (let ((scaling (if (> max 1.) (/ 1. max) 1.)))
                                         (set-scaling~ entity scaling)))))))
                             (when (eq? class MOB)
                               (setup-mob entity))
                             (increase! z spacing)
                             entity)))
                       paths))))))
  
  
  (method override (draw-selection)
    (when selection
      (draw-target-circle~ selection)))
  
  
  (method override (selection-addable?)
    #t)))
