;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Models
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.interface.models jazz


(import (jazz.geometry)
        (jazz.io)
        (world)
        (world.autoload)
        (world.context)
        (world.creature)
        (world.entity)
        (world.geometry)
        (world.interface.bars)
        (world.interface.showcase)
        (world.model)
        (world.settings))


(class Models-Showcase extends World-Showcase
  
  
  (method override (activate self)
    (nextmethod self)
    @YOWNU
    (when (developer?)
      (set-visible? (find-bar 'models) #t)))
  
  
  (method override (deactivate self)
    (nextmethod self)
    @YOWNU
    (when (developer?)
      (set-visible? (find-bar 'models) #f)))
  
  
  (method override (showcase-vertical self)
    15)
  
  
  (method override (showcase-top self)
    1.)
  
  
  (method override (showcase-bottom self)
    .15)
  
  
  (method override (showcase-left self)
    0.)
  
  
  (method override (showcase-right self)
    .25)
  
  
  (method override (showcase-radius self)
    .5)
  
  
  (method override (showcase-spacing self)
    .75)
  
  
  (method override (showcase-wait? self)
    #t)
  
  
  (method override (showcase-elements self showing)
    (define (rotate-90 entity)
      (rotate entity PI/2)
      entity)
    
    (let ((world (current-world)))
      (let ((camera (cache-camera self))
            (spacing (showcase-spacing self))
            (models (registered-non-block-models))
            (assets (collect-models world)))
        (let ((x 0.)
              (y 0.)
              (z 0.))
          (append (map (lambda (model)
                         (let ((class (or (get-entity-class model) Entity))
                               (scaling .25))
                           (let ((scale (vertex scaling scaling scaling)))
                             (let ((entity (rotate-90 (new class parent: self position: (anchor->position model (vertex x y z) scale) scale: scale))))
                               (set-camera entity camera)
                               (set-model entity model)
                               (increase! z spacing)
                               entity))))
                       (sort < models key: get-id))
                  (map (lambda (asset)
                         (let ((class Entity)
                               (scaling 1.)
                               (path (get-path asset)))
                           (let ((scale (vertex scaling scaling scaling)))
                             (let ((entity (rotate-90 (new class parent: self model: path position: (vertex x y z) scale: scale))))
                               (set-camera entity camera)
                               (set-model-update entity
                                 (lambda (entity model)
                                   (let ((bounds (get-bounds model)))
                                     (let ((width (cuboid-width bounds))
                                           (height (cuboid-height bounds)))
                                       ;; ignore depth
                                       (let ((max (max width height)))
                                         (let ((scaling (if (> max 1.) (/ 1. max) 1.)))
                                           (set-scaling entity scaling)))))))
                               (when (is? entity Creature)
                                 (set-tick? entity #f))
                               (increase! z spacing)
                               entity))))
                       (sort di<? assets key: (lambda (asset)
                                                (let ((where (get-where (get-assets asset)))
                                                      (spine (get-spine asset)))
                                                  (let ((top (car spine)))
                                                    (let ((rank (cond ((eq? where 'user) 0)
                                                                      ((eq? where 'tier) 0)
                                                                      ((filename=? top "tree") 1)
                                                                      ((filename=? top "character") 2)
                                                                      ((filename=? top "creature") 3)
                                                                      ((filename=? top "base") 4)
                                                                      ((filename=? top "world") 5)
                                                                      ((filename=? top "test") 6)
                                                                      (else 9))))
                                                      (cons rank spine))))))))))))
  
  
  (method override (showcase-selection self showing elements)
    (or selection (first elements)))
  
  
  (method override (draw-selection self)
    (when selection
      (draw-target-circle selection)))
  
  
  (method override (selection-addable? self)
    #t)))
