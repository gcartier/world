;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; World Models
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2013
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.interface.models jazz


(import (jazz.geometry)
        (jazz.graphic.opengl.glew)
        (world)
        (world.autoload)
        (world.draw)
        (world.dye)
        (world.dyes)
        (world.entity)
        (world.generate)
        (world.geometry)
        (world.interface)
        (world.interface.showcase)
        (world.material)
        (world.object)
        (world.opengl)
        (world.syntax (phase syntax))
        (world.texture))


(class Models-Showcase extends Showcase
  
  
  (slot models        initialize #f getter generate)
  (slot current-model initialize 0  getter generate)
  (slot camera-z      initialize 0. getter generate)
  
  
  (method (showcased-models)
    (or models
        (let ((world (current-world)))
          (let ((paths (collect-models~ world)))
            (let ((scale .25)
                  (y -3.2)
                  (z 5.))
              (let ((entities
                      (map (lambda (path)
                             (let ((entity (new Entity path: path position: (vertex 0. y z) scale: (vertex scale scale scale) animate?: #t)))
                               (decrease! z .5)
                               entity))
                           paths)))
                (set! models (list->vector entities))
                models))))))
  
  
  (method override (showcase-wheel reversed?)
    (if (not reversed?)
        (begin
          (decrease! current-model)
          (decrease! camera-z .5))
      (increase! current-model)
      (increase! camera-z .5)))


  (method override (draw-showcase)
    (glPushMatrix)
    
    ;; Reset and transform the matrix
    (glMatrixMode GL_MODELVIEW)
    (glLoadIdentity)
    (gluLookAt
      10. 0. camera-z
      -1. 0. camera-z
      0. 1. 0.)
    
    ;; Clear depth buffer
    (glClear GL_DEPTH_BUFFER_BIT)
    
    ;; Models
    (let ((entities (showcased-models)))
      (loop (for n from 0 below (vector-length entities))
            (let ((rank (modulo (+ current-model n) (vector-length entities))))
              (let ((entity (vector-ref entities rank)))
                (draw-entity~ entity)))))
    
    ;; Restore matrix
    (glPopMatrix))))
