;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; World Models
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2013
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.interface.models jazz


(import (jazz.geometry)
        (jazz.graphic.opengl.glew)
        (jazz.system)
        (world)
        (world.autoload)
        (world.draw)
        (world.dye)
        (world.dyes)
        (world.enemy)
        (world.entity)
        (world.generate)
        (world.geometry)
        (world.interface)
        (world.interface.bars)
        (world.interface.showcase)
        (world.material)
        (world.object)
        (world.opengl)
        (world.syntax (phase syntax))
        (world.texture))


(class Models-Showcase extends World-Showcase
  
  
  (method override (activate)
    (nextmethod)
    (when (programmer-role?~ (get-application))
      (set-visible?~ (find-bar 'models) #t)))
  
  
  (method override (deactivate)
    (nextmethod)
    (when (programmer-role?~ (get-application))
      (set-visible?~ (find-bar 'models) #f)))
  
  
  (method override (showcase-spacing)
    .75)
  
  
  (method override (showcase-elements showing)
    (define (entity-class path)
      (cond ((equal? path '("creature" "cow")) Cow)
            ((equal? path '("creature" "direwolf")) Direwolf)
            ((equal? path '("creature" "camel")) Direwolf)
            (else Entity)))
    
    (define (rotate entity)
      (let ((lookat (get-lookat~ entity)))
        (standardize-lookat! (get-lookat~ entity))
        (rotate-lookat! lookat PI/2 (get-up~ lookat))
        (update-matrix~ entity))
      entity)
    
    (let ((world (current-world)))
      (let ((spacing (showcase-spacing))
            (names '(sphere wolf spider turtle))
            (paths (collect-models~ world)))
        (let ((scale .25)
              (x (showcase-x))
              (y (showcase-y))
              (z 0.))
          (append (map (lambda (name)
                         (let ((scale .3))
                           (let ((entity (case name
                                           ((sphere)         (new Sphere position: (vertex x (+ y .1) z) scale: (vertex scale scale scale)))
                                           ((wolf)   (rotate (new Wolf   position: (vertex x (+ y .1) z) scale: (vertex .6 .6 .6) radiuses: (vertex .6 .6 .6))))
                                           ((spider) (rotate (new Spider position: (vertex x (+ y .1) z) scale: (vertex .6 .6 .6) radiuses: (vertex .6 .6 .6))))
                                           ((turtle)         (new Turtle position: (vertex x (+ y .1) z) scale: (vertex .1 .1 .1) radiuses: (vertex .1 .1 .1))))))
                             (increase! z spacing)
                             entity)))
                       names)
                  (map (lambda (path)
                         (let ((class Entity @wait (entity-class path)))
                           (let ((scale 1.))
                             (let ((entity (rotate (new class path: path position: (vertex x y z) scale: (vertex scale scale scale) animate?: #t))))
                               (set-model-update~ entity
                                 (lambda (entity model)
                                   (let ((bounds (get-bounds~ model)))
                                     (let ((width (cuboid-width bounds))
                                           (height (cuboid-height bounds)))
                                       ;; ignore depth
                                       (let ((max (max width height)))
                                         (let ((scale (if (> max 1.) (/ 1. max) 1.)))
                                           (set-scale~ entity (vertex scale scale scale))))))))
                               (increase! z spacing)
                               entity))))
                       paths))))))


  (method override (draw-element entity)
    (draw~ entity))
  
  
  (method override (draw-selection)
    (when selection
      (draw-actor-target~ selection)))
  
  
  (method override (selection-addable?)
    #t)))
