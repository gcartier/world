;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Models
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.interface.models jazz


(import (jazz.geometry)
        (jazz.io)
        (jazz.settings)
        (gaea.geometry)
        (world)
        (world.asset)
        (world.autoload)
        (world.context)
        (world.creature)
        (world.entity)
        (world.interface.bars)
        (world.interface.showcase)
        (world.model)
        (world.rune)
        (world.settings))


(definition (warcraft-models?)
  (world-setting 'world.warcraft-models? (scriptable? (current-zone))))

(definition (test-models?)
  (world-setting 'world.test-models? (scriptable? (current-zone))))

(definition (rune-models?)
  (developer?))


(definition protected (retrieve-models)
  (when (not (world-setting 'together.model-assets? #f))
    (let ((world (current-world)))
      (working world
        (lambda ()
          (let ((assets (filter-assets (collect-models world fullpath?: #t) #t)))
            (let ((count (length assets)))
              (for-each (lambda (asset n)
                          (working-progress world "Downloading models" (percentage (+ n 1) count))
                          (retrieve-model-safe world asset))
                        assets
                        (naturals 0 count)))))))
    (set-setting options-settings 'together.model-assets? #t)
    (save-content options-settings)))


(definition (filter-assets assets (fullpath? #f))
  (let ((start (string-length "model/")))
    (collect-if (lambda (asset)
                  (let ((where (get-where (get-assets asset)))
                        (path (string-path asset)))
                    (let ((path (if fullpath? (substring path start (string-length path)) path)))
                      (or (eq? where 'zone)
                          (eq? where 'world)
                          (and (starts-with? path "world/")
                               (not (starts-with? path "world/test/")))
                          (and (warcraft-models?)
                               (starts-with? path "warcraft/"))
                          (and (test-models?)
                               (starts-with? path "world/test/"))
                          (and (rune-models?)
                               (starts-with? path "warcraft/base/runeground"))))))
                assets)))


(class Models-Showcase extends World-Showcase
  
  
  (method override (setup self)
    (nextmethod self)
    (retrieve-models))
  
  
  (method override (activate self)
    (nextmethod self)
    @yownu
    (when (developer?)
      (set-visible? (find-bar 'models) #t)))
  
  
  (method override (deactivate self)
    (nextmethod self)
    @yownu
    (when (developer?)
      (set-visible? (find-bar 'models) #f)))
  
  
  (method override (showcase-showing self)
    (scriptable? (current-zone)))
  
  
  (method override (showcase-vertical self)
    15)
  
  
  (method override (showcase-top self)
    1.)
  
  
  (method override (showcase-bottom self)
    .15)
  
  
  (method override (showcase-left self)
    0.)
  
  
  (method override (showcase-right self)
    .25)
  
  
  (method override (showcase-radius self)
    .5)
  
  
  (method override (showcase-spacing self)
    .75)
  
  
  (method override (showcase-wait? self)
    #t)
  
  
  (method override (showcase-elements self showing)
    (define (rotate-90 entity)
      (rotate entity PI/2)
      entity)
    
    (let ((world (current-world)))
      (let ((camera (cache-camera self))
            (spacing (showcase-spacing self))
            (models (registered-non-block-models))
            (assets (collect-models world)))
        (let ((x 0.)
              (y 0.)
              (z 0.))
          (append (map (lambda (model)
                         (let ((class (or (get-entity-class model) Entity))
                               (scaling .25))
                           (let ((scale (vertex scaling scaling scaling)))
                             (let ((entity (rotate-90 (new class parent: self position: (anchor->position model (vertex x y z) scale) scale: scale))))
                               (set-camera entity camera)
                               (set-model entity model)
                               (increase! z spacing)
                               entity))))
                       (sort < models key: get-id))
                  (map (lambda (asset)
                         (let ((scaling 1.)
                               (path (string-path asset)))
                           (let ((class (if (starts-with? path "warcraft/base/runeground") Rune Entity)))
                             (let ((scale (vertex scaling scaling scaling)))
                               (let ((entity (rotate-90 (new class parent: self model: path position: (vertex x y z) scale: scale))))
                                 (set-camera entity camera)
                                 (set-model-update entity
                                   (lambda (entity model)
                                     (let ((bounds (get-bounds model)))
                                       (let ((width (cuboid-width bounds))
                                             (height (cuboid-height bounds)))
                                         ;; ignore depth
                                         (let ((max (max width height)))
                                           (let ((scaling (if (> max 1.) (/ 1. max) 1.)))
                                             (set-scaling entity scaling)))))))
                                 (when (is? entity Creature)
                                   (set-tick? entity #f))
                                 (increase! z spacing)
                                 entity)))))
                       (sort di<? (filter-assets assets)
                         key: (lambda (asset)
                                (let ((where (get-where (get-assets asset)))
                                      (path (string-path asset)))
                                  (let ((rank (cond ((eq? where 'zone) 0)
                                                    ((eq? where 'world) 0)
                                                    ((starts-with? path "world/tree/") 1)
                                                    ((starts-with? path "warcraft/character/") 2)
                                                    ((starts-with? path "warcraft/creature/") 3)
                                                    ((starts-with? path "warcraft/") 4)
                                                    ((starts-with? path "world/") 5)
                                                    ((starts-with? path "test/") 6)
                                                    (else 9))))
                                    (cons rank path)))))))))))
  
  
  (method override (showcase-selection self showing elements)
    (or selection (first elements)))
  
  
  (method override (draw-selection self)
    (when selection
      (draw-target-circle selection)))
  
  
  (method override (selection-addable? self)
    #t)))
