;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Models
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2016
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.interface.models jazz


(import (jazz.geometry)
        (world)
        (world.autoload)
        (world.creature)
        (world.entity)
        (world.geometry)
        (world.interface.bars)
        (world.interface.showcase)
        (world.model)
        (world.settings)
        (world.syntax (phase syntax)))


(class Models-Showcase extends World-Showcase
  
  
  (method override (activate)
    (nextmethod)
    (when (programmer?)
      (set-visible?~ (find-bar 'models) #t)))
  
  
  (method override (deactivate)
    (nextmethod)
    (when (programmer?)
      (set-visible?~ (find-bar 'models) #f)))
  
  
  (method override (showcase-top)
    1.)
  
  
  (method override (showcase-bottom)
    .15)
  
  
  (method override (showcase-left)
    0.)
  
  
  (method override (showcase-right)
    .25)
  
  
  (method override (showcase-radius)
    .5)
  
  
  (method override (showcase-spacing)
    .75)
  
  
  (method override (showcase-wait?)
    #t)
  
  
  (method override (showcase-elements showing)
    (define (rotate entity)
      (rotate~ entity PI/2)
      entity)
    
    (let ((world (current-world)))
      (let ((camera (cache-camera))
            (spacing (showcase-spacing))
            (models (registered-non-block-models))
            (paths (collect-models~ world)))
        (let ((x 0.)
              (y 0.)
              (z 0.))
          (append (map (lambda (model)
                         (let ((class (or (get-entity-class~ model) Entity))
                               (scaling .25))
                           (let ((scale (vertex scaling scaling scaling)))
                             (let ((entity (rotate (new class parent: self position: (anchor->position~ model (vertex x y z) scale) scale: scale))))
                               (set-camera~ entity camera)
                               (set-model~ entity model)
                               (increase! z spacing)
                               entity))))
                       (sort < models key: get-id~))
                  (map (lambda (path)
                         (let ((class Entity)
                               (scaling 1.))
                           (let ((scale (vertex scaling scaling scaling)))
                             (let ((entity (rotate (new class parent: self model: path position: (vertex x y z) scale: scale))))
                               (set-camera~ entity camera)
                               (set-model-update~ entity
                                 (lambda (entity model)
                                   (let ((bounds (get-bounds~ model)))
                                     (let ((width (cuboid-width bounds))
                                           (height (cuboid-height bounds)))
                                       ;; ignore depth
                                       (let ((max (max width height)))
                                         (let ((scaling (if (> max 1.) (/ 1. max) 1.)))
                                           (set-scaling~ entity scaling)))))))
                               (when (is? entity Creature)
                                 (set-tick?~ entity #f))
                               (increase! z spacing)
                               entity))))
                       (sort di<? paths key: (lambda (path)
                                               (let ((rank (cond ((starts-with? path "tree/") 0)
                                                                 ((starts-with? path "character/") 1)
                                                                 ((starts-with? path "creature/") 2)
                                                                 ((starts-with? path "base/") 3)
                                                                 ((starts-with? path "world/") 4)
                                                                 ((starts-with? path "test/") 5)
                                                                 (else 9))))
                                                 (cons rank path))))))))))
  
  
  (method override (showcase-selection showing elements)
    (or selection (first elements)))
  
  
  (method override (draw-selection)
    (when selection
      (draw-target-circle~ selection)))
  
  
  (method override (selection-addable?)
    #t)))
