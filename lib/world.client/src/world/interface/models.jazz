;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; World Models
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2013
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.interface.models jazz


(import (jazz.geometry)
        (jazz.graphic.opengl.glew)
        (world)
        (world.autoload)
        (world.draw)
        (world.dye)
        (world.dyes)
        (world.entity)
        (world.generate)
        (world.geometry)
        (world.interface)
        (world.interface.bars)
        (world.interface.showcase)
        (world.material)
        (world.object)
        (world.opengl)
        (world.syntax (phase syntax))
        (world.texture))


(class Models-Showcase extends World-Showcase
  
  
  (slot entities initialize #f getter generate)
  
  
  (method override (activate)
    (set-visible?~ (find-bar 'models) #t))
  
  
  (method override (deactivate)
    (set-visible?~ (find-bar 'models) #f))
  
  
  (method override (showcase-spacing)
    .75)
  
  
  (method override (showcase-elements)
    (or entities
        (let ((world (current-world)))
          (let ((spacing (showcase-spacing))
                (paths (collect-models~ world)))
            (let ((scale .25)
                  (y -3.2)
                  (z 5.))
              (let ((all
                      (map (lambda (path)
                             (let ((model (find-model~ world path)))
                               (let ((bounds (get-bounds~ model)))
                                 (let ((width (cuboid-width bounds))
                                       (height (cuboid-height bounds)))
                                   ;; ignore depth
                                   (let ((max (max width height)))
                                     (let ((scale (if (> max 1.) (/ 1. max) 1.)))
                                       (let ((entity (new Entity path: path position: (vertex 0. y z) scale: (vertex scale scale scale) animate?: #t)))
                                         (decrease! z spacing)
                                         entity)))))))
                           paths)))
                (set! entities (list->vector all))
                entities))))))


  (method override (draw-elements)
    (let ((entities (showcase-elements)))
      (loop (for n from 0 below (vector-length entities))
            (let ((rank (modulo n (vector-length entities))))
              (let ((entity (vector-ref entities rank)))
                (draw-entity~ entity))))))
  
  
  (method override (draw-target)
    (when target
      (draw-actor-target~ target)))))
