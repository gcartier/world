;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; World Shaders
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2013
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.interface.shaders jazz


(import (jazz.geometry)
        (jazz.graphic.opengl.glew)
        (world)
        (world.autoload)
        (world.draw)
        (world.dye)
        (world.dyes)
        (world.entity)
        (world.generate)
        (world.geometry)
        (world.interface)
        (world.interface.showcase)
        (world.material)
        (world.object)
        (world.opengl)
        (world.syntax (phase syntax))
        (world.texture))


(definition spacing
  .75)


(class Shaders-Showcase extends Showcase
  
  
  (slot showcased initialize #f)
  (slot camera    initialize 0.)
  
  
  (method (get-showcased)
    (or showcased
        (let ((show (compute-showcased)))
          (set! showcased show)
          showcased)))
  
  
  (method (compute-showcased)
    (let ((world (current-world))
          (path "character/bloodelffemale"))
      (let ((model (find-model~ world path)))
        (define (collect-programs)
          (let ((folio (get-tile-program-folio~ world)))
            (get-list~ folio)))
        
        (let ((scale .25)
              (y -3.2)
              (z 5.))
          (let ((entities
                  (map (lambda (program)
                         (let ((bounds (get-bounds~ model)))
                           (let ((width (cuboid-width bounds))
                                 (height (cuboid-height bounds)))
                             ;; ignore depth
                             (let ((max (max width height)))
                               (let ((scale (if (> max 1.) (/ 1. max) 1.)))
                                 (let ((entity (new Entity path: path position: (vertex 0. y z) scale: (vertex scale scale scale) animate?: #f program: program)))
                                   (decrease! z spacing)
                                   entity))))))
                       (collect-programs))))
            (list->vector entities))))))
  
  
  (method override (showcase-wheel reversed?)
    (if (not reversed?)
        (decrease! camera spacing)
      (increase! camera spacing)))


  (method override (draw-showcase)
    ;; Preserve
    (glPushMatrix)
    (glDisable GL_LIGHTING)
    
    ;; Reset and transform the matrix
    (glMatrixMode GL_MODELVIEW)
    (glLoadIdentity)
    (gluLookAt
      10. 0. camera
      -1. 0. camera
      0. 1. 0.)
    
    ;; Clear depth buffer
    (glClear GL_DEPTH_BUFFER_BIT)
    
    ;; Showcased
    (let ((showcased (get-showcased)))
      (loop (for n from 0 below (vector-length showcased))
            (let ((rank n))
              (let ((entity (vector-ref showcased rank)))
                ;; '(phong wireframe squareframe radial-blur motion-blur water julia sierpinski multitexture kaleidoscope tunnel square-tunnel fly @buggy pulse)
                (set-program~ entity 'wireframe)
                (draw-entity~ entity)))))
    
    ;; Restore
    (glEnable GL_LIGHTING)
    (glPopMatrix))))
