;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; World Shaders
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2013
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.interface.shaders jazz


(import (jazz.geometry)
        (jazz.graphic.opengl.glew)
        (world)
        (world.autoload)
        (world.draw)
        (world.dye)
        (world.dyes)
        (world.entity)
        (world.generate)
        (world.geometry)
        (world.interface)
        (world.interface.showcase)
        (world.material)
        (world.object)
        (world.opengl)
        (world.renderer)
        (world.syntax (phase syntax))
        (world.texture))


(class Shaders-Showcase extends World-Showcase
  
  
  (method override (showcase-showing)
    (let ((world (current-world)))
      (let ((target (first-target~ world)))
        (when (is? target Entity)
          target))))
  
  
  (method override (showcase-margin)
    .25)
  
  
  (method override (showcase-spacing)
    .75)
  
  
  (method override (showcase-elements showing)
    (let ((world (current-world)))
      (if (not showing)
          '()
        (let ((model (get-model~ showing)))
          (let ((path (get-path~ model))
                (bounds (get-bounds~ model)))
            (define (collect-programs)
              (let ((folio (get-block-program-folio~ world)))
                (get-list~ folio)))
            
            (let ((camera (cache-camera))
                  (spacing (showcase-spacing))
                  (width (cuboid-width bounds))
                  (height (cuboid-height bounds))
                  (x (showcase-x))
                  (y (showcase-y))
                  (z 0.))
              (map (lambda (program)
                     ;; ignore depth
                     (let ((max (max width height)))
                       (let ((scaling (if (> max 1.) (/ 1. max) 1.)))
                         (let ((entity (new Entity path: path position: (vertex x y z) scale: (vertex scaling scaling scaling) animate?: #f)))
                           (set-camera~ entity camera)
                           (set-renderer~ entity (and (neq? program 'phong) (find-renderer program)))
                           (let ((lookat (get-lookat~ entity)))
                             (rotate-lookat! lookat PI/2 (get-up~ lookat))
                             (update-matrix~ entity))
                           (increase! z spacing)
                           entity))))
                   (collect-programs))))))))
  
  
  (method override (showcase-selection entity entities)
    (define (determine-selection renderer)
      (find-if (lambda (entity)
                 (eq? renderer (get-renderer~ entity)))
               entities))
    
    (and entity (determine-selection (get-renderer~ entity))))
  
  
  (method override (draw-selection)
    (when selection
      (draw-target-circle~ selection)))
  
  
  (method override (selection-addable?)
    #t)
  
  
  (method override (selection-update selection)
    (let ((world (current-world)))
      (let ((entity (first-target~ world))
            (renderer (get-renderer~ selection)))
        (set-renderer~ entity renderer))))))
