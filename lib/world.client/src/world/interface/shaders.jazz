;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; World Shaders
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2013
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.interface.shaders jazz


(import (jazz.geometry)
        (jazz.graphic.opengl.glew)
        (world)
        (world.autoload)
        (world.block)
        (world.draw)
        (world.dye)
        (world.dyes)
        (world.entity)
        (world.generate)
        (world.geometry)
        (world.interface)
        (world.interface.showcase)
        (world.material)
        (world.model)
        (world.object)
        (world.opengl)
        (world.renderer)
        (world.syntax (phase syntax))
        (world.texture))


(class Shaders-Showcase extends World-Showcase
  
  
  (method override (showcase-showing)
    (let ((world (current-world)))
      (let ((target (first-target~ world)))
        (when (is? target Entity)
          target))))
  
  
  (method override (showcase-margin)
    .25)
  
  
  (method override (showcase-spacing)
    .75)
  
  
  (method override (showcase-elements showing)
    (let ((world (current-world)))
      (let ((model (if (not showing) (registered-model 'Dirty) (cache-model~ showing))))
        (let ((path (if (not showing) 'Dirty (get-model~ showing)))
              (bounds (get-bounds~ model)))
          (let ((camera (cache-camera))
                (spacing (showcase-spacing))
                (width (cuboid-width bounds))
                (height (cuboid-height bounds))
                (x (showcase-x))
                (y (showcase-y))
                (z 0.))
            (map (lambda (program)
                   ;; ignore depth
                   (let ((block? (or (not showing) (is? showing Block)))
                         (max (max width height)))
                     (let ((class (if block? Block Entity))
                           (offset (if block? .25 0.))
                           (scaling (if block? .5 (if (> max 1.) (/ 1. max) 1.))))
                       (let ((entity (new class model: path position: (vertex x (+ y offset) z) scale: (vertex scaling scaling scaling) animate?: #f user-data: program)))
                         (set-camera~ entity camera)
                         (set-renderer~ entity (and (neq? program 'phong) (require-renderer program)))
                         (let ((lookat (get-lookat~ entity)))
                           (rotate-lookat! lookat PI/2 (get-up~ lookat))
                           (update-matrix~ entity))
                         (increase! z spacing)
                         entity))))
                 '(phong wireframe squareframe radial-blur motion-blur water julia sierpinski multitexture kaleidoscope tunnel square-tunnel fly @buggy pulse)))))))
  
  
  (method override (showcase-selection entity entities)
    (define (determine-selection renderer)
      (find-if (lambda (entity)
                 (eq? renderer (get-renderer~ entity)))
               entities))
    
    (and entity (determine-selection (get-renderer~ entity))))
  
  
  (method override (draw-selection)
    (when selection
      (draw-target-circle~ selection)))
  
  
  (method override (selection-addable?)
    #t)
  
  
  (method override (selection-update selection)
    (let ((world (current-world)))
      (let ((entity (first-target~ world)))
        (when entity
          (let ((renderer (get-renderer~ selection)))
            (set-renderer~ entity renderer))))))))
