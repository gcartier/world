;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Shaders
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.interface.shaders jazz


(import (jazz.geometry)
        (world)
        (world.autoload)
        (world.block)
        (world.entity)
        (world.face)
        (world.geometry)
        (world.interface.showcase)
        (world.interface.tiles)
        (world.quad)
        (world.renderers)
        (world.syntax (phase syntax)))


(class Shaders-Showcase extends World-Showcase
  
  
  (method override (showcase-showing)
    (let ((world (current-world))
          (zone (current-zone)))
      (let ((target (first-target~ world))
            (target-face (get-target-face~ world)))
        (if (and (is? target Entity)
                 (is-not? target Block))
            target
          (or target-face zone)))))
  
  
  (method override (showcase-margin)
    .25)
  
  
  (method override (showcase-spacing)
    (if (is? showing Entity)
        .75
      .85))
  
  
  (method override (showcase-elements showing)
    (define (rotate entity)
      (rotate~ entity PI)
      entity)
    
    (let ((world (current-world))
          (zone (current-zone)))
      (if (or (is? showing Zone) (is? showing Face))
          (let ((block-atlas (get-block-atlas~ world))
                (camera (cache-camera))
                (spacing .85)
                (x (showcase-x))
                (y (showcase-y))
                (z 0.))
            (map (lambda (program)
                   (let ((material (find-block-material~ world program)))
                     (let ((uv (image-rect~ (get-atlas~ material) (sample-program-image~ zone program))))
                       (let ((model (make-tile-model material uv))
                             (scaling .7))
                         (let ((entity (rotate (new Entity parent: self position: (vertex x (+ y .35) z) scale: (vertex scaling scaling scaling) user-data: program))))
                           (set-camera~ entity camera)
                           (set-renderer~ entity (require-renderer program))
                           (set-model~ entity model)
                           (increase! z spacing)
                           entity)))))
                 '(opaque transparent wireframe squareframe radial-blur motion-blur water julia sierpinski multitexture kaleidoscope tunnel square-tunnel fly @buggy pulse)))
        (let ((model (cache-model~ showing)))
          (let ((path (get-model~ showing))
                (bounds (get-bounds~ model)))
            (let ((camera (cache-camera))
                  (spacing (showcase-spacing))
                  (width (cuboid-width bounds))
                  (height (cuboid-height bounds))
                  (x (showcase-x))
                  (y (showcase-y))
                  (z 0.))
              (map (lambda (program)
                     ;; ignore depth
                     (let ((block? (is? showing Block))
                           (max (max width height)))
                       (let ((class (if block? Block Entity))
                             (offset (if block? .25 0.))
                             (scaling (if block? .5 (if (> max 1.) (/ 1. max) 1.))))
                         (let ((entity (new class parent: self model: path position: (vertex x (+ y offset) z) scale: (vertex scaling scaling scaling) animate?: #t user-data: program)))
                           (set-camera~ entity camera)
                           (set-shaders~ entity (and (neq? program 'phong) program))
                           (let ((lookat (get-lookat~ entity)))
                             (set-lookat~ entity (rotate-lookat& lookat PI/2 (get-up~ lookat))))
                           (increase! z spacing)
                           entity))))
                   '(phong wireframe squareframe radial-blur motion-blur water julia sierpinski multitexture kaleidoscope tunnel square-tunnel fly @buggy pulse))))))))
  
  
  (method override (showcase-selection entity entities)
    (define (determine-selection shaders)
      (find-if (lambda (entity)
                 (eq? shaders (get-shaders~ entity)))
               entities))
    
    (and (is? entity Entity) (determine-selection (get-shaders~ entity))))
  
  
  (method override (draw-selection)
    (when selection
      (if (is? showing Entity)
          (draw-target-circle~ selection)
        (draw-selection-quad (texture-quad selection)))))
  
  
  (method override (selection-addable?)
    (is? showing Entity))
  
  
  (method override (selection-update selection)
    (let ((world (current-world))
          (zone (current-zone)))
      (let ((shaders (get-shaders~ selection))
            (designer (get-designer~ zone)))
        (for-each (lambda (entity)
                    (when (is? entity Entity)
                      (set-property~ designer entity 'shaders shaders)))
                  (get-target~ world)))))
  
  
  (method (texture-quad entity)
    (let ((pos (get-position~ entity))
          (half .35))
      (let ((v1 (vertex+ pos (vertex 0. (- half) (- half))))
            (v2 (vertex+ pos (vertex 0. half (- half))))
            (v3 (vertex+ pos (vertex 0. half half)))
            (v4 (vertex+ pos (vertex 0. (- half) half))))
        (make-quad entity v1 v2 v3 v4))))))
