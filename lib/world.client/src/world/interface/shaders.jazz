;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Shaders
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.interface.shaders jazz


(import (jazz.geometry)
        (gaea.geometry)
        (world)
        (world.atlas)
        (world.autoload)
        (world.context)
        (world.entity)
        (world.face)
        (world.interface.showcase)
        (world.interface.tiles)
        (world.material)
        (world.quad)
        (world.renderers))


(class Shaders-Showcase extends World-Showcase
  
  
  (method override (showcase-showing self)
    (let ((world (current-world))
          (zone (current-zone)))
      (let ((target (first-target world)))
        (if (is? target Entity)
            target
          zone))))
  
  
  (method override (showcase-front self)
    (if (is? showing Entity)
        (nextmethod self)
      0.))
  
  
  (method override (showcase-back self)
    (if (is? showing Entity)
        (nextmethod self)
      0.))
  
  
  (method override (showcase-top self)
    (if (is? showing Entity)
        1.
      (nextmethod self)))
  
  
  (method override (showcase-bottom self)
    (if (is? showing Entity)
        .15
      (nextmethod self)))
  
  
  (method override (showcase-left self)
    (if (is? showing Entity)
        0.
      (nextmethod self)))
  
  
  (method override (showcase-right self)
    (if (is? showing Entity)
        .25
      (nextmethod self)))
  
  
  (method override (showcase-radius self)
    (if (is? showing Entity)
        .5
      .35))
  
  
  (method override (showcase-spacing self)
    (if (is? showing Entity)
        .75
      .85))
  
  
  (method override (showcase-elements self showing)
    (define (rotate-90 entity)
      (rotate entity PI)
      entity)
    
    (let ((world (current-world))
          (zone (current-zone)))
      (if (or (is? showing Zone) (is? showing Face))
          (let ((camera (cache-camera self))
                (spacing .85)
                (x 0.)
                (y 0.)
                (z 0.))
            (map (lambda (program)
                   (let ((material (find-block-material world program)))
                     (let ((uv (image-rect (get-atlas material) (sample-program-image zone program))))
                       (let ((model (make-tile-model material uv))
                             (scaling .7))
                         (let ((entity (rotate-90 (new Entity parent: self position: (vertex x y z) scale: (vertex scaling scaling scaling) user-data: program))))
                           (set-camera entity camera)
                           (set-renderer entity (require-renderer program))
                           (set-model entity model)
                           (increase! z spacing)
                           entity)))))
                 '(opaque transparent wireframe squareframe radial-blur motion-blur water julia sierpinski multitexture kaleidoscope tunnel square-tunnel fly @buggy pulse)))
        (let ((model (cache-model showing)))
          (let ((path (get-model showing))
                (bounds (get-bounds model)))
            (let ((camera (cache-camera self))
                  (spacing (showcase-spacing self))
                  (width (cuboid-width bounds))
                  (height (cuboid-height bounds))
                  (x 0.)
                  (y 0.)
                  (z 0.))
              (map (lambda (program)
                     ;; ignore depth
                     (let ((max (max width height)))
                       (let ((scaling (if (> max 1.) (/ 1. max) 1.)))
                         (let ((entity (new Entity parent: self model: path position: (vertex x y z) scale: (vertex scaling scaling scaling) user-data: program)))
                           (set-camera entity camera)
                           (set-shaders entity (and (neq? program 'model) program))
                           (let ((lookat (get-lookat entity)))
                             (set-lookat entity (rotate-lookat& lookat PI/2 (get-up lookat))))
                           (increase! z spacing)
                           entity))))
                   '(model wireframe squareframe radial-blur motion-blur water julia sierpinski multitexture kaleidoscope tunnel square-tunnel fly @buggy pulse))))))))
  
  
  (method override (showcase-selection self entity entities)
    (define (determine-selection shaders)
      (find-if (lambda (entity)
                 (eq? shaders (get-shaders entity)))
               entities))
    
    (and (is? entity Entity) (determine-selection (get-shaders entity))))
  
  
  (method override (update-top self new-top)
    (let ((world (current-world)))
      (unless (equal? new-top top)
        (set! top new-top)
        (interface-layout world))))
  
  
  (method override (draw-selection self)
    (when selection
      (if (is? showing Entity)
          (draw-target-circle selection)
        (draw-selection-quad self (texture-quad self selection)))))
  
  
  (method override (selection-addable? self)
    (is? showing Entity))
  
  
  (method override (selection-update self selection)
    (let ((world (current-world))
          (zone (current-zone)))
      (let ((shaders (get-shaders selection)))
        (for-each (lambda (entity)
                    (when (is? entity Entity)
                      (with-designer zone entity
                        (lambda (designer container)
                          (set-property designer entity 'shaders shaders)))))
                  (get-selection world)))))
  
  
  (method (texture-quad self entity)
    (let ((pos (get-position entity))
          (half .35))
      (let ((v1 (vertex+ pos (vertex 0. (- half) (- half))))
            (v2 (vertex+ pos (vertex 0. half (- half))))
            (v3 (vertex+ pos (vertex 0. half half)))
            (v4 (vertex+ pos (vertex 0. (- half) half))))
        (make-quad entity v1 v2 v3 v4))))))
