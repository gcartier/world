;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; World Shaders
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2013
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.interface.shaders jazz


(import (jazz.geometry)
        (jazz.graphic.opengl.glew)
        (world)
        (world.autoload)
        (world.draw)
        (world.dye)
        (world.dyes)
        (world.entity)
        (world.generate)
        (world.geometry)
        (world.interface)
        (world.interface.showcase)
        (world.material)
        (world.object)
        (world.opengl)
        (world.syntax (phase syntax))
        (world.texture))


(class Shaders-Showcase extends World-Showcase
  
  
  (slot entities initialize #f getter generate)
  
  
  (method override (showcase-spacing)
    .75)
  
  
  (method override (showcase-elements)
    (define (compute-entities)
      (let ((world (current-world))
            (path "character/bloodelffemale"))
        (let ((model (find-model~ world path)))
          (define (collect-programs)
            (let ((folio (get-tile-program-folio~ world)))
              (get-list~ folio)))
          
          (let ((spacing (showcase-spacing))
                (scale .25)
                (y -3.2)
                (z 5.))
            (let ((entities
                    (map (lambda (program)
                           (let ((bounds (get-bounds~ model)))
                             (let ((width (cuboid-width bounds))
                                   (height (cuboid-height bounds)))
                               ;; ignore depth
                               (let ((max (max width height)))
                                 (let ((scale (if (> max 1.) (/ 1. max) 1.)))
                                   (let ((entity (new Entity path: path position: (vertex 0. y z) scale: (vertex scale scale scale) animate?: #f program: program)))
                                     (decrease! z spacing)
                                     entity))))))
                         (collect-programs))))
              (list->vector entities))))))
    
    (or entities
        (begin
          (set! entities (compute-entities))
          entities)))


  (method override (draw-elements)
    (let ((entities (showcase-elements)))
      (loop (for n from 0 below (vector-length entities))
            (let ((entity (vector-ref entities n)))
              ;; '(phong wireframe squareframe radial-blur motion-blur water julia sierpinski multitexture kaleidoscope tunnel square-tunnel fly @buggy pulse)
              (set-program~ entity 'wireframe)
              (draw-entity~ entity)))))
  
  
  (method override (draw-selection)
    (when selection
      (draw-actor-target~ selection)))
  
  
  (method override (selection-addable?)
    #t)))
