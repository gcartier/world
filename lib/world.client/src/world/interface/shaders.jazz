;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; World Shaders
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2013
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.interface.shaders jazz


(import (jazz.geometry)
        (jazz.graphic.opengl.glew)
        (world)
        (world.autoload)
        (world.draw)
        (world.dye)
        (world.dyes)
        (world.entity)
        (world.generate)
        (world.geometry)
        (world.interface)
        (world.interface.showcase)
        (world.material)
        (world.object)
        (world.opengl)
        (world.syntax (phase syntax))
        (world.texture))


(class Shaders-Showcase extends World-Showcase
  
  
  (method override (showcase-spacing)
    .75)
  
  
  (method override (showcase-elements showing)
    (let ((world (current-world))
          (path "character/bloodelffemale"))
      (let ((model (find-model~ world path)))
        (define (collect-programs)
          (let ((folio (get-tile-program-folio~ world)))
            (get-list~ folio)))
        
        (let ((spacing (showcase-spacing))
              (scale .25)
              (x (showcase-x))
              (y (showcase-y))
              (z 0.))
          (map (lambda (program)
                 (let ((bounds (get-bounds~ model)))
                   (let ((width (cuboid-width bounds))
                         (height (cuboid-height bounds)))
                     ;; ignore depth
                     (let ((max (max width height)))
                       (let ((scale (if (> max 1.) (/ 1. max) 1.)))
                         (let ((entity (new Entity path: path position: (vertex x y z) scales: (vertex scale scale scale) animate?: #f program: program)))
                           (let ((lookat (get-lookat~ entity)))
                             (rotate-lookat! lookat PI/2 (get-up~ lookat))
                             (update-matrix~ entity))
                           (increase! z spacing)
                           entity))))))
               (collect-programs))))))


  (method override (draw-element entity)
    ;; '(phong wireframe squareframe radial-blur motion-blur water julia sierpinski multitexture kaleidoscope tunnel square-tunnel fly @buggy pulse)
    (set-program~ entity 'wireframe)
    (draw-entity~ entity))
  
  
  (method override (draw-selection)
    (when selection
      (draw-actor-target~ selection)))
  
  
  (method override (selection-addable?)
    #t)))
