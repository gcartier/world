;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Invitations
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.interface.invitations jazz


(import (jazz.action)
        (jazz.application)
        (jazz.event)
        (jazz.graphic)
        (jazz.handler)
        (jazz.markup)
        (jazz.outline)
        (jazz.text)
        (jazz.tree)
        (jazz.ui)
        (jazz.view)
        (world.client.actions)
        (world.client.tier)
        (world.colors)
        (world.context)
        (world.interface)
        (world.interface.frame)
        (world.interface.options)
        (world.interface.panel)
        (world.interface.text)
        (world.settings))


(class World-Invitations extends World-Frame
  
  
  (form
    (<install>                                           layout-type: border background: {Color red: .000 green: .000 blue: .000 alpha: .500}
      (<caption~>                                        title: "Invitations"
        (<Push-Button>                 name: add         title: "+" style: text background: #f position: {Point 4 0} size: {Dimension 22 22} action-handler: {Event-Handler :form on-add-invitation})
        (<Push-Button>                 name: remove      title: "-" style: text background: #f position: {Point 26 0} size: {Dimension 22 22} action-handler: {Event-Handler :form on-remove-invitation}))
      (<content~>                                        layout-type: fill
        (<Scroller-View>                                 style: document hscroll?: #t vscroll?: #t
          (<content~>                                    layout-type: fill
            (<Tree-Header>                               style: document shown?: #f
              (<content~>
                (<Tree-View>           name: invitations portfolio: :images filled-column: status background: #f double-click-handler: {Event-Handler :form on-double-click} return-press-handler: {Event-Handler :form on-return-press}
                  (<Tree-Node-Column>  name: name        title: "Name" width: 200 toplevel-controls?: #f display-images?: #f display-levels?: #f)
                  (<Tree-Label-Column> name: status      title: "Status" width: 200)))))))))
  
  
  (method override (conclude self initargs)
    (nextmethod self initargs)
    (view-invitations self))
  
  
  (method override (user-close self)
    (set-visible? self #f)
    (pop-panel self))
  
  
  (method override (focus-default self)
    (acquire-focus (get-tree self)))
  
  
  (method (on-add-invitation self evt)
    (push-panel (open-frame (new World-Invitation name: 'invitation size: {Dimension 450 200} location: 'center))))
  
  
  (method (on-remove-invitation self evt)
    (view-invitations self))
  
  
  (method (on-double-click self evt)
    (edit-invitation self))
  
  
  (method override (on-return-press self key)
    (edit-invitation self))
  
  
  (method (edit-invitation self)
    )
  
  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method package (get-tree self)
    (locate self 'invitations))
  
  
  ;;;
  ;;;; Update
  ;;;
  
  
  (method package (update-invitations self)
    (let ((tree (get-tree self)))
      (with-preserved-selection tree
        (lambda ()
          (view-invitations self))
        selection-position?: #f)))
  
  
  (method package (view-invitations self)
    (let ((client (current-client)))
      (let ((invitations (invitation-list client))
            (tree (get-tree self)))
        (define (view-list)
          (for-each (lambda (invitation)
                      (bind (invitation-word created identities) invitation
                        (let ((row (add-row tree
                                     state: 'expanded
                                     children: (list (new Tree-Node title: invitation-word font: {Font Label-User} color: {Color red: .547 green: .287 blue: .995})
                                                     (new Tree-Label title: "" font: {Font Label-User} color: {Color White}))
                                     user-data: invitation)))
                          (for-each (lambda (identity)
                                      (bind (name connected status) identity
                                        (define (present-status)
                                          (values "Accepted invitation" {Color red: 0 green: 220 blue: 0})
                                          @w
                                          (if (= 5 (random-integer 30))
                                              (values "Unable to acquire microphone" {Color red: 220 green: 0 blue: 0})
                                            (if (= 5 (random-integer 10))
                                                (values "Connected successfully" {Color red: 0 green: 220 blue: 0})
                                              (values (or status "") {Color White}))))
                        
                                        (receive (status status-color) (present-status)
                                          (add-row tree
                                                   father: row
                                                   children: (list (new Tree-Node title: name font: {Font Label-User} color: {Color White})
                                                                   (new Tree-Label title: status font: {Font Label-User} color: status-color))
                                                   user-data: identity))))
                                    identities))))
                    (sort ci<? invitations key: first)))
        
        (remove-every-row tree)
        (with-update-locked self
          (lambda ()
            (view-list)))))))


;;;
;;;; Invitation
;;;


(class World-Invitation extends World-Frame
  
  
  (form
    (<install>                                     layout-type: border background: {Color red: .000 green: .000 blue: .000 alpha: .500}
      (<caption~>                                  title: "New Invitation")
      (<content~>                                  layout-type: center
        (<View>                    name: container size: {Dimension 310 140}
          (<Option-Label>                          title: "Invitation Word:" position: {Point 0 34} size: {Dimension 100 15})
          (<Border-View>                           position: {Point 100 31} size: {Dimension 200 22} border-type: solid border-color: {Color Dark-Gray}
            (<Scroller-View>                       hscroll?: #f vscroll?: #f
              (<content~>                          layout-type: fill
                (<World-Text-View> name: word      accepts-returns?: #f left-padding: 2 top-padding: 2 background: #f return-press-handler: {Event-Handler :form on-return-press} escape-press-handler: {Event-Handler :host on-cancel}))))
          (<Push-Button>           name: create    title: "Create" position: {Point 53 95} size: {Dimension 110 24} default?: #t action-handler: {Event-Handler :form on-create})
          (<Push-Button>           name: cancel    title: "Cancel" position: {Point 172 95} size: {Dimension 110 24} action-handler: {Event-Handler :form on-cancel})))))
  
  
  (method override (focus-default self)
    (acquire-focus (locate self 'word)))
  
  
  (method (on-create self evt)
    (let ((interface (current-interface))
          (client (current-client)))
      (let ((invitation-word (get-string-content (locate self 'word))))
        (let ((err (invitation-add client invitation-word)))
          (close self)
          (let ((frame (find-component interface 'invitations)))
            (when (and frame (get-visible? frame))
              (update-invitations frame)))))))
  
  
  (method (on-cancel self evt)
    (close self))
  
  
  (method override (on-return-press self evt)
    )))
