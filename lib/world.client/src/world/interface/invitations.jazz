;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Invitations
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.interface.invitations jazz


(import (jazz.action)
        (jazz.application)
        (jazz.clipboard)
        (jazz.event)
        (jazz.graphic)
        (jazz.handler)
        (jazz.markup)
        (jazz.outline)
        (jazz.text)
        (jazz.time)
        (jazz.tree)
        (jazz.ui)
        (jazz.view)
        (world)
        (world.client.actions)
        (world.client.tier)
        (world.colors)
        (world.context)
        (world.interface)
        (world.interface.frame)
        (world.interface.options)
        (world.interface.panel)
        (world.interface.text)
        (world.settings))


(class World-Invitations extends World-Frame
  
  
  (form
    (<install>                                           layout-type: border background: {Color red: .000 green: .000 blue: .000 alpha: .500}
      (<caption~>                                        title: "Invitations"
        (<Push-Button>                 name: add         title: "+" style: text background: #f position: {Point 4 0} size: {Dimension 35 22} action-handler: {Event-Handler :form on-add-invitation})
        (<Push-Button>                 name: remove      title: "-" style: text background: #f position: {Point 30 0} size: {Dimension 60 22} action-handler: {Event-Handler :form on-add-invitation})
        (<Push-Button>                 name: edit        title: "Edit" style: text background: #f position: {Point 100 0} size: {Dimension 40 22} action-handler: {Event-Handler :form on-edit-invitation})
        (<Push-Button>                 name: copy        title: "Copy" style: text background: #f position: {Point 175 0} size: {Dimension 40 22} action-handler: {Event-Handler :form on-copy-invitation})
        (<Push-Button>                 name: verify      title: "Verify" style: text background: #f position: {Point 440 0} size: {Dimension 60 22} action-handler: {Event-Handler :form on-verify-identity}))
      (<content~>                                        layout-type: fill
        (<Scroller-View>                                 style: document hscroll?: #t vscroll?: #t
          (<content~>                                    layout-type: fill
            (<Tree-Header>                               style: document shown?: #f
              (<content~>
                (<Tree-View>           name: invitations portfolio: :images filled-column: status background: #f selection-handler: {Event-Handler :form on-selection-change} double-click-handler: {Event-Handler :form on-double-click} return-press-handler: {Event-Handler :form on-return-press}
                  (<Tree-Node-Column>  name: name        title: "Name" width: 200 toplevel-controls?: #f display-images?: #f display-levels?: #f)
                  (<Tree-Label-Column> name: status      title: "Status" width: 200)))))))))
  
  
  (method override (conclude self initargs)
    (nextmethod self initargs)
    (view-invitations self)
    (selection-update self #f))
  
  
  (method override (user-close self)
    (set-visible? self #f)
    (pop-panel self))
  
  
  (method override (focus-default self)
    (acquire-focus (get-tree self)))
  
  
  (method (on-add-invitation self evt)
    (push-panel (open-frame (new World-Invitation name: 'invitation size: {Dimension 450 230} location: 'center))))
  
  
  (method (on-remove-invitation self evt)
    )
  
  
  (method (on-edit-invitation self evt)
    )
  
  
  (method (on-copy-invitation self evt)
    (let ((client (current-client))
          (world (current-world)))
      (let ((tree (get-tree self)))
        (let ((data (get-single-selected-data tree)))
          (bind (kind invitation-word created identities) data
            (let ((inviter (get-character-name client)))
              (set-clipboard-text
                (format "{a}{%}{%}{a}{%}{a}{%}{%}{a}{%}{%}{a}{%}{a}{%}"
                        (format "{a} invites you to Together" inviter)
                        (format "Your invitation word is")
                        (format "  {a}" invitation-word)
                        (format "This invitation expires on Oct 31")
                        (format "Download at https://togethersphere.com/limited/download.html")
                        (format "(detailed instructions available at the download page)")))))))
      (display-message world "Invitation copied to clipboard")))
  
  
  (method (on-verify-identity self evt)
    )
  
  
  (method (on-selection-change self evt)
    (let ((tree (get-tree self)))
      (let ((data (get-single-selected-data tree)))
        (selection-update self data))))
  
  
  (method (selection-update self data)
    (let ((invitation? (and data (eq? (car data) 'invitation)))
          (identity? (and data (eq? (car data) 'identity))))
      (set-enabled? (locate self 'remove) invitation?)
      (set-enabled? (locate self 'edit) invitation?)
      (set-enabled? (locate self 'copy) invitation?)
      (set-enabled? (locate self 'verify) identity?)))
  
  
  (method (on-double-click self evt)
    (edit-invitation self))
  
  
  (method override (on-return-press self key)
    (edit-invitation self))
  
  
  (method (edit-invitation self)
    )
  
  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method package (get-tree self)
    (locate self 'invitations))
  
  
  ;;;
  ;;;; Update
  ;;;
  
  
  (method package (update-invitations self)
    (let ((tree (get-tree self)))
      (with-preserved-selection tree
        (lambda ()
          (view-invitations self))
        selection-position?: #f)))
  
  
  (method package (view-invitations self)
    (let ((client (current-client)))
      (let ((invitations (invitation-list client))
            (tree (get-tree self)))
        (define (view-list)
          (for-each (lambda (invitation)
                      (bind (invitation-word created expires identities) invitation
                        (define (present-expires)
                          (if (not expires)
                              ""
                            (let ((expires (deserialize-date expires)))
                              (present-date expires))))
                        
                        (let ((row (add-row tree
                                     state: 'expanded
                                     children: (list (new Tree-Node title: (format "{a}{a})" invitation-word (present-expires)) font: {Font Label-User} color: {Color red: .547 green: .287 blue: .995})
                                                     (new Tree-Label title: "" font: {Font Label-User} color: {Color White}))
                                     user-data: (cons 'invitation invitation))))
                          (for-each (lambda (identity)
                                      (bind (name connected status) identity
                                        (define (present-status)
                                          (values "Accepted invitation" {Color red: 0 green: 220 blue: 0})
                                          @w
                                          (if (= 5 (random-integer 30))
                                              (values "Unable to acquire microphone" {Color red: 220 green: 0 blue: 0})
                                            (if (= 5 (random-integer 10))
                                                (values "Connected successfully" {Color red: 0 green: 220 blue: 0})
                                              (values (or status "") {Color White}))))
                        
                                        (receive (status status-color) (present-status)
                                          (add-row tree
                                                   father: row
                                                   children: (list (new Tree-Node title: name font: {Font Label-User} color: {Color White})
                                                                   (new Tree-Label title: status font: {Font Label-User} color: status-color))
                                                   user-data: (cons 'identity identity)))))
                                    identities))))
                    (sort ci<? invitations key: first)))
        
        (remove-every-row tree)
        (with-update-locked self
          (lambda ()
            (view-list)))))))


;;;
;;;; Invitation
;;;


(definition expires-in-choices
  '((1-day "1 day")
    (2-days "2 days")
    (1-week "1 week")
    (2-weeks "2 weeks")))


(class World-Invitation extends World-Frame
  
  
  (form
    (<install>                                   layout-type: border background: {Color red: .000 green: .000 blue: .000 alpha: .500}
      (<caption~>                                title: "New Invitation")
      (<content~>                                layout-type: center
        (<View>                 name: container size: {Dimension 310 170}
          (<Option-Label>                        title: "Invitation Word:" position: {Point 0 28} size: {Dimension 100 15})
          (<Invitation-View>    name: invitation position: {Point 100 25} size: {Dimension 200 22})
          (<Invitation-Invalid> name: invalid    position: {Point 40 47} size: {Dimension 410 16} font: {Font Label-User point-size: 12.5 antialias: default})
          (<Option-Label>                        title: "Expires in:" position: {Point 0 67} size: {Dimension 100 15})
          (<Border-View>                         position: {Point 100 66} size: {Dimension 200 19} border-type: solid border-color: {Color red: 100 green: 100 blue: 100}
            (<Invitation-Box>   name: expires-in))
          (<Push-Button>        name: create     title: "Create" position: {Point 53 125} size: {Dimension 110 24} default?: #t enabled?: #f action-handler: {Event-Handler :form on-create})
          (<Push-Button>        name: cancel     title: "Cancel" position: {Point 172 125} size: {Dimension 110 24} action-handler: {Event-Handler :form on-cancel})))))
  
  
  (method override (install self rest)
    (nextmethod self rest)
    (let ((combo (locate self 'expires-in)))
      (set-choices combo expires-in-choices)
      (set-value combo '1-week)))
  
  
  (method override (focus-default self)
    (acquire-focus (locate self '(invitation text))))
  
  
  (method (determine-expires self expires-in)
    (let ((now (current-date)))
      (case expires-in
        ((1-day) (date-add now 1 'day))
        ((2-days) (date-add now 2 'day))
        ((1-week) (date-add now 7 'day))
        ((2-weeks) (date-add now 14 'day)))))
  
  
  (method (on-create self evt)
    (let ((interface (current-interface))
          (client (current-client)))
      (let ((invitation-word (get-string-content (locate self '(invitation text))))
            (expires-in (get-value (locate self 'expires-in))))
        (let ((expires (serialize-date (determine-expires self expires-in))))
          (let ((err (invitation-add client invitation-word expires)))
            (close self)
            (let ((frame (find-component interface 'invitations)))
              (when (and frame (get-visible? frame))
                (update-invitations frame))))))))
  
  
  (method (on-cancel self evt)
    (close self))
  
  
  (method override (on-return-press self evt)
    ))


(class Invitation-View extends Border-View
  
  
  (form
    (<install>                           border-type: solid border-color: {Color Dark-Gray}
      (<Scroller-View>                   hscroll?: #f vscroll?: #f
        (<content~>                      layout-type: fill
          (<World-Text-View> name: text  accepts-returns?: #f left-padding: 2 top-padding: 2 background: #f content-change-handler: {Event-Handler :form on-content-change} return-press-handler: {Event-Handler :form on-return-press} escape-press-handler: {Event-Handler :host on-cancel})))))
  
  
  (method (on-content-change self evt)
    (content-changed self))
  
  
  (method (content-changed self)
    (define (invitation-invalid word)
      (cond ((empty-string? word)
             "")
            ((not (every? (lambda (c)
                            (and (alphabetic? c)
                                 (lower-case? c)))
                          word))
             "Invitation word can only lowercase letters")
            (else
             #f)))
    
    (define (view-content view)
      (let ((text (locate view 'text)))
        (trim-whitespace (get-string-content text))))
    
    (let ((text (locate self 'text)))
      (let ((invalid (invitation-invalid (trim-whitespace (get-string-content text)))))
        (set-enabled? (brother self 'create) (not invalid))
        (set-title (brother self 'invalid) (or invalid "")))))
  
  
  (method (on-return self evt)
    @w
    (let ((space (current-space)))
      (when (get-enabled? (child (get-root space) 'next))
        (invite-return space)))))


(class Invitation-Invalid extends Label-View
  
  
  (form
    (<install> justification: head))
  
  
  (method override (text-color self)
    {Color World-Red}))


(class Invitation-Box extends Combo-Box
  
  
  (method override (new-choices-menu self)
    (let ((menu (nextmethod self)))
      (set-background menu {Color red: .000 green: .000 blue: .000 alpha: .700})
      menu))))
