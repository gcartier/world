;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Invitations
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.interface.invitations jazz


(import (jazz.action)
        (jazz.application)
        (jazz.clipboard)
        (jazz.event)
        (jazz.graphic)
        (jazz.handler)
        (jazz.markup)
        (jazz.outline)
        (jazz.text)
        (jazz.time)
        (jazz.tree)
        (jazz.ui)
        (jazz.view)
        (world)
        (world.client.actions)
        (world.client.tier)
        (world.colors)
        (world.context)
        (world.interface)
        (world.interface.dialogs)
        (world.interface.frame)
        (world.interface.options)
        (world.interface.panel)
        (world.interface.text)
        (world.settings))


(definition invitation-color
  {Color red: .547 green: .287 blue: .995})

(definition expired-color
  {Color Medium-Gray})


(class World-Invitations extends World-Frame
  
  
  (form
    (<install>                                           layout-type: border background: {Color red: .000 green: .000 blue: .000 alpha: .500}
      (<caption~>                                        title: "Invitations"
        (<Push-Button>                 name: add         title: "New" style: text background: #f position: {Point 4 0} size: {Dimension 40 22} action-handler: {Event-Handler :form on-new-invitation})
        (<Push-Button>                 name: edit        title: "Edit" style: text background: #f position: {Point 95 0} size: {Dimension 40 22} action-handler: {Event-Handler :form on-edit-invitation})
        (<Push-Button>                 name: copy        title: "Copy" style: text background: #f position: {Point 440 0} size: {Dimension 40 22} action-handler: {Event-Handler :form on-copy-invitation}))
      (<content~>                                        layout-type: fill
        (<Scroller-View>                                 style: document hscroll?: #t vscroll?: #t
          (<content~>                                    layout-type: fill
            (<Tree-Header>                               style: document shown?: #f
              (<content~>
                (<Tree-View>           name: invitations portfolio: :images filled-column: status background: #f selection-handler: {Event-Handler :form on-selection-change} double-click-handler: {Event-Handler :form on-double-click} return-press-handler: {Event-Handler :form on-return-press}
                  (<Tree-Node-Column>  name: name        title: "Name" width: 200 toplevel-controls?: #f display-images?: #f display-levels?: #f)
                  (<Tree-Label-Column> name: status      title: "Status" width: 200)))))))))
  
  
  (method override (conclude self initargs)
    (nextmethod self initargs)
    (view-invitations self)
    (selection-update self #f))
  
  
  (method override (user-close self)
    (set-visible? self #f)
    (pop-panel self))
  
  
  (method override (focus-default self)
    (acquire-focus (get-tree self)))
  
  
  (method (on-new-invitation self evt)
    (push-panel (open-frame (new World-New-Invitation name: 'invitation size: {Dimension 450 230} location: 'center))))
  
  
  (method (on-edit-invitation self evt)
    (let ((tree (get-tree self)))
      (let ((data (get-single-selected-data tree)))
        (bind (kind expires-kind expires-label invitation-word created expires identities) data
          (push-panel (open-frame (new World-Edit-Invitation invitation-word: invitation-word invitation-expires: expires-label name: 'invitation size: {Dimension 450 230} location: 'center)))))))
  
  
  (method (on-copy-invitation self evt)
    (let ((client (current-client))
          (world (current-world)))
      (let ((tree (get-tree self)))
        (let ((data (get-single-selected-data tree)))
          (bind (kind expires-kind expires-label invitation-word created expires identities) data
            (let ((inviter (get-character-name client))
                  (expires (and expires (deserialize-date expires))))
              (set-clipboard-text
                (format "{a}{%}{%}{a}{%}{a}{%}{%}{a}{a}{%}{a}{%}"
                        (format "{a} invites you to Together" inviter)
                        (format "Your invitation word is")
                        (format "  {a}" invitation-word)
                        (if (not expires)
                            ""
                          (format "This invitation expires in {a}{%}{%}" expires-label))
                        (format "Download at https://togethersphere.com/limited/download.html")
                        (format "(detailed instructions available at the download page)")))))))
      (display-message world "Invitation copied to clipboard")))
  
  
  (method (on-selection-change self evt)
    (let ((tree (get-tree self)))
      (let ((data (get-single-selected-data tree)))
        (selection-update self data))))
  
  
  (method (selection-update self data)
    (let ((invitation? (and data (eq? (car data) 'invitation)))
          (identity? (and data (eq? (car data) 'identity))))
      (set-enabled? (locate self 'edit) invitation?)
      (set-enabled? (locate self 'copy) (and invitation? (neq? (second data) 'expired)))))
  
  
  (method (on-double-click self evt)
    (edit-invitation self))
  
  
  (method override (on-return-press self key)
    (edit-invitation self))
  
  
  (method (edit-invitation self)
    )
  
  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method package (get-tree self)
    (locate self 'invitations))
  
  
  ;;;
  ;;;; Update
  ;;;
  
  
  (method package (update-invitations self)
    (let ((tree (get-tree self)))
      (view-invitations self)
      (let ((data (get-single-selected-data tree)))
        (selection-update self data))))
  
  
  (method (determine-expires self expires)
    (if (not expires)
        (values 'never "never")
      (let ((expires (deserialize-date expires)))
        (let ((remain (time-second (time-difference (date->time-utc expires) (date->time-utc (current-date))))))
          (if (< remain 0)
              (values 'expired "expired")
            (let ((days (quotient remain (* 60 60 24))))
              (if (>= days 1)
                  (values 'in (format "{a} day{a}" days (format-plural days)))
                (values 'in "< 1 day"))))))))
  
  
  (method package (view-invitations self)
    (let ((client (current-client)))
      (let ((invitations (invitation-list client))
            (tree (get-tree self)))
        (define (view-list)
          (for-each (lambda (partition)
                      (bind (expired? . invitations-info) partition
                        (for-each (lambda (invitation-info)
                                    (bind (expires-kind expires-label invitation-word created expires identities) invitation-info
                                      (let ((row (add-row tree
                                                          state: 'expanded
                                                          children: (list (new Tree-Node title: (format "{a} ({a})" invitation-word expires-label) font: {Font Label-User} color: (if expired? expired-color invitation-color))
                                                                          (new Tree-Label title: "" font: {Font Label-User} color: {Color White}))
                                                          user-data: (cons 'invitation invitation-info))))
                                        (for-each (lambda (identity)
                                                    (bind (name connected status) identity
                                                      (define (present-status)
                                                        (values "Accepted invitation" {Color red: 0 green: 220 blue: 0}))
                                                      
                                                      (receive (status status-color) (present-status)
                                                        (add-row tree
                                                                 father: row
                                                                 children: (list (new Tree-Node title: name font: {Font Label-User} color: {Color White})
                                                                                 (new Tree-Label title: status font: {Font Label-User} color: status-color))
                                                                 user-data: (cons 'identity identity)))))
                                                  identities))))
                                  (sort ci<? invitations-info key: third))))
                    (sort < (partition (map (lambda (invitation)
                                              (bind (invitation-word created expires) invitation
                                                (receive (expires-kind expires-label) (determine-expires self expires)
                                                  (cons expires-kind (cons expires-label invitation)))))
                                            invitations)
                                       key: (lambda (invitation-info)
                                              (bind (expires-kind) invitation-info
                                                (eq? expires-kind 'expired))))
                      key: (lambda (partition)
                             (let ((expired? (car partition)))
                               (if (not expired?)
                                   0
                                 1))))))
        
        (remove-every-row tree)
        (with-update-locked self
          (lambda ()
            (view-list)))))))


;;;
;;;; Invitation
;;;


(definition expires-in-choices
  '((1-day "1 day")
    (2-days "2 days")
    (1-week "1 week")
    (2-weeks "2 weeks")))


(definition max-invitation-word-length
  20)


(class World-Invitation extends World-Frame
  
  
  (method protected virtual (expires-change self)
    )
  
  
  (method (append-never self choices)
    (if (admin?)
        (append choices '((never "Never")))
      choices))
  
  
  (method (determine-expires self expires-in)
    (define (adjust date)
      (date-add date 1 'minute))
    
    (let ((now (current-date)))
      (case expires-in
        ((expired) (date-add now -1 'day))
        ((1-day) (adjust (date-add now 1 'day)))
        ((2-days) (adjust (date-add now 2 'day)))
        ((1-week) (adjust (date-add now 7 'day)))
        ((2-weeks) (adjust (date-add now 14 'day)))
        ((never) #f)))))


(class World-New-Invitation extends World-Invitation
  
  
  (form
    (<install>                                   layout-type: border background: {Color red: .000 green: .000 blue: .000 alpha: .500}
      (<caption~>                                title: "New Invitation")
      (<content~>                                layout-type: center
        (<View>                 name: container  size: {Dimension 310 170}
          (<Option-Label>                        title: "Invitation word:" position: {Point 0 28} size: {Dimension 100 15})
          (<Invitation-View>    name: invitation position: {Point 100 25} size: {Dimension 200 22})
          (<Invitation-Invalid> name: invalid    position: {Point 40 47} size: {Dimension 410 16} font: {Font Label-User point-size: 12.5 antialias: default})
          (<Option-Label>                        title: "Expires in:" position: {Point 0 67} size: {Dimension 100 15})
          (<Border-View>                         position: {Point 100 66} size: {Dimension 200 19} border-type: solid border-color: {Color red: 100 green: 100 blue: 100}
            (<Expires-In-Box>   name: expires-in))
          (<Push-Button>        name: create     title: "Create" position: {Point 53 125} size: {Dimension 110 24} default?: #t enabled?: #f action-handler: {Event-Handler :form on-create})
          (<Push-Button>        name: cancel     title: "Cancel" position: {Point 172 125} size: {Dimension 110 24} action-handler: {Event-Handler :form on-cancel})))))
  
  
  (method override (install self rest)
    (nextmethod self rest)
    (let ((combo (locate self 'expires-in)))
      (set-choices combo (append-never self expires-in-choices))
      (set-value combo '1-week)))
  
  
  (method override (focus-default self)
    (acquire-focus (locate self '(invitation text))))
  
  
  (method package (invite-return self)
    (when (get-enabled? (locate self 'create))
      (create-invitation self)))
  
  
  (method (on-create self evt)
    (create-invitation self))
  
  
  (method (create-invitation self)
    (let ((interface (current-interface))
          (client (current-client))
          (world (current-world)))
      (let ((invitation-word (trim-whitespace (get-string-content (locate self '(invitation text)))))
            (expires-in (get-value (locate self 'expires-in))))
        (let ((expires (determine-expires self expires-in)))
          (let ((expires (and expires (serialize-date expires))))
            (let ((err (invitation-add client invitation-word expires)))
              (if err
                  (display-error world err)
                (clear-message world)
                (close self)
                (let ((frame (find-component interface 'invitations)))
                  (when (and frame (get-visible? frame))
                    (update-invitations frame))))))))))
  
  
  (method (on-cancel self evt)
    (let ((world (current-world)))
      (clear-message world)
      (close self))))


(class World-Edit-Invitation extends World-Invitation
  
  
  (property invitation-word    accessors generate)
  (property invitation-expires accessors generate)
  
  
  (form
    (<install>                                   layout-type: border background: {Color red: .000 green: .000 blue: .000 alpha: .500}
      (<caption~>                                title: "Edit Invitation")
      (<content~>                                layout-type: center
        (<View>                 name: container size: {Dimension 310 170}
          (<Option-Label>                        title: "Invitation word:" position: {Point 0 28} size: {Dimension 100 15})
          (<Option-Label>       name: invitation position: {Point 100 25} size: {Dimension 200 22})
          (<Option-Label>                        title: "Expires in:" position: {Point 0 67} size: {Dimension 100 15})
          (<Border-View>                         position: {Point 100 66} size: {Dimension 200 19} border-type: solid border-color: {Color red: 100 green: 100 blue: 100}
            (<Expires-In-Box>   name: expires-in))
          (<Push-Button>        name: modify     title: "Save" position: {Point 53 125} size: {Dimension 110 24} default?: #t enabled?: #f action-handler: {Event-Handler :form on-modify})
          (<Push-Button>        name: cancel     title: "Cancel" position: {Point 172 125} size: {Dimension 110 24} action-handler: {Event-Handler :form on-cancel})))))
  
  
  (method override (conclude self rest)
    (nextmethod self rest)
    (set-color (locate self 'invitation) invitation-color)
    (set-title (locate self 'invitation) invitation-word)
    (let ((combo (locate self 'expires-in))
          (choices (cons '(expired "Expired") expires-in-choices)))
      (set-choices combo (append-never self choices))
      (set-entry combo invitation-expires)))
  
  
  (method override (expires-change self)
    (set-enabled? (locate self 'modify) #t))
  
  
  (method (on-modify self evt)
    (let ((interface (current-interface))
          (client (current-client))
          (world (current-world)))
      (let ((expires-in (get-value (locate self 'expires-in))))
        (let ((expires (determine-expires self expires-in)))
          (let ((expires (and expires (serialize-date expires))))
            (let ((err (invitation-modify client invitation-word expires)))
              (if err
                  (display-error world err)
                (clear-message world)
                (close self)
                (let ((frame (find-component interface 'invitations)))
                  (when (and frame (get-visible? frame))
                    (update-invitations frame))))))))))
  
  
  (method (on-cancel self evt)
    (let ((world (current-world)))
      (clear-message world)
      (close self))))


(class Invitation-View extends Border-View
  
  
  (form
    (<install>                           border-type: solid border-color: {Color Dark-Gray}
      (<Scroller-View>                   hscroll?: #f vscroll?: #f
        (<content~>                      layout-type: fill
          (<World-Text-View> name: text  accepts-returns?: #f left-padding: 2 top-padding: 2 background: #f content-change-handler: {Event-Handler :form on-content-change} return-press-handler: {Event-Handler :form on-return-press} escape-press-handler: {Event-Handler :host on-cancel})))))
  
  
  (method (on-content-change self evt)
    (content-changed self))
  
  
  (method (content-changed self)
    (define (invitation-invalid word)
      (cond ((empty-string? word)
             "")
            ((not (every? (lambda (c)
                            (and (alphabetic? c)
                                 (lower-case? c)))
                          word))
             "Invitation word can only lowercase letters")
            ((> (string-length word) max-invitation-word-length)
             (format "Invitation word cannot be longer than {a} characters" max-invitation-word-length))
            (else
             #f)))
    
    (let ((text (locate self 'text)))
      (let ((invalid (invitation-invalid (trim-whitespace (get-string-content text)))))
        (set-enabled? (brother self 'create) (not invalid))
        (set-title (brother self 'invalid) (or invalid "")))))
  
  
  (method override (on-return-press self evt)
    (invite-return (find-ascendant self World-Invitation))))


(class Invitation-Invalid extends Label-View
  
  
  (form
    (<install> justification: head))
  
  
  (method override (text-color self)
    {Color World-Red}))


(class Expires-In-Box extends Combo-Box
  
  
  (method override (new-choices-menu self)
    (let ((menu (nextmethod self)))
      (set-background menu {Color red: .000 green: .000 blue: .000 alpha: .700})
      menu))
  
  
  (method override (content-change self origin)
    (expires-change (find-ascendant self World-Invitation)))))
