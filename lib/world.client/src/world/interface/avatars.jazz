;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Avatars
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2016
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.interface.avatars jazz


(import (jazz.geometry)
        (world)
        (world.autoload)
        (world.camera)
        (world.context)
        (world.geometry)
        (world.interface.showcase)
        (world.player)
        (world.renderer)
        (world.renderers)
        (world.settings)
        (world.syntax (phase syntax)))


(definition protected (collect-avatar-models)
  (let ((world (current-world)))
    (let ((models (map get-path (collect-models world))))
      (define (gather-existing paths)
        (collect-if (lambda (path)
                      (member? path models))
                    paths))
      
      (gather-existing (if young-child?
                           '("character/clockworkgnome"
                             "creature/gorilla"
                             "creature/mistfox"
                             "creature/armadillo"
                             "creature/babyelekk"
                             "creature/cat"
                             "creature/arakkoa"
                             "creature/ent")
                         '("character/bloodelffemale"
                           "character/dwarfmale"
                           "character/gnomemale"
                           "character/clockworkgnome"
                           "character/nightelffemale"
                           "character/draeneifemale"
                           "creature/arakkoa"
                           "creature/gorilla"
                           "creature/mistfox"
                           "creature/babyelekk"
                           "creature/cat"
                           "creature/ent"))))))


(class Avatar extends Player
  
  
  (method override (animated self)
    (set! animated? #t)
    (set! animation-tick (~ animate self))
    (register-tick (effective-parent self) animation-tick))
  
  
  (method override (unanimated self)
    (unregister-tick (effective-parent self) animation-tick)
    (set! animation-tick #f)
    (set! animated? #f)))


(class Avatars-Showcase extends World-Showcase
  
  
  (slot selection-camera initialize #f getter generate)
  (slot selection-entity initialize #f getter generate)
  
  
  (method override (activate self)
    (nextmethod self)
    (let ((world (current-world))
          (zone (current-zone)))
      (when (and (welcome? zone) (not selection-entity))
        (let ((avatar (default-avatar)))
          (let ((entity (new Avatar parent: self position: (vertex 0. (selection-y self avatar) -100.))))
            (rotate entity PI/2)
            (set-camera entity (cache-selection-camera self))
            (set-model entity avatar)
            (metadata-install entity)
            (set! selection-entity entity))))
      (update-camera self)
      (when (not (welcome? zone))
        (set-selection self (showcase-selection self showing elements)))))
  
  
  (method (selection-y self name)
    (cond ((equal? name 'Orb)
           -2.7)
          ((equal? name "creature/gorilla")
           -3.0)
          (else
           -3.2)))
  
  
  (method override (showcase-vertical self)
    (let ((zone (current-zone)))
      (if (welcome? zone)
          45
        (nextmethod self))))
  
  
  (method override (showcase-top self)
    1.)
  
  
  (method override (showcase-bottom self)
    .15)
  
  
  (method override (showcase-left self)
    0.)
  
  
  (method override (showcase-right self)
    .25)
  
  
  (method override (showcase-radius self)
    .5)
  
  
  (method override (showcase-spacing self)
    .75)
  
  
  (method override (showcase-wait? self)
    #t)
  
  
  (method override (showcase-elements self showing)
    (define (rotate-90 entity)
      (rotate entity PI/2)
      entity)
    
    (let ((world (current-world)))
      (let ((camera (cache-camera self))
            (spacing (showcase-spacing self))
            (models (collect-avatar-models)))
        (let ((x 0.)
              (y 0.)
              (z 0.))
          (if (null? models)
              (map (lambda (model)
                     (let ((name (get-name model))
                           (class Avatar)
                           (scaling .25))
                       (let ((scale (vertex scaling scaling scaling)))
                         (let ((entity (rotate-90 (new class parent: self position: (anchor->position model (vertex x y z) scale) scale: scale user-data: name))))
                           (set-camera entity camera)
                           (set-model entity model)
                           (increase! z spacing)
                           entity))))
                   (list (find-model world 'Orb)))
            (map (lambda (path)
                   (let ((class Avatar)
                         (scaling (if (eq? path 'Orb) .5 1.)))
                     (let ((scale (vertex scaling scaling scaling))
                           (y (if (eq? path 'Orb) (+ y .2) y)))
                       (let ((entity (rotate-90 (new class parent: self model: path position: (vertex x y z) scale: scale user-data: path))))
                         (metadata-install entity)
                         (set-camera entity camera)
                         (increase! z spacing)
                         entity))))
                 (if (world-setting 'world.orb-avatar? #f)
                     (append '(Orb) models)
                   models)))))))
  
  
  ;;;
  ;;;; Selection
  ;;;
  
  
  (method package (find-avatar self model)
    (find-if (lambda (avatar)
               (equal? (get-model avatar) model))
             elements))
  
  
  (method override (showcase-selection self showing elements)
    (let ((zone (current-zone))
          (me (current-me)))
      (if (welcome? zone)
          (or selection (first elements))
        (let ((model (get-model me)))
          (or (find-avatar self model)
              (first elements))))))
  
  
  (method override (draw-selection self)
    (let ((zone (current-zone)))
      (when selection
        (draw-target-circle selection))
      (let ((preserved-camera (current-camera)))
        (prepare-view (cache-selection-camera self))
        (set-current-camera (cache-selection-camera self))
        (reset-renderers)
        (when (welcome? zone)
          (register-entity selection-entity))
        (render-opaque)
        (render-transparent)
        (render-orb)
        (set-current-camera preserved-camera))))
  
  
  (method override (selection-update self selection)
    (let ((tier (current-tier))
          (world (current-world))
          (zone (current-zone))
          (me (current-me)))
      (let ((welcome? (welcome? zone))
            (designer (get-designer zone)))
        (let ((model (get-user-data selection))
              (entity (if welcome? selection-entity me)))
          (define (select-avatar avatar)
            (when (not welcome?)
              (set-avatar entity avatar)
              (follow-player world)
              (reset-elements (find-showcase world 'animations))
              (reset-elements (find-showcase world 'meshes))
              (save-me tier)))
          
          (when welcome?
            (set-position entity (vertex 0. (selection-y self model) -100.)))
          (cond ((eq? model 'Orb)
                 (set-model entity 'Orb)
                 (free-morphing entity)
                 (set-animate? entity #f)
                 (set-scaling entity 1.)
                 (select-avatar 'Orb))
                (else
                 (set-model entity model)
                 (metadata-install entity)
                 (free-morphing entity)
                 (setup-morphing entity)
                 (set-animate? entity #t)
                 (default-scaling entity)
                 (select-avatar model)))))))
  
  
  ;;;
  ;;;; Camera
  ;;;
  
  
  (method override (size-change self size)
    (nextmethod self size)
    (size-change (cache-selection-camera self) size))
  
  
  (method (cache-selection-camera self)
    (or selection-camera
        (let ((world (current-world))
              (cam (make-camera)))
          (set-screen-width cam (get-width world))
          (set-screen-height cam (get-height world))
          (set-frustum-radius cam (showcase-spacing self))
          (vertex-copy! (get-position cam) (vertex -4. -1.6 -100.))
          (let ((sight (vertex .9760580484614174 -.21751019753954 0.)) ;; slightly looking down
                (right (vertex 0. 0. 1.)))
            (init-lookat cam
              sight
              (cross-normal right sight)
              right))
          (derive-target cam)
          (camera-update cam)
          (prepare-projection cam)
          (prepare-view cam)
          (set! selection-camera cam)
          selection-camera)))))
