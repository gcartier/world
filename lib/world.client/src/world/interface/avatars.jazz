;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Avatars
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.interface.avatars jazz


(import (jazz.geometry)
        (world)
        (world.autoload)
        (world.camera)
        (world.context)
        (world.dyes)
        (world.entity)
        (world.geometry)
        (world.interface.showcase)
        (world.player)
        (world.renderer)
        (world.renderers)
        (world.settings)
        (world.space))


(definition protected orb-avatars?
  #f)


(definition protected (collect-avatar-models)
  (let ((world (current-world)))
    (let ((models (map get-path (collect-models world))))
      (define (gather-existing paths)
        (collect-if (lambda (path)
                      (member? path models))
                    paths))
      
      (gather-existing '("character/bloodelffemale"
                         "character/dwarfmale"
                         "character/gnomemale"
                         "character/clockworkgnome"
                         "character/draeneifemale"
                         "character/nightelffemale"
                         "creature/arakkoa"
                         "creature/gorilla"
                         "creature/mistfox"
                         "creature/babyelekk"
                         "creature/cat"
                         "creature/ent")))))


(class Avatar extends Player
  
  
  (method override (animated self)
    (set! animated? #t)
    (set! animation-tick (~ animate self))
    (register-tick (effective-parent self) animation-tick))
  
  
  (method override (unanimated self)
    (unregister-tick (effective-parent self) animation-tick)
    (set! animation-tick #f)
    (set! animated? #f)))


(class Avatars-Showcase extends World-Showcase
  
  
  (slot selection-camera initialize #f getter generate)
  (slot selection-entity initialize #f getter generate)
  
  
  (method override (activate self)
    (nextmethod self)
    (let ((space (current-space))
          (me (current-me)))
      (when (showcase-avatar? space)
        (let ((avatar (get-avatar me)))
          (when (not selection-entity)
            (let ((entity (new Avatar parent: self)))
              (rotate entity (if (eq? avatar 'Orb) (+ PI/2 PI/8) PI/2))
              (set-camera entity (cache-selection-camera self))
              (set-model entity avatar)
              (metadata-install entity)
              (set! selection-entity entity)))
          (update-avatar self)))
      (update-camera self)
      (when (not (showcase-avatar? space))
        (set-selection self (showcase-selection self showing elements)))))
  
  
  (method (update-avatar self)
    (let ((space (current-space)))
      (when (showcase-avatar? space)
        (let ((avatar (get-model selection-entity)))
          (set-position selection-entity (vertex 0. (selection-y self avatar) -100.))
          (let ((scaling (showcase-avatar-scaling space avatar)))
            (if scaling
                (set-scaling selection-entity (* scaling (avatar-scaling selection-entity)))
              (when (eq? avatar 'Orb)
                (set-scaling selection-entity 1.))))))))
  
  
  (method (selection-y self avatar)
    (let ((space (current-space)))
      (or (showcase-avatar-y space avatar)
          (cond ((equal? avatar 'Orb)
                 -2.7)
                ((equal? avatar "creature/gorilla")
                 -3.0)
                (else
                 -3.2)))))
  
  
  (method override (showcase-vertical self)
    (let ((space (current-space)))
      (or (showcase-avatars-vertical space)
          (nextmethod self))))
  
  
  (method override (showcase-top self)
    1.)
  
  
  (method override (showcase-bottom self)
    .15)
  
  
  (method override (showcase-left self)
    0.)
  
  
  (method override (showcase-right self)
    .25)
  
  
  (method override (showcase-radius self)
    .5)
  
  
  (method override (showcase-spacing self)
    .75)
  
  
  (method override (showcase-wait? self)
    #t)
  
  
  (method override (showcase-elements self showing)
    (define (rotate-90 entity)
      (rotate entity (if orb-avatars? (+ PI/2 PI/8) PI/2))
      entity)
    
    (let ((world (current-world)))
      (let ((camera (cache-camera self))
            (spacing (showcase-spacing self))
            (models (collect-avatar-models)))
        (let ((x 0.)
              (y 0.)
              (z 0.))
          (cond (orb-avatars?
                 (let ((model (find-model world 'Orb)))
                   (map (lambda (color)
                          (let ((name (get-name model))
                                (class Avatar)
                                (scaling .65))
                            (let ((scale (vertex scaling scaling scaling)))
                              (let ((entity (rotate-90 (new class parent: self position: (anchor->position model (vertex x y z) scale) scale: scale color: color user-data: name))))
                                (set-camera entity camera)
                                (set-model entity model)
                                (increase! z spacing)
                                entity))))
                        (list orange-dye red-dye purple-dye blue-dye green-dye yellow-dye white-dye))))
               ((null? models)
                (map (lambda (model)
                       (let ((name (get-name model))
                             (class Avatar)
                             (scaling .25))
                         (let ((scale (vertex scaling scaling scaling)))
                           (let ((entity (rotate-90 (new class parent: self position: (anchor->position model (vertex x y z) scale) scale: scale user-data: name))))
                             (set-camera entity camera)
                             (set-model entity model)
                             (increase! z spacing)
                             entity))))
                     (list (find-model world 'Orb))))
               (else
                (map (lambda (path)
                       (let ((class Avatar)
                             (scaling (if (eq? path 'Orb) .5 .1)))
                         (let ((scale (vertex scaling scaling scaling))
                               (y (if (eq? path 'Orb) (+ y .2) y)))
                           (let ((entity (rotate-90 (new class parent: self model: path position: (vertex x y z) scale: scale user-data: path))))
                             (metadata-install entity)
                             (set-camera entity camera)
                             (increase! z spacing)
                             entity))))
                     (if (world-setting 'world.orb-avatar? #f)
                         (append '(Orb) models)
                       models))))))))
  
  
  ;;;
  ;;;; Elements
  ;;;


  (method override (draw-elements self)
    (let ((space (current-space)))
      (when (showcase-avatars? space)
        (nextmethod self))))
  
  
  ;;;
  ;;;; Mouse
  ;;;
  
  
  (method override (in-showcase? self v)
    (let ((space (current-space)))
      (if (showcase-avatars? space)
          (nextmethod self v)
        #f)))
  
  
  (method override (showcase-double-click self h v)
    (let ((space (current-space)))
      (showcase-avatars-double-click space h v)))
  
  
  (method package (track-avatar self dx dy)
    (let ((world (current-world)))
      (let ((entity (get-selection-entity (get-showcase world))))
        (let ((angle (/ dx 150.))
              (lookat (get-lookat entity))
              (up (get-world-up world)))
          (set-lookat entity (rotate-lookat& lookat angle up))
          (update-matrix entity)))))
  
  
  ;;;
  ;;;; Selection
  ;;;
  
  
  (method package (find-avatar self model)
    (find-if (lambda (avatar)
               (equal? (get-model avatar) model))
             elements))
  
  
  (method override (showcase-selection self showing elements)
    (let ((space (current-space))
          (me (current-me)))
      (if (showcase-avatar? space)
          (or selection (if orb-avatars? (third elements) (first elements)))
        (let ((model (get-model me)))
          (or (find-avatar self model)
              (first elements))))))
  
  
  (method override (draw-selection self)
    (let ((space (current-space)))
      (when (and selection (showcase-avatars? space))
        (draw-target-circle selection))
      (let ((preserved-camera (current-camera)))
        (prepare-view (cache-selection-camera self))
        (set-current-camera (cache-selection-camera self))
        (reset-renderers)
        (when (showcase-avatar? space)
          (register-entity selection-entity))
        (render-opaque)
        (render-transparent)
        (render-orb)
        (set-current-camera preserved-camera))))
  
  
  (method override (selection-update self selection)
    (let ((tier (current-tier))
          (world (current-world))
          (zone (current-zone))
          (space (current-space))
          (me (current-me)))
      (let ((avatar? (showcase-avatar? space))
            (designer (get-designer zone)))
        (let ((model (get-user-data selection))
              (entity (if avatar? selection-entity me)))
          (define (select-avatar avatar)
            (set-avatar entity avatar)
            (when (not avatar?)
              (follow-player world)
              (reset-elements (find-showcase world 'animations))
              (reset-elements (find-showcase world 'meshes))
              (save-me tier)))
          
          (when avatar?
            (set-position entity (vertex 0. (selection-y self model) -100.)))
          (cond ((eq? model 'Orb)
                 (set-model entity 'Orb)
                 (set-color entity (get-color selection))
                 (free-morphing entity)
                 (set-animate? entity #f)
                 (set-scaling entity 1.)
                 (select-avatar 'Orb))
                (else
                 (set-model entity model)
                 (free-morphing entity)
                 (setup-morphing entity)
                 (set-animate? entity #t)
                 (metadata-install entity)
                 (update-avatar self)
                 (select-avatar model)))))))
  
  
  ;;;
  ;;;; Camera
  ;;;
  
  
  (method override (size-change self size)
    (nextmethod self size)
    (size-change (cache-selection-camera self) size))
  
  
  (method (cache-selection-camera self)
    (or selection-camera
        (let ((world (current-world))
              (cam (make-camera)))
          (set-screen-width cam (get-width world))
          (set-screen-height cam (get-height world))
          (set-frustum-radius cam (showcase-spacing self))
          (vertex-copy! (get-position cam) (vertex -4. -1.6 -100.))
          (let ((sight (vertex .9760580484614174 -.21751019753954 0.)) ;; slightly looking down
                (right (vertex 0. 0. 1.)))
            (init-lookat cam
              sight
              (cross-normal right sight)
              right))
          (derive-target cam)
          (camera-update cam)
          (prepare-projection cam)
          (prepare-view cam)
          (set! selection-camera cam)
          selection-camera)))))
