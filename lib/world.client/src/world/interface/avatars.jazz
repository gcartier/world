;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Avatars
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2016
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.interface.avatars jazz


(import (jazz.geometry)
        (world)
        (world.autoload)
        (world.camera)
        (world.creature)
        (world.entity)
        (world.geometry)
        (world.interface.bars)
        (world.interface.showcase)
        (world.lighting)
        (world.model)
        (world.renderer)
        (world.renderers)
        (world.settings)
        (world.syntax (phase syntax)))


(class Avatar extends Player
  
  
  (method override (animated)
    (set! animated? #t)
    (set! animation-tick animate)
    (register-tick~ (effective-parent) animation-tick))
  
  
  (method override (unanimated)
    (unregister-tick~ (effective-parent) animation-tick)
    (set! animation-tick #f)
    (set! animated? #f)))


(class Avatars-Showcase extends World-Showcase
  
  
  (slot selection-camera initialize #f getter generate)
  (slot selection-entity initialize #f getter generate)
  
  
  (method override (activate)
    (nextmethod)
    (let ((world (current-world)))
      (when (not selection-entity)
        (let ((initial-model "character/bloodelffemale"))
          (let ((entity (new Avatar parent: self position: (vertex 0. (selection-y initial-model) -100.) animate?: #t)))
            (rotate~ entity PI/2)
            (set-camera~ entity (cache-selection-camera))
            (set-model~ entity initial-model)
            (metadata-install~ entity)
            (set! selection-entity entity))))))
  
  
  (method (selection-y name)
    (cond ((equal? name 'Orb)
           -2.7)
          ((equal? name "creature/gorilla")
           -3.0)
          (else
           -3.2)))
  
  
  (method override (showcase-vertical)
    45)
  
  
  (method override (showcase-top)
    1.)
  
  
  (method override (showcase-bottom)
    .15)
  
  
  (method override (showcase-left)
    0.)
  
  
  (method override (showcase-right)
    .25)
  
  
  (method override (showcase-radius)
    .5)
  
  
  (method override (showcase-spacing)
    .75)
  
  
  (method override (showcase-wait?)
    #t)
  
  
  (method override (showcase-elements showing)
    (define (rotate entity)
      (rotate~ entity PI/2)
      entity)
    
    (let ((world (current-world)))
      (let ((camera (cache-camera))
            (spacing (showcase-spacing))
            (models (registered-non-block-models))
            (paths (collect-models~ world)))
        (let ((x 0.)
              (y 0.)
              (z 0.))
          (append (map (lambda (model)
                         (let ((name (get-name~ model))
                               (class Avatar)
                               (scaling .25))
                           (let ((scale (vertex scaling scaling scaling)))
                             (let ((entity (rotate (new class parent: self position: (anchor->position~ model (vertex x y z) scale) scale: scale user-data: name))))
                               (set-camera~ entity camera)
                               (set-model~ entity model)
                               (increase! z spacing)
                               entity))))
                       (list (find-model~ world 'Orb)))
                  (map (lambda (path)
                         (let ((class Avatar)
                               (scaling 1.))
                           (let ((scale (vertex scaling scaling scaling)))
                             (let ((entity (rotate (new class parent: self model: path position: (vertex x y z) scale: scale animate?: #t user-data: path))))
                               (metadata-install~ entity)
                               (set-camera~ entity camera)
                               (increase! z spacing)
                               entity))))
                       '("character/bloodelffemale"
                         ;"character/dwarfmale"
                         ;"character/gnomemale"
                         ;"character/clockworkgnome"
                         ;"character/nightelffemale"
                         ;"character/draeneifemale"
                         "creature/gorilla"
                         ;"creature/mistfox"
                         )))))))
  
  
  ;;;
  ;;;; Selection
  ;;;
  
  
  (method override (showcase-selection showing elements)
    (or selection (second elements)))
  
  
  (method override (draw-selection)
    (when selection
      (draw-target-circle~ selection))
    (let ((preserved-camera (current-camera)))
      (prepare-view~ (cache-selection-camera))
      (set-current-camera (cache-selection-camera))
      (reset-renderes)
      (register-entity selection-entity)
      (render-opaque)
      (render-transparent)
      (render-orb)
      (set-current-camera preserved-camera)))
  
  
  (method override (selection-addable?)
    #t)
  
  
  (method override (selection-update selection)
    (let ((zone (current-zone)))
      (let ((designer (get-designer~ zone)))
        (let ((model (get-user-data~ selection))
              (entity selection-entity))
          (set-position~ entity (vertex 0. (selection-y model) -100.))
          (cond ((eq? model 'Orb)
                 (set-model~ entity 'Orb)
                 (free-morphing~ entity)
                 (set-animate?~ entity #f)
                 (set-scaling~ entity 1.))
                (else
                 (set-model~ entity model)
                 (metadata-install~ entity)
                 (free-morphing~ entity)
                 (setup-morphing~ entity)
                 (set-animate?~ entity #t)))))))
  
  
  ;;;
  ;;;; Camera
  ;;;
  
  
  (method override (size-change size)
    (nextmethod size)
    (size-change~ (cache-selection-camera) size))
  
  
  (method (cache-selection-camera)
    (or selection-camera
        (let ((world (current-world))
              (cam (make-camera)))
          (set-screen-width~ cam (get-width~ world))
          (set-screen-height~ cam (get-height~ world))
          (set-frustum-radius~ cam (showcase-spacing))
          (vertex-copy! (get-position~ cam) (vertex -4. -1.6 -100.))
          (let ((lookat (get-lookat~ cam))
                (sight (vertex .9760580484614174 -.21751019753954 0.)) ;; slightly looking down
                (right (vertex 0. 0. 1.)))
            (lookat! lookat
                     sight
                     (cross-normal right sight)
                     right))
          (derive-target~ cam)
          (camera-update~ cam)
          (prepare-projection~ cam)
          (prepare-view~ cam)
          (set! selection-camera cam)
          selection-camera)))))
