;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Mainbar
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.interface.mainbar jazz


(import (jazz.cairo)
        (jazz.component)
        (jazz.geometry)
        (jazz.graphic)
        (jazz.opengl)
        (jazz.opengl.texture)
        (jazz.view)
        (gaea.geometry)
        (world)
        (world.context)
        (world.interface)
        (world.interface.sheet)
        (world.pane)
        (world.space)
        (world.texture)
        (world.window))


(definition protected mainbar-pane
  #f)

(definition protected mainbar-sheet
  #f)

(definition protected mainbar
  #f)


(definition protected (setup-mainbar view)
  (let ((window (current-window)))
    (let ((position {Point 10 10})
          (size {Dimension 3840 40}))
      (let ((texture (make-cairo-texture (get-width size) (get-height size) scale?: #t)))
        (let ((pane (make-sheet-pane
                      name: 'mainbar
                      position: position
                      size: size
                      resolution: size
                      texture: texture
                      root: view
                      pane?: #f)))
          (let ((sheet (get-sheet pane)))
            (set-visible? sheet #f)
            (set! mainbar-pane pane)
            (set! mainbar-sheet sheet)
            (set! mainbar view)
            (resize-mainbar (get-width window) (get-height window))))))))


(definition protected (resize-mainbar width height)
  (let ((window (current-window)))
    (when mainbar-sheet
      (make-orthographic-matrix! (get-projection-matrix mainbar-sheet) 0. width 0. height 0. 10.)
      (refresh-array/buffer mainbar-sheet)
      (parameterize ((paint-now? (get-visible? window)))
        (set-size mainbar (new Dimension (fxround width) 40))))))


(definition protected (show-mainbar space)
  (let ((window (current-window)))
    (mainbar-show space)
    (set-visible? mainbar #t)
    (set-visible? mainbar-sheet #t)
    (register-front-sheet window mainbar-sheet)
    (if (fade-mainbar? space)
        (fade-mainbar (point->point$fl$ (mouse-position window)) #t)
      (set-fade mainbar-pane #f)
      (invalidate-view mainbar))))


(definition protected (hide-mainbar space)
  (let ((window (current-window)))
    (mainbar-hide space)
    (set-fade mainbar-pane 0.)
    (invalidate-view mainbar)
    (set-visible? mainbar #f)
    (set-visible? mainbar-sheet #f)
    (unregister-sheet window mainbar-sheet)))


(definition protected (fade-mainbar pos (force? #f))
  (when (get-visible? mainbar)
    (let ((fade (mainbar-fade pos)))
      (when (or force? (not (equal? fade (get-fade mainbar-pane))))
        (set-fade mainbar-pane fade)
        (invalidate-view mainbar)))))


(definition protected (mainbar-fade pos)
  (let ((rect (rect->rect$fl$ (effective-rect mainbar-sheet))))
    (let ((dist (rectangle-distance rect pos)))
      (cond ((<= dist 10.)
             #f)
            ((> dist 100.)
             0.)
            (else
             (let ((d (- dist 10.)))
               (- 1. (/ d 90.)))))))))
