;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Mainbar
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.interface.mainbar jazz


(import (jazz.cairo)
        (jazz.component)
        (jazz.geometry)
        (jazz.graphic)
        (jazz.view)
        (world)
        (world.context)
        (world.geometry)
        (world.interface)
        (world.interface.sheet)
        (world.pane)
        (world.texture)
        (world.window))


(definition protected mainbar-pane
  #f)

(definition protected mainbar-sheet
  #f)

(definition protected mainbar
  #f)


(definition protected (setup-mainbar view)
  (let ((window (current-window)))
    (let ((position {Point 10 10})
          (size (get-size view)))
      (let ((texture (make-cairo-texture (get-width size) (get-height size) retina?: #t)))
        (let ((pane (make-sheet-pane
                      name: 'mainbar
                      position: position
                      size: size
                      resolution: size
                      texture: texture
                      root: view
                      pane?: #f)))
          (let ((sheet (get-sheet pane)))
            (set! mainbar-pane pane)
            (set! mainbar-sheet sheet)
            (set! mainbar view)))))))


(definition protected (resize-mainbar width height)
  (when mainbar-sheet
    (make-orthographic-matrix! (get-projection-matrix mainbar-sheet) 0. width 0. height 0. 10.)
    (refresh-array/buffer mainbar-sheet)))


(definition protected (fade-mainbar pos (force? #f))
  (when (get-visible? mainbar)
    (let ((rect (rect->rect$fl$ (effective-rect mainbar-sheet))))
      (let ((dist (rectangle-distance rect pos)))
        (define (fade value)
          (when (or force? (not (equal? value (get-fade mainbar-pane))))
            (set-fade mainbar-pane value)
            (invalidate-view mainbar)))
        
        (cond ((<= dist 10.)
               (fade #f))
              ((> dist 100.)
               (fade 0.))
              (else
               (let ((d (- dist 10.)))
                 (fade (- 1. (/ d 90.)))))))))))
