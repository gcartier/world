;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Mainbar
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.interface.mainbar jazz


(import (jazz.cairo)
        (jazz.component)
        (jazz.geometry)
        (jazz.graphic)
        (jazz.view)
        (world)
        (world.context)
        (world.geometry)
        (world.interface)
        (world.interface.sheet)
        (world.pane)
        (world.texture)
        (world.window))


(definition protected mainbar-pane
  #f)

(definition protected mainbar-sheet
  #f)

(definition protected mainbar
  #f)


(definition protected (setup-mainbar view)
  (let ((window (current-window)))
    (let ((position {Point 10 10})
          (size {Dimension 800 40}))
      (let ((texture (make-cairo-texture (get-width size) (get-height size) retina?: #t)))
        (let ((pane (make-sheet-pane
                      name: 'mainbar
                      position: position
                      size: size
                      expanse: (resolution->expanse size)
                      resolution: size
                      texture: texture
                      root: view)))
          (let ((sheet (get-sheet pane)))
            (register-sheet window sheet)
            (invalidate-view view)
            (set! mainbar-pane pane)
            (set! mainbar-sheet sheet)
            (set! mainbar view)))))))


(definition protected (fade-mainbar pos)
  (when (get-visible? mainbar)
    (unless (get-mouse-down?)
      (let ((sheet-pos (get-position mainbar-sheet)))
        (let ((rect (rect->rect$fl$ (offset-rect (get-rect mainbar) (get-h sheet-pos) (get-v sheet-pos)))))
          (let ((dist (rectangle-distance rect pos)))
            (define (fade value)
              (set-fade mainbar-pane value)
              (invalidate-view mainbar))
            
            (cond ((<= dist 10.)
                   (fade #f))
                  ((> dist 100.)
                   (fade 0.))
                  (else
                   (let ((d (- dist 10.)))
                     (fade (- 1. (/ d 90.)))))))))))))
