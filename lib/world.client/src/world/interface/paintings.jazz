;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Paintings
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.interface.paintings jazz


(import (jazz.geometry)
        (gaea.geometry)
        (world)
        (world.asset)
        (world.autoload)
        (world.context)
        (world.entity)
        (world.interface.showcase)
        (world.interface.tiles)
        (world.material)
        (world.model)
        (world.object)
        (world.painting)
        (world.polygon)
        (world.quad))


(class Paintings-Showcase extends World-Showcase
  
  
  (method override (showcase-front self)
    0.)
  
  
  (method override (showcase-back self)
    0.)
  
  
  (method override (showcase-top self)
    .55)
  
  
  (method override (showcase-radius self)
    .35)
  
  
  (method override (showcase-spacing self)
    1.15)
  
  
  (method override (showcase-wait? self)
    #t)
  

  (method override (showcase-elements self showing)
    (let ((world (current-world)))
      (let ((camera (cache-camera self))
            (spacing (showcase-spacing self))
            (x 0.)
            (y 0.)
            (z 0.))
        (let ((assets (collect-paintings world)))
          (map (lambda (asset)
                 (let ((path (string-path asset)))
                   (let ((entity (new Painting parent: self model: path position: (vertex x y z))))
                     (set-model-update entity
                       (lambda (entity model)
                         (let ((bounds (get-bounds model)))
                           (let ((depth (cuboid-depth bounds))
                                 (height (cuboid-height bounds)))
                             (let ((max (max depth height)))
                               (let ((scaling (if (> max 1.) (/ 1. max) 1.)))
                                 (set-scaling entity scaling)))))))
                     (set-camera entity camera)
                     (increase! z spacing)
                     entity)))
               (sort di<? assets key: string-path))))))
  
  
  (method override (showcase-sun self)
    (vertex -1000. 20. -5.))
  
  
  (method override (draw-selection self)
    (when selection
      (draw-selection-quad self (texture-quad self selection))))
  
  
  (method override (selection-addable? self)
    #t)
  
  
  (method override (ray-closest-element self orig <vertex> dir <vertex>)
    (let ((entities (cache-elements self)))
      (let ((closest #f)
            (distance #f))
        (loop (for n from 0 below (vector-length entities))
              (let ((entity (vector-ref entities n)))
                (let ((poly (texture-quad-no-model self entity)))
                  (let ((cls (ray-closest-triangle poly orig dir #f)))
                    (when cls
                      (bind (poly dist) cls
                        (when (or (not distance)
                                  (< dist distance))
                          (set! closest (list poly dist))
                          (set! distance dist))))))))
        closest)))
  
  
  (method (texture-quad-no-model self entity)
    (let ((pos (get-position entity))
          (half .5))
      (let ((v1 (vertex+ pos (vertex 0. (- half) (- half))))
            (v2 (vertex+ pos (vertex 0. half (- half))))
            (v3 (vertex+ pos (vertex 0. half half)))
            (v4 (vertex+ pos (vertex 0. (- half) half))))
        (make-quad entity v1 v2 v3 v4))))
  
  
  (method (texture-quad self entity)
    (let ((pos (get-position entity))
          (scale (get-scale entity))
          (model (cache-model entity)))
      (let ((bounds (get-bounds model)))
        (let ((height (cuboid-height bounds))
              (depth (cuboid-depth bounds)))
          (let ((hy (/ (* height (vertex-y scale)) 2.))
                (hz (/ (* depth (vertex-z scale)) 2.)))
            (let ((v1 (vertex+ pos (vertex 0. (- hy) (- hz))))
                  (v2 (vertex+ pos (vertex 0. hy (- hz))))
                  (v3 (vertex+ pos (vertex 0. hy hz)))
                  (v4 (vertex+ pos (vertex 0. (- hy) hz))))
              (make-quad entity v1 v2 v3 v4)))))))))
