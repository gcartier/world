;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Evolution Panel
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.interface.evolution jazz


(import (jazz.component)
        (jazz.graphic)
        (jazz.io)
        (jazz.markup)
        (jazz.outline)
        (jazz.resource)
        (jazz.tree)
        (jazz.ui)
        (jazz.window)
        (gaea.geometry)
        (world)
        (world.context)
        (world.event)
        (world.evolution)
        (world.interface.panel)
        (world.settings)
        (world.udp))


(definition protected view-replay-directory
  #f)

(definition protected (set-view-replay-directory proc)
  (set! view-replay-directory proc))

(definition protected (reset-view-replay-directory)
  (set! view-replay-directory #f))


(definition protected evolutions-max
  (world-setting 'together.evolutions-max 20))

(definition protected (set-evolutions-max max)
  (set! evolutions-max max))


(class Evolution-Panel extends World-Panel
  
  
  (slot names      initialize #f accessors generate)
  (slot evolutions initialize #f accessors generate)
  (slot channels   initialize #f accessors generate)
  (slot moments    initialize #f accessors generate)
  (slot base-time  initialize 0. accessors generate)
  (slot now        initialize #f accessors generate)
  
  
  (form
    (<install>                                       size: {Dimension 520 639} background: {Color red: .000 green: .000 blue: .000 alpha: .450} layout-type: fill
      (<Border-View>                   name: border  border-type: edge style: entry layout-type: fill
        (<Scroller-View>                             style: document hscroll?: #f vscroll?: #t
          (<content~>                                layout-type: fill
            (<Tree-Header>             name: header  style: document empty-background: none
              (<content~>
                (<Evolution-Tree>      name: entries portfolio: :images filled-column: data4 multiple-selection?: #t selection-mode: cell show-unfocused-selection?: #f background: #f
                  (<Tree-Node-Column>  name: time    title: "Time" width: 120 controls?: #f display-images?: #f display-levels?: #f)
                  (<Tree-Label-Column> name: tier    title: "Tier" width: 110)
                  (<Tree-Label-Column> name: event   title: "Event" width: 100)
                  (<Tree-Label-Column> name: origin  title: "Origin" width: 110)
                  (<Tree-Label-Column> name: channel title: "Channel" width: 90)
                  (<Tree-Label-Column> name: kind    title: "Kind" width: 75)
                  (<Tree-Label-Column> name: data1   title: "Data1" width: 75)
                  (<Tree-Label-Column> name: data2   title: "Data2" width: 75)
                  (<Tree-Label-Column> name: data3   title: "Data3" width: 75)
                  (<Tree-Label-Column> name: data4   title: "Data4" width: 75)))))))))
  
  
  (proclaim (not check bounds zero)
            (warn optimizations))

  
  (method package (view-evolutions-at self (now #f))
    (set! self.now now)
    (let ((world (current-world))
          (tree (locate self 'entries))
          (color {Color World-Red})
          (data-color {Color White})
          (now-row #f)
          (numerical-test
            (lambda (value value/range)
              (if (pair? value/range)
                  (bind (start end) value/range
                    (between? value start end))
                (= value value/range)))))
      (define (determine-sorted)
        (let ((sorted-columns (get-sorted-columns tree)))
          (if (null? sorted-columns)
              (values #f #f)
            (let ((pair (car sorted-columns)))
              (values (car pair) (cdr pair))))))
      
      (let ((filtered (get-filtered-columns tree))
            (entries (new-queue))
            (total 0))
        (receive (sorted-column sorted-direction) (determine-sorted)
          ;; scan
          (iterate-table evolutions
            (lambda (id <fx> evolution <Evolution>)
              (define filters
                (map (lambda (pair)
                       (bind (column type . values) pair
                         (case (get-rank column)
                           ((0) (lambda (n) (member? (- (evolutionary-udp-time evolution n) base-time) values test: numerical-test)))
                           ((1) (lambda (n) (memv? id values)))
                           ((2) (lambda (n) (memv? (evolutionary-udp-id evolution n) values)))
                           ((3) (lambda (n) (memv? (evolutionary-udp-origin evolution n) values)))
                           ((4) (lambda (n) (memv? (evolutionary-udp-channel evolution n) values)))
                           ((5) (lambda (n) (memv? (evolutionary-udp-kind evolution n) values)))
                           ((6) (lambda (n) (member? (evolutionary-udp-data1 evolution n) values test: numerical-test)))
                           ((7) (lambda (n) (member? (evolutionary-udp-data2 evolution n) values test: numerical-test)))
                           ((8) (lambda (n) (member? (evolutionary-udp-data3 evolution n) values test: numerical-test)))
                           ((9) (lambda (n) (member? (evolutionary-udp-data4 evolution n) values test: numerical-test))))))
                     filtered))
              
              (unless (empty? evolution)
                (let ((first (first-position evolution))
                      (last (last-position evolution)))
                  (define (find-now)
                    (if (not now)
                        (values first (+ first 1))
                      (loop (for n from first to last)
                            (for time = (evolutionary-udp-time evolution n))
                            (when (> time now)
                              (return (values (- n 1) n)))
                            (finally (values (- last 1) last)))))
                  
                  (receive (l r) (find-now)
                    (define (scan n found)
                      (let ((time (evolutionary-udp-time evolution n)))
                        (if (loop (for filter in filters)
                                  (every (filter n)))
                            (begin
                              (when (< found evolutions-max)
                                (let ((user-data (vector time
                                                         id
                                                         (evolutionary-udp-id evolution n)
                                                         (evolutionary-udp-origin evolution n)
                                                         (evolutionary-udp-channel evolution n)
                                                         (evolutionary-udp-kind evolution n)
                                                         (evolutionary-udp-data1 evolution n)
                                                         (evolutionary-udp-data2 evolution n)
                                                         (evolutionary-udp-data3 evolution n)
                                                         (evolutionary-udp-data4 evolution n))))
                                  (enqueue entries user-data)))
                              (increase! total)
                              #t)
                          #f)))
                    
                    ;; scan left
                    (let ((found 0))
                      (loop (for n from l downto first)
                            (when (scan n found)
                              (increase! found))))
                    ;; scan right
                    (let ((found 0))
                      (loop (for n from r to last)
                            (when (scan n found)
                              (increase! found)))))))))
          ;; gather neighborhood
          (let ((entries (queue-list entries)))
            (define (time-ref entry)
              (vector-ref entry 0))
            
            (define (now-neighborhood)
              (let ((closest (sort-stable (lambda (x y)
                                            (define (key entry)
                                              (let ((time (vector-ref entry 0)))
                                                (abs (- time now))))
                                            
                                            (< (key x) (key y)))
                                         entries)))
                (let ((displayed (if (<= (length closest) evolutions-max)
                                     closest
                                   (subseq closest 0 evolutions-max))))
                  (let ((neighborhood (if (not sorted-column)
                                          (sort-stable (lambda (x y) (< (time-ref x) (time-ref y))) displayed)
                                        (let ((rank (get-rank sorted-column)))
                                          (case rank
                                            ((0 6 7 8 9)
                                             (let ((test (case sorted-direction
                                                           ((ascending) <)
                                                           ((descending) >))))
                                               (sort test displayed key: (lambda (entry) (vector-ref entry rank)))))
                                            (else
                                             (let ((test (case sorted-direction
                                                           ((ascending) di<?)
                                                           ((descending) di>?)))
                                                   (present (case rank
                                                              ((1) present-tier)
                                                              ((2) present-event)
                                                              ((3) present-origin)
                                                              ((4) present-channel)
                                                              ((5) present-kind))))
                                               (sort test displayed key: (lambda (entry) (present self (vector-ref entry rank))))))))))
                        @is-this-interesting-in-some-cases?
                        (closest-entry (and (not-null? closest) (car closest))))
                    (let ((left (and (not-null? neighborhood) (time-ref (minimum neighborhood key: time-ref))))
                          (right (and (not-null? neighborhood) (time-ref (maximum neighborhood key: time-ref))))
                          (most-recent-entry (let (loop (scan neighborhood) (previous #f))
                                               (if (null? scan)
                                                   previous
                                                 (let ((entry (car scan)))
                                                   (if (> (time-ref entry) now)
                                                       previous
                                                     (loop (cdr scan) entry)))))))
                      (values neighborhood most-recent-entry left right))))))
            
            (define (present-data data)
              (if (= data -1.)
                  ""
                (format "{r precision: 3}" data)))
            
            (define (present-data1 event data)
              (cond ((= event udp-id-debug-audio)
                     (format "{r precision: 3}" data))
                    ((= event udp-id-throttle-upload)
                     (format "{r precision: 3}" data))
                    ((= event udp-id-congestion-state)
                     "")
                    ((= event udp-id-moment)
                     (vector-ref #("NONE" "F_ERR" "F_CRIT" "F_WARN" "ERROR" "WARNING" "DEBUG" "LOG")
                       (flonum->fixnum data)))
                    (else
                     ;; usually sequence
                     (->string data))))
            
            (define (present-data2 event data)
              (cond ((= event udp-id-receive-ack)
                     (format "{r precision: 3}" data))
                    ((= event udp-id-debug-audio)
                     (format "{r precision: 3}" data))
                    ((= event udp-id-congestion-state)
                     (vector-ref #("Startup" "Drain" "ProbeBW" "ProbeRTT")
                       (flonum->fixnum data)))
                    ((= event udp-id-moment)
                     "")
                    (else
                     ;; usually frame
                     (->string data))))
            
            (define (present-data3 event data)
              (cond ((= event udp-id-retain-packet)
                     (format "{r precision: 3}" data))
                    ((= event udp-id-insert-packet)
                     (format "{r precision: 3}" data))
                    ((= event udp-id-receive-ack)
                     (format "{r precision: 6}" (- data base-time)))
                    ((= event udp-id-traffic-rate)
                     (format "{r precision: 0}." data))
                    (else
                     (present-data data))))
            
            (define (present-data4 event data tier)
              (cond ((= data -1.)
                     "")
                    ((= event udp-id-read-data)
                     (format "{r precision: 0}" data))
                    ((= event udp-id-write-data)
                     (format "{r precision: 0}" data))
                    ((= event udp-id-create-packet)
                     (format "{r precision: 3}" data))
                    ((= event udp-id-receive-ack)
                     (format "{r precision: 6}" (- data base-time)))
                    ((= event udp-id-traffic-rate)
                     (format "{r precision: 0}." data))
                    ((= event udp-id-moment)
                     (if moments
                         (let ((index (table-ref moments tier)))
                           (if index
                               (let ((id (flonum->fixnum data)))
                                 (let ((entry (table-ref index id #f)))
                                   (if entry
                                       (get-property entry 'message)
                                     "")))
                             ""))
                       ""))
                    (else
                     (present-data data))))
            
            ;; populate
            (receive (neighborhood now-entry left right) (now-neighborhood)
              (parameterize ((inhibit-updates? #t)
                             (inhibit-scrollee-layouts? #t))
                (remove-every-row tree)
                (when sorted-column
                  (sort-column tree sorted-column sorted-direction sort-rows?: #f))
                (with-update-locked self
                  (lambda ()
                    (for-each (lambda (user-data)
                                (bind-vector (time tier event origin channel kind data1 data2 data3 data4) user-data
                                  (let ((tier (present-tier self tier))
                                        (time (present-time self time))
                                        (event (present-event self event))
                                        (origin (present-origin self origin))
                                        (channel (present-channel self channel))
                                        (kind (present-kind self kind))
                                        (data1 (present-data1 event data1))
                                        (data2 (present-data2 event data2))
                                        (data3 (present-data3 event data3))
                                        (data4 (present-data4 event data4 tier)))
                                    (let ((row (add-row tree
                                                        state: 'expanded
                                                        children: (list (new Tree-Node title: time font: {Font Label-User} color: color)
                                                                        (new Tree-Label title: tier font: {Font Label-User} color: {Color World-Orange})
                                                                        (new Tree-Label title: event font: {Font Label-User} color: {Color World-Darker-Green})
                                                                        (new Tree-Label title: origin font: {Font Label-User} color: {Color World-Blue})
                                                                        (new Tree-Label title: channel font: {Font Label-User} color: {Color World-Blue})
                                                                        (new Tree-Label title: kind font: {Font Label-User} color: {Color World-Blue})
                                                                        (new Tree-Label title: data1 font: {Font Label-User} color: data-color)
                                                                        (new Tree-Label title: data2 font: {Font Label-User} color: data-color)
                                                                        (new Tree-Label title: data3 font: {Font Label-User} color: data-color)
                                                                        (new Tree-Label title: data4 font: {Font Label-User} color: data-color))
                                                        user-data: user-data)))
                                      (when (eq? user-data now-entry)
                                        (set! now-row row))
                                      row))))
                              neighborhood)
                    (when now-row
                      (let ((line (row->line tree now-row)))
                        (ensure-row-displayed tree line center?: #t)
                        (let ((data (get-cell-data tree (new Cell line 0))))
                          (set-color data {Color Light-Gray})))))))
              (layout-scrollee tree)
              (values (length neighborhood) total left right)))))))
  
  
  (proclaim (default check bounds zero)
            (default warn optimizations))
  
  
  (method package (clear-evolutions self)
    (let ((tree (locate self 'entries)))
      (remove-every-row tree)))
  
  
  (method package (present-tier self id)
    (or (table-ref names id #f)
        "<unknown>"))
  
  
  (method package (present-time self time)
    (format "{r precision: 6}" (- time base-time)))
  
  
  (method package (present-event self event)
    (symbol->string (evolution-id->name event)))
  
  
  (method package (present-origin self origin)
    (if (= origin -1.)
        ""
      ;; client-no
      (or (table-ref names (flonum->fixnum origin) #f)
          (->string origin))))
  
  
  (method package (present-channel self no)
    (if (= no -1.)
        ""
      (let ((info (table-ref channels (flonum->fixnum no) #f)))
        (if info
            (->string (first info))
          (->string no)))))
  
  
  (method package (present-kind self kind)
    (if (= kind -1.)
        ""
      (symbol->string (udp-name (flonum->fixnum kind))))))


;;;
;;;; Evolution-Tree
;;;


(class Evolution-Tree extends Tree-View))
