;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Open
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is WorldScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2014
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See http://github.com/gcartier/world for details.


(module world.interface.zones jazz


(import (jazz.io)
        (jazz.jml)
        (jazz.graphic)
        (jazz.library)
        (jazz.ui)
        (world)
        (world.autoload)
        (world.io)
        (world.interface.frame)
        (world.syntax (phase syntax))
        (world.window))


(class Zone-Open extends World-Frame
  
  
  (property start-script? initialize #t accessors generate)
  
  
  (form
    (<install>                                    size: {Dimension 420 639} layout-type: border
      (<caption~>                                 title: "Zones")
      (<content~>                                 layout-type: fill
        (<Scroller-View>                          style: document hscroll?: #t vscroll?: #t
          (<content~>                             layout-type: fill
            (<Tree-Header>                        style: document shown?: #f
              (<content~>
                (<Tree-View>          name: zones portfolio: :images filled-column: zone double-click-handler: {Event-Handler :form on-double-click} return-press-handler: {Event-Handler :form on-return-press} escape-press-handler: {Event-Handler :form on-escape-press}
                  (<Tree-Node-Column> name: zone  title: "Zone" width: 235 toplevel-controls?: #f display-images?: #f display-levels?: #f)))))))))
  
  
  (method override (conclude initargs)
    (nextmethod initargs)
    (view-zones))
  
  
  (method override (focus-default)
    (acquire-focus~ (get-tree)))
  
  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method (get-tree)
    (locate 'zones))
  
  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method (on-double-click evt)
    (open-selected))
  
  
  (method override (on-return-press evt)
    (open-selected))
  
  
  (method override (on-escape-press evt)
    (close))
  
  
  (method (open-selected)
    (let ((world (current-world)))
      (let ((file (get-single-selected-data~ (get-tree))))
        (when file
          (close)
          (open-file file)))))
  
  
  (method (open-file file)
    (with-window-cursor :wait
      (lambda ()
        (let ((world (current-world)))
          (let ((zone (open-zone file start-script?: start-script?)))
            (display-message~ world (get-title~ zone)))))))
  
  
  ;;;
  ;;;; Update
  ;;;
  
  
  (method (view-zones)
    (let ((world (current-world)))
      (define (collect-zones)
        (let ((zones-directories (get-zones-directories~ world))
              (queue (new-queue)))
          (for-each  (lambda (directory)
                       (iterate-directory~ directory
                         (lambda (path kind)
                           (unless (or (member? "template" path test: filename=?)
                                       (filename=? (car path) "tutorial"))
                             (let ((file (new-file~ directory path)))
                               (when (extension=? (get-extension~ file) "zone")
                                 (enqueue queue (cons (butlast path) file))))))
                         full?: #f
                         files?: #t
                         directories?: #f))
                     zones-directories)
          (queue-list queue)))
      
      (define (partition-zones zones)
        (partition zones key: (lambda (info)
                                (let ((path (car info)))
                                  (if (> (length path) 1)
                                      (car path)
                                    "")))
          test: filename=?))
      
      (let ((tree (get-tree)))
        (remove-every-row~ tree)
        (with-update-locked
          (lambda ()
            (define (add-children father children)
              (for-each (lambda (info)
                          (bind (path . file) info
                            (let ((title (extract-base (join (if (> (length path) 1) (cdr path) path) "/"))))
                              (add-row~ tree
                                father: father
                                children: (list (new Tree-Node title: title font: {Font Label-User} color: {Color White}))
                                user-data: file))))
                        children))
            
            (for-each (lambda (partition)
                        (bind (title . children) partition
                          (if (empty-string? title)
                              (add-children #f children)
                            (let ((father (add-row~ tree
                                            state: 'expanded
                                            children: (list (new Tree-Node title: title font: {Font Label-User} color: {Color red: 220 green: 0 blue: 0})))))
                              (add-children father children)))))
                      (sort ci<? (partition-zones (collect-zones)) key: car)))))))))
