;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; Zone Open
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.interface.zones jazz


(import (jazz.graphic)
        (jazz.handler)
        (jazz.markup)
        (jazz.outline)
        (jazz.tree)
        (jazz.ui)
        (world)
        (world.context)
        (world.interface.frame)
        (world.portal)
        (world.settings)
        (world.window))


(class Zone-Open extends World-Frame
  
  
  (property start-script? initialize #t accessors generate)
  
  
  (form
    (<install>                    size: {Dimension 420 639} layout-type: border
      (<caption~>                 title: "Zones")
      (<content~>                 layout-type: fill
        (<Zones-View> name: zones))))
  
  
  (method override (focus-default self)
    (acquire-focus (get-tree self)))
  
  
  (method package (get-tree self)
    (locate self '(zones zones))))


;;;
;;;; Zones-View
;;;


(class Zones-View extends Scroller-View
  
  
  (form
    (<install>                                    style: document hscroll?: #t vscroll?: #t
      (<content~>                                 layout-type: fill
        (<Tree-Header>                            style: document shown?: #f
          (<content~>
            (<Tree-View>          name: zones portfolio: :images filled-column: zone multiple-selection?: #t background: #f double-click-handler: {Event-Handler :form on-double-click} return-press-handler: {Event-Handler :form on-return-press} escape-press-handler: {Event-Handler :form on-escape-press}
              (<Tree-Node-Column> name: zone  title: "Zone" width: 235 controls?: #f toplevel-controls?: #f display-images?: #f display-levels?: #f)))))))
    
  
  (method override (conclude self initargs)
    (nextmethod self initargs)
    (view-zones self))

  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method package (get-tree self)
    (locate self 'zones))
  
  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method (on-double-click self evt)
    (open-selected self))
  
  
  (method override (on-return-press self evt)
    (open-selected self))
  
  
  (method override (on-escape-press self evt)
    (close (find-ascendant self World-Frame)))
  
  
  ;;;
  ;;;; Open
  ;;;
  
  
  (method package (open-selected self)
    (let ((zone (get-single-selected-data (get-tree self))))
      (when zone
        (close (find-ascendant self World-Frame))
        (open-zone self zone))))
  
  
  (method (open-zone self zone)
    (with-window-cursor :wait
      (lambda ()
        (zone-load zone))))
  
  
  ;;;
  ;;;; Update
  ;;;
  
  
  (method (view-zones self)
    (update-zones self))
  
  
  (method (update-zones self)
    (define (partition-zones)
      (partition (available-zones (current-tier)) key: caar))
    
    (let ((tree (get-tree self)))
      (remove-every-row tree)
      (with-update-locked self
        (lambda ()
          (define (add-start)
            (add-row tree
                     children: (list (new Tree-Node title: "World" font: {Font Label-User} color: {Color White}))
                     user-data: 'start))
          
          (define (add-zones zones)
            (define (add-levels father levels)
              (let ((partition-list (partition levels key: (lambda (level) (null? (cdar level))))))
                (for-each (lambda (partition-set)
                            (bind (toplevel? . levels) partition-set
                              (if toplevel?
                                  (for-each (lambda (info)
                                              (bind (path zone . presentation) info
                                                (unless (or (equal? zone '(zone "welcome"))
                                                            (equal? zone '(zone "tutorial")))
                                                  (add-row tree
                                                           father: father
                                                           children: (list (new Tree-Node title: presentation font: {Font Label-User} color: {Color White}))
                                                           user-data: zone))))
                                            (sort ci<? levels key: cddr))
                                (let ((partition-list (partition levels key: caar test: equal?)))
                                  (for-each (lambda (partition-set)
                                              (bind (name . levels) partition-set
                                                (let ((father (add-row tree
                                                                       state: 'expanded
                                                                       father: father
                                                                       children: (list (new Tree-Node title: name font: {Font Label-User} color: {Color red: 220 green: 0 blue: 0})))))
                                                  (add-levels father (map (lambda (info)
                                                                            (cons (cdar info) (cdr info)))
                                                                          levels)))))
                                            (sort ci<? partition-list key: car))))))
                          (sort < partition-list key: (lambda (partition-set) (if (car partition-set) 0 1))))))
            
            (add-levels #f (map (lambda (info)
                                  (cons (cdar info) info))
                                zones)))
          
          (define (add-instances zones)
            (let ((father (add-row tree
                                   state: 'expanded
                                   children: (list (new Tree-Node title: "instances" font: {Font Label-User} color: {Color red: 220 green: 0 blue: 0})))))
              (for-each (lambda (info)
                          (bind (zone . presentation) info
                            (add-row tree
                                     father: father
                                     children: (list (new Tree-Node title: presentation font: {Font Label-User} color: {Color White}))
                                     user-data: zone)))
                        (sort ci<? zones key: cdr))))
          
          (add-start)
          (for-each (lambda (partition)
                      (bind (kind . zones) partition
                        (case kind
                          ((zone)
                           (add-zones zones))
                          ((instance)
                           (add-instances zones)))))
                    (sort < (partition-zones) key: (lambda (partition) (if (eq? (car partition) 'instance) 1 0))))
          (select-first-data tree)))))))
