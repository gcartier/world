;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; World Open
;;;


(module world.interface.zones jazz


(import (jazz.io)
        (jazz.jml)
        (jazz.graphic)
        (jazz.graphic.opengl.glew)
        (jazz.library)
        (jazz.literals)
        (jazz.platform)
        (jazz.platform.cairo)
        (jazz.system)
        (jazz.ui)
        (jazz.ui.view)
        (world)
        (world.io)
        (world.interface)
        (world.interface.frame))


(class Zone-Open extends World-Frame
  
  
  (form
    (<install>                                     size: {Dimension 420 639} layout-type: border
      (<caption~>                                  title: "Zones")
      (<content~>                                  layout-type: fill
        (<Scroller-View>                           style: document hscroll?: #t vscroll?: #t
          (<content~>                              layout-type: fill
            (<Tree-Header>                         style: document shown?: #f
              (<content~>
                (<Tree-View>          name: zones portfolio: :images filled-column: zone double-click-handler: {Event-Handler :form on-double-click} return-press-handler: {Event-Handler :form on-return-press} escape-press-handler: {Event-Handler :form on-escape-press}
                  (<Tree-Node-Column> name: zone  title: "Zone" width: 235 toplevel-controls?: #f)))))))))
  
  
  (method override (conclude initargs)
    (nextmethod initargs)
    (view-zones))
  
  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method (get-tree)
    (locate 'zones))
  
  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method (on-double-click evt)
    (open-selected))
  
  
  (method override (on-return-press evt)
    (open-selected))
  
  
  (method override (on-escape-press evt)
    (close))
  
  
  (method (open-selected)
    (let ((file (get-single-selected-data~ (get-tree))))
      (when file
        (close)
        (open-file file)
        (update-title~ world))))
  
  
  (method (open-file file)
    (let ((zone (open-zone file)))
      (display-message~ world (get-title~ zone))))
  
  
  ;;;
  ;;;; Update
  ;;;
  
  
  (method (view-zones)
    (let ((world-directory (get-world-directory~ world)))
      (when world-directory
        (let ((tree (get-tree)))
          (remove-every-row~ tree)
          (with-update-locked
            (lambda ()
              (let ((directory (new-directory~ world-directory "zones")))
                (for-each (lambda (file)
                            (add-row~ tree children: (list (new Tree-Node image: {Image-Resource "Document"} title: (get-base~ file) font: {Font font-name: "Tahoma" point-size: 8 antialias: none} color: {Color White}))
                              user-data: file))
                          (collect-files~ directory (lambda (file) (extension=? (get-extension~ file) "zone")))))))))))))
