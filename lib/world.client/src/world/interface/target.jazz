;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Target Pane
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.interface.target jazz


(import (jazz.jml)
        (jazz.graphic)
        (jazz.tree)
        (jazz.ui)
        (world)
        (world.autoload)
        (world.entity)
        (world.geometry)
        (world.interface.pane)
        (world.syntax (phase syntax)))


(class Target-Pane extends World-Pane
  
  
  (form
    (<install>                                        size: {Dimension 420 639} background: {Color red: .000 green: .000 blue: .000 alpha: .450} layout-type: border layout-type: fill
      (<Border-View>                                  border-color: {Color Medium-Gray} border-type: edge style: entry layout-type: fill
        (<Scroller-View>                              style: document hscroll?: #t vscroll?: #t
          (<content~>                                 layout-type: fill
            (<Tree-Header>                            style: document shown?: #f
              (<content~>
                (<Target-Tree>         name: target   portfolio: :images filled-column: value show-unfocused-selection?: #f background: #f
                  (<Tree-Node-Column>  name: property title: "Property" width: 100 toplevel-controls?: #f display-images?: #f display-levels?: #f)
                  (<Tree-Label-Column> name: value    title: "Value" width: 65)))))))))
  
  
  (method (view-target)
    (let ((world (current-world))
          (tree (locate 'target))
          (title-color {Color World-Green})
          (section-color {Color red: 220 green: 0 blue: 0})
          (content-color {Color Light-Gray}))
      (remove-every-row~ tree)
      (with-update-locked
        (lambda ()
          (define (add-header title (color #f))
            (add-row~ tree
              state: 'expanded
              children: (list (new Tree-Node title: title font: {Font Label-User} color: (or color title-color))
                              (new Tree-Label title: "" font: {Font Label-User} color: content-color))))
          
          (define (add-section title (info #f))
            (add-row~ tree
              state: 'expanded
              children: (list (new Tree-Node title: title font: {Font Label-User} color: section-color)
                              (new Tree-Label title: (if info (->string info) "") font: {Font Label-User} color: content-color))))
          
          (define (add-info father title info)
            (add-row~ tree
              father: father
              state: 'expanded
              children: (list (new Tree-Node title: title font: {Font Label-User} color: content-color)
                              (new Tree-Label title: (->string info) font: {Font Label-User} color: content-color))))
          
          (define (add-title targ)
            (add-header (format "{a}" (category-name (class-of targ))))
            (add-header ""))
          
          (define (add-target targ)
            (let ((section (add-section "Target")))
              (let ((count (length (get-selection~ world))))
                (add-info section "target" (format "{a}{a}" (category-name (class-of targ)) (if (> count 1) (format " ({a} total)" count) "")))
                (add-info section "position" (present-vertex (get-position~ targ)))
                (add-info section "scale" (present-vertex (get-scale~ targ))))))
          
          (define (add-model targ)
            (when (is? targ Entity)
              (let ((model (cache-model~ targ))
                    (section (add-section "Model")))
                (add-info section "model" (format "{a}" (category-name (class-of model))))
                (add-info section "name" (get-name~ model)))))
          
          (let ((targ (first-target~ world)))
            (when targ
              (describe-target~ targ add-header add-section add-info add-title add-target add-model))))))))


;;;
;;;; Target-Tree
;;;


(class Target-Tree extends Tree-View
  
  
  (method override (mouse-down evt)
    )))
