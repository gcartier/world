;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Skybox
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2016
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.skybox jazz


(import (jazz.cairo)
        (jazz.opengl.glew)
        (world)
        (world.asset)
        (world.autoload)
        (world.camera)
        (world.geometry)
        (world.image)
        (world.material)
        (world.programs)
        (world.shape)
        (world.syntax (phase syntax))
        (world.texture))


(definition public (skybox-kind directory)
  (cond ((exists?~ (new-file~ directory "left.png")) 'left)
        ((exists?~ (new-file~ directory "lf.png")) 'lf)
        (else #f)))


(definition skyboxes
  '())


(definition public (get-skyboxes)
  skyboxes)


(definition public (prepare-skyboxes)
  (let ((world (current-world)))
    (define (collect-skyboxes)
      (define (add-skyboxes assets dir queue)
        (when (exists?~ dir)
          (iterate-directory~ dir
            (lambda (dir)
              (when (skybox-kind dir)
                (enqueue queue (new Skybox assets dir))))
            files?: #f
            directories?: #t)))
      
      (let ((queue (new-queue)))
        (iterate-assets~ world
          (lambda (assets)
            (add-skyboxes assets (new-directory~ (get-directory~ assets) "skybox") queue)))
        (sort di<? (queue-list queue) key: get-name~)))
    
    (set! skyboxes (collect-skyboxes))))


(definition public (find-skybox name)
  (find-if (lambda (skybox)
             (di=? (get-name~ skybox) name))
           skyboxes))


(definition skybox-mesh
  #f)

(definition skybox-program
  #f)


(definition public (prepare-skybox-program)
  (let ((zone (current-zone)))
    (when (not skybox-program)
      (let ((program (new Skybox-Program)))
        (let ((mesh (generate-cube-mesh)))
          (set-array~ mesh (create-array~ program mesh))
          (set! skybox-mesh mesh)
          (set! skybox-program program))))))


;;;
;;;; Skybox
;;;


(class Skybox extends Object
  
  
  (slot assets                  getter generate)
  (slot directory               getter generate)
  (slot kind      initialize #f getter generate)
  (slot sample    initialize #f getter generate)
  (slot material  initialize #f getter generate)
  
  
  (method override (initialize assets directory)
    (set! assets~self assets)
    (set! directory~self directory))
  
  
  (method override (print output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{s}" (get-name)))))
  
  
  (method public (get-name)
    (get-base~ directory))
  
  
  ;;;
  ;;;; Prepare
  ;;;
  
  
  (method public (prepare)
    (let ((size #f))
      (define (make-image base (sample? #f))
        (let ((asset (new Asset assets (list "skybox" (get-base~ directory) base))))
          (when sample?
            (set! sample asset))
          (bind-values (width height data) (read-image asset)
            (let ((image-size (new Dimension width height)))
              (if (not size)
                  (set! size image-size)
                (when (nu/=? image-size size)
                  (error "Inconsistant skybox sizes"))))
            data)))
      
      (define (close-image obj)
        (unless (u8vector? obj)
          (close~ obj)))
      
      (unless kind
        (let ((kind (or (skybox-kind directory)
                        (error "Unknown skybox format: {a}" (parse~ directory)))))
          (define (with-images proc)
            (case kind
              ((left)
               (proc (make-image "right")
                     (make-image "left")
                     (make-image "back")
                     (make-image "front" #t)
                     (make-image "up")
                     (make-image "down")))
              ((lf)
               (proc (make-image "ft" #t)
                     (make-image "bk")
                     (make-image "lf")
                     (make-image "rt")
                     (make-image "up")
                     (make-image "dn")))))
          
          (with-images
            (lambda (front back left right up down)
              (let ((texture (new Image-Texture (get-width~ size) (get-height~ size))))
                (map-texture-cube~ texture front back up down right left)
                (close-image front)
                (close-image back)
                (close-image left)
                (close-image right)
                (close-image up)
                (close-image down)
                (set! material~self (new Material name: 'skybox texture: texture))
                (set! kind~self kind))))))))
  
  
  (method public (sample-texture)
    (if (is? sample Image-Texture)
        sample
      (let ((file (make-brother~ sample "png")))
        (bind-values (image-width image-height surface) (cairo-surface-from-file file)
          (let ((data (cairo_image_surface_get_data surface)))
            (let ((texture (new Image-Texture image-width image-height data: data file: file)))
              (map-texture~ texture)
              (cairo_surface_destroy surface)
              (set! sample texture)
              sample))))))
  
  
  ;;;
  ;;;; Draw
  ;;;
  
  
  (method public (draw-skybox)
    (let ((camera (current-camera)))
      (let ((projection-matrix (get-projection-matrix~ camera))
            (view-matrix (make-view-matrix& (vertex& 0. 0. 0.) (get-lookat~ camera))))
        (use~ skybox-program)
        (glDepthFunc GL_LEQUAL)
        (bind-uniforms~ skybox-program projection-matrix view-matrix material)
        (draw-array~ skybox-mesh)
        (unbind-uniforms~ skybox-program)
        (glDepthFunc GL_LESS)
        (unuse~ skybox-program)
        (gl-check-error))))))
