;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; World Skybox
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.skybox jazz


(import (jazz.jml)
        (jazz.graphic)
        (jazz.graphic.opengl.glew)
        (world)
        (world.autoload)
        (world.draw)
        (world.geometry)
        (world.syntax (phase syntax))
        (world.texture))


;;;
;;;; Skybox
;;;


(class Skybox extends Object
  
  
  (slot directory               getter generate)
  (slot kind      initialize #f getter generate)
  (slot front     initialize #f getter generate)
  (slot left      initialize #f getter generate)
  (slot back      initialize #f getter generate)
  (slot right     initialize #f getter generate)
  (slot up        initialize #f getter generate)
  (slot down      initialize #f getter generate)
  
  
  (method override (initialize directory)
    (set! directory~self directory))
  
  
  (method override (print output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{s}" (get-name)))))
  
  
  (method public (get-name)
    (get-base~ directory))
  
  
  (method public (prepare)
    (define (make-texture name)
      (make-file-texture (new-file~ directory name) mipmap?: #f
        parameters: (lambda ()
                      (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_WRAP_S GL_CLAMP_TO_EDGE)
                      (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_WRAP_T GL_CLAMP_TO_EDGE))))
    
    (unless kind
      (set! kind (cond ((exists?~ (new-file~ directory "left.png")) 'left)
                       ((exists?~ (new-file~ directory "lf.png")) 'lf)
                       (else (error "Unknown skybox format: {a}" (parse~ directory)))))
      (case kind
        ((left)
         (set! front (make-texture "front.png"))
         (set! left  (make-texture "left.png"))
         (set! back  (make-texture "back.png"))
         (set! right (make-texture "right.png"))
         (set! up    (make-texture "up.png"))
         (set! down  (make-texture "down.png")))
        ((lf)
         (set! front (make-texture "ft.png"))
         (set! left  (make-texture "lf.png"))
         (set! back  (make-texture "bk.png"))
         (set! right (make-texture "rt.png"))
         (set! up    (make-texture "up.png"))
         (set! down  (make-texture "dn.png"))))))
  
  
  (method public (draw)
    (glPushMatrix)
    
    ;; Reset and transform the matrix.
    (glLoadIdentity)
    (let ((dir (get-sight~ (get-eye-lookat~ (current-world)))))
      (gluLookAt 0. 0. 0. (vertex-x dir) (vertex-y dir) (vertex-z dir) 0. 1. 0.))
    
    ;; Enable/Disable features
    (glPushAttrib GL_ENABLE_BIT)
    (glEnable GL_TEXTURE_2D)
    (glDisable GL_DEPTH_TEST)
    (glDisable GL_LIGHTING)
    (glDisable GL_BLEND)
    
    ;; Just in case we set all vertices to white.
    (glColor4f 1. 1. 1. 1.)
    
    (case kind
      ((left)
       ;; Render the front quad
       (glBindTexture GL_TEXTURE_2D (get-texture~ front))
       (glBegin GL_QUADS)
       (glTexCoord2f 0. 1.)
       (glVertex3f 1. -1. -1.)
       (glTexCoord2f 1. 1.)
       (glVertex3f -1. -1. -1.)
       (glTexCoord2f 1. 0.)
       (glVertex3f -1. 1. -1.)
       (glTexCoord2f 0. 0.)
       (glVertex3f 1. 1. -1.)
       (glEnd)
       
       ;; Render the left quad
       (glBindTexture GL_TEXTURE_2D (get-texture~ left))
       (glBegin GL_QUADS)
       (glTexCoord2f 0. 1.)
       (glVertex3f 1. -1. 1.)
       (glTexCoord2f 1. 1.)
       (glVertex3f 1. -1. -1.)
       (glTexCoord2f 1. 0.)
       (glVertex3f 1. 1. -1.)
       (glTexCoord2f 0. 0.)
       (glVertex3f 1. 1. 1.)
       (glEnd)
       
       ;; Render the back quad
       (glBindTexture GL_TEXTURE_2D (get-texture~ back))
       (glBegin GL_QUADS)
       (glTexCoord2f 0. 1.)
       (glVertex3f -1. -1. 1.)
       (glTexCoord2f 1. 1.)
       (glVertex3f 1. -1. 1.)
       (glTexCoord2f 1. 0.)
       (glVertex3f 1. 1. 1.)
       (glTexCoord2f 0. 0.)
       (glVertex3f -1. 1. 1.)
       (glEnd)
       
       ;; Render the right quad
       (glBindTexture GL_TEXTURE_2D (get-texture~ right))
       (glBegin GL_QUADS)
       (glTexCoord2f 0. 1.)
       (glVertex3f -1. -1. -1.)
       (glTexCoord2f 1. 1.)
       (glVertex3f -1. -1. 1.)
       (glTexCoord2f 1. 0.)
       (glVertex3f -1. 1. 1.)
       (glTexCoord2f 0. 0.)
       (glVertex3f -1. 1. -1.)
       (glEnd)
       
       ;; Render the top quad
       (glBindTexture GL_TEXTURE_2D (get-texture~ up))
       (glBegin GL_QUADS)
       (glTexCoord2f 0. 0.)
       (glVertex3f 1. 1. 1.)
       (glTexCoord2f 0. 1.)
       (glVertex3f 1. 1. -1.)
       (glTexCoord2f 1. 1.)
       (glVertex3f -1. 1. -1.)
       (glTexCoord2f 1. 0.)
       (glVertex3f -1. 1. 1.)
       (glEnd)
       
       ;; Render the bottom quad
       (glBindTexture GL_TEXTURE_2D (get-texture~ down))
       (glBegin GL_QUADS)
       (glTexCoord2f 0. 1.)
       (glVertex3f 1. -1. 1.)
       (glTexCoord2f 1. 1.)
       (glVertex3f -1. -1. 1.)
       (glTexCoord2f 1. 0.)
       (glVertex3f -1. -1. -1.)
       (glTexCoord2f 0. 0.)
       (glVertex3f 1. -1. -1.)
       (glEnd))
      ((lf)
       ;; Render the front quad
       (glBindTexture GL_TEXTURE_2D (get-texture~ front))
       (glBegin GL_QUADS)
       (glTexCoord2f 0. 1.)
       (glVertex3f 1. -1. -1.)
       (glTexCoord2f 1. 1.)
       (glVertex3f -1. -1. -1.)
       (glTexCoord2f 1. 0.)
       (glVertex3f -1. 1. -1.)
       (glTexCoord2f 0. 0.)
       (glVertex3f 1. 1. -1.)
       (glEnd)
       
       ;; Render the left quad
       (glBindTexture GL_TEXTURE_2D (get-texture~ left))
       (glBegin GL_QUADS)
       (glTexCoord2f 0. 1.)
       (glVertex3f -1. -1. -1.)
       (glTexCoord2f 1. 1.)
       (glVertex3f -1. -1. 1.)
       (glTexCoord2f 1. 0.)
       (glVertex3f -1. 1. 1.)
       (glTexCoord2f 0. 0.)
       (glVertex3f -1. 1. -1.)
       (glEnd)
       
       ;; Render the back quad
       (glBindTexture GL_TEXTURE_2D (get-texture~ back))
       (glBegin GL_QUADS)
       (glTexCoord2f 0. 1.)
       (glVertex3f -1. -1. 1.)
       (glTexCoord2f 1. 1.)
       (glVertex3f 1. -1. 1.)
       (glTexCoord2f 1. 0.)
       (glVertex3f 1. 1. 1.)
       (glTexCoord2f 0. 0.)
       (glVertex3f -1. 1. 1.)
       (glEnd)
       
       ;; Render the right quad
       (glBindTexture GL_TEXTURE_2D (get-texture~ right))
       (glBegin GL_QUADS)
       (glTexCoord2f 0. 1.)
       (glVertex3f 1. -1. 1.)
       (glTexCoord2f 1. 1.)
       (glVertex3f 1. -1. -1.)
       (glTexCoord2f 1. 0.)
       (glVertex3f 1. 1. -1.)
       (glTexCoord2f 0. 0.)
       (glVertex3f 1. 1. 1.)
       (glEnd)
       
       ;; Render the top quad
       (glBindTexture GL_TEXTURE_2D (get-texture~ up))
       (glBegin GL_QUADS)
       (glTexCoord2f 1. 1.)
       (glVertex3f 1. 1. -1.)
       (glTexCoord2f 0. 1.)
       (glVertex3f 1. 1. 1.)
       (glTexCoord2f 0. 0.)
       (glVertex3f -1. 1. 1.)
       (glTexCoord2f 1. 0.)
       (glVertex3f -1. 1. -1.)
       (glEnd)
       
       ;; Render the bottom quad
       (glBindTexture GL_TEXTURE_2D (get-texture~ down))
       (glBegin GL_QUADS)
       (glTexCoord2f 0. 0.)
       (glVertex3f 1. -1. 1.)
       (glTexCoord2f 0. 1.)
       (glVertex3f -1. -1. 1.)
       (glTexCoord2f 1. 1.)
       (glVertex3f -1. -1. -1.)
       (glTexCoord2f 1. 0.)
       (glVertex3f 1. -1. -1.)
       (glEnd)))
    
    ;; Restore enable bits and matrix
    (glPopAttrib)
    (glPopMatrix))))
