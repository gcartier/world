;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; World Skybox
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2013
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.skybox jazz


(import (jazz.jml)
        (jazz.graphic)
        (jazz.graphic.opengl.glew)
        (world)
        (world.autoload)
        (world.draw)
        (world.geometry)
        (world.opengl)
        (world.syntax (phase syntax))
        (world.texture))


(definition public (skybox-kind directory)
  (cond ((exists?~ (new-file~ directory "left.png")) 'left)
        ((exists?~ (new-file~ directory "lf.png")) 'lf)
        (else #f)))


(definition skyboxes
  '())


(definition public (get-skyboxes)
  skyboxes)


(definition public (prepare-skyboxes)
  (let ((world (current-world)))
    (define (collect-skyboxes)
      (define (add-skyboxes dir queue)
        (when (exists?~ dir)
          (iterate-directory~ dir
            (lambda (dir)
              (when (skybox-kind dir)
                (enqueue queue (new Skybox dir))))
            files?: #f
            directories?: #t)))
      
      (let ((queue (new-queue)))
        (for-each (lambda (assets)
                    (add-skyboxes (new-directory~ assets "skybox") queue))
                  (get-all-assets~ world))
        (sort di<? (queue-list queue) key: get-name~)))
    
    (set! skyboxes (collect-skyboxes))))


(definition public (find-skybox name)
  (find-if (lambda (skybox)
             (di=? (get-name~ skybox) name))
           skyboxes))


;;;
;;;; Skybox
;;;


(class Skybox extends Object
  
  
  (slot directory               getter generate)
  (slot kind      initialize #f getter generate)
  (slot front     initialize #f getter generate)
  (slot left      initialize #f getter generate)
  (slot back      initialize #f getter generate)
  (slot right     initialize #f getter generate)
  (slot up        initialize #f getter generate)
  (slot down      initialize #f getter generate)
  
  
  (method override (initialize directory)
    (set! directory~self directory))
  
  
  (method override (print output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{s}" (get-name)))))
  
  
  (method public (get-name)
    (get-base~ directory))
  
  
  ;;;
  ;;;; Prepare
  ;;;
  
  
  (method public (prepare)
    (define (make-texture name)
      (make-file-texture (new-file~ directory name) mipmap?: #f
        parameters: (lambda ()
                      (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_WRAP_S GL_CLAMP_TO_EDGE)
                      (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_WRAP_T GL_CLAMP_TO_EDGE))))
    
    (unless kind
      (set! kind (or (skybox-kind directory)
                     (error "Unknown skybox format: {a}" (parse~ directory))))
      (case kind
        ((left)
         (set! front (make-texture "front.png"))
         (set! left  (make-texture "left.png"))
         (set! back  (make-texture "back.png"))
         (set! right (make-texture "right.png"))
         (set! up    (make-texture "up.png"))
         (set! down  (make-texture "down.png")))
        ((lf)
         (set! front (make-texture "ft.png"))
         (set! left  (make-texture "lf.png"))
         (set! back  (make-texture "bk.png"))
         (set! right (make-texture "rt.png"))
         (set! up    (make-texture "up.png"))
         (set! down  (make-texture "dn.png"))))))
  
  
  ;;;
  ;;;; Draw
  ;;;
  
  
  (method public (draw-skybox)
    (site (draw-skybox on?: #t parent: draw-zone)
    (glPushMatrix)
    
    ;; Reset and transform the matrix
    (glLoadIdentity)
    (let ((lookat (get-eye-lookat~ (current-world))))
      (let ((sight (get-sight~ lookat))
            (up (get-up~ lookat)))
        (gluLookAt 0. 0. 0. (vertex-x sight) (vertex-y sight) (vertex-z sight) (vertex-x up) (vertex-y up) (vertex-z up))))
    
    ;; Enable/Disable features
    (glPushAttrib GL_ENABLE_BIT)
    (glEnable GL_TEXTURE_2D)
    (glDisable GL_DEPTH_TEST)
    (glDisable GL_LIGHTING)
    (glDisable GL_BLEND)
    
    ;; Just in case
    (gl-reset-color)
    
    (case kind
      ((left)
       ;; Render the front quad
       (glBindTexture GL_TEXTURE_2D (get-id~ front))
       (glBegin GL_QUADS)
       (glTexCoord2f 0. 1.)
       (glVertex3f 1. -1. -1.)
       (glTexCoord2f 1. 1.)
       (glVertex3f -1. -1. -1.)
       (glTexCoord2f 1. 0.)
       (glVertex3f -1. 1. -1.)
       (glTexCoord2f 0. 0.)
       (glVertex3f 1. 1. -1.)
       (glEnd)
       
       ;; Render the left quad
       (glBindTexture GL_TEXTURE_2D (get-id~ left))
       (glBegin GL_QUADS)
       (glTexCoord2f 0. 1.)
       (glVertex3f 1. -1. 1.)
       (glTexCoord2f 1. 1.)
       (glVertex3f 1. -1. -1.)
       (glTexCoord2f 1. 0.)
       (glVertex3f 1. 1. -1.)
       (glTexCoord2f 0. 0.)
       (glVertex3f 1. 1. 1.)
       (glEnd)
       
       ;; Render the back quad
       (glBindTexture GL_TEXTURE_2D (get-id~ back))
       (glBegin GL_QUADS)
       (glTexCoord2f 0. 1.)
       (glVertex3f -1. -1. 1.)
       (glTexCoord2f 1. 1.)
       (glVertex3f 1. -1. 1.)
       (glTexCoord2f 1. 0.)
       (glVertex3f 1. 1. 1.)
       (glTexCoord2f 0. 0.)
       (glVertex3f -1. 1. 1.)
       (glEnd)
       
       ;; Render the right quad
       (glBindTexture GL_TEXTURE_2D (get-id~ right))
       (glBegin GL_QUADS)
       (glTexCoord2f 0. 1.)
       (glVertex3f -1. -1. -1.)
       (glTexCoord2f 1. 1.)
       (glVertex3f -1. -1. 1.)
       (glTexCoord2f 1. 0.)
       (glVertex3f -1. 1. 1.)
       (glTexCoord2f 0. 0.)
       (glVertex3f -1. 1. -1.)
       (glEnd)
       
       ;; Render the top quad
       (glBindTexture GL_TEXTURE_2D (get-id~ up))
       (glBegin GL_QUADS)
       (glTexCoord2f 0. 0.)
       (glVertex3f 1. 1. 1.)
       (glTexCoord2f 0. 1.)
       (glVertex3f 1. 1. -1.)
       (glTexCoord2f 1. 1.)
       (glVertex3f -1. 1. -1.)
       (glTexCoord2f 1. 0.)
       (glVertex3f -1. 1. 1.)
       (glEnd)
       
       ;; Render the bottom quad
       (glBindTexture GL_TEXTURE_2D (get-id~ down))
       (glBegin GL_QUADS)
       (glTexCoord2f 0. 1.)
       (glVertex3f 1. -1. 1.)
       (glTexCoord2f 1. 1.)
       (glVertex3f -1. -1. 1.)
       (glTexCoord2f 1. 0.)
       (glVertex3f -1. -1. -1.)
       (glTexCoord2f 0. 0.)
       (glVertex3f 1. -1. -1.)
       (glEnd)
       
       (glBindTexture GL_TEXTURE_2D 0))
      ((lf)
       ;; Render the front quad
       (glBindTexture GL_TEXTURE_2D (get-id~ front))
       (glBegin GL_QUADS)
       (glTexCoord2f 0. 1.)
       (glVertex3f 1. -1. -1.)
       (glTexCoord2f 1. 1.)
       (glVertex3f -1. -1. -1.)
       (glTexCoord2f 1. 0.)
       (glVertex3f -1. 1. -1.)
       (glTexCoord2f 0. 0.)
       (glVertex3f 1. 1. -1.)
       (glEnd)
       
       ;; Render the left quad
       (glBindTexture GL_TEXTURE_2D (get-id~ left))
       (glBegin GL_QUADS)
       (glTexCoord2f 0. 1.)
       (glVertex3f -1. -1. -1.)
       (glTexCoord2f 1. 1.)
       (glVertex3f -1. -1. 1.)
       (glTexCoord2f 1. 0.)
       (glVertex3f -1. 1. 1.)
       (glTexCoord2f 0. 0.)
       (glVertex3f -1. 1. -1.)
       (glEnd)
       
       ;; Render the back quad
       (glBindTexture GL_TEXTURE_2D (get-id~ back))
       (glBegin GL_QUADS)
       (glTexCoord2f 0. 1.)
       (glVertex3f -1. -1. 1.)
       (glTexCoord2f 1. 1.)
       (glVertex3f 1. -1. 1.)
       (glTexCoord2f 1. 0.)
       (glVertex3f 1. 1. 1.)
       (glTexCoord2f 0. 0.)
       (glVertex3f -1. 1. 1.)
       (glEnd)
       
       ;; Render the right quad
       (glBindTexture GL_TEXTURE_2D (get-id~ right))
       (glBegin GL_QUADS)
       (glTexCoord2f 0. 1.)
       (glVertex3f 1. -1. 1.)
       (glTexCoord2f 1. 1.)
       (glVertex3f 1. -1. -1.)
       (glTexCoord2f 1. 0.)
       (glVertex3f 1. 1. -1.)
       (glTexCoord2f 0. 0.)
       (glVertex3f 1. 1. 1.)
       (glEnd)
       
       ;; Render the top quad
       (glBindTexture GL_TEXTURE_2D (get-id~ up))
       (glBegin GL_QUADS)
       (glTexCoord2f 1. 1.)
       (glVertex3f 1. 1. -1.)
       (glTexCoord2f 0. 1.)
       (glVertex3f 1. 1. 1.)
       (glTexCoord2f 0. 0.)
       (glVertex3f -1. 1. 1.)
       (glTexCoord2f 1. 0.)
       (glVertex3f -1. 1. -1.)
       (glEnd)
       
       ;; Render the bottom quad
       (glBindTexture GL_TEXTURE_2D (get-id~ down))
       (glBegin GL_QUADS)
       (glTexCoord2f 0. 0.)
       (glVertex3f 1. -1. 1.)
       (glTexCoord2f 0. 1.)
       (glVertex3f -1. -1. 1.)
       (glTexCoord2f 1. 1.)
       (glVertex3f -1. -1. -1.)
       (glTexCoord2f 1. 0.)
       (glVertex3f 1. -1. -1.)
       (glEnd)
       
       (glBindTexture GL_TEXTURE_2D 0)))
    
    ;; Restore enable bits and matrix
    (glPopAttrib)
    (glPopMatrix)))))
