;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Skybox
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is WorldScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2014
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See http://github.com/gcartier/world for details.


(module world.skybox jazz


(import (jazz.graphic.opengl.glew)
        (world)
        (world.autoload)
        (world.camera)
        (world.generate)
        (world.geometry)
        (world.material)
        (world.mesh)
        (world.object)
        (world.opengl)
        (world.programs)
        (world.shape)
        (world.syntax (phase syntax))
        (world.texture))


(definition public (skybox-kind directory)
  (cond ((exists?~ (new-file~ directory "left.png")) 'left)
        ((exists?~ (new-file~ directory "lf.png")) 'lf)
        (else #f)))


(definition skyboxes
  '())


(definition public (get-skyboxes)
  skyboxes)


(definition public (prepare-skyboxes)
  (let ((world (current-world)))
    (define (collect-skyboxes)
      (define (add-skyboxes dir queue)
        (when (exists?~ dir)
          (iterate-directory~ dir
            (lambda (dir)
              (when (skybox-kind dir)
                (enqueue queue (new Skybox dir))))
            files?: #f
            directories?: #t)))
      
      (let ((queue (new-queue)))
        (for-each (lambda (assets)
                    (add-skyboxes (new-directory~ assets "skybox") queue))
                  (get-all-assets~ world))
        (sort di<? (queue-list queue) key: get-name~)))
    
    (set! skyboxes (collect-skyboxes))))


(definition public (find-skybox name)
  (find-if (lambda (skybox)
             (di=? (get-name~ skybox) name))
           skyboxes))


(definition skybox-mesh
  #f)

(definition skybox-program
  #f)


(definition public (prepare-skybox-program)
  (let ((zone (current-zone)))
    (when (not skybox-program)
      (let ((program (new Skybox-Program)))
        (let ((mesh (generate-cube-mesh)))
          (set-array~ mesh (create-array~ program mesh))
          (set! skybox-mesh mesh)
          (set! skybox-program program))))))


;;;
;;;; Skybox
;;;


(class Skybox extends Object
  
  
  (slot directory               getter generate)
  (slot kind      initialize #f getter generate)
  (slot material  initialize #f getter generate)
  
  
  (method override (initialize directory)
    (set! directory~self directory))
  
  
  (method override (print output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{s}" (get-name)))))
  
  
  (method public (get-name)
    (get-base~ directory))
  
  
  ;;;
  ;;;; Prepare
  ;;;
  
  
  (method public (prepare)
    (let ((size #f))
      (define (make-surface name)
        (receive (image-width image-height surface) (cairo-surface-from-file (new-file~ directory name))
          (let ((image-size (new Dimension image-width image-height)))
            (if (not size)
                (set! size image-size)
              (when (nu/=? image-size size)
                (error "Inconsistant skybox sizes"))))
          surface))
      
      (unless kind
        (let ((kind (or (skybox-kind directory)
                        (error "Unknown skybox format: {a}" (parse~ directory)))))
          (define (with-surfaces proc)
            (case kind
              ((left)
               (proc (make-surface "right.png")
                     (make-surface "left.png")
                     (make-surface "back.png")
                     (make-surface "front.png")
                     (make-surface "up.png")
                     (make-surface "down.png")))
              ((lf)
               (proc (make-surface "ft.png")
                     (make-surface "bk.png")
                     (make-surface "lf.png")
                     (make-surface "rt.png")
                     (make-surface "up.png")
                     (make-surface "dn.png")))))
          
          (with-surfaces
            (lambda (front back left right up down)
              (let ((texture (new Image-Texture (get-width~ size) (get-height~ size))))
                (map-texture-cube~ texture front back up down right left)
                (close~ front)
                (close~ back)
                (close~ left)
                (close~ right)
                (close~ up)
                (close~ down)
                (set! material~self (new Material name: 'skybox texture: texture))
                (set! kind~self kind))))))))
  
  
  ;;;
  ;;;; Draw
  ;;;
  
  
  (method public (draw-skybox)
    (let ((camera (current-camera)))
      (let ((projection-matrix (get-projection-matrix~ camera))
            (view-matrix (make-view-matrix& (vertex& 0. 0. 0.) (get-lookat~ camera))))
        (use~ skybox-program)
        (glDepthFunc GL_LEQUAL)
        (bind-uniforms~ skybox-program projection-matrix view-matrix material)
        (draw-array~ skybox-mesh)
        (glDepthFunc GL_LESS)
        (unuse~ skybox-program)
        (gl-check-error))))))
