;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; Music
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.music jazz


(import (jazz.audio)
        (jazz.event)
        (jazz.io)
        (jazz.syntax (phase syntax))
        (world)
        (world.asset)
        (world.assets)
        (world.autoload)
        (world.configure)
        (world.context)
        (world.geometry)
        (world.math)
        (world.settings)
        (world.sound)
        (world.task))


(hub effective-music)
(hub play-music)


;;;
;;;; Task
;;;


(definition public (music-task task <Task>)
  (declare (proper-tail-calls))
  (let ((music (current-music)))
    (with-task task
      (lambda (exit)
        (set-music-thread music (current-thread))
        (let (iter (previous (current-monotonic)))
          (let ((time (current-monotonic)))
            (let ((elapse (- time previous)))
              (unless (stopping? task)
                (site music
                  (process-music music)))
              (let ((duration (- (current-monotonic) time)))
                (task-wait task music-period duration exit))
              (iter time))))))))


;;;
;;;; Music
;;;


(class World-Music extends Object
  
  
  (slot music?          <bool>   initialize #f   accessors generate)
  (slot music-style     <object> initialize #f   accessors generate)
  (slot music-volume    <fl>     initialize #f   accessors generate)
  (slot music-playing   <object> initialize #f   getter generate)
  (slot music-asset     <object> initialize #f   getter generate)
  (slot music-thread    <object> initialize #f   accessors generate)
  (slot music-mutex     <object> initialize #f   getter generate)
  (slot silence-minimum <fl>     initialize 2. @w 60.  accessors generate)
  (slot silence-maximum <fl>     initialize 5. @w 180. accessors generate)
  (slot silence-end     <fl+>    initialize #f   accessors generate)
  
  
  (method override (initialize self)
    (set! music? (world-setting 'world.music? #t))
    (set! music-style (world-setting 'world.music-style #f))
    (set! music-volume (world-setting 'world.music-volume default-music-volume))
    (set! music-mutex (make-mutex 'music)))
  
  
  (method (with-music-mutex self thunk)
    (mutex-lock! music-mutex)
    (prog1 (thunk)
      (mutex-unlock! music-mutex)))
  
  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method (on-toggle-music self evt)
    (toggle-music self))
  
  
  (method (on-change-music self evt)
    (change-music self)
    (display-music self))
  
  
  (method (on-display-music self evt)
    (display-music self))
  
  
  ;;;
  ;;;; Music
  ;;;
  
  
  (method package (initial-music self)
    (when music?
      (enter-silence self minimum: 0. maximum: 15.)))
  
  
  (method (toggle-music self)
    (let ((world (current-world)))
      (if music-playing
          (close-music self)
        (change-music self))
      (display-on/off world "Music" (music-playing? self))))
  
  
  (method package (change-music? self flag)
    (set! music? flag)
    (if music?
        (change-music self)
      (close-music self)))
  
  
  (method package (change-music self)
    (let ((world (current-world)))
      (let ((asset (random-music self)))
        (if (not asset)
            (display-error world "No music found")
          (play-music self asset)))))
  
  
  (method package (random-music self (style: style music-style))
    (let ((world (current-world)))
      (let ((music-context (and style (make-search-context style)))
            (queue (new-queue)))
        (iterate-assets world
          (lambda (assets)
            (iterate-entries assets
              (lambda (path)
                (when (starts-with? path "music/")
                  (let ((ext (filename-extension path)))
                    (when (or (extension=? ext "mp3")
                              (extension=? ext "ogg"))
                      (when (or (not music-context)
                                (search path music-context))
                        (enqueue queue (new Asset assets path))))))))))
        (let ((music-list (queue-list queue)))
          (and (not-null? music-list)
               (random-element music-list))))))
  
  
  ;; music task
  (method package (process-music self)
    (with-music-mutex self
      (lambda ()
        ;; silence ended
        (when (and silence-end (>= (current-monotonic) silence-end))
          (set! silence-end #f)
          (post-event
            (lambda ()
              (change-music self)))))))
  
  
  (method (music-ended self)
    (post-event
      (lambda ()
        (when music-playing
          (close-music self)
          (enter-silence self)))))
  
  
  (method (enter-silence self (minimum: minimum #f) (maximum: maximum #f))
    (with-music-mutex self
      (lambda ()
        (set! silence-end (+ (current-monotonic) (random-between (or minimum silence-minimum) (or maximum silence-maximum)))))))
  
  
  (method (play-intro-music self)
    (let ((world (current-world)))
      (let ((asset (find-asset world "music/warcraft/Glue/Intro.ogg")))
        (when asset
          (maybe-play-music self asset)))))
  
  
  (method package (music-playing? self)
    (boolean music-playing))
  
  
  (method (maybe-play-music self asset)
    (when music?
      (play-music self asset)))
  
  
  (method public (play-music self asset)
    (let ((world (current-world)))
      (with-music-mutex self
        (lambda ()
          (let ((file (effective-music self asset)))
            (when file
              (let ((song (new-song file)))
                (close-playing self)
                (set! music-playing song)
                (set! music-asset asset)
                (set! silence-end #f)
                (set-volume song music-volume)
                (register-playing-song song (lambda (song)
                                              (music-ended self)))
                (play song)
                (update-parameter world 'music)
                song)))))))
  
  
  (method public (effective-music self asset)
    (and asset (retrieve-file asset)))
  
  
  (method package (close-music self)
    (with-music-mutex self
      (lambda ()
        (close-playing self))))
  
  
  (method (close-playing self)
    (let ((world (current-world)))
      (when music-playing
        (unregister-playing-song music-playing)
        (close music-playing)
        (set! music-playing #f)
        (set! music-asset #f)
        (set! silence-end #f)
        (update-parameter world 'music))))
  
  
  (method (display-music self)
    (let ((world (current-world)))
      (if music-playing
          (display-status world (format "Playing {a}" (get-path music-asset)) duration: 5.)
        (display-status world "No music playing"))))))
