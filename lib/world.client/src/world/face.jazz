;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Element Faces
;;;


(module world.face jazz


(import (jazz.geometry)
        (jazz.graphic)
        (jazz.graphic.opengl.glew)
        (jazz.io)
        (jazz.library)
        (jazz.literals)
        (jazz.media)
        (jazz.network)
        (jazz.platform)
        (jazz.platform.cairo)
        (jazz.runtime)
        (jazz.system)
        (jazz.ui)
        (jazz.ui.dialog)
        (jazz.ui.window)
        (world)
        (world.foreign)
        (world.geometry)
        (world.texture)
        (time))


(definition public (make-face element texture center radius polygon)
  (new Face element texture center radius polygon))


;;;
;;;; Face
;;;


(class Face extends Object
  
  
  (slot element accessors generate)
  (slot texture accessors generate)
  (slot center  getter generate)
  (slot radius  getter generate)
  (slot polygon getter generate)
  
  
  (method override (initialize element texture center radius polygon)
    (nextmethod)
    (set! element~self element)
    (set! texture~self texture)
    (set! center~self center)
    (set! radius~self radius)
    (set! polygon~self polygon))
  
  
  (method override (print output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{a} {a}" center texture))))
  
  
  (method public (ray-closest-polygon p <f32vector> d <f32vector> filter <procedure+>)
    (let ((closest #f)
          (distance -1.)
          (normal (get-normal~ polygon)))
      (iterate-triangles~ polygon
        (lambda (v1 v2 v3)
          (when (or (not filter)
                    (filter self normal))
            (let ((dist (ray-triangle-distance p d v1 v2 v3)))
              (when (and (/= dist -1.)
                         (or (= distance -1.)
                             (< dist distance)))
                (set! closest (list polygon dist))
                (set! distance dist))))))
      closest))))
