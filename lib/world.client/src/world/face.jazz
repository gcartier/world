;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Element Faces
;;;


(module world.face jazz


(import (jazz.geometry)
        (jazz.graphic)
        (jazz.graphic.opengl.glew)
        (jazz.io)
        (jazz.library)
        (jazz.literals)
        (jazz.media)
        (jazz.network)
        (jazz.platform)
        (jazz.platform.cairo)
        (jazz.runtime)
        (jazz.system)
        (jazz.ui)
        (jazz.ui.dialog)
        (jazz.ui.window)
        (world)
        (world.foreign)
        (world.geometry)
        (world.texture)
        (time))


(definition public (make-face element texture center radius . polygons)
  (new Face element texture center radius polygons))


;;;
;;;; Face
;;;


(class Face extends Object
  
  
  (slot element  accessors generate)
  (slot texture  accessors generate)
  (slot center   getter generate)
  (slot radius   getter generate)
  (slot polygons getter generate)
  
  
  (method override (initialize element texture center radius polygons)
    (nextmethod)
    (set! element~self element)
    (set! texture~self texture)
    (set! center~self center)
    (set! radius~self radius)
    (set! polygons~self polygons))
  
  
  (method override (print output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{a} {a}" center texture))))
  
  
  (method public (triangle-count)
    (let ((count 0))
      (for-each (lambda (poly)
                  (increase! count (triangle-count~ poly)))
                polygons)
      count))
  
  
  (method public (add-triangles add)
    (for-each (lambda (poly)
                (add-triangles~ poly add))
              polygons))
  
  
  (method public (iterate-triangles proc)
    (for-each (lambda (poly)
                (iterate-triangles~ poly proc))
              polygons))
  
  
  (method public (ray-closest-polygon p <f32vector> d <f32vector> filter <procedure+>)
    (let ((closest #f)
          (distance -1.))
      (for-each (lambda (poly)
                  (let ((normal (get-normal~ poly)))
                    (iterate-triangles~ poly
                      (lambda (v1 v2 v3)
                        (when (or (not filter)
                                  (filter self normal))
                          (let ((dist (ray-triangle-distance p d v1 v2 v3)))
                            (when (and (/= dist -1.)
                                       (or (= distance -1.)
                                           (< dist distance)))
                              (set! closest (list poly dist))
                              (set! distance dist))))))))
                polygons)
      closest))))
