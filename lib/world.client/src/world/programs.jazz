;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Shader Programs
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2013
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.programs jazz


(import (jazz.geometry)
        (jazz.graphic)
        (jazz.graphic.opengl.glew)
        (jazz.io)
        (jazz.library)
        (jazz.literals)
        (jazz.media)
        (jazz.network)
        (jazz.platform)
        (jazz.platform.cairo)
        (jazz.runtime)
        (jazz.system)
        (jazz.ui)
        (jazz.ui.dialog)
        (jazz.ui.window)
        (world)
        (world.autoload)
        (world.dye)
        (world.foreign)
        (world.geometry)
        (world.lighting)
        (world.shader)
        (world.shaders)
        (world.support)
        (world.syntax (phase syntax))
        (world.texture)
        (time))


;;;
;;;; Mesh
;;;


(class Mesh-Program extends Shader-Program
  
  
  (slot model_matrix-uniform)
  (slot use_bones-uniform)
  (slot bone_matrices-uniform)
  (slot vertex_coord-attribute)
  (slot normal-attribute)
  (slot bone_id-attribute)
  
  
  (method override (prepare)
    (set-vs (default-vertex-shader))
    (set-fs (default-fragment-shader))
    (link)
    (set! model_matrix-uniform (add-uniform "model_matrix"))
    (when (get-animations?)
      (set! use_bones-uniform (add-uniform "use_bones"))
      (set! bone_matrices-uniform (add-uniform "bone_matrices")))
    (set! vertex_coord-attribute (add-attribute "vertex_coord"))
    (set! normal-attribute (add-attribute "normal"))
    (when (get-animations?)
      (set! bone_id-attribute (add-attribute "bone_id"))))
  
  
  (method protected virtual (bind-render-uniforms material)
    )
  
  
  (method protected virtual (bind-uniforms mesh matrix bone-matrices)
    ;; Model view matrix
    (glUniformMatrix4dv* model_matrix-uniform 1 #f matrix)
    ;; Bone matrices
    (when (get-animations?)
      (if (not bone-matrices)
          (glUniform1i use_bones-uniform 0)
        (glUniform1i use_bones-uniform 1)
        (glUniformMatrix4fv* bone_matrices-uniform 200 #f bone-matrices))))
  
  
  (method protected virtual (enable-attributes mesh)
    (let ((stride (* 10 float-size))
          (buffer (get-vertices-buffer~ mesh)))
      (bind~ buffer)
      (enable-vertex-attrib~ buffer vertex_coord-attribute)
      (set-attrib-pointer~ buffer vertex_coord-attribute 3 GL_FLOAT stride 0)
      (enable-vertex-attrib~ buffer normal-attribute)
      (set-attrib-pointer~ buffer normal-attribute 3 GL_FLOAT stride (* 3 float-size))
      (when (get-animations?)
        (enable-vertex-attrib~ buffer bone_id-attribute)
        (set-attrib-pointer~ buffer bone_id-attribute 1 GL_FLOAT stride (* 9 float-size)))
      (unbind~ buffer)))
  
  
  (method protected (draw-mesh mesh)
    (enable-attributes mesh)
    (draw~ mesh)
    (disable-attributes mesh))
  
  
  (method protected virtual (disable-attributes mesh)
    (let ((buffer (get-vertices-buffer~ mesh)))
      (bind~ buffer)
      (disable-vertex-attrib~ buffer vertex_coord-attribute)
      (disable-vertex-attrib~ buffer normal-attribute)
      (when (get-animations?)
        (disable-vertex-attrib~ buffer bone_id-attribute))
      (unbind~ buffer)))
  
  
  (method protected virtual (unbind-uniforms)
    )
  
  
  (method protected virtual (unbind-render-uniforms)
    ))


;;;
;;;; Mesh-Color
;;;


(class Mesh-Color-Program extends Mesh-Program
  
  
  (slot color-uniform)
  
  
  (method override (prepare)
    (nextmethod)
    (set! color-uniform (add-uniform "color")))
  
  
  (method override (default-vertex-shader)
    mesh-color-vs)
  
  (method override (default-fragment-shader)
    mesh-color-fs)
  
  
  (method override (bind-uniforms mesh matrix color)
    (nextmethod mesh matrix #f)
    ;; Color
    (assert color)
    (glUniform4f color-uniform (dye-red color) (dye-green color) (dye-blue color) (dye-alpha color))))


;;;
;;;; Mesh-Phong
;;;


(class Mesh-Phong-Program extends Mesh-Program
  
  
  (slot texture-uniform)
  (slot ambient_color-uniform)
  (slot sun_color-uniform)
  (slot sun_coord-uniform)
  (slot lights_count-uniform)
  (slot texture_coord-attribute)
  (slot lighting-attribute)
  
  
  (method override (prepare)
    (nextmethod)
    (set! texture-uniform (add-uniform "texture"))
    (set! ambient_color-uniform (add-uniform "ambient_color"))
    (set! sun_color-uniform (add-uniform "sun_color"))
    (set! sun_coord-uniform (add-uniform "sun_coord"))
    (set! lights_count-uniform (add-uniform "lights_count"))
    (set! texture_coord-attribute (add-attribute "texture_coord"))
    (set! lighting-attribute (add-attribute "lighting")))
  
  
  (method override (default-vertex-shader)
    mesh-phong-vs)
  
  (method override (default-fragment-shader)
    mesh-phong-fs)
  
  
  (method override (bind-render-uniforms material)
    (let ((zone (current-zone)))
      ;; Texture
      (glActiveTexture GL_TEXTURE0)
      (glBindTexture TEXTURE-TARGET (get-id~ (get-texture~ material)))
      (glUniform1i texture-uniform 0)
      ;; Lighting
      (let ((lighting (get-current-lighting)))
        ;; Ambient color
        (let ((ambient (dye .1 .05 0. 1.) @w (get-ambient-color~ lighting)))
          (glUniform4f ambient_color-uniform (dye-red ambient) (dye-green ambient) (dye-blue ambient) (dye-alpha ambient)))
        ;; Sun color
        (let ((color (get-sun-effective~ lighting)))
          (glUniform4f sun_color-uniform (dye-red color) (dye-green color) (dye-blue color) (dye-alpha color)))
        ;; Sun coord
        (let ((coord (get-sun-coordinates~ lighting)))
          (glUniform3f sun_coord-uniform (vertex-x coord) (vertex-y coord) (vertex-z coord)))
        ;; Lights
        (glUniform1i lights_count-uniform (get-lights-count~ lighting)))))
  
  
  (method override (enable-attributes mesh)
    (let ((buffer (get-vertices-buffer~ mesh))
          (stride (* 10 float-size)))
      (bind~ buffer)
      (enable-buffer-attributes mesh buffer stride)
      (unbind~ buffer))
    (let ((stride (* 3 float-size))
          (lightmap-buffer (get-lightmap-buffer~ mesh)))
      (bind~ lightmap-buffer)
      (enable-vertex-attrib~ lightmap-buffer lighting-attribute)
      (set-attrib-pointer~ lightmap-buffer lighting-attribute 3 GL_FLOAT stride 0)
      (unbind~ lightmap-buffer)))
  
  
  (method override (disable-attributes mesh)
    (let ((buffer (get-vertices-buffer~ mesh)))
      (bind~ buffer)
      (disable-buffer-attributes mesh buffer)
      (unbind~ buffer))
    (let ((lightmap-buffer (get-lightmap-buffer~ mesh)))
      (bind~ lightmap-buffer)
      (disable-vertex-attrib~ lightmap-buffer lighting-attribute)
      (unbind~ lightmap-buffer)))
  
  
  (method protected virtual (enable-buffer-attributes mesh buffer stride)
    (enable-vertex-attrib~ buffer vertex_coord-attribute)
    (set-attrib-pointer~ buffer vertex_coord-attribute 3 GL_FLOAT stride 0)
    (enable-vertex-attrib~ buffer normal-attribute)
    (set-attrib-pointer~ buffer normal-attribute 3 GL_FLOAT stride (* 3 float-size))
    (enable-vertex-attrib~ buffer texture_coord-attribute)
    (set-attrib-pointer~ buffer texture_coord-attribute 3 GL_FLOAT stride (* 6 float-size))
    (when (get-animations?)
      (enable-vertex-attrib~ buffer bone_id-attribute)
      (set-attrib-pointer~ buffer bone_id-attribute 1 GL_FLOAT stride (* 9 float-size))))
  
  
  (method protected virtual (disable-buffer-attributes mesh buffer)
    (disable-vertex-attrib~ buffer vertex_coord-attribute)
    (disable-vertex-attrib~ buffer normal-attribute)
    (disable-vertex-attrib~ buffer texture_coord-attribute)
    (when (get-animations?)
      (disable-vertex-attrib~ buffer bone_id-attribute)))
  
  
  (method override (unbind-uniforms)
    )
  
  
  (method override (unbind-render-uniforms)
    (glActiveTexture GL_TEXTURE0)
    (glBindTexture TEXTURE-TARGET 0)))


;;;
;;;; Mesh-Occlusion
;;;


(class Mesh-Occlusion-Program extends Mesh-Program
  
  
  (slot lighting-attribute)
  
  
  (method override (prepare)
    (set-vs (default-vertex-shader))
    (set-fs (default-fragment-shader))
    (link)
    (set! model_matrix-uniform (add-uniform "model_matrix"))
    (set! vertex_coord-attribute (add-attribute "vertex_coord"))
    (set! lighting-attribute (add-attribute "lighting")))
  
  
  (method override (default-vertex-shader)
    mesh-occlusion-vs)
  
  (method override (default-fragment-shader)
    mesh-occlusion-fs)
  
  
  (method override (bind-uniforms mesh matrix bone-matrices)
    ;; Model view matrix
    (glUniformMatrix4dv* model_matrix-uniform 1 #f matrix))
  
  
  (method override (enable-attributes mesh)
    (let ((buffer (get-vertices-buffer~ mesh))
          (stride (* 10 float-size)))
      (bind~ buffer)
      (enable-buffer-attributes mesh buffer stride)
      (unbind~ buffer))
    (let ((stride (* 3 float-size))
          (lightmap-buffer (get-lightmap-buffer~ mesh)))
      (bind~ lightmap-buffer)
      (enable-vertex-attrib~ lightmap-buffer lighting-attribute)
      (set-attrib-pointer~ lightmap-buffer lighting-attribute 3 GL_FLOAT stride 0)
      (unbind~ lightmap-buffer)))
  
  
  (method override (disable-attributes mesh)
    (let ((buffer (get-vertices-buffer~ mesh)))
      (bind~ buffer)
      (disable-buffer-attributes mesh buffer)
      (unbind~ buffer))
    (let ((lightmap-buffer (get-lightmap-buffer~ mesh)))
      (bind~ lightmap-buffer)
      (disable-vertex-attrib~ lightmap-buffer lighting-attribute)
      (unbind~ lightmap-buffer)))
  
  
  (method protected virtual (enable-buffer-attributes mesh buffer stride)
    (enable-vertex-attrib~ buffer vertex_coord-attribute)
    (set-attrib-pointer~ buffer vertex_coord-attribute 3 GL_FLOAT stride 0))
  
  
  (method protected virtual (disable-buffer-attributes mesh buffer)
    (disable-vertex-attrib~ buffer vertex_coord-attribute)))


;;;
;;;; Mesh-Frame
;;;


(class Mesh-Frame-Program extends Mesh-Program
  
  
  (slot WIN_SCALE-uniform)
  (slot WIRE_COL-uniform)
  (slot FILL_COL-uniform)
  (slot swizz-attribute)
  (slot neighbor1-attribute)
  (slot neighbor2-attribute)
  
  
  (method override (prepare)
    (nextmethod)
    (set! WIN_SCALE-uniform (add-uniform "WIN_SCALE"))
    (set! WIRE_COL-uniform (add-uniform "WIRE_COL"))
    (set! FILL_COL-uniform (add-uniform "FILL_COL"))
    (set! swizz-attribute (add-attribute "swizz"))
    (set! neighbor1-attribute (add-attribute "neighbor1"))
    (set! neighbor2-attribute (add-attribute "neighbor2")))
  
  
  (method override (bind-uniforms mesh matrix bone-matrices (wire-color: wire-color #f) (fill-color: fill-color #f))
    (nextmethod mesh matrix bone-matrices)
    (let ((world (current-world)))
      ;; Window scale
      (glUniform2f WIN_SCALE-uniform (/ (get-width~ world) 2.) (/ (get-height~ world) 2.))
      ;; Wire color
      (let ((wire-color (or wire-color (dye 0.8 0.3 0.1 1.))))
        (glUniform4f WIRE_COL-uniform (dye-red wire-color) (dye-green wire-color) (dye-blue wire-color) (dye-alpha wire-color)))
      ;; Fill color
      (let ((fill-color (or fill-color (dye 0. 0. 0. 1.))))
        (glUniform4f FILL_COL-uniform (dye-red fill-color) (dye-green fill-color) (dye-blue fill-color) (dye-alpha fill-color)))))
  
  
  (method override (enable-attributes mesh)
    (let ((stride (* 10 float-size))
          (buffer (get-vertices-buffer~ mesh)))
      (bind~ buffer)
      (enable-vertex-attrib~ buffer vertex_coord-attribute)
      (set-attrib-pointer~ buffer vertex_coord-attribute 3 GL_FLOAT stride 0)
      (enable-vertex-attrib~ buffer normal-attribute)
      (set-attrib-pointer~ buffer normal-attribute 3 GL_FLOAT stride (* 3 float-size))
      (when (get-animations?)
        (enable-vertex-attrib~ buffer bone_id-attribute)
        (set-attrib-pointer~ buffer bone_id-attribute 1 GL_FLOAT stride (* 9 float-size)))
      (unbind~ buffer))
    (let ((stride (* 7 float-size))
          (buffer (get-neighbors-buffer~ mesh)))
      (bind~ buffer)
      (enable-vertex-attrib~ buffer swizz-attribute)
      (set-attrib-pointer~ buffer swizz-attribute 1 GL_FLOAT stride 0)
      (enable-vertex-attrib~ buffer neighbor1-attribute)
      (set-attrib-pointer~ buffer neighbor1-attribute 3 GL_FLOAT stride float-size)
      (enable-vertex-attrib~ buffer neighbor2-attribute)
      (set-attrib-pointer~ buffer neighbor2-attribute 3 GL_FLOAT stride (* 4 float-size))
      (unbind~ buffer)))
  
  
  (method override (disable-attributes mesh)
    (let ((buffer (get-vertices-buffer~ mesh)))
      (bind~ buffer)
      (disable-vertex-attrib~ buffer vertex_coord-attribute)
      (disable-vertex-attrib~ buffer normal-attribute)
      (when (get-animations?)
        (disable-vertex-attrib~ buffer bone_id-attribute))
      (unbind~ buffer))
    (let ((buffer (get-neighbors-buffer~ mesh)))
      (bind~ buffer)
      (disable-vertex-attrib~ buffer swizz-attribute)
      (disable-vertex-attrib~ buffer neighbor1-attribute)
      (disable-vertex-attrib~ buffer neighbor2-attribute)
      (unbind~ buffer))))


;;;
;;;; Mesh-Wireframe
;;;


(class Mesh-Wireframe-Program extends Mesh-Frame-Program
  
  
  (method override (default-vertex-shader)
    mesh-wireframe-vs)
  
  (method override (default-fragment-shader)
    mesh-wireframe-fs))


;;;
;;;; Mesh-Squareframe
;;;


(class Mesh-Squareframe-Program extends Mesh-Frame-Program
  
  
  (method override (default-vertex-shader)
    mesh-squareframe-vs)
  
  (method override (default-fragment-shader)
    mesh-squareframe-fs))


;;;
;;;; Mesh-Playerframe
;;;


(class Mesh-Playerframe-Program extends Mesh-Frame-Program
  
  
  (method override (default-vertex-shader)
    mesh-playerframe-vs)
  
  (method override (default-fragment-shader)
    mesh-playerframe-fs))


;;;
;;;; Mesh-Floorframe
;;;


(class Mesh-Floorframe-Program extends Mesh-Frame-Program
  
  
  @wait
  (slot EYE_HEIGHT-uniform)
  
  
  (method override (default-vertex-shader)
    mesh-floorframe-vs)
  
  (method override (default-fragment-shader)
    mesh-floorframe-fs)
  
  
  (method override (prepare)
    (nextmethod)
    @wait
    (add-uniform "EYE_HEIGHT"))
  
  
  (method override (bind-uniforms mesh matrix bone-matrices (wire-color: wire-color #f) (fill-color: fill-color #f))
    (nextmethod mesh matrix bone-matrices wire-color: wire-color fill-color: fill-color)
    (let ((world (current-world)))
      ;; Eye height
      ;; quick hack for the y-grid
      @wait
      (glUniform1f EYE_HEIGHT-uniform (vertex-y (get-position~ (get-eye~ world)))))))


;;;
;;;; Mesh-Texture
;;;


(class Mesh-Texture-Program extends Mesh-Program
  
  
  (slot texture-uniform)
  (slot texture_normalize-uniform)
  (slot texture_bounds-uniform)
  (slot texture_coord-attribute)
  
  
  (method override (prepare)
    (nextmethod)
    (when (use-texture?)
      (set! texture-uniform (add-uniform "texture")))
    (set! texture_normalize-uniform (add-uniform "texture_normalize"))
    (set! texture_bounds-uniform (add-uniform "texture_bounds"))
    (set! texture_coord-attribute (add-attribute "texture_coord")))
  
  
  (method override (default-vertex-shader)
    mesh-texture-vs)
  
  (method override (default-fragment-shader)
    mesh-texture-fs)
  
  
  (method protected virtual (use-texture?)
    #t)
  
  
  (method override (bind-uniforms mesh matrix bone-matrices)
    (nextmethod mesh matrix bone-matrices)
    (let ((world (current-world))
          (material (get-material~ mesh)))
      (when (use-texture?)
        (let ((texture (get-id~ (get-texture~ material))))
          (glActiveTexture GL_TEXTURE0)
          (glBindTexture TEXTURE-TARGET texture)
          (glUniform1i texture-uniform 0)))
      (assert (get-atlas~ material))
      (let ((atlas (get-atlas~ material)))
        (glUniform1i texture_normalize-uniform (if (or (get-uniform?~ atlas) (not (get-normalize?~ atlas))) 0 1))
        (let ((bounds (get-bounds~ atlas))
              (count (get-depth~ atlas)))
          (glUniform4fv* texture_bounds-uniform count bounds)))))
  
  
  (method override (enable-attributes mesh)
    (let ((stride (* 10 float-size))
          (buffer (get-vertices-buffer~ mesh)))
      (bind~ buffer)
      (enable-vertex-attrib~ buffer vertex_coord-attribute)
      (set-attrib-pointer~ buffer vertex_coord-attribute 3 GL_FLOAT stride 0)
      (enable-vertex-attrib~ buffer normal-attribute)
      (set-attrib-pointer~ buffer normal-attribute 3 GL_FLOAT stride (* 3 float-size))
      (enable-vertex-attrib~ buffer texture_coord-attribute)
      (set-attrib-pointer~ buffer texture_coord-attribute 3 GL_FLOAT stride (* 6 float-size))
      (when (get-animations?)
        (enable-vertex-attrib~ buffer bone_id-attribute)
        (set-attrib-pointer~ buffer bone_id-attribute 1 GL_FLOAT stride (* 9 float-size)))
      (unbind~ buffer)))
  
  
  (method override (disable-attributes mesh)
    (let ((buffer (get-vertices-buffer~ mesh)))
      (bind~ buffer)
      (disable-vertex-attrib~ buffer vertex_coord-attribute)
      (disable-vertex-attrib~ buffer normal-attribute)
      (disable-vertex-attrib~ buffer texture_coord-attribute)
      (when (get-animations?)
        (disable-vertex-attrib~ buffer bone_id-attribute))
      (unbind~ buffer)))
  
  
  (method override (unbind-uniforms)
    (glActiveTexture GL_TEXTURE0)
    (glBindTexture TEXTURE-TARGET 0)))


;;;
;;;; Mesh-Transformation
;;;


(definition transformation-speed
  1.)

(definition public (get-transformation-speed)
  transformation-speed)

(definition public (set-transformation-speed speed)
  (set! transformation-speed speed))
  
  
(definition transformation-time
  1.)

(definition public (get-transformation-time)
  transformation-time)

(definition public (update-transformation-time elapse)
  (set! transformation-time (+ transformation-time (* elapse transformation-speed))))


(class Mesh-Transformation-Program extends Mesh-Texture-Program
  
  
  (slot time-uniform)
  
  
  (method override (prepare)
    (nextmethod)
    (set! time-uniform (add-uniform "time")))
  
  
  (method override (bind-uniforms mesh matrix bone-matrices)
    (nextmethod mesh matrix bone-matrices)
    (glUniform1f time-uniform transformation-time)))


;;;
;;;; Mesh-Radial-Blur
;;;


(class Mesh-Radial-Blur-Program extends Mesh-Transformation-Program
  
  
  (method override (default-fragment-shader)
    mesh-radial-blur-fs))


;;;
;;;; Mesh-Motion-Blur
;;;


(class Mesh-Motion-Blur-Program extends Mesh-Transformation-Program
  
  
  (method override (default-fragment-shader)
    mesh-motion-blur-fs))


;;;
;;;; Mesh-Water
;;;


(class Mesh-Water-Program extends Mesh-Transformation-Program
  
  
  (method override (default-fragment-shader)
    mesh-water-fs))


;;;
;;;; Mesh-Wet
;;;


(class Mesh-Wet-Program extends Mesh-Phong-Program
  
  
  (method override (default-fragment-shader)
    mesh-wet-fs))


;;;
;;;; Mesh-Julia
;;;


(class Mesh-Julia-Program extends Mesh-Transformation-Program
  
  
  (method override (default-fragment-shader)
    mesh-julia-fs)
  
  
  (method override (use-texture?)
    #f))


;;;
;;;; Mesh-Sierpinski
;;;


(class Mesh-Sierpinski-Program extends Mesh-Transformation-Program
  
  
  (method override (default-fragment-shader)
    mesh-sierpinski-fs))


;;;
;;;; Mesh-Multitexture
;;;


(class Mesh-Multitexture-Program extends Mesh-Transformation-Program
  
  
  (method override (default-fragment-shader)
    mesh-multitexture-fs))


;;;
;;;; Mesh-Kaleidoscope
;;;


(class Mesh-Kaleidoscope-Program extends Mesh-Transformation-Program
  
  
  (method override (default-fragment-shader)
    mesh-kaleidoscope-fs))


;;;
;;;; Mesh-Tunnel
;;;


(class Mesh-Tunnel-Program extends Mesh-Transformation-Program
  
  
  (method override (default-fragment-shader)
    mesh-tunnel-fs))


;;;
;;;; Mesh-Square-Tunnel
;;;


(class Mesh-Square-Tunnel-Program extends Mesh-Transformation-Program
  
  
  (method override (default-fragment-shader)
    mesh-square-tunnel-fs))


;;;
;;;; Mesh-Fly
;;;


(class Mesh-Fly-Program extends Mesh-Transformation-Program
  
  
  (method override (default-fragment-shader)
    mesh-fly-fs))


;;;
;;;; Mesh-Pulse
;;;


(class Mesh-Pulse-Program extends Mesh-Transformation-Program
  
  
  (method override (default-fragment-shader)
    mesh-pulse-fs)))
