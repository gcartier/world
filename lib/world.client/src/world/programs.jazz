;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; Shader Programs
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2016
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.programs jazz


(import (jazz.platform)
        (jazz.opengl.glew)
        (jazz.syntax (phase syntax))
        (world)
        (world.autoload)
        (world.buffer)
        (world.dye)
        (world.foreign)
        (world.geometry)
        (world.light)
        (world.lighting)
        (world.material)
        (world.mesh)
        (world.shader)
        (world.shaders)
        (world.support)
        (world.syntax (phase syntax)))


(proclaim (warn optimizations))


;;;
;;;; Texture
;;;


(class Texture-Program extends Shader-Program
  
  
  (slot projection_matrix-uniform)
  (slot view_matrix-uniform)
  (slot model_matrix-uniform)
  (slot texture_sampler-uniform)
  (slot vertex_coord-attribute)
  (slot texture_coord-attribute)
  
  
  (method override (prepare)
    (set-vs (default-vertex-shader))
    (set-fs (default-fragment-shader))
    (link)
    (set! projection_matrix-uniform (add-uniform "projection_matrix"))
    (set! view_matrix-uniform (add-uniform "view_matrix"))
    (set! model_matrix-uniform (add-uniform "model_matrix"))
    (set! texture_sampler-uniform (add-uniform "texture_sampler"))
    (set! vertex_coord-attribute (add-attribute "vertex_coord"))
    (set! texture_coord-attribute (add-attribute "texture_coord")))
  
  
  (method override (default-vertex-shader)
    texture-vs)
  
  (method override (default-fragment-shader)
    texture-fs)
  
  
  (method (create-vertex-buffer vertices)
    (let ((buffer (glGenBuffers*)))
      (glBindBuffer GL_ARRAY_BUFFER buffer)
      (glBufferDataFloat* GL_ARRAY_BUFFER (f32vector-length vertices) vertices GL_STATIC_DRAW)
      (glEnableVertexAttribArray vertex_coord-attribute)
      (glVertexAttribPointer* vertex_coord-attribute 3 GL_FLOAT GL_FALSE (* 6 float-size) 0)
      (glEnableVertexAttribArray texture_coord-attribute)
      (glVertexAttribPointer* texture_coord-attribute 3 GL_FLOAT GL_FALSE (* 6 float-size) (* 3 float-size))
      (glBindBuffer GL_ARRAY_BUFFER 0)
      buffer))
  
  
  (method (create-vertices-array vertices)
    (let ((array (glGenVertexArrays*)))
      (glBindVertexArray array)
      (let ((buffer (create-vertex-buffer vertices)))
        (glBindVertexArray 0)
        (values array buffer))))
  
  
  (method protected (bind-material texture-id)
    (glActiveTexture GL_TEXTURE0)
    (glBindTexture GL_TEXTURE_2D texture-id)
    (glUniform1i texture_sampler-uniform 0))
  
  
  (method protected (bind-uniforms projection-matrix view-matrix model-matrix)
    (glUniformMatrix4dv* projection_matrix-uniform 1 #f projection-matrix)
    (glUniformMatrix4dv* view_matrix-uniform 1 #f view-matrix)
    (glUniformMatrix4dv* model_matrix-uniform 1 #f model-matrix))
  
  
  ;; quick copy/paste of code
  (method protected (bind-entity-matrix matrix <matrix>)
    (let ((camera-pos (get-position~ (current-camera))))
      (let ((translation-matrix (make-identity-matrix&))
            (model-matrix (make-matrix&)))
        (matrix-set! translation-matrix 12 (- (vertex-x camera-pos)))
        (matrix-set! translation-matrix 13 (- (vertex-y camera-pos)))
        (matrix-set! translation-matrix 14 (- (vertex-z camera-pos)))
        (matrix-multiply! model-matrix translation-matrix matrix)
        (glUniformMatrix4dv* model_matrix-uniform 1 #f model-matrix)))))


;;;
;;;; Sheet
;;;


(class Sheet-Program extends Shader-Program
  
  
  (slot projection_matrix-uniform)
  (slot view_matrix-uniform)
  (slot texture_sampler-uniform)
  (slot vertex_coord-attribute)
  (slot texture_coord-attribute)
  
  
  (method override (prepare)
    (set-vs interface-vs)
    (set-fs interface-fs)
    (link)
    (set! projection_matrix-uniform (add-uniform "projection_matrix"))
    (set! view_matrix-uniform (add-uniform "view_matrix"))
    (set! texture_sampler-uniform (add-uniform "texture_sampler"))
    (set! vertex_coord-attribute (add-attribute "vertex_coord"))
    (set! texture_coord-attribute (add-attribute "texture_coord")))
  
  
  (method (create-vertex-buffer vertices)
    (let ((buffer (glGenBuffers*)))
      (glBindBuffer GL_ARRAY_BUFFER buffer)
      (glBufferDataFloat* GL_ARRAY_BUFFER (f32vector-length vertices) vertices GL_STATIC_DRAW)
      (glEnableVertexAttribArray vertex_coord-attribute)
      (glVertexAttribPointer* vertex_coord-attribute 3 GL_FLOAT GL_FALSE (* 6 float-size) 0)
      (glEnableVertexAttribArray texture_coord-attribute)
      (glVertexAttribPointer* texture_coord-attribute 3 GL_FLOAT GL_FALSE (* 6 float-size) (* 3 float-size))
      (glBindBuffer GL_ARRAY_BUFFER 0)
      buffer))
  
  
  (method (create-vertices-array vertices)
    (let ((array (glGenVertexArrays*)))
      (glBindVertexArray array)
      (let ((buffer (create-vertex-buffer vertices)))
        (glBindVertexArray 0)
        (values array buffer))))
  
  
  (method protected (bind-uniforms projection-matrix view-matrix texture-id)
    (glUniformMatrix4dv* projection_matrix-uniform 1 #f projection-matrix)
    (glUniformMatrix4dv* view_matrix-uniform 1 #f view-matrix)
    (glActiveTexture GL_TEXTURE0)
    (glBindTexture GL_TEXTURE_2D texture-id)
    (glUniform1i texture_sampler-uniform 0))
  
  
  (method protected (unbind-uniforms)
    (glActiveTexture GL_TEXTURE0)
    (glBindTexture GL_TEXTURE_2D 0)))


;;;
;;;; Skybox
;;;


(class Skybox-Program extends Shader-Program
  
  
  (slot projection_matrix-uniform)
  (slot view_matrix-uniform)
  (slot cubemap-uniform)
  (slot vertex_coord-attribute)
  
  
  (method override (prepare)
    (set-vs skybox-vs)
    (set-fs skybox-fs)
    (link)
    (set! projection_matrix-uniform (add-uniform "projection_matrix"))
    (set! view_matrix-uniform (add-uniform "view_matrix"))
    (set! cubemap-uniform (add-uniform "cubemap"))
    (set! vertex_coord-attribute (add-attribute "vertex_coord")))
  
  
  (method override (enable-attributes mesh <Mesh>) <void>
    (let ((buffer (get-vertices-buffer~ mesh)))
      (bind~ buffer)
      (enable-vertex-attrib~ buffer vertex_coord-attribute)
      (set-attrib-pointer~ buffer vertex_coord-attribute 3 GL_FLOAT vertex-stride vertex-offset)
      (unbind~ buffer)))
  
  
  (method protected (bind-uniforms projection-matrix view-matrix material)
    (glUniformMatrix4dv* projection_matrix-uniform 1 #f projection-matrix)
    (glUniformMatrix4dv* view_matrix-uniform 1 #f view-matrix)
    (glActiveTexture GL_TEXTURE0)
    (glBindTexture GL_TEXTURE_CUBE_MAP (get-id~ (get-texture~ material)))
    (glUniform1i cubemap-uniform 0))
  
  
  (method protected (unbind-uniforms)
    (glActiveTexture GL_TEXTURE0)
    (glBindTexture GL_TEXTURE_2D 0)))


;;;
;;;; Mesh
;;;


(class Mesh-Program extends Shader-Program
  
  
  (slot projection_matrix-uniform)
  (slot view_matrix-uniform)
  (slot model_matrix-uniform)
  (slot use_bones-uniform)
  (slot bone_matrices-uniform)
  (slot overlay-uniform)
  (slot vertex_coord-attribute)
  (slot normal-attribute)
  (slot bone_id-attribute)
  
  
  (method override (prepare)
    (set-vs (default-vertex-shader))
    (set-fs (default-fragment-shader))
    (link)
    (set! projection_matrix-uniform (add-uniform "projection_matrix"))
    (set! view_matrix-uniform (add-uniform "view_matrix"))
    (set! model_matrix-uniform (add-uniform "model_matrix"))
    (when (and animations? (use-animations?))
      (set! use_bones-uniform (add-uniform "use_bones"))
      (set! bone_matrices-uniform (add-uniform "bone_matrices")))
    (set! overlay-uniform (add-uniform "overlay"))
    (set! vertex_coord-attribute (add-attribute "vertex_coord"))
    (when (use-normal?)
      (set! normal-attribute (add-attribute "normal")))
    (when (and animations? (use-animations?))
      (set! bone_id-attribute (add-attribute "bone_id"))))
  
  
  (method override (enable-attributes mesh <Mesh>) <void>
    (let ((buffer (get-vertices-buffer~ mesh)))
      (bind~ buffer)
      (enable-vertex-attrib~ buffer vertex_coord-attribute)
      (set-attrib-pointer~ buffer vertex_coord-attribute 3 GL_FLOAT vertex-stride vertex-offset)
      (when (use-normal?)
        (enable-vertex-attrib~ buffer normal-attribute)
        (set-attrib-pointer~ buffer normal-attribute 3 GL_FLOAT vertex-stride normal-offset))
      (when (and animations? (use-animations?))
        (enable-vertex-attrib~ buffer bone_id-attribute)
        (set-attrib-pointer~ buffer bone_id-attribute 1 GL_FLOAT vertex-stride bone-offset))
      (unbind~ buffer)))
  
  
  (method protected virtual (use-normal?)
    #t)
  
  
  (method protected virtual (use-animations?)
    #t)
  
  
  (method protected virtual (bind-material?)
    #f)
  
  
  (method protected virtual (bind-material material)
    )
  
  
  (method protected virtual (bind-uniforms bone-matrices overlay alpha-cut lighting)
    (let ((camera (current-camera)))
      ;; Projection matrix
      (glUniformMatrix4dv* projection_matrix-uniform 1 #f (get-projection-matrix~ camera))
      ;; View matrix
      (glUniformMatrix4dv* view_matrix-uniform 1 #f (get-view-matrix~ camera))
      ;; Bone matrices
      (when (and animations? (use-animations?))
        (if (not bone-matrices)
            (glUniform1i use_bones-uniform 0)
          (glUniform1i use_bones-uniform 1)
          (glUniformMatrix4fv* bone_matrices-uniform 200 #f bone-matrices)))
      ;; Overlay
      (glUniform4fv* overlay-uniform 1 overlay)))
  
  
  ;; Model matrix
  (method protected (bind-model-matrix matrix <matrix>)
    (glUniformMatrix4dv* model_matrix-uniform 1 #f matrix))
  
  
  (method protected virtual (bind-mesh-matrix position <vertex> camera-pos <vertex>)
    (let ((matrix (make-identity-matrix&)))
      (matrix-set! matrix 12 (- (vertex-x position) (vertex-x camera-pos)))
      (matrix-set! matrix 13 (- (vertex-y position) (vertex-y camera-pos)))
      (matrix-set! matrix 14 (- (vertex-z position) (vertex-z camera-pos)))
      (bind-model-matrix matrix)))
  
  
  (method protected (bind-entity-matrix matrix <matrix>)
    (let ((camera-pos (get-position~ (current-camera))))
      (let ((translation-matrix (make-identity-matrix&))
            (model-matrix (make-matrix&)))
        (matrix-set! translation-matrix 12 (- (vertex-x camera-pos)))
        (matrix-set! translation-matrix 13 (- (vertex-y camera-pos)))
        (matrix-set! translation-matrix 14 (- (vertex-z camera-pos)))
        (matrix-multiply! model-matrix translation-matrix matrix)
        (bind-model-matrix model-matrix))))
  
  
  (method protected virtual (draw-mesh mesh <Mesh>) <void>
    (site (draw-mesh on?: #f parent: draw-world)
      ;; until fully converted
      (if (get-array~ mesh)
          (draw-array~ mesh)
        (draw-buffer mesh))))
  
  
  (method protected (draw-buffer mesh)
    (glBindVertexArray vao)
    (enable-attributes mesh)
    (draw~ mesh)
    (glBindVertexArray 0))
  
  
  (method protected virtual (unbind-uniforms)
    ))


;;;
;;;; Mesh-Color
;;;


(class Mesh-Color-Program extends Mesh-Program
  
  
  (slot color-uniform)
  
  
  (method override (prepare)
    (nextmethod)
    (set! color-uniform (add-uniform "color")))
  
  
  (method override (use-normal?)
    #f)
  
  
  (method override (default-vertex-shader)
    mesh-color-vs)
  
  (method override (default-fragment-shader)
    mesh-color-fs)
  
  
  (method override (bind-uniforms overlay alpha-cut lighting color)
    (nextmethod #f overlay alpha-cut lighting)
    ;; Color
    (assert color)
    (glUniform4fv* color-uniform 1 color)))


;;;
;;;; Mesh-Terrain
;;;


(class Mesh-Terrain-Program extends Mesh-Program
  
  
  (slot texture-uniform)
  (slot ambient_color-uniform)
  (slot alpha_cut-uniform)
  (slot daylight-uniform)
  (slot player_glow-uniform)
  (slot player_coord-uniform)
  (slot texture_coord-attribute)
  (slot lighting-attribute)
  
  
  (method override (prepare)
    (nextmethod)
    (when (bind-material?)
      (set! texture-uniform (add-uniform "texture_sampler")))
    (set! ambient_color-uniform (add-uniform "ambient_color"))
    (set! alpha_cut-uniform (add-uniform "alpha_cut"))
    (set! daylight-uniform (add-uniform "daylight"))
    (set! player_glow-uniform (add-uniform "player_glow"))
    (set! player_coord-uniform (add-uniform "player_coord"))
    (set! texture_coord-attribute (add-attribute "texture_coord"))
    (set! lighting-attribute (add-attribute "lighting")))
  
  
  (method override (default-vertex-shader)
    mesh-terrain-vs)
  
  (method override (default-fragment-shader)
    mesh-terrain-fs)
  
  
  (method override (use-animations?)
    #f)
  
  
  (method override (use-normal?)
    #f)
  
  
  (method protected virtual (use-fog?)
    #t)
  
  
  (method override (bind-material?)
    #t)
  
  
  (method override (bind-material material <Material>) <void>
    (glActiveTexture GL_TEXTURE0)
    (glBindTexture TEXTURE-TARGET (get-id~ (get-texture~ material)))
    (glUniform1i texture-uniform 0))
  
  
  (method override (bind-uniforms bone-matrices overlay alpha-cut <fl> lighting <Lighting>)
    (nextmethod bone-matrices overlay alpha-cut lighting)
    ;; Ambient color
    (let ((ambient (get-ambient-color~ lighting)))
      (glUniform4fv* ambient_color-uniform 1 ambient))
    ;; Alpha
    (glUniform1f alpha_cut-uniform alpha-cut)
    (let ((zone (current-zone))
          (me (current-me+)))
      ;; Daylight
      (glUniform1f daylight-uniform (get-daylight~ zone))
      ;; Player glow
      (glUniform1f player_glow-uniform (get-player-glow~ zone))))
  
  
  (method override (bind-mesh-matrix position <vertex> camera-pos <vertex>)
    (nextmethod position camera-pos)
    ;; Player coord
    (let ((me (current-me+)))
      (let ((coord (if me
                       (vertex-& (get-position~ me) position)
                     (vertex& 0. 0. 0.))))
        (glUniform3d* player_coord-uniform coord))))
  
  
  (method override (enable-attributes mesh <Mesh>) <void>
    (let ((buffer (get-vertices-buffer~ mesh)))
      (bind~ buffer)
      (enable-buffer-attributes mesh buffer vertex-stride)
      (unbind~ buffer))
    (let ((lightmap-buffer (get-lightmap-buffer~ mesh)))
      (bind~ lightmap-buffer)
      (enable-vertex-attrib~ lightmap-buffer lighting-attribute)
      (set-attrib-pointer~ lightmap-buffer lighting-attribute 3 GL_FLOAT lightmap-stride 0)
      (unbind~ lightmap-buffer)))
  
  
  (method protected virtual (enable-buffer-attributes mesh <Mesh> buffer <Buffer> stride <fx>) <void>
    (enable-vertex-attrib~ buffer vertex_coord-attribute)
    (set-attrib-pointer~ buffer vertex_coord-attribute 3 GL_FLOAT stride vertex-offset)
    (enable-vertex-attrib~ buffer texture_coord-attribute)
    (set-attrib-pointer~ buffer texture_coord-attribute 3 GL_FLOAT stride texture-offset))
  
  
  (method override (unbind-uniforms)
    ))


;;;
;;;; Mesh-Wet-Terrain
;;;


(definition wet-color
  (dye 0.8 0.8 0.8 1.0))


(class Mesh-Wet-Terrain-Program extends Mesh-Terrain-Program
  
  
  (method override (use-fog?)
    #f)
  
  
  (method override (default-fragment-shader)
    mesh-wet-terrain-fs))


;;;
;;;; Mesh-Phong
;;;


(class Light-Uniforms extends Object
  
  
  (slot ambient              getter generate)
  (slot diffuse              getter generate)
  (slot position             getter generate)
  (slot constantAttenuation  getter generate)
  (slot linearAttenuation    getter generate)
  (slot quadraticAttenuation getter generate)
  
  
  (method override (initialize program n)
    (set! ambient (add-uniform~ program (format "lights[{a}].ambient" n)))
    (set! diffuse (add-uniform~ program (format "lights[{a}].diffuse" n)))
    (set! position (add-uniform~ program (format "lights[{a}].position" n)))
    (set! constantAttenuation (add-uniform~ program (format "lights[{a}].constantAttenuation" n)))
    (set! linearAttenuation (add-uniform~ program (format "lights[{a}].linearAttenuation" n)))
    (set! quadraticAttenuation (add-uniform~ program (format "lights[{a}].quadraticAttenuation" n)))))


(class Mesh-Phong-Program extends Mesh-Program
  
  
  (slot texture-uniform)
  (slot ambient_color-uniform)
  (slot sun_color-uniform)
  (slot sun_coord-uniform)
  (slot lights_count-uniform)
  (slot lights-uniforms)
  (slot front_material_ambient-uniform)
  (slot front_material_diffuse-uniform)
  (slot front_material_specular-uniform)
  (slot front_material_shininess-uniform)
  (slot alpha_cut-uniform)
  (slot daylight-uniform)
  (slot player_glow-uniform)
  (slot player_coord-uniform)
  (slot texture_coord-attribute)
  (slot lighting-attribute)
  
  
  (method override (prepare)
    (nextmethod)
    (when (bind-material?)
      (set! texture-uniform (add-uniform "texture_sampler")))
    (set! ambient_color-uniform (add-uniform "ambient_color"))
    (set! sun_color-uniform (add-uniform "sun_color"))
    (set! sun_coord-uniform (add-uniform "sun_coord"))
    (set! lights_count-uniform (add-uniform "lights_count"))
    (set! lights-uniforms (map (lambda (n) (new Light-Uniforms self n)) (naturals 0 8)))
    (set! front_material_ambient-uniform (add-uniform "front_material.ambient"))
    (set! front_material_diffuse-uniform (add-uniform "front_material.diffuse"))
    (set! front_material_specular-uniform (add-uniform "front_material.specular"))
    (set! front_material_shininess-uniform (add-uniform "front_material.shininess"))
    (set! alpha_cut-uniform (add-uniform "alpha_cut"))
    (set! daylight-uniform (add-uniform "daylight"))
    (set! player_glow-uniform (add-uniform "player_glow"))
    (set! player_coord-uniform (add-uniform "player_coord"))
    (set! texture_coord-attribute (add-attribute "texture_coord"))
    (set! lighting-attribute (add-attribute "lighting")))
  
  
  (method override (default-vertex-shader)
    mesh-phong-vs)
  
  (method override (default-fragment-shader)
    mesh-phong-fs)
  
  
  (method protected virtual (use-fog?)
    #t)
  
  
  (method override (bind-material?)
    #t)
  
  
  (method override (bind-material material <Material>) <void>
    (glActiveTexture GL_TEXTURE0)
    (glBindTexture TEXTURE-TARGET (get-id~ (get-texture~ material)))
    (glUniform1i texture-uniform 0))
  
  
  (method override (bind-uniforms bone-matrices overlay alpha-cut <fl> lighting <Lighting>)
    (nextmethod bone-matrices overlay alpha-cut lighting)
    ;; Ambient color
    (let ((ambient (get-ambient-color~ lighting)))
      (glUniform4fv* ambient_color-uniform 1 ambient))
    ;; Sun color
    (let ((color (get-sun-effective~ lighting)))
      (glUniform4fv* sun_color-uniform 1 color))
    ;; Sun coord
    (let ((coord (get-sun-coordinates~ lighting)))
      (glUniform3d* sun_coord-uniform coord))
    ;; Lights
    (glUniform1i lights_count-uniform (get-lights-count~ lighting))
    ;; Lights
    (let ((camera-pos (get-position~ (current-camera))))
      (loop (for light <Light> in (get-lights~ lighting))
            (for uniforms in lights-uniforms)
            (for n from 0 below (get-lights-count~ lighting))
            (glUniform1f (get-constantAttenuation~ uniforms) (get-constant-attenuation~ light))
            (glUniform1f (get-linearAttenuation~ uniforms) (get-linear-attenuation~ light))
            (glUniform1f (get-quadraticAttenuation~ uniforms) (get-quadratic-attenuation~ light))
            (glUniform4fv* (get-ambient~ uniforms) 1 (get-ambient-color~ light))
            (glUniform4fv* (get-diffuse~ uniforms) 1 (get-color~ light))
            (let ((pos (static (f32vector 0. 0. 0. 1.0))))
              (f32vector-set! pos 0 (- (get-x~ light) (vertex-x camera-pos)))
              (f32vector-set! pos 1 (- (get-y~ light) (vertex-y camera-pos)))
              (f32vector-set! pos 2 (- (get-z~ light) (vertex-z camera-pos)))
              (glUniform4fv* (get-position~ uniforms) 1 pos))))
    ;; Material
    (let ((ambient #f32(.2 .2 .2 1.0)))
      (glUniform4fv* front_material_ambient-uniform 1 ambient))
    ;; was .8 arbitrarily
    ;; for inventory and showcase blocks it is a lot nicer at 1.
    ;; add diffuse to material if we want to change model diffuse
    (let ((diffuse #f32(1. 1. 1. 1.0)))
      (glUniform4fv* front_material_diffuse-uniform 1 diffuse))
    (let ((specular #f32(.01 .01 .01 1.0)))
      (glUniform4fv* front_material_specular-uniform 1 specular))
    (let ((shininess 50.))
      (glUniform1f front_material_shininess-uniform shininess))
    ;; Alpha
    (glUniform1f alpha_cut-uniform alpha-cut)
    (let ((zone (current-zone))
          (me (current-me+)))
      ;; Daylight
      (glUniform1f daylight-uniform (get-daylight~ zone))
      ;; Player glow
      (glUniform1f player_glow-uniform (get-player-glow~ zone))))
  
  
  (method override (bind-mesh-matrix position <vertex> camera-pos <vertex>)
    (nextmethod position camera-pos)
    ;; Player coord
    (let ((me (current-me+)))
      (let ((coord (if me
                       (vertex-& (get-position~ me) position)
                     (vertex& 0. 0. 0.))))
        (glUniform3d* player_coord-uniform coord))))
  
  
  (method override (enable-attributes mesh <Mesh>) <void>
    (let ((buffer (get-vertices-buffer~ mesh)))
      (bind~ buffer)
      (enable-buffer-attributes mesh buffer vertex-stride)
      (unbind~ buffer))
    (let ((lightmap-buffer (get-lightmap-buffer~ mesh)))
      (bind~ lightmap-buffer)
      (enable-vertex-attrib~ lightmap-buffer lighting-attribute)
      (set-attrib-pointer~ lightmap-buffer lighting-attribute 3 GL_FLOAT lightmap-stride 0)
      (unbind~ lightmap-buffer)))
  
  
  (method protected virtual (enable-buffer-attributes mesh <Mesh> buffer <Buffer> stride <fx>) <void>
    (enable-vertex-attrib~ buffer vertex_coord-attribute)
    (set-attrib-pointer~ buffer vertex_coord-attribute 3 GL_FLOAT stride vertex-offset)
    (when (use-normal?)
      (enable-vertex-attrib~ buffer normal-attribute)
      (set-attrib-pointer~ buffer normal-attribute 3 GL_FLOAT stride normal-offset))
    (enable-vertex-attrib~ buffer texture_coord-attribute)
    (set-attrib-pointer~ buffer texture_coord-attribute 3 GL_FLOAT stride texture-offset)
    (when animations?
      (enable-vertex-attrib~ buffer bone_id-attribute)
      (set-attrib-pointer~ buffer bone_id-attribute 1 GL_FLOAT stride bone-offset)))
  
  
  (method override (unbind-uniforms)
    ))


;;;
;;;; Mesh-Occlusion
;;;


(class Mesh-Occlusion-Program extends Mesh-Program
  
  
  (slot daylight-uniform)
  (slot lighting-attribute)
  
  
  (method override (prepare)
    (set-vs (default-vertex-shader))
    (set-fs (default-fragment-shader))
    (link)
    (set! projection_matrix-uniform (add-uniform "projection_matrix"))
    (set! view_matrix-uniform (add-uniform "view_matrix"))
    (set! model_matrix-uniform (add-uniform "model_matrix"))
    (set! daylight-uniform (add-uniform "daylight"))
    (set! vertex_coord-attribute (add-attribute "vertex_coord"))
    (set! lighting-attribute (add-attribute "lighting")))
  
  
  (method override (default-vertex-shader)
    mesh-occlusion-vs)
  
  (method override (default-fragment-shader)
    mesh-occlusion-fs)
  
  
  (method override (bind-uniforms bone-matrices overlay alpha-cut lighting)
    (let ((zone (current-zone))
          (camera (current-camera)))
      ;; Projection matrix
      (glUniformMatrix4dv* projection_matrix-uniform 1 #f (get-projection-matrix~ camera))
      ;; View matrix
      (glUniformMatrix4dv* view_matrix-uniform 1 #f (get-view-matrix~ camera))
      ;; Daylight
      (glUniform1f daylight-uniform (get-daylight~ zone))))
  
  
  (method override (enable-attributes mesh <Mesh>)
    (let ((buffer (get-vertices-buffer~ mesh)))
      (bind~ buffer)
      (enable-buffer-attributes mesh buffer vertex-stride)
      (unbind~ buffer))
    (let ((lightmap-buffer (get-lightmap-buffer~ mesh)))
      (bind~ lightmap-buffer)
      (enable-vertex-attrib~ lightmap-buffer lighting-attribute)
      (set-attrib-pointer~ lightmap-buffer lighting-attribute 3 GL_FLOAT lightmap-stride 0)
      (unbind~ lightmap-buffer)))
  
  
  (method protected virtual (enable-buffer-attributes mesh <Mesh> buffer <Buffer> stride)
    (enable-vertex-attrib~ buffer vertex_coord-attribute)
    (set-attrib-pointer~ buffer vertex_coord-attribute 3 GL_FLOAT stride 0))
  
  
  (method override (draw-mesh mesh <Mesh>) <void>
    (draw-buffer mesh)))


;;;
;;;; Mesh-Frame
;;;


(class Mesh-Frame-Program extends Mesh-Program
  
  
  (slot WIN_SCALE-uniform)
  (slot WIRE_COL-uniform)
  (slot FILL_COL-uniform)
  (slot swizz-attribute)
  (slot neighbor1-attribute)
  (slot neighbor2-attribute)
  
  
  (method override (prepare)
    (nextmethod)
    (set! WIN_SCALE-uniform (add-uniform "WIN_SCALE"))
    (set! WIRE_COL-uniform (add-uniform "WIRE_COL"))
    (set! FILL_COL-uniform (add-uniform "FILL_COL"))
    (set! swizz-attribute (add-attribute "swizz"))
    (set! neighbor1-attribute (add-attribute "neighbor1"))
    (set! neighbor2-attribute (add-attribute "neighbor2")))
  
  
  (method override (use-normal?)
    #f)
  
  
  (method override (bind-uniforms bone-matrices overlay alpha-cut lighting (wire-color: wire-color #f) (fill-color: fill-color #f))
    (nextmethod bone-matrices overlay alpha-cut lighting)
    (let ((world (current-world)))
      ;; Window scale
      (glUniform2f WIN_SCALE-uniform (/ (get-width~ world) 2.) (/ (get-height~ world) 2.))
      ;; Wire color
      (let ((wire-color (or wire-color (dye 0.8 0.3 0.1 1.))))
        (glUniform4fv* WIRE_COL-uniform 1 wire-color))
      ;; Fill color
      (let ((fill-color (or fill-color (dye 0. 0. 0. 1.))))
        (glUniform4fv* FILL_COL-uniform 1 fill-color))))
  
  
  (method override (enable-attributes mesh <Mesh>)
    (let ((buffer (get-vertices-buffer~ mesh)))
      (bind~ buffer)
      (enable-vertex-attrib~ buffer vertex_coord-attribute)
      (set-attrib-pointer~ buffer vertex_coord-attribute 3 GL_FLOAT vertex-stride vertex-offset)
      (when (use-normal?)
        (enable-vertex-attrib~ buffer normal-attribute)
        (set-attrib-pointer~ buffer normal-attribute 3 GL_FLOAT vertex-stride normal-offset))
      (when animations?
        (enable-vertex-attrib~ buffer bone_id-attribute)
        (set-attrib-pointer~ buffer bone_id-attribute 1 GL_FLOAT vertex-stride bone-offset))
      (unbind~ buffer))
    (let ((buffer (get-neighbors-buffer~ mesh)))
      (bind~ buffer)
      (enable-vertex-attrib~ buffer swizz-attribute)
      (set-attrib-pointer~ buffer swizz-attribute 1 GL_FLOAT neighbors-stride swizz-offset)
      (enable-vertex-attrib~ buffer neighbor1-attribute)
      (set-attrib-pointer~ buffer neighbor1-attribute 3 GL_FLOAT neighbors-stride neighbor1-offset)
      (enable-vertex-attrib~ buffer neighbor2-attribute)
      (set-attrib-pointer~ buffer neighbor2-attribute 3 GL_FLOAT neighbors-stride neighbor2-offset)
      (unbind~ buffer)))
  
  
  (method override (draw-mesh mesh <Mesh>) <void>
    (draw-buffer mesh)))


;;;
;;;; Mesh-Wireframe
;;;


(class Mesh-Wireframe-Program extends Mesh-Frame-Program
  
  
  (method override (default-vertex-shader)
    mesh-wireframe-vs)
  
  (method override (default-fragment-shader)
    mesh-wireframe-fs))


;;;
;;;; Mesh-Squareframe
;;;


(class Mesh-Squareframe-Program extends Mesh-Frame-Program
  
  
  (method override (default-vertex-shader)
    mesh-squareframe-vs)
  
  (method override (default-fragment-shader)
    mesh-squareframe-fs))


;;;
;;;; Mesh-Playerframe
;;;


(class Mesh-Playerframe-Program extends Mesh-Frame-Program
  
  
  (method override (default-vertex-shader)
    mesh-playerframe-vs)
  
  (method override (default-fragment-shader)
    mesh-playerframe-fs))


;;;
;;;; Mesh-Floorframe
;;;


(class Mesh-Floorframe-Program extends Mesh-Frame-Program
  
  
  @wait
  (slot EYE_HEIGHT-uniform)
  
  
  (method override (default-vertex-shader)
    mesh-floorframe-vs)
  
  (method override (default-fragment-shader)
    mesh-floorframe-fs)
  
  
  (method override (prepare)
    (nextmethod)
    @wait
    (set! EYE_HEIGHT-uniform (add-uniform "EYE_HEIGHT")))
  
  
  (method override (bind-uniforms bone-matrices overlay alpha-cut lighting (wire-color: wire-color #f) (fill-color: fill-color #f))
    (nextmethod bone-matrices overlay alpha-cut lighting wire-color: wire-color fill-color: fill-color)
    ;; Camera height
    ;; quick hack for the y-grid
    @wait
    (glUniform1f EYE_HEIGHT-uniform (vertex-y (get-position~ (current-camera))))))


;;;
;;;; Mesh-Transformation
;;;


(definition transformation-speed <fl>
  1.)

(definition public (get-transformation-speed)
  transformation-speed)

(definition public (set-transformation-speed speed <fl>)
  (set! transformation-speed speed))
  
  
(definition transformation-time <fl>
  1.)

(definition public (get-transformation-time)
  transformation-time)

(definition public (update-transformation-time elapse <fl>)
  (set! transformation-time (+ transformation-time (* elapse transformation-speed))))


(class Mesh-Transformation-Terrain-Program extends Mesh-Terrain-Program
  
  
  (slot time-uniform)
  
  
  (method override (prepare)
    (nextmethod)
    (set! time-uniform (add-uniform "time")))
  
  
  (method override (bind-uniforms bone-matrices overlay alpha-cut lighting)
    (nextmethod bone-matrices overlay alpha-cut lighting)
    (glUniform1f time-uniform transformation-time)))


(class Mesh-Transformation-Program extends Mesh-Phong-Program
  
  
  (slot time-uniform)
  
  
  (method override (prepare)
    (nextmethod)
    (set! time-uniform (add-uniform "time")))
  
  
  (method override (bind-uniforms bone-matrices overlay alpha-cut lighting)
    (nextmethod bone-matrices overlay alpha-cut lighting)
    (glUniform1f time-uniform transformation-time)))


;;;
;;;; Mesh-Radial-Blur
;;;


(class Mesh-Radial-Blur-Program extends Mesh-Transformation-Program
  
  
  (method override (default-fragment-shader)
    mesh-radial-blur-fs))


;;;
;;;; Mesh-Motion-Blur
;;;


(class Mesh-Motion-Blur-Program extends Mesh-Transformation-Program
  
  
  (method override (default-fragment-shader)
    mesh-motion-blur-fs))


;;;
;;;; Mesh-Water-Terrain
;;;


(class Mesh-Water-Terrain-Program extends Mesh-Transformation-Terrain-Program
  
  
  (method override (default-fragment-shader)
    mesh-water-fs))


;;;
;;;; Mesh-Water
;;;


(class Mesh-Water-Program extends Mesh-Transformation-Program
  
  
  (method override (default-fragment-shader)
    mesh-water-fs))


;;;
;;;; Mesh-Julia
;;;


(class Mesh-Julia-Program extends Mesh-Transformation-Program
  
  
  (method override (default-fragment-shader)
    mesh-julia-fs)
  
  
  (method override (bind-material?)
    #f))


;;;
;;;; Mesh-Sierpinski
;;;


(class Mesh-Sierpinski-Program extends Mesh-Transformation-Program
  
  
  (method override (default-fragment-shader)
    mesh-sierpinski-fs))


;;;
;;;; Mesh-Multitexture-Terrain
;;;


(class Mesh-Multitexture-Terrain-Program extends Mesh-Transformation-Terrain-Program
  
  
  (method override (default-fragment-shader)
    mesh-multitexture-fs))


;;;
;;;; Mesh-Multitexture
;;;


(class Mesh-Multitexture-Program extends Mesh-Transformation-Program
  
  
  (method override (default-fragment-shader)
    mesh-multitexture-fs))


;;;
;;;; Mesh-Kaleidoscope
;;;


(class Mesh-Kaleidoscope-Program extends Mesh-Transformation-Program
  
  
  (method override (default-fragment-shader)
    mesh-kaleidoscope-fs))


;;;
;;;; Mesh-Tunnel
;;;


(class Mesh-Tunnel-Program extends Mesh-Transformation-Program
  
  
  (method override (default-fragment-shader)
    mesh-tunnel-fs))


;;;
;;;; Mesh-Square-Tunnel
;;;


(class Mesh-Square-Tunnel-Program extends Mesh-Transformation-Program
  
  
  (method override (default-fragment-shader)
    mesh-square-tunnel-fs))


;;;
;;;; Mesh-Fly
;;;


(class Mesh-Fly-Program extends Mesh-Transformation-Program
  
  
  (method override (default-fragment-shader)
    mesh-fly-fs))


;;;
;;;; Mesh-Pulse
;;;


(class Mesh-Pulse-Program extends Mesh-Transformation-Program
  
  
  (method override (default-fragment-shader)
    mesh-pulse-fs)))
