;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Shader Programs
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2013
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.programs jazz


(import (jazz.geometry)
        (jazz.graphic)
        (jazz.graphic.opengl.glew)
        (jazz.io)
        (jazz.library)
        (jazz.literals)
        (jazz.media)
        (jazz.network)
        (jazz.platform)
        (jazz.platform.cairo)
        (jazz.runtime)
        (jazz.system)
        (jazz.ui)
        (jazz.ui.dialog)
        (jazz.ui.window)
        (world)
        (world.autoload)
        (world.dye)
        (world.foreign)
        (world.geometry)
        (world.shader)
        (world.shaders)
        (world.support)
        (world.syntax (phase syntax))
        (world.texture)
        (time))


;;;
;;;; Mesh
;;;


(class Mesh-Program extends Shader-Program
  
  
  (method protected virtual (bind-render-uniforms material matrix)
    )
  
  
  (method protected virtual (bind-uniforms mesh matrix bones)
    )
  
  
  (method protected virtual (enable-attributes mesh)
    )
  
  
  (method protected (draw-mesh mesh)
    (enable-attributes mesh)
    (draw~ mesh)
    (disable-attributes mesh))
  
  
  (method protected virtual (disable-attributes mesh)
    )
  
  
  (method protected virtual (unbind-uniforms)
    )
  
  
  (method protected virtual (unbind-render-uniforms)
    ))


;;;
;;;; Mesh-Color
;;;


(class Mesh-Color-Program extends Mesh-Program
  
  
  (method override (prepare)
    (set-vs mesh-color-vs)
    (set-fs mesh-color-fs)
    (link)
    (add-uniform "model_matrix")
    (add-uniform "color")
    (add-attribute "vertex_coord"))
  
  
  (method override (bind-uniforms mesh matrix color)
    ;; Model view matrix
    (glUniformMatrix4dv* (get-uniform "model_matrix") 1 #f matrix)
    ;; Color
    (glUniform4f (get-uniform "color") (dye-red color) (dye-green color) (dye-blue color) (dye-alpha color)))
  
  
  (method override (enable-attributes mesh)
    (let ((stride (* 10 float-size))
          (buffer (get-vertices-buffer~ mesh)))
      (bind~ buffer)
      (enable-vertex-attrib~ buffer (get-attribute "vertex_coord"))
      (set-attrib-pointer~ buffer (get-attribute "vertex_coord") 3 GL_FLOAT stride 0)
      (unbind~ buffer)))
  
  
  (method override (disable-attributes mesh)
    (let ((buffer (get-vertices-buffer~ mesh)))
      (bind~ buffer)
      (disable-vertex-attrib~ buffer (get-attribute "vertex_coord"))
      (unbind~ buffer))))


;;;
;;;; Mesh-Dynamic-Phong
;;;


(class Mesh-Dynamic-Phong-Program extends Mesh-Program
  
  
  (method override (prepare)
    (set-vs (default-vertex-shader))
    (set-fs (default-fragment-shader))
    (link)
    (add-uniform "texture")
    (add-uniform "sun_ambient")
    (add-uniform "sun_color")
    (add-uniform "sun_coord")
    (add-uniform "lights_count")
    (add-uniform "model_matrix")
    (add-attribute "vertex_coord")
    (add-attribute "normal")
    (add-attribute "texture_coord"))
  
  
  (method override (default-vertex-shader)
    mesh-dynamic-phong-vs)
  
  (method override (default-fragment-shader)
    mesh-phong-fs)
  
  
  (method override (bind-render-uniforms material matrix)
    (let ((zone (current-zone)))
      ;; Texture
      (glActiveTexture GL_TEXTURE0)
      (glBindTexture (if (get-texture-arrays?) GL_TEXTURE_2D_ARRAY_EXT GL_TEXTURE_2D) (get-id~ (get-texture~ material)))
      (glUniform1i (get-uniform "texture") 0)
      (cond ((get-sun-cycle?~ zone)
             ;; Sun ambient
             (let ((ambient (get-sun-ambient~ zone)))
               (glUniform4f (get-uniform "sun_ambient") (dye-red ambient) (dye-green ambient) (dye-blue ambient) (dye-alpha ambient)))
             ;; Sun color
             (let ((color (get-sun-color~ zone)))
               (glUniform4f (get-uniform "sun_color") (dye-red color) (dye-green color) (dye-blue color) (dye-alpha color)))
             ;; Sun coord
             (let ((coord (get-sun-coordinates~ zone)))
               (glUniform3f (get-uniform "sun_coord") (vertex-x coord) (vertex-y coord) (vertex-z coord))))
            (else
             ;; Sun ambient
             (glUniform4f (get-uniform "sun_ambient") 0. 0. 0. 0.)
             ;; Sun color
             (glUniform4f (get-uniform "sun_color") 0. 0. 0. 0.)
             ;; Sun coord
             (glUniform3f (get-uniform "sun_coord") 0. 0. 0.)))
      ;; Lighting
      (glUniform1i (get-uniform "lights_count") (get-lights-count~ zone))))
  
  
  (method override (bind-uniforms mesh matrix bones)
    ;; Model view matrix
    (glUniformMatrix4dv* (get-uniform "model_matrix") 1 #f matrix))
  
  
  (method override (enable-attributes mesh)
    (let ((buffer (get-vertices-buffer~ mesh))
          (stride (buffer-stride)))
      (bind~ buffer)
      (enable-buffer-attributes mesh buffer stride)
      (unbind~ buffer)))
  
  
  (method override (disable-attributes mesh)
    (let ((buffer (get-vertices-buffer~ mesh)))
      (bind~ buffer)
      (disable-buffer-attributes mesh buffer)
      (unbind~ buffer)))

  
  (method protected virtual (buffer-stride)
    (* 10 float-size))
  
  
  (method protected virtual (enable-buffer-attributes mesh buffer stride)
    (enable-vertex-attrib~ buffer (get-attribute "vertex_coord"))
    (set-attrib-pointer~ buffer (get-attribute "vertex_coord") 3 GL_FLOAT stride 0)
    (enable-vertex-attrib~ buffer (get-attribute "normal"))
    (set-attrib-pointer~ buffer (get-attribute "normal") 3 GL_FLOAT stride (* 3 float-size))
    (enable-vertex-attrib~ buffer (get-attribute "texture_coord"))
    (set-attrib-pointer~ buffer (get-attribute "texture_coord") 3 GL_FLOAT stride (* 6 float-size)))
  
  
  (method protected virtual (disable-buffer-attributes mesh buffer)
    (disable-vertex-attrib~ buffer (get-attribute "vertex_coord"))
    (disable-vertex-attrib~ buffer (get-attribute "normal"))
    (disable-vertex-attrib~ buffer (get-attribute "texture_coord")))
  
  
  (method override (unbind-uniforms)
    )
  
  
  (method override (unbind-render-uniforms)
    (glActiveTexture GL_TEXTURE0)
    (glBindTexture (if (get-texture-arrays?) GL_TEXTURE_2D_ARRAY_EXT GL_TEXTURE_2D) 0)))


;;;
;;;; Mesh-Skeletal-Phong
;;;


(class Mesh-Skeletal-Phong-Program extends Mesh-Dynamic-Phong-Program
  
  
  (method override (prepare)
    (nextmethod)
    (add-uniform "bone_matrices")
    (add-attribute "bone_id"))
  
  
  (method override (default-vertex-shader)
    mesh-skeletal-phong-vs)
  
  
  (method override (bind-uniforms mesh matrix bones)
    (nextmethod mesh matrix bones)
    ;; Bone matrices
    (glUniformMatrix4fv* (get-uniform "bone_matrices") 200 #f bones))
  
  
  (method override (buffer-stride)
    (* 10 float-size))

  
  (method override (enable-buffer-attributes mesh buffer stride)
    (nextmethod mesh buffer stride)
    (enable-vertex-attrib~ buffer (get-attribute "bone_id"))
    (set-attrib-pointer~ buffer (get-attribute "bone_id") 1 GL_FLOAT stride (* 9 float-size)))
  
  
  (method override (disable-buffer-attributes mesh buffer)
    (nextmethod mesh buffer)
    (disable-vertex-attrib~ buffer (get-attribute "bone_id"))))


;;;
;;;; Mesh-Phong
;;;


(class Mesh-Phong-Program extends Mesh-Dynamic-Phong-Program
  
  
  (method override (prepare)
    (nextmethod)
    (add-attribute "lighting"))
  
  
  (method override (default-vertex-shader)
    mesh-phong-vs)
  
  
  (method override (enable-attributes mesh)
    (nextmethod mesh)
    (let ((stride (* 3 float-size))
          (lightmap-buffer (get-lightmap-buffer~ mesh)))
      (bind~ lightmap-buffer)
      (enable-vertex-attrib~ lightmap-buffer (get-attribute "lighting"))
      (set-attrib-pointer~ lightmap-buffer (get-attribute "lighting") 3 GL_FLOAT stride 0)
      (unbind~ lightmap-buffer)))
  
  
  (method override (disable-attributes mesh)
    (nextmethod mesh)
    (let ((lightmap-buffer (get-lightmap-buffer~ mesh)))
      (bind~ lightmap-buffer)
      (disable-vertex-attrib~ lightmap-buffer (get-attribute "lighting"))
      (unbind~ lightmap-buffer))))


;;;
;;;; Mesh-Wireframe
;;;


(class Mesh-Wireframe-Program extends Mesh-Program
  
  
  (method override (prepare)
    (set-vs mesh-wireframe-vs)
    (set-fs mesh-wireframe-fs)
    (link)
    (add-uniform "model_matrix")
    (add-uniform "WIN_SCALE")
    (add-uniform "WIRE_COL")
    (add-uniform "FILL_COL")
    (add-attribute "vertex_coord")
    (add-attribute "swizz")
    (add-attribute "neighbor1")
    (add-attribute "neighbor2"))
  
  
  (method override (bind-uniforms mesh matrix bones)
    (let ((world (current-world)))
      ;; Model view matrix
      (glUniformMatrix4dv* (get-uniform "model_matrix") 1 #f matrix)
      ;; Window scale
      (glUniform2f (get-uniform "WIN_SCALE") (/ (get-width~ world) 2.) (/ (get-height~ world) 2.))
      ;; Wire color
      (let ((wire-color (dye 0.8 0.3 0.1 1.)))
        (glUniform3f (get-uniform "WIRE_COL") (dye-red wire-color) (dye-green wire-color) (dye-blue wire-color)))
      ;; Fill color
      (let ((fill-color (dye 0.0 0.0 0.0 1.)))
        (glUniform3f (get-uniform "FILL_COL") (dye-red fill-color) (dye-green fill-color) (dye-blue fill-color)))))
  
  
  (method override (enable-attributes mesh)
    (let ((stride (* 10 float-size))
          (buffer (get-vertices-buffer~ mesh)))
      (bind~ buffer)
      (enable-vertex-attrib~ buffer (get-attribute "vertex_coord"))
      (set-attrib-pointer~ buffer (get-attribute "vertex_coord") 3 GL_FLOAT stride 0)
      (unbind~ buffer))
    (let ((stride (* 7 float-size))
          (buffer (get-neighbors-buffer~ mesh)))
      (bind~ buffer)
      (enable-vertex-attrib~ buffer (get-attribute "swizz"))
      (set-attrib-pointer~ buffer (get-attribute "swizz") 1 GL_FLOAT stride 0)
      (enable-vertex-attrib~ buffer (get-attribute "neighbor1"))
      (set-attrib-pointer~ buffer (get-attribute "neighbor1") 3 GL_FLOAT stride float-size)
      (enable-vertex-attrib~ buffer (get-attribute "neighbor2"))
      (set-attrib-pointer~ buffer (get-attribute "neighbor2") 3 GL_FLOAT stride (* 4 float-size))
      (unbind~ buffer)))
  
  
  (method override (disable-attributes mesh)
    (let ((buffer (get-vertices-buffer~ mesh)))
      (bind~ buffer)
      (disable-vertex-attrib~ buffer (get-attribute "vertex_coord"))
      (unbind~ buffer))
    (let ((buffer (get-neighbors-buffer~ mesh)))
      (bind~ buffer)
      (disable-vertex-attrib~ buffer (get-attribute "swizz"))
      (disable-vertex-attrib~ buffer (get-attribute "neighbor1"))
      (disable-vertex-attrib~ buffer (get-attribute "neighbor2"))
      (unbind~ buffer))))


;;;
;;;; Mesh-Squareframe
;;;


(class Mesh-Squareframe-Program extends Mesh-Program
  
  
  (method override (prepare)
    (set-vs mesh-squareframe-vs)
    (set-fs mesh-squareframe-fs)
    (link)
    (add-uniform "model_matrix")
    (add-uniform "WIN_SCALE")
    (add-uniform "WIRE_COL")
    (add-uniform "FILL_COL")
    (add-attribute "vertex_coord")
    (add-attribute "swizz")
    (add-attribute "neighbor1")
    (add-attribute "neighbor2"))
  
  
  (method override (bind-uniforms mesh matrix bones)
    (let ((world (current-world)))
      ;; Model view matrix
      (glUniformMatrix4dv* (get-uniform "model_matrix") 1 #f matrix)
      ;; Window scale
      (glUniform2f (get-uniform "WIN_SCALE") (/ (get-width~ world) 2.) (/ (get-height~ world) 2.))
      ;; Wire color
      (let ((wire-color (dye 0.8 0.3 0.1 1.)))
        (glUniform4f (get-uniform "WIRE_COL") (dye-red wire-color) (dye-green wire-color) (dye-blue wire-color) (dye-alpha wire-color)))
      ;; Fill color
      (let ((fill-color (dye 0.0 0.0 0.0 1.)))
        (glUniform4f (get-uniform "FILL_COL") (dye-red fill-color) (dye-green fill-color) (dye-blue fill-color) (dye-alpha fill-color)))))
  
  
  (method override (enable-attributes mesh)
    (let ((stride (* 10 float-size))
          (buffer (get-vertices-buffer~ mesh)))
      (bind~ buffer)
      (enable-vertex-attrib~ buffer (get-attribute "vertex_coord"))
      (set-attrib-pointer~ buffer (get-attribute "vertex_coord") 3 GL_FLOAT stride 0)
      (unbind~ buffer))
    (let ((stride (* 7 float-size))
          (buffer (get-neighbors-buffer~ mesh)))
      (bind~ buffer)
      (enable-vertex-attrib~ buffer (get-attribute "swizz"))
      (set-attrib-pointer~ buffer (get-attribute "swizz") 1 GL_FLOAT stride 0)
      (enable-vertex-attrib~ buffer (get-attribute "neighbor1"))
      (set-attrib-pointer~ buffer (get-attribute "neighbor1") 3 GL_FLOAT stride float-size)
      (enable-vertex-attrib~ buffer (get-attribute "neighbor2"))
      (set-attrib-pointer~ buffer (get-attribute "neighbor2") 3 GL_FLOAT stride (* 4 float-size))
      (unbind~ buffer)))
  
  
  (method override (disable-attributes mesh)
    (let ((buffer (get-vertices-buffer~ mesh)))
      (bind~ buffer)
      (disable-vertex-attrib~ buffer (get-attribute "vertex_coord"))
      (unbind~ buffer))
    (let ((buffer (get-neighbors-buffer~ mesh)))
      (bind~ buffer)
      (disable-vertex-attrib~ buffer (get-attribute "swizz"))
      (disable-vertex-attrib~ buffer (get-attribute "neighbor1"))
      (disable-vertex-attrib~ buffer (get-attribute "neighbor2"))
      (unbind~ buffer))))


;;;
;;;; Mesh-Texture
;;;


(class Mesh-Texture-Program extends Mesh-Program
  
  
  (method override (prepare)
    (set-vs (default-vertex-shader))
    (set-fs (default-fragment-shader))
    (link)
    (when (use-texture?)
      (add-uniform "texture"))
    (add-attribute "vertex_coord")
    (add-attribute "texture_coord"))
  
  
  (method override (default-vertex-shader)
    mesh-texture-vs)
  
  (method override (default-fragment-shader)
    mesh-texture-fs)
  
  
  (method protected virtual (use-texture?)
    #t)
  
  
  (method override (bind-uniforms mesh matrix bones)
    (when (use-texture?)
      (let ((world (current-world)))
        (let ((texture (get-id~ (if (get-tile-program-atlas?~ world)
                                    (get-texture~ (get-material~ mesh))
                                  (get-tile-texture~ world)))))
          (glActiveTexture GL_TEXTURE0)
          (glBindTexture GL_TEXTURE_2D texture)
          (glUniform1i (get-uniform "texture") 0)))))
  
  
  (method override (enable-attributes mesh)
    (let ((stride (* 10 float-size))
          (buffer (get-vertices-buffer~ mesh)))
      (bind~ buffer)
      (enable-vertex-attrib~ buffer (get-attribute "vertex_coord"))
      (set-attrib-pointer~ buffer (get-attribute "vertex_coord") 3 GL_FLOAT stride 0)
      (enable-vertex-attrib~ buffer (get-attribute "texture_coord"))
      (set-attrib-pointer~ buffer (get-attribute "texture_coord") 3 GL_FLOAT stride (* 6 float-size))
      (unbind~ buffer)))
  
  
  (method override (disable-attributes mesh)
    (let ((buffer (get-vertices-buffer~ mesh)))
      (bind~ buffer)
      (disable-vertex-attrib~ buffer (get-attribute "vertex_coord"))
      (disable-vertex-attrib~ buffer (get-attribute "texture_coord"))
      (unbind~ buffer)))
  
  
  (method override (unbind-uniforms)
    (glActiveTexture GL_TEXTURE0)
    (glBindTexture GL_TEXTURE_2D 0)))


;;;
;;;; Mesh-Transformation
;;;


(definition transformation-time
  1.0)


(definition transformation-speed
  .01)

(definition public (get-transformation-speed)
  transformation-speed)

(definition public (set-transformation-speed speed)
  (set! transformation-speed speed))


(class Mesh-Transformation-Program extends Mesh-Texture-Program
  
  
  (method override (prepare)
    (nextmethod)
    (add-uniform "time")
    (add-uniform "resolution"))
  
  
  (method override (bind-uniforms mesh matrix bones)
    (nextmethod mesh matrix bones)
    (glUniform1f (get-uniform "time") transformation-time)
    (set! transformation-time (+ transformation-time transformation-speed))
    (glUniform2f (get-uniform "resolution") 1. 1.)))


;;;
;;;; Mesh-Radial-Blur
;;;


(class Mesh-Radial-Blur-Program extends Mesh-Transformation-Program
  
  
  (method override (default-fragment-shader)
    mesh-radial-blur-fs))


;;;
;;;; Mesh-Motion-Blur
;;;


(class Mesh-Motion-Blur-Program extends Mesh-Transformation-Program
  
  
  (method override (default-fragment-shader)
    mesh-motion-blur-fs))


;;;
;;;; Mesh-Water
;;;


(class Mesh-Water-Program extends Mesh-Transformation-Program
  
  
  (method override (default-fragment-shader)
    mesh-water-fs))


;;;
;;;; Mesh-Julia
;;;


(class Mesh-Julia-Program extends Mesh-Transformation-Program
  
  
  (method override (default-fragment-shader)
    mesh-julia-fs)
  
  
  (method override (use-texture?)
    #f))


;;;
;;;; Mesh-Sierpinski
;;;


(class Mesh-Sierpinski-Program extends Mesh-Transformation-Program
  
  
  (method override (default-fragment-shader)
    mesh-sierpinski-fs))


;;;
;;;; Mesh-Multitexture
;;;


(class Mesh-Multitexture-Program extends Mesh-Transformation-Program
  
  
  (method override (default-fragment-shader)
    mesh-multitexture-fs)
  
  
  (method override (bind-uniforms mesh matrix bones)
    (let ((world (current-world)))
      (nextmethod mesh matrix bones)
      (glActiveTexture GL_TEXTURE1)
      (glBindTexture GL_TEXTURE_2D (get-id~ (find-texture~ world "dirty.png")))))
  
  
  (method override (unbind-uniforms)
    (glActiveTexture GL_TEXTURE1)
    (glBindTexture GL_TEXTURE_2D 0)))


;;;
;;;; Mesh-Kaleidoscope
;;;


(class Mesh-Kaleidoscope-Program extends Mesh-Transformation-Program
  
  
  (method override (default-fragment-shader)
    mesh-kaleidoscope-fs))


;;;
;;;; Mesh-Tunnel
;;;


(class Mesh-Tunnel-Program extends Mesh-Transformation-Program
  
  
  (method override (default-fragment-shader)
    mesh-tunnel-fs))


;;;
;;;; Mesh-Square-Tunnel
;;;


(class Mesh-Square-Tunnel-Program extends Mesh-Transformation-Program
  
  
  (method override (default-fragment-shader)
    mesh-square-tunnel-fs))


;;;
;;;; Mesh-Fly
;;;


(class Mesh-Fly-Program extends Mesh-Transformation-Program
  
  
  (method override (default-fragment-shader)
    mesh-fly-fs))


;;;
;;;; Mesh-Pulse
;;;


(class Mesh-Pulse-Program extends Mesh-Transformation-Program
  
  
  (method override (default-fragment-shader)
    mesh-pulse-fs)))
