;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; Shader Programs
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is WorldScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2014
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See http://github.com/gcartier/world for details.


(module world.programs jazz


(import (jazz.graphic.opengl.glew)
        (world)
        (world.atlas)
        (world.autoload)
        (world.buffer)
        (world.dye)
        (world.fog)
        (world.foreign)
        (world.lighting)
        (world.material)
        (world.mesh)
        (world.shader)
        (world.shaders)
        (world.support)
        (world.syntax (phase syntax)))


(proclaim (warn optimizations))


;;;
;;;; Interface
;;;


(class Interface-Program extends Shader-Program
  
  
  (slot projection_matrix-uniform)
  (slot texture_sampler-uniform)
  (slot vertex_coord-attribute)
  (slot texture_coord-attribute)
  
  
  (method override (prepare)
    (set-vs interface-vs)
    (set-fs interface-fs)
    (link)
    (set! projection_matrix-uniform (add-uniform "projection_matrix"))
    (set! texture_sampler-uniform (add-uniform "texture_sampler"))
    (set! vertex_coord-attribute (add-attribute "vertex_coord"))
    (set! texture_coord-attribute (add-attribute "texture_coord")))
  
  
  (method (create-vertex-buffer vertices)
    (let ((vbo (glGenBuffers*)))
      (glBindBuffer GL_ARRAY_BUFFER vbo)
      (glBufferDataFloat* GL_ARRAY_BUFFER (f32vector-length vertices) vertices GL_STATIC_DRAW)
      (glEnableVertexAttribArray vertex_coord-attribute)
      (glVertexAttribPointer* vertex_coord-attribute 3 GL_FLOAT GL_FALSE (* 6 float-size) 0)
      (glEnableVertexAttribArray texture_coord-attribute)
      (glVertexAttribPointer* texture_coord-attribute 3 GL_FLOAT GL_FALSE (* 6 float-size) (* 3 float-size))
      (glBindBuffer GL_ARRAY_BUFFER 0)
      vbo))
  
  
  (method (create-vertices-array vertices)
    (let ((array (glGenVertexArrays*)))
      (glBindVertexArray array)
      (create-vertex-buffer vertices)
      (glBindVertexArray 0)
      array))
  
  
  (method protected (bind-uniforms projection-matrix texture-id)
    (glUniformMatrix4dv* projection_matrix-uniform 1 #f projection-matrix)
    (glActiveTexture GL_TEXTURE0)
    (glBindTexture GL_TEXTURE_2D texture-id)
    (glUniform1i texture_sampler-uniform 0))
  
  
  (method protected (unbind-uniforms)
    (glActiveTexture GL_TEXTURE0)
    (glBindTexture GL_TEXTURE_2D 0)))


;;;
;;;; Skybox
;;;


(class Skybox-Program extends Shader-Program
  
  
  (slot projection_matrix-uniform)
  (slot view_matrix-uniform)
  (slot cubemap-uniform)
  (slot vertex_coord-attribute)
  
  
  (method override (prepare)
    (set-vs skybox-vs)
    (set-fs skybox-fs)
    (link)
    (set! projection_matrix-uniform (add-uniform "projection_matrix"))
    (set! view_matrix-uniform (add-uniform "view_matrix"))
    (set! cubemap-uniform (add-uniform "cubemap"))
    (set! vertex_coord-attribute (add-attribute "vertex_coord")))
  
  
  (method override (enable-attributes mesh <Mesh>) <void>
    (let ((buffer (get-vertices-buffer~ mesh)))
      (bind~ buffer)
      (enable-vertex-attrib~ buffer vertex_coord-attribute)
      (set-attrib-pointer~ buffer vertex_coord-attribute 3 GL_FLOAT vertex-stride vertex-offset)
      (unbind~ buffer)))
  
  
  (method protected (bind-uniforms projection-matrix view-matrix texture-id)
    (glUniformMatrix4dv* projection_matrix-uniform 1 #f projection-matrix)
    (glUniformMatrix4dv* view_matrix-uniform 1 #f view-matrix)
    (glActiveTexture GL_TEXTURE0)
    (glBindTexture GL_TEXTURE_CUBE_MAP texture-id)
    (glUniform1i cubemap-uniform 0))
  
  
  (method protected (unbind-uniforms)
    (glActiveTexture GL_TEXTURE0)
    (glBindTexture GL_TEXTURE_CUBE_MAP 0)))


;;;
;;;; Mesh
;;;


(class Mesh-Program extends Shader-Program
  
  
  (slot projection_matrix-uniform)
  (slot view_matrix-uniform)
  (slot model_matrix-uniform)
  (slot use_bones-uniform)
  (slot bone_matrices-uniform)
  (slot moment-uniform)
  (slot vertex_coord-attribute)
  (slot normal-attribute)
  (slot bone_id-attribute)
  
  
  (method override (prepare)
    (set-vs (default-vertex-shader))
    (set-fs (default-fragment-shader))
    (link)
    (set! projection_matrix-uniform (add-uniform "projection_matrix"))
    (set! view_matrix-uniform (add-uniform "view_matrix"))
    (set! model_matrix-uniform (add-uniform "model_matrix"))
    (when (get-animations?)
      (set! use_bones-uniform (add-uniform "use_bones"))
      (set! bone_matrices-uniform (add-uniform "bone_matrices")))
    (when (use-moment?)
      (set! moment-uniform (add-uniform "moment")))
    (set! vertex_coord-attribute (add-attribute "vertex_coord"))
    (when (use-normal?)
      (set! normal-attribute (add-attribute "normal")))
    (when (get-animations?)
      (set! bone_id-attribute (add-attribute "bone_id"))))
  
  
  (method override (enable-attributes mesh <Mesh>) <void>
    (let ((buffer (get-vertices-buffer~ mesh)))
      (bind~ buffer)
      (enable-vertex-attrib~ buffer vertex_coord-attribute)
      (set-attrib-pointer~ buffer vertex_coord-attribute 3 GL_FLOAT vertex-stride vertex-offset)
      (when (use-normal?)
        (enable-vertex-attrib~ buffer normal-attribute)
        (set-attrib-pointer~ buffer normal-attribute 3 GL_FLOAT vertex-stride normal-offset))
      (when (get-animations?)
        (enable-vertex-attrib~ buffer bone_id-attribute)
        (set-attrib-pointer~ buffer bone_id-attribute 1 GL_FLOAT vertex-stride bone-offset))
      (unbind~ buffer)))
  
  
  (method override (disable-attributes mesh <Mesh>) <void>
    (let ((buffer (get-vertices-buffer~ mesh)))
      (bind~ buffer)
      (disable-vertex-attrib~ buffer vertex_coord-attribute)
      (when (use-normal?)
        (disable-vertex-attrib~ buffer normal-attribute))
      (when (get-animations?)
        (disable-vertex-attrib~ buffer bone_id-attribute))
      (unbind~ buffer)))
  
  
  (method protected virtual (use-normal?)
    #t)
  
  
  (method protected virtual (use-moment?)
    #t)
  
  
  (method protected virtual (bind-render-uniforms material alpha-cut)
    )
  
  
  (method protected virtual (bind-uniforms mesh <Mesh> matrix <f64vector> bone-matrices moment)
    ;; Projection matrix
    (glUniformMatrix4dv* projection_matrix-uniform 1 #f (get-projection-matrix~ (current-camera)))
    ;; View matrix
    (glUniformMatrix4dv* view_matrix-uniform 1 #f (get-view-matrix~ (current-camera)))
    ;; Model matrix
    (glUniformMatrix4dv* model_matrix-uniform 1 #f matrix)
    ;; Bone matrices
    (when (get-animations?)
      (if (not bone-matrices)
          (glUniform1i use_bones-uniform 0)
        (glUniform1i use_bones-uniform 1)
        (glUniformMatrix4fv* bone_matrices-uniform 200 #f bone-matrices)))
    ;; Moment
    (when (use-moment?)
      (glUniform1i moment-uniform moment)))
  
  
  (method protected (draw-mesh mesh <Mesh>) <void>
    (site (draw-mesh on?: #t parent: draw-world)
      ;; until fully converted
      (if (get-array~ mesh)
          (draw-array~ mesh)
        (enable-attributes mesh)
        (draw~ mesh)
        (disable-attributes mesh))))
  
  
  (method protected virtual (unbind-uniforms)
    )
  
  
  (method protected virtual (unbind-render-uniforms)
    ))


;;;
;;;; Mesh-Color
;;;


(class Mesh-Color-Program extends Mesh-Program
  
  
  (slot color-uniform)
  
  
  (method override (prepare)
    (nextmethod)
    (set! color-uniform (add-uniform "color")))
  
  
  (method override (use-normal?)
    #f)
  
  
  (method override (default-vertex-shader)
    mesh-color-vs)
  
  (method override (default-fragment-shader)
    mesh-color-fs)
  
  
  (method override (bind-uniforms mesh <Mesh> matrix <f64vector> moment color)
    (nextmethod mesh matrix #f moment)
    ;; Color
    (assert color)
    (glUniform4fv* color-uniform 1 color)))


;;;
;;;; Mesh-Phong
;;;


(class Light-Uniforms extends Object
  
  
  (slot ambient              getter generate)
  (slot diffuse              getter generate)
  (slot position             getter generate)
  (slot constantAttenuation  getter generate)
  (slot linearAttenuation    getter generate)
  (slot quadraticAttenuation getter generate)
  
  
  (method override (initialize program n)
    (set! ambient (add-uniform~ program (format "lights[{a}].ambient" n)))
    (set! diffuse (add-uniform~ program (format "lights[{a}].diffuse" n)))
    (set! position (add-uniform~ program (format "lights[{a}].position" n)))
    (set! constantAttenuation (add-uniform~ program (format "lights[{a}].constantAttenuation" n)))
    (set! linearAttenuation (add-uniform~ program (format "lights[{a}].linearAttenuation" n)))
    (set! quadraticAttenuation (add-uniform~ program (format "lights[{a}].quadraticAttenuation" n)))))


(class Mesh-Phong-Program extends Mesh-Program
  
  
  (slot texture-uniform)
  (slot ambient_color-uniform)
  (slot sun_color-uniform)
  (slot sun_coord-uniform)
  (slot lights_count-uniform)
  (slot lights-uniforms)
  (slot front_material_ambient-uniform)
  (slot front_material_diffuse-uniform)
  (slot front_material_specular-uniform)
  (slot front_material_shininess-uniform)
  ;; GLFC-wait-this-is-really-slow-on-mac
  (slot fog_color-uniform)
  (slot fog_density-uniform)
  (slot alpha_cut-uniform)
  (slot texture_coord-attribute)
  (slot lighting-attribute)
  
  
  (method override (prepare)
    (nextmethod)
    (set! texture-uniform (add-uniform "texture_sampler"))
    (set! ambient_color-uniform (add-uniform "ambient_color"))
    (set! sun_color-uniform (add-uniform "sun_color"))
    (set! sun_coord-uniform (add-uniform "sun_coord"))
    (set! lights_count-uniform (add-uniform "lights_count"))
    (set! lights-uniforms (map (lambda (n) (new Light-Uniforms self n)) (naturals 0 8)))
    (set! front_material_ambient-uniform (add-uniform "front_material.ambient"))
    (set! front_material_diffuse-uniform (add-uniform "front_material.diffuse"))
    (set! front_material_specular-uniform (add-uniform "front_material.specular"))
    (set! front_material_shininess-uniform (add-uniform "front_material.shininess"))
    @GLFC-wait-this-is-really-slow-on-mac
    (when (and (get-fog?) (use-fog?))
      (set! fog_color-uniform (add-uniform "fog_color"))
      (set! fog_density-uniform (add-uniform "fog_density")))
    (set! alpha_cut-uniform (add-uniform "alpha_cut"))
    (set! texture_coord-attribute (add-attribute "texture_coord"))
    (set! lighting-attribute (add-attribute "lighting")))
  
  
  (method override (default-vertex-shader)
    mesh-phong-vs)
  
  (method override (default-fragment-shader)
    mesh-phong-fs)
  
  
  (method protected virtual (use-fog?)
    #t)
  
  
  (method override (bind-render-uniforms material <Material> alpha-cut <fl>) <void>
    (let ((zone (current-zone)))
      ;; Texture
      (glActiveTexture GL_TEXTURE0)
      (glBindTexture TEXTURE-TARGET (get-id~ (get-texture~ material)))
      (glUniform1i texture-uniform 0)
      ;; Lighting
      (let ((lighting <Lighting> (get-current-lighting)))
        ;; Ambient color
        (let ((ambient (get-ambient-color~ lighting)))
          (glUniform4fv* ambient_color-uniform 1 ambient))
        ;; Sun color
        (let ((color (get-sun-effective~ lighting)))
          (glUniform4fv* sun_color-uniform 1 color))
        ;; Sun coord
        (let ((coord (get-sun-coordinates~ lighting)))
          (glUniform3d* sun_coord-uniform coord))
        ;; Lights
        (glUniform1i lights_count-uniform (get-lights-count~ lighting))
        ;; Lights
        (loop (for light in (get-lights~ lighting))
              (for uniforms in lights-uniforms)
              (for n from 0 below (get-lights-count~ lighting))
              (do
                (glUniform1f (get-constantAttenuation~ uniforms) (get-constant-attenuation~ light))
                (glUniform1f (get-linearAttenuation~ uniforms) (get-linear-attenuation~ light))
                (glUniform1f (get-quadraticAttenuation~ uniforms) (get-quadratic-attenuation~ light))
                (glUniform4fv* (get-ambient~ uniforms) 1 (get-ambient-color~ light))
                (glUniform4fv* (get-diffuse~ uniforms) 1 (get-color~ light))
                (let ((position (f32vector (get-x~ light) (get-y~ light) (get-z~ light) 1.0)))
                  (glUniform4fv* (get-position~ uniforms) 1 position)))))
      ;; Material
      (let ((ambient (dye .2 .2 .2 1.0)))
        (glUniform4fv* front_material_ambient-uniform 1 ambient))
      (let ((diffuse (dye .8 .8 .8 1.0)))
        (glUniform4fv* front_material_diffuse-uniform 1 diffuse))
      (let ((specular (dye .01 .01 .01 1.0)))
        (glUniform4fv* front_material_specular-uniform 1 specular))
      (let ((shininess 50.))
        (glUniform1f front_material_shininess-uniform shininess))
      ;; Fog
      @GLFC-wait-this-is-really-slow-on-mac
      (when (and (get-fog?) (use-fog?))
        (glUniform4fv* fog_color-uniform 1 (get-fog-color))
        (glUniform1f fog_density-uniform (get-fog-density)))
      ;; Alpha
      (glUniform1f alpha_cut-uniform alpha-cut)))
  
  
  (method override (enable-attributes mesh <Mesh>) <void>
    (let ((buffer (get-vertices-buffer~ mesh)))
      (bind~ buffer)
      (enable-buffer-attributes mesh buffer vertex-stride)
      (unbind~ buffer))
    (let ((lightmap-buffer (get-lightmap-buffer~ mesh)))
      (bind~ lightmap-buffer)
      (enable-vertex-attrib~ lightmap-buffer lighting-attribute)
      (set-attrib-pointer~ lightmap-buffer lighting-attribute 3 GL_FLOAT lightmap-stride 0)
      (unbind~ lightmap-buffer)))
  
  
  (method override (disable-attributes mesh <Mesh>) <void>
    (let ((buffer (get-vertices-buffer~ mesh)))
      (bind~ buffer)
      (disable-buffer-attributes mesh buffer)
      (unbind~ buffer))
    (let ((lightmap-buffer (get-lightmap-buffer~ mesh)))
      (bind~ lightmap-buffer)
      (disable-vertex-attrib~ lightmap-buffer lighting-attribute)
      (unbind~ lightmap-buffer)))
  
  
  (method protected virtual (enable-buffer-attributes mesh <Mesh> buffer <Buffer> stride <fx>) <void>
    (enable-vertex-attrib~ buffer vertex_coord-attribute)
    (set-attrib-pointer~ buffer vertex_coord-attribute 3 GL_FLOAT stride vertex-offset)
    (enable-vertex-attrib~ buffer normal-attribute)
    (set-attrib-pointer~ buffer normal-attribute 3 GL_FLOAT stride normal-offset)
    (enable-vertex-attrib~ buffer texture_coord-attribute)
    (set-attrib-pointer~ buffer texture_coord-attribute 3 GL_FLOAT stride texture-offset)
    (when (get-animations?)
      (enable-vertex-attrib~ buffer bone_id-attribute)
      (set-attrib-pointer~ buffer bone_id-attribute 1 GL_FLOAT stride bone-offset)))
  
  
  (method protected virtual (disable-buffer-attributes mesh <Mesh> buffer <Buffer>) <void>
    (disable-vertex-attrib~ buffer vertex_coord-attribute)
    (disable-vertex-attrib~ buffer normal-attribute)
    (disable-vertex-attrib~ buffer texture_coord-attribute)
    (when (get-animations?)
      (disable-vertex-attrib~ buffer bone_id-attribute)))
  
  
  (method override (unbind-uniforms)
    )
  
  
  (method override (unbind-render-uniforms)
    (glActiveTexture GL_TEXTURE0)
    (glBindTexture TEXTURE-TARGET 0)))


;;;
;;;; Mesh-Minecraft
;;;


(class Mesh-Minecraft-Program extends Mesh-Phong-Program
  
  
  (slot daylight-uniform)
  (slot player_glow-uniform)
  (slot player_coord-uniform)
  
  
  (method override (prepare)
    (nextmethod)
    (set! daylight-uniform (add-uniform "daylight_whatthefuck"))
    (set! player_glow-uniform (add-uniform "player_glow"))
    (set! player_coord-uniform (add-uniform "player_coord")))
  
  
  (method override (default-vertex-shader)
    mesh-minecraft-vs)
  
  
  (method override (bind-render-uniforms material <Material> alpha-cut <fl>) <void>
    (nextmethod material alpha-cut)
    (let ((zone (current-zone))
          (me (current-me)))
      ;; Daylight
      (glUniform1f daylight-uniform (get-daylight~ zone))
      ;; Player glow
      (glUniform1f player_glow-uniform (effective-player-glow~ zone))
      ;; Player coord
      (let ((coord (get-position~ me)))
        (glUniform3d* player_coord-uniform coord)))))


;;;
;;;; Mesh-Occlusion
;;;


(class Mesh-Occlusion-Program extends Mesh-Program
  
  
  (slot daylight-uniform)
  (slot lighting-attribute)
  
  
  (method override (prepare)
    (set-vs (default-vertex-shader))
    (set-fs (default-fragment-shader))
    (link)
    (set! projection_matrix-uniform (add-uniform "projection_matrix"))
    (set! view_matrix-uniform (add-uniform "view_matrix"))
    (set! model_matrix-uniform (add-uniform "model_matrix"))
    (set! daylight-uniform (add-uniform "daylight_whatthefuck"))
    (set! vertex_coord-attribute (add-attribute "vertex_coord"))
    (set! lighting-attribute (add-attribute "lighting")))
  
  
  (method override (default-vertex-shader)
    mesh-occlusion-vs)
  
  (method override (default-fragment-shader)
    mesh-occlusion-fs)
  
  
  (method override (bind-uniforms mesh <Mesh> matrix <f64vector> bone-matrices moment)
    ;; Projection matrix
    (glUniformMatrix4dv* projection_matrix-uniform 1 #f (get-projection-matrix~ (current-camera)))
    ;; View matrix
    (glUniformMatrix4dv* view_matrix-uniform 1 #f (get-view-matrix~ (current-camera)))
    ;; Model matrix
    (glUniformMatrix4dv* model_matrix-uniform 1 #f matrix))
  
  
  (method override (bind-render-uniforms material alpha-cut)
    (let ((zone (current-zone)))
      ;; Daylight
      (glUniform1f daylight-uniform (get-daylight~ zone))))
  
  
  (method override (enable-attributes mesh <Mesh>)
    (let ((buffer (get-vertices-buffer~ mesh)))
      (bind~ buffer)
      (enable-buffer-attributes mesh buffer vertex-stride)
      (unbind~ buffer))
    (let ((lightmap-buffer (get-lightmap-buffer~ mesh)))
      (bind~ lightmap-buffer)
      (enable-vertex-attrib~ lightmap-buffer lighting-attribute)
      (set-attrib-pointer~ lightmap-buffer lighting-attribute 3 GL_FLOAT lightmap-stride 0)
      (unbind~ lightmap-buffer)))
  
  
  (method override (disable-attributes mesh <Mesh>)
    (let ((buffer (get-vertices-buffer~ mesh)))
      (bind~ buffer)
      (disable-buffer-attributes mesh buffer)
      (unbind~ buffer))
    (let ((lightmap-buffer (get-lightmap-buffer~ mesh)))
      (bind~ lightmap-buffer)
      (disable-vertex-attrib~ lightmap-buffer lighting-attribute)
      (unbind~ lightmap-buffer)))
  
  
  (method protected virtual (enable-buffer-attributes mesh <Mesh> buffer <Buffer> stride)
    (enable-vertex-attrib~ buffer vertex_coord-attribute)
    (set-attrib-pointer~ buffer vertex_coord-attribute 3 GL_FLOAT stride 0))
  
  
  (method protected virtual (disable-buffer-attributes mesh <Mesh> buffer <Buffer>)
    (disable-vertex-attrib~ buffer vertex_coord-attribute)))


;;;
;;;; Mesh-Frame
;;;


(class Mesh-Frame-Program extends Mesh-Program
  
  
  (slot WIN_SCALE-uniform)
  (slot WIRE_COL-uniform)
  (slot FILL_COL-uniform)
  (slot swizz-attribute)
  (slot neighbor1-attribute)
  (slot neighbor2-attribute)
  
  
  (method override (prepare)
    (nextmethod)
    (set! WIN_SCALE-uniform (add-uniform "WIN_SCALE"))
    (set! WIRE_COL-uniform (add-uniform "WIRE_COL"))
    (set! FILL_COL-uniform (add-uniform "FILL_COL"))
    (set! swizz-attribute (add-attribute "swizz"))
    (set! neighbor1-attribute (add-attribute "neighbor1"))
    (set! neighbor2-attribute (add-attribute "neighbor2")))
  
  
  (method override (use-normal?)
    #f)
  
  
  (method override (bind-uniforms mesh <Mesh> matrix <f64vector> bone-matrices moment (wire-color: wire-color #f) (fill-color: fill-color #f))
    (nextmethod mesh matrix bone-matrices moment)
    (let ((world (current-world)))
      ;; Window scale
      (glUniform2f WIN_SCALE-uniform (/ (get-width~ world) 2.) (/ (get-height~ world) 2.))
      ;; Wire color
      (let ((wire-color (or wire-color (dye 0.8 0.3 0.1 1.))))
        (glUniform4fv* WIRE_COL-uniform 1 wire-color))
      ;; Fill color
      (let ((fill-color (or fill-color (dye 0. 0. 0. 1.))))
        (glUniform4fv* FILL_COL-uniform 1 fill-color))))
  
  
  (method override (enable-attributes mesh <Mesh>)
    (let ((buffer (get-vertices-buffer~ mesh)))
      (bind~ buffer)
      (enable-vertex-attrib~ buffer vertex_coord-attribute)
      (set-attrib-pointer~ buffer vertex_coord-attribute 3 GL_FLOAT vertex-stride vertex-offset)
      (when (use-normal?)
        (enable-vertex-attrib~ buffer normal-attribute)
        (set-attrib-pointer~ buffer normal-attribute 3 GL_FLOAT vertex-stride normal-offset))
      (when (get-animations?)
        (enable-vertex-attrib~ buffer bone_id-attribute)
        (set-attrib-pointer~ buffer bone_id-attribute 1 GL_FLOAT vertex-stride bone-offset))
      (unbind~ buffer))
    (let ((buffer (get-neighbors-buffer~ mesh)))
      (bind~ buffer)
      (enable-vertex-attrib~ buffer swizz-attribute)
      (set-attrib-pointer~ buffer swizz-attribute 1 GL_FLOAT neighbors-stride swizz-offset)
      (enable-vertex-attrib~ buffer neighbor1-attribute)
      (set-attrib-pointer~ buffer neighbor1-attribute 3 GL_FLOAT neighbors-stride neighbor1-offset)
      (enable-vertex-attrib~ buffer neighbor2-attribute)
      (set-attrib-pointer~ buffer neighbor2-attribute 3 GL_FLOAT neighbors-stride neighbor2-offset)
      (unbind~ buffer)))
  
  
  (method override (disable-attributes mesh <Mesh>)
    (let ((buffer (get-vertices-buffer~ mesh)))
      (bind~ buffer)
      (disable-vertex-attrib~ buffer vertex_coord-attribute)
      (when (use-normal?)
        (disable-vertex-attrib~ buffer normal-attribute))
      (when (get-animations?)
        (disable-vertex-attrib~ buffer bone_id-attribute))
      (unbind~ buffer))
    (let ((buffer (get-neighbors-buffer~ mesh)))
      (bind~ buffer)
      (disable-vertex-attrib~ buffer swizz-attribute)
      (disable-vertex-attrib~ buffer neighbor1-attribute)
      (disable-vertex-attrib~ buffer neighbor2-attribute)
      (unbind~ buffer))))


;;;
;;;; Mesh-Wireframe
;;;


(class Mesh-Wireframe-Program extends Mesh-Frame-Program
  
  
  (method override (default-vertex-shader)
    mesh-wireframe-vs)
  
  (method override (default-fragment-shader)
    mesh-wireframe-fs))


;;;
;;;; Mesh-Squareframe
;;;


(class Mesh-Squareframe-Program extends Mesh-Frame-Program
  
  
  (method override (default-vertex-shader)
    mesh-squareframe-vs)
  
  (method override (default-fragment-shader)
    mesh-squareframe-fs))


;;;
;;;; Mesh-Playerframe
;;;


(class Mesh-Playerframe-Program extends Mesh-Frame-Program
  
  
  (method override (default-vertex-shader)
    mesh-playerframe-vs)
  
  (method override (default-fragment-shader)
    mesh-playerframe-fs))


;;;
;;;; Mesh-Floorframe
;;;


(class Mesh-Floorframe-Program extends Mesh-Frame-Program
  
  
  @wait
  (slot EYE_HEIGHT-uniform)
  
  
  (method override (default-vertex-shader)
    mesh-floorframe-vs)
  
  (method override (default-fragment-shader)
    mesh-floorframe-fs)
  
  
  (method override (prepare)
    (nextmethod)
    @wait
    (set! EYE_HEIGHT-uniform (add-uniform "EYE_HEIGHT")))
  
  
  (method override (bind-uniforms mesh <Mesh> matrix <f64vector> bone-matrices moment (wire-color: wire-color #f) (fill-color: fill-color #f))
    (nextmethod mesh matrix bone-matrices moment wire-color: wire-color fill-color: fill-color)
    ;; Camera height
    ;; quick hack for the y-grid
    @wait
    (glUniform1f EYE_HEIGHT-uniform (vertex-y (get-position~ (current-camera))))))


;;;
;;;; Mesh-Texture
;;;


(class Mesh-Texture-Program extends Mesh-Program
  
  
  (slot texture-uniform)
  @GLFC-wait-non-uniform-size-is-really-slow-on-mac
  (slot texture_bounds-uniform)
  (slot texture_coord-attribute)
  
  
  (method override (prepare)
    (nextmethod)
    (when (use-texture?)
      (set! texture-uniform (add-uniform "texture_sampler")))
    @GLFC-wait-non-uniform-size-is-really-slow-on-mac
    (set! texture_bounds-uniform (add-uniform "texture_bounds"))
    (set! texture_coord-attribute (add-attribute "texture_coord")))
  
  
  (method override (use-normal?)
    #f)
  
  
  (method override (default-vertex-shader)
    mesh-texture-vs)
  
  (method override (default-fragment-shader)
    mesh-texture-fs)
  
  
  (method protected virtual (use-texture?)
    #t)
  
  
  (method override (bind-uniforms mesh <Mesh> matrix <f64vector> bone-matrices moment)
    (nextmethod mesh matrix bone-matrices moment)
    (let ((world (current-world))
          (material (get-material~ mesh)))
      (when (use-texture?)
        (let ((texture (get-id~ (get-texture~ material))))
          (glActiveTexture GL_TEXTURE0)
          (glBindTexture TEXTURE-TARGET texture)
          (glUniform1i texture-uniform 0)))
      (assert (get-atlas~ material))
      @GLFC-wait-non-uniform-size-is-really-slow-on-mac
      (let ((atlas <Atlas> (get-atlas~ material)))
        (let ((bounds (get-bounds~ atlas))
              (count (get-depth~ atlas)))
          (glUniform4fv* texture_bounds-uniform count bounds)))))
  
  
  (method override (enable-attributes mesh <Mesh>)
    (let ((buffer (get-vertices-buffer~ mesh)))
      (bind~ buffer)
      (enable-vertex-attrib~ buffer vertex_coord-attribute)
      (set-attrib-pointer~ buffer vertex_coord-attribute 3 GL_FLOAT vertex-stride vertex-offset)
      (when (use-normal?)
        (enable-vertex-attrib~ buffer normal-attribute)
        (set-attrib-pointer~ buffer normal-attribute 3 GL_FLOAT vertex-stride normal-offset))
      (enable-vertex-attrib~ buffer texture_coord-attribute)
      (set-attrib-pointer~ buffer texture_coord-attribute 3 GL_FLOAT vertex-stride texture-offset)
      (when (get-animations?)
        (enable-vertex-attrib~ buffer bone_id-attribute)
        (set-attrib-pointer~ buffer bone_id-attribute 1 GL_FLOAT vertex-stride bone-offset))
      (unbind~ buffer)))
  
  
  (method override (disable-attributes mesh <Mesh>)
    (let ((buffer (get-vertices-buffer~ mesh)))
      (bind~ buffer)
      (disable-vertex-attrib~ buffer vertex_coord-attribute)
      (when (use-normal?)
        (disable-vertex-attrib~ buffer normal-attribute))
      (disable-vertex-attrib~ buffer texture_coord-attribute)
      (when (get-animations?)
        (disable-vertex-attrib~ buffer bone_id-attribute))
      (unbind~ buffer)))
  
  
  (method override (unbind-uniforms)
    (glActiveTexture GL_TEXTURE0)
    (glBindTexture TEXTURE-TARGET 0)))


;;;
;;;; Mesh-Transformation
;;;


(definition transformation-speed <fl>
  1.)

(definition public (get-transformation-speed)
  transformation-speed)

(definition public (set-transformation-speed speed <fl>)
  (set! transformation-speed speed))
  
  
(definition transformation-time <fl>
  1.)

(definition public (get-transformation-time)
  transformation-time)

(definition public (update-transformation-time elapse <fl>)
  (set! transformation-time (+ transformation-time (* elapse transformation-speed))))


(class Mesh-Transformation-Program extends Mesh-Texture-Program
  
  
  (slot time-uniform)
  
  
  (method override (prepare)
    (nextmethod)
    (set! time-uniform (add-uniform "time")))
  
  
  (method override (use-moment?)
    #f)
  
  
  (method override (bind-uniforms mesh <Mesh> matrix <f64vector> bone-matrices moment)
    (nextmethod mesh matrix bone-matrices moment)
    (glUniform1f time-uniform transformation-time)))


;;;
;;;; Mesh-Radial-Blur
;;;


(class Mesh-Radial-Blur-Program extends Mesh-Transformation-Program
  
  
  (method override (default-fragment-shader)
    mesh-radial-blur-fs))


;;;
;;;; Mesh-Motion-Blur
;;;


(class Mesh-Motion-Blur-Program extends Mesh-Transformation-Program
  
  
  (method override (default-fragment-shader)
    mesh-motion-blur-fs))


;;;
;;;; Mesh-Water
;;;


(class Mesh-Water-Program extends Mesh-Transformation-Program
  
  
  (slot daylight-uniform)
  
  
  (method override (prepare)
    (nextmethod)
    (set! daylight-uniform (add-uniform "daylight_whatthefuck")))
  
  
  (method override (default-fragment-shader)
    mesh-water-fs)
  
  
  (method override (bind-render-uniforms material alpha-cut)
    (nextmethod material alpha-cut)
    (let ((zone (current-zone)))
      ;; Daylight
      (glUniform1f daylight-uniform (get-daylight~ zone)))))


;;;
;;;; Mesh-Wet
;;;


(definition wet-color
  (dye 0.8 0.8 0.8 1.0))


(class Mesh-Wet-Program extends Mesh-Minecraft-Program
  
  
  ;; GLFC-wait-this-is-really-slow-on-mac
  (slot wet_color-uniform)
  
  
  (method override (prepare)
    (nextmethod)
    @GLFC-wait-this-is-really-slow-on-mac
    (set! wet_color-uniform (add-uniform "wet_color")))
  
  
  (method override (use-fog?)
    #f)
  
  
  @GLFC-wait-this-is-really-slow-on-mac
  (method override (bind-render-uniforms material alpha-cut)
    (nextmethod material alpha-cut)
    (glUniform4fv* wet_color-uniform 1 wet-color))
  
  
  (method override (default-fragment-shader)
    mesh-wet-fs))


;;;
;;;; Mesh-Julia
;;;


(class Mesh-Julia-Program extends Mesh-Transformation-Program
  
  
  (method override (default-fragment-shader)
    mesh-julia-fs)
  
  
  (method override (use-texture?)
    #f))


;;;
;;;; Mesh-Sierpinski
;;;


(class Mesh-Sierpinski-Program extends Mesh-Transformation-Program
  
  
  (method override (default-fragment-shader)
    mesh-sierpinski-fs))


;;;
;;;; Mesh-Multitexture
;;;


(class Mesh-Multitexture-Program extends Mesh-Transformation-Program
  
  
  (method override (default-fragment-shader)
    mesh-multitexture-fs))


;;;
;;;; Mesh-Kaleidoscope
;;;


(class Mesh-Kaleidoscope-Program extends Mesh-Transformation-Program
  
  
  (method override (default-fragment-shader)
    mesh-kaleidoscope-fs))


;;;
;;;; Mesh-Tunnel
;;;


(class Mesh-Tunnel-Program extends Mesh-Transformation-Program
  
  
  (method override (default-fragment-shader)
    mesh-tunnel-fs))


;;;
;;;; Mesh-Square-Tunnel
;;;


(class Mesh-Square-Tunnel-Program extends Mesh-Transformation-Program
  
  
  (method override (default-fragment-shader)
    mesh-square-tunnel-fs))


;;;
;;;; Mesh-Fly
;;;


(class Mesh-Fly-Program extends Mesh-Transformation-Program
  
  
  (method override (default-fragment-shader)
    mesh-fly-fs))


;;;
;;;; Mesh-Pulse
;;;


(class Mesh-Pulse-Program extends Mesh-Transformation-Program
  
  
  (method override (default-fragment-shader)
    mesh-pulse-fs)))
