;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Shader Programs
;;;


(module world.programs jazz


(import (jazz.geometry)
        (jazz.graphic)
        (jazz.graphic.opengl.glew)
        (jazz.io)
        (jazz.library)
        (jazz.literals)
        (jazz.media)
        (jazz.network)
        (jazz.platform)
        (jazz.platform.cairo)
        (jazz.runtime)
        (jazz.system)
        (jazz.ui)
        (jazz.ui.dialog)
        (jazz.ui.window)
        (world)
        (world.autoload)
        (world.dye)
        (world.foreign)
        (world.geometry)
        (world.shader)
        (world.shaders)
        (world.syntax (phase syntax))
        (time))


;;;
;;;; Mesh
;;;


(class Mesh-Program extends Shader-Program
  
  
  (method protected virtual (bind-uniforms mesh matrix)
    )
  
  
  (method protected virtual (enable-attributes mesh)
    )
  
  
  (method protected (draw-mesh mesh)
    (enable-attributes mesh)
    (draw~ mesh)
    (disable-attributes mesh))
  
  
  (method protected virtual (disable-attributes mesh)
    )
  
  
  (method protected virtual (unbind-uniforms)
    ))


;;;
;;;; Mesh-Color
;;;


(class Mesh-Color-Program extends Mesh-Program
  
  
  (method override (prepare)
    (set-vs mesh-color-vs)
    (set-fs mesh-color-fs)
    (link)
    (add-uniform "model_matrix")
    (add-uniform "color")
    (add-attribute "vertex_coord"))
  
  
  (method override (bind-uniforms mesh matrix color)
    ;; Model view matrix
    (glUniformMatrix4fv* (get-uniform "model_matrix") 1 #f matrix)
    ;; Color
    (glUniform4f (get-uniform "color") (dye-red color) (dye-green color) (dye-blue color) (dye-alpha color)))
  
  
  (method override (enable-attributes mesh)
    (let ((stride (* 9 float-size))
          (vertices-buffer (get-vertices-buffer~ mesh)))
      (bind~ vertices-buffer)
      (enable-vertex-attrib~ vertices-buffer (get-attribute "vertex_coord"))
      (set-attrib-pointer~ vertices-buffer (get-attribute "vertex_coord") 3 GL_FLOAT stride 0)
      (unbind~ vertices-buffer)))
  
  
  (method override (disable-attributes mesh)
    (let ((vertices-buffer (get-vertices-buffer~ mesh)))
      (bind~ vertices-buffer)
      (disable-vertex-attrib~ vertices-buffer (get-attribute "vertex_coord"))
      (unbind~ vertices-buffer))))


;;;
;;;; Mesh-Wireframe
;;;


(class Mesh-Wireframe-Program extends Mesh-Program
  
  
  (method override (prepare)
    (set-vs mesh-wireframe-vs)
    (set-fs mesh-wireframe-fs)
    (link)
    (add-uniform "model_matrix")
    (add-uniform "WIN_SCALE")
    (add-uniform "WIRE_COL")
    (add-uniform "FILL_COL")
    (add-attribute "vertex_coord")
    (add-attribute "swizz")
    (add-attribute "neighbor1")
    (add-attribute "neighbor2"))
  
  
  (method override (bind-uniforms mesh matrix)
    (let ((world (current-world)))
      ;; Model view matrix
      (glUniformMatrix4fv* (get-uniform "model_matrix") 1 #f matrix)
      ;; Window scale
      (glUniform2f (get-uniform "WIN_SCALE") (/ (get-width~ world) 2.) (/ (get-height~ world) 2.))
      ;; Wire color
      (let ((wire-color (dye 0.8 0.3 0.1 1.)))
        (glUniform3f (get-uniform "WIRE_COL") (dye-red wire-color) (dye-green wire-color) (dye-blue wire-color)))
      ;; Fill color
      (let ((fill-color (dye 0.0 0.0 0.0 1.)))
        (glUniform3f (get-uniform "FILL_COL") (dye-red fill-color) (dye-green fill-color) (dye-blue fill-color)))))
  
  
  (method override (enable-attributes mesh)
    (let ((stride (* 9 float-size))
          (vertices-buffer (get-vertices-buffer~ mesh)))
      (bind~ vertices-buffer)
      (enable-vertex-attrib~ vertices-buffer (get-attribute "vertex_coord"))
      (set-attrib-pointer~ vertices-buffer (get-attribute "vertex_coord") 3 GL_FLOAT stride 0)
      (unbind~ vertices-buffer))
    (let ((stride (* 7 float-size))
          (neighbors-buffer (get-neighbors-buffer~ mesh)))
      (bind~ neighbors-buffer)
      (enable-vertex-attrib~ neighbors-buffer (get-attribute "swizz"))
      (set-attrib-pointer~ neighbors-buffer (get-attribute "swizz") 1 GL_FLOAT stride 0)
      (enable-vertex-attrib~ neighbors-buffer (get-attribute "neighbor1"))
      (set-attrib-pointer~ neighbors-buffer (get-attribute "neighbor1") 3 GL_FLOAT stride float-size)
      (enable-vertex-attrib~ neighbors-buffer (get-attribute "neighbor2"))
      (set-attrib-pointer~ neighbors-buffer (get-attribute "neighbor2") 3 GL_FLOAT stride (* 4 float-size))
      (unbind~ neighbors-buffer)))
  
  
  (method override (disable-attributes mesh)
    (let ((vertices-buffer (get-vertices-buffer~ mesh)))
      (bind~ vertices-buffer)
      (disable-vertex-attrib~ vertices-buffer (get-attribute "vertex_coord"))
      (unbind~ vertices-buffer))
    (let ((neighbors-buffer (get-neighbors-buffer~ mesh)))
      (bind~ neighbors-buffer)
      (disable-vertex-attrib~ neighbors-buffer (get-attribute "swizz"))
      (disable-vertex-attrib~ neighbors-buffer (get-attribute "neighbor1"))
      (disable-vertex-attrib~ neighbors-buffer (get-attribute "neighbor2"))
      (unbind~ neighbors-buffer))))


;;;
;;;; Mesh-Texture
;;;


(class Mesh-Texture-Program extends Mesh-Program
  
  
  (method override (prepare)
    (set-vs (default-vertex-shader))
    (set-fs (default-fragment-shader))
    (link)
    (when (use-texture?)
      (add-uniform "texture"))
    (add-attribute "vertex_coord")
    (add-attribute "texture_coord"))
  
  
  (method override (default-vertex-shader)
    mesh-texture-vs)
  
  (method override (default-fragment-shader)
    mesh-texture-fs)
  
  
  (method protected virtual (use-texture?)
    #t)
  
  
  (method override (bind-uniforms mesh matrix)
    (when (use-texture?)
      (glActiveTexture GL_TEXTURE0)
      (glBindTexture GL_TEXTURE_2D (get-texture~ (get-texture~ (get-material~ mesh))))
      (glUniform1i (get-uniform "texture") 0)))
  
  
  (method override (enable-attributes mesh)
    (let ((stride (* 9 float-size))
          (vertices-buffer (get-vertices-buffer~ mesh)))
      (bind~ vertices-buffer)
      (enable-vertex-attrib~ vertices-buffer (get-attribute "vertex_coord"))
      (set-attrib-pointer~ vertices-buffer (get-attribute "vertex_coord") 3 GL_FLOAT stride 0)
      (enable-vertex-attrib~ vertices-buffer (get-attribute "texture_coord"))
      (set-attrib-pointer~ vertices-buffer (get-attribute "texture_coord") 3 GL_FLOAT stride (* 3 float-size))
      (unbind~ vertices-buffer)))
  
  
  (method override (disable-attributes mesh)
    (let ((vertices-buffer (get-vertices-buffer~ mesh)))
      (bind~ vertices-buffer)
      (disable-vertex-attrib~ vertices-buffer (get-attribute "vertex_coord"))
      (disable-vertex-attrib~ vertices-buffer (get-attribute "texture_coord"))
      (unbind~ vertices-buffer)))
  
  
  (method override (unbind-uniforms)
    (glActiveTexture GL_TEXTURE0)
    (glBindTexture GL_TEXTURE_2D 0)))


;;;
;;;; Mesh-Dynamic-Phong
;;;


(class Mesh-Dynamic-Phong-Program extends Mesh-Program
  
  
  (method override (prepare)
    (set-vs (default-vertex-shader))
    (set-fs (default-fragment-shader))
    (link)
    (add-uniform "texture")
    (add-uniform "sun_ambient")
    (add-uniform "sun_color")
    (add-uniform "sun_coord")
    (add-uniform "lights_count")
    (add-uniform "model_matrix")
    (add-attribute "vertex_coord")
    (add-attribute "texture_coord")
    (add-attribute "normal"))
  
  
  (method override (default-vertex-shader)
    mesh-dynamic-phong-vs)
  
  (method override (default-fragment-shader)
    mesh-phong-fs)
  
  
  (method override (bind-uniforms mesh matrix)
    (let ((zone (current-zone)))
      ;; Texture
      (glActiveTexture GL_TEXTURE0)
      (glBindTexture GL_TEXTURE_2D (get-texture~ (get-texture~ (get-material~ mesh))))
      (glUniform1i (get-uniform "texture") 0)
      (cond ((get-sun-cycle?~ zone)
             ;; Sun ambient
             (let ((ambient (get-sun-ambient~ zone)))
               (glUniform4f (get-uniform "sun_ambient") (dye-red ambient) (dye-green ambient) (dye-blue ambient) (dye-alpha ambient)))
             ;; Sun color
             (let ((color (get-sun-color~ zone)))
               (glUniform4f (get-uniform "sun_color") (dye-red color) (dye-green color) (dye-blue color) (dye-alpha color)))
             ;; Sun coord
             (let ((coord (get-sun-coordinates~ zone)))
               (glUniform3f (get-uniform "sun_coord") (vertex-x coord) (vertex-y coord) (vertex-z coord))))
            (else
             ;; Sun ambient
             (glUniform4f (get-uniform "sun_ambient") 0. 0. 0. 0.)
             ;; Sun color
             (glUniform4f (get-uniform "sun_color") 0. 0. 0. 0.)
             ;; Sun coord
             (glUniform3f (get-uniform "sun_coord") 0. 0. 0.)))
      ;; Lighting
      (glUniform1i (get-uniform "lights_count") (get-lights-count~ zone))
      ;; Model view matrix
      (glUniformMatrix4fv* (get-uniform "model_matrix") 1 #f matrix)))
  
  
  (method override (enable-attributes mesh)
    (let ((stride (* 9 float-size))
          (vertices-buffer (get-vertices-buffer~ mesh)))
      (bind~ vertices-buffer)
      (enable-vertex-attrib~ vertices-buffer (get-attribute "vertex_coord"))
      (set-attrib-pointer~ vertices-buffer (get-attribute "vertex_coord") 3 GL_FLOAT stride 0)
      (enable-vertex-attrib~ vertices-buffer (get-attribute "texture_coord"))
      (set-attrib-pointer~ vertices-buffer (get-attribute "texture_coord") 3 GL_FLOAT stride (* 3 float-size))
      (enable-vertex-attrib~ vertices-buffer (get-attribute "normal"))
      (set-attrib-pointer~ vertices-buffer (get-attribute "normal") 3 GL_FLOAT stride (* 6 float-size))
      (unbind~ vertices-buffer)))
  
  
  (method override (disable-attributes mesh)
    (let ((vertices-buffer (get-vertices-buffer~ mesh)))
      (bind~ vertices-buffer)
      (disable-vertex-attrib~ vertices-buffer (get-attribute "vertex_coord"))
      (disable-vertex-attrib~ vertices-buffer (get-attribute "texture_coord"))
      (disable-vertex-attrib~ vertices-buffer (get-attribute "normal"))
      (unbind~ vertices-buffer)))
  
  
  (method override (unbind-uniforms)
    (glActiveTexture GL_TEXTURE0)
    (glBindTexture GL_TEXTURE_2D 0)))


;;;
;;;; Mesh-Phong
;;;


(class Mesh-Phong-Program extends Mesh-Dynamic-Phong-Program
  
  
  (method override (prepare)
    (nextmethod)
    (add-attribute "lighting"))
  
  
  (method override (default-vertex-shader)
    mesh-phong-vs)
  
  
  (method override (enable-attributes mesh)
    (nextmethod mesh)
    (let ((stride (* 3 float-size))
          (lightmap-buffer (get-lightmap-buffer~ mesh)))
      (bind~ lightmap-buffer)
      (enable-vertex-attrib~ lightmap-buffer (get-attribute "lighting"))
      (set-attrib-pointer~ lightmap-buffer (get-attribute "lighting") 3 GL_FLOAT stride 0)
      (unbind~ lightmap-buffer)))
  
  
  (method override (disable-attributes mesh)
    (nextmethod mesh)
    (let ((lightmap-buffer (get-lightmap-buffer~ mesh)))
      (bind~ lightmap-buffer)
      (disable-vertex-attrib~ lightmap-buffer (get-attribute "lighting"))
      (unbind~ lightmap-buffer))))


;;;
;;;; Mesh-Transformation
;;;


(definition transformation-time
  1.0)


(class Mesh-Transformation-Program extends Mesh-Texture-Program
  
  
  (method override (prepare)
    (nextmethod)
    (add-uniform "time")
    (add-uniform "resolution"))
  
  
  (method override (bind-uniforms mesh matrix)
    (nextmethod mesh matrix)
    (glUniform1f (get-uniform "time") transformation-time)
    (set! transformation-time (+ transformation-time .01))
    (glUniform2f (get-uniform "resolution") 1. 1.)))


;;;
;;;; Mesh-Radial-Blur
;;;


(class Mesh-Radial-Blur-Program extends Mesh-Transformation-Program
  
  
  (method override (default-fragment-shader)
    mesh-radial-blur-fs))


;;;
;;;; Mesh-Motion-Blur
;;;


(class Mesh-Motion-Blur-Program extends Mesh-Transformation-Program
  
  
  (method override (default-fragment-shader)
    mesh-motion-blur-fs))


;;;
;;;; Mesh-Water
;;;


(class Mesh-Water-Program extends Mesh-Transformation-Program
  
  
  (method override (default-fragment-shader)
    mesh-water-fs))


;;;
;;;; Mesh-Julia
;;;


(class Mesh-Julia-Program extends Mesh-Transformation-Program
  
  
  (method override (default-fragment-shader)
    mesh-julia-fs)
  
  
  (method override (use-texture?)
    #f))


;;;
;;;; Mesh-Sierpinski
;;;


(class Mesh-Sierpinski-Program extends Mesh-Transformation-Program
  
  
  (method override (default-fragment-shader)
    mesh-sierpinski-fs))


;;;
;;;; Mesh-Multitexture
;;;


(class Mesh-Multitexture-Program extends Mesh-Transformation-Program
  
  
  (method override (default-fragment-shader)
    mesh-multitexture-fs)
  
  
  (method override (bind-uniforms mesh matrix)
    (let ((world (current-world)))
      (nextmethod mesh matrix)
      (glActiveTexture GL_TEXTURE1)
      (glBindTexture GL_TEXTURE_2D (get-texture~ (find-texture~ world "dirty.png"))))))


;;;
;;;; Mesh-Kaleidoscope
;;;


(class Mesh-Kaleidoscope-Program extends Mesh-Transformation-Program
  
  
  (method override (default-fragment-shader)
    mesh-kaleidoscope-fs))


;;;
;;;; Mesh-Tunnel
;;;


(class Mesh-Tunnel-Program extends Mesh-Transformation-Program
  
  
  (method override (default-fragment-shader)
    mesh-tunnel-fs))


;;;
;;;; Mesh-Square-Tunnel
;;;


(class Mesh-Square-Tunnel-Program extends Mesh-Transformation-Program
  
  
  (method override (default-fragment-shader)
    mesh-square-tunnel-fs))


;;;
;;;; Mesh-Fly
;;;


(class Mesh-Fly-Program extends Mesh-Transformation-Program
  
  
  (method override (default-fragment-shader)
    mesh-fly-fs))


;;;
;;;; Mesh-Pulse
;;;


(class Mesh-Pulse-Program extends Mesh-Transformation-Program
  
  
  (method override (default-fragment-shader)
    mesh-pulse-fs)))
