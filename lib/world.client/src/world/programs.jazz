;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; Shader Programs
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.programs jazz


(import (jazz.platform)
        (jazz.opengl.glew)
        (jazz.syntax (phase syntax))
        (gaea.dye)
        (gaea.geometry)
        (world)
        (world.buffer)
        (world.context)
        (world.fog)
        (world.foreign)
        (world.light)
        (world.lighting)
        (world.material)
        (world.mesh)
        (world.shader)
        (world.shaders)
        (world.support))


(proclaim (warn optimizations))


;;;
;;;; Texture
;;;


(class Texture-Program extends Shader-Program
  
  
  (slot projection_matrix-uniform)
  (slot view_matrix-uniform)
  (slot model_matrix-uniform)
  (slot texture_sampler-uniform)
  (slot vertex_coord-attribute)
  (slot texture_coord-attribute)
  
  
  (method override (prepare self)
    (set-vs self (default-vertex-shader self))
    (set-fs self (default-fragment-shader self))
    (link self)
    (set! projection_matrix-uniform (add-uniform self "projection_matrix"))
    (set! view_matrix-uniform (add-uniform self "view_matrix"))
    (set! model_matrix-uniform (add-uniform self "model_matrix"))
    (set! texture_sampler-uniform (add-uniform self "texture_sampler"))
    (set! vertex_coord-attribute (add-attribute self "vertex_coord"))
    (set! texture_coord-attribute (add-attribute self "texture_coord")))
  
  
  (method override (default-vertex-shader self)
    texture-vs)
  
  (method override (default-fragment-shader self)
    texture-fs)
  
  
  (method package (create-vertex-buffer self vertices)
    (let ((buffer (glGenBuffers*)))
      (glBindBuffer GL_ARRAY_BUFFER buffer)
      (glBufferDataFloat* GL_ARRAY_BUFFER (f32vector-length vertices) vertices GL_STATIC_DRAW)
      (glEnableVertexAttribArray vertex_coord-attribute)
      (glVertexAttribPointer* vertex_coord-attribute 3 GL_FLOAT GL_FALSE (* 6 float-size) 0)
      (glEnableVertexAttribArray texture_coord-attribute)
      (glVertexAttribPointer* texture_coord-attribute 3 GL_FLOAT GL_FALSE (* 6 float-size) (* 3 float-size))
      (glBindBuffer GL_ARRAY_BUFFER 0)
      buffer))
  
  
  (method package (create-vertices-array self vertices)
    (let ((array (glGenVertexArrays*)))
      (glBindVertexArray array)
      (let ((buffer (create-vertex-buffer self vertices)))
        (glBindVertexArray 0)
        (values array buffer))))
  
  
  (method package virtual (bind-material self texture-id width height)
    (glActiveTexture GL_TEXTURE0)
    (glBindTexture GL_TEXTURE_2D texture-id)
    (glUniform1i texture_sampler-uniform 0))
  
  
  (method package (bind-uniforms self projection-matrix view-matrix model-matrix)
    (glUniformMatrix4dv* projection_matrix-uniform 1 #f projection-matrix)
    (glUniformMatrix4dv* view_matrix-uniform 1 #f view-matrix)
    (glUniformMatrix4dv* model_matrix-uniform 1 #f model-matrix))
  
  
  (method package (bind-entity-matrix self matrix <matrix>)
    (glUniformMatrix4dv* model_matrix-uniform 1 #f matrix)))


;;;
;;;; Texture-Flipped
;;;


(class Texture-Flipped-Program extends Texture-Program
  
  
  (method override (default-vertex-shader self)
    texture-flipped-vs))


;;;
;;;; Texture-Hardware
;;;


(class Texture-Hardware-Program extends Texture-Program
  
  
  (slot width-uniform)
  (slot height-uniform)
  
  
  (method override (prepare self)
    (nextmethod self)
    (set! width-uniform (add-uniform self "width"))
    (set! height-uniform (add-uniform self "height")))
  
  
  (method override (default-fragment-shader self)
    hardware-fs)
  
  
  (method override (bind-material self texture-id width height)
    (glActiveTexture GL_TEXTURE0)
    (glBindTexture GL_TEXTURE_RECTANGLE_ARB texture-id)
    (glUniform1i width-uniform width)
    (glUniform1i height-uniform height)
    (glUniform1i texture_sampler-uniform 0)))


;;;
;;;; Sheet
;;;


(class Sheet-Program extends Shader-Program
  
  
  (slot projection_matrix-uniform)
  (slot texture_sampler-uniform)
  (slot vertex_coord-attribute)
  (slot texture_coord-attribute)
  
  
  (method override (prepare self)
    (set-vs self (default-vertex-shader self))
    (set-fs self (default-fragment-shader self))
    (link self)
    (set! projection_matrix-uniform (add-uniform self "projection_matrix"))
    (set! texture_sampler-uniform (add-uniform self "texture_sampler"))
    (set! vertex_coord-attribute (add-attribute self "vertex_coord"))
    (set! texture_coord-attribute (add-attribute self "texture_coord")))
  
  
  (method override (default-vertex-shader self)
    sheet-vs)
  
  (method override (default-fragment-shader self)
    sheet-fs)
  
  
  (method package (create-vertex-buffer self vertices)
    (let ((buffer (glGenBuffers*)))
      (glBindBuffer GL_ARRAY_BUFFER buffer)
      (glBufferDataFloat* GL_ARRAY_BUFFER (f32vector-length vertices) vertices GL_STATIC_DRAW)
      (glEnableVertexAttribArray vertex_coord-attribute)
      (glVertexAttribPointer* vertex_coord-attribute 3 GL_FLOAT GL_FALSE (* 6 float-size) 0)
      (glEnableVertexAttribArray texture_coord-attribute)
      (glVertexAttribPointer* texture_coord-attribute 3 GL_FLOAT GL_FALSE (* 6 float-size) (* 3 float-size))
      (glBindBuffer GL_ARRAY_BUFFER 0)
      buffer))
  
  
  (method package (create-vertices-array self vertices)
    (let ((array (glGenVertexArrays*)))
      (glBindVertexArray array)
      (let ((buffer (create-vertex-buffer self vertices)))
        (glBindVertexArray 0)
        (values array buffer))))
  
  
  (method package virtual (bind-uniforms self projection-matrix texture-id width height)
    (glUniformMatrix4dv* projection_matrix-uniform 1 #f projection-matrix)
    (glActiveTexture GL_TEXTURE0)
    (glBindTexture GL_TEXTURE_2D texture-id)
    (glUniform1i texture_sampler-uniform 0))
  
  
  (method package virtual (unbind-uniforms self)
    (glActiveTexture GL_TEXTURE0)
    (glBindTexture GL_TEXTURE_2D 0)))


;;;
;;;; Sheet-Flipped
;;;


(class Sheet-Flipped-Program extends Sheet-Program
  
  
  (method override (default-vertex-shader self)
    sheet-flipped-vs))


;;;
;;;; Sheet-Hardware
;;;


(class Sheet-Hardware-Program extends Sheet-Program
  
  
  (slot width-uniform)
  (slot height-uniform)
  
  
  (method override (prepare self)
    (nextmethod self)
    (set! width-uniform (add-uniform self "width"))
    (set! height-uniform (add-uniform self "height")))
  
  
  (method override (default-fragment-shader self)
    hardware-fs)
  
  
  (method override (bind-uniforms self projection-matrix texture-id width height)
    (glUniformMatrix4dv* projection_matrix-uniform 1 #f projection-matrix)
    (glActiveTexture GL_TEXTURE0)
    (glBindTexture GL_TEXTURE_RECTANGLE_ARB texture-id)
    (glUniform1i width-uniform width)
    (glUniform1i height-uniform height)
    (glUniform1i texture_sampler-uniform 0))
  
  
  (method override (unbind-uniforms self)
    (glActiveTexture GL_TEXTURE0)
    (glBindTexture GL_TEXTURE_RECTANGLE_ARB 0)))


;;;
;;;; Skybox
;;;


(class Skybox-Program extends Shader-Program
  
  
  (slot projection_matrix-uniform)
  (slot view_matrix-uniform)
  (slot cubemap-uniform)
  (slot vertex_coord-attribute)
  
  
  (method override (prepare self)
    (set-vs self (default-vertex-shader self))
    (set-fs self (default-fragment-shader self))
    (link self)
    (set! projection_matrix-uniform (add-uniform self "projection_matrix"))
    (set! view_matrix-uniform (add-uniform self "view_matrix"))
    (set! cubemap-uniform (add-uniform self "cubemap"))
    (set! vertex_coord-attribute (add-attribute self "vertex_coord")))
  
  
  (method override (default-vertex-shader self)
    skybox-vs)
  
  (method override (default-fragment-shader self)
    skybox-fs)
  
  
  (method override (enable-attributes self mesh <Mesh>) <void>
    (let ((buffer (get-vertices-buffer mesh)))
      (bind-buffer buffer)
      (enable-vertex-attrib buffer vertex_coord-attribute)
      (set-attrib-pointer buffer vertex_coord-attribute 3 GL_FLOAT vertex-stride vertex-offset)
      (unbind-buffer buffer)))
  
  
  (method package (bind-uniforms self projection-matrix view-matrix texture)
    (glUniformMatrix4dv* projection_matrix-uniform 1 #f projection-matrix)
    (glUniformMatrix4dv* view_matrix-uniform 1 #f view-matrix)
    (glActiveTexture GL_TEXTURE0)
    (glBindTexture GL_TEXTURE_CUBE_MAP (get-id texture))
    (glUniform1i cubemap-uniform 0))
  
  
  (method package (unbind-uniforms self)
    (glActiveTexture GL_TEXTURE0)
    (glBindTexture GL_TEXTURE_2D 0)))


;;;
;;;; Mesh
;;;


(class Mesh-Program extends Shader-Program
  
  
  (slot projection_matrix-uniform)
  (slot view_matrix-uniform)
  (slot model_matrix-uniform)
  (slot use_bones-uniform)
  (slot bone_matrices-uniform)
  (slot overlay-uniform)
  (slot vertex_coord-attribute)
  (slot normal-attribute)
  (slot bone_id-attribute)
  
  
  (method override (prepare self)
    (set-vs self (default-vertex-shader self))
    (set-fs self (default-fragment-shader self))
    (link self)
    (set! projection_matrix-uniform (add-uniform self "projection_matrix"))
    (set! view_matrix-uniform (add-uniform self "view_matrix"))
    (set! model_matrix-uniform (add-uniform self "model_matrix"))
    (when (and animations? (use-animations? self))
      (set! use_bones-uniform (add-uniform self "use_bones"))
      (set! bone_matrices-uniform (add-uniform self "bone_matrices")))
    (set! overlay-uniform (add-uniform self "overlay"))
    (set! vertex_coord-attribute (add-attribute self "vertex_coord"))
    (when (use-normal? self)
      (set! normal-attribute (add-attribute self "normal")))
    (when (and animations? (use-animations? self))
      (set! bone_id-attribute (add-attribute self "bone_id"))))
  
  
  (method override (enable-attributes self mesh <Mesh>) <void>
    (let ((buffer (get-vertices-buffer mesh)))
      (bind-buffer buffer)
      (enable-vertex-attrib buffer vertex_coord-attribute)
      (set-attrib-pointer buffer vertex_coord-attribute 3 GL_FLOAT vertex-stride vertex-offset)
      (when (use-normal? self)
        (enable-vertex-attrib buffer normal-attribute)
        (set-attrib-pointer buffer normal-attribute 3 GL_FLOAT vertex-stride normal-offset))
      (when (and animations? (use-animations? self))
        (enable-vertex-attrib buffer bone_id-attribute)
        (set-attrib-pointer buffer bone_id-attribute 1 GL_FLOAT vertex-stride bone-offset))
      (unbind-buffer buffer)))
  
  
  (method protected virtual (use-normal? self)
    #f)
  
  
  (method protected virtual (use-animations? self)
    #t)
  
  
  (method protected virtual (use-instance? self)
    #f)
  
  
  (method package virtual (bind-material? self)
    #f)
  
  
  (method package virtual (bind-material self material)
    )
  
  
  (method package virtual (bind-uniforms self bone-matrices overlay alpha-cut)
    (let ((camera (current-camera)))
      ;; Projection matrix
      (glUniformMatrix4dv* projection_matrix-uniform 1 #f (get-projection-matrix camera))
      ;; View matrix
      (glUniformMatrix4dv* view_matrix-uniform 1 #f (get-view-matrix camera))
      ;; Bone matrices
      (when (and animations? (use-animations? self))
        (if (not bone-matrices)
            (glUniform1i use_bones-uniform 0)
          (glUniform1i use_bones-uniform 1)
          (glUniformMatrix4fv* bone_matrices-uniform max-bones #f bone-matrices)))
      ;; Overlay
      (glUniform4fv* overlay-uniform 1 overlay)))
  
  
  ;; Model matrix
  (method protected (bind-model-matrix self matrix <matrix>)
    (glUniformMatrix4dv* model_matrix-uniform 1 #f matrix))
  
  
  (method package virtual (bind-mesh-matrix self position <vertex>)
    (let ((matrix (make-identity-matrix&)))
      (matrix-set! matrix 12 (vertex-x position))
      (matrix-set! matrix 13 (vertex-y position))
      (matrix-set! matrix 14 (vertex-z position))
      (bind-model-matrix self matrix)))
  
  
  (method package (bind-entity-matrix self matrix <matrix>)
    (bind-model-matrix self matrix))
  
  
  (method package virtual (draw-mesh self mesh <Mesh>) <void>
    (site draw-mesh
      ;; until fully converted
      (if (get-array mesh)
          (draw-array mesh)
        (draw-buffer self mesh))))
  
  
  (method protected (draw-buffer self mesh)
    (glBindVertexArray vao)
    (enable-attributes self mesh)
    (draw mesh)
    (glBindVertexArray 0))
  
  
  (method package virtual (unbind-uniforms self)
    ))


;;;
;;;; Mesh-Color
;;;


(class Mesh-Color-Program extends Mesh-Program
  
  
  (slot color-uniform)
  
  
  (method override (prepare self)
    (nextmethod self)
    (set! color-uniform (add-uniform self "color")))
  
  
  (method override (default-vertex-shader self)
    mesh-color-vs)
  
  (method override (default-fragment-shader self)
    mesh-color-fs)
  
  
  (method override (bind-uniforms self overlay alpha-cut color)
    (nextmethod self #f overlay alpha-cut)
    ;; Color
    (assert color)
    (glUniform4fv* color-uniform 1 color)))


;;;
;;;; Mesh-Block
;;;


(class Mesh-Block-Program extends Mesh-Program
  
  
  (slot texture-uniform)
  (slot alpha_cut-uniform)
  (slot daylight-uniform)
  (slot fog_color-uniform)
  (slot fog_near-uniform)
  (slot fog_far-uniform)
  (slot player_glow-uniform)
  (slot player_coord-uniform)
  (slot lightmap-uniform)
  (slot texture_coord-attribute)
  (slot lighting-attribute)
  
  
  (method override (prepare self)
    (nextmethod self)
    (when (bind-material? self)
      (set! texture-uniform (add-uniform self "texture_sampler")))
    (when (use-alphacut? self)
      (set! alpha_cut-uniform (add-uniform self "alpha_cut")))
    (set! daylight-uniform (add-uniform self "daylight"))
    (when (use-fog? self)
      (set! fog_color-uniform (add-uniform self "fog_color"))
      (set! fog_near-uniform (add-uniform self "fog_near"))
      (set! fog_far-uniform (add-uniform self "fog_far")))
    (set! player_glow-uniform (add-uniform self "player_glow"))
    (set! player_coord-uniform (add-uniform self "player_coord"))
    (set! lightmap-uniform (add-uniform self "lightmap_sampler"))
    (set! texture_coord-attribute (add-attribute self "texture_coord"))
    (set! lighting-attribute (add-attribute self "lighting")))
  
  
  (method override (default-vertex-shader self)
    mesh-block-vs)
  
  (method override (default-fragment-shader self)
    mesh-fs)
  
  
  (method override (use-animations? self)
    #f)
  
  
  (method protected virtual (use-alphacut? self)
    #f)
  
  
  (method protected virtual (use-fog? self)
    #t)
  
  
  (method override (setup-transform-feedback self)
    (when debug-transform?
      (glTransformFeedbackVaryings program)))
  
  
  (method override (bind-material? self)
    #t)
  
  
  (method override (bind-material self material <Material>) <void>
    (let ((world (current-world)))
      (glActiveTexture GL_TEXTURE0)
      (glBindTexture TEXTURE-TARGET (get-id (get-texture material)))
      (glUniform1i texture-uniform 0)
      (glActiveTexture GL_TEXTURE9)
      (glBindTexture GL_TEXTURE_2D (get-id (get-day-lightmap world)))
      (glUniform1i lightmap-uniform 9)))
  
  
  (method override (bind-uniforms self bone-matrices overlay alpha-cut <fl>)
    ;(nextmethod self bone-matrices overlay alpha-cut)
    (let ((camera (current-camera)))
      ;; Projection matrix
      (glUniformMatrix4dv* projection_matrix-uniform 1 #f (get-projection-matrix camera))
      ;; View matrix
      (glUniformMatrix4dv* view_matrix-uniform 1 #f (get-view-matrix camera)))
    ;; Alpha
    (when (use-alphacut? self)
      (glUniform1f alpha_cut-uniform alpha-cut))
    (let ((zone (current-zone))
          (me (current-me)))
      ;; Daylight
      (glUniform1f daylight-uniform (get-daylight zone))
      ;; Fog color
      (when (use-fog? self)
        (glUniform4fv* fog_color-uniform 1 fog-color)
        (glUniform1f fog_near-uniform fog-near)
        (glUniform1f fog_far-uniform fog-far))
      ;; Player glow
      (glUniform1f player_glow-uniform (get-player-glow zone))
      ;; Player coord
      (let ((coord (get-position me)))
        (glUniform3d* player_coord-uniform coord)))
    ;; Overlay
    (glUniform4fv* overlay-uniform 1 overlay))
  
  
  (method override (enable-attributes self mesh <Mesh>) <void>
    (let ((buffer (get-vertices-buffer mesh)))
      (bind-buffer buffer)
      (enable-buffer-attributes self mesh buffer vertex-stride)
      (unbind-buffer buffer))
    (let ((lightmap-buffer (get-lightmap-buffer mesh)))
      (bind-buffer lightmap-buffer)
      (enable-vertex-attrib lightmap-buffer lighting-attribute)
      (set-attrib-pointer lightmap-buffer lighting-attribute 3 GL_FLOAT lightmap-stride 0)
      (unbind-buffer lightmap-buffer)))
  
  
  (method protected virtual (enable-buffer-attributes self mesh <Mesh> buffer <Buffer> stride <fx>) <void>
    (enable-vertex-attrib buffer vertex_coord-attribute)
    (set-attrib-pointer buffer vertex_coord-attribute 3 GL_FLOAT stride vertex-offset)
    (when (use-normal? self)
      (enable-vertex-attrib buffer normal-attribute)
      (set-attrib-pointer buffer normal-attribute 3 GL_FLOAT stride normal-offset))
    (enable-vertex-attrib buffer texture_coord-attribute)
    (set-attrib-pointer buffer texture_coord-attribute 3 GL_FLOAT stride texture-offset))
  
  
  (method override (unbind-uniforms self)
    ))


;;;
;;;; Mesh-Transparent-Block
;;;


(class Mesh-Transparent-Block-Program extends Mesh-Block-Program
  
  
  (method override (use-alphacut? self)
    #t)
  
  
  (method override (default-fragment-shader self)
    mesh-alphacut-fs))


;;;
;;;; Mesh-Wet-Block
;;;


(definition wet-color
  (dye 0.8 0.8 0.8 1.0))


(class Mesh-Wet-Block-Program extends Mesh-Block-Program
  
  
  (method override (use-fog? self)
    #f)
  
  
  (method override (default-fragment-shader self)
    mesh-wet-fs))


;;;
;;;; Mesh-Model
;;;


(class Mesh-Model-Program extends Mesh-Program
  
  
  (slot texture-uniform)
  (slot alpha_cut-uniform)
  (slot daylight-uniform)
  (slot fog_color-uniform)
  (slot fog_near-uniform)
  (slot fog_far-uniform)
  (slot player_glow-uniform)
  (slot player_coord-uniform)
  (slot lightmap-uniform)
  (slot texture_coord-attribute)
  (slot lighting-attribute)
  
  
  (method override (prepare self)
    (nextmethod self)
    (when (bind-material? self)
      (set! texture-uniform (add-uniform self "texture_sampler")))
    (when (use-alphacut? self)
      (set! alpha_cut-uniform (add-uniform self "alpha_cut")))
    (set! daylight-uniform (add-uniform self "daylight"))
    (set! fog_color-uniform (add-uniform self "fog_color"))
    (set! fog_near-uniform (add-uniform self "fog_near"))
    (set! fog_far-uniform (add-uniform self "fog_far"))
    (set! player_glow-uniform (add-uniform self "player_glow"))
    (set! player_coord-uniform (add-uniform self "player_coord"))
    (set! lightmap-uniform (add-uniform self "lightmap_sampler"))
    (when (use-texture_coord? self)
      (set! texture_coord-attribute (add-attribute self "texture_coord")))
    (set! lighting-attribute (add-attribute self "lighting")))
  
  
  (method override (default-vertex-shader self)
    mesh-model-vs)
  
  (method override (default-fragment-shader self)
    mesh-alphacut-fs)
  
  
  (method protected virtual (use-alphacut? self)
    #t)
  
  
  (method protected virtual (use-fog? self)
    #t)
  
  
  (method protected virtual (use-texture_coord? self)
    #t)
  
  
  (method override (setup-transform-feedback self)
    (when debug-transform?
      (glTransformFeedbackVaryings program)))
  
  
  (method override (bind-material? self)
    #t)
  
  
  (method override (bind-material self material <Material>) <void>
    (let ((world (current-world)))
      (glActiveTexture GL_TEXTURE0)
      (glBindTexture TEXTURE-TARGET (get-id (get-texture material)))
      (glUniform1i texture-uniform 0)
      (glActiveTexture GL_TEXTURE9)
      (glBindTexture GL_TEXTURE_2D (get-id (get-day-lightmap world)))
      (glUniform1i lightmap-uniform 9)))
  
  
  (method override (bind-uniforms self bone-matrices overlay alpha-cut <fl>)
    (nextmethod self bone-matrices overlay alpha-cut)
    ;; Alpha
    (when (use-alphacut? self)
      (glUniform1f alpha_cut-uniform alpha-cut))
    (let ((zone (current-zone))
          (me (current-me)))
      ;; Daylight
      (glUniform1f daylight-uniform (get-daylight zone))
      ;; Fog color
      (glUniform4fv* fog_color-uniform 1 fog-color)
      (glUniform1f fog_near-uniform fog-near)
      (glUniform1f fog_far-uniform fog-far)
      ;; Player glow
      (glUniform1f player_glow-uniform (get-player-glow zone))
      ;; Player coord
      (let ((coord (get-position me)))
        (glUniform3d* player_coord-uniform coord))))
  
  
  (method override (enable-attributes self mesh <Mesh>) <void>
    (let ((buffer (get-vertices-buffer mesh)))
      (bind-buffer buffer)
      (enable-buffer-attributes self mesh buffer vertex-stride)
      (unbind-buffer buffer))
    (let ((lightmap-buffer (get-lightmap-buffer mesh)))
      (bind-buffer lightmap-buffer)
      (enable-vertex-attrib lightmap-buffer lighting-attribute)
      (set-attrib-pointer lightmap-buffer lighting-attribute 3 GL_FLOAT lightmap-stride 0)
      (unbind-buffer lightmap-buffer)))
  
  
  (method protected virtual (enable-buffer-attributes self mesh <Mesh> buffer <Buffer> stride <fx>) <void>
    (enable-vertex-attrib buffer vertex_coord-attribute)
    (set-attrib-pointer buffer vertex_coord-attribute 3 GL_FLOAT stride vertex-offset)
    (when (use-normal? self)
      (enable-vertex-attrib buffer normal-attribute)
      (set-attrib-pointer buffer normal-attribute 3 GL_FLOAT stride normal-offset))
    (when (use-texture_coord? self)
      (enable-vertex-attrib buffer texture_coord-attribute)
      (set-attrib-pointer buffer texture_coord-attribute 3 GL_FLOAT stride texture-offset))
    (when animations?
      (enable-vertex-attrib buffer bone_id-attribute)
      (set-attrib-pointer buffer bone_id-attribute 1 GL_FLOAT stride bone-offset)))
  
  
  (method override (unbind-uniforms self)
    ))


;;;
;;;; Mesh-Occlusion
;;;


(class Mesh-Occlusion-Program extends Mesh-Program
  
  
  (slot daylight-uniform)
  (slot lightmap-uniform)
  (slot lighting-attribute)
  
  
  (method override (prepare self)
    (set-vs self (default-vertex-shader self))
    (set-fs self (default-fragment-shader self))
    (link self)
    (set! projection_matrix-uniform (add-uniform self "projection_matrix"))
    (set! view_matrix-uniform (add-uniform self "view_matrix"))
    (set! model_matrix-uniform (add-uniform self "model_matrix"))
    (set! daylight-uniform (add-uniform self "daylight"))
    (set! lightmap-uniform (add-uniform self "lightmap_sampler"))
    (set! vertex_coord-attribute (add-attribute self "vertex_coord"))
    (set! lighting-attribute (add-attribute self "lighting")))
  
  
  (method override (default-vertex-shader self)
    mesh-occlusion-vs)
  
  (method override (default-fragment-shader self)
    mesh-occlusion-fs)
  
  
  (method override (bind-material? self)
    #t)
  
  
  (method override (bind-material self material <Material>) <void>
    (let ((world (current-world)))
      (glActiveTexture GL_TEXTURE9)
      (glBindTexture GL_TEXTURE_2D (get-id (get-day-lightmap world)))
      (glUniform1i lightmap-uniform 9)))
  
  
  (method override (bind-uniforms self bone-matrices overlay alpha-cut)
    (let ((zone (current-zone))
          (camera (current-camera)))
      ;; Projection matrix
      (glUniformMatrix4dv* projection_matrix-uniform 1 #f (get-projection-matrix camera))
      ;; View matrix
      (glUniformMatrix4dv* view_matrix-uniform 1 #f (get-view-matrix camera))
      ;; Daylight
      (glUniform1f daylight-uniform (get-daylight zone))))
  
  
  (method override (enable-attributes self mesh <Mesh>)
    (let ((buffer (get-vertices-buffer mesh)))
      (bind-buffer buffer)
      (enable-buffer-attributes self mesh buffer vertex-stride)
      (unbind-buffer buffer))
    (let ((lightmap-buffer (get-lightmap-buffer mesh)))
      (bind-buffer lightmap-buffer)
      (enable-vertex-attrib lightmap-buffer lighting-attribute)
      (set-attrib-pointer lightmap-buffer lighting-attribute 3 GL_FLOAT lightmap-stride 0)
      (unbind-buffer lightmap-buffer)))
  
  
  (method protected virtual (enable-buffer-attributes self mesh <Mesh> buffer <Buffer> stride)
    (enable-vertex-attrib buffer vertex_coord-attribute)
    (set-attrib-pointer buffer vertex_coord-attribute 3 GL_FLOAT stride 0))
  
  
  (method override (draw-mesh self mesh <Mesh>) <void>
    (draw-buffer self mesh)))


;;;
;;;; Mesh-Frame
;;;


(class Mesh-Frame-Program extends Mesh-Program
  
  
  (slot WIN_SCALE-uniform)
  (slot WIRE_COL-uniform)
  (slot FILL_COL-uniform)
  (slot swizz-attribute)
  (slot neighbor1-attribute)
  (slot neighbor2-attribute)
  (slot instancepos-attribute)
  
  
  (method override (prepare self)
    (nextmethod self)
    (set! WIN_SCALE-uniform (add-uniform self "WIN_SCALE"))
    (set! WIRE_COL-uniform (add-uniform self "WIRE_COL"))
    (set! FILL_COL-uniform (add-uniform self "FILL_COL"))
    (set! swizz-attribute (add-attribute self "swizz"))
    (set! neighbor1-attribute (add-attribute self "neighbor1"))
    (set! neighbor2-attribute (add-attribute self "neighbor2"))
    (when (use-instance? self)
      (set! instancepos-attribute (add-attribute self "instancepos"))))
  
  
  (method override (bind-uniforms self bone-matrices overlay alpha-cut (wire-color: wire-color #f) (fill-color: fill-color #f))
    (nextmethod self bone-matrices overlay alpha-cut)
    (let ((world (current-world)))
      ;; Window scale
      (glUniform2f WIN_SCALE-uniform (/ (get-width world) 2.) (/ (get-height world) 2.))
      ;; Wire color
      (let ((wire-color (or wire-color (dye 0.8 0.3 0.1 1.))))
        (glUniform4fv* WIRE_COL-uniform 1 wire-color))
      ;; Fill color
      (let ((fill-color (or fill-color (dye 0. 0. 0. 1.))))
        (glUniform4fv* FILL_COL-uniform 1 fill-color))))
  
  
  (method override (enable-attributes self mesh <Mesh>)
    (let ((buffer (get-vertices-buffer mesh)))
      (bind-buffer buffer)
      (enable-vertex-attrib buffer vertex_coord-attribute)
      (set-attrib-pointer buffer vertex_coord-attribute 3 GL_FLOAT vertex-stride vertex-offset)
      (when (use-normal? self)
        (enable-vertex-attrib buffer normal-attribute)
        (set-attrib-pointer buffer normal-attribute 3 GL_FLOAT vertex-stride normal-offset))
      (when animations?
        (enable-vertex-attrib buffer bone_id-attribute)
        (set-attrib-pointer buffer bone_id-attribute 1 GL_FLOAT vertex-stride bone-offset))
      (unbind-buffer buffer))
    (let ((buffer (get-neighbors-buffer mesh)))
      (bind-buffer buffer)
      (enable-vertex-attrib buffer swizz-attribute)
      (set-attrib-pointer buffer swizz-attribute 1 GL_FLOAT neighbors-stride swizz-offset)
      (enable-vertex-attrib buffer neighbor1-attribute)
      (set-attrib-pointer buffer neighbor1-attribute 3 GL_FLOAT neighbors-stride neighbor1-offset)
      (enable-vertex-attrib buffer neighbor2-attribute)
      (set-attrib-pointer buffer neighbor2-attribute 3 GL_FLOAT neighbors-stride neighbor2-offset)
      (unbind-buffer buffer))
    (when (use-instance? self)
      (let ((buffer (get-instance-buffer mesh)))
        (bind-buffer buffer)
        (enable-vertex-attrib buffer instancepos-attribute)
        (set-attrib-pointer buffer instancepos-attribute 3 GL_FLOAT instance-stride instancepos-offset)
        (set-attrib-divisor buffer instancepos-attribute 1)
        (unbind-buffer buffer))))
  
  
  (method override (draw-mesh self mesh <Mesh>) <void>
    (draw-buffer self mesh)))


;;;
;;;; Mesh-Wireframe
;;;


(class Mesh-Wireframe-Program extends Mesh-Frame-Program
  
  
  (method override (default-vertex-shader self)
    mesh-wireframe-vs)
  
  (method override (default-fragment-shader self)
    mesh-wireframe-fs))


;;;
;;;; Mesh-Squareframe
;;;


(class Mesh-Squareframe-Program extends Mesh-Frame-Program
  
  
  (method override (default-vertex-shader self)
    mesh-squareframe-vs)
  
  (method override (default-fragment-shader self)
    mesh-squareframe-fs))


;;;
;;;; Mesh-TestInstance-Program
;;;


(class Mesh-TestInstance-Program extends Mesh-Squareframe-Program
  
  
  (method override (default-vertex-shader self)
    mesh-testinstance-vs)
  
  (method override (default-fragment-shader self)
    mesh-testinstance-fs)
  
  
  (method override (use-instance? self)
    #t))


;;;
;;;; Mesh-Playerframe
;;;


(class Mesh-Playerframe-Program extends Mesh-Frame-Program
  
  
  (method override (default-vertex-shader self)
    mesh-playerframe-vs)
  
  (method override (default-fragment-shader self)
    mesh-playerframe-fs))


;;;
;;;; Mesh-Floorframe
;;;


(class Mesh-Floorframe-Program extends Mesh-Frame-Program
  
  
  @wait
  (slot EYE_HEIGHT-uniform)
  
  
  (method override (default-vertex-shader self)
    mesh-floorframe-vs)
  
  (method override (default-fragment-shader self)
    mesh-floorframe-fs)
  
  
  (method override (prepare self)
    (nextmethod self)
    @wait
    (set! EYE_HEIGHT-uniform (add-uniform "EYE_HEIGHT")))
  
  
  (method override (bind-uniforms self bone-matrices overlay alpha-cut (wire-color: wire-color #f) (fill-color: fill-color #f))
    (nextmethod self bone-matrices overlay alpha-cut wire-color: wire-color fill-color: fill-color)
    ;; Camera height
    ;; quick hack for the y-grid
    @wait
    (glUniform1f EYE_HEIGHT-uniform (vertex-y (get-position (current-camera))))))


;;;
;;;; Mesh-Player
;;;


(class Mesh-Player-Program extends Mesh-Frame-Program
  
  
  (method override (default-vertex-shader self)
    mesh-player-vs)
  
  (method override (default-fragment-shader self)
    mesh-player-fs))


;;;
;;;; Mesh-White
;;;


(class Mesh-White-Program extends Mesh-Model-Program
  
  
  (method override (default-fragment-shader self)
    mesh-white-fs)
  
  
  (method override (use-alphacut? self)
    #f)
  
  
  (method override (use-texture_coord? self)
    #f)
  
  
  (method override (bind-material? self)
    #f))


;;;
;;;; Mesh-Transformation
;;;


(definition transformation-speed <fl>
  1.)

(definition public (get-transformation-speed)
  transformation-speed)

(definition public (set-transformation-speed speed <fl>)
  (set! transformation-speed speed))
  
  
(definition transformation-time <fl>
  1.)

(definition public (get-transformation-time)
  transformation-time)

(definition public (update-transformation-time elapse <fl>)
  (set! transformation-time (+ transformation-time (* elapse transformation-speed))))


(class Mesh-Transformation-Block-Program extends Mesh-Block-Program
  
  
  (slot time-uniform)
  
  
  (method override (prepare self)
    (nextmethod self)
    (set! time-uniform (add-uniform self "time")))
  
  
  (method override (bind-uniforms self bone-matrices overlay alpha-cut)
    (nextmethod self bone-matrices overlay alpha-cut)
    (glUniform1f time-uniform transformation-time)))


(class Mesh-Transformation-Program extends Mesh-Model-Program
  
  
  (slot time-uniform)
  
  
  (method override (prepare self)
    (nextmethod self)
    (set! time-uniform (add-uniform self "time")))
  
  
  (method override (use-alphacut? self)
    #f)
  
  
  (method override (bind-uniforms self bone-matrices overlay alpha-cut)
    (nextmethod self bone-matrices overlay alpha-cut)
    (glUniform1f time-uniform transformation-time)))


;;;
;;;; Mesh-Radial-Blur
;;;


(class Mesh-Radial-Blur-Program extends Mesh-Transformation-Program
  
  
  (method override (default-fragment-shader self)
    mesh-radial-blur-fs))


;;;
;;;; Mesh-Motion-Blur
;;;


(class Mesh-Motion-Blur-Program extends Mesh-Transformation-Program
  
  
  (method override (default-fragment-shader self)
    mesh-motion-blur-fs))


;;;
;;;; Mesh-Fire
;;;


(class Mesh-Fire-Program extends Mesh-Transformation-Program
  
  
  (method override (default-fragment-shader self)
    mesh-fire-fs))


;;;
;;;; Mesh-Water-Block
;;;


(class Mesh-Water-Block-Program extends Mesh-Transformation-Block-Program
  
  
  (method override (default-fragment-shader self)
    mesh-water-fs))


;;;
;;;; Mesh-Water
;;;


(class Mesh-Water-Program extends Mesh-Transformation-Program
  
  
  (method override (default-fragment-shader self)
    mesh-water-fs))


;;;
;;;; Mesh-Julia
;;;


(class Mesh-Julia-Program extends Mesh-Transformation-Program
  
  
  (method override (default-fragment-shader self)
    mesh-julia-fs)
  
  
  (method override (bind-material? self)
    #f))


;;;
;;;; Mesh-Sierpinski
;;;


(class Mesh-Sierpinski-Program extends Mesh-Transformation-Program
  
  
  (method override (default-fragment-shader self)
    mesh-sierpinski-fs))


;;;
;;;; Mesh-Multitexture-Block
;;;


(class Mesh-Multitexture-Block-Program extends Mesh-Transformation-Block-Program
  
  
  (method override (default-fragment-shader self)
    mesh-multitexture-fs))


;;;
;;;; Mesh-Multitexture
;;;


(class Mesh-Multitexture-Program extends Mesh-Transformation-Program
  
  
  (method override (default-fragment-shader self)
    mesh-multitexture-fs))


;;;
;;;; Mesh-Kaleidoscope
;;;


(class Mesh-Kaleidoscope-Program extends Mesh-Transformation-Program
  
  
  (method override (default-fragment-shader self)
    mesh-kaleidoscope-fs))


;;;
;;;; Mesh-Tunnel
;;;


(class Mesh-Tunnel-Program extends Mesh-Transformation-Program
  
  
  (method override (default-fragment-shader self)
    mesh-tunnel-fs))


;;;
;;;; Mesh-Square-Tunnel
;;;


(class Mesh-Square-Tunnel-Program extends Mesh-Transformation-Program
  
  
  (method override (default-fragment-shader self)
    mesh-square-tunnel-fs))


;;;
;;;; Mesh-Fly
;;;


(class Mesh-Fly-Program extends Mesh-Transformation-Program
  
  
  (method override (default-fragment-shader self)
    mesh-fly-fs))


;;;
;;;; Mesh-Pulse
;;;


(class Mesh-Pulse-Program extends Mesh-Transformation-Program
  
  
  (method override (default-fragment-shader self)
    mesh-pulse-fs)))
