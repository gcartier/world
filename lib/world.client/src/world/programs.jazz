;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Shader Programs
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2013
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.programs jazz


(import (jazz.geometry)
        (jazz.graphic)
        (jazz.graphic.opengl.glew)
        (jazz.io)
        (jazz.library)
        (jazz.literals)
        (jazz.media)
        (jazz.network)
        (jazz.platform)
        (jazz.platform.cairo)
        (jazz.runtime)
        (jazz.system)
        (jazz.ui)
        (jazz.ui.dialog)
        (jazz.ui.window)
        (world)
        (world.autoload)
        (world.dye)
        (world.foreign)
        (world.geometry)
        (world.lighting)
        (world.shader)
        (world.shaders)
        (world.support)
        (world.syntax (phase syntax))
        (world.texture)
        (time))


;;;
;;;; Mesh
;;;


(class Mesh-Program extends Shader-Program
  
  
  (method override (prepare)
    (set-vs (default-vertex-shader))
    (set-fs (default-fragment-shader))
    (link)
    (add-uniform "model_matrix")
    (add-attribute "vertex_coord"))
  
  
  (method protected virtual (bind-render-uniforms material)
    )
  
  
  (method protected virtual (bind-uniforms mesh matrix bones)
    ;; Model view matrix
    (glUniformMatrix4dv* (get-uniform "model_matrix") 1 #f matrix))
  
  
  (method protected virtual (enable-attributes mesh)
    (let ((stride (* 10 float-size))
          (buffer (get-vertices-buffer~ mesh)))
      (bind~ buffer)
      (enable-vertex-attrib~ buffer (get-attribute "vertex_coord"))
      (set-attrib-pointer~ buffer (get-attribute "vertex_coord") 3 GL_FLOAT stride 0)
      (unbind~ buffer)))
  
  
  (method protected (draw-mesh mesh)
    (enable-attributes mesh)
    (draw~ mesh)
    (disable-attributes mesh))
  
  
  (method protected virtual (disable-attributes mesh)
    (let ((buffer (get-vertices-buffer~ mesh)))
      (bind~ buffer)
      (disable-vertex-attrib~ buffer (get-attribute "vertex_coord"))
      (unbind~ buffer)))
  
  
  (method protected virtual (unbind-uniforms)
    )
  
  
  (method protected virtual (unbind-render-uniforms)
    ))


;;;
;;;; Mesh-Color
;;;


(class Mesh-Color-Program extends Mesh-Program
  
  
  (method override (prepare)
    (nextmethod)
    (add-uniform "color"))
  
  
  (method override (default-vertex-shader)
    mesh-color-vs)
  
  (method override (default-fragment-shader)
    mesh-color-fs)
  
  
  (method override (bind-uniforms mesh matrix color)
    (nextmethod mesh matrix #f)
    ;; Color
    (glUniform4f (get-uniform "color") (dye-red color) (dye-green color) (dye-blue color) (dye-alpha color))))


;;;
;;;; Mesh-Dynamic-Phong
;;;


(class Mesh-Dynamic-Phong-Program extends Mesh-Program
  
  
  (method override (prepare)
    (nextmethod)
    (add-uniform "texture")
    (add-uniform "ambient_color")
    (add-uniform "sun_color")
    (add-uniform "sun_coord")
    (add-uniform "lights_count")
    (add-attribute "normal")
    (add-attribute "texture_coord"))
  
  
  (method override (default-vertex-shader)
    mesh-dynamic-phong-vs)
  
  (method override (default-fragment-shader)
    mesh-phong-fs)
  
  
  (method override (bind-render-uniforms material)
    (let ((zone (current-zone)))
      ;; Texture
      (glActiveTexture GL_TEXTURE0)
      (glBindTexture TEXTURE-TARGET (get-id~ (get-texture~ material)))
      (glUniform1i (get-uniform "texture") 0)
      ;; Lighting
      (let ((lighting (get-current-lighting)))
        ;; Ambient color
        (let ((ambient (get-ambient-color~ lighting)))
          (glUniform4f (get-uniform "ambient_color") (dye-red ambient) (dye-green ambient) (dye-blue ambient) (dye-alpha ambient)))
        ;; Sun color
        (let ((color (get-sun-effective~ lighting)))
          (glUniform4f (get-uniform "sun_color") (dye-red color) (dye-green color) (dye-blue color) (dye-alpha color)))
        ;; Sun coord
        (let ((coord (get-sun-coordinates~ lighting)))
          (glUniform3f (get-uniform "sun_coord") (vertex-x coord) (vertex-y coord) (vertex-z coord)))
        ;; Lights
        (glUniform1i (get-uniform "lights_count") (get-lights-count~ lighting)))))
  
  
  (method override (enable-attributes mesh)
    (let ((buffer (get-vertices-buffer~ mesh))
          (stride (buffer-stride)))
      (bind~ buffer)
      (enable-buffer-attributes mesh buffer stride)
      (unbind~ buffer)))
  
  
  (method override (disable-attributes mesh)
    (let ((buffer (get-vertices-buffer~ mesh)))
      (bind~ buffer)
      (disable-buffer-attributes mesh buffer)
      (unbind~ buffer)))

  
  (method protected virtual (buffer-stride)
    (* 10 float-size))
  
  
  (method protected virtual (enable-buffer-attributes mesh buffer stride)
    (enable-vertex-attrib~ buffer (get-attribute "vertex_coord"))
    (set-attrib-pointer~ buffer (get-attribute "vertex_coord") 3 GL_FLOAT stride 0)
    (enable-vertex-attrib~ buffer (get-attribute "normal"))
    (set-attrib-pointer~ buffer (get-attribute "normal") 3 GL_FLOAT stride (* 3 float-size))
    (enable-vertex-attrib~ buffer (get-attribute "texture_coord"))
    (set-attrib-pointer~ buffer (get-attribute "texture_coord") 3 GL_FLOAT stride (* 6 float-size)))
  
  
  (method protected virtual (disable-buffer-attributes mesh buffer)
    (disable-vertex-attrib~ buffer (get-attribute "vertex_coord"))
    (disable-vertex-attrib~ buffer (get-attribute "normal"))
    (disable-vertex-attrib~ buffer (get-attribute "texture_coord")))
  
  
  (method override (unbind-uniforms)
    )
  
  
  (method override (unbind-render-uniforms)
    (glActiveTexture GL_TEXTURE0)
    (glBindTexture TEXTURE-TARGET 0)))


;;;
;;;; Mesh-Skeletal-Phong
;;;


(class Mesh-Skeletal-Phong-Program extends Mesh-Dynamic-Phong-Program
  
  
  (method override (prepare)
    (nextmethod)
    (add-uniform "bone_matrices")
    (add-attribute "bone_id"))
  
  
  (method override (default-vertex-shader)
    mesh-skeletal-phong-vs)
  
  
  (method override (bind-uniforms mesh matrix bones)
    (nextmethod mesh matrix bones)
    ;; Bone matrices
    (glUniformMatrix4fv* (get-uniform "bone_matrices") 200 #f bones))
  
  
  (method override (buffer-stride)
    (* 10 float-size))

  
  (method override (enable-buffer-attributes mesh buffer stride)
    (nextmethod mesh buffer stride)
    (enable-vertex-attrib~ buffer (get-attribute "bone_id"))
    (set-attrib-pointer~ buffer (get-attribute "bone_id") 1 GL_FLOAT stride (* 9 float-size)))
  
  
  (method override (disable-buffer-attributes mesh buffer)
    (nextmethod mesh buffer)
    (disable-vertex-attrib~ buffer (get-attribute "bone_id"))))


;;;
;;;; Mesh-Phong
;;;


(class Mesh-Phong-Program extends Mesh-Dynamic-Phong-Program
  
  
  (method override (prepare)
    (nextmethod)
    (add-attribute "lighting"))
  
  
  (method override (default-vertex-shader)
    mesh-phong-vs)
  
  
  (method override (enable-attributes mesh)
    (nextmethod mesh)
    (let ((stride (* 3 float-size))
          (lightmap-buffer (get-lightmap-buffer~ mesh)))
      (bind~ lightmap-buffer)
      (enable-vertex-attrib~ lightmap-buffer (get-attribute "lighting"))
      (set-attrib-pointer~ lightmap-buffer (get-attribute "lighting") 3 GL_FLOAT stride 0)
      (unbind~ lightmap-buffer)))
  
  
  (method override (disable-attributes mesh)
    (nextmethod mesh)
    (let ((lightmap-buffer (get-lightmap-buffer~ mesh)))
      (bind~ lightmap-buffer)
      (disable-vertex-attrib~ lightmap-buffer (get-attribute "lighting"))
      (unbind~ lightmap-buffer))))


;;;
;;;; Mesh-Frame
;;;


(class Mesh-Frame-Program extends Mesh-Program
  
  
  (method override (prepare)
    (nextmethod)
    (add-uniform "WIN_SCALE")
    (add-uniform "WIRE_COL")
    (add-uniform "FILL_COL")
    (add-attribute "swizz")
    (add-attribute "neighbor1")
    (add-attribute "neighbor2"))
  
  
  (method override (bind-uniforms mesh matrix bones (wire-color: wire-color #f) (fill-color: fill-color #f))
    (nextmethod mesh matrix bones)
    (let ((world (current-world)))
      ;; Window scale
      (glUniform2f (get-uniform "WIN_SCALE") (/ (get-width~ world) 2.) (/ (get-height~ world) 2.))
      ;; Wire color
      (let ((wire-color (or wire-color (dye 0.8 0.3 0.1 1.))))
        (glUniform4f (get-uniform "WIRE_COL") (dye-red wire-color) (dye-green wire-color) (dye-blue wire-color) (dye-alpha wire-color)))
      ;; Fill color
      (let ((fill-color (or fill-color (dye 0. 0. 0. 1.))))
        (glUniform4f (get-uniform "FILL_COL") (dye-red fill-color) (dye-green fill-color) (dye-blue fill-color) (dye-alpha fill-color)))))
  
  
  (method override (enable-attributes mesh)
    (let ((stride (* 10 float-size))
          (buffer (get-vertices-buffer~ mesh)))
      (bind~ buffer)
      (enable-vertex-attrib~ buffer (get-attribute "vertex_coord"))
      (set-attrib-pointer~ buffer (get-attribute "vertex_coord") 3 GL_FLOAT stride 0)
      (unbind~ buffer))
    (let ((stride (* 7 float-size))
          (buffer (get-neighbors-buffer~ mesh)))
      (bind~ buffer)
      (enable-vertex-attrib~ buffer (get-attribute "swizz"))
      (set-attrib-pointer~ buffer (get-attribute "swizz") 1 GL_FLOAT stride 0)
      (enable-vertex-attrib~ buffer (get-attribute "neighbor1"))
      (set-attrib-pointer~ buffer (get-attribute "neighbor1") 3 GL_FLOAT stride float-size)
      (enable-vertex-attrib~ buffer (get-attribute "neighbor2"))
      (set-attrib-pointer~ buffer (get-attribute "neighbor2") 3 GL_FLOAT stride (* 4 float-size))
      (unbind~ buffer)))
  
  
  (method override (disable-attributes mesh)
    (let ((buffer (get-vertices-buffer~ mesh)))
      (bind~ buffer)
      (disable-vertex-attrib~ buffer (get-attribute "vertex_coord"))
      (unbind~ buffer))
    (let ((buffer (get-neighbors-buffer~ mesh)))
      (bind~ buffer)
      (disable-vertex-attrib~ buffer (get-attribute "swizz"))
      (disable-vertex-attrib~ buffer (get-attribute "neighbor1"))
      (disable-vertex-attrib~ buffer (get-attribute "neighbor2"))
      (unbind~ buffer))))


;;;
;;;; Mesh-Wireframe
;;;


(class Mesh-Wireframe-Program extends Mesh-Frame-Program
  
  
  (method override (default-vertex-shader)
    mesh-wireframe-vs)
  
  (method override (default-fragment-shader)
    mesh-wireframe-fs))


;;;
;;;; Mesh-Squareframe
;;;


(class Mesh-Squareframe-Program extends Mesh-Frame-Program
  
  
  (method override (default-vertex-shader)
    mesh-squareframe-vs)
  
  (method override (default-fragment-shader)
    mesh-squareframe-fs))


;;;
;;;; Mesh-Playerframe
;;;


(class Mesh-Playerframe-Program extends Mesh-Frame-Program
  
  
  (method override (default-vertex-shader)
    mesh-playerframe-vs)
  
  (method override (default-fragment-shader)
    mesh-playerframe-fs))


;;;
;;;; Mesh-Floorframe
;;;


(class Mesh-Floorframe-Program extends Mesh-Frame-Program
  
  
  (method override (default-vertex-shader)
    mesh-floorframe-vs)
  
  (method override (default-fragment-shader)
    mesh-floorframe-fs)
  
  
  (method override (prepare)
    (nextmethod)
    @wait
    (add-uniform "EYE_HEIGHT"))
  
  
  (method override (bind-uniforms mesh matrix bones (wire-color: wire-color #f) (fill-color: fill-color #f))
    (nextmethod mesh matrix bones wire-color: wire-color fill-color: fill-color)
    (let ((world (current-world)))
      ;; Eye height
      ;; quick hack for the y-grid
      @wait
      (glUniform1f (get-uniform "EYE_HEIGHT") (vertex-y (get-position~ (get-eye~ world)))))))


;;;
;;;; Mesh-Texture
;;;


(class Mesh-Texture-Program extends Mesh-Program
  
  
  (method override (prepare)
    (nextmethod)
    (when (use-texture?)
      (add-uniform "texture"))
    (add-uniform "texture_normalize")
    (add-uniform "texture_bounds")
    (add-attribute "texture_coord"))
  
  
  (method override (default-vertex-shader)
    mesh-texture-vs)
  
  (method override (default-fragment-shader)
    mesh-texture-fs)
  
  
  (method protected virtual (use-texture?)
    #t)
  
  
  (method override (bind-uniforms mesh matrix bones)
    (nextmethod mesh matrix bones)
    (let ((world (current-world))
          (material (get-material~ mesh)))
      (when (use-texture?)
        (let ((texture (get-id~ (get-texture~ material))))
          (glActiveTexture GL_TEXTURE0)
          (glBindTexture TEXTURE-TARGET texture)
          (glUniform1i (get-uniform "texture") 0)))
      (assert (get-atlas~ material))
      (let ((atlas (get-atlas~ material)))
        (glUniform1i (get-uniform "texture_normalize") (if (or (get-uniform?~ atlas) (not (get-normalize?~ atlas))) 0 1))
        (let ((bounds (get-bounds~ atlas))
              (count (get-depth~ atlas)))
          (glUniform4fv* (get-uniform "texture_bounds") count bounds)))))
  
  
  (method override (enable-attributes mesh)
    (let ((stride (* 10 float-size))
          (buffer (get-vertices-buffer~ mesh)))
      (bind~ buffer)
      (enable-vertex-attrib~ buffer (get-attribute "vertex_coord"))
      (set-attrib-pointer~ buffer (get-attribute "vertex_coord") 3 GL_FLOAT stride 0)
      (enable-vertex-attrib~ buffer (get-attribute "texture_coord"))
      (set-attrib-pointer~ buffer (get-attribute "texture_coord") 3 GL_FLOAT stride (* 6 float-size))
      (unbind~ buffer)))
  
  
  (method override (disable-attributes mesh)
    (let ((buffer (get-vertices-buffer~ mesh)))
      (bind~ buffer)
      (disable-vertex-attrib~ buffer (get-attribute "vertex_coord"))
      (disable-vertex-attrib~ buffer (get-attribute "texture_coord"))
      (unbind~ buffer)))
  
  
  (method override (unbind-uniforms)
    (glActiveTexture GL_TEXTURE0)
    (glBindTexture TEXTURE-TARGET 0)))


;;;
;;;; Mesh-Transformation
;;;


(definition transformation-speed
  1.)

(definition public (get-transformation-speed)
  transformation-speed)

(definition public (set-transformation-speed speed)
  (set! transformation-speed speed))
  
  
(definition transformation-time
  1.)

(definition public (get-transformation-time)
  transformation-time)

(definition public (update-transformation-time elapse)
  (set! transformation-time (+ transformation-time (* elapse transformation-speed))))


(class Mesh-Transformation-Program extends Mesh-Texture-Program
  
  
  (method override (prepare)
    (nextmethod)
    (add-uniform "time"))
  
  
  (method override (bind-uniforms mesh matrix bones)
    (nextmethod mesh matrix bones)
    (glUniform1f (get-uniform "time") transformation-time)))


;;;
;;;; Mesh-Radial-Blur
;;;


(class Mesh-Radial-Blur-Program extends Mesh-Transformation-Program
  
  
  (method override (default-fragment-shader)
    mesh-radial-blur-fs))


;;;
;;;; Mesh-Motion-Blur
;;;


(class Mesh-Motion-Blur-Program extends Mesh-Transformation-Program
  
  
  (method override (default-fragment-shader)
    mesh-motion-blur-fs))


;;;
;;;; Mesh-Water
;;;


(class Mesh-Water-Program extends Mesh-Transformation-Program
  
  
  (method override (default-fragment-shader)
    mesh-water-fs))


;;;
;;;; Mesh-Wet
;;;


(class Mesh-Wet-Program extends Mesh-Dynamic-Phong-Program
  
  
  (method override (default-fragment-shader)
    mesh-wet-fs))


;;;
;;;; Mesh-Julia
;;;


(class Mesh-Julia-Program extends Mesh-Transformation-Program
  
  
  (method override (default-fragment-shader)
    mesh-julia-fs)
  
  
  (method override (use-texture?)
    #f))


;;;
;;;; Mesh-Sierpinski
;;;


(class Mesh-Sierpinski-Program extends Mesh-Transformation-Program
  
  
  (method override (default-fragment-shader)
    mesh-sierpinski-fs))


;;;
;;;; Mesh-Multitexture
;;;


(class Mesh-Multitexture-Program extends Mesh-Transformation-Program
  
  
  (method override (default-fragment-shader)
    mesh-multitexture-fs))


;;;
;;;; Mesh-Kaleidoscope
;;;


(class Mesh-Kaleidoscope-Program extends Mesh-Transformation-Program
  
  
  (method override (default-fragment-shader)
    mesh-kaleidoscope-fs))


;;;
;;;; Mesh-Tunnel
;;;


(class Mesh-Tunnel-Program extends Mesh-Transformation-Program
  
  
  (method override (default-fragment-shader)
    mesh-tunnel-fs))


;;;
;;;; Mesh-Square-Tunnel
;;;


(class Mesh-Square-Tunnel-Program extends Mesh-Transformation-Program
  
  
  (method override (default-fragment-shader)
    mesh-square-tunnel-fs))


;;;
;;;; Mesh-Fly
;;;


(class Mesh-Fly-Program extends Mesh-Transformation-Program
  
  
  (method override (default-fragment-shader)
    mesh-fly-fs))


;;;
;;;; Mesh-Pulse
;;;


(class Mesh-Pulse-Program extends Mesh-Transformation-Program
  
  
  (method override (default-fragment-shader)
    mesh-pulse-fs)))
