;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; Media
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.media jazz


(import (jazz.stream))


(definition public (present-timestamp time)
  (if (= time GST_CLOCK_TIME_NONE)
      -1
    (timestamp->flonum time)))


;;;
;;;; H264
;;;


(definition protected (h264-buffer-header? buffer)
  (or (let ((pos 5))
        (and (< pos (u8vector-length buffer))
             (= (u8vector-ref buffer pos) 16)))
      ;; quick try
      (and (>= (u8vector-length buffer) 6)
           (= (u8vector-ref buffer 4) 6)
           (= (u8vector-ref buffer 5) 6))))


(definition public (iterate-nalu buffer layout proc)
  (declare (proper-tail-calls))
  (define (iterate-stream)
    (let ((size (u8vector-length buffer)))
      (let (iterate (n 0) (start #f))
        (define (emit)
          (when start
            (proc buffer start n)))
        
        (if (>= n size)
            (emit)
          (cond ((and (< (+ n 4) size)
                      (= (u8vector-ref buffer n) 0)
                      (= (u8vector-ref buffer (+ n 1)) 0)
                      (= (u8vector-ref buffer (+ n 2)) 0)
                      (= (u8vector-ref buffer (+ n 3)) 1))
                 (emit)
                 (iterate (+ n 4) (+ n 4)))
                ((and (< (+ n 3) size)
                      (= (u8vector-ref buffer n) 0)
                      (= (u8vector-ref buffer (+ n 1)) 0)
                      (= (u8vector-ref buffer (+ n 2)) 1))
                 (emit)
                 (iterate (+ n 3) (+ n 3)))
                (else
                 (iterate (+ n 1) start)))))))
  
  (define (iterate-packets)
    (let ((size (u8vector-length buffer)))
      (let (iterate (n 0))
        (when (< n size)
          (let ((b1 (u8vector-ref buffer n))
                (b2 (u8vector-ref buffer (+ n 1)))
                (b3 (u8vector-ref buffer (+ n 2)))
                (b4 (u8vector-ref buffer (+ n 3))))
            (let ((cnt (+ (* b1 16777216)
                          (* b2 65536)
                          (* b3 256)
                          b4)))
              (proc buffer (+ n 4) (+ n 4 cnt))
              (iterate (+ n 4 cnt))))))))
  
  (case layout
    ((packet)
     (iterate-packets))
    ((stream)
     (iterate-stream))))


(definition public (parse-codec-data codec-data)
  (define (char->value c)
    (cdr (assv c '((#\0 . #x0)
                   (#\1 . #x1)
                   (#\2 . #x2)
                   (#\3 . #x3)
                   (#\4 . #x4)
                   (#\5 . #x5)
                   (#\6 . #x6)
                   (#\7 . #x7)
                   (#\8 . #x8)
                   (#\9 . #x9)
                   (#\a . #xa)
                   (#\b . #xb)
                   (#\c . #xc)
                   (#\d . #xd)
                   (#\e . #xe)
                   (#\f . #xf)))))
  
  (define (chars->byte c d)
    (+ (* (char->value c) 16)
       (char->value d)))
  
  (define (data->bytes data)
    (loop (for n from 0 below (string-length data) by 2)
          (collect (chars->byte (string-ref data n)
                                (string-ref data (+ n 1))))))
  
  (bind (b0 b1 b2 b3 b4 b5) (data->bytes codec-data)
    (let ((configurationVersion b0)
          (AVCProfileIndication b1)
          (profile_compatibility b2)
          (AVCLevelIndication b3)
          (reserved1 (extract-bit-field 6 2 b4))
          (lengthSizeMinusOne (extract-bit-field 2 0 b4))
          (reserved2 (extract-bit-field 3 5 b5))
          (numOfSequenceParameterSets (extract-bit-field 5 0 b5)))
      (assert (= reserved1 #b111111)
        (assert (= reserved2 #b111)
          (values configurationVersion
                  AVCProfileIndication
                  profile_compatibility
                  AVCLevelIndication
                  lengthSizeMinusOne
                  numOfSequenceParameterSets))))))


(definition public (parse-nalu-header byte)
  (let ((forbidden_zero_bit (extract-bit-field 1 7 byte))
        (nal_ref_idc (extract-bit-field 2 5 byte))
        (nal_unit_type (extract-bit-field 5 0 byte)))
    (assert (= forbidden_zero_bit 0)
      (values forbidden_zero_bit
              nal_ref_idc
              nal_unit_type))))


(definition public (present-nalus buffer layout (filter: filter #f))
  (let ((size (u8vector-length buffer)))
    (format :terminal "{a}  {a width: 6 justify: :right}  " (if (h264-buffer-header? buffer) "***" "<<<") size)
    (let ((first? #t))
      (iterate-nalu buffer layout
        (lambda (buffer start end)
          (when (or (not filter)
                    (filter buffer start end))
            (if first?
                (set! first? #f)
              (format :terminal "             "))
            (format :terminal "{a width: 5 justify: :right}       " (- end start))
            (loop (for n from start below (min (+ start 20) end))
                  (format :terminal " {a width: 3 justify: :right}," (u8vector-ref buffer n)))
            (format :terminal "{%}"))))
      (when first?
        (format :terminal "{%}")))))


(definition public (present-data buffer)
  (loop (for n from 0 below (min 20 (u8vector-length buffer)))
        (format :terminal " {a width: 3 justify: :right}," (u8vector-ref buffer n))))


;;;
;;;; Codec
;;;


(class Codec extends Object
  
  
  (slot name getter generate)
  (slot kind getter generate)
  
  
  (method override (initialize self name kind)
    (nextmethod self)
    (set! self.name name)
    (set! self.kind kind))
  
  
  (method override (print self output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{a}" name))))
  
  
  (method protected virtual (buffer-header? self buffer)
    ))


;;;
;;;; Codecs
;;;


(definition protected codecs
  (make-table test: eq?))


(definition public (register-codec codec)
  (table-set! codecs (get-name codec) codec))

(definition public (registered-codec name)
  (table-ref codecs name #f))

(definition public (require-codec name)
  (or (table-ref codecs name #f)
      (error "Unknown codec: {s}" name))))
