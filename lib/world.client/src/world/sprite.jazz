;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Sprites
;;;


(module world.sprite jazz


(import (jazz.geometry)
        (jazz.graphic)
        (jazz.graphic.opengl)
        (jazz.graphic.opengl.platform)
        (jazz.io)
        (jazz.library)
        (jazz.literals)
        (jazz.media)
        (jazz.network)
        (jazz.platform)
        (jazz.platform.cairo)
        (jazz.runtime)
        (jazz.system)
        (jazz.ui)
        (jazz.ui.dialog)
        (jazz.ui.window)
        (time)
        (world.autoload)
        (world.client)
        (world.foreign)
        (world.geometry)
        (world.history)
        (world.object)
        (world.texture)
        (world.window))


;;;
;;;; Sprite
;;;


(class Sprite extends World-Object
  
  
  (slot origin    <object> getter generate)
  (slot width     <fl>     getter generate)
  (slot height    <fl>     getter generate)
  (slot depth     <fl>     getter generate)
  (slot right     <fl>     getter generate)
  (slot top       <fl>     getter generate)
  (slot front     <fl>     getter generate)
  (slot radius-x  <fl>     getter generate)
  (slot radius-y  <fl>     getter generate)
  (slot radius-z  <fl>     getter generate)
  (slot center-x  <fl>     getter generate)
  (slot center-y  <fl>     getter generate)
  (slot center-z  <fl>     getter generate)
  (slot red       <fl>     accessors generate)
  (slot green     <fl>     accessors generate)
  (slot blue      <fl>     accessors generate)
  (slot alpha     <fl>     accessors generate)
  (slot texture   <object> accessors generate)
  (slot vao       <object> accessors generate)
  (slot vbo       <object> accessors generate)
  (slot triangles <object> getter explicit)
  (slot user-data <object> accessors generate)
  
  
  (method override (initialize world x y z width height depth texture (color: color #f) (user-data: user-data #f))
    (nextmethod world x y z)
    (set! origin~self self)
    (set! width~self width)
    (set! height~self height)
    (set! depth~self depth)
    (set! radius-x (/ width 2))
    (set! radius-y (/ height 2))
    (set! radius-z (/ depth 2))
    (when color
      (set-color color))
    (set! texture~self texture)
    (set! triangles #f)
    (set! user-data~self user-data)
    (update-position))
  
  
  (method override (print output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{r precision: 1} {r precision: 1} {r precision: 1} {a} {a} {a}" x y z width height depth))))
  
  
  (method public (get-triangles)
    (when (not triangles)
      (set! triangles (sprite-triangles)))
    triangles)
  
  
  (method protected virtual (sprite-triangles)
    (let ((left (get-left))
          (right (get-right))
          (bottom (get-bottom))
          (top (get-top))
          (back (get-back))
          (front (get-front)))
      (let ((vertices
              (list
                ;; Front face
                (vertex left top front) (vertex right top front) (vertex right bottom front) (vertex right bottom front) (vertex left bottom front) (vertex left top front)
                ;; Back face
                (vertex right top back) (vertex left top back) (vertex left bottom back) (vertex left bottom back) (vertex right bottom back) (vertex right top back)
                ;; Left face
                (vertex left top back) (vertex left top front) (vertex left bottom front) (vertex left bottom front) (vertex left bottom back) (vertex left top back)
                ;; Right face
                (vertex right top front) (vertex right top back) (vertex right bottom back) (vertex right bottom back) (vertex right bottom front) (vertex right top front)
                ;; Top face
                (vertex left top back) (vertex right top back) (vertex right top front) (vertex right top front) (vertex left top front) (vertex left top back)
                ;; Bottom face
                (vertex left bottom front) (vertex right bottom front) (vertex right bottom back) (vertex right bottom back) (vertex left bottom back) (vertex left bottom front))))
        vertices)))
  
  
  (method public (for-each-triangle proc)
    (let (iter (scan (get-triangles)))
      (when (not-null? scan)
        (bind (v1 v2 v3 . rest) scan
          (proc v1 v2 v3)
          (iter rest)))))
  
  
  (method public (ray-distance p <f32vector> d <f32vector>) <fl+>
    (let ((distance #f))
      (for-each-triangle
        (lambda (v1 v2 v3)
          (let ((dist (ray-triangle-distance p d v1 v2 v3)))
            (when (and dist
                       (or (not distance)
                           (< dist distance)))
              (set! distance dist)))))
      distance))
  
  
  (method public inline (get-left) <fl>
    x)
  
  
  (method public inline (get-bottom) <fl>
    y)
  
  
  (method public inline (get-back) <fl>
    z)
  
  
  (method public (get-center) <f32vector>
    (vertex
      (get-center-x)
      (get-center-y)
      (get-center-z)))
  
  
  (method public (set-position v <f32vector>) <void>
    (set! x (vertex-x v))
    (set! y (vertex-y v))
    (set! z (vertex-z v))
    (update-position))
  
  
  (method (update-position)
    (set! right (+ x width))
    (set! top (+ y height))
    (set! front (+ z depth))
    (set! center-x (/ (+ (get-left) (get-right)) 2))
    (set! center-y (/ (+ (get-bottom) (get-top)) 2))
    (set! center-z (/ (+ (get-back) (get-front)) 2)))
  
  
  (method public (set-color color)
    (set! red~self (get-red~ color))
    (set! green~self (get-green~ color))
    (set! blue~self (get-blue~ color))
    (set! alpha~self (get-alpha~ color)))
  
  
  (method protected virtual (serialize-sprite)
    )
  
  
  (method override (draw)
    (if (get-3d?~ world)
        (if (get-textures?~ world)
            (draw-3d-textured)
          (draw-3d))
      (if (get-textures?~ world)
          (draw-2d-textured)
        (draw-2d))))
  
  
  (method protected virtual (draw-3d)
    (glColor4f red green blue alpha)
    (let ((x1 (get-left))
          (x2 (get-right))
          (y1 (get-bottom))
          (y2 (get-top))
          (z1 (get-back))
          (z2 (get-front)))
      (render-block x1 x2 y1 y2 z1 z2)
      @w (
      ;; top
      (glNormal3f 0.0 1.0 0.0)
      (glBegin GL_QUADS)
      (glVertex3f x2 y2 z1)
      (glVertex3f x1 y2 z1)
      (glVertex3f x1 y2 z2)
      (glVertex3f x2 y2 z2)
      (glEnd)
      ;; bottom
      (glNormal3f 0.0 -1.0 0.0)
      (glBegin GL_QUADS)
      (glVertex3f x2 y1 z2)
      (glVertex3f x1 y1 z2)
      (glVertex3f x1 y1 z1)
      (glVertex3f x2 y1 z1)
      (glEnd)
      ;; front
      (glNormal3f 0.0 0.0 1.0)
      (glBegin GL_QUADS)
      (glVertex3f x1 y1 z2)
      (glVertex3f x2 y1 z2)
      (glVertex3f x2 y2 z2)
      (glVertex3f x1 y2 z2)
      (glEnd)
      ;; back
      (glNormal3f 0.0 0.0 -1.0)
      (glBegin GL_QUADS)
      (glVertex3f x2 y1 z1)
      (glVertex3f x1 y1 z1)
      (glVertex3f x1 y2 z1)
      (glVertex3f x2 y2 z1)
      (glEnd)
      ;; left
      (glNormal3f -1.0 0.0 0.0)
      (glBegin GL_QUADS)
      (glVertex3f x1 y2 z2)
      (glVertex3f x1 y2 z1)
      (glVertex3f x1 y1 z1)
      (glVertex3f x1 y1 z2)
      (glEnd)
      ;; right
      (glNormal3f 1.0 0.0 0.0)
      (glBegin GL_QUADS)
      (glVertex3f x2 y2 z1)
      (glVertex3f x2 y2 z2)
      (glVertex3f x2 y1 z2)
      (glVertex3f x2 y1 z1)
      (glEnd)))
    (when (get-block-stiches?~ world)
      (gl-colorize {Color red: ".459" green: ".280" blue: ".002"})
      (let ((x1 (get-left))
            (x2 (get-right))
            (y1 (get-bottom))
            (y2 (get-top))
            (z1 (get-back))
            (z2 (get-front)))
        ;; top
        (glNormal3f 0.0 1.0 0.0)
        (glBegin GL_LINE_LOOP)
        (glVertex3f x2 y2 z1)
        (glVertex3f x1 y2 z1)
        (glVertex3f x1 y2 z2)
        (glVertex3f x2 y2 z2)
        (glEnd)
        ;; bottom
        (glNormal3f 0.0 -1.0 0.0)
        (glBegin GL_LINE_LOOP)
        (glVertex3f x2 y1 z2)
        (glVertex3f x1 y1 z2)
        (glVertex3f x1 y1 z1)
        (glVertex3f x2 y1 z1)
        (glEnd)
        ;; front
        (glNormal3f 0.0 0.0 1.0)
        (glBegin GL_LINE_LOOP)
        (glVertex3f x1 y1 z2)
        (glVertex3f x2 y1 z2)
        (glVertex3f x2 y2 z2)
        (glVertex3f x1 y2 z2)
        (glEnd)
        ;; back
        (glNormal3f 0.0 0.0 -1.0)
        (glBegin GL_LINE_LOOP)
        (glVertex3f x2 y1 z1)
        (glVertex3f x1 y1 z1)
        (glVertex3f x1 y2 z1)
        (glVertex3f x2 y2 z1)
        (glEnd)
        ;; left
        (glNormal3f -1.0 0.0 0.0)
        (glBegin GL_LINE_LOOP)
        (glVertex3f x1 y2 z2)
        (glVertex3f x1 y2 z1)
        (glVertex3f x1 y1 z1)
        (glVertex3f x1 y1 z2)
        (glEnd)
        ;; right
        (glNormal3f 1.0 0.0 0.0)
        (glBegin GL_LINE_LOOP)
        (glVertex3f x2 y2 z1)
        (glVertex3f x2 y2 z2)
        (glVertex3f x2 y1 z2)
        (glVertex3f x2 y1 z1)
        (glEnd))))
  
  
  (method (draw-3d-textured)
    (glPushMatrix)
    (glTranslatef x y z)
    (glRotatef rtri 1.0 1.0 1.0)
    (glScalef 1.0 1.0 1.0)
    (let ((f -2.5)
          (t 2.5))
      ;; top
      (glNormal3f 0.0 1.0 0.0)
      (textured-quad~ texture
        (lambda () (glVertex3f t t f))
        (lambda () (glVertex3f f t f))
        (lambda () (glVertex3f f t t))
        (lambda () (glVertex3f t t t)))
      ;; bottom
      (glNormal3f 0.0 -1.0 0.0)
      (textured-quad~ texture
        (lambda () (glVertex3f t f t))
        (lambda () (glVertex3f f f t))
        (lambda () (glVertex3f f f f))
        (lambda () (glVertex3f t f f)))
      ;; front
      (glNormal3f 0.0 0.0 1.0)
      (textured-quad~ texture
        (lambda () (glVertex3f f f t))
        (lambda () (glVertex3f t f t))
        (lambda () (glVertex3f t t t))
        (lambda () (glVertex3f f t t)))
      ;; back
      (glNormal3f 0.0 0.0 -1.0)
      (textured-quad~ texture
        (lambda () (glVertex3f t f f))
        (lambda () (glVertex3f f f f))
        (lambda () (glVertex3f f t f))
        (lambda () (glVertex3f t t f)))
      ;; left
      (glNormal3f -1.0 0.0 0.0)
      (textured-quad~ texture
        (lambda () (glVertex3f f t t))
        (lambda () (glVertex3f f t f))
        (lambda () (glVertex3f f f f))
        (lambda () (glVertex3f f f t)))
      ;; right
      (glNormal3f 1.0 0.0 0.0)
      (textured-quad~ texture
        (lambda () (glVertex3f t t f))
        (lambda () (glVertex3f t t t))
        (lambda () (glVertex3f t f t))
        (lambda () (glVertex3f t f f))))
    (glPopMatrix))
  
  
  (method (draw-2d)
    (let ((x1 (get-left))
          (y1 (get-top))
          (x2 (get-right))
          (y2 (get-bottom)))
      (glNormal3f 0.0 0.0 1.0)
      (if (in-history?)
          (glColor4f red green blue 0.5)
        (glColor4f red green blue alpha))
      (unless (in-history?)
        (glBegin GL_QUADS)
        (glVertex2f x1 y1)
        (glVertex2f x2 y1)
        (glVertex2f x2 y2)
        (glVertex2f x1 y2)
        (glEnd))
      (glColor3f .41176 .23921 .00392)
      (glBegin GL_LINE_LOOP)
      (glVertex2f x1 y1)
      (glVertex2f x2 y1)
      (glVertex2f x2 y2)
      (glVertex2f x1 y2)
      (glEnd)))
  
  
  (method (draw-2d-textured)
    (glPushMatrix)
    (glTranslatef x y z)
    (textured-quad~ texture
      (lambda () (glVertex3f 0.0 0.0 0.0))
      (lambda () (glVertex3f width 0.0 0.0))
      (lambda () (glVertex3f width height 0.0))
      (lambda () (glVertex3f 0.0 height 0.0)))
    (glPopMatrix))
  
  
  @w
  (method (draw-2d-textured)
    (glPushMatrix)
    (glTranslatef x y z)
    (textured-quad~ texture
      (lambda () (glVertex3f 0.0 0.0 0.0))
      (lambda () (glVertex3f 5.0 0.0 0.0))
      (lambda () (glVertex3f 5.0 5.0 0.0))
      (lambda () (glVertex3f 0.0 5.0 0.0)))
    (glPopMatrix))))
