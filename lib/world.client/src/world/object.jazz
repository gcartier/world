;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; World Object
;;;


(module world.object jazz


(import (jazz.graphic)
        (jazz.graphic.opengl)
        (jazz.graphic.opengl.platform)
        (jazz.io)
        (jazz.library)
        (jazz.literals)
        (jazz.platform)
        (jazz.platform.cairo)
        (jazz.runtime)
        (jazz.system)
        (jazz.ui)
        (jazz.ui.window)
        (time)
        (world.geometry)
        (world.texture))


(definition (gl-colorize color)
  (glColor4f (part->color (get-red~ color))
             (part->color (get-green~ color))
             (part->color (get-blue~ color))
             (or (get-alpha~ color) 1.0)))


;;;
;;;; Object
;;;


(class World-Object extends Object
  
  
  (slot world getter generate)
  (slot x     getter generate)
  (slot y     getter generate)
  (slot z     getter generate)
  (slot rtri  initialize 0.0)
  (slot rquad initialize 0.0)
  
  
  (method override (initialize world x y z)
    (set! world~self world)
    (set! x~self x)
    (set! y~self y)
    (set! z~self z))
  
  
  (method public (get-position)
    (new Vertex x y z))
  
  
  (method protected virtual (draw)
    )
  
  
  (method protected virtual (inside? r vertex)
    #f))


;;;
;;;; Sphere
;;;


(class Sphere extends World-Object
  
  
  (slot radius)
  (slot slices)
  (slot stacks)
  (slot color accessors generate)
  
  
  (method override (initialize world x y z (radius: radius 1.0) (slices: slices #f) (stacks: stacks #f) (color: color #f))
    (nextmethod world x y z)
    (set! radius~self radius)
    (set! slices~self (or slices 26))
    (set! stacks~self (or stacks 52))
    (set! color~self (or color {Color White})))
  
  
  (method override (draw)
    (draw-sphere x y z radius slices stacks color))
  
  
  (method override (inside? r vertex)
    (let ((distance (vertex-norm (vertex2- vertex (new Vertex x y z)))))
      (<= distance (+ radius r)))))


(definition public (draw-sphere x y z radius slices stacks color)
  (with-gl-matrix
    (lambda ()
      (gl-translate x y z)
      (gl-colorize color)
      (glutSolidSphere radius slices stacks))))


;;;
;;;; Pyramid
;;;


(class Pyramid extends World-Object
  
  
  (method override (draw)
    (with-gl-matrix
      (lambda ()
        (gl-translate x y z)
        (gl-rotate rtri 0.0 1.0 0.0)
        (gl-scale 0.5 0.5 0.5)
        (with-gl-begin/end GL_TRIANGLES
          (lambda ()
            (gl-plane-normal (new Vertex  0.0  1.0  0.0)
                             (new Vertex -1.0 -1.0  1.0)
                             (new Vertex  1.0 -1.0  1.0))
            (gl-color 1.0 0.0 0.0)
            (gl-vertex  0.0  1.0  0.0)
            (gl-color 0.0 1.0 0.0)
            (gl-vertex -1.0 -1.0  1.0)
            (gl-color 0.0 0.0 1.0)
            (gl-vertex  1.0 -1.0  1.0)
            
            (gl-plane-normal (new Vertex  0.0  1.0  0.0)
                             (new Vertex  1.0 -1.0  1.0)
                             (new Vertex  1.0 -1.0  -1.0))
            (gl-color 1.0 0.0 0.0)
            (gl-vertex  0.0  1.0  0.0)
            (gl-color 0.0 0.0 1.0)
            (gl-vertex  1.0 -1.0  1.0)
            (gl-color 0.0 1.0 0.0)
            (gl-vertex  1.0 -1.0  -1.0)
            
            (gl-plane-normal (new Vertex  0.0  1.0  0.0)
                             (new Vertex  1.0 -1.0  -1.0)
                             (new Vertex -1.0 -1.0  -1.0))
            (gl-color 1.0 0.0 0.0)
            (gl-vertex  0.0  1.0  0.0)
            (gl-color 0.0 1.0 0.0)
            (gl-vertex  1.0 -1.0  -1.0)
            (gl-color 0.0 0.0 1.0)
            (gl-vertex -1.0 -1.0  -1.0)
            
            (gl-plane-normal (new Vertex  0.0  1.0  0.0)
                             (new Vertex -1.0 -1.0 -1.0)
                             (new Vertex -1.0 -1.0  1.0))
            (gl-color 1.0 0.0 0.0)
            (gl-vertex  0.0  1.0  0.0)
            (gl-color 0.0 0.0 1.0)
            (gl-vertex -1.0 -1.0 -1.0)
            (gl-color 0.0 1.0 0.0)
            (gl-vertex -1.0 -1.0  1.0)))))
    (when (get-animate?~ world)
      (increase! rtri 0.2)
      (decrease! rquad 0.15))))


;;;
;;;; Cube
;;;


(class Cube extends World-Object
  
  
  (slot left)
  (slot front)
  (slot right)
  (slot back)
  (slot bottom)
  (slot top)
  
  
  (method override (initialize world x y z)
    (nextmethod world x y z)
    (set! left (make-png-texture {File Home ".world" "images" "image1.png"}))
    (set! front (make-png-texture {File Home ".world" "images" "image2.png"}))
    (set! right (make-png-texture {File Home ".world" "images" "image3.png"}))
    (set! back (make-png-texture {File Home ".world" "images" "image4.png"}))
    (set! bottom (make-png-texture {File Home ".world" "images" "image5.png"}))
    (set! top (make-png-texture {File Home ".world" "images" "image6.png"})))
  
  
  (method override (draw)
    (with-gl-matrix
      (lambda ()
        (gl-translate x y z)
        (gl-rotate rtri 1.0 1.0 1.0)
        (gl-scale 1.0 1.0 1.0)
        ;; top
        (gl-normal 0.0 1.0 0.0)
        (textured-quad~ top
          (lambda () (gl-vertex  2.0  2.0 -2.0))
          (lambda () (gl-vertex -2.0  2.0 -2.0))
          (lambda () (gl-vertex -2.0  2.0  2.0))
          (lambda () (gl-vertex  2.0  2.0  2.0)))
        ;; bottom
        (gl-normal 0.0 -1.0 0.0)
        (textured-quad~ bottom
          (lambda () (gl-vertex  2.0 -2.0  2.0))
          (lambda () (gl-vertex -2.0 -2.0  2.0))
          (lambda () (gl-vertex -2.0 -2.0 -2.0))
          (lambda () (gl-vertex  2.0 -2.0 -2.0)))
        ;; front
        (gl-normal 0.0 0.0 1.0)
        (textured-quad~ front
          (lambda () (gl-vertex -2.0 -2.0  2.0))
          (lambda () (gl-vertex  2.0 -2.0  2.0))
          (lambda () (gl-vertex  2.0  2.0  2.0))
          (lambda () (gl-vertex -2.0  2.0  2.0)))
        ;; back
        (gl-normal 0.0 0.0 -1.0)
        (textured-quad~ back
          (lambda () (gl-vertex  2.0 -2.0 -2.0))
          (lambda () (gl-vertex -2.0 -2.0 -2.0))
          (lambda () (gl-vertex -2.0  2.0 -2.0))
          (lambda () (gl-vertex  2.0  2.0 -2.0)))
        ;; left
        (gl-normal -1.0 0.0 0.0)
        (textured-quad~ left
          (lambda () (gl-vertex -2.0  2.0  2.0))
          (lambda () (gl-vertex -2.0  2.0 -2.0))
          (lambda () (gl-vertex -2.0 -2.0 -2.0))
          (lambda () (gl-vertex -2.0 -2.0  2.0)))
        ;; right
        (gl-normal 1.0 0.0 0.0)
        (textured-quad~ right
          (lambda ()(gl-vertex  2.0  2.0 -2.0))
          (lambda ()(gl-vertex  2.0  2.0  2.0))
          (lambda ()(gl-vertex  2.0 -2.0  2.0))
          (lambda ()(gl-vertex  2.0 -2.0 -2.0)))))
    (when (get-animate?~ world)
      (increase! rtri 0.4)
      (decrease! rquad 0.3))))


;;;
;;;; Wall
;;;


(class Wall extends World-Object
  
  
  (slot rotation)
  (slot scale-x)
  (slot scale-y)
  (slot color)
  
  
  (method override (initialize world x y z (rotation: rotation #f) (scale-x: scale-x 1.0) (scale-y: scale-y 1.0) (color: color #f))
    (nextmethod world x y z)
    (set! rotation~self rotation)
    (set! scale-x~self scale-x)
    (set! scale-y~self scale-y)
    (set! color~self (or color {Color White})))
  
  
  (method override (draw)
    (with-gl-matrix
      (lambda ()
        (gl-translate x y z)
        (when rotation
          (gl-rotate (get-x~ rotation) 1.0 0.0 0.0)
          (gl-rotate (get-y~ rotation) 0.0 1.0 0.0)
          (gl-rotate (get-z~ rotation) 0.0 0.0 1.0))
        (gl-scale scale-x scale-y 1.0)
        (gl-normal 0.0 0.0 1.0)
        (gl-colorize color)
        (with-gl-begin/end GL_QUADS
          (lambda ()
            (gl-vertex  1.0  -1.0 0.0)
            (gl-vertex -1.0  -1.0 0.0)
            (gl-vertex -1.0  1.0  0.0)
            (gl-vertex  1.0  1.0  0.0)))))))


;;;
;;;; Axes
;;;


(class Axes extends World-Object
  
  
  (method override (initialize world)
    (nextmethod world 0.0 0.0 0.0))
  
  
  (method override (draw)
    (with-gl-matrix
      (lambda ()
        (gl-translate 0.0 0.0 0.0)
        (gl-rotate 0.0 1.0 1.0 1.0)
        (gl-scale 1.5 1.5 1.5)
        (with-gl-begin/end GL_LINES
          (lambda ()
            ;; X
            (gl-color 0.0 1.0 0.0)
            (gl-vertex -10.0  0.0  0.0)
            (gl-vertex  10.0  0.0  0.0)
            
            ;; Y
            (gl-color 0.0 1.0 0.0)
            (gl-vertex  0.0 -10.0  0.0)
            (gl-vertex  0.0  10.0  0.0)
            
            ;; Z
            (gl-color 0.0 1.0 0.0)
            (gl-vertex  0.0  0.0 -10.0)
            (gl-vertex  0.0  0.0  10.0)))))))


;;;
;;;; FPS
;;;


(class FPS extends World-Object
  
  
  (slot texture)
  (slot start)
  (slot count)
  (slot fps)
  
  
  (method override (initialize world x y z)
    (nextmethod world x y z)
    (set! texture (make-cairo-texture 100 30))
    (set! fps 0.0)
    (reset-fps))
  
  
  (method (reset-fps)
    (set! start (time->seconds (current-time)))
    (set! count 0))
  
  
  (method (update-fps)
    (increase! count)
    (when (= count 10)
      (let* ((end (time->seconds (current-time)))
             (elapse (- end start)))
        (set! fps (/ count elapse)))))
  
  
  (method override (draw)
    (draw-fps)
    (when (= count 10)
      (reset-fps)))
  
  
  (method (draw-fps)
    (let ((surface (get-surface~ texture)))
      (set-operator~ surface CAIRO_OPERATOR_CLEAR)
      (paint~ surface)
      (set-operator~ surface CAIRO_OPERATOR_OVER)
      (set-font~ surface {Font Heading2})
      (set-color~ surface {Color Red})
      (draw-text~ surface 0 10 (format "FPS: {a}" fps))
      (map-texture~ texture)
      (with-gl-matrix
        (lambda ()
          (gl-translate 10.0 10.0 0.0)
          (textured-quad~ texture
            (lambda () (gl-vertex 0.0 0.0 0.0))
            (lambda () (gl-vertex 100.0 0.0 0.0))
            (lambda () (gl-vertex 100.0 30.0 0.0))
            (lambda () (gl-vertex 0.0 30.0 0.0))))))))


;;;
;;;; App
;;;


(class App extends World-Object
  
  
  (slot texture)
  (slot angle)
  
  
  (method override (initialize world x y z)
    (nextmethod world x y z)
    (set! texture (make-cairo-texture 1200 1200))
    (set! angle -75.0))
  
  
  (method override (draw)
    (blit-surface~ (get-surface~ texture) (get-offscreen~ (get-root~ (get-toplevel)) #f))
    (map-texture~ texture)
    
    (with-gl-matrix
      (lambda ()
        (gl-translate x y z)
        (gl-rotate angle 1.0 1.0 1.0)
        (gl-scale 6.0 6.0 6.0)
        (textured-quad~ texture
          (lambda () (gl-vertex -1.0 -1.0  1.0))
          (lambda () (gl-vertex  1.0 -1.0  1.0))
          (lambda () (gl-vertex  1.0  1.0  1.0))
          (lambda () (gl-vertex -1.0  1.0  1.0)))))
    
    (when (get-animate?~ world)
      (increase! angle 1.0)))))
