;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; World Object
;;;


(module world.object jazz


(import (jazz.graphic)
        (jazz.graphic.opengl.glew)
        (jazz.io)
        (jazz.library)
        (jazz.literals)
        (jazz.platform)
        (jazz.platform.cairo)
        (jazz.runtime)
        (jazz.system)
        (jazz.ui)
        (jazz.ui.window)
        (time)
        (world.autoload)
        (world.foreign)
        (world.geometry)
        (world.texture))


;;;
;;;; Object
;;;


(class World-Object extends Object
  
  
  (slot world    <World>               getter generate)
  (slot x        <fl>                  accessors generate)
  (slot y        <fl>                  accessors generate)
  (slot z        <fl>                  accessors generate)
  (slot visible? <bool>                accessors generate)
  (slot rtri     <fl>   initialize 0.0 accessors generate)
  (slot rquad    <fl>   initialize 0.0 accessors generate)
  
  
  (method override (initialize world x y z (visible?: visible? #t))
    (set! world~self world)
    (set! x~self x)
    (set! y~self y)
    (set! z~self z)
    (set! visible?~self visible?))
  
  
  (method public (get-position)
    (vertex x y z))
  
  
  (method protected virtual (draw)
    )
  
  
  (method protected virtual (inside? r vert)
    #f)
  
  
  ;;;
  ;;;; Tick
  ;;;
  
  
  (method protected virtual (tick . rest)
    )
  
  
  ;;;
  ;;;; Serialize
  ;;;
  
  
  (method protected (serialize-content)
    )
  
  
  (method protected (deserialize-content content)
    ))


;;;
;;;; Sphere
;;;


(class Sphere extends World-Object
  
  
  (slot radius <fl>     getter generate)
  (slot slices <fx>     getter generate)
  (slot stacks <fx>     getter generate)
  (slot color  <object> accessors generate)
  
  
  (method override (initialize world x y z (radius: radius 1.0) (slices: slices #f) (stacks: stacks #f) (color: color #f))
    (nextmethod world x y z)
    (set! radius~self radius)
    (set! slices~self (or slices 26))
    (set! stacks~self (or stacks 52))
    (set! color~self (or color {Color White})))
  
  
  (method override (draw)
    (draw-sphere x y z radius slices stacks color))
  
  
  (method override (inside? r vert)
    (let ((distance (vertex-norm (vertex- vert (vertex x y z)))))
      (<= distance (+ radius r)))))


(definition public (draw-sphere x y z radius slices stacks color)
  (glPushMatrix)
  (glTranslatef x y z)
  (gl-colorize color)
  (gl-sphere radius slices stacks)
  (glPopMatrix))


;;;
;;;; Pyramid
;;;


(class Pyramid extends World-Object
  
  
  (method override (draw)
    (glPushMatrix)
    (glTranslatef x y z)
    (glRotatef rtri 0.0 1.0 0.0)
    (glScalef 0.5 0.5 0.5)
    (glBegin GL_TRIANGLES)
    (gl-plane-normal (vertex  0.0  1.0  0.0)
                     (vertex -1.0 -1.0  1.0)
                     (vertex  1.0 -1.0  1.0))
    (glColor3f 1.0 0.0 0.0)
    (glVertex3f  0.0  1.0  0.0)
    (glColor3f 0.0 1.0 0.0)
    (glVertex3f -1.0 -1.0  1.0)
    (glColor3f 0.0 0.0 1.0)
    (glVertex3f  1.0 -1.0  1.0)
    
    (gl-plane-normal (vertex  0.0  1.0  0.0)
                     (vertex  1.0 -1.0  1.0)
                     (vertex  1.0 -1.0  -1.0))
    (glColor3f 1.0 0.0 0.0)
    (glVertex3f  0.0  1.0  0.0)
    (glColor3f 0.0 0.0 1.0)
    (glVertex3f  1.0 -1.0  1.0)
    (glColor3f 0.0 1.0 0.0)
    (glVertex3f  1.0 -1.0  -1.0)
    
    (gl-plane-normal (vertex  0.0  1.0  0.0)
                     (vertex  1.0 -1.0  -1.0)
                     (vertex -1.0 -1.0  -1.0))
    (glColor3f 1.0 0.0 0.0)
    (glVertex3f  0.0  1.0  0.0)
    (glColor3f 0.0 1.0 0.0)
    (glVertex3f  1.0 -1.0  -1.0)
    (glColor3f 0.0 0.0 1.0)
    (glVertex3f -1.0 -1.0  -1.0)
    
    (gl-plane-normal (vertex  0.0  1.0  0.0)
                     (vertex -1.0 -1.0 -1.0)
                     (vertex -1.0 -1.0  1.0))
    (glColor3f 1.0 0.0 0.0)
    (glVertex3f  0.0  1.0  0.0)
    (glColor3f 0.0 0.0 1.0)
    (glVertex3f -1.0 -1.0 -1.0)
    (glColor3f 0.0 1.0 0.0)
    (glVertex3f -1.0 -1.0  1.0)
    (glEnd)
    (glPopMatrix)
    (when (get-animate?~ world)
      (increase! rtri 0.2)
      (decrease! rquad 0.15))))


;;;
;;;; Cube
;;;


(class Cube extends World-Object
  
  
  (slot left   <object> getter generate)
  (slot front  <object> getter generate)
  (slot right  <object> getter generate)
  (slot back   <object> getter generate)
  (slot bottom <object> getter generate)
  (slot top    <object> getter generate)
  
  
  (method override (initialize world x y z)
    (nextmethod world x y z)
    @w(let ((images-dir {Directory Settings "resources" "images"}))
      (set! left   (make-png-texture (new-file~ images-dir "image1.png") (get-texture-shader~ world) (get-texture-location~ world)))
      (set! front  (make-png-texture (new-file~ images-dir "image2.png")))
      (set! right  (make-png-texture (new-file~ images-dir "image3.png")))
      (set! back   (make-png-texture (new-file~ images-dir "image4.png")))
      (set! bottom (make-png-texture (new-file~ images-dir "image5.png")))
      (set! top    (make-png-texture (new-file~ images-dir "image6.png")))))
  
  
  (method override (draw)
    (glPushMatrix)
    (glTranslatef x y z)
    (glRotatef rtri 1.0 1.0 1.0)
    (glScalef 1.0 1.0 1.0)
    ;; top
    (glNormal3f 0.0 1.0 0.0)
    (textured-quad~ top
      (lambda () (glVertex3f  2.0  2.0 -2.0))
      (lambda () (glVertex3f -2.0  2.0 -2.0))
      (lambda () (glVertex3f -2.0  2.0  2.0))
      (lambda () (glVertex3f  2.0  2.0  2.0)))
    ;; bottom
    (glNormal3f 0.0 -1.0 0.0)
    (textured-quad~ bottom
      (lambda () (glVertex3f  2.0 -2.0  2.0))
      (lambda () (glVertex3f -2.0 -2.0  2.0))
      (lambda () (glVertex3f -2.0 -2.0 -2.0))
      (lambda () (glVertex3f  2.0 -2.0 -2.0)))
    ;; front
    (glNormal3f 0.0 0.0 1.0)
    (textured-quad~ front
      (lambda () (glVertex3f -2.0 -2.0  2.0))
      (lambda () (glVertex3f  2.0 -2.0  2.0))
      (lambda () (glVertex3f  2.0  2.0  2.0))
      (lambda () (glVertex3f -2.0  2.0  2.0)))
    ;; back
    (glNormal3f 0.0 0.0 -1.0)
    (textured-quad~ back
      (lambda () (glVertex3f  2.0 -2.0 -2.0))
      (lambda () (glVertex3f -2.0 -2.0 -2.0))
      (lambda () (glVertex3f -2.0  2.0 -2.0))
      (lambda () (glVertex3f  2.0  2.0 -2.0)))
    ;; left
    (glNormal3f -1.0 0.0 0.0)
    (textured-quad~ left
      (lambda () (glVertex3f -2.0  2.0  2.0))
      (lambda () (glVertex3f -2.0  2.0 -2.0))
      (lambda () (glVertex3f -2.0 -2.0 -2.0))
      (lambda () (glVertex3f -2.0 -2.0  2.0)))
    ;; right
    (glNormal3f 1.0 0.0 0.0)
    (textured-quad~ right
      (lambda () (glVertex3f  2.0  2.0 -2.0))
      (lambda () (glVertex3f  2.0  2.0  2.0))
      (lambda () (glVertex3f  2.0 -2.0  2.0))
      (lambda () (glVertex3f  2.0 -2.0 -2.0)))
    (glPopMatrix)
    (when (get-animate?~ world)
      (increase! rtri 0.4)
      (decrease! rquad 0.3))))


(definition public (render-cube left bottom back right top front proc)
  ;; top
  (glNormal3f 0.0 1.0 0.0)
  (proc
    (lambda ()
      (glVertex3f right top back)
      (glVertex3f left  top back)
      (glVertex3f left  top front)
      (glVertex3f right top front)))
  ;; bottom
  (glNormal3f 0.0 -1.0 0.0)
  (proc
    (lambda ()
      (glVertex3f right bottom front)
      (glVertex3f left  bottom front)
      (glVertex3f left  bottom back)
      (glVertex3f right bottom back)))
  ;; front
  (glNormal3f 0.0 0.0 1.0)
  (proc
    (lambda ()
      (glVertex3f left  bottom front)
      (glVertex3f right bottom front)
      (glVertex3f right top    front)
      (glVertex3f left  top    front)))
  ;; back
  (glNormal3f 0.0 0.0 -1.0)
  (proc
    (lambda ()
      (glVertex3f right bottom back)
      (glVertex3f left  bottom back)
      (glVertex3f left  top    back)
      (glVertex3f right top    back)))
  ;; left
  (glNormal3f -1.0 0.0 0.0)
  (proc
    (lambda ()
      (glVertex3f left top    front)
      (glVertex3f left top    back)
      (glVertex3f left bottom back)
      (glVertex3f left bottom front)))
  ;; right
  (glNormal3f 1.0 0.0 0.0)
  (proc
    (lambda ()
      (glVertex3f right top    back)
      (glVertex3f right top    front)
      (glVertex3f right bottom front)
      (glVertex3f right bottom back))))


;;;
;;;; Wall
;;;


(class Wall extends World-Object
  
  
  (slot rotation <f32vector+> getter generate)
  (slot scale-x  <fl>         getter generate)
  (slot scale-y  <fl>         getter generate)
  (slot color    <object>     getter generate)
  
  
  (method override (initialize world x y z (rotation: rotation #f) (scale-x: scale-x 1.0) (scale-y: scale-y 1.0) (color: color #f))
    (nextmethod world x y z)
    (set! rotation~self rotation)
    (set! scale-x~self scale-x)
    (set! scale-y~self scale-y)
    (set! color~self (or color {Color White})))
  
  
  (method override (draw)
    (glPushMatrix)
    (glTranslatef x y z)
    (when rotation
      (glRotatef (vertex-x rotation) 1.0 0.0 0.0)
      (glRotatef (vertex-y rotation) 0.0 1.0 0.0)
      (glRotatef (vertex-z rotation) 0.0 0.0 1.0))
    (glScalef scale-x scale-y 1.0)
    (glNormal3f 0.0 0.0 1.0)
    (gl-colorize color)
    (glBegin GL_QUADS)
    (glVertex3f  1.0  -1.0 0.0)
    (glVertex3f -1.0  -1.0 0.0)
    (glVertex3f -1.0  1.0  0.0)
    (glVertex3f  1.0  1.0  0.0)
    (glEnd)
    (glPopMatrix)))


;;;
;;;; Axes
;;;


(class Axes extends World-Object
  
  
  (method override (initialize world . rest)
    (apply nextmethod world 0.0 0.0 0.0 rest))
  
  
  (method override (draw)
    (glPushMatrix)
    (glTranslatef 0.0 0.0 0.0)
    (glRotatef 0.0 1.0 1.0 1.0)
    (glScalef 5. 5. 5.)
    (glBegin GL_LINES)
    ;; X
    (glColor3f 0.0 1.0 0.0)
    (glVertex3f -10.0  0.0  0.0)
    (glVertex3f  10.0  0.0  0.0)
    
    ;; Y
    (glColor3f 0.0 1.0 0.0)
    (glVertex3f  0.0 -10.0  0.0)
    (glVertex3f  0.0  10.0  0.0)
    
    ;; Z
    (glColor3f 0.0 1.0 0.0)
    (glVertex3f  0.0  0.0 -10.0)
    (glVertex3f  0.0  0.0  10.0)
    (glEnd)
    (glPopMatrix)))


;;;
;;;; FPS
;;;


(class FPS extends World-Object
  
  
  (slot texture <object> getter generate)
  (slot count   <number> getter generate)
  (slot start   <fl>     getter generate)
  (slot fps     <fl>     getter generate)
  
  
  (method override (initialize world x y z)
    (nextmethod world x y z)
    (set! texture (make-cairo-texture 150 35))
    (set! fps 0.0)
    (reset))
  
  
  (method (reset)
    (set! count 0)
    (set! start (time->seconds (current-time))))
  
  
  (method (update-fps)
    (increase! count)
    (let* ((end (time->seconds (current-time)))
           (elapse (- end start)))
      (set! fps (/ count elapse))))
  
  
  (method override (draw)
    (draw-fps))
  
  
  (method (draw-fps)
    (let ((surface (get-surface~ texture)))
      (set-operator~ surface CAIRO_OPERATOR_CLEAR)
      (paint~ surface)
      (set-operator~ surface CAIRO_OPERATOR_OVER)
      (set-font~ surface {Font Heading2})
      (set-color~ surface {Color Red})
      (draw-text~ surface 0 10 (format "FPS: {r precision: 1}" fps))
      (map-texture~ texture)
      (glPushMatrix)
      (glTranslatef 10.0 8.0 0.0)
      (textured-quad~ texture
        (lambda () (glVertex3f 0.0 0.0 0.0))
        (lambda () (glVertex3f 150.0 0.0 0.0))
        (lambda () (glVertex3f 150.0 35.0 0.0))
        (lambda () (glVertex3f 0.0 35.0 0.0)))
      (glPopMatrix))))


;;;
;;;; App
;;;


(class App extends World-Object
  
  
  (slot texture <object> getter generate)
  (slot angle   <object> getter generate)
  
  
  (method override (initialize . rest)
    (apply nextmethod rest)
    (set! texture (make-cairo-texture 1200 1200))
    (set! angle -75.0))
  
  
  (method override (draw)
    (blit-surface~ (get-surface~ texture) (get-offscreen~ (get-root~ (get-toplevel)) #f))
    (map-texture~ texture)
    (glPushMatrix)
    (glTranslatef x y z)
    (glRotatef angle 1.0 1.0 1.0)
    (glScalef 6.0 6.0 6.0)
    (textured-quad~ texture
      (lambda () (glVertex3f -1.0 -1.0  1.0))
      (lambda () (glVertex3f  1.0 -1.0  1.0))
      (lambda () (glVertex3f  1.0  1.0  1.0))
      (lambda () (glVertex3f -1.0  1.0  1.0)))
    (glPopMatrix)
    (when (get-animate?~ world)
      (increase! angle 1.0)))))
