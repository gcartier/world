;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; Media Recording
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.recording jazz


(import (jazz.io)
        (world)
        (world.context)
        (world.client.udp)
        (world.stream)
        (world.udp))


(definition protected recording?
  #f)


(definition public (recording-start)
  (let ((udp (current-udp)))
    (let ((dir #f))
      (define (start)
        (when (not dir)
          (set! dir (timestamped-directory {Directory Documents "streams" "record"} "recording"))
          (create-directories dir))
        dir)
      
      (define (maybe-record stream)
        (let ((name (filename-base (effective-name stream))))
          (iterate-table (get-channels stream)
            (lambda (no channel)
              (let ((caps (get-caps channel)))
                (when caps
                  (let ((dir (start)))
                    (let ((kind (get-media-kind channel))
                          (level (get-level channel))
                          (resolution (get-resolution channel))
                          (framerate (get-framerate channel))
                          (bitrate (get-bitrate channel))
                          (codec (get-codec channel)))
                      (let ((file (new-file dir (add-extension name (ecase kind
                                                                      ((udp-audio) "streamaudio")
                                                                      (else (format "streamvideo{a}" (or level ""))))))))
                        (let ((writer (new Stream-Writer file kind level resolution framerate bitrate codec caps)))
                          (let ((recorder (new Media-Recorder writer)))
                            (set-recorder channel recorder))))))))))))
      
      (iterate-table (get-send-streams udp)
        (lambda (no stream)
          (maybe-record stream)))
      (iterate-table (get-receive-streams udp)
        (lambda (no stream)
          (maybe-record stream)))
      (when dir
        (set! recording? #t)))))


(definition public (recording-stop)
  (let ((udp (current-udp)))
    (define (stop stream)
      (iterate-table (get-channels stream)
        (lambda (no channel)
          (let ((recorder (get-recorder channel)))
            (when recorder
              (close (get-writer recorder))
              (set-recorder channel #f))))))
    
    (set! recording? #f)
    (iterate-table (get-send-streams udp)
      (lambda (no stream)
        (stop stream)))
    (iterate-table (get-receive-streams udp)
      (lambda (no stream)
        (stop stream)))))


(definition public (record-media recorder buffer dts pts duration flags)
  (let ((writer (get-writer recorder))
        (offset (get-offset recorder)))
    (when (not offset)
      (set! offset dts)
      (set-offset recorder dts))
    (let ((dts (- dts offset))
          (pts (- pts offset)))
      (write-frame writer buffer dts pts duration flags))))


;;;
;;;; Recorder
;;;


(class Media-Recorder extends Object
  
  
  (slot writer getter generate)
  (slot offset accessors generate)
  
  
  (method override (initialize self writer)
    (nextmethod self)
    (set! self.writer writer)
    (set! self.offset #f))))
