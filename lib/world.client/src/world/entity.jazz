;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; World Entities
;;;


(module world.entity jazz


(import (jazz.jml)
        (jazz.graphic)
        (jazz.graphic.opengl.glew)
        (world)
        (world.animation)
        (world.autoload)
        (world.draw)
        (world.dye)
        (world.dyes)
        (world.element)
        (world.foreign)
        (world.foreign.obj)
        (world.geometry)
        (world.mesh)
        (world.shader)
        (world.syntax (phase syntax)))


;;;
;;;; Entity
;;;


(class Entity extends Element
  
  
  (property model  <object>    initialize #f accessors generate)
  (property matrix <f32vector> initialize (make-identity-matrix) getter generate)
    
  
  (slot animate?       <bool>   initialize #f accessors generate)
  (slot morphing       <object> initialize #f getter generate)
  (slot animation-tick <object> initialize #f getter generate)
  
  
  (method override (print output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "<{a}> {a}" (and model (get-name~ model)) (present-vertex position)))))

  
  (method public (set-matrix mat)
    (matrix-copy! matrix mat))
  
  
  (method override (prepare rest)
    (nextmethod rest)
    (set-color white-dye))
  
  
  (method override (position-update)
    (nextmethod)
    (update-matrix))
  
  
  (method (update-matrix)
    (matrix-multiply! matrix (make-translation-matrix& (get-x) (get-y) (get-z)) (make-scaling-matrix& radius radius radius)))
  
  
  ;;;
  ;;;; Draw
  ;;;
  
  
  (method override (draw-3d-textured)
    (if (not model)
        (nextmethod)
      (draw-entity)))
  
  
  (method override (draw-3d)
    (if (not model)
        (nextmethod)
      (draw-entity)))
  
  
  (method (draw-entity)
    (let ((world (current-world)))
      (let ((mesh (get-mesh~ model))
            (program (find-mesh-program~ world (entity-program))))
        (use~ program)
        (bind-render-uniforms~ program mesh matrix)
        (entity-bind-uniforms program mesh matrix)
        ;(glDisable GL_DEPTH_TEST)
        ;(glEnable GL_CULL_FACE)
        ;(glCullFace GL_FRONT)
        ;(glFrontFace GL_CCW)
        (glEnable GL_ALPHA_TEST)
        (glAlphaFunc GL_GEQUAL .7)
        ;(glDisable GL_BLEND)
        (draw-mesh~ program mesh)
        (glDisable GL_ALPHA_TEST)
        ;(glDisable GL_CULL_FACE)
        ;(glEnable GL_DEPTH_TEST)
        ;(glEnable GL_BLEND)
        ;(glBlendFunc GL_SRC_ALPHA GL_ONE_MINUS_SRC_ALPHA)
        (unbind-uniforms~ program)
        (unbind-render-uniforms~ program)
        (unuse~ program))))
  
  
  (method protected virtual (entity-program)
    (if animate?
        'skeletal-phong
      'dynamic-phong))
  
  
  (method protected virtual (entity-bind-uniforms program mesh matrix)
    (if animate?
        (let ((bone-matrices (get-bone-matrices~ morphing)))
          (assert bone-matrices)
          (bind-uniforms~ program mesh matrix bone-matrices))
      (bind-uniforms~ program mesh matrix)))
    
  
  ;;;
  ;;;; Animation
  ;;;
  
  
  (method public (setup-morphing)
    (let ((world (current-world)))
      (when (not morphing)
        (set! morphing (new Morphing (get-animation~ model)))
        (set-frame -1.)
        (set! animation-tick animate)
        (register-tick~ world animation-tick))))
  
  
  (method public (free-morphing)
    (let ((world (current-world)))
      (when morphing
        (unregister-tick~ world animation-tick)
        (set! animation-tick #f)
        (set! morphing #f))))
  
  
  (method (animate elapse)
    (when animate?
      (animate~ morphing elapse)))
  
  
  (method (set-frame frame)
    (evaluate-frame~ morphing frame))))
