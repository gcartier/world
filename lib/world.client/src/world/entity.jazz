;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Entities
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.entity jazz


(import (jazz.syntax (phase syntax))
        (world)
        (world.animation)
        (world.autoload)
        (world.draw)
        (world.dyes)
        (world.element)
        (world.generate)
        (world.geometry)
        (world.model)
        (world.overlay)
        (world.renderers)
        (world.support)
        (world.syntax (phase syntax)))


;;;
;;;; Entity
;;;


(class Entity extends Element
  
  
  (property model       <object> initialize #f getter generate setter explicit)
  (property meshes-mask <object> initialize #f getter generate setter explicit)
  (property physical?   <bool>   initialize #f accessors generate)
  (property animate?    <bool>   initialize #f accessors generate)
  (property animation   <object> initialize #f accessors generate)
  (property shaders     <object> initialize #f getter generate setter explicit)
  
  
  (slot model-cache    <Model+>     initialize #f getter generate)
  (slot model-update   <procedure+> initialize #f accessors generate)
  (slot meshes         <object>     initialize #f accessors generate)
  (slot morphing       <Morphing+>  initialize #f getter generate)
  (slot animation-tick <object>     initialize #f getter generate)
  (slot renderer       <object>     initialize #f accessors generate)
  (slot overlay        <f32vector>  initialize #f accessors generate)
  (slot camera         <object>     initialize #f accessors generate)
  
  
  (method override (prepare rest)
    (nextmethod rest)
    (set-color white-dye)
    (set-overlay (f32vector 1. 1. 1. 1.)))
  
  
  (method override (destroy)
    (free-morphing)
    (nextmethod))
  
  
  (method override (print output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{a} {a}" model (present-vertex position)))))
  
  
  (method public (set-model mdl)
    (if (is? mdl Model)
        (set-model-cache mdl)
      (set! model mdl)
      (set! model-cache #f)))
  
  
  (method (cache-model) <Model>
    (or model-cache
        (begin
          (set-model-cache (resolve-model))
          model-cache)))
  
  
  (method protected virtual (resolve-model) <Model>
    (let ((world (current-world)))
      (assert model)
      (find-model~ world model)))
  
  
  (method (set-model-cache model)
    (define (effective-meshes model)
      (let ((meshes (get-meshes~ model)))
        (if (not meshes-mask)
            meshes
          (list->vector (loop (for mesh in-vector meshes)
                              (for render? in meshes-mask)
                              (when render?
                                (collect mesh)))))))
    
    (set! model-cache model)
    (when model
      (set! meshes (effective-meshes model))
      (when model-update
        (model-update self model))
      (reset-radiuses)
      (update-matrix)
      (when (and animate? (get-animations?) (find-animation~ model animation))
        (setup-morphing animation))))
  
  
  (method public (change-model model)
    (let ((pos (position->anchor position)))
      (set-model model)
      (set-position (anchor->position pos))))
  
  
  (method public (set-meshes-mask mask)
    (set! meshes-mask mask)
    (set! meshes #f)
    (set! model-cache #f))
  
  
  (method protected (entity-meshes)
    meshes)
  
  
  (method protected (entity-animate?)
    (and animate? (get-animations?) morphing))
  
  
  (method public virtual (set-shaders value)
    (set! shaders value)
    (set! renderer (and value (require-renderer value))))
  
  
  (method override (element-radiuses)
    (let ((model (cache-model)))
      (let ((bounds (get-bounds~ model)))
        (vertex* (vertex* (cuboid-radiuses bounds) scale) (get-scale~ model)))))
  
  
  (method override (effective-matrix&)
    (matrix-multiply& matrix (get-global-matrix~ (cache-model))))
  
  
  (method override (transformed-bounds)
    (parallelepiped-bounds (transformed-parallelepiped)))
  
  
  (method override (transformed-parallelepiped)
    (let ((model (cache-model)))
      (let ((matrix (effective-matrix&))
            (bounds (get-bounds~ model)))
        (transform-cuboid bounds matrix))))
  
  
  (method override (selection-bounds)
    (let ((model (cache-model)))
      (let ((bounds (get-bounds~ model)))
        (let ((radiuses (cuboid-radiuses bounds)))
          (let ((radius-x (max .25 (vertex-x radiuses)))
                (radius-z (max .25 (vertex-z radiuses))))
            (let ((left (- radius-x))
                  (right radius-x)
                  (bottom (min 0. (cuboid-bottom bounds)))
                  (top (cuboid-top bounds))
                  (back (- radius-z))
                  (front radius-z))
              (cuboid left bottom back right top front)))))))
  
  
  (method override (transformed-selection-bounds)
    (let ((model (cache-model)))
      (let ((matrix (effective-matrix&))
            (bounds (get-bounds~ model)))
        (let ((radiuses (cuboid-radiuses bounds)))
          (let ((radius-x (max .25 (vertex-x radiuses)))
                (radius-z (max .25 (vertex-z radiuses))))
            (let ((left (- radius-x))
                  (right radius-x)
                  (bottom (min 0. (cuboid-bottom bounds)))
                  (top (cuboid-top bounds))
                  (back (- radius-z))
                  (front radius-z))
              (transform-cuboid (cuboid left bottom back right top front) matrix)))))))
  
  
  (method override (transformed-center)
    (let ((model (cache-model)))
      (let ((matrix (effective-matrix&))
            (center (get-center~ model)))
        (matrix-transform-3x4 matrix center))))
  
  
  (method override (transformed-radiuses)
    (let ((model (cache-model)))
      (vertex* (vertex*& (cuboid-radiuses (get-bounds~ model)) scale)
               (get-scale~ model))))
  
  
  (method override (element-polygons)
    (if (not physical?)
        (nextmethod)
      (let ((model (cache-model)))
        (polygons-extract self (get-polygons~ model) matrix))))
  
  
  ;;;
  ;;;; Bounds
  ;;;
  
  
  (method public (for-each-bounding-quad sphere-matrix poly proc)
    (let ((bounds (transformed-selection-bounds)))
      (iterate-parallelepiped-quads bounds sphere-matrix poly proc self)))
  
  
  ;;;
  ;;;; Anchor
  ;;;
  
  
  (method (position->anchor pos)
    (let ((model (cache-model)))
      (position->anchor~ model pos scale)))
  
  
  (method (anchor->position anchor)
    (let ((model (cache-model)))
      (anchor->position~ model anchor scale)))

  
  ;;;
  ;;;; Draw
  ;;;
  
  
  (method override (draw-target color)
    (let ((bounds (selection-bounds)))
      (let ((matrix (matrix-multiply (effective-matrix&)
                                     (matrix-multiply (make-translation-matrix (vertex 0.
                                                                                       (case (get-anchor~ (cache-model))
                                                                                         ((origin) (/ (cuboid-height bounds) 2.))
                                                                                         (else 0.))
                                                                                       0.))
                                                      (make-scaling-matrix (cuboid-scale bounds))))))
        (render-cube matrix wire-color: color))))
  
  
  (method override (draw-target-circle)
    (let ((anchor (position->anchor position))
          (radius (/ (max .45 (target-radius)) 1.8)))
      (render-circle anchor radius purple-dye)))
  
  
  (method override (target-moveable?)
    (not physical?))
  
  
  ;;;
  ;;;; Animation
  ;;;
  
  
  (method public (setup-morphing (name #f))
    (when morphing
      (free-morphing))
    (when parent
      (change-morphing name)
      (when (and morphing (not animation-tick))
        (set! animation-tick animate)
        (register-tick~ parent animation-tick))))
  
  
  (method public (change-morphing name (frame: frame #f))
    (let ((animation (require-animation~ (cache-model) name)))
      (when (has-bones?~ animation)
        (unless (and morphing (eq? animation (get-animation~ morphing)))
          (if (not morphing)
              (set! morphing (new Morphing animation))
            (change-animation~ morphing animation))
          (goto-time~ morphing (or frame 0.))))))
  
  
  (method public (transition-morphing name)
    (if (not morphing)
        (change-morphing name)
      (let ((animation (require-animation~ (cache-model) name))
            (transition (get-transition~ morphing)))
        (unless (or (and transition (eq? animation (get-animation~ transition)))
                    (and (not transition) (eq? animation (get-animation~ morphing))))
          (if (not (get-transition~ morphing))
              (set-transition~ morphing (new Morphing animation))
            (change-animation~ (get-transition~ morphing) animation))
          (set-transition-frame~ morphing 0.)))))
  
  
  (method public (free-morphing)
    (when morphing
      (when parent
        (unregister-tick~ parent animation-tick))
      (set! animation-tick #f)
      (set! morphing #f)))
  
  
  (method (animate elapse)
    (site (animate on?: #t)
      (let ((world (current-world)))
        (when (and animate? (get-animations?) animation-tick morphing)
          (when (in-frustum?~ (or camera (current-camera)) position)
            (animate~ morphing elapse)
            (when (transition-done?~ morphing)
              (let ((new-morphing (get-transition~ morphing)))
                (set-transition~ morphing #f)
                (set-transition-frame~ morphing #f)
                (set! morphing new-morphing)
                (goto-time~ morphing 0.))))))))
  
  
  (method (toggle-animated)
    (if animation-tick
        (begin
          (unregister-tick~ parent animation-tick)
          (set! animation-tick #f))
      (set! animation-tick animate)
      (register-tick~ parent animation-tick)))
  
  
  (method (set-frame frame)
    (goto-time~ morphing frame))))
