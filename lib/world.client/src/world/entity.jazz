;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; World Entities
;;;


(module world.entity jazz


(import (jazz.jml)
        (jazz.graphic)
        (jazz.graphic.opengl.glew)
        (world)
        (world.autoload)
        (world.draw)
        (world.element)
        (world.foreign)
        (world.foreign.obj)
        (world.geometry)
        (world.mesh)
        (world.shader)
        (world.syntax (phase syntax)))


;;;
;;;; Entity
;;;


(class Entity extends Element
  
  
  (property model  <object>    initialize #f accessors generate)
  (property matrix <f32vector> initialize (make-identity-matrix) getter generate)
  
  
  (method public (set-matrix mat)
    (matrix-copy! matrix mat))
  
  
  (method override (prepare rest)
    (nextmethod rest)
    (set! width 5.)
    (set! height 5.)
    (set! depth 5.)
    (set! color {Color White}))
  
  
  (method override (update-position)
    (nextmethod)
    (update-matrix))
  
  
  (method (update-matrix)
    (matrix-multiply! matrix (make-translation-matrix& x y z) (make-scaling-matrix& radius radius radius)))
  
  
  ;;;
  ;;;; Draw
  ;;;
  
  
  (method override (draw-3d-textured)
    (if (not model)
        (nextmethod)
      (draw-entity)))
  
  
  (method override (draw-3d)
    (if (not model)
        (nextmethod)
      (draw-entity)))
  
  
  (method (draw-entity)
    (let ((world (current-world)))
      (let ((mesh (get-mesh~ model))
            (program (find-mesh-program~ world (entity-program))))
        (use~ program)
        (entity-bind-uniforms program mesh matrix)
        ;(glDisable GL_DEPTH_TEST)
        ;(glEnable GL_CULL_FACE)
        ;(glCullFace GL_FRONT)
        ;(glFrontFace GL_CCW)
        (glEnable GL_ALPHA_TEST)
        (glAlphaFunc GL_GEQUAL .7)
        ;(glDisable GL_BLEND)
        (draw-mesh~ program mesh)
        (glDisable GL_ALPHA_TEST)
        ;(glDisable GL_CULL_FACE)
        ;(glEnable GL_DEPTH_TEST)
        ;(glEnable GL_BLEND)
        ;(glBlendFunc GL_SRC_ALPHA GL_ONE_MINUS_SRC_ALPHA)
        (unbind-uniforms~ program)
        (unuse~ program))))
  
  
  (method protected virtual (entity-program)
    'dynamic-phong)
  
  
  (method protected virtual (entity-bind-uniforms program mesh matrix)
    (bind-uniforms~ program mesh matrix))))
