;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Entities
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.entity jazz


(import (jazz.graphic)
        (jazz.syntax (phase syntax))
        (jazz.view)
        (jazz.window)
        (gaea.geometry)
        (world)
        (world.animation)
        (world.autoload)
        (world.billboard)
        (world.chunk)
        (world.configure)
        (world.console)
        (world.context)
        @coverage
        (world.coverage)
        (world.draw)
        (world.dyes)
        (world.element)
        (world.expanse)
        (world.generate)
        (world.history)
        (world.id)
        (world.lighting)
        (world.model)
        (world.renderers)
        (world.scriptum)
        (world.section)
        (world.settings)
        (world.support)
        (world.task)
        (world.window))


;;;
;;;; Entity
;;;


(class Entity extends Element
  
  
  (property id             <object> initialize #f     accessors generate)
  (property model          <object> initialize #f     getter generate setter explicit)
  (property model-problem  <object> initialize #f     accessors generate)
  (property meshes-mask    <object> initialize #f     getter generate setter explicit)
  (property physical?      <bool>   initialize #f     accessors generate)
  (property animate?       <bool>   initialize #t     getter generate setter explicit)
  (property animation      <object> initialize "Idle" accessors generate)
  (property shaders        <object> initialize #f     getter generate setter explicit)
  
  
  (slot model-mutex       <object>         initialize (make-mutex 'model) getter generate)
  (slot model-cache       <Model+>         initialize #f getter generate)
  (slot model-update      <procedure+>     initialize #f accessors generate)
  (slot meshes            <object>         initialize #f accessors generate)
  (slot morphing          <Morphing+>      initialize #f getter generate)
  (slot animated?         <bool>           initialize #f getter generate)
  (slot animation-tick    <object>         initialize #f getter generate)
  (slot renderer          <object>         initialize #f accessors generate)
  (slot state-entity      <object>         initialize #f getter generate)
  (slot name-pane         <object>         initialize #f getter generate)
  (slot script-pane       <object>         initialize #f getter generate)
  (slot console-pane      <object>         initialize #f getter generate)
  (slot draw-pane         <object>         initialize #f getter generate)
  (slot camera-pane       <object>         initialize #f getter generate)
  (slot cycled-pane       <object>         initialize #f getter generate)
  (slot overlay           <dye>            initialize #f accessors generate)
  (slot camera            <object>         initialize #f accessors generate)
  ;; replaces coverage
  (slot expanse-index     <index+>         initialize #f accessors generate)
  @coverage
  (slot coverage          <coverage+>      initialize #f accessors generate)
  ;; quicky
  (slot light-position    <object>         initialize #f accessors generate)
  (slot rendering?        <bool>           initialize #f accessors generate)
  (slot task              <object>         initialize #f accessors generate)
  (slot output            <object>         initialize #f accessors generate)
  
  
  (method override (prepare self rest)
    (nextmethod self rest)
    (set-color self white-dye)
    (set-overlay self (f32vector 1. 1. 1. 1.)))
  
  
  (method override (finish self rest)
    (nextmethod self rest)
    (setup-id self))
  
  
  (method override (destroy self)
    (free-morphing self)
    (unregister-id self)
    (nextmethod self))
  
  
  (method override (print self output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{a} {a}" model (present-vertex position)))))
  
  
  (method override (update-element self)
    (let ((zone (current-zone+)))
      (when zone
        (update-entity zone self))))
  
  
  (method package (linked? self)
    (boolean expanse-index @coverage coverage))
  
  
  (method protected virtual (player? self)
    #f)
  
  
  (method protected virtual (circle-stone? self)
    #f)
  
  
  (method protected virtual (setup-id self)
    (register-id self (or id (make-unique-id))))
  
  
  (method protected virtual (register-id self id)
    (set! self.id id))
  
  
  (method protected virtual (unregister-id self)
    )
  
  
  (method package virtual (simulated? self)
    #f)
  
  
  (method package virtual (model-class self)
    #f)
  
  
  (method package (with-model-mutex self thunk)
    (mutex-lock! model-mutex)
    (prog1 (thunk)
      (mutex-unlock! model-mutex)))
  
  
  (method public (set-model self mdl)
    (assert (specified? mdl))
    (with-model-mutex self
      (lambda ()
        (if (is? mdl Model)
            (set-model-cache self mdl #f)
          (set! model mdl)
          (set! model-cache #f)))))
  
  
  (method protected virtual (call-model-update self model)
    (when model-update
      (model-update self model)))
  
  
  (method package (cache-model self) <Model>
    (or model-cache
        (with-model-mutex self
          (lambda ()
            (or model-cache
                (receive (model problem) (resolve-model self)
                  (set-model-cache self model problem)
                  model-cache))))))
  
  
  (method package virtual (resolve-model self)
    (let ((world (current-world)))
      (assert model)
      (find-model-safe world model (model-class self))))
  
  
  (method (set-model-cache self model problem)
    (define (effective-meshes model)
      (let ((meshes (get-meshes model)))
        (and meshes
             (vector-map make-shared-mesh
                         (if (not meshes-mask)
                             meshes
                           (list->vector (loop (for mesh in-vector meshes)
                                               (for render? in meshes-mask)
                                               (when render?
                                                 (collect mesh)))))))))
    
    (set! model-cache model)
    (when problem
      (set! model-problem problem))
    (when model
      (set! meshes (effective-meshes model))
      (call-model-update self model)
      (reset-radiuses self)
      (update-matrix self)
      (when (and animate? animations? (find-animation model animation))
        (setup-morphing self animation))))
  
  
  (method (clear-model-cache self)
    (with-model-mutex self
      (lambda ()
        (set-model-cache self #f #f))))
  
  
  (method protected (reload-model self)
    (clear-model-cache self)
    (when (eq? ?e self)
      (set-%o (cache-model self))))
  
  
  (method public (change-model self model (anchor? #t))
    (if (not anchor?)
        (set-model self model)
      (let ((pos (position->anchor self position)))
        (set-model self model)
        (set-position self (anchor->position self pos)))))
  
  
  (method protected (use-instance-rendering? self model)
    (and (get-instance-rendering? model)
         (not name)))
  
  
  (method public (set-animate? self value)
    (set! animate? value)
    (when (and animate? animations? (not morphing) model-cache (find-animation model-cache animation))
      (setup-morphing self animation)))
  
  
  (method public (set-meshes-mask self mask)
    (with-model-mutex self
      (lambda ()
        (set! meshes-mask mask)
        (set! meshes #f)
        (set! model-cache #f))))
  
  
  (method package (entity-meshes self)
    meshes)
  
  
  (method package (entity-animate? self)
    (and animate? animations? morphing))
  
  
  (method package (install-avatar-metadata self)
    (set-scaling self (avatar-scaling self)))
  
  
  (method package (avatar-scaling self)
    (or (model-metadata-avatar-scaling (get-metadata (cache-model self))) 1.))
  
  
  (method public virtual (set-shaders self value)
    (set! shaders value)
    (set! renderer (and value (require-renderer value))))
  
  
  (method public virtual (entity-bounds self)
    (get-bounds (cache-model self)))
  
  
  (method override (element-radiuses self)
    (let ((model (cache-model self)))
      (let ((bounds (entity-bounds self)))
        (vertex* (vertex* (cuboid-radiuses bounds) scale) (get-scale model)))))
  
  
  (method override (effective-matrix& self)
    (matrix-multiply& matrix (get-global-matrix (cache-model self))))
  
  ;; aec quicky
  (method override (effective-matrix2& self)
    (matrix-multiply& matrix (get-global-matrix2 (cache-model self))))
  
  
  (method override (transformed-bounds self)
    (parallelepiped-bounds (transformed-parallelepiped self)))
  
  
  (method override (transformed-parallelepiped self)
    (let ((matrix (effective-matrix& self))
          (bounds (entity-bounds self)))
      (transform-cuboid bounds matrix)))
  
  
  (method override (selection-bounds self)
    (let ((bounds (entity-bounds self)))
      (let ((radiuses (cuboid-radiuses bounds)))
        (let ((radius-x (vertex-x radiuses))
              (radius-z (vertex-z radiuses)))
          (let ((left (- radius-x))
                (right radius-x)
                (bottom (min 0. (cuboid-bottom bounds)))
                (top (cuboid-top bounds))
                (back (- radius-z))
                (front radius-z))
            (cuboid left bottom back right top front))))))
  
  
  (method override (transformed-selection-bounds self)
    (let ((matrix (effective-matrix& self))
          (bounds (entity-bounds self)))
      (let ((radiuses (cuboid-radiuses bounds)))
        (let ((radius-x (max .25 (vertex-x radiuses)))
              (radius-z (max .25 (vertex-z radiuses))))
          (let ((left (- radius-x))
                (right radius-x)
                (bottom (min 0. (cuboid-bottom bounds)))
                (top (cuboid-top bounds))
                (back (- radius-z))
                (front radius-z))
            (transform-cuboid (cuboid left bottom back right top front) matrix))))))
  
  
  (method override (transformed-center self)
    (let ((model (cache-model self)))
      (let ((matrix (effective-matrix& self))
            (center (get-center model)))
        (matrix-transform-3x4 matrix center))))
  
  
  (method override (transformed-radiuses self)
    (let ((model (cache-model self)))
      ;; quick hack to paste the old code to fix the orb regression
      ;; as I dont feel like going through this logic at the moment
      (if (orb? (get-name model))
          (vertex* (vertex*& (cuboid-radiuses (entity-bounds self))
                             scale)
                   (get-scale model))
        ;; aec quicky
        (vertex-abs (matrix-transform (get-global-matrix2 model)
                                      (vertex*& (vertex*& (cuboid-radiuses (entity-bounds self))
                                                          scale)
                                                (get-scale model)))))))
  
  
  (method (transformed-height self)
    (let ((model (cache-model self)))
      (* (cuboid-height (entity-bounds self))
         (vertex-y (get-scale model))
         (vertex-y scale))))
  
  
  (method override (element-polygons self)
    (if (not physical?)
        (nextmethod self)
      (let ((model (cache-model self)))
        (polygons-extract self (get-polygons model) matrix))))


  (method package (adjust-motion-target self)
    (let ((motion (current-motion)))
      (when (eq? (motion-target motion) self)
        (without-roll self
          (lambda ()
            (eye-center-player motion))))))
  
  
  ;;;
  ;;;; Bounds
  ;;;
  
  
  (method public (for-each-bounding-quad$ self sphere-matrix proc)
    (let ((bounds (transformed-selection-bounds self)))
      (iterate-parallelepiped-quads$ bounds sphere-matrix proc self)))
  
  
  ;;;
  ;;;; Anchor
  ;;;
  
  
  (method package (position->anchor self pos)
    (let ((model (cache-model self)))
      (position->anchor model pos scale)))
  
  
  (method package (anchor->position self anchor)
    (let ((model (cache-model self)))
      (anchor->position model anchor scale)))

  
  ;;;
  ;;;; Script
  ;;;
  
  
  (method public (get-script self)
    (find-type self world.scripter:Script))
  
  
  (method public (get-script-text self)
    (let ((script (get-script self)))
      (and script (get-text script))))
  
  
  (method public (client-script? self)
    (let ((script (get-script self)))
      (and script
           (eq? (get-kind script) 'client))))
  
  
  (method package virtual (run-task self script (synchronous?: synchronous? #f) (evaluate-run?: evaluate-run? #f))
    (when script
      (task-start self script synchronous?: synchronous? evaluate-run?: evaluate-run?)))
  
  
  (method package virtual (halt-entity self)
    (when task
      (halt-task task)))
  
  
  (method protected virtual (task-start self script (synchronous?: synchronous? #f) (evaluate-run?: evaluate-run? #f))
    ;; quick hack
    (unless (and (processor?) (eq? (get-kind script) 'client))
    (let ((procedure
            (lambda (task)
              (parameterize ((synchronous-task? synchronous?)
                             (run? evaluate-run?))
                (task-run self task script)))))
      (let ((task (new Task (task-name self) procedure priority: (task-priority self))))
        (set-task self task)
        (start-task task synchronous?: synchronous?)))))
  
  
  (method protected virtual (task-name self)
    'entity)
  
  
  (method protected virtual (task-priority self)
    entity-priority)
  
  
  (method package virtual (task-run self task script)
    (with-script-task task
      (lambda (exit)
        (run-script script task exit))))
  
  
  (method package virtual (startup self)
    )
  
  
  (method package virtual (fallthrough self)
    (handle-events self))
  
  
  (method package (handle-events self)
    (let ((script (get-script self)))
      (assert script)
      (let (loop)
        (let ((event (wait-event script)))
          (event (current-exit))
          (loop)))))


  (method package (handle-event self)
    (let ((script (get-script self)))
      (when script
        (let ((event (dequeue-event script)))
          (when event
            (event (current-exit)))))))
  
  
  (method package (handle-one-event self script event)
    (cond ((and (pair? event)
                (eq? (car event) 'evaluate))
           (bind (instance evaluate-run?) (cdr event)
             (evaluate-script script instance evaluate-run?: evaluate-run?)))
          (else
           (case event
             ((interact)
              (let ((handler (get-interact script)))
                (parameterize ((%%current-event (new Script-Event self (current-seconds))))
                  (handler self))))
             ((double-click)
              (let ((handler (get-double-click script)))
                (parameterize ((%%current-event (new Script-Event self (current-seconds))))
                  (handler self))))
             ((toggle-paused)
              (%%toggle-paused))))))
  
  
  (method package (evaluate-script self script (evaluate-run?: evaluate-run? #f))
    (if (not task)
        (run-task self script evaluate-run?: evaluate-run?)
      (enqueue-event script (list 'evaluate self evaluate-run?))))

  
  ;;;
  ;;;; State
  ;;;
  
  
  (method public (set-state-entity self obj)
    (when state-entity
      (close state-entity))
    (set! state-entity obj))
  
  
  (method (cache-state-entity self)
    (let ((script (get-script self)))
      (if (not script)
          state-entity
        (and (not (user?))
             (and interface-script?
                  (let ((state (get-state script)))
                    (if (and state-entity (or (eq? (get-state state-entity) state)
                                              ;; reduce state change flicker
                                              @wait-seems-worse-at-the-moment!
                                              (let ((time (get-state-time script)))
                                                (and time
                                                     (< (- (current-seconds) time) .05)))))
                        state-entity
                      (let ((board (make-state-entity script)))
                        (set-state-entity self board)
                        board))))))))

  
  ;;;
  ;;;; Name
  ;;;
  
  
  (method public (set-name-pane self name (color: color #f))
    (when (and name-pane (window?))
      (close name-pane))
    (set! name-pane (and name (make-name-pane (list name {Font font-name: tahoma point-size: 36 hint-style: slight hint-metrics: on} (or color {Color World-Green}) .25)))))

  
  ;;;
  ;;;; Script
  ;;;
    
  
  (method public (activate-script-pane self)
    (let ((window (current-window)))
      (unless script-pane
        (let ((pane (make-script-pane self '())))
          (register-pane window pane)
          (update-parts self)
          (set! script-pane pane)))))
    
  
  (method public (deactivate-script-pane self)
    (let ((window (current-window)))
      (when script-pane
        (close script-pane)
        (unregister-pane window script-pane)
        (set-playable-focus window #f)
        (set! script-pane #f))))

  
  ;;;
  ;;;; Console
  ;;;

  
  (method public (set-console-pane self message (width: width #f) (height: height #f) (size: size #f))
    (when console-pane
      (close console-pane))
    (if (not message)
        (set! console-pane #f)
      (set! console-pane (make-console-pane self width height (list message size)))
      (update-parts self)))
  
  
  (method public (update-console-output self)
    (if output
        (set-console-pane self (get-content output) width: (get-width output) height: (get-height output) size: (get-size output))
      (set-console-pane self #f)))
  
  
  ;;;
  ;;;; Draw
  ;;;

  
  (method public (set-draw-pane self info)
    (let ((window (current-window)))
      (when draw-pane
        (unregister-pane window draw-pane)
        (close draw-pane))
      (if (not info)
          (set! draw-pane #f)
        (set! draw-pane (if (is? info View)
                            (world.video:make-view-pane self info)
                          (world.video:make-draw-pane self)))
        (update-parts self)
        (register-pane window draw-pane))))
  
  
  (method public (cache-draw-pane self info)
    (or draw-pane
        (begin
          (set-draw-pane self info)
          draw-pane)))

  
  ;;;
  ;;;; Camera
  ;;;
  
  
  (method public (set-camera-pane self info)
    (if (not info)
        (set! camera-pane #f)
      (set! camera-pane (world.video:make-camera-pane info))
      (update-parts self)))
  
  
  (method public (cache-camera-pane self info)
    (or camera-pane
        (begin
          (set-camera-pane self info)
          camera-pane)))

  
  ;;;
  ;;;; Panes
  ;;;
  
  
  (definition (rendered-pane pane)
    (and pane (get-render? pane) pane))
  
  
  (method (entity-pane self)
    (or (rendered-pane script-pane)
        (rendered-pane console-pane)
        (rendered-pane draw-pane)
        (rendered-pane camera-pane)))


  (method (cycle-panes self)
    (let ((window (current-window))
          (world (current-world)))
      (let ((panes (collect rendered-pane (list script-pane console-pane draw-pane camera-pane))))
        (if (null? panes)
            (bell)
          (let ((entity-pane (entity-pane self)))
            (let ((pane (next-element panes (or cycled-pane entity-pane))))
              (let ((default? (eq? pane entity-pane))
                    (title (get-title pane)))
                (set! cycled-pane (if default? #f pane))
                (bring-pane-to-front window pane)
                (display-message world title))))))))
  
  
  (method (reset-layout self)
    (set! cycled-pane #f))

  
  ;;;
  ;;;; Parts
  ;;;
  
  
  (method (update-parts self)
    (let ((me (current-me)))
      (let ((state-entity (cache-state-entity self))
            (name-pane (rendered-pane name-pane))
            (cycled-pane (rendered-pane cycled-pane))
            (script-pane (rendered-pane script-pane))
            (console-pane (rendered-pane console-pane))
            (draw-pane (rendered-pane draw-pane)))
        (let ((height (transformed-height self))
              (effective-pane (or cycled-pane script-pane console-pane draw-pane)))
          (when state-entity
            (set-matrix state-entity (entity-billboard-matrix& me self (+ height (if effective-pane (get-height effective-pane) 0.) (if name-pane (get-height name-pane) 0.)))))
          (when name-pane
            (set-matrix name-pane (entity-billboard-matrix& me self (+ height (get-radius-y name-pane) (if effective-pane (get-height effective-pane) 0.)))))
          (if cycled-pane
              (set-matrix cycled-pane (entity-matrix& me self (+ height (get-radius-y cycled-pane))))
            (when script-pane
              (set-matrix script-pane (entity-matrix& me self (+ height (get-radius-y script-pane)))))
            (when console-pane
              (let ((sight (matrix-direction (get-matrix console-pane))))
                (set-matrix console-pane (auxiliary-matrix& me self (vertex+& (vertex-scalar*& sight .005)
                                                                              (vertex& 0. (+ height (get-radius-y console-pane)) 0.))))))
            (when draw-pane
              (let ((sight (matrix-direction (get-matrix draw-pane))))
                (set-matrix draw-pane (auxiliary-matrix& me self (vertex+& (vertex-scalar*& sight .01)
                                                                           (vertex& 0. (+ height (get-radius-y draw-pane)) 0.)))))))))))
  
  
  (method package virtual (register-parts self)
    ;; quick hack because the console renderer transparency needs
    ;; more work to display correctly when there are entities present
    ;; it is also only correct when using a billboard matrix which
    ;; we are not anymore
    (define console-renderer-hack?
      ;; nicer to look at
      #f)
    
    (let ((me (current-me)))
      (update-parts self)
      (let ((state-entity (cache-state-entity self))
            (name-pane (rendered-pane name-pane))
            (cycled-pane (rendered-pane cycled-pane))
            (script-pane (rendered-pane script-pane))
            (console-pane (rendered-pane console-pane))
            (draw-pane (rendered-pane draw-pane)))
        (when state-entity
          (world.renderer:register-entity state-entity))
        (when name-pane
          (world.renderer:register-texture-element name-pane))
        (if cycled-pane
            (if console-renderer-hack?
                (world.renderer:register-texture-element cycled-pane)
              (world.renderer:register-console-element cycled-pane))
          (when script-pane
            (if console-renderer-hack?
                (world.renderer:register-texture-element script-pane)
              (world.renderer:register-console-element script-pane)))
          (when console-pane
            (if console-renderer-hack?
                (world.renderer:register-texture-element console-pane)
              (world.renderer:register-console-element console-pane)))
          (when draw-pane
            (if console-renderer-hack?
                (world.renderer:register-texture-element draw-pane)
              (world.renderer:register-console-element draw-pane)))))))

  
  ;;;
  ;;;; Target
  ;;;
  
  
  (method override (draw-target self color)
    (draw-bounds self color))
  
  
  (method override (draw-target-circle self)
    (let ((anchor (position->anchor self position))
          (radius (/ (max .45 (target-radius self)) 1.8)))
      (render-circle anchor radius purple-dye)))
  
  
  (method override (target-moveable? self)
    (not physical?))
  
  
  (method (draw-bounds self color)
    (let ((bounds (selection-bounds self)))
      ;; aec quicky
      (let ((matrix (matrix-multiply& (effective-matrix2& self)
                                      (make-translation-matrix (vertex 0.
                                                                       (case (get-anchor (cache-model self))
                                                                         ((origin) (/ (cuboid-height bounds) 2.))
                                                                         (else 0.))
                                                                       0.))
                                      (make-scaling-matrix (cuboid-radiuses bounds)))))
        (render-cube matrix wire-color: color))))
  
  
  ;; useful to debug collisions
  (method (draw-collision-bounds self color)
    (let ((matrix (matrix-multiply& (make-translation-matrix (transformed-center self))
                                    (make-lookat-matrix lookat)
                                    (make-scaling-matrix (transformed-radiuses self)))))
      (render-cube matrix wire-color: color)))
  
  
  ;;;
  ;;;; Sound
  ;;;
  
  
  (method (find-sound self name)
    (let ((sounds (get-sounds (cache-model self))))
      (and sounds
           (if (eq? sounds 'none)
               sounds
             (table-ref sounds name #f)))))
  
  
  (method (require-sound self name)
    (or (find-sound self name)
        (error "Unable to find sound: {s}" name)))
  
  
  ;;;
  ;;;; Animation
  ;;;
  
  
  (method (effective-parent self)
    (if (or (not parent)
            (is? parent Chunk-Container)
            (is? parent Section-Container))
        (current-zone)
      parent))
  
  
  (method public (setup-morphing self (name #f))
    (when morphing
      (free-morphing self))
    (change-morphing self (or name "Idle"))
    (when (and morphing (not animated?))
      (animated self)))
  
  
  (method public (change-morphing self name (frame: frame #f) (speedup: speedup #f) (next: next #f) (next-proc: next-proc #f))
    (let ((animation (require-animation (cache-model self) name)))
      (when (has-bones? animation)
        (if (not morphing)
            (set! morphing (new Morphing animation speedup: speedup))
          (change-animation morphing animation speedup: speedup))
        (set-animation-next morphing next)
        (set-animation-next-proc morphing next-proc)
        (reset-transition morphing)
        (goto-frame morphing (or frame 0.)))))
  
  
  (method public (transition-morphing self name (frame: frame #f) (speedup: speedup #f) (duration: duration #f) (elapsed: elapsed #f) (next: next #f) (next-proc: next-proc #f))
    (if (not morphing)
        (change-morphing self name frame: frame speedup: speedup next: next)
      (let ((animation (require-animation (cache-model self) name))
            (transition (get-transition morphing)))
        (if (not (get-transition morphing))
            (set-transition morphing (new Morphing animation speedup: speedup))
          (change-animation (get-transition morphing) animation speedup: speedup))
        (set-animation-next (get-transition morphing) next)
        (set-animation-next-proc (get-transition morphing) next-proc)
        (set-transition-frame morphing (or frame 0.))
        (set-transition-elapsed morphing (or elapsed 0.))
        (set-transition-duration morphing (or duration (get-default-transition-duration))))))
  
  
  (method public (free-morphing self)
    (when morphing
      (unanimated self)
      (set! morphing #f)))
  
  
  (method package (animate self elapse (position position)) ;; position is a quick hack for subentities like the vehicle
    (site animate
      (when (and animations? (not (get-paused? (current-history))))
        (when (and animate? animated? morphing)
          (when (in-frustum? (or camera (current-camera)) position)
            (tick-animation self elapse)))
        (when state-entity
          (when (and (get-animate? state-entity) (get-animated? state-entity) (get-morphing state-entity))
            (when (in-frustum? (or camera (current-camera)) position)
              (tick-animation state-entity elapse)))))))
  
  
  (method protected virtual (animated self)
    (set! animated? #t)
    (set! animation-tick (~ animate self))
    (register-tick (effective-parent self) animation-tick))
  
  
  (method protected virtual (unanimated self)
    (unregister-tick (effective-parent self) animation-tick)
    (set! animation-tick #f)
    (set! animated? #f))
  
  
  (method package (tick-animation self elapse)
    (animate-morphing morphing elapse
      ;; update-morphing
      (lambda (new-morphing)
        (set! morphing new-morphing))
      ;; change-next
      (lambda (next)
        (change-morphing self next))))
  
  
  (method package (set-frame self frame)
    (goto-frame morphing frame))))
