;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; World Entities
;;;


(module world.entity jazz


(import (jazz.jml)
        (jazz.graphic)
        (jazz.graphic.opengl.glew)
        (world)
        (world.array)
        (world.draw)
        (world.foreign)
        (world.foreign.obj)
        (world.gadget)
        (world.geometry)
        (world.object)
        (world.shader)
        (world.sprite))


;;;
;;;; Model-Entity
;;;


(class Model-Entity extends Sprite
  
  
  (property model  <object> initialize #f accessors generate)
  (property matrix <object> initialize #f accessors generate)
  
  
  (method override (prepare rest)
    (nextmethod rest)
    (set! width 5.)
    (set! height 5.)
    (set! depth 5.)
    (set! color {Color White}))
  
  
  ;;;
  ;;;; Draw
  ;;;
  
  
  (method override (draw-3d-textured)
    (draw-entity))
  
  
  (method override (draw-3d)
    (draw-entity))
  
  
  (method (draw-entity)
    (let ((vao (get-vao~ model))
          (texture (get-texture~ model))
          (shader (get-model-shader~ world))
          (location (get-model-location~ world))
          (texture-location (get-model-texture-location~ world))
          (tex-location (get-model-tex-location~ world))
          (normal-location (get-model-normal-location~ world))
          (num-lights-location (get-model-num-lights-location~ world))
          (matrix-location (get-model-matrix-location~ world)))
      ;; Activate the block shader (does texturing - we need to add lighting)
      (activate~ shader)
      
      ;; Pass the block texture to the shader
      (glActiveTexture GL_TEXTURE0)
      (glBindTexture GL_TEXTURE_2D (get-texture~ texture))
      (glUniform1i texture-location 0)
      
      ;; Pass lighting information to the shader
      (glUniform1i num-lights-location (count-lights~ zone))
      
      ;; Pass the custom model matrix
      (glUniformMatrix4fv* matrix-location 1 #f matrix)
      
      (enable-vertex-attrib~ vao location)
      (enable-vertex-attrib~ vao tex-location)
      (enable-vertex-attrib~ vao normal-location)
      
      ;; Activate the VAO
      (activate~ vao)
      
      ;; Tell the shader where to read the vertices from the VBO
      (set-attrib-pointer~ vao location stride: 36)
      
      ;; Tell the shader where to read texcoords from the VBO
      (set-attrib-pointer~ vao tex-location stride: 36 offset: 12)
      
      ;; Tell the shader where to read normals from the VBO
      (set-attrib-pointer~ vao normal-location stride: 36 offset: 24)
      
      ;; Draw the VBO on screen
      (draw~ vao)
      
      ;; Disable all array/pointer assignments
      (disable-vertex-attrib~ vao location)
      (disable-vertex-attrib~ vao tex-location)
      (disable-vertex-attrib~ vao normal-location)
      (deactivate~ vao)
      
      ;; Deactivate the block shader
      (deactivate~ shader)
      (glActiveTexture GL_TEXTURE0)
      (glBindTexture GL_TEXTURE_2D 0)))))
