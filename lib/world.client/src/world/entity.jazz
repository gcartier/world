;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Entities
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2016
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.entity jazz


(import (jazz.graphic)
        (jazz.syntax (phase syntax))
        (world)
        (world.animation)
        (world.autoload)
        (world.billboard)
        (world.chunk)
        (world.configure)
        (world.console)
        (world.draw)
        (world.dyes)
        (world.element)
        (world.expanse)
        (world.generate)
        (world.geometry)
        (world.history)
        (world.id)
        (world.model)
        (world.renderers)
        (world.scripting)
        (world.section)
        (world.settings)
        (world.support)
        (world.syntax (phase syntax))
        (world.task))


;;;
;;;; Entity
;;;


(class Entity extends Element
  
  
  (method meta protected virtual (package entity)
    (list (get-id~ entity) (get-name~ entity) (get-position~ entity) (get-lookat~ entity) (get-model~ entity)))
  
  
  (method meta protected virtual (unpackage info)
    (let ((game (current-game)))
      (bind (id name position lookat model) info
        (apply-add-entity~ game self id position lookat model))))
  
  
  (property id             <object> initialize #f     accessors generate)
  (property model          <object> initialize #f     getter generate setter explicit)
  (property meshes-mask    <object> initialize #f     getter generate setter explicit)
  (property physical?      <bool>   initialize #f     accessors generate)
  (property animate?       <bool>   initialize #t     getter generate setter explicit)
  (property animation      <object> initialize "Idle" accessors generate)
  (property shaders        <object> initialize #f     getter generate setter explicit)
  
  
  (slot model-cache       <Model+>         initialize #f getter generate)
  (slot model-update      <procedure+>     initialize #f accessors generate)
  (slot meshes            <object>         initialize #f accessors generate)
  (slot morphing          <Morphing+>      initialize #f getter generate)
  (slot animated?         <bool>           initialize #f getter generate)
  (slot animation-tick    <object>         initialize #f getter generate)
  (slot renderer          <object>         initialize #f accessors generate)
  (slot billboard         <object>         initialize #f getter generate)
  (slot billboard-element <object>         initialize #f getter generate)
  (slot overlay           <dye>            initialize #f accessors generate)
  (slot camera            <object>         initialize #f accessors generate)
  (slot expanse           <Expanse+>       initialize #f accessors generate)
  (slot designer-chunk    <World-Chunk+>   initialize #f accessors generate)
  (slot task              <object>         initialize #f accessors generate)
  
  
  (method override (prepare rest)
    (nextmethod rest)
    (set-color white-dye)
    (set-overlay (f32vector 1. 1. 1. 1.)))
  
  
  (method override (finish rest)
    (nextmethod rest)
    (setup-id))
  
  
  (method override (destroy)
    (free-morphing)
    (unregister-id)
    (nextmethod))
  
  
  (method override (print output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{a} {a}" model (present-vertex position)))))
  
  
  (method override (update-element old-position)
    (let ((zone (current-zone+)))
      (when (and zone expanse)
        (update-entity~ zone self old-position))))
  
  
  (method protected virtual (setup-id)
    (unless (and (backward-compatibility-inhibit-ids?) (not (f64vector? id)))
      (register-id (or id (make-unique-id)))))
  
  
  (method (register-id id)
    (set! id~self id)
    (register-entity-id id self))
  
  
  (method (unregister-id)
    (when id
      (unregister-entity-id id)))
  
  
  (method protected virtual (simulated?)
    #f)
  
  
  (method public (set-model mdl)
    (assert (specified? mdl))
    (if (is? mdl Model)
        (set-model-cache mdl)
      (set! model mdl)
      (set! model-cache #f)))
  
  
  (method protected virtual (call-model-update model)
    (when model-update
      (model-update self model)))
  
  
  (method (cache-model) <Model>
    (or model-cache
        (begin
          (set-model-cache (resolve-model))
          model-cache)))
  
  
  (method protected virtual (resolve-model) <Model>
    (let ((world (current-world)))
      (assert model)
      (find-model~ world model)))
  
  
  (method (set-model-cache model)
    (define (effective-meshes model)
      (let ((meshes (get-meshes~ model)))
        (if (not meshes-mask)
            meshes
          (list->vector (loop (for mesh in-vector meshes)
                              (for render? in meshes-mask)
                              (when render?
                                (collect mesh)))))))
    
    (set! model-cache model)
    (when model
      (set! meshes (effective-meshes model))
      (call-model-update model)
      (reset-radiuses)
      (update-matrix)
      (when (and animate? animations? (find-animation~ model animation))
        (setup-morphing animation))))
  
  
  (method public (change-model model (anchor? #t))
    (if (not anchor?)
        (set-model model)
      (let ((pos (position->anchor position)))
        (set-model model)
        (set-position (anchor->position pos)))))
  
  
  (method public (set-animate? value)
    (set! animate? value)
    (when (and animate? animations? (not morphing) model-cache (find-animation~ model-cache animation))
      (setup-morphing animation)))
  
  
  (method public (set-meshes-mask mask)
    (set! meshes-mask mask)
    (set! meshes #f)
    (set! model-cache #f))
  
  
  (method protected (entity-meshes)
    meshes)
  
  
  (method protected (entity-animate?)
    (and animate? animations? morphing))
  
  
  (method protected virtual (admin-me?)
    #f)
  
  
  (method protected (metadata-install)
    (let ((scaling (model-metadata-scaling (get-metadata~ (cache-model)))))
      (when scaling
        (set-scaling scaling))))
  
  
  (method protected (default-scaling)
    (set-scaling (or (model-metadata-scaling (get-metadata~ (cache-model))) 1.)))
  
  
  (method public virtual (set-shaders value)
    (set! shaders value)
    (set! renderer (and value (require-renderer value))))
  
  
  (method public virtual (entity-bounds)
    (get-bounds~ (cache-model)))
  
  
  (method override (element-radiuses)
    (let ((model (cache-model)))
      (let ((bounds (entity-bounds)))
        (vertex* (vertex* (cuboid-radiuses bounds) scale) (get-scale~ model)))))
  
  
  (method override (effective-matrix&)
    (matrix-multiply& matrix (get-global-matrix~ (cache-model))))
  
  ;; aec quicky
  (method override (effective-matrix2&)
    (matrix-multiply& matrix (get-global-matrix2~ (cache-model))))
  
  
  (method override (transformed-bounds)
    (parallelepiped-bounds (transformed-parallelepiped)))
  
  
  (method override (transformed-parallelepiped)
    (let ((matrix (effective-matrix&))
          (bounds (entity-bounds)))
      (transform-cuboid bounds matrix)))
  
  
  (method override (selection-bounds)
    (let ((bounds (entity-bounds)))
      (let ((radiuses (cuboid-radiuses bounds)))
        (let ((radius-x (vertex-x radiuses))
              (radius-z (vertex-z radiuses)))
          (let ((left (- radius-x))
                (right radius-x)
                (bottom (min 0. (cuboid-bottom bounds)))
                (top (cuboid-top bounds))
                (back (- radius-z))
                (front radius-z))
            (cuboid left bottom back right top front))))))
  
  
  (method override (transformed-selection-bounds)
    (let ((matrix (effective-matrix&))
          (bounds (entity-bounds)))
      (let ((radiuses (cuboid-radiuses bounds)))
        (let ((radius-x (max .25 (vertex-x radiuses)))
              (radius-z (max .25 (vertex-z radiuses))))
          (let ((left (- radius-x))
                (right radius-x)
                (bottom (min 0. (cuboid-bottom bounds)))
                (top (cuboid-top bounds))
                (back (- radius-z))
                (front radius-z))
            (transform-cuboid (cuboid left bottom back right top front) matrix))))))
  
  
  (method override (transformed-center)
    (let ((model (cache-model)))
      (let ((matrix (effective-matrix&))
            (center (get-center~ model)))
        (matrix-transform-3x4 matrix center))))
  
  
  (method override (transformed-radiuses)
    (let ((model (cache-model)))
      ;; quick hack to paste the old code to fix the orb regression
      ;; as I dont feel like going through this logic at the moment
      (if (orb? (get-name~ model))
          (vertex* (vertex*& (cuboid-radiuses (entity-bounds))
                             scale)
                   (get-scale~ model))
        ;; aec quicky
        (vertex-abs (matrix-transform (get-global-matrix2~ model)
                                      (vertex*& (vertex*& (cuboid-radiuses (entity-bounds))
                                                          scale)
                                                (get-scale~ model)))))))
  
  
  (method (transformed-height)
    (let ((model (cache-model)))
      (* (cuboid-height (entity-bounds))
         (vertex-y (get-scale~ model))
         (vertex-y scale))))
  
  
  (method override (element-polygons)
    (if (not physical?)
        (nextmethod)
      (let ((model (cache-model)))
        (polygons-extract self (get-polygons~ model) matrix))))
  
  
  ;;;
  ;;;; Bounds
  ;;;
  
  
  (method public (for-each-bounding-quad$ sphere-matrix proc)
    (let ((bounds (transformed-selection-bounds)))
      (iterate-parallelepiped-quads$ bounds sphere-matrix proc self)))
  
  
  ;;;
  ;;;; Anchor
  ;;;
  
  
  (method (position->anchor pos)
    (let ((model (cache-model)))
      (position->anchor~ model pos scale)))
  
  
  (method (anchor->position anchor)
    (let ((model (cache-model)))
      (anchor->position~ model anchor scale)))

  
  ;;;
  ;;;; Script
  ;;;
  
  
  (method public (get-script)
    (find-type world.scripter:Script))
  
  
  (method protected virtual (run-task script)
    (when script
      (task-start script)))
  
  
  (method protected virtual (cease-entity)
    (when task
      (cease-task task)))
  
  
  (method protected virtual (task-start script)
    (let ((procedure
            (lambda (task)
              (task-run task script))))
      (let ((task (new Task (task-name) procedure)))
        (set-task task)
        (start-task task)
        (thread-base-priority-set! (get-thread~ task) (task-priority)))))
  
  
  (method protected virtual (task-name)
    'entity)
  
  
  (method protected virtual (task-priority)
    entity-priority)
  
  
  (method protected virtual (task-run task script)
    (with-script-task task
      (lambda (exit)
        (run-script~ script task exit))))
  
  
  (method protected virtual (startup)
    )
  
  
  (method protected virtual (fallthrough)
    (set-task #f)
    (continuation-return (current-exit) #f))


  (method protected virtual (handle-events)
    (let ((script (get-script)))
      (when script
        (let ((event (dequeue-event~ script)))
          (if (and (pair? event)
                   (eq? (car event) 'evaluate))
              (evaluate-script~ script (cdr event))
            (case event
              ((interact)
               (let ((handler (get-interact~ script)))
                 (parameterize ((current-event (new Script-Event self (current-seconds))))
                   (handler self))))
              ((double-click)
               (let ((handler (get-double-click~ script)))
                 (parameterize ((current-event (new Script-Event self (current-seconds))))
                   (handler self))))
              ((toggle-paused)
               (%%toggle-paused))))))))
  
  
  (method (evaluate-script script)
    (if (not task)
        (run-task script)
      (enqueue-event~ script (cons 'evaluate self))))

  
  ;;;
  ;;;; Billboard
  ;;;
  
  
  (method public (set-billboard obj)
    (when billboard
      (close~ billboard))
    (set! billboard obj))
  
  
  (method public (set-billboard-element obj)
    (when billboard-element
      (close~ billboard-element))
    (set! billboard-element obj))
  
  
  (method public (set-billboard-name name)
    (assert name)
    (set-billboard-element (make-billboard-name (list name {Font font-name: tahoma point-size: 36 hint-style: slight hint-metrics: on} {Color World-Yellow} .25))))
  
  
  (method public (set-billboard-console message (size: size #f))
    (set-billboard-element (make-billboard-console (list message size))))
  
  
  (method protected virtual (cache-billboard)
    (let ((script (get-script)))
      (if (not script)
          billboard
        (and (not (user?))
             (and interface-script?
                  (let ((state (get-state~ script)))
                    (if (and billboard (or (eq? (get-state~ billboard) state)
                                           ;; reduce state change flicker
                                           @wait-seems-worse-at-the-moment!
                                           (let ((time (get-state-time~ script)))
                                             (and time
                                                  (< (- (current-seconds) time) .05)))))
                        billboard
                      (let ((board (make-billboard~ script)))
                        (set-billboard board)
                        board))))))))
  
  
  (method protected virtual (cache-billboard-element)
    billboard-element)
  
  
  (method protected virtual (register-billboards)
    (let ((billboard (cache-billboard))
          (billboard-element (cache-billboard-element)))
      (when billboard
        (set-matrix~ billboard (billboard-matrix& self (+ (transformed-height) (if billboard-element (billboard-top~ billboard-element) -.1))))
        (world.renderer:register-entity billboard))
      (when billboard-element
        (set-matrix~ billboard-element (billboard-matrix& self (+ (transformed-height) (billboard-center~ billboard-element))))
        (world.renderer:register-texture-element billboard-element))))

  
  ;;;
  ;;;; Draw
  ;;;
  
  
  (method override (draw-target color)
    (draw-bounds color))
  
  
  (method override (draw-target-circle)
    (let ((anchor (position->anchor position))
          (radius (/ (max .45 (target-radius)) 1.8)))
      (render-circle anchor radius purple-dye)))
  
  
  (method override (target-moveable?)
    (not physical?))
  
  
  (method (draw-bounds color)
    (let ((bounds (selection-bounds)))
      ;; aec quicky
      (let ((matrix (matrix-multiply& (effective-matrix2&)
                                      (make-translation-matrix (vertex 0.
                                                                       (case (get-anchor~ (cache-model))
                                                                         ((origin) (/ (cuboid-height bounds) 2.))
                                                                         (else 0.))
                                                                       0.))
                                      (make-scaling-matrix (cuboid-radiuses bounds)))))
        (render-cube matrix wire-color: color))))
  
  
  ;; useful to debug collisions
  (method (draw-collision-bounds color)
    (let ((matrix (matrix-multiply& (make-translation-matrix (transformed-center))
                                    (make-lookat-matrix lookat)
                                    (make-scaling-matrix (transformed-radiuses)))))
      (render-cube matrix wire-color: color)))
  
  
  ;;;
  ;;;; Sound
  ;;;
  
  
  (method (find-sound name)
    (let ((sounds (get-sounds~ (cache-model))))
      (when sounds
        (if (eq? sounds 'none)
            sounds
          (table-ref sounds name #f)))))
  
  
  (method (require-sound name)
    (or (find-sound name)
        (error "Unable to find sound: {s}" name)))
  
  
  ;;;
  ;;;; Animation
  ;;;
  
  
  (method (effective-parent)
    (if (or (not parent)
            (is? parent Chunk-Container))
        (current-zone)
      parent))
  
  
  (method public (setup-morphing (name #f))
    (when morphing
      (free-morphing))
    (change-morphing (or name "Idle"))
    (when (and morphing (not animated?))
      (animated)))
  
  
  (method public (change-morphing name (frame: frame #f) (speedup: speedup #f) (next: next #f) (next-proc: next-proc #f))
    (let ((animation (require-animation~ (cache-model) name)))
      (when (has-bones?~ animation)
        (if (not morphing)
            (set! morphing (new Morphing animation speedup: speedup))
          (change-animation~ morphing animation speedup: speedup))
        (set-animation-next~ morphing next)
        (set-animation-next-proc~ morphing next-proc)
        (reset-transition~ morphing)
        (goto-frame~ morphing (or frame 0.)))))
  
  
  (method public (transition-morphing name (frame: frame #f) (speedup: speedup #f) (duration: duration #f) (elapsed: elapsed #f) (next: next #f) (next-proc: next-proc #f))
    (if (not morphing)
        (change-morphing name frame: frame speedup: speedup next: next)
      (let ((animation (require-animation~ (cache-model) name))
            (transition (get-transition~ morphing)))
        (if (not (get-transition~ morphing))
            (set-transition~ morphing (new Morphing animation speedup: speedup))
          (change-animation~ (get-transition~ morphing) animation speedup: speedup))
        (set-animation-next~ (get-transition~ morphing) next)
        (set-animation-next-proc~ (get-transition~ morphing) next-proc)
        (set-transition-frame~ morphing (or frame 0.))
        (set-transition-elapsed~ morphing (or elapsed 0.))
        (set-transition-duration~ morphing (or duration (get-default-transition-duration))))))
  
  
  (method public (free-morphing)
    (when morphing
      (unanimated)
      (set! morphing #f)))
  
  
  (method (animate elapse (position position)) ;; position is a quick hack for subentities like the vehicle
    (site (animate on?: #t)
      (when (and animations? (not (get-paused?~ (current-history))))
        (when (and animate? animated? morphing)
          (when (in-frustum?~ (or camera (current-camera)) position)
            (tick-animation elapse)))
        (when billboard
          (when (and (get-animate?~ billboard) (get-animated?~ billboard) (get-morphing~ billboard))
            (when (in-frustum?~ (or camera (current-camera)) position)
              (tick-animation~ billboard elapse)))))))
  
  
  (method protected virtual (animated)
    (set! animated? #t)
    (set! animation-tick animate)
    (register-tick~ (effective-parent) animation-tick))
  
  
  (method protected virtual (unanimated)
    (unregister-tick~ (effective-parent) animation-tick)
    (set! animation-tick #f)
    (set! animated? #f))
  
  
  (method (tick-animation elapse)
    (animate-morphing~ morphing elapse
      ;; update-morphing
      (lambda (new-morphing)
        (set! morphing new-morphing))
      ;; change-next
      (lambda (next)
        (change-morphing next))))
  
  
  (method (toggle-animated)
    (if animated?
        (unanimated)
      (animated)))
  
  
  (method (set-frame frame)
    (goto-frame~ morphing frame))))
