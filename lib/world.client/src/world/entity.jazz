;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Entities
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2016
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.entity jazz


(import (jazz.syntax (phase syntax))
        (world)
        (world.animation)
        (world.autoload)
        (world.billboard)
        (world.draw)
        (world.dyes)
        (world.element)
        (world.generate)
        (world.geometry)
        (world.history)
        (world.model)
        (world.overlay)
        (world.renderers)
        (world.support)
        (world.syntax (phase syntax)))


;;;
;;;; Entity
;;;


(class Entity extends Element
  
  
  (property model          <object> initialize #f     getter generate setter explicit)
  (property meshes-mask    <object> initialize #f     getter generate setter explicit)
  (property physical?      <bool>   initialize #f     accessors generate)
  (property animate?       <bool>   initialize #f     getter generate setter explicit)
  (property animation      <object> initialize "Idle" accessors generate)
  (property shaders        <object> initialize #f     getter generate setter explicit)
  
  
  (slot model-cache       <Model+>     initialize #f getter generate)
  (slot model-update      <procedure+> initialize #f accessors generate)
  (slot meshes            <object>     initialize #f accessors generate)
  (slot morphing          <Morphing+>  initialize #f getter generate)
  (slot animated?         <bool>       initialize #f getter generate)
  (slot animation-tick    <object>     initialize #f getter generate)
  (slot renderer          <object>     initialize #f accessors generate)
  (slot billboard         <object>     initialize #f getter generate)
  (slot billboard-texture <object>     initialize #f getter generate)
  (slot overlay           <f32vector>  initialize #f accessors generate)
  (slot camera            <object>     initialize #f accessors generate)
  
  
  (method override (prepare rest)
    (nextmethod rest)
    (set-color white-dye)
    (set-overlay (f32vector 1. 1. 1. 1.)))
  
  
  (method override (destroy)
    (free-morphing)
    (nextmethod))
  
  
  (method override (print output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{a} {a}" model (present-vertex position)))))
  
  
  (method public (set-model mdl)
    (if (is? mdl Model)
        (set-model-cache mdl)
      (set! model mdl)
      (set! model-cache #f)))
  
  
  (method protected virtual (call-model-update model)
    (when model-update
      (model-update self model)))
  
  
  (method (cache-model) <Model>
    (or model-cache
        (begin
          (set-model-cache (resolve-model))
          model-cache)))
  
  
  (method protected virtual (resolve-model) <Model>
    (let ((world (current-world)))
      (assert model)
      (find-model~ world model)))
  
  
  (method (set-model-cache model)
    (define (effective-meshes model)
      (let ((meshes (get-meshes~ model)))
        (if (not meshes-mask)
            meshes
          (list->vector (loop (for mesh in-vector meshes)
                              (for render? in meshes-mask)
                              (when render?
                                (collect mesh)))))))
    
    (set! model-cache model)
    (when model
      (set! meshes (effective-meshes model))
      (call-model-update model)
      (reset-radiuses)
      (update-matrix)
      (when (and animate? animations? (find-animation~ model animation))
        (setup-morphing animation))))
  
  
  (method public (change-model model (anchor? #t))
    (if (not anchor?)
        (set-model model)
      (let ((pos (position->anchor position)))
        (set-model model)
        (set-position (anchor->position pos)))))
  
  
  (method public (set-animate? value)
    (set! animate? value)
    (when (and animate? animations? (not morphing) model-cache (find-animation~ model-cache animation))
      (setup-morphing animation)))
  
  
  (method public (set-meshes-mask mask)
    (set! meshes-mask mask)
    (set! meshes #f)
    (set! model-cache #f))
  
  
  (method protected (entity-meshes)
    meshes)
  
  
  (method protected (entity-animate?)
    (and animate? animations? morphing))
  
  
  (method protected (metadata-install)
    (let ((scaling (model-metadata-scaling (get-metadata~ (cache-model)))))
      (when scaling
        (set-scaling scaling))))
  
  
  (method public virtual (set-shaders value)
    (set! shaders value)
    (set! renderer (and value (require-renderer value))))
  
  
  (method override (element-radiuses)
    (let ((model (cache-model)))
      (let ((bounds (get-bounds~ model)))
        (vertex* (vertex* (cuboid-radiuses bounds) scale) (get-scale~ model)))))
  
  
  (method override (effective-matrix&)
    (matrix-multiply& matrix (get-global-matrix~ (cache-model))))
  
  
  (method override (transformed-bounds)
    (parallelepiped-bounds (transformed-parallelepiped)))
  
  
  (method override (transformed-parallelepiped)
    (let ((model (cache-model)))
      (let ((matrix (effective-matrix&))
            (bounds (get-bounds~ model)))
        (transform-cuboid bounds matrix))))
  
  
  (method override (selection-bounds)
    (let ((model (cache-model)))
      (let ((bounds (get-bounds~ model)))
        (let ((radiuses (cuboid-radiuses bounds)))
          (let ((radius-x (max .25 (vertex-x radiuses)))
                (radius-z (max .25 (vertex-z radiuses))))
            (let ((left (- radius-x))
                  (right radius-x)
                  (bottom (min 0. (cuboid-bottom bounds)))
                  (top (cuboid-top bounds))
                  (back (- radius-z))
                  (front radius-z))
              (cuboid left bottom back right top front)))))))
  
  
  (method override (transformed-selection-bounds)
    (let ((model (cache-model)))
      (let ((matrix (effective-matrix&))
            (bounds (get-bounds~ model)))
        (let ((radiuses (cuboid-radiuses bounds)))
          (let ((radius-x (max .25 (vertex-x radiuses)))
                (radius-z (max .25 (vertex-z radiuses))))
            (let ((left (- radius-x))
                  (right radius-x)
                  (bottom (min 0. (cuboid-bottom bounds)))
                  (top (cuboid-top bounds))
                  (back (- radius-z))
                  (front radius-z))
              (transform-cuboid (cuboid left bottom back right top front) matrix)))))))
  
  
  (method override (transformed-center)
    (let ((model (cache-model)))
      (let ((matrix (effective-matrix&))
            (center (get-center~ model)))
        (matrix-transform-3x4 matrix center))))
  
  
  (method override (transformed-radiuses)
    (let ((model (cache-model)))
      (vertex* (vertex*& (if (equal? (get-name~ model) "frostsaber") ;; quick try
                             (vertex .7806182373315096 .7806182373315096 .7806182373315096)
                           (cuboid-radiuses (get-bounds~ model)))
                         scale)
               (get-scale~ model))))
  
  
  (method (transformed-height)
    (let ((model (cache-model)))
      (* (cuboid-height (get-bounds~ model))
         (vertex-y (get-scale~ model))
         (vertex-y scale))))
  
  
  (method override (element-polygons)
    (if (not physical?)
        (nextmethod)
      (let ((model (cache-model)))
        (polygons-extract self (get-polygons~ model) matrix))))
  
  
  ;;;
  ;;;; Bounds
  ;;;
  
  
  (method public (for-each-bounding-quad sphere-matrix poly proc)
    (let ((bounds (transformed-selection-bounds)))
      (iterate-parallelepiped-quads bounds sphere-matrix poly proc self)))
  
  
  ;;;
  ;;;; Anchor
  ;;;
  
  
  (method (position->anchor pos)
    (let ((model (cache-model)))
      (position->anchor~ model pos scale)))
  
  
  (method (anchor->position anchor)
    (let ((model (cache-model)))
      (anchor->position~ model anchor scale)))

  
  ;;;
  ;;;; Billboard
  ;;;
  
  
  (method public (set-billboard obj)
    (when billboard
      (close~ billboard))
    (set! billboard obj))
  
  
  (method public (set-billboard-texture obj)
    (when billboard-texture
      (close~ billboard-texture))
    (set! billboard-texture obj))
  
  
  (method protected virtual (cache-billboard)
    billboard)
  
  
  (method protected virtual (cache-billboard-texture)
    billboard-texture)
  
  
  (method (register-billboards)
    (let ((billboard (cache-billboard))
          (billboard-texture (cache-billboard-texture)))
      (when billboard
        (set-matrix~ billboard (billboard-matrix& self (+ (transformed-height) (if billboard-texture .3 0.))))
        (world.renderer:register-entity billboard))
      (when billboard-texture
        (set-matrix~ billboard-texture (billboard-matrix& self (+ (transformed-height) .2)))
        (world.renderer:register-texture-element billboard-texture))))

  
  ;;;
  ;;;; Draw
  ;;;
  
  
  (method override (draw-target color)
    (let ((bounds (selection-bounds)))
      (let ((matrix (matrix-multiply (effective-matrix&)
                                     (matrix-multiply (make-translation-matrix (vertex 0.
                                                                                       (case (get-anchor~ (cache-model))
                                                                                         ((origin) (/ (cuboid-height bounds) 2.))
                                                                                         (else 0.))
                                                                                       0.))
                                                      (make-scaling-matrix (cuboid-scale bounds))))))
        (render-cube matrix wire-color: color))))
  
  
  (method override (draw-target-circle)
    (let ((anchor (position->anchor position))
          (radius (/ (max .45 (target-radius)) 1.8)))
      (render-circle anchor radius purple-dye)))
  
  
  (method override (target-moveable?)
    (not physical?))
  
  
  ;;;
  ;;;; Sound
  ;;;
  
  
  (method (find-sound name)
    (let ((sounds (get-sounds~ (cache-model))))
      (when sounds
        (if (eq? sounds 'none)
            sounds
          (table-ref sounds name #f)))))
  
  
  (method (require-sound name)
    (or (find-sound name)
        (error "Unable to find sound: {s}" name)))
  
  
  ;;;
  ;;;; Animation
  ;;;
  
  
  (method (effective-parent)
    (or parent (current-zone)))
  
  
  (method public (setup-morphing (name #f))
    (when morphing
      (free-morphing))
    (change-morphing (or name "Idle"))
    (when (and morphing (not animated?))
      (animated)))
  
  
  (method public (change-morphing name (frame: frame #f) (next: next #f))
    (let ((animation (require-animation~ (cache-model) name)))
      (when (has-bones?~ animation)
        (if (not morphing)
            (set! morphing (new Morphing animation))
          (change-animation~ morphing animation))
        (set-animation-next~ morphing next)
        (reset-transition~ morphing)
        (goto-frame~ morphing (or frame 0.)))))
  
  
  (method public (transition-morphing name (frame: frame #f) (duration: duration #f) (elapsed: elapsed #f) (next: next #f))
    (if (not morphing)
        (change-morphing name)
      (let ((animation (require-animation~ (cache-model) name))
            (transition (get-transition~ morphing)))
        (if (not (get-transition~ morphing))
            (set-transition~ morphing (new Morphing animation))
          (change-animation~ (get-transition~ morphing) animation))
        (set-animation-next~ (get-transition~ morphing) next)
        (set-transition-frame~ morphing (or frame 0.))
        (set-transition-elapsed~ morphing (or elapsed 0.))
        (set-transition-duration~ morphing (or duration (get-default-transition-duration))))))
  
  
  (method public (free-morphing)
    (when morphing
      (unanimated)
      (set! morphing #f)))
  
  
  (method (animate elapse)
    (site (animate on?: #t)
      (when (and animations? (not (get-paused?~ (current-history))))
        (when (and animate? animated? morphing)
          (when (in-frustum?~ (or camera (current-camera)) position)
            (tick-animation elapse)))
        (when billboard
          (when (and (get-animate?~ billboard) (get-animated?~ billboard) (get-morphing~ billboard))
            (when (in-frustum?~ (or camera (current-camera)) position)
              (tick-animation~ billboard elapse)))))))
  
  
  (method protected virtual (animated)
    (set! animated? #t)
    (set! animation-tick animate)
    (register-tick~ (effective-parent) animation-tick))
  
  
  (method protected virtual (unanimated)
    (unregister-tick~ (effective-parent) animation-tick)
    (set! animation-tick #f)
    (set! animated? #f))
  
  
  (method (tick-animation elapse)
    (animate-morphing~ morphing elapse
      ;; update-morphing
      (lambda (new-morphing)
        (set! morphing new-morphing))
      ;; change-next
      (lambda (next)
        (change-morphing next))))
  
  
  (method (toggle-animated)
    (if animated?
        (unanimated)
      (animated)))
  
  
  (method (set-frame frame)
    (goto-frame~ morphing frame))))
