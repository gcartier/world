;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; World Entities
;;;


(module world.entity jazz


(import (jazz.jml)
        (jazz.graphic)
        (jazz.graphic.opengl.glew)
        (world)
        (world.autoload)
        (world.draw)
        (world.dye)
        (world.dyes)
        (world.element)
        (world.foreign)
        (world.foreign.obj)
        (world.geometry)
        (world.mesh)
        (world.shader)
        (world.syntax (phase syntax)))


;;;
;;;; Entity
;;;


(class Entity extends Element
  
  
  (property model  <object>    initialize #f accessors generate)
  (property matrix <f32vector> initialize (make-identity-matrix) getter generate)
  
  
  (method public (set-matrix mat)
    (matrix-copy! matrix mat))
  
  
  (method override (prepare rest)
    (nextmethod rest)
    (set-size (vertex 5. 5. 5.))
    (set-color white-dye))
  
  
  (method override (update-position)
    (nextmethod)
    (update-matrix))
  
  
  (method (update-matrix)
    (matrix-multiply! matrix (make-translation-matrix& (get-x) (get-y) (get-z)) (make-scaling-matrix& radius radius radius)))
  
  
  ;;;
  ;;;; Draw
  ;;;
  
  
  (method override (draw-3d-textured)
    (if (not model)
        (nextmethod)
      (draw-entity)))
  
  
  (method override (draw-3d)
    (if (not model)
        (nextmethod)
      (draw-entity)))
  
  
  (method (draw-entity)
    (let ((world (current-world)))
      (let ((mesh (get-mesh~ model))
            (program (find-mesh-program~ world (entity-program))))
        (use~ program)
        (entity-bind-uniforms program mesh matrix)
        ;(glDisable GL_DEPTH_TEST)
        ;(glEnable GL_CULL_FACE)
        ;(glCullFace GL_FRONT)
        ;(glFrontFace GL_CCW)
        (glEnable GL_ALPHA_TEST)
        (glAlphaFunc GL_GEQUAL .7)
        ;(glDisable GL_BLEND)
        (draw-mesh~ program mesh)
        (glDisable GL_ALPHA_TEST)
        ;(glDisable GL_CULL_FACE)
        ;(glEnable GL_DEPTH_TEST)
        ;(glEnable GL_BLEND)
        ;(glBlendFunc GL_SRC_ALPHA GL_ONE_MINUS_SRC_ALPHA)
        (unbind-uniforms~ program)
        (unuse~ program))))
  
  
  (method protected virtual (entity-program)
    'dynamic-phong)
  
  
  (method protected virtual (entity-bind-uniforms program mesh matrix)
    (bind-uniforms~ program mesh matrix))
  
  
  (method protected virtual (animate elapse)
    ))


;;;
;;;; Skeletal Entity
;;;


(define GAZOUM-FACTOR
  15.)

(define Quick-Hack-Matrices
  (let ((boneTransform (make-identity-matrix))
        (content (make-f32vector (* 200 16))))
    (loop (for i from 0 below 200)
          (loop (for j from 0 below 16)
                (f32vector-set! content (+ (* i 16) j) (f32vector-ref boneTransform j))))
    content))


(class Skeletal-Entity extends Entity
  
  
  (slot frame         initialize 0. getter generate)
  (slot frame-rate    initialize 0. getter generate)
  (slot bone-matrices initialize #f getter generate)
  (slot animate?      initialize #f accessors generate)
  
  
  (method override (finish rest)
    (nextmethod rest)
    (let ((world (current-world)))
      (register-tick~ world
        animate)))
  
  
  (method override (animate elapse)
    (when animate?
      (let ((new-frame (flmodulo (+ frame (* elapse GAZOUM-FACTOR)) 17.)))
        (set-frame new-frame))))
  
  
  (method public (set-frame frame)
    (set! frame~self frame)
    (set! bone-matrices (extract-bone-matrices)))
  
  
  (method (extract-bone-matrices)
    (let ((imported (get-imported~ model)))
      (SetFrame~ imported frame)
      (let ((joints (get-m_joints~ imported)))
        (let ((count (vector-length joints)))
          (let ((content (make-f32vector (* 200 16))))
            (loop (for i from 0 below count)
                  (let ((joint (vector-ref joints i)))
                    (let ((boneTransform (get-boneTransform~ joint)))
                      (loop (for j from 0 below 16)
                            (f32vector-set! content (+ (* i 16) j) (f32vector-ref boneTransform j))))))
            content)))))
  
  
  (method override (entity-program)
    'skeletal-phong)
  
  
  (method override (entity-bind-uniforms program mesh matrix)
    (bind-uniforms~ program mesh matrix (or bone-matrices Quick-Hack-Matrices)))))
