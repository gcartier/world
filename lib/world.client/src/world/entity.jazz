;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Entities
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2016
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.entity jazz


(import (jazz.graphic)
        (jazz.syntax (phase syntax))
        (world)
        (world.animation)
        (world.autoload)
        (world.billboard)
        (world.chunk)
        (world.configure)
        (world.console)
        (world.context)
        (world.draw)
        (world.dyes)
        (world.element)
        (world.expanse)
        (world.generate)
        (world.geometry)
        (world.history)
        (world.id)
        (world.model)
        (world.renderers)
        (world.scriptum)
        (world.section)
        (world.settings)
        (world.support)
        (world.syntax (phase syntax))
        (world.task))


;;;
;;;; Entity
;;;


(class Entity extends Element
  
  
  (method meta protected virtual (package self entity)
    (list (get-id entity) (get-name entity) (get-position entity) (get-lookat entity) (get-scale entity) (get-model entity) (get-script-text entity)))
  
  
  (method meta protected virtual (unpackage self info)
    (let ((game (current-game)))
      (bind (id name position lookat scale model script-text) info
        (apply-add-entity game self id name position lookat scale model script-text))))
  
  
  (property id             <object> initialize #f     accessors generate)
  (property model          <object> initialize #f     getter generate setter explicit)
  (property meshes-mask    <object> initialize #f     getter generate setter explicit)
  (property physical?      <bool>   initialize #f     accessors generate)
  (property animate?       <bool>   initialize #t     getter generate setter explicit)
  (property animation      <object> initialize "Idle" accessors generate)
  (property shaders        <object> initialize #f     getter generate setter explicit)
  
  
  (slot model-cache       <Model+>         initialize #f getter generate)
  (slot model-update      <procedure+>     initialize #f accessors generate)
  (slot meshes            <object>         initialize #f accessors generate)
  (slot morphing          <Morphing+>      initialize #f getter generate)
  (slot animated?         <bool>           initialize #f getter generate)
  (slot animation-tick    <object>         initialize #f getter generate)
  (slot renderer          <object>         initialize #f accessors generate)
  (slot billboard-state   <object>         initialize #f getter generate)
  (slot billboard-name    <object>         initialize #f getter generate)
  (slot billboard-script  <object>         initialize #f getter generate)
  (slot billboard-console <object>         initialize #f getter generate)
  (slot billboard-camera  <object>         initialize #f getter generate)
  (slot overlay           <dye>            initialize #f accessors generate)
  (slot camera            <object>         initialize #f accessors generate)
  (slot expanse           <Expanse+>       initialize #f accessors generate)
  (slot designer-chunk    <World-Chunk+>   initialize #f accessors generate)
  (slot task              <object>         initialize #f accessors generate)
  (slot output            <object>         initialize #f accessors generate)
  
  
  (method override (prepare self rest)
    (nextmethod self rest)
    (set-color self white-dye)
    (set-overlay self (f32vector 1. 1. 1. 1.)))
  
  
  (method override (finish self rest)
    (nextmethod self rest)
    (setup-id self))
  
  
  (method override (destroy self)
    (free-morphing self)
    (unregister-id self)
    (nextmethod self))
  
  
  (method override (print self output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{a} {a}" model (present-vertex position)))))
  
  
  (method override (update-element self old-position)
    (let ((zone (current-zone+)))
      (when (and zone expanse)
        (update-entity zone self old-position))))
  
  
  (method package (linked? self)
    (boolean expanse))
  
  
  (method protected virtual (setup-id self)
    (unless (and (backward-compatibility-inhibit-ids?) (not (f64vector? id)))
      (register-id self (or id (make-unique-id)))))
  
  
  (method package (register-id self id)
    (set! self.id id)
    (register-entity-id id self))
  
  
  (method (unregister-id self)
    (when id
      (unregister-entity-id id)))
  
  
  (method package virtual (simulated? self)
    #f)
  
  
  (method public (set-model self mdl)
    (assert (specified? mdl))
    (if (is? mdl Model)
        (set-model-cache self mdl)
      (set! model mdl)
      (set! model-cache #f)))
  
  
  (method protected virtual (call-model-update self model)
    (when model-update
      (model-update self model)))
  
  
  (method package (cache-model self) <Model>
    (or model-cache
        (begin
          (set-model-cache self (resolve-model self))
          model-cache)))
  
  
  (method package virtual (resolve-model self) <Model>
    (let ((world (current-world)))
      (assert model)
      (find-model world model)))
  
  
  (method (set-model-cache self model)
    (define (effective-meshes model)
      (let ((meshes (get-meshes model)))
        (if (not meshes-mask)
            meshes
          (list->vector (loop (for mesh in-vector meshes)
                              (for render? in meshes-mask)
                              (when render?
                                (collect mesh)))))))
    
    (set! model-cache model)
    (when model
      (set! meshes (effective-meshes model))
      (call-model-update self model)
      (reset-radiuses self)
      (update-matrix self)
      (when (and animate? animations? (find-animation model animation))
        (setup-morphing self animation))))
  
  
  (method public (change-model self model (anchor? #t))
    (if (not anchor?)
        (set-model self model)
      (let ((pos (position->anchor self position)))
        (set-model self model)
        (set-position self (anchor->position self pos)))))
  
  
  (method public (set-animate? self value)
    (set! animate? value)
    (when (and animate? animations? (not morphing) model-cache (find-animation model-cache animation))
      (setup-morphing self animation)))
  
  
  (method public (set-meshes-mask self mask)
    (set! meshes-mask mask)
    (set! meshes #f)
    (set! model-cache #f))
  
  
  (method package (entity-meshes self)
    meshes)
  
  
  (method package (entity-animate? self)
    (and animate? animations? morphing))
  
  
  (method package virtual (admin-me? self)
    #f)
  
  
  (method package (metadata-install self)
    (let ((scaling (model-metadata-scaling (get-metadata (cache-model self)))))
      (when scaling
        (set-scaling self scaling))))
  
  
  (method package (default-scaling self)
    (set-scaling self (or (model-metadata-scaling (get-metadata (cache-model self))) 1.)))
  
  
  (method public virtual (set-shaders self value)
    (set! shaders value)
    (set! renderer (and value (require-renderer value))))
  
  
  (method public virtual (entity-bounds self)
    (get-bounds (cache-model self)))
  
  
  (method override (element-radiuses self)
    (let ((model (cache-model self)))
      (let ((bounds (entity-bounds self)))
        (vertex* (vertex* (cuboid-radiuses bounds) scale) (get-scale model)))))
  
  
  (method override (effective-matrix& self)
    (matrix-multiply& matrix (get-global-matrix (cache-model self))))
  
  ;; aec quicky
  (method override (effective-matrix2& self)
    (matrix-multiply& matrix (get-global-matrix2 (cache-model self))))
  
  
  (method override (transformed-bounds self)
    (parallelepiped-bounds (transformed-parallelepiped self)))
  
  
  (method override (transformed-parallelepiped self)
    (let ((matrix (effective-matrix& self))
          (bounds (entity-bounds self)))
      (transform-cuboid bounds matrix)))
  
  
  (method override (selection-bounds self)
    (let ((bounds (entity-bounds self)))
      (let ((radiuses (cuboid-radiuses bounds)))
        (let ((radius-x (vertex-x radiuses))
              (radius-z (vertex-z radiuses)))
          (let ((left (- radius-x))
                (right radius-x)
                (bottom (min 0. (cuboid-bottom bounds)))
                (top (cuboid-top bounds))
                (back (- radius-z))
                (front radius-z))
            (cuboid left bottom back right top front))))))
  
  
  (method override (transformed-selection-bounds self)
    (let ((matrix (effective-matrix& self))
          (bounds (entity-bounds self)))
      (let ((radiuses (cuboid-radiuses bounds)))
        (let ((radius-x (max .25 (vertex-x radiuses)))
              (radius-z (max .25 (vertex-z radiuses))))
          (let ((left (- radius-x))
                (right radius-x)
                (bottom (min 0. (cuboid-bottom bounds)))
                (top (cuboid-top bounds))
                (back (- radius-z))
                (front radius-z))
            (transform-cuboid (cuboid left bottom back right top front) matrix))))))
  
  
  (method override (transformed-center self)
    (let ((model (cache-model self)))
      (let ((matrix (effective-matrix& self))
            (center (get-center model)))
        (matrix-transform-3x4 matrix center))))
  
  
  (method override (transformed-radiuses self)
    (let ((model (cache-model self)))
      ;; quick hack to paste the old code to fix the orb regression
      ;; as I dont feel like going through this logic at the moment
      (if (orb? (get-name model))
          (vertex* (vertex*& (cuboid-radiuses (entity-bounds self))
                             scale)
                   (get-scale model))
        ;; aec quicky
        (vertex-abs (matrix-transform (get-global-matrix2 model)
                                      (vertex*& (vertex*& (cuboid-radiuses (entity-bounds self))
                                                          scale)
                                                (get-scale model)))))))
  
  
  (method (transformed-height self)
    (let ((model (cache-model self)))
      (* (cuboid-height (entity-bounds self))
         (vertex-y (get-scale model))
         (vertex-y scale))))
  
  
  (method override (element-polygons self)
    (if (not physical?)
        (nextmethod self)
      (let ((model (cache-model self)))
        (polygons-extract self (get-polygons model) matrix))))


  (method package (adjust-motion-target self)
    (let ((motion (current-motion)))
      (when (eq? (motion-target motion) self)
        (without-roll self
          (lambda ()
            (eye-center-player motion))))))
  
  
  ;;;
  ;;;; Bounds
  ;;;
  
  
  (method public (for-each-bounding-quad$ self sphere-matrix proc)
    (let ((bounds (transformed-selection-bounds self)))
      (iterate-parallelepiped-quads$ bounds sphere-matrix proc self)))
  
  
  ;;;
  ;;;; Anchor
  ;;;
  
  
  (method package (position->anchor self pos)
    (let ((model (cache-model self)))
      (position->anchor model pos scale)))
  
  
  (method package (anchor->position self anchor)
    (let ((model (cache-model self)))
      (anchor->position model anchor scale)))

  
  ;;;
  ;;;; Script
  ;;;
  
  
  (method public (get-script self)
    (find-type self world.scripter:Script))
  
  
  (method public (get-script-text self)
    (let ((script (get-script self)))
      (and script (get-text script))))
  
  
  (method package virtual (run-task self script)
    (when script
      (task-start self script)))
  
  
  (method package virtual (cease-entity self)
    (when task
      (cease-task task)))
  
  
  (method protected virtual (task-start self script)
    (let ((procedure
            (lambda (task)
              (task-run self task script))))
      (let ((task (new Task (task-name self) procedure)))
        (set-task self task)
        (start-task task)
        (thread-base-priority-set! (get-thread task) (task-priority self)))))
  
  
  (method protected virtual (task-name self)
    'entity)
  
  
  (method protected virtual (task-priority self)
    entity-priority)
  
  
  (method package virtual (task-run self task script)
    (with-script-task task
      (lambda (exit)
        (run-script script task exit))))
  
  
  (method package virtual (startup self)
    )
  
  
  (method package virtual (fallthrough self)
    (handle-events self))
  
  
  (method package (handle-events self)
    (let ((script (get-script self)))
      (assert script)
      (let (loop)
        (let ((event (wait-event script)))
          (event (current-exit))
          (loop)))))


  (method package (handle-event self)
    (let ((script (get-script self)))
      (when script
        (let ((event (dequeue-event script)))
          (when event
            (event (current-exit)))))))
  
  
  (method package (handle-one-event self script event)
    (cond ((and (pair? event)
                (eq? (car event) 'evaluate))
           (evaluate-script script (cdr event)))
          (else
           (case event
             ((interact)
              (let ((handler (get-interact script)))
                (parameterize ((%%current-event (new Script-Event self (current-seconds))))
                  (handler self))))
             ((double-click)
              (let ((handler (get-double-click script)))
                (parameterize ((%%current-event (new Script-Event self (current-seconds))))
                  (handler self))))
             ((toggle-paused)
              (%%toggle-paused))))))
  
  
  (method package (evaluate-script self script)
    (if (not task)
        (run-task self script)
      (enqueue-event script (cons 'evaluate self))))

  
  ;;;
  ;;;; Billboard
  ;;;
  
  
  (method public (set-billboard-state self obj)
    (when billboard-state
      (close billboard-state))
    (set! billboard-state obj))
  
  
  (method (cache-billboard-state self)
    (let ((script (get-script self)))
      (if (not script)
          billboard-state
        (and (not (user?))
             (and interface-script?
                  (let ((state (get-state script)))
                    (if (and billboard-state (or (eq? (get-state billboard-state) state)
                                                 ;; reduce state change flicker
                                                 @wait-seems-worse-at-the-moment!
                                                 (let ((time (get-state-time script)))
                                                   (and time
                                                        (< (- (current-seconds) time) .05)))))
                        billboard-state
                      (let ((board (make-billboard script)))
                        (set-billboard-state self board)
                        board))))))))
  
  
  (method public (set-billboard-name self name (color: color #f))
    (when billboard-name
      (close billboard-name))
    (set! billboard-name (and name (make-billboard-name (list name {Font font-name: tahoma point-size: 36 hint-style: slight hint-metrics: on} (or color {Color World-Green}) .25)))))
    
  
  (method public (activate-billboard-script self)
    (when billboard-script
      (close billboard-script))
    (set! billboard-script (make-billboard-script self '())))
    
  
  (method public (deactivate-billboard-script self)
    (when billboard-script
      (close billboard-script))
    (set! billboard-script #f))

  
  (method public (set-billboard-console self message (size: size #f))
    (when billboard-console
      (close billboard-console))
    (if (not message)
        (set! billboard-console #f)
      (set! billboard-console (make-billboard-console self (list message size)))))
  
  
  (method public (update-output-billboard self)
    (if output
        (set-billboard-console self (get-content output) size: (get-size output))
      (set-billboard-console self #f)))
  
  
  (method public (set-billboard-camera self info)
    (if (not info)
        (set! billboard-camera #f)
      (set! billboard-camera (world.video:make-billboard-camera info))))
  
  
  (method public (cache-billboard-camera self info)
    (or billboard-camera
        (begin
          (set-billboard-camera self info)
          billboard-camera)))
  
  
  (method package virtual (register-billboards self)
    (let ((billboard-state (cache-billboard-state self))
          (billboard-element (or billboard-name billboard-script billboard-console)))
      (when billboard-state
        (set-matrix billboard-state (billboard-matrix& self (+ (transformed-height self) (if billboard-element (billboard-top billboard-element) -.1))))
        (world.renderer:register-entity billboard-state))
      (when (and billboard-name (get-render? billboard-name))
        (set-matrix billboard-name (billboard-matrix& self (+ (transformed-height self) (billboard-center billboard-name))))
        (world.renderer:register-texture-element billboard-name))
      @w
      (when (and billboard-script (get-render? billboard-script))
        (set-matrix billboard-script (entity-matrix& self (+ (transformed-height self) (billboard-center billboard-script))))
        (world.renderer:register-console-element billboard-script))
      (when (and billboard-console (get-render? billboard-console))
        (set-matrix billboard-console @w (console-matrix self) (billboard-matrix& self (+ (transformed-height self) (billboard-center billboard-console))))
        (world.renderer:register-console-element billboard-console))
      (when (and billboard-camera (get-render? billboard-camera))
        (set-matrix billboard-camera (billboard-matrix& self (+ (transformed-height self) (billboard-center billboard-camera))))
        (world.renderer:register-texture-element billboard-camera))))

  
  ;;;
  ;;;; Draw
  ;;;
  
  
  (method override (draw-target self color)
    (draw-bounds self color))
  
  
  (method override (draw-target-circle self)
    (let ((anchor (position->anchor self position))
          (radius (/ (max .45 (target-radius self)) 1.8)))
      (render-circle anchor radius purple-dye)))
  
  
  (method override (target-moveable? self)
    (not physical?))
  
  
  (method (draw-bounds self color)
    (let ((bounds (selection-bounds self)))
      ;; aec quicky
      (let ((matrix (matrix-multiply& (effective-matrix2& self)
                                      (make-translation-matrix (vertex 0.
                                                                       (case (get-anchor (cache-model self))
                                                                         ((origin) (/ (cuboid-height bounds) 2.))
                                                                         (else 0.))
                                                                       0.))
                                      (make-scaling-matrix (cuboid-radiuses bounds)))))
        (render-cube matrix wire-color: color))))
  
  
  ;; useful to debug collisions
  (method (draw-collision-bounds self color)
    (let ((matrix (matrix-multiply& (make-translation-matrix (transformed-center self))
                                    (make-lookat-matrix lookat)
                                    (make-scaling-matrix (transformed-radiuses self)))))
      (render-cube matrix wire-color: color)))
  
  
  ;;;
  ;;;; Sound
  ;;;
  
  
  (method (find-sound self name)
    (let ((sounds (get-sounds (cache-model self))))
      (when sounds
        (if (eq? sounds 'none)
            sounds
          (table-ref sounds name #f)))))
  
  
  (method (require-sound self name)
    (or (find-sound self name)
        (error "Unable to find sound: {s}" name)))
  
  
  ;;;
  ;;;; Animation
  ;;;
  
  
  (method (effective-parent self)
    (if (or (not parent)
            (is? parent Chunk-Container))
        (current-zone)
      parent))
  
  
  (method public (setup-morphing self (name #f))
    (when morphing
      (free-morphing self))
    (change-morphing self (or name "Idle"))
    (when (and morphing (not animated?))
      (animated self)))
  
  
  (method public (change-morphing self name (frame: frame #f) (speedup: speedup #f) (next: next #f) (next-proc: next-proc #f))
    (let ((animation (require-animation (cache-model self) name)))
      (when (has-bones? animation)
        (if (not morphing)
            (set! morphing (new Morphing animation speedup: speedup))
          (change-animation morphing animation speedup: speedup))
        (set-animation-next morphing next)
        (set-animation-next-proc morphing next-proc)
        (reset-transition morphing)
        (goto-frame morphing (or frame 0.)))))
  
  
  (method public (transition-morphing self name (frame: frame #f) (speedup: speedup #f) (duration: duration #f) (elapsed: elapsed #f) (next: next #f) (next-proc: next-proc #f))
    (if (not morphing)
        (change-morphing self name frame: frame speedup: speedup next: next)
      (let ((animation (require-animation (cache-model self) name))
            (transition (get-transition morphing)))
        (if (not (get-transition morphing))
            (set-transition morphing (new Morphing animation speedup: speedup))
          (change-animation (get-transition morphing) animation speedup: speedup))
        (set-animation-next (get-transition morphing) next)
        (set-animation-next-proc (get-transition morphing) next-proc)
        (set-transition-frame morphing (or frame 0.))
        (set-transition-elapsed morphing (or elapsed 0.))
        (set-transition-duration morphing (or duration (get-default-transition-duration))))))
  
  
  (method public (free-morphing self)
    (when morphing
      (unanimated self)
      (set! morphing #f)))
  
  
  (method package (animate self elapse (position position)) ;; position is a quick hack for subentities like the vehicle
    (site (animate on?: #t)
      (when (and animations? (not (get-paused? (current-history))))
        (when (and animate? animated? morphing)
          (when (in-frustum? (or camera (current-camera)) position)
            (tick-animation self elapse)))
        (when billboard-state
          (when (and (get-animate? billboard-state) (get-animated? billboard-state) (get-morphing billboard-state))
            (when (in-frustum? (or camera (current-camera)) position)
              (tick-animation billboard-state elapse)))))))
  
  
  (method protected virtual (animated self)
    (set! animated? #t)
    (set! animation-tick (~ animate self))
    (register-tick (effective-parent self) animation-tick))
  
  
  (method protected virtual (unanimated self)
    (unregister-tick (effective-parent self) animation-tick)
    (set! animation-tick #f)
    (set! animated? #f))
  
  
  (method package (tick-animation self elapse)
    (animate-morphing morphing elapse
      ;; update-morphing
      (lambda (new-morphing)
        (set! morphing new-morphing))
      ;; change-next
      (lambda (next)
        (change-morphing self next))))
  
  
  (method (toggle-animated self)
    (if animated?
        (unanimated self)
      (animated self)))
  
  
  (method (set-frame self frame)
    (goto-frame morphing frame))))
