;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Shader
;;;


(module world.shader jazz


(import (jazz.geometry)
        (jazz.graphic)
        (jazz.graphic.opengl.glew)
        (jazz.io)
        (jazz.library)
        (jazz.literals)
        (jazz.media)
        (jazz.network)
        (jazz.platform)
        (jazz.platform.cairo)
        (jazz.runtime)
        (jazz.system)
        (jazz.ui)
        (jazz.ui.dialog)
        (jazz.ui.window)
        (world.foreign)
        (time))


;;;
;;;; Default shaders
;;;


(definition public default-vs
  #<<SHADER
#version 120

void main()
{
    gl_Position = ftransform();
}
SHADER
)


(definition public default-fs
  #<<SHADER
#version 120
 
void main()
{
    gl_FragColor = vec4(1.0,1.0,1.0,1.0);
}
SHADER
)


(definition public phong-vs
  #<<SHADER
#version 120

varying vec3 N, L0, L1, L2, L3, L4, v;
attribute vec3 v_coord;
attribute vec3 v_coordtex;
attribute vec3 norm;
uniform sampler2D block_texture;
varying vec2 f_texcoord;

void main()
{	
	N = gl_NormalMatrix * norm;

	v = vec3(gl_ModelViewMatrix * vec4(v_coord,1.0));

	L0 = vec3(gl_LightSource[0].position.xyz - v);
    L1 = vec3(gl_LightSource[1].position.xyz - v);

	gl_Position = gl_ModelViewProjectionMatrix * vec4(v_coord,1.0);
    f_texcoord = v_coordtex.xy;
}

SHADER
)

(definition public phong-fs
  #<<SHADER
#version 120

varying vec3 N, L0, L1, L2, L3, L4, v;
uniform sampler2D block_texture;
varying vec2 f_texcoord;

void main (void)
{
	vec4 final_color =  
	((gl_LightSource[0].ambient + gl_LightSource[1].ambient)*0.5 * texture2D(block_texture, f_texcoord));
							
	vec3 N = normalize(N);
	vec3 L0 = normalize(L0);
    vec3 L1 = normalize(L1);
	vec3 eyes = -v;
	
	float lambertTerm = dot(N,L0);
	
	if(lambertTerm > 0.0)
	{
		final_color += gl_LightSource[0].diffuse * 
                       texture2D(block_texture, f_texcoord) *
		               lambertTerm;	
		
		vec3 E = normalize(eyes);
		vec3 R = reflect(-L0, N);
		float specular = pow( max(dot(R, E), 0.0), 
		                 200);
		final_color += (gl_LightSource[0].specular) * 
		               specular;
	}
 
 	lambertTerm = dot(N,L1);
	
	if(lambertTerm > 0.0)
	{
		final_color += gl_LightSource[1].diffuse * 
                       texture2D(block_texture, f_texcoord) *
		               lambertTerm;	
		
		vec3 E = normalize(eyes);
		vec3 R = reflect(-L1, N);
		float specular = pow( max(dot(R, E), 0.0), 
		                 200);
		final_color += (gl_LightSource[1].specular) * 
		               specular;
	}


	gl_FragColor = final_color;			
}

SHADER
  )


;;;
;;;; Shader
;;;


(class Shader extends Object
  
  
  (slot type       <int>    initialize #f    accessors generate)
  (slot code                initialize #f    accessors generate)
  (slot shaderid            initialize #f    accessors generate) 
  
  
  (method public (create-shader)
    (set! shaderid (glCreateShader type))
    (glShaderSource shaderid 1 (list code) #f))
  
  
  (method public (compile-shader)
    (glCompileShader shaderid)
    (let ((loglength (glGetShaderiv* shaderid GL_INFO_LOG_LENGTH)))
      (when (> loglength 1)
        (error (glGetInfoLogARB* shaderid loglength))))))


;;;
;;;; Shader-Program
;;;


(class Shader-Program extends Object
  
  
  (slot vertex-shader   <object> initialize #f accessors generate)
  (slot fragment-shader <object> initialize #f accessors generate) 
  (slot program                  initialize #f accessors generate)
  
  
  (method override (initialize)
    (nextmethod)
    (set! vertex-shader~self (new Shader))
    (set-type~ vertex-shader GL_VERTEX_SHADER)
    (set! fragment-shader~self (new Shader))
    (set-type~ fragment-shader GL_FRAGMENT_SHADER)
    (create-program))
  
  
  (method public (set-fs code)
    (set-code~ fragment-shader code))
  
  (method public (set-vs code)
    (set-code~ vertex-shader code))
  
  
  (method public (create-attach)
    (create-shaders)
    (attach-shaders))
  
  
  (method public (create-shaders)
    (create-shader~ vertex-shader)
    (create-shader~ fragment-shader)
    (compile-shader~ vertex-shader)
    (compile-shader~ fragment-shader))
  
  
  (method public (create-program)
    (set! program (glCreateProgram)))
  
  
  (method public (attach-shaders)
    (when (and (get-shaderid~ vertex-shader)
               (get-shaderid~ fragment-shader))
      (glAttachShader program (get-shaderid~ vertex-shader))
      (glAttachShader program (get-shaderid~ fragment-shader))
      (glLinkProgram program)))
  
  
  (method public (detach-shaders)
    (when (and (get-shaderid~ vertex-shader)
               (get-shaderid~ fragment-shader))
      (glDetachShader program (get-shaderid~ vertex-shader))
      (glDetachShader program (get-shaderid~ fragment-shader))))
  
  
  (method public (activate)
    (glUseProgram program))
  
  
  (method public (deactivate)
    (glUseProgram 0))))
