;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Shader
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2013
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.shader jazz


(import (jazz.graphic.opengl.glew)
        (world)
        (world.foreign))


;;;
;;;; Shader
;;;


(class Shader extends Object
  
  
  (slot type     <int>               accessors generate)
  (slot code           initialize #f accessors generate)
  (slot shaderid       initialize #f accessors generate)
  
  
  (method override (initialize type)
    (set! type~self type))
  
  
  (method public (create-shader)
    (set! shaderid (glCreateShader type))
    (glShaderSource shaderid 1 (list code) #f))
  
  
  (method public (compile-shader)
    (glCompileShader shaderid)
    (when (/= (glGetShaderiv* shaderid GL_COMPILE_STATUS) GL_TRUE)
      (let ((loglength (glGetShaderiv* shaderid GL_INFO_LOG_LENGTH)))
        (when (> loglength 1)
          (error "{a}" (glGetInfoLogARB* shaderid loglength)))))))


;;;
;;;; Shader-Program
;;;


(class Shader-Program extends Object
  
  
  (slot name            <object> getter generate)
  (slot vertex-shader   <object> accessors generate)
  (slot fragment-shader <object> accessors generate)
  (slot program         <object> accessors generate)
  (slot uniforms        <object> getter generate)
  (slot attributes      <object> getter generate)
  
  
  (method override (initialize (name: name #f))
    (nextmethod)
    (set! name~self name)
    (set! vertex-shader (new Shader GL_VERTEX_SHADER))
    (set! fragment-shader (new Shader GL_FRAGMENT_SHADER))
    (set! program (glCreateProgram))
    (set! uniforms (make-table test: equal?))
    (set! attributes (make-table test: equal?))
    (prepare)
    (gl-check-error))
  
  
  (method protected virtual (prepare)
    )
  
  
  (method protected virtual (default-vertex-shader)
    )
  
  (method protected virtual (default-fragment-shader)
    )
  
  
  (method public (set-fs code)
    (set-code~ fragment-shader code))
  
  (method public (set-vs code)
    (set-code~ vertex-shader code))
  
  
  (method public (link)
    (create-shaders)
    (attach-shaders))
  
  
  (method public (relink)
    (detach-shaders)
    (set-vs (default-vertex-shader))
    (set-fs (default-fragment-shader))
    (prepare))
  
  
  (method public (create-shaders)
    (create-shader~ vertex-shader)
    (create-shader~ fragment-shader)
    (compile-shader~ vertex-shader)
    (compile-shader~ fragment-shader))
  
  
  (method public (attach-shaders)
    (when (and (get-shaderid~ vertex-shader)
               (get-shaderid~ fragment-shader))
      (glAttachShader program (get-shaderid~ vertex-shader))
      (glAttachShader program (get-shaderid~ fragment-shader))
      (glLinkProgram program)
      (when (/= (glGetProgramiv* program GL_LINK_STATUS) GL_TRUE)
        (let ((loglength (glGetProgramiv* program GL_INFO_LOG_LENGTH)))
          (when (> loglength 1)
            (error "{a}" (glGetInfoLogARB* program loglength)))))))
  
  
  (method public (detach-shaders)
    (when (and (get-shaderid~ vertex-shader)
               (get-shaderid~ fragment-shader))
      (glDetachShader program (get-shaderid~ vertex-shader))
      (glDetachShader program (get-shaderid~ fragment-shader))))
  
  
  (method public (use)
    (glUseProgram program))
  
  
  (method public (unuse)
    (glUseProgram 0))
  
  
  ;;;
  ;;;; Uniforms
  ;;;
  
  
  (method public (get-uniform name)
    (table-ref uniforms name))
  
  
  (method public (add-uniform name)
    (let ((location (glGetUniformLocation* program name)))
      (when validate-shaders?
        (assert (/= location -1)))
      (table-set! uniforms name location)
      location))
  
  
  ;;;
  ;;;; Attributes
  ;;;
  
  
  (method public (get-attribute name)
    (table-ref attributes name))
  
  
  (method public (add-attribute name)
    (let ((location (glGetAttribLocation* program name)))
      (when validate-shaders?
        (assert (/= location -1)))
      (table-set! attributes name location)
      location))))
