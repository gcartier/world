;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Shader
;;;


(module world.shader jazz


(import (jazz.geometry)
        (jazz.graphic)
        (jazz.graphic.opengl.glew)
        (jazz.io)
        (jazz.library)
        (jazz.literals)
        (jazz.media)
        (jazz.network)
        (jazz.platform)
        (jazz.platform.cairo)
        (jazz.runtime)
        (jazz.system)
        (jazz.ui)
        (jazz.ui.dialog)
        (jazz.ui.window)
        (world.foreign)
        (time))


;;;
;;;; Default shaders
;;;


(definition public default-vs
  #<<SHADER
#version 120

void main()
{
    gl_Position = ftransform();
}
SHADER
)


(definition public default-fs
  #<<SHADER
#version 120
 
void main()
{
    gl_FragColor = vec4(1.0,1.0,1.0,1.0);
}
SHADER
)


;;;
;;;; Shader
;;;


(class Shader extends Object
  
  
  (slot type       <int>    initialize #f    accessors generate)
  (slot code                initialize #f    accessors generate)
  (slot shaderid            initialize #f    accessors generate) 
  
  
  (method public (create-shader)
    (set! shaderid (glCreateShader type))
    (glShaderSource shaderid 1 (list code) #f))
  
  
  (method public (compile-shader)
    (glCompileShader shaderid)
    (let ((loglength (glGetShaderiv* shaderid GL_INFO_LOG_LENGTH)))
      (when (> loglength 1)
        (error (glGetInfoLogARB* shaderid loglength))))))


;;;
;;;; Shader-Program
;;;


(class Shader-Program extends Object
  
  
  (slot vertex-shader   <object> initialize #f accessors generate)
  (slot fragment-shader <object> initialize #f accessors generate) 
  (slot program                  initialize #f accessors generate)
  
  
  (method override (initialize)
    (nextmethod)
    (set! vertex-shader~self (new Shader))
    (set-type~ vertex-shader GL_VERTEX_SHADER)
    (set! fragment-shader~self (new Shader))
    (set-type~ fragment-shader GL_FRAGMENT_SHADER)
    (create-program))
  
  
  (method public (set-fs code)
    (set-code~ fragment-shader code))
  
  (method public (set-vs code)
    (set-code~ vertex-shader code))
  
  
  (method public (create-attach)
    (create-shaders)
    (attach-shaders))
  
  
  (method public (create-shaders)
    (create-shader~ vertex-shader)
    (create-shader~ fragment-shader)
    (compile-shader~ vertex-shader)
    (compile-shader~ fragment-shader))
  
  
  (method public (create-program)
    (set! program (glCreateProgram)))
  
  
  (method public (attach-shaders)
    (when (and (get-shaderid~ vertex-shader)
               (get-shaderid~ fragment-shader))
      (glAttachShader program (get-shaderid~ vertex-shader))
      (glAttachShader program (get-shaderid~ fragment-shader))
      (glLinkProgram program)))
  
  
  (method public (detach-shaders)
    (when (and (get-shaderid~ vertex-shader)
               (get-shaderid~ fragment-shader))
      (glDetachShader program (get-shaderid~ vertex-shader))
      (glDetachShader program (get-shaderid~ fragment-shader))))
  
  
  (method public (activate)
    (glUseProgram program))
  
  
  (method public (deactivate)
    (glUseProgram 0))))
