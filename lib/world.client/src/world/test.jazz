;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; World Tests
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2013
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.test jazz


(import (jazz.graphic)
        (jazz.graphic.opengl.autoload)
        (jazz.graphic.opengl.glew)
        (jazz.library)
        (jazz.ui)
        (jazz.ui.view)
        (jazz.ui.window)
        (world)
        (world.autoload)
        (world.block)
        (world.collision)
        (world.entity)
        (world.generate)
        (world.geometry)
        (world.interface)
        (world.interface.inventory)
        (world.interface.menu)
        (world.light)
        (world.mark)
        (world.material)
        (world.mesh)
        (world.model)
        (world.movement)
        (world.player)
        (world.profiling)
        (world.syntax (phase syntax)))


(proclaim (warn optimizations))


;;;
;;;; Memory
;;;


(definition (aaa)
  (with-memory 'aaa
    (lambda (thunk)
      (thunk))
    (lambda ()
      #f)))


(definition bbb
  (let ((before (make-f64vector 1))
        (after (make-f64vector 1)))
    (lambda ()
      (bytes-allocated! before)
      (aaa)
      (bytes-allocated! after)
      (- (f64vector-ref after 0) (f64vector-ref before 0)))))


(definition (sss)
  (let ((site <Call-Site> (static (register-site 'sss))))
    ((get-procedure~ site)
     (lambda ()
       #f))))


(definition ttt
  (let ((before (make-f64vector 1))
        (after (make-f64vector 1)))
    (lambda ()
      (bytes-allocated! before)
      (sss)
      (bytes-allocated! after)
      (- (f64vector-ref after 0) (f64vector-ref before 0)))))


(definition (foo)
  (site foo
    #f))


(definition (bar)
  (site bar
    (foo)))


(definition (baz)
  (site baz
    (bar)))


(definition test
  (let ((before (make-f64vector 1))
        (after (make-f64vector 1)))
    (lambda ()
      (bytes-allocated! before)
      (loop (for i from 0 below 10000)
           (baz))
      (bytes-allocated! after)
      (- (f64vector-ref after 0) (f64vector-ref before 0)))))


;(setup-memory 'aaa)
;(debug (bbb))
;(debug (bbb))
;(debug (bbb))

;(advise-memory :sss)
;(debug (ttt))
;(debug (ttt))
;(debug (ttt))

;(advise-memory :foo)
;(advise-memory :bar)
;(advise-memory :baz)
;(debug (test))
;(debug (test))
;(debug (test))


(define vec (make-vector 10000))

(define (yoloop v)
  (loop (for n in-vector v)
        n))

(time (yoloop vec))


;;;
;;;; Outline
;;;


@outline (
(native testnative)
(native jazz:testjazznative)

(native-syntax testnativesyntax)
(native-syntax jazz:testjazznativesyntax)


(export testexport)

(define (testexport)
  'export)

(definition (testprivate)
  'private)

(definition private (testprivate2)
  'private2)

(definition protected (testprotected)
  'protected)

(definition package (testpackage)
  'package)

(definition public (testopt (o 2))
  'opt)

(definition public (testkey (k: k 2))
  'key)

(definition package (testtypes x <fx>) <fl>
  'types)

(interface TestI)
(interface TestJ extends TestI)
(interface TestK extends (TestI TestJ))

(class TestX extends Object implements (TestI TestJ TestK))
(class TestY extends TestX implements TestI
  
  (method meta public (metafoo)
    'metafoo)
  
  (slot a)
  (slot b <fx>)
  (slot c <fl> accessors generate)
  (slot d <fl> getter generate setter explicit)
  (method public (foo)
    'foo)
  (method public (goo) <symbol>
    'goo)))


;;;
;;;; Memory
;;;


@memory
(let ((el (new Block)))
  (time
    (let ((x (+ 2. 1.)))
      #f))
  (time
    (let ((x (+ (get-x~ el) 1.)))
      #f)))


;;;
;;;; Optimizations
;;;


@optimizations (
(vertex 0. 0. 0.)
(make-f64vector 5)
(+ (f64vector-length (make-f64vector 5)) 2)
(f64vector-ref (make-f64vector 5) 2))


;;;
;;;; Types
;;;


@types (
(let ((world (current-world)))
  (rotate-left~ world))

(let ((world (current-world)))
  (+ (get-width~ world) 1.))))
