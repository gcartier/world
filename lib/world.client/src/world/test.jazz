;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; World Tests
;;;


(module world.test jazz


(import (jazz.graphic)
        (jazz.library)
        (jazz.ui)
        (jazz.ui.view)
        (jazz.ui.window)
        (world)
        (world.entity)
        (world.generate)
        (world.geometry)
        (world.light)
        (world.material)
        (world.mesh)
        (world.model))


;;;
;;;; Test
;;;


(definition public (test1-world)
  )


(definition public (test2-world)
  (debug (get-focus)))


(definition public (test3-world)
  (let ((mesh (generate-sphere 5. 5.)))
      (set-material~ mesh (new Material texture: (find-texture~ world "scoopi.png")))
      (let ((entity (new Entity x: 0. y: 0. z: 0.)))
        (set-model~ entity (new Model mesh: mesh))
        (set-matrix~ entity (make-scaling-matrix 100. 100. 100.))
        (add-element~ zone entity))))


(definition public (test4-world)
  (let ((mesh (generate-sphere 5. 5.))
          (x (get-x~ me))
          (y (get-y~ me))
          (z (get-z~ me)))
      (set-material~ mesh (new Material texture: (find-texture~ world "dirty.png")))
      (let ((entity (new Entity x: x y: y z: z)))
        (set-model~ entity (new Model mesh: mesh))
        (set-matrix~ entity (matrix-multiply (make-translation-matrix x y z) (vertex-x (make-scaling-matrix 10. 10. 10.))))
        (add-element~ zone entity))))


(definition public (test5-world)
  )


(definition public (test6-world)
  )


(definition public (test7-world)
  )


(definition public (test8-world)
  )


(definition public (test9-world)
  (iterate-table (get-sectors~ zone)
    (lambda (index sector)
      (set-lightmap-uptodate?~ sector #f))))


(definition public (test0-world)
  )


;;;
;;;; Collision
;;;


(import (world.collision)
        (world.geometry)
        (world.plane)
        (world.polygon))


(define (polygon . vertices)
  (bind (v1 v2 v3) vertices
    (new Polygon vertices (new Plane
                            (triangle-center v1 v2 v3)
                            (plane-normal v1 v2 v3)))))


(definition public (test)
  (let ((sphere-radius 1.)
        (polygon-list (list (polygon (vertex 0. 0. 0.) (vertex 5. 0. 0.) (vertex 2.5 2.5 -5.5))))
        (movement (new Movement (vertex 0.0 0.5 5.) (vertex 0. 0. -10.)))
        (last-direction #f)
        (filter-pulse-jumps #f))
    (debug sphere-radius: sphere-radius)
    (debug polygon-list: polygon-list)
    (debug movement: movement)
    (receive (cl hit) (collide-and-slide sphere-radius
                                         polygon-list
                                         movement
                                         last-direction
                                         filter-pulse-jumps)
      (debug 'cl '-> cl)
      (debug 'hit '-> hit)))))
