;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; World Tests
;;;


(module world.test jazz


(import (jazz.graphic)
        (jazz.library)
        (jazz.ui)
        (jazz.ui.view)
        (jazz.ui.window)
        (world)
        (world.collision)
        (world.entity)
        (world.generate)
        (world.geometry)
        (world.interface)
        (world.interface.inventory)
        (world.interface.menu)
        (world.light)
        (world.mark)
        (world.material)
        (world.mesh)
        (world.model)
        (world.player))


;;;
;;;; Test
;;;


(definition public (test1-world)
  (reset-marks~ zone)
  (let ((elapse 1.1))
    (let ((position (get-position~ me))
          (velocity (get-velocity~ me))
          (factor (* elapse 65)))
      (let ((new-position (vertex+ position (vertex-scalar* (get-sight~ (get-lookat~ me)) (* factor (mount-speed~ world))))))
        (let ((mvt (new Movement (copy-vertex (get-position~ me)) (vertex- new-position position))))
          @w
          (set-marks~ zone (list (new Mark (get-origin~ mvt))
                                 (new Mark (end~ mvt))))
         (receive (cl hit) (collide-and-slide 1.
                                               mvt
                                               #f
                                               #f)
           @w
           (if (null? cl)
               (reset-marks~ zone)
             (set-marks~ zone (list (new Mark hit))))
           ;(debug cl)
           ;(debug hit)
           (display-message~ world (format "{a}" (length (or cl '()))))
           @w
           (debug cl hit)))))))


(definition public (test3-world)
  (continuation-capture
    (lambda (exit)
      (let ((commands (new Commands)))
        (move-up~ commands)
        (test-tick~ me commands .1 exit)))))


(definition public (test4-world)
  (let ((elapse .1))
    (continuation-capture
      (lambda (exit)
        (let ((commands (new Commands)))
          (move-down~ commands)
          (test-tick~ me commands elapse exit))))))


(definition public (test2-world)
  (let ((origin (copy-vertex (get-position~ me)))
        (vector (vertex-scalar* (get-sight~ (get-eye-lookat~ world)) 100.)))
    (set-marks~ zone (list (new Mark origin)
                           (new Mark (vertex+ origin vector))))))


@w
(definition public (test1-world)
  (let ((movement (new Movement (copy-vertex (get-position~ me)) (vertex-scalar* (get-sight~ (get-eye-lookat~ world)) 100.))))
    (receive (cl hit) (collide-and-slide 1.
                                         movement
                                         #f
                                         #f)
      (set-marks~ zone (list (new Mark hit)))
      @w
      (debug cl hit))))


;; eye
;polygon-list: 6468
;movement: {Movement #f32(-136.374755859375 18.5 -143.91368103027344) #f32(38.84560012817383 -1.879419073702593e-7 31.48046112060547) #f32(.7769119739532471 -3.758838129641617e-9 .629609227180481) 50.000000816839304 #69}
;#f32(-56. 18.5 -143.91368103027344)

;; camera
;polygon-list: 3072
;movement: {Movement #f32(-98.10169982910156 3.5 91.20469665527344) #f32(40.080997467041016 2.6129575303457386e-7 -29.891698837280273) #f32(.8016199469566345 5.22591525609073e-9 -.5978339910507202) 50.00000017331611 #107}
;#f32(-58.02070236206055 3.500000238418579 61.31299591064453)


(definition public (test0-world)
  (testing? (not (testing?)))
  (display-on/off~ world "Testing" (testing?)))


@w
(definition public (test1-world)
  (debug (get-focus)))


@w
(definition public (test2-world)
  )


@w
(definition public (test3-world)
  )


@w
(definition public (test4-world)
  )


@test-model
(definition public (test2-world)
  (let ((entity (new Entity x: 0. y: 0. z: 0.)))
    (set-model~ entity (find-model "pyro"))
    (set-matrix~ entity (make-identity-matrix))
    (add-element~ zone entity)))


@test-model
(definition public (test3-world)
  (let ((model (find-model "pyro")))
    (set-model~ me model)
    (set-avatar~ me model)))


@test-model
(definition public (test4-world)
  (set-avatar~ me #f))


(definition public (test5-world)
  (let ((cube (find-named-element~ zone 'cube))
        (target (vertex+ (get-eye~ world) (vertex-scalar* (get-sight~ (get-eye-lookat~ world)) 30.)))
        (count 20)
        (n 0))
    (letrec ((proc
               (lambda ()
                 (if (>= n count)
                     (unregister-draw~ world proc)
                   (let ((scaling (* (/ 10. (cast <fl> count)) (cast <fl> n))))
                     (set-matrix~ cube (matrix-multiply (make-translation-matrix (vertex-x target) (vertex-y target) (vertex-z target)) (make-scaling-matrix scaling scaling scaling)))
                     (increase! n))))))
      (register-draw~ world proc))))


(definition public (test6-world)
  (setup-interface~ world))


(definition public (test7-world)
  (new World-Inventory parent: (get-interface~ world) size: {Dimension 366 588} location: 'center)
  (layout-view~ (get-interface~ world)))


(definition public (test8-world)
  (let ((target (get-target~ world)))
    (if (not target)
        (bell)
      (open-menu
        (new Color-Choose
          size: {Dimension 527 109}
          background: #f
          color: (get-color~ target)
          feedback: (lambda (color)
                      (set-property~ (get-designer~ zone) target 'color color)
                      (invalidate-lightmaps~ zone target))
          @return-press-handler: (new Event-Handler execute: return-press)
          @escape-press-handler: (new Event-Handler execute: escape-press)
          @focus-lose-handler: (new Event-Handler execute: edition-ended))))))


(definition public (test9-world)
  (let ((timer (new Timer)))
    (set-shadowmaps?~ world #f)
    (recalculate-lightmaps)
    (play-sound-file~ world "sound/explosion")
    (let ((time (format "Time: {a}s" (real-duration~ timer))))
      (set-information~ world (list time))
      (display-status~ world time))))


@w
(definition public (test0-world)
  (let ((timer (new Timer)))
    (set-shadowmaps?~ world #t)
    (recalculate-lightmaps)
    (play-sound-file~ world "sound/explosion")
    (let ((time (format "Time: {a}s" (real-duration~ timer))))
      (set-information~ world (list time))
      (display-status~ world time))))


(definition (recalculate-lightmaps)
  (invalidate-lightmaps~ zone #f)
  (update-lightmaps~ zone)
  (iterate-sectors-with-tiles~ zone
    (lambda (index sector)
      (update-vertices~ sector)
      (set-lightmap-uptodate?~ sector #f)
      (update-lightmap~ sector))))


@w
(definition public (test8-world)
  (case (tier~ (get-application))
    ((server)
     (for-each (lambda (server-client)
                 (let ((client (get-client~ server-client)))
                   (server-test~ client #f)))
               (get-clients~ (get-application))))
    ((client)
     (let ((server (get-remote-server~ (get-application)))
           (client (get-remote-client~ (get-application))))
       (if (not server)
           (bell)
         (client-test~ server client #f))))))


@w
(definition public (test9-world)
  (if (validate-areas~ zone)
      (display-message "Areas valid" color: {Color Green})
    (display-message "Areas corrupted!" color: {Color Red})
    (set-visible?~ (child~ interface 'info) #t)))


@w
(definition public (test0-world)
  (testing? (not (testing?)))
  (display-on/off~ world "Testing" (testing?))))
