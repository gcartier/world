;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; OpenGL Showcase
;;;


(module world.showcase jazz


(import (jazz.graphic)
        (jazz.graphic.opengl)
        (jazz.graphic.opengl.platform)
        (jazz.io)
        (jazz.library)
        (jazz.literals)
        (jazz.media)
        (jazz.network)
        (jazz.platform)
        (jazz.platform.cairo)
        (jazz.runtime)
        (jazz.system)
        (jazz.ui)
        (jazz.ui.window)
        (time)
        (world.geometry))


(class Showcase-Window extends OpenGL-Window
  
  
  (method override (draw-scene)
    (let ((width (cast <fl> (get-width)))
          (height (cast <fl> (get-height))))
      
      ;; new-opengl-window
      
      ;; initialize-opengl
      (gl-shade-model GL_SMOOTH)
      (gl-clear-color 0.0 0.0 0.0 0.5)
      (gl-clear-depth 1.0)
      (gl-enable GL_LINE_SMOOTH)
      (gl-enable GL_POLYGON_SMOOTH)
      (gl-enable GL_COLOR_MATERIAL)
      (gl-enable GL_DEPTH_TEST)
      (gl-depth-func GL_LEQUAL)
      (gl-polygon-mode GL_FRONT_AND_BACK GL_FILL)
      (gl-hint GL_PERSPECTIVE_CORRECTION_HINT GL_NICEST)
      
      ;; resize-scene
      (gl-viewport 0 0 (fxround width) (fxround height))
      (gl-matrix-mode GL_PROJECTION)
      (gl-load-identity)
      (gl-ortho -5. 5. -5. 5. -10. 10.)
      @w
      (gl-ortho 0.0 (exact->inexact width) 0.0 (exact->inexact height) -10.0 10.0)
      @w
      (glu-perspective 45.0 (/ width height) 0.1 100.0)
      (gl-matrix-mode GL_MODELVIEW)
      (gl-load-identity)
      
      ;; world
      
      ;; initialize
      (let ((eye (new Vertex 0.0 3.0 10.0))
            (eye-sight (new Vertex 0.0 0.0 -6.0))
            (eye-up (new Vertex 0.0 1.0 0.0))
            (eye-right (new Vertex 1.0 0.0 0.0)))
        
        ;; update-camera
        (let ((eye-target (vertex+ eye eye-sight)))
          
          ;; initialize-opengl
          (gl-polygon-mode GL_FRONT GL_FILL)
          (gl-matrix-mode GL_MODELVIEW)
          (gl-enable GL_NORMALIZE)
          
          ;; draw-world
          
          ;; prepare-world
          (gl-clear (bitwise-ior GL_COLOR_BUFFER_BIT GL_DEPTH_BUFFER_BIT))
          (gl-matrix-mode GL_MODELVIEW)
          (gl-load-identity)
          (gl-disable GL_LIGHTING)
          (gl-disable GL_LIGHT0)
          (gl-disable GL_LIGHT1)
          (glEnable GL_BLEND)
          (glBlendFunc GL_SRC_ALPHA GL_ONE_MINUS_SRC_ALPHA)
          
          ;; setup-camera
          (glu-look-at
            (get-x~ eye) (get-y~ eye) (get-z~ eye)
            (get-x~ eye-target) (get-y~ eye-target) (get-z~ eye-target)
            (get-x~ eye-up) (get-y~ eye-up) (get-z~ eye-up))
          
          ;; setup-lighting
          (gl-enable GL_LIGHTING)
          (gl-enable GL_LIGHT0)
          (gl-enable GL_LIGHT1)
          (gl-material-specular GL_FRONT 0.1 0.1 0.1 1.0)
          (gl-material-shininess GL_FRONT 50.0)
          (gl-light-model GL_LIGHT_MODEL_AMBIENT 0.2 0.2 0.2 1.0)
          ;; positioned light
          (gl-light GL_LIGHT0 GL_DIFFUSE 0.5 0.5 0.5 1.0)
          (gl-light GL_LIGHT0 GL_POSITION 4.0 0.0 8.0 1.0)
          ;; directed light
          (gl-light GL_LIGHT1 GL_DIFFUSE 0.5 0.5 0.4 1.0)
          (gl-light GL_LIGHT1 GL_POSITION -1.0 0.5 0.5 0.0)
          
          ;; draw-objects
          
          ;; pyramid
          (let ((x -1.0)
                (y 1.0)
                (z 1.0)
                (rtri 0.0))
            (with-gl-matrix
              (lambda ()
                (gl-translate x y z)
                (gl-rotate rtri 0.0 1.0 0.0)
                (gl-scale 0.5 0.5 0.5)
                (with-gl-begin/end GL_TRIANGLES
                  (lambda ()
                    (gl-plane-normal (new Vertex  0.0  1.0  0.0)
                                     (new Vertex -1.0 -1.0  1.0)
                                     (new Vertex  1.0 -1.0  1.0))
                    (gl-color 1.0 0.0 0.0)
                    (gl-vertex  0.0  1.0  0.0)
                    (gl-color 0.0 1.0 0.0)
                    (gl-vertex -1.0 -1.0  1.0)
                    (gl-color 0.0 0.0 1.0)
                    (gl-vertex  1.0 -1.0  1.0)
                    
                    (gl-plane-normal (new Vertex  0.0  1.0  0.0)
                                     (new Vertex  1.0 -1.0  1.0)
                                     (new Vertex  1.0 -1.0  -1.0))
                    (gl-color 1.0 0.0 0.0)
                    (gl-vertex  0.0  1.0  0.0)
                    (gl-color 0.0 0.0 1.0)
                    (gl-vertex  1.0 -1.0  1.0)
                    (gl-color 0.0 1.0 0.0)
                    (gl-vertex  1.0 -1.0  -1.0)
                    
                    (gl-plane-normal (new Vertex  0.0  1.0  0.0)
                                     (new Vertex  1.0 -1.0  -1.0)
                                     (new Vertex -1.0 -1.0  -1.0))
                    (gl-color 1.0 0.0 0.0)
                    (gl-vertex  0.0  1.0  0.0)
                    (gl-color 0.0 1.0 0.0)
                    (gl-vertex  1.0 -1.0  -1.0)
                    (gl-color 0.0 0.0 1.0)
                    (gl-vertex -1.0 -1.0  -1.0)
                    
                    (gl-plane-normal (new Vertex  0.0  1.0  0.0)
                                     (new Vertex -1.0 -1.0 -1.0)
                                     (new Vertex -1.0 -1.0  1.0))
                    (gl-color 1.0 0.0 0.0)
                    (gl-vertex  0.0  1.0  0.0)
                    (gl-color 0.0 0.0 1.0)
                    (gl-vertex -1.0 -1.0 -1.0)
                    (gl-color 0.0 1.0 0.0)
                    (gl-vertex -1.0 -1.0  1.0))))))
          
          ;; sphere
          (let ((x 1.0)
                (y 1.0)
                (z 1.0)
                (radius 1.0)
                (slices 26)
                (stacks 52)
                (color {Color Blue}))
            (with-gl-matrix
              (lambda ()
                (gl-translate x y z)
                (gl-scale 1. 1. 1.)
                (gl-colorize color)
                (glutSolidSphere radius slices stacks))))
          
          ;; render-interface
          (gl-disable GL_LIGHTING)
          (gl-disable GL_LIGHT0)
          (gl-disable GL_LIGHT1)
          (gl-matrix-mode GL_MODELVIEW)
          (gl-load-identity)
          (gl-matrix-mode GL_PROJECTION)
          (glEnable GL_BLEND)
          (glBlendFunc GL_SRC_ALPHA GL_ONE_MINUS_SRC_ALPHA)
          (with-gl-matrix
            (lambda ()
              (gl-load-identity)
              (gl-ortho 0.0 (exact->inexact width) 0.0 (exact->inexact height) -10.0 10.0)
              
              ;; draw-interface
              ))))))))
