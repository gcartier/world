;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Immediate Mode Showcase
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.showcase.immediate.window jazz


(import (jazz.graphic)
        (jazz.graphic.opengl.autoload)
        (jazz.graphic.opengl.glew)
        (jazz.graphic.opengl.window)
        (jazz.io)
        (jazz.library)
        (jazz.literals)
        (jazz.media)
        (jazz.network)
        (jazz.platform)
        (jazz.platform.cairo)
        (jazz.runtime)
        (jazz.system)
        (jazz.ui)
        (jazz.ui.window)
        (time)
        (world.foreign)
        (world.geometry)
        (world.opengl))


(class Immediate-Showcase-Window extends OpenGL-Window
  
  
  (method override (draw-scene)
    (let ((width (cast <fl> (get-width)))
          (height (cast <fl> (get-height))))
      ;; new-opengl-window
      
      ;; setup-opengl
      (glShadeModel GL_SMOOTH)
      (glClearColor 0.0 0.0 0.0 0.5)
      (glClearDepth 1.0)
      (glEnable GL_LINE_SMOOTH)
      (glEnable GL_POLYGON_SMOOTH)
      (glEnable GL_COLOR_MATERIAL)
      (glEnable GL_DEPTH_TEST)
      (glDepthFunc GL_LEQUAL)
      (glPolygonMode GL_FRONT_AND_BACK GL_FILL)
      (glHint GL_PERSPECTIVE_CORRECTION_HINT GL_NICEST)
      
      ;; resize-scene
      (glViewport 0 0 (fxround width) (fxround height))
      (glMatrixMode GL_PROJECTION)
      (glLoadIdentity)
      (glOrtho -5. 5. -5. 5. -10. 10.)
      @w
      (glOrtho 0.0 width 0.0 height -10.0 10.0)
      @w
      (gluPerspective 45.0 (/ width height) 0.1 100.0)
      (glMatrixMode GL_MODELVIEW)
      (glLoadIdentity)
      
      ;; world
      
      ;; initialize
      (let ((eye (vertex 0.0 3.0 10.0))
            (eye-sight (vertex 0.0 0.0 -6.0))
            (eye-up (vertex 0.0 1.0 0.0))
            (eye-right (vertex 1.0 0.0 0.0)))
        
        ;; update-camera
        (let ((eye-target (vertex+& eye eye-sight)))
          
          ;; setup-opengl
          (glPolygonMode GL_FRONT GL_FILL)
          (glMatrixMode GL_MODELVIEW)
          (glEnable GL_NORMALIZE)
          
          ;; draw-world
          
          ;; prepare-world
          (glClear (bitwise-ior GL_COLOR_BUFFER_BIT GL_DEPTH_BUFFER_BIT))
          (glMatrixMode GL_MODELVIEW)
          (glLoadIdentity)
          (glDisable GL_LIGHTING)
          (glDisable GL_LIGHT0)
          (glDisable GL_LIGHT1)
          (glEnable GL_BLEND)
          (glBlendFunc GL_SRC_ALPHA GL_ONE_MINUS_SRC_ALPHA)
          
          ;; setup-camera
          (gluLookAt
            (vertex-x eye) (vertex-y eye) (vertex-z eye)
            (vertex-x eye-target) (vertex-y eye-target) (vertex-z eye-target)
            (vertex-x eye-up) (vertex-y eye-up) (vertex-z eye-up))
          
          ;; setup-lighting
          (glEnable GL_LIGHTING)
          (glEnable GL_LIGHT0)
          (glEnable GL_LIGHT1)
          (gl-material-specular GL_FRONT 0.1 0.1 0.1 1.0)
          (gl-material-shininess GL_FRONT 50.0)
          (gl-light-model GL_LIGHT_MODEL_AMBIENT 0.2 0.2 0.2 1.0)
          ;; positioned light
          (gl-light GL_LIGHT0 GL_DIFFUSE 0.5 0.5 0.5 1.0)
          (gl-light GL_LIGHT0 GL_POSITION 4.0 0.0 8.0 1.0)
          ;; directed light
          (gl-light GL_LIGHT1 GL_DIFFUSE 0.5 0.5 0.4 1.0)
          (gl-light GL_LIGHT1 GL_POSITION -1.0 0.5 0.5 0.0)
          
          ;; draw-elements
          
          ;; pyramid
          (let ((x -1.0)
                (y 1.0)
                (z 1.0)
                (rotation 0.0))
            (glPushMatrix)
            (glTranslatef x y z)
            (glRotatef rotation 0.0 1.0 0.0)
            (glScalef 0.5 0.5 0.5)
            (glBegin GL_TRIANGLES)
            (gl-plane-normal (vertex  0.0  1.0  0.0)
                             (vertex -1.0 -1.0  1.0)
                             (vertex  1.0 -1.0  1.0))
            (glColor3f 1.0 0.0 0.0)
            (glVertex3f  0.0  1.0  0.0)
            (glColor3f 0.0 1.0 0.0)
            (glVertex3f -1.0 -1.0  1.0)
            (glColor3f 0.0 0.0 1.0)
            (glVertex3f  1.0 -1.0  1.0)
            
            (gl-plane-normal (vertex  0.0  1.0  0.0)
                             (vertex  1.0 -1.0  1.0)
                             (vertex  1.0 -1.0  -1.0))
            (glColor3f 1.0 0.0 0.0)
            (glVertex3f  0.0  1.0  0.0)
            (glColor3f 0.0 0.0 1.0)
            (glVertex3f  1.0 -1.0  1.0)
            (glColor3f 0.0 1.0 0.0)
            (glVertex3f  1.0 -1.0  -1.0)
            
            (gl-plane-normal (vertex  0.0  1.0  0.0)
                             (vertex  1.0 -1.0  -1.0)
                             (vertex -1.0 -1.0  -1.0))
            (glColor3f 1.0 0.0 0.0)
            (glVertex3f  0.0  1.0  0.0)
            (glColor3f 0.0 1.0 0.0)
            (glVertex3f  1.0 -1.0  -1.0)
            (glColor3f 0.0 0.0 1.0)
            (glVertex3f -1.0 -1.0  -1.0)
            
            (gl-plane-normal (vertex  0.0  1.0  0.0)
                             (vertex -1.0 -1.0 -1.0)
                             (vertex -1.0 -1.0  1.0))
            (glColor3f 1.0 0.0 0.0)
            (glVertex3f  0.0  1.0  0.0)
            (glColor3f 0.0 0.0 1.0)
            (glVertex3f -1.0 -1.0 -1.0)
            (glColor3f 0.0 1.0 0.0)
            (glVertex3f -1.0 -1.0  1.0)
            (glEnd)
            (glPopMatrix))
          
          ;; sphere
          (let ((x 1.0)
                (y 1.0)
                (z 1.0)
                (radius 1.0)
                (slices 26)
                (stacks 52)
                (color {Color Blue}))
            (glPushMatrix)
            (glTranslatef x y z)
            (glScalef 1. 1. 1.)
            (gl-colorize color)
            (gl-sphere radius slices stacks)
            (glPopMatrix))
          
          ;; render-interface
          (glDisable GL_LIGHTING)
          (glDisable GL_LIGHT0)
          (glDisable GL_LIGHT1)
          (glMatrixMode GL_MODELVIEW)
          (glLoadIdentity)
          (glMatrixMode GL_PROJECTION)
          (glEnable GL_BLEND)
          (glBlendFunc GL_SRC_ALPHA GL_ONE_MINUS_SRC_ALPHA)
          (glPushMatrix)
          (glLoadIdentity)
          (glOrtho 0.0 width 0.0 height -10.0 10.0)
          (glPopMatrix)
          
          ;; draw-interface
          ))))))
