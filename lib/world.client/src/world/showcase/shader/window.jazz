;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Shader Showcase
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2013
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.showcase.shader.window jazz


(import (jazz.graphic)
        (jazz.graphic.opengl.autoload)
        (jazz.graphic.opengl.glew)
        (jazz.io)
        (jazz.library)
        (jazz.literals)
        (jazz.media)
        (jazz.network)
        (jazz.platform)
        (jazz.platform.cairo)
        (jazz.runtime)
        (jazz.system)
        (jazz.ui)
        (jazz.ui.window)
        (time)
        (world.foreign)
        (world.geometry))


;; VAO are only available in OpenGL 3.x
(definition use-opengl-3?
  #f)


;;;
;;;; Log
;;;


(definition log?
  #f)

(definition log-port
  #f)


(definition (printlog fmt . rest)
  (when log?
    (unless log-port
      (set! log-port (open-output-file `(path: "log.txt" eol-encoding: ,(get-eol-encoding)))))
    (apply format log-port fmt rest)
    (newline log-port)
    (force-output log-port)))


;;;
;;;; Shaders
;;;


(definition showcase-vs
  #<<SHADER
#version 120

uniform mat4 viewMatrix, projMatrix;

attribute vec3 position;
attribute vec3 color;
attribute vec3 normal;

varying vec3 final_color;

void main()
{
    gl_Position = projMatrix * viewMatrix * vec4(position, 1.0);
    final_color = vec3(color.x, color.y, color.z * normal.z);
}
SHADER
)


(definition showcase-fs
  #<<SHADER
#version 120

varying vec3 final_color;

void main()
{
    gl_FragColor = vec4(final_color, 1.0);
}
SHADER
)


;;;
;;;; Window
;;;


(class Shader-Showcase-Window extends OpenGL-Window
  
  
  ;; Program and Shaders
  (slot program           initialize #f getter generate)
  (slot vert-shader       initialize #f getter generate)
  (slot frag-shader       initialize #f getter generate)
  
  ;; Attribute Locations
  (slot vertexLoc         initialize #f getter generate)
  (slot colorLoc          initialize #f getter generate)
  (slot normalLoc         initialize #f getter generate)
 
  ;; Uniform Locations
  (slot projMatrixLoc     initialize #f getter generate)
  (slot viewMatrixLoc     initialize #f getter generate)
  
  ;; Vertex Arrays and Buffers
  (slot vao1              initialize #f getter generate)
  (slot vbo1              initialize #f getter generate)
  (slot vao2              initialize #f getter generate)
  (slot vbo2              initialize #f getter generate)
  
  ;; Matrices
  (slot projection-matrix initialize #f getter generate)
  (slot view-matrix       initialize (make-matrix) getter generate)
  
  
  (method override (setup-opengl)
    ;(glEnable GL_DEPTH_TEST)
    (create-shaders)
    (create-program)
    (set-uniforms))
  
  
  ;;;
  ;;;; Objects
  ;;;
  
  
  (definition toggle-color?
    #f)
  
  
  (method (initialize-buffers)
    ;; blue
    (when use-opengl-3?
      (set! vao1 (glGenVertexArrays*))
      (glBindVertexArray vao1))
    (let ((content #f32(-3.0 0.0 -5.0 0.0 0.0 1.0 0. 0. 1.
                        -1.0 0.0 -5.0 0.0 0.0 1.0 0. 0. 1.
                        -2.0 2.0 -5.0 0.0 0.0 1.0 0. 0. 1.)))
      (set! vbo1 (create-vertex-buffer content)))
    ;; red
    (when use-opengl-3?
      (set! vao2 (glGenVertexArrays*))
      (glBindVertexArray vao2))
    (let ((content (if (not toggle-color?)
                       #f32( 1.0 0.0 -5.0 1.0 0.0 0.0 0. 0. 1.
                             3.0 0.0 -5.0 1.0 0.0 0.0 0. 0. 1.
                             2.0 2.0 -5.0 1.0 0.0 0.0 0. 0. 1.)
                       #f32( 1.0 0.0 -5.0 0.0 1.0 0.0 0. 0. 1.
                             3.0 0.0 -5.0 0.0 1.0 0.0 0. 0. 1.
                             2.0 2.0 -5.0 0.0 1.0 0.0 0. 0. 1.))))
      (set! vbo2 (create-vertex-buffer content)))
    (printlog "Triangles initialized"))
  
  
  (method (delete-buffers)
    (glDeleteBuffers* vbo1)
    (glDeleteBuffers* vbo2))
  
  
  (method (create-vertex-buffer vertices)
    (let ((vbo (glGenBuffers*)))
      (glBindBuffer GL_ARRAY_BUFFER vbo)
      (glBufferDataFloat* GL_ARRAY_BUFFER (f32vector-length vertices) vertices GL_STATIC_DRAW)
      (when use-opengl-3?
        (glEnableVertexAttribArray vertexLoc)
        (glVertexAttribPointer* vertexLoc 3 GL_FLOAT GL_FALSE (* 9 float-size) 0)
        (glEnableVertexAttribArray colorLoc)
        (glVertexAttribPointer* colorLoc 3 GL_FLOAT GL_FALSE (* 9 float-size) (* 3 float-size))
        (glEnableVertexAttribArray normalLoc)
        (glVertexAttribPointer* normalLoc 3 GL_FLOAT GL_FALSE (* 9 float-size) (* 6 float-size)))
      (glBindBuffer GL_ARRAY_BUFFER 0)
      vbo))
  
  
  ;;;
  ;;;; Uniforms
  ;;;
  
  
  (method (set-uniforms)
    ;; must be called after glUseProgram
    (glUniformMatrix4dv* projMatrixLoc 1 #f projection-matrix)
    (glUniformMatrix4dv* viewMatrixLoc 1 #f view-matrix)
    (printlog "Uniforms set"))
  
  
  ;;;
  ;;;; Shaders
  ;;;
  
  
  (method (create-shader shader-text shader-type)
    (printlog "Creating shader")
    (let ((shader (glCreateShader shader-type)))
      (when (= shader 0)
        (error "Error creating shader"))
      (printlog "Setting shader source")
      (glShaderSource shader 1 (list shader-text) #f)
      (printlog "Compiling shader")
      (glCompileShader shader)
      (when (/= (glGetShaderiv* shader GL_COMPILE_STATUS) GL_TRUE)
        (let ((loglength (glGetShaderiv* shader GL_INFO_LOG_LENGTH)))
          (when (> loglength 1)
            (error (glGetInfoLogARB* shader loglength)))))
      shader))
  
  
  (method (create-shaders)
    (set! vert-shader (create-shader showcase-vs GL_VERTEX_SHADER))
    (set! frag-shader (create-shader showcase-fs GL_FRAGMENT_SHADER)))
  
  
  (method (add-shaders program)
    (printlog "Adding shaders")
    (glAttachShader program vert-shader)
    (glAttachShader program frag-shader))
  
  
  ;;;
  ;;;; Program
  ;;;
  
  
  (method (create-program)
    ;; Program and shaders
    (let ((p (glCreateProgram)))
      (printlog "Program created")
      (add-shaders p)
      (glLinkProgram p)
      (set! projMatrixLoc (glGetUniformLocation* p "projMatrix"))
      (set! viewMatrixLoc (glGetUniformLocation* p "viewMatrix"))
      (set! vertexLoc (glGetAttribLocation* p "position"))
      (set! colorLoc (glGetAttribLocation* p "color"))
      (set! normalLoc (glGetAttribLocation* p "normal"))
      (printlog "Locations set")
      ;; Buffers
      (initialize-buffers)
      (glUseProgram p)
      (set! program p)))
  
  
  (method (release-program)
    (glDeleteProgram program)
    (set! program #f))
  
  
  ;;;
  ;;;; Resize
  ;;;
  
  
  (method override (resize-scene width <fl> height <fl>)
    (glViewport 0 0 (fxround width) (fxround height))
    
    ;; Projection
    (let ((ratio (/ width height)))
      (set! projection-matrix (make-projection-matrix 53.13 ratio 1.0 30.0)))
    (printlog "Projection matrix set: {a}" projection-matrix)
    
    ;; View
    (set! view-matrix (make-view-matrix (vertex 10. 2. 10.) (lookat (vertex -.513 -.110 -.852) (vertex -.056 .994 -.094) (vertex .857 -4.195e-8 -.516))))
    (printlog "View matrix set: {a}" view-matrix))
  
  
  ;;;
  ;;;; Keyboard
  ;;;
  
  
  (method override (key-press c)
    (case c
      ((#\r) (reload-buffers))))
  
  
  (method (reload-buffers)
    (delete-buffers)
    (set! toggle-color? (not toggle-color?))
    (initialize-buffers))
  
  
  ;;;
  ;;;; Draw
  ;;;
  
  
  (method override (draw-scene)
    ;; Background color
    (glClearColor 0.0 0.0 0.0 0.0)
    (glClear (bitwise-ior GL_COLOR_BUFFER_BIT GL_DEPTH_BUFFER_BIT))
    
    ;; Draw VAO1
    (if use-opengl-3?
        (glBindVertexArray vao1)
      (glBindBuffer GL_ARRAY_BUFFER vbo1)
      (glEnableVertexAttribArray vertexLoc)
      (glVertexAttribPointer* vertexLoc 3 GL_FLOAT GL_FALSE (* 9 float-size) 0)
      (glEnableVertexAttribArray colorLoc)
      (glVertexAttribPointer* colorLoc 3 GL_FLOAT GL_FALSE (* 9 float-size) (* 3 float-size))
      (glEnableVertexAttribArray normalLoc)
      (glVertexAttribPointer* normalLoc 3 GL_FLOAT GL_FALSE (* 9 float-size) (* 6 float-size)))
    (glDrawArrays GL_TRIANGLES 0 6)
    
    ;; Draw VAO2
    (if use-opengl-3?
        (glBindVertexArray vao2)
      (glBindBuffer GL_ARRAY_BUFFER vbo2)
      (glEnableVertexAttribArray vertexLoc)
      (glVertexAttribPointer* vertexLoc 3 GL_FLOAT GL_FALSE (* 9 float-size) 0)
      (glEnableVertexAttribArray colorLoc)
      (glVertexAttribPointer* colorLoc 3 GL_FLOAT GL_FALSE (* 9 float-size) (* 3 float-size))
      (glEnableVertexAttribArray normalLoc)
      (glVertexAttribPointer* normalLoc 3 GL_FLOAT GL_FALSE (* 9 float-size) (* 6 float-size)))
    (glDrawArrays GL_TRIANGLES 0 6))))
