;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; Hardware Decoding
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.hardware jazz


(cond-expand
  (mac


(import (jazz.io)
        (jazz.listener)
        (jazz.opengl.glew)
        (jazz.opengl.window)
        (jazz.platform)
        (jazz.stream)
        (jazz.stream.platform)
        (jazz.window)
        (world)
        (world.configure)
        (world.context)
        (world.render)
        (world.ring)
        (world.time)
        (world.window))


;;;
;;;; Pipeline
;;;


;; fixme
(hub get-media-texture)
(hub set-stream-state)


(class Hardware-Pipeline extends Object
  
  
  (slot decoder             initialize #f getter generate)
  (slot first-dts           initialize #f getter generate)
  (slot first-retrieve      initialize #f getter generate)
  (slot listener            initialize #f getter generate)
  (slot listen-thread       initialize #f getter generate)
  (slot context             initialize #f getter generate)
  (slot output              initialize #f getter generate)
  (slot texture             initialize #f getter generate)
  (slot bind-thread         initialize #f getter generate)
  (slot bind-ring           initialize #f getter generate)
  (slot bind-delay     <fl> initialize 0. getter generate)
  (slot bound-frame         initialize #f getter generate)
  (slot stop?               initialize #f getter generate)
  
  
  (method override (initialize self resolution codec-data output (bind-delay: bind-delay #f))
    (set! self.listener (open-stream-listener "decode"))
    (set! self.decoder (createHardwareDecoder (get-width resolution) (get-height resolution) codec-data (u8vector-length codec-data) (get-write-file listener)))
    (set! self.context (platformGetContext (get-handle (current-window))))
    (set! self.output output)
    (set! self.texture (get-id (get-media-texture output)))
    (set! self.bind-ring (new Time-Ring 8 max-size: 32))
    (set! self.bind-delay (or bind-delay 0.)))
  
  
  (method public (start self)
    (set! listen-thread (new-thread (lambda () (run-listen self)) 'listen))
    (set! bind-thread (new-thread (lambda () (run-bind self)) 'bind))
    (thread-base-priority-set! listen-thread video-priority)
    (thread-base-priority-set! bind-thread video-priority)
    (thread-start! listen-thread)
    (thread-start! bind-thread))
  
  
  (method public (stop self)
    (set! stop? #t)
    (stopHardwareDecoder decoder)
    (terminate bind-ring)
    (thread-join! listen-thread)
    (thread-join! bind-thread))
  
  
  (method public (release self)
    (destroyHardwareDecoder decoder))
  
  
  (method (run-listen self)
    (declare (proper-tail-calls))
    (let (loop)
      (let ((c (wait listener)))
        (case c
          ((#\.)
           (unless stop?
             (when (not first-retrieve)
               (set! first-retrieve (current-seconds)))
             (let ((frame (hardwareRetrieveFrame decoder)))
               (insert bind-ring (+ first-retrieve bind-delay (timestamp->flonum (hardwareFramePTS frame))) frame))
             (loop)))
          ((#\@))))))
  
  
  (method (run-bind self)
    (declare (proper-tail-calls))
    (let (loop)
      (let ((frame (wait bind-ring)))
        (unless (or (eq? frame 'terminate) stop?)
          (let ((window (current-window))
                (interface (current-interface))
                (world (current-world)))
            (with-render-mutex
              (lambda ()
                (with-context-current window
                  (lambda ()
                    (glActiveTexture GL_TEXTURE0)
                    (glBindTexture GL_TEXTURE_RECTANGLE_ARB texture)
                    (hardwareBindFrame decoder frame context)
                    (glBindTexture GL_TEXTURE_RECTANGLE_ARB 0)
                    (set-stream-state output 'drawn))))))
          (when bound-frame
            (hardwareReleaseFrame bound-frame))
          (set! bound-frame frame)
          (loop)))))
  
  
  (method public (decode self buffer dts pts duration)
    (unless stop?
      (when (not first-dts)
        (set! first-dts dts))
      (let ((dts (- dts first-dts))
            (pts (- pts first-dts)))
        (let ((size (u8vector-length buffer)))
          (hardwareDecodeFrame decoder buffer size dts pts duration))))))


;;;
;;;; Render
;;;


(define hardware-vertices
  (f32vector
    0.0 0.0
    1.0 0.0
    0.0 1.0
    1.0 1.0))


(class Hardware-Render extends Object
  
  
  (slot h        getter generate)
  (slot v        getter generate)
  (slot scale    getter generate)
  (slot width    getter generate)
  (slot height   getter generate)
  (slot program  getter generate)
  (slot array    getter generate)
  (slot buffer   getter generate)
  (slot texture  getter generate)
  (slot pipeline getter generate)
  
  
  (method override (initialize self location resolution pipeline)
    (define (determine-uniforms)
      (case location
        ((full) (values -1 1 2))
        ((top-left) (values -1 1 1))
        ((top-right) (values 0 1 1))
        ((bottom-left) (values -1 0 1))
        ((bottom-right) (values 0 0 1))))
    
    (receive (h v scale) (determine-uniforms)
      (let ((width (get-width resolution))
            (height (get-height resolution)))
        (set! self.h h)
        (set! self.v v)
        (set! self.scale scale)
        (set! self.width width)
        (set! self.height height)
        (set! self.texture (gl-generate-texture))
        (set! self.pipeline pipeline)
        (setup-array self))))
  
  
  (method (setup-array self)
    (let ((world (current-world)))
      (let ((program (get-hardware-program world)))
        (receive (array buffer) (create-vertices-array program hardware-vertices)
          (set! self.program program)
          (set! self.array array)
          (set! self.buffer buffer)))))
  
  
  (method (render self)
    (when (get-bound-frame pipeline)
      (use program)
      (bind-uniforms program h v scale width height texture)
      (glBindVertexArray array)
      (glDrawArrays GL_TRIANGLE_STRIP 0 4)
      (glBindVertexArray 0)
      (unuse program)))))
  (else)))
