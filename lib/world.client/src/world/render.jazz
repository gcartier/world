;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; Rendering
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;    Edouard Hebert


(module world.render jazz


(import (jazz.component)
        (jazz.debuggee)
        (jazz.opengl.glew)
        (jazz.syntax (phase syntax))
        (gaea.dye)
        (world)
        (world.autoload)
        (world.configure)
        (world.context)
        (world.entity)
        (world.expanse)
        (world.gadget)
        (world.lighting)
        (world.mesh)
        (world.model)
        (world.overlay)
        (world.programs)
        (world.renderer)
        (world.renderers)
        (world.settings)
        (world.support))


(proclaim (not check bounds types zero)
          (warn optimizations))


(definition protected backface-culling?
  (world-setting 'world.backface-culling? #f))

(definition protected (set-backface-culling? flag)
  (set! backface-culling? flag))


;;;
;;;; FPS
;;;


(definition protected render-fps <fl>
  0.)

(definition protected render-duration <fl>
  0.)

(definition protected render-count <fx>
  0)

(definition protected (update-fps duration <fl>)
  (let ((fps (/ 1. duration)))
    (set! render-fps (/ (+ (* render-fps 15.) fps) 16.)))
  (set! render-duration (/ (+ (* render-duration 15.) duration) 16.))
  @tell
  (if (>= render-count render-rate)
      (begin
        (tell render-fps)
        (set! render-count 0))
    (increase! render-count)))


;;;
;;;; Draw
;;;


(definition x-rays-overlay <dye>
  (dye 1. 1. 1. .6))


(definition protected visited-sectors <fx>
  0)

(definition protected rendered-sectors <fx>
  0)

(definition protected rendered-meshes <fx>
  0)

(definition protected rendered-triangles <fx>
  0)

(definition protected rendered-entities <fx>
  0)


(definition protected view-distance <fx>
  (world-setting 'world.view-distance 9))

(definition protected (set-view-distance distance <fx>)
  (set! view-distance distance))


(definition protected (draw-sectors) <void>
  (declare (proper-tail-calls))
  (declare (optimize-dead-local-variables))
  (declare (inline))
  (declare (inlining-limit 1000))
  (proclaim (not check bounds types zero))
  (let ((world (current-world)))
    (let ((block-program (get-block-program world))
          (block-opaque (get-block-opaque world))
          (x-rays? (get-x-rays? world))
          (x-rays-category (get-x-rays-category world))
          (draw-blocks? (get-draw-blocks? world))
          (draw-entities? (get-draw-entities? world))
          (draw-players? (get-draw-players? world))
          (draw-gadgets? (effective-draw-gadgets? world))
          (circling? (world.circle:circling?))
          (renders '()))
      (set! visited-sectors 0)
      (set! rendered-sectors 0)
      (set! rendered-meshes 0)
      (set! rendered-triangles 0)
      (set! rendered-entities 0)
      
      (reset-renderers)
      
      (use block-program)
      (bind-material block-program block-opaque)
      (bind-uniforms block-program #f (if x-rays? x-rays-overlay no-overlay) 0.)
      
      (when backface-culling?
        (glEnable GL_CULL_FACE)
        (glCullFace GL_FRONT))
      (let ((zone (current-zone))
            (motion (current-motion))
            (camera (current-camera)))
        (receive (sectors sectors-count) (eye-frustum-sectors zone motion camera)
          (loop (for i from 0 below sectors-count)
                (when (or (not render-triangles-max) (< rendered-triangles render-triangles-max))
                  (let ((sector <Sector> (vector-ref sectors i)))
                    ;; blocks
                    (when draw-blocks?
                      ;; sector
                      (increase! visited-sectors)
                      ;; mesh
                      (let ((mesh (get-mesh sector)))
                        (when mesh
                          (bind-mesh-matrix block-program (get-position& sector))
                          (if (or (not x-rays?) (not multisampling?))
                              (draw-mesh block-program mesh)
                            ;; x-rays
                            (glEnable GL_SAMPLE_ALPHA_TO_COVERAGE_ARB)
                            (draw-mesh block-program mesh)
                            (glDisable GL_SAMPLE_ALPHA_TO_COVERAGE_ARB))
                          (increase! rendered-sectors)
                          (increase! rendered-meshes)
                          (increase! rendered-triangles (allege (get-indices (get-vertices-buffer mesh))))))
                      ;; material-mesh
                      (let ((mesh (get-material-mesh sector)))
                        (when mesh
                          (let ((material (get-material mesh)))
                            (let ((renderer <Base-Renderer> (or (get-override-renderer) (get-renderer material))))
                              (add-mesh renderer mesh sector)
                              (increase! rendered-meshes)
                              (increase! rendered-triangles (allege (get-indices (get-vertices-buffer mesh))))))))
                      ;; other-meshes
                      (unless x-rays-category
                        (let ((other-meshes (get-other-meshes sector)))
                          (when other-meshes
                            (loop (for mesh <Mesh> in-vector other-meshes)
                                  (let ((material (get-material mesh)))
                                    (let ((renderer <Base-Renderer> (or (get-override-renderer) (get-renderer material))))
                                      (add-mesh renderer mesh sector)
                                      (increase! rendered-meshes)
                                      (increase! rendered-triangles (allege (get-indices (get-vertices-buffer mesh))))))))))
                      ;; texture-elements
                      (let ((elements (get-texture-elements sector)))
                        (when (not-null? elements)
                          (register-texture-elements elements))))
                    ;; categorized-mesh
                    (when x-rays-category
                      (let ((mesh (get-categorized-mesh sector)))
                        (when mesh
                          (let ((material (get-material mesh)))
                            (when (eq? (get-name material) x-rays-category)
                              (let ((renderer <Base-Renderer> (get-renderer material)))
                                (add-mesh renderer mesh sector)
                                (increase! rendered-meshes)
                                (increase! rendered-triangles (allege (get-indices (get-vertices-buffer mesh))))))))))
                    ;; entities
                    (when draw-entities?
                      (let ((entities (get-entities (get-expanse sector))))
                        (when (not-null? entities)
                          (for-each (lambda (entity)
                                      (unless (get-rendering? entity)
                                        (when (get-visible? entity)
                                          (let ((model (cached-model entity)))
                                            (when model
                                              (when (or draw-players? (not (player? entity)))
                                                (let ((script (get-script entity)))
                                                  (if (and (use-instance-rendering? entity model) (not script))
                                                      (register-instance model entity)
                                                    (register-entity entity))
                                                  (when script
                                                    (let ((render (registered-handler script 'render)))
                                                      (when render
                                                        (set! renders (cons render renders)))))))))
                                          (increase! rendered-entities))))
                                    entities))))
                    ;; gadgets
                    (when draw-gadgets?
                      (let ((gadgets (get-gadgets (get-expanse sector))))
                        (when (not-null? gadgets)
                          (for-each (lambda (gadget)
                                      (register-entity gadget)
                                      (increase! rendered-entities))
                                    gadgets)))))))))
      
      (when backface-culling?
        (glDisable GL_CULL_FACE)
        (glCullFace GL_BACK))
      (unbind-uniforms block-program)
      (unuse block-program)
      
      (when (not-null? renders)
        (let ()
          (define (call-renders)
            (for-each (lambda (render)
                        (render))
                      renders))
          
          (if (get-controller-debugger)
              (call-renders)
            (with-exception-catcher
              (lambda (exc)
                (tell exc))
              (lambda ()
                (call-renders))))))
      
      (gl-check-error)))))
