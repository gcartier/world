;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Rendering
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2013
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.render jazz


(import (jazz.geometry)
        (jazz.graphic)
        (jazz.graphic.opengl.glew)
        (jazz.io)
        (jazz.library)
        (jazz.literals)
        (jazz.media)
        (jazz.network)
        (jazz.platform)
        (jazz.platform.cairo)
        (jazz.runtime)
        (jazz.system)
        (jazz.ui)
        (jazz.ui.dialog)
        (jazz.ui.window)
        (world)
        (world.foreign)
        (world.shader)
        (world.shaders)
        (time))


;;;
;;;; Render-Target
;;;


(class Render-Target extends Object
  
  
  (slot frame-buffer <int>  initialize #f getter generate)
  (slot color-buffer <int>  initialize #f getter generate)
  (slot depth-buffer <int>  initialize #f getter generate)
  (slot texture      <int>  initialize #f getter generate)
  (slot multisample? <bool> initialize #f getter generate)
  (slot width        <int>  initialize #f)
  (slot height       <int>  initialize #f)
  
  
  (method override (initialize width height (multisample?: multisample? #f))
    (nextmethod)
    (set! width~self width)
    (set! height~self height)
    (set! multisample?~self multisample?)

    (if multisample?
        (initialize-multisampled)
      (initialize-texture)
      (initialize-depth-buffer))

    (initialize-frame-buffer))
  
  
  (method protected (initialize-multisampled)
    (let ((multisampling (find-setting 'world.multisampling 4)))
      ;; color
      (set! color-buffer (glGenRenderbuffersEXT*))
      (glBindRenderbufferEXT GL_RENDERBUFFER_EXT color-buffer)
      (glRenderbufferStorageMultisampleEXT GL_RENDERBUFFER_EXT multisampling GL_RGBA width height)
      (glBindRenderbufferEXT GL_RENDERBUFFER_EXT 0)
      ;; depth
      (set! depth-buffer (glGenRenderbuffersEXT*))
      (glBindRenderbufferEXT GL_RENDERBUFFER_EXT depth-buffer)
      (glRenderbufferStorageMultisampleEXT GL_RENDERBUFFER_EXT multisampling GL_DEPTH_COMPONENT32 width height)
      (glBindRenderbufferEXT GL_RENDERBUFFER_EXT 0)))
  
  
  ;; Initialize a texture where the scene will be rendered
  (method protected (initialize-texture)
    (set! texture (gl-generate-texture))
    (glBindTexture GL_TEXTURE_2D texture)
    (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_MAG_FILTER GL_NEAREST)
    (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_MIN_FILTER GL_NEAREST)
    (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_WRAP_S GL_CLAMP_TO_EDGE)
    (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_WRAP_T GL_CLAMP_TO_EDGE)
    (glTexImage2D GL_TEXTURE_2D 0 GL_RGBA width height 0 GL_BGRA GL_UNSIGNED_BYTE #f)
    (glBindTexture GL_TEXTURE_2D 0))
  
  
  ;; Initialize a depth buffer for rendering
  ;; Note that two or more render targets can share the same depth buffer
  (method protected (initialize-depth-buffer)
    (set! depth-buffer (glGenRenderbuffersEXT*))
    (glBindRenderbufferEXT GL_RENDERBUFFER_EXT depth-buffer)
    (glRenderbufferStorageEXT GL_RENDERBUFFER_EXT GL_DEPTH_COMPONENT32 width height)
    (glBindRenderbufferEXT GL_RENDERBUFFER_EXT 0))
  
  
  ;; Bind the texture / color buffer and the depth buffer in a single framebuffer object
  (method protected (initialize-frame-buffer)
    (set! frame-buffer (glGenFramebuffersEXT*))
    (glBindFramebufferEXT GL_FRAMEBUFFER_EXT frame-buffer)
    (if multisample?
        (glFramebufferRenderbufferEXT GL_FRAMEBUFFER_EXT GL_COLOR_ATTACHMENT0_EXT GL_RENDERBUFFER_EXT color-buffer)
      (glFramebufferTexture2DEXT GL_FRAMEBUFFER_EXT GL_COLOR_ATTACHMENT0_EXT GL_TEXTURE_2D texture 0))
    (glFramebufferRenderbufferEXT GL_FRAMEBUFFER_EXT GL_DEPTH_ATTACHMENT_EXT GL_RENDERBUFFER_EXT depth-buffer)
    (glBindFramebufferEXT GL_FRAMEBUFFER_EXT 0))
  
  
  ;;; Set the render target for rendering
  (method public (activate)
    (when frame-buffer
      (glBindFramebufferEXT GL_FRAMEBUFFER_EXT frame-buffer)))
  
  
  ;; Set the render target back to opengl's native buffer
  (method public (deactivate)
    (glBindFramebufferEXT GL_FRAMEBUFFER_EXT 0))
  
  
  (method public (blit destination)
    (glBindFramebufferEXT GL_READ_FRAMEBUFFER_EXT frame-buffer)
    (glBindFramebufferEXT GL_DRAW_FRAMEBUFFER_EXT destination)
    (glBlitFramebufferEXT 0 0 width height 0 0 width height GL_COLOR_BUFFER_BIT GL_NEAREST)
    (glBindFramebufferEXT GL_READ_FRAMEBUFFER_EXT 0))
  
  
  (method public (resize width height)
    (free-resources)
    (initialize width height multisample?: multisample?))
  
  
  (method public (free-resources)
    (glDeleteRenderbuffersEXT* depth-buffer)
    (when texture
      (glDeleteTextures* texture))
    (when color-buffer
      (glDeleteRenderbuffersEXT* color-buffer))
    (glDeleteFramebuffersEXT* frame-buffer)
    (set! texture #f)
    (set! frame-buffer #f)
    (set! color-buffer #f)
    (set! depth-buffer #f)))


;;;
;;;; PP-Program
;;;


@wait
(class PP-Program extends Shader-Program
  
  
  (slot vbo/fbo-vertices initialize #f accessors generate)
  
  
  (method override (prepare)
    (set-vs pp-vs)
    (set-fs pp-fs)
    (link)
    (set-vbo/fbo-vertices (glGenVertices*))
    (add-uniform "fbo_texture")
    (add-attribute "vertex_coord"))))
