;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; Rendering
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.render jazz


(import (jazz.graphic.opengl.glew)
        (jazz.system)
        (world.foreign)
        (world.settings))


;;;
;;;; Render-Target
;;;


(class Render-Target extends Object
  
  
  (slot color-buffer <int>  initialize #f getter generate)
  (slot depth-buffer <int>  initialize #f getter generate)
  (slot frame-buffer <int>  initialize #f getter generate)
  (slot width        <int>  initialize #f getter generate)
  (slot height       <int>  initialize #f getter generate)
  
  
  (method override (initialize width height)
    (nextmethod)
    (initialize-buffers width height))
  
  
  (method (initialize-buffers width height)
    (set! width~self width)
    (set! height~self height)
    (initialize-multisampled)
    (initialize-frame-buffer))
  
  
  ;; Initialize using multisample extension
  (method protected (initialize-multisampled)
    (let ((multisampling (world-setting 'world.multisampling 4)))
      ;; color
      (set! color-buffer (glGenRenderbuffers*))
      (glBindRenderbuffer GL_RENDERBUFFER color-buffer)
      (glRenderbufferStorageMultisample GL_RENDERBUFFER multisampling GL_RGBA width height)
      (glBindRenderbuffer GL_RENDERBUFFER 0)
      ;; depth
      (set! depth-buffer (glGenRenderbuffers*))
      (glBindRenderbuffer GL_RENDERBUFFER depth-buffer)
      (glRenderbufferStorageMultisample GL_RENDERBUFFER multisampling GL_DEPTH_COMPONENT32 width height)
      (glBindRenderbuffer GL_RENDERBUFFER 0)))
  
  
  ;; Bind the color and depth buffer in a single framebuffer object
  (method protected (initialize-frame-buffer)
    ;; frame
    (set! frame-buffer (glGenFramebuffers*))
    (glBindFramebuffer GL_FRAMEBUFFER frame-buffer)
    (glFramebufferRenderbuffer GL_FRAMEBUFFER GL_COLOR_ATTACHMENT0 GL_RENDERBUFFER color-buffer)
    (glFramebufferRenderbuffer GL_FRAMEBUFFER GL_DEPTH_ATTACHMENT GL_RENDERBUFFER depth-buffer)
    (glBindFramebuffer GL_FRAMEBUFFER 0))
  
  
  ;;; Set the render target for rendering
  (method public (activate)
    (when frame-buffer
      (glBindFramebuffer GL_FRAMEBUFFER frame-buffer)))
  
  
  ;; Set the render target back to opengl's native buffer
  (method public (deactivate)
    (glBindFramebuffer GL_FRAMEBUFFER 0))
  
  
  (method public (blit destination)
    (glBindFramebuffer GL_READ_FRAMEBUFFER frame-buffer)
    (glBindFramebuffer GL_DRAW_FRAMEBUFFER destination)
    (glBlitFramebuffer 0 0 width height 0 0 width height GL_COLOR_BUFFER_BIT GL_NEAREST)
    (glBindFramebuffer GL_READ_FRAMEBUFFER 0))
  
  
  (method public (resize width height)
    (free-resources)
    (initialize-buffers width height))
  
  
  (method public (free-resources)
    (when color-buffer
      (glDeleteRenderbuffers* color-buffer))
    (when depth-buffer
      (glDeleteRenderbuffers* depth-buffer))
    (when frame-buffer
      (glDeleteFramebuffers* frame-buffer))
    (set! color-buffer #f)
    (set! depth-buffer #f)
    (set! frame-buffer #f))))
