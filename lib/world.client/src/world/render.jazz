;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; Rendering
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;    Edouard Hebert


(module world.render jazz


(import (jazz.opengl.glew)
        (jazz.syntax (phase syntax))
        (world)
        (world.autoload)
        (world.configure)
        (world.context)
        (world.dye)
        (world.gadget)
        (world.geometry)
        (world.lighting)
        (world.mesh)
        (world.overlay)
        (world.renderer)
        (world.renderers)
        (world.syntax (phase syntax)))


(proclaim (warn optimizations))


;;;
;;;; Mutex
;;;


(definition public render-mutex
  (make-mutex 'render))


(definition public (with-render-mutex thunk)
  (mutex-lock! render-mutex)
  (prog1 (thunk)
    (mutex-unlock! render-mutex)))


;;;
;;;; Draw
;;;


(definition x-rays-overlay <dye>
  (dye 1. 1. 1. .6))


(definition protected visited-sectors <fx>
  0)

(definition protected rendered-sectors <fx>
  0)

(definition protected rendered-meshes <fx>
  0)

(definition protected rendered-triangles <fx>
  0)

(definition protected rendered-entities <fx>
  0)


(definition protected (draw-sectors) <void>
  (declare (proper-tail-calls))
  (declare (optimize-dead-local-variables))
  (declare (inline))
  (declare (inlining-limit 1000))
  (site (draw-sectors on?: #t parent: draw-world)
    (let ((world (current-world)))
      (let ((block-program (get-block-program world))
            (block-opaque (get-block-opaque world))
            (x-rays? (get-x-rays? world))
            (x-rays-category (get-x-rays-category world))
            (view-distance (get-view-distance world))
            (draw-blocks? (get-draw-blocks? world))
            (draw-entities? (get-draw-entities? world)))
        (set! visited-sectors 0)
        (set! rendered-sectors 0)
        (set! rendered-meshes 0)
        (set! rendered-triangles 0)
        (set! rendered-entities 0)
        
        (reset-renderers)
        
        (use block-program)
        (bind-material block-program block-opaque)
        (bind-uniforms block-program #f (if x-rays? x-rays-overlay no-overlay) 0. (current-block-lighting))
        
        (let ((zone (current-zone))
              (camera (current-camera)))
          (let ((camera-index (get-sector-index camera))
                (camera-pos (get-position camera)))
            (let ((sectors (eye-neighbor-sectors zone camera-index view-distance)))
              (loop (for i from 0 below (vector-length sectors))
                    (when (or (not render-triangles-max) (< rendered-triangles render-triangles-max))
                      (let ((sector <Sector> (vector-ref sectors i)))
                        (let ((center (get-center sector)))
                          (when (in-frustum? camera center)
                            (update-visual sector)
                            ;; blocks
                            (when draw-blocks?
                              ;; sector
                              (increase! visited-sectors)
                              ;; mesh
                              (let ((mesh (get-mesh sector)))
                                (when mesh
                                  (bind-mesh-matrix block-program (get-position& sector) camera-pos)
                                  (if (not x-rays?)
                                      (draw-mesh block-program mesh)
                                    ;; x-rays
                                    (glEnable GL_SAMPLE_ALPHA_TO_COVERAGE_ARB)
                                    (draw-mesh block-program mesh)
                                    (glDisable GL_SAMPLE_ALPHA_TO_COVERAGE_ARB))
                                  (increase! rendered-sectors)
                                  (increase! rendered-meshes)
                                  (increase! rendered-triangles (allege (get-indices (get-vertices-buffer mesh))))))
                              ;; material-mesh
                              (let ((mesh (get-material-mesh sector)))
                                (when mesh
                                  (let ((material (get-material mesh)))
                                    (let ((renderer <Base-Renderer> (or (get-override-renderer) (get-renderer material))))
                                      (add-mesh renderer mesh sector)
                                      (increase! rendered-meshes)
                                      (increase! rendered-triangles (allege (get-indices (get-vertices-buffer mesh))))))))
                              ;; other-meshes
                              (unless x-rays-category
                                (site (register-meshes on?: #f parent: draw-sectors)
                                  (let ((other-meshes (get-other-meshes sector)))
                                    (when other-meshes
                                      (loop (for mesh <Mesh> in-vector other-meshes)
                                            (let ((material (get-material mesh)))
                                              (let ((renderer <Base-Renderer> (or (get-override-renderer) (get-renderer material))))
                                                (add-mesh renderer mesh sector)
                                                (increase! rendered-meshes)
                                                (increase! rendered-triangles (allege (get-indices (get-vertices-buffer mesh))))))))))))
                            ;; categorized-mesh
                            (when x-rays-category
                              (let ((mesh (get-categorized-mesh sector)))
                                (when mesh
                                  (let ((material (get-material mesh)))
                                    (when (eq? (get-name material) x-rays-category)
                                      (let ((renderer <Base-Renderer> (get-renderer material)))
                                        (add-mesh renderer mesh sector)
                                        (increase! rendered-meshes)
                                        (increase! rendered-triangles (allege (get-indices (get-vertices-buffer mesh))))))))))
                            ;; entities
                            (when draw-entities?
                              (site (register-entities on?: #f parent: draw-sectors)
                                (let ((entities (get-entities (get-expanse sector))))
                                  (when (not-null? entities)
                                    (let ((me (current-me+))
                                          (draw-gadgets? (effective-draw-gadgets? world)))
                                      (for-each (lambda (entity)
                                                  (unless (eq? entity me)
                                                    (when (or draw-gadgets? (is-not? entity Gadget))
                                                      (register-entity entity)
                                                      (increase! rendered-entities))))
                                                entities))))))
                            ;; texture-elements
                            (when draw-blocks?
                              (let ((elements (get-texture-elements sector)))
                                (when (not-null? elements)
                                  (register-texture-elements elements))))))))))))
        
        (unbind-uniforms block-program)
        (unuse block-program)
        (gl-check-error))))))
