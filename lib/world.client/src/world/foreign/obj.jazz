;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; World Obj
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2013
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.foreign.obj jazz


(import (jazz.platform.types))


(c-declare #<<c-includes
	#include "list.c"
	#include "string_extra.c"
	#include "obj_parser.c"
c-includes
)


(definition public c-test
  (c-function () scheme-object
    #<<end-of-c-code
    ___SCMOBJ values = ___EXT(___alloc_scmobj) (___sBOXVALUES, 3*sizeof(___SCMOBJ), ___STILL);
    ___SCMOBJ *ptr = ___CAST(___SCMOBJ*,___BODY(values));
    ptr[0] = ___FIX(4);
    ptr[1] = ___FIX(5);
    ptr[2] = ___FIX(6);
    ___result = values;
    ___EXT(___release_scmobj)(values);
end-of-c-code
))


(definition public parse-obj
  (c-function (char-string) scheme-object
    #<<end-of-c-code
     obj_scene_data data;
     parse_obj_scene(&data, ___arg1);
     
     ___SCMOBJ r = ___EXT(___alloc_scmobj) (___sF64VECTOR, data.face_count*9*3*sizeof(___F64), ___STILL);
     double *ptr = ___CAST(double*,___BODY(r));
     
     obj_face* f;
     obj_vector *v,*n,*t;
     int index = 0;
     int i;
     int j;
     for(i=0; i<data.face_count; i++)
     {
      f = data.face_list[i];
      for(j=0; j<3; j++)
      {
          v = data.vertex_list[f->vertex_index[j]];
          n = data.vertex_normal_list[f->normal_index[j]];
          t = data.vertex_texture_list[f->texture_index[j]];
          ptr[index++] = (double)v->e[0];
          ptr[index++] = (double)v->e[1];
          ptr[index++] = (double)v->e[2];
          ptr[index++] = (double)t->e[0];
          ptr[index++] = (double)t->e[1];
          ptr[index++] = 1.0f;
          ptr[index++] = (double)n->e[0];
          ptr[index++] = (double)n->e[1];
          ptr[index++] = (double)n->e[2];
      }
     }
     
     delete_obj_data(&data);
     ___result = r;
end-of-c-code
)))
