;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Triangulate
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.foreign.triangulate jazz


(import (jazz.foreign)
        (jazz.platform.types))


(c-include "<stdlib.h>")
(c-include "<stdio.h>")


(c-declare world.foreign.triangulate #/C/
	#include "delaunay.c"
//#)


(c-declare world.foreign.triangulate #/C/
int XYZCompare(const void *v1,const void *v2)
{
   XYZ *p1,*p2;
   p1 = (XYZ*) v1;
   p2 = (XYZ*) v2;
   if (p1->x < p2->x)
      return(-1);
   else if (p1->x > p2->x)
      return(1);
   else 
      return(0); 
}
//#)


(c-external (make-f64vector-still int) scheme-object
  #/C/
    ___SCMOBJ result = ___EXT(___alloc_scmobj) (___ps, ___sF64VECTOR, ___arg1*sizeof(___F64));
    ___EXT(___release_scmobj)(result);
    ___return(result);
//#)


(c-external (triangulate scheme-object int) scheme-object
  #/C/
    double *ptr = ___CAST(double*, ___BODY(___arg1));
    int count = ___arg2;
    int ntri = 0;
    ITRIANGLE *v;
    XYZ *p = (XYZ *) ptr;
    int nv = count;
    printf("Read %d points\n",nv);
    v = (ITRIANGLE*) malloc(3*nv*sizeof(ITRIANGLE));
    qsort(p, nv, sizeof(XYZ), &XYZCompare);
    Triangulate(nv, p, v, &ntri);
    printf("Formed %d triangles\n",ntri);
    int i;
//    for (i=0;i<ntri;i++) {
//       printf("f3 %g %g %g %g %g %g %g %g %g\n",
//         p[v[i].p1].x,p[v[i].p1].y,p[v[i].p1].z,
//         p[v[i].p2].x,p[v[i].p2].y,p[v[i].p2].z,
//         p[v[i].p3].x,p[v[i].p3].y,p[v[i].p3].z);
//    }
    ___SCMOBJ r = ___EXT(___alloc_scmobj) (___ps, ___sVECTOR, 3*ntri*sizeof(___SCMOBJ));
    ___SCMOBJ *r_ptr = ___CAST(___SCMOBJ*,___BODY(r));
    int n = 0;
    for (i=0; i<ntri; i++) {
      r_ptr[n++] = ___FIX(v[i].p1);
      r_ptr[n++] = ___FIX(v[i].p2);
      r_ptr[n++] = ___FIX(v[i].p3);
    }
    ___return(r);
//#))
