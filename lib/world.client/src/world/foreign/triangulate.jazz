;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Triangulate
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is WorldScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2014
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See http://github.com/gcartier/world for details.


(module world.foreign.triangulate jazz


(import (jazz.foreign)
        (jazz.platform.types))


(c-include "<stdlib.h>")
(c-include "<stdio.h>")


(c-declare world.foreign.triangulate #<<c-includes
	#include "delaunay.c"
c-includes
)


(c-declare world.foreign.triangulate #<<c-code
int XYZCompare(void *v1,void *v2)
{
   XYZ *p1,*p2;
   p1 = v1;
   p2 = v2;
   if (p1->x < p2->x)
      return(-1);
   else if (p1->x > p2->x)
      return(1);
   else 
      return(0); 
}
c-code
)


(c-external (make-f64vector-still int) scheme-object
    #<<end-of-c-code
    ___result = ___EXT(___alloc_scmobj) (NULL, ___sF64VECTOR, ___arg1*sizeof(___F64));
    ___EXT(___release_scmobj)(___result);
end-of-c-code
)


(c-external (triangulate scheme-object int) scheme-object
    #<<end-of-c-code
    double *ptr = ___CAST(double*, ___BODY(___arg1));
    int count = ___arg2;
    int ntri = 0;
    ITRIANGLE *v;
    XYZ *p = (XYZ *) ptr;
    int nv = count;
    printf("Read %d points\n",nv);
    v = malloc(3*nv*sizeof(ITRIANGLE));
    qsort(p, nv, sizeof(XYZ), (void*) XYZCompare);
    Triangulate(nv, p, v, &ntri);
    printf("Formed %d triangles\n",ntri);
    int i;
//    for (i=0;i<ntri;i++) {
//       printf("f3 %g %g %g %g %g %g %g %g %g\n",
//         p[v[i].p1].x,p[v[i].p1].y,p[v[i].p1].z,
//         p[v[i].p2].x,p[v[i].p2].y,p[v[i].p2].z,
//         p[v[i].p3].x,p[v[i].p3].y,p[v[i].p3].z);
//    }
    ___SCMOBJ r = ___EXT(___alloc_scmobj) (___sVECTOR, 3*ntri*sizeof(___SCMOBJ), ___STILL);
    ___SCMOBJ *r_ptr = ___CAST(___SCMOBJ*,___BODY(r));
    int n = 0;
    for (i=0; i<ntri; i++) {
      r_ptr[n++] = ___FIX(v[i].p1);
      r_ptr[n++] = ___FIX(v[i].p2);
      r_ptr[n++] = ___FIX(v[i].p3);
    }
    ___result = r;
    ___EXT(___release_scmobj)(___result);
end-of-c-code
))
