;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Foreign
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is WorldScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2014
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See http://github.com/gcartier/world for details.


(module world.foreign jazz


(import (jazz.foreign)
        (jazz.graphic.opengl.glew)
        (jazz.platform.types))


(c-external (test-malloc int) void*
    #<<end-of-c-code
    ___result = malloc(___arg1);
end-of-c-code
)


(c-include "<GL/glew.h>")


(c-external (sizeof-size_t ) int
  "___result = sizeof(size_t);")

(c-external (sizeof-float ) int
  "___result = sizeof(float);")

(c-external (sizeof-double ) int
  "___result = sizeof(double);")


(definition public size_t-size <fx>
  (sizeof-size_t))

(definition public float-size <fx>
  (sizeof-float))

(definition public double-size <fx>
  (sizeof-double))


(c-external (subu8vector->foreign scheme-object int int) void*
    #<<end-of-c-code
    ___U8 *ptr = ___CAST(___U8*,___BODY(___arg1));
    int from = ___arg2;
    int to = ___arg3;
    int size = to - from;
    ___U8 *foreign = malloc(size);
    memcpy(foreign, ptr + from, size);
    ___result = foreign;
end-of-c-code
)


(c-external (BGRA-premultiply-alpha scheme-object int int bool) void*
    #<<end-of-c-code
    ___U8 *ptr = ___CAST(___U8*,___BODY(___arg1));
    int from = ___arg2;
    int to = ___arg3;
    int premultiply = ___arg4;
    int size = to - from;
    ___U8 *foreign = malloc(size);
    memcpy(foreign, ptr + from, size);
    if (premultiply)
    {
        int i, b, g, r, a;
        float alpha;
        for (i = 0; i < size; i += 4)
        {
            b = foreign[i];
            g = foreign[i+1];
            r = foreign[i+2];
            a = foreign[i+3];
            alpha = ((float) a) / 255.;
            foreign[i]   = ((float) b) * alpha;
            foreign[i+1] = ((float) g) * alpha;
            foreign[i+2] = ((float) r) * alpha;
        }
    }
    ___result = foreign;
end-of-c-code
)


@opengl-debugging
(c-declare world.foreign #<<c-declare
BOOL logging = TRUE;

FILE *logfile = NULL;

static void print(char* string)
{
	if (logging)
	{
		if (!logfile)
			logfile = fopen("log.txt", "w");
		
		fprintf(logfile, string);
		fflush(logfile);
	}
}

static void vprint(char* format, va_list arguments)
{
	if (logging)
	{
		if (!logfile)
			logfile = fopen("log.txt", "w");
		
		vfprintf(logfile, format, arguments);
		fflush(logfile);
	}
}

static void printlog(char* format, ...)
{
	va_list arguments;

	va_start(arguments, format);
	vprint(format, arguments);
	print("\n");
	va_end(arguments);
}
c-declare
)


@opengl-debugging
(c-declare world.foreign #<<c-declare
static void message_callback(GLenum source,
                             GLenum type,
                             GLuint id,
                             GLenum severity,
                             GLsizei length,
                             const GLchar* message,
                             GLvoid* userParam)
{
	printlog("%s", message);
}
c-declare
)


@opengl-debugging
(c-external (gl-setup-debugging) int
    #<<end-of-c-code
	// glDebugMessageEnableAMD(GL_DONT_CARE, GL_DONT_CARE, GL_DONT_CARE, 0, NULL, GL_TRUE);
	glDebugMessageCallbackAMD(&message_callback, NULL);
	glDebugMessageInsertAMD(GL_DEBUG_CATEGORY_OTHER_AMD, GL_DEBUG_SEVERITY_LOW_AMD, 0, 5, "hello world");
end-of-c-code
)


(c-external (gl-sphere GLdouble GLint GLint) void
    #<<end-of-c-code
    GLdouble radius = ___arg1;
    GLint slices = ___arg2;
    GLint stacks = ___arg3;
    
    GLUquadricObj *quadric = gluNewQuadric();
    gluQuadricDrawStyle(quadric, GLU_FILL);
    gluQuadricNormals(quadric, GLU_SMOOTH);
    gluSphere(quadric, radius, slices, stacks);
    gluDeleteQuadric(quadric);
end-of-c-code
)


(c-external (gl-cylinder GLdouble GLdouble GLdouble GLint GLint) void
    #<<end-of-c-code
    GLint base = ___arg1;
    GLint top = ___arg2;
    GLint height = ___arg3;
    GLint slices = ___arg4;
    GLint stacks = ___arg5;
    
    GLUquadricObj *quadric = gluNewQuadric();
    gluQuadricDrawStyle(quadric, GLU_FILL);
    gluQuadricNormals(quadric, GLU_SMOOTH);
    gluCylinder(quadric, base, top, height, slices, stacks);
    gluDeleteQuadric(quadric);
end-of-c-code
)


(c-external (render-triangles scheme-object int GLint) void
    #<<end-of-c-code
    double *ptr = ___CAST(double*,___BODY(___arg1));
    int count = ___arg2;
    GLint mode = ___arg3;
    int n = 0;
    while (n < count)
    {
        glNormal3f(ptr[n+6], ptr[n+7], ptr[n+8]);
        glBegin(mode);
        glVertex3f(ptr[n+0], ptr[n+1], ptr[n+2]);
        glVertex3f(ptr[n+9], ptr[n+10], ptr[n+11]);
        glVertex3f(ptr[n+18], ptr[n+19], ptr[n+20]);
        glEnd();
        n += 27;
    }
end-of-c-code
)


;; x1 x2 y1 y2 z1 z2
(c-external (render-block GLfloat GLfloat GLfloat GLfloat GLfloat GLfloat GLuint) void
    "// top
     glNormal3f(0.0, 1.0, 0.0);
     glBegin(___arg7);
     glVertex3f(___arg2, ___arg4, ___arg5);
     glVertex3f(___arg1, ___arg4, ___arg5);
     glVertex3f(___arg1, ___arg4, ___arg6);
     glVertex3f(___arg2, ___arg4, ___arg6);
     glEnd();
     // bottom
     glNormal3f(0.0, -1.0, 0.0);
     glBegin(___arg7);
     glVertex3f(___arg2, ___arg3, ___arg6);
     glVertex3f(___arg1, ___arg3, ___arg6);
     glVertex3f(___arg1, ___arg3, ___arg5);
     glVertex3f(___arg2, ___arg3, ___arg5);
     glEnd();
     // front
     glNormal3f(0.0, 0.0, 1.0);
     glBegin(___arg7);
     glVertex3f(___arg1, ___arg3, ___arg6);
     glVertex3f(___arg2, ___arg3, ___arg6);
     glVertex3f(___arg2, ___arg4, ___arg6);
     glVertex3f(___arg1, ___arg4, ___arg6);
     glEnd();
     // back
     glNormal3f(0.0, 0.0, -1.0);
     glBegin(___arg7);
     glVertex3f(___arg2, ___arg3, ___arg5);
     glVertex3f(___arg1, ___arg3, ___arg5);
     glVertex3f(___arg1, ___arg4, ___arg5);
     glVertex3f(___arg2, ___arg4, ___arg5);
     glEnd();
     // left
     glNormal3f(-1.0, 0.0, 0.0);
     glBegin(___arg7);
     glVertex3f(___arg1, ___arg4, ___arg6);
     glVertex3f(___arg1, ___arg4, ___arg5);
     glVertex3f(___arg1, ___arg3, ___arg5);
     glVertex3f(___arg1, ___arg3, ___arg6);
     glEnd();
     // right
     glNormal3f(1.0, 0.0, 0.0);
     glBegin(___arg7);
     glVertex3f(___arg2, ___arg4, ___arg5);
     glVertex3f(___arg2, ___arg4, ___arg6);
     glVertex3f(___arg2, ___arg3, ___arg6);
     glVertex3f(___arg2, ___arg3, ___arg5);
     glEnd();")


(c-external (glGenFramebuffersEXT*) GLuint
    "GLuint buffer;
     glGenFramebuffersEXT(1, &buffer);
     ___result = buffer;")
   
   
(c-external (glGenRenderbuffersEXT*) GLuint
    "GLuint buffer;
     glGenRenderbuffersEXT(1, &buffer);
     ___result = buffer;")


(c-external (glDeleteTextures* GLuint) void
    "glDeleteTextures(1, &___arg1);")


(c-external (glDeleteRenderbuffersEXT* GLuint) void
    "glDeleteRenderbuffersEXT(1, &___arg1);")


(c-external (glDeleteFramebuffersEXT* GLuint) void
    "glDeleteFramebuffersEXT(1, &___arg1);")


(c-external (glDeleteBuffers* GLuint) void
    "glDeleteBuffers(1, &___arg1);")


(c-external (glDeleteVertexArrays* GLuint) void
    "glDeleteVertexArrays(1, &___arg1);")


(c-external (glGenVertices*) GLuint
    "GLuint vbo_fbo_vertices = 0;
    GLfloat fbo_vertices[] = {
    -1, -1,
     1, -1,
    -1,  1,
     1,  1,
  };
  glGenBuffers(1, &vbo_fbo_vertices);
  glBindBuffer(GL_ARRAY_BUFFER, vbo_fbo_vertices);
  glBufferData(GL_ARRAY_BUFFER, sizeof(fbo_vertices), fbo_vertices, GL_STATIC_DRAW);
  glBindBuffer(GL_ARRAY_BUFFER, 0);
  ___result = vbo_fbo_vertices;")


(c-external (glGetShaderInfoLog* GLhandleARB GLsizei) char-string
    "GLchar* log = (GLchar*)malloc(___arg2);
     GLsizei slen = 0;
     glGetShaderInfoLog(___arg1, ___arg2, &slen, log);
     ___result = log;")


(c-external (glGetProgramInfoLog* GLhandleARB GLsizei) char-string
    "GLchar* log = (GLchar*)malloc(___arg2);
     GLsizei slen = 0;
     glGetProgramInfoLog(___arg1, ___arg2, &slen, log);
     ___result = log;")


(c-external (glTexCoordPointer* GLint GLenum GLsizei scheme-object int) void
    "float *ptr = ___CAST(float*,___BODY(___arg4));
     glTexCoordPointer(___arg1, ___arg2, ___arg3, ptr + ___arg5);")


(c-external (glVertexPointer* GLint GLenum GLsizei scheme-object int) void
    "float *ptr = ___CAST(float*,___BODY(___arg4));
     glVertexPointer(___arg1, ___arg2, ___arg3, ptr + ___arg5);")


(c-external (glMultMatrixf* scheme-object) void
    "glMultMatrixf(___CAST(float*,___BODY(___arg1)));")


(c-external (glMultMatrixd* scheme-object) void
    "glMultMatrixd(___CAST(double*,___BODY(___arg1)));")
)
