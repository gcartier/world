;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Foreign
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2016
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.foreign jazz


(import (jazz.foreign)
        (jazz.opengl.glew)
        (jazz.platform.types))


(c-external (test-malloc int) void*
  #/C/
    ___result = malloc(___arg1);
//#)


(c-include "<cstdio>")
(c-include "<stdlib.h>")
(c-include "<string.h>")
(c-include "<GL/glew.h>")


(c-external (sizeof-size_t) int
  #/C/
    ___result = sizeof(size_t);
//#)

(c-external (sizeof-float) int
  #/C/
    ___result = sizeof(float);
//#)

(c-external (sizeof-double) int
  #/C/
    ___result = sizeof(double);
//#)


(definition public size_t-size <fx>
  (sizeof-size_t))

(definition public float-size <fx>
  (sizeof-float))

(definition public double-size <fx>
  (sizeof-double))


(c-external (still-obj-refcount scheme-object) int
  #/C/
#define ___STILL_BODY_OFS 6
#define ___STILL_REFCOUNT_OFS 1
    ___result = ___UNTAG(___arg1)[___BODY_OFS - ___STILL_BODY_OFS + ___STILL_REFCOUNT_OFS];
//#)


(c-external (load-crg char-string int long) scheme-object
  #/C/
    FILE *f = fopen(___arg1, "rb");
    long size = ___arg3;

    ___SCMOBJ r = ___EXT(___alloc_scmobj) (___ps, ___sU8VECTOR, size);
    ___U8 *ptr = ___CAST(___U8*,___BODY(r));
    fseek(f, ___arg2, SEEK_SET);
    fread(ptr, size, 1, f);
    fclose(f);

    ___result = r;
    ___EXT(___release_scmobj)(r);
//#)


(c-external (still-u8vector-body scheme-object) void*
  #/C/
    ___U8 *ptr = ___CAST(___U8*,___BODY(___arg1));
    ___result_voidstar = ptr;
//#)


(c-external (save-crg char-string void* int) void
  #/C/
    ___U8 *ptr = (___U8 *) ___arg2;
    int size = ___arg3;
    FILE *f = fopen(___arg1, "ab");

    fwrite(ptr, 1, size, f);
    fclose(f);
//#)


(c-external (u8vector-find int scheme-object int int) scheme-object
  #/C/
    int target = ___arg1;
    ___U8 *vec = ___CAST(___U8*,___BODY(___arg2));
    int len = ___arg3;
    int from = ___arg4;
    if (from >= len)
        ___result = ___FAL;
    else
    {
	    ___U8 *ptr = vec + from;
	    void* res = memchr((const void*) ptr, target, len - from);
	    if (res)
	        ___result = ___FIX((___U8*) res - vec);
	    else
	        ___result = ___FAL;
	}
//#)


(c-external (subu8vector->foreign scheme-object int int) void*
  #/C/
    ___U8 *ptr = ___CAST(___U8*,___BODY(___arg1));
    int from = ___arg2;
    int to = ___arg3;
    int size = to - from;
    ___U8 *foreign = malloc(size);
    memcpy(foreign, ptr + from, size);
    ___result = foreign;
//#)


(c-external (BGRA-premultiply-alpha scheme-object int int bool) void*
  #/C/
    ___U8 *ptr = ___CAST(___U8*,___BODY(___arg1));
    int from = ___arg2;
    int to = ___arg3;
    int premultiply = ___arg4;
    int size = to - from;
    ___U8 *foreign = malloc(size);
    memcpy(foreign, ptr + from, size);
    if (premultiply)
    {
        int i, b, g, r, a;
        float alpha;
        for (i = 0; i < size; i += 4)
        {
            b = foreign[i];
            g = foreign[i+1];
            r = foreign[i+2];
            a = foreign[i+3];
            alpha = ((float) a) / 255.;
            foreign[i]   = ((float) b) * alpha;
            foreign[i+1] = ((float) g) * alpha;
            foreign[i+2] = ((float) r) * alpha;
        }
    }
    ___result = foreign;
//#)


@opengl-debugging
(c-declare world.foreign #/C/
BOOL logging = TRUE;

FILE *logfile = NULL;

static void print(char* string)
{
	if (logging)
	{
		if (!logfile)
			logfile = fopen("log.txt", "w");
		
		fprintf(logfile, string);
		fflush(logfile);
	}
}

static void vprint(char* format, va_list arguments)
{
	if (logging)
	{
		if (!logfile)
			logfile = fopen("log.txt", "w");
		
		vfprintf(logfile, format, arguments);
		fflush(logfile);
	}
}

static void printlog(char* format, ...)
{
	va_list arguments;

	va_start(arguments, format);
	vprint(format, arguments);
	print("\n");
	va_end(arguments);
}
//#)


@opengl-debugging
(c-declare world.foreign #/C/
static void message_callback(GLenum source,
                             GLenum type,
                             GLuint id,
                             GLenum severity,
                             GLsizei length,
                             const GLchar* message,
                             GLvoid* userParam)
{
	printlog("%s", message);
}
//#)


@opengl-debugging
(c-external (gl-setup-debugging) int
  #/C/
	// glDebugMessageEnableAMD(GL_DONT_CARE, GL_DONT_CARE, GL_DONT_CARE, 0, NULL, GL_TRUE);
	glDebugMessageCallbackAMD(&message_callback, NULL);
	glDebugMessageInsertAMD(GL_DEBUG_CATEGORY_OTHER_AMD, GL_DEBUG_SEVERITY_LOW_AMD, 0, 5, "hello world");
//#)


(c-external (glGenFramebuffers*) GLuint
  #/C/
    GLuint buffer;
    glGenFramebuffers(1, &buffer);
    ___result = buffer;
//#)
   
   
(c-external (glGenRenderbuffers*) GLuint
  #/C/
    GLuint buffer;
    glGenRenderbuffers(1, &buffer);
    ___result = buffer;
//#)


(c-external (glDeleteTextures* GLuint) void
  #/C/
    glDeleteTextures(1, &___arg1);
//#)


(c-external (glDeleteRenderbuffers* GLuint) void
  #/C/
    glDeleteRenderbuffers(1, &___arg1);
//#)


(c-external (glDeleteFramebuffers* GLuint) void
  #/C/
    glDeleteFramebuffers(1, &___arg1);
//#)


(c-external (glDeleteBuffers* GLuint) void
  #/C/
    glDeleteBuffers(1, &___arg1);
//#)


(c-external (glDeleteVertexArrays* GLuint) void
  #/C/
    glDeleteVertexArrays(1, &___arg1);
//#)


(c-external (glGenVertices*) GLuint
  #/C/
    GLuint vbo_fbo_vertices = 0;
    GLfloat fbo_vertices[] = {
      -1, -1,
       1, -1,
      -1,  1,
       1,  1,
    };
    glGenBuffers(1, &vbo_fbo_vertices);
    glBindBuffer(GL_ARRAY_BUFFER, vbo_fbo_vertices);
    glBufferData(GL_ARRAY_BUFFER, sizeof(fbo_vertices), fbo_vertices, GL_STATIC_DRAW);
    glBindBuffer(GL_ARRAY_BUFFER, 0);
    ___result = vbo_fbo_vertices;
//#)


(c-external (glGetShaderInfoLog* GLuint GLsizei) char-string
  #/C/
    GLchar* log = (GLchar*)malloc(___arg2);
    GLsizei slen = 0;
    glGetShaderInfoLog(___arg1, ___arg2, &slen, log);
    ___result = log;
//#)


(c-external (glGetProgramInfoLog* GLuint GLsizei) char-string
  #/C/
    GLchar* log = (GLchar*)malloc(___arg2);
    GLsizei slen = 0;
    glGetProgramInfoLog(___arg1, ___arg2, &slen, log);
    ___result = log;
//#)


;;;
;;;; Random
;;;


(c-declare world.foreign
  #/C/
    ___S64 multiplier = 0x5DEECE66D;
    ___S64 addend = 0xB;
    ___S64 mask = ((___S64) 1 << 48) - 1;
    ___S64 seedUniquifier = 8682522807148012;
    
    void setSeed(___S64* thisSeed, ___S64 seed) {
        seed = ((seed) ^ multiplier) & mask;
        *thisSeed = seed;
    }

    ___S32 next(___S64* thisSeed, ___S32 bits) {
        ___S64 oldseed, nextseed;
        oldseed = *thisSeed;
        nextseed = (oldseed * multiplier + addend) & mask;
        *thisSeed = nextseed;
        return (___S32)((___U64) nextseed >> (48 - bits));
    }
//#)


(c-external (newRandom int64) int64*
  #/C/
    ___S64 seed = ___arg1;
    ___S64* thisSeed = (___S64*) malloc(sizeof(___S64));
    *thisSeed = 0;
    setSeed(thisSeed, seed);
    ___result = thisSeed;
//#)


(c-external (setSeed int64* int64) void
  #/C/
    setSeed(___arg1, ___arg2);
//#)


(c-external (setSeedAux int64* int32 int32 int64 int64 int64) void
  #/C/
    ___S64 j1 = (___S64)___arg2 * ___arg4;
    ___S64 k1 = (___S64)___arg3 * ___arg5;
    setSeed(___arg1, j1 ^ k1 ^ ___arg6);
//#)


(c-external (randomLong int64*) int64
  #/C/
    ___S64* thisSeed = ___arg1;
    ___result = ((___S64)(next(thisSeed, 32)) << 32) + next(thisSeed, 32);
//#)


(c-external (randomInt int64* int32) int32 <fx>
  #/C/
    ___S64* thisSeed = ___arg1;
    ___S32 n = ___arg2;
    
    if ((n & -n) == n)
        ___result = (___S32)((n * (___S64)next(thisSeed, 31)) >> 31);
    else
    {
	    ___S32 bits, val;
	    do {
	        bits = next(thisSeed, 31);
	        val = bits % n;
	    } while (bits - val + (n-1) < 0);
	    
	    ___result = val;
	}
//#)


(definition public (randomIntBetween rand min <fx> max <fx>) <fx>
  (+ min (randomInt rand (+ (- max min) 1))))


(definition public (randomBool rand) <bool>
  (= (randomInt rand 2) 1))


(c-external (randomFloat int64*) float <fl>
  #/C/
    ___S64* thisSeed = ___arg1;
    ___result = next(thisSeed, 24) / ((float)((___S64) 1 << 24));
//#)


;;;
;;;; Generation
;;;


(c-declare world.foreign
  #/C/
    ___S64 worldSeed;
    ___S64 chunkSeed;
//#)


(c-external (worldSeed) int64
  #/C/
    ___result = worldSeed;
//#)


(c-external (initWorldSeed int64) void
  #/C/
    worldSeed = ___arg1;
//#)


(c-external (initChunkSeed int64 int64) void
  #/C/
    chunkSeed = worldSeed;
    chunkSeed *= chunkSeed * 6364136223846793005L + 1442695040888963407L;
    chunkSeed += ___arg1;
    chunkSeed *= chunkSeed * 6364136223846793005L + 1442695040888963407L;
    chunkSeed += ___arg2;
    chunkSeed *= chunkSeed * 6364136223846793005L + 1442695040888963407L;
    chunkSeed += ___arg1;
    chunkSeed *= chunkSeed * 6364136223846793005L + 1442695040888963407L;
    chunkSeed += ___arg2;
//#)


(c-external (nextInt int32) int32
  #/C/
    ___S32 i = (___S32)((chunkSeed >> 24) % (___S64)___arg1);

    if (i < 0)
    {
        i += ___arg1;
    }

    chunkSeed *= chunkSeed * 6364136223846793005L + 1442695040888963407L;
    chunkSeed += worldSeed;
    ___result = i;
//#))
