;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Foreign
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.foreign jazz


(import (jazz.foreign)
        (jazz.opengl.glew)
        (jazz.opengl.render)
        (jazz.opengl.syntax (phase syntax))
        (jazz.opengl.trace)
        (jazz.platform.types))


(c-include "<stdio.h>")
(c-include "<stdlib.h>")
(c-include "<string.h>")
(c-include "<GL/glew.h>")


(cond-expand
  (mac
(c-include "<sys/resource.h>")

(c-external (get-rlimit-nofile) int
  #/C/
    struct rlimit limit;
    getrlimit(RLIMIT_NOFILE, &limit);
    ___return(limit.rlim_cur);
//#)

(c-external (set-rlimit-nofile int) void
  #/C/
    struct rlimit limit;
    limit.rlim_cur = ___arg1;
    setrlimit(RLIMIT_NOFILE, &limit);
//#))
  (else))


#; ;; ___BODY_OFS is undefined in latest Gambit
(c-external (still-obj-refcount scheme-object) int
  #/C/
#define ___STILL_BODY_OFS 6
#define ___STILL_REFCOUNT_OFS 1
    ___return(___UNTAG(___arg1)[___BODY_OFS - ___STILL_BODY_OFS + ___STILL_REFCOUNT_OFS]);
//#)


(c-external (load-crg char-string int long) scheme-object
  #/C/
    FILE *f = fopen(___arg1, "rb");
    long size = ___arg3;

    ___SCMOBJ r = ___EXT(___alloc_scmobj) (___ps, ___sU8VECTOR, size);
    ___U8 *ptr = ___CAST(___U8*,___BODY(r));
    fseek(f, ___arg2, SEEK_SET);
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wunused-result"
    fread(ptr, size, 1, f);
#pragma GCC diagnostic pop
    fclose(f);

    ___EXT(___release_scmobj)(r);
    ___return(r);
//#)


(c-external (save-crg char-string void* int) void
  #/C/
    ___U8 *ptr = (___U8 *) ___arg2;
    int size = ___arg3;
    FILE *f = fopen(___arg1, "ab");

    fwrite(ptr, 1, size, f);
    fclose(f);
//#)


(c-external (u8vector-find int scheme-object int int) scheme-object
  #/C/
    int target = ___arg1;
    ___U8 *vec = ___CAST(___U8*,___BODY(___arg2));
    int len = ___arg3;
    int from = ___arg4;
    if (from >= len)
        ___return(___FAL);
    else
    {
        ___U8 *ptr = vec + from;
        void* res = memchr((const void*) ptr, target, len - from);
        if (res)
            ___return(___FIX((___U8*) res - vec));
        else
            ___return(___FAL);
    }
//#)


(c-external (subu8vector->foreign scheme-object int int) void*
  #/C/
    ___U8 *ptr = ___CAST(___U8*,___BODY(___arg1));
    int from = ___arg2;
    int to = ___arg3;
    int size = to - from;
    ___U8 *foreign = (___U8*) malloc(size);
    memcpy(foreign, ptr + from, size);
    ___return(foreign);
//#)


(c-external (BGRA-premultiply-alpha scheme-object int int bool) :alloc void*
  #/C/
    ___U8 *ptr = ___CAST(___U8*,___BODY(___arg1));
    int from = ___arg2;
    int to = ___arg3;
    int premultiply = ___arg4;
    int size = to - from;
    ___U8 *foreign = (___U8*) malloc(size);
    memcpy(foreign, ptr + from, size);
    if (premultiply)
    {
        int i, b, g, r, a;
        float alpha;
        for (i = 0; i < size; i += 4)
        {
            b = foreign[i];
            g = foreign[i+1];
            r = foreign[i+2];
            a = foreign[i+3];
            alpha = ((float) a) / 255.;
            foreign[i]   = ((float) b) * alpha;
            foreign[i+1] = ((float) g) * alpha;
            foreign[i+2] = ((float) r) * alpha;
        }
    }
    ___return(foreign);
//#)


(c-external (BGRA-premultiply-alpha-free void*) :free void
  #/C/
    free(___arg1);
//#)


(definition public inline (pixel h <fx> v <fx> stride <fx>) <fx>
  (+ (* h 4) (* v stride)))


(c-external (pixel-ref! void* int scheme-object) void
  #/C/
    int n = ___arg2;
    ___U8 *ptr = ___CAST(___U8*, ___arg1) + n;
    ___U8 *res = ___CAST(___U8*,___BODY(___arg3));
    *res++ = *ptr++;
    *res++ = *ptr++;
    *res++ = *ptr++;
    *res = *ptr;
//#)


(c-external (pixel-set! void* int int int int int) void
  #/C/
    int n = ___arg2;
    int r = ___arg3;
    int g = ___arg4;
    int b = ___arg5;
    int a = ___arg6;
    ___U8 *ptr = ___CAST(___U8*, ___arg1) + n;
    *ptr++ = (___U8) b;
    *ptr++ = (___U8) g;
    *ptr++ = (___U8) r;
    *ptr = (___U8) a;
//#)


(c-external (pixel-float-set! void* int float float float float) void
  #/C/
    int n = ___arg2;
    float r = ___arg3;
    float g = ___arg4;
    float b = ___arg5;
    float a = ___arg6;
    ___U8 *ptr = ___CAST(___U8*, ___arg1) + n;
    *ptr++ = (___U8) (b * 255);
    *ptr++ = (___U8) (g * 255);
    *ptr++ = (___U8) (r * 255);
    *ptr = (___U8) (a * 255);
//#)


@opengl-debugging
(c-declare world.foreign #/C/
BOOL logging = TRUE;

FILE *logfile = NULL;

static void print(char* string)
{
    if (logging)
    {
        if (!logfile)
            logfile = fopen("log.txt", "w");
        
        fprintf(logfile, string);
        fflush(logfile);
    }
}

static void vprint(char* format, va_list arguments)
{
    if (logging)
    {
        if (!logfile)
            logfile = fopen("log.txt", "w");
        
        vfprintf(logfile, format, arguments);
        fflush(logfile);
    }
}

static void printlog(char* format, ...)
{
    va_list arguments;

    va_start(arguments, format);
    vprint(format, arguments);
    print("\n");
    va_end(arguments);
}
//#)


@opengl-debugging
(c-declare world.foreign #/C/
static void message_callback(GLenum source,
                             GLenum type,
                             GLuint id,
                             GLenum severity,
                             GLsizei length,
                             const GLchar* message,
                             GLvoid* userParam)
{
    printlog("%s", message);
}
//#)


@opengl-debugging
(c-external (gl-setup-debugging) int
  #/C/
    // glDebugMessageEnableAMD(GL_DONT_CARE, GL_DONT_CARE, GL_DONT_CARE, 0, NULL, GL_TRUE);
    glDebugMessageCallbackAMD(&message_callback, NULL);
    glDebugMessageInsertAMD(GL_DEBUG_CATEGORY_OTHER_AMD, GL_DEBUG_SEVERITY_LOW_AMD, 0, 5, "hello world");
//#)


(opengl-external (glGenFramebuffers*) GLuint
  #/C/
    GLuint buffer;
    glGenFramebuffers(1, &buffer);
    ___return(buffer);
//#)
   
   
(opengl-external (glGenRenderbuffers*) GLuint
  #/C/
    GLuint buffer;
    glGenRenderbuffers(1, &buffer);
    ___return(buffer);
//#)


(opengl-external (glDeleteRenderbuffers* GLuint) void
  #/C/
    glDeleteRenderbuffers(1, &___arg1);
//#)


(opengl-external (glDeleteFramebuffers* GLuint) void
  #/C/
    glDeleteFramebuffers(1, &___arg1);
//#)


(opengl-external (glGenVertices*) GLuint
  #/C/
    GLuint vbo_fbo_vertices = 0;
    GLfloat fbo_vertices[] = {
      -1, -1,
       1, -1,
      -1,  1,
       1,  1,
    };
    glGenBuffers(1, &vbo_fbo_vertices);
    glBindBuffer(GL_ARRAY_BUFFER, vbo_fbo_vertices);
    glBufferData(GL_ARRAY_BUFFER, sizeof(fbo_vertices), fbo_vertices, GL_STATIC_DRAW);
    glBindBuffer(GL_ARRAY_BUFFER, 0);
    ___return(vbo_fbo_vertices);
//#)


;;;
;;;; Random
;;;


(c-declare world.foreign
  #/C/
    ___S64 multiplier = 0x5DEECE66D;
    ___S64 addend = 0xB;
    ___S64 mask = ((___S64) 1 << 48) - 1;
    ___S64 seedUniquifier = 8682522807148012;
    
    void setSeed(___S64* thisSeed, ___S64 seed)
    {
        seed = ((seed) ^ multiplier) & mask;
        *thisSeed = seed;
    }

    ___S32 next(___S64* thisSeed, ___S32 bits)
    {
        ___S64 oldseed, nextseed;
        oldseed = *thisSeed;
        nextseed = (oldseed * multiplier + addend) & mask;
        *thisSeed = nextseed;
        return (___S32)((___U64) nextseed >> (48 - bits));
    }
    
    ___S32 randomInt(___S64* thisSeed, ___S32 n)
    {
        if ((n & -n) == n)
            return (___S32)((n * (___S64)next(thisSeed, 31)) >> 31);
        else
        {
            ___S32 bits, val;
            do {
                bits = next(thisSeed, 31);
                val = bits % n;
            } while (bits - val + (n-1) < 0);
            
            return val;
        }
    }
//#)


(c-external (newRandom int64) :alloc int64*
  #/C/
    ___S64 seed = ___arg1;
    ___S64* thisSeed = (___S64*) malloc(sizeof(___S64));
    *thisSeed = 0;
    setSeed(thisSeed, seed);
    ___return(thisSeed);
//#)


(c-external (freeRandom int64*) :free void
  #/C/
    free(___arg1);
//#)


(c-external (setSeed int64* int64) void
  #/C/
    setSeed(___arg1, ___arg2);
//#)


(c-external (setSeedAux int64* int32 int32 int64 int64 int64) void
  #/C/
    ___S64 j1 = (___S64)___arg2 * ___arg4;
    ___S64 k1 = (___S64)___arg3 * ___arg5;
    setSeed(___arg1, j1 ^ k1 ^ ___arg6);
//#)


(c-external (randomLong int64*) int64
  #/C/
    ___S64* thisSeed = ___arg1;
    ___return(((___S64)(next(thisSeed, 32)) << 32) + next(thisSeed, 32));
//#)


(c-external (randomInt int64* int32) int32 <fx>
  #/C/
    ___return(randomInt(___arg1, ___arg2));
//#)


(definition public (randomIntBetween rand min <fx> max <fx>) <fx>
  (+ min (randomInt rand (+ (- max min) 1))))


(definition public (randomBool rand) <bool>
  (= (randomInt rand 2) 1))


(c-external (randomFloat int64*) float <fl>
  #/C/
    ___S64* thisSeed = ___arg1;
    ___return(next(thisSeed, 24) / ((float)((___S64) 1 << 24)));
//#)


;;;
;;;; Generation
;;;


(c-declare world.foreign
  #/C/
    ___S64 worldSeed;
    ___S64 chunkSeed;
    
    void initChunkSeed(___S64 arg1, ___S64 arg2)
    {
        chunkSeed = worldSeed;
        chunkSeed *= chunkSeed * 6364136223846793005 + 1442695040888963407;
        chunkSeed += arg1;
        chunkSeed *= chunkSeed * 6364136223846793005 + 1442695040888963407;
        chunkSeed += arg2;
        chunkSeed *= chunkSeed * 6364136223846793005 + 1442695040888963407;
        chunkSeed += arg1;
        chunkSeed *= chunkSeed * 6364136223846793005 + 1442695040888963407;
        chunkSeed += arg2;
    }
    
    ___S32 nextInt(___S32 n)
    {
        ___S32 i = (___S32)((chunkSeed >> 24) % (___S64) n);
    
        if (i < 0)
        {
            i += n;
        }
    
        chunkSeed *= chunkSeed * 6364136223846793005 + 1442695040888963407;
        chunkSeed += worldSeed;
        
        return i;
    }
//#)


(c-external (worldSeed) int64
  #/C/
    ___return(worldSeed);
//#)


(c-external (initWorldSeed int64) void
  #/C/
    worldSeed = ___arg1;
//#)


(c-external (initChunkSeed int64 int64) void
  #/C/
    initChunkSeed(___arg1, ___arg2);
//#)


(c-external (nextInt int32) int32 <fx>
  #/C/
    ___return(nextInt(___arg1));
//#)


;;;
;;;; Layer
;;;


(c-declare world.foreign
  #/C/
#define MUSHROOM_ISLAND 14
#define DEEP_OCEAN      24

int selectRandom(int a, int b)
{
    if (nextInt(2) == 0)
        return a;
    else
        return b;
}

int selectModeOrRandom(int a, int b, int c, int d, ___BOOL fuzzy)
{
    int values[] = {a, b, c, d};
  
    if (fuzzy)
        return values[nextInt(4)];
    else
        return b == c && c == d ? b : (a == b && a == c ? a : (a == b && a == d ? a : (a == c && a == d ? a : (a == b && c != d ? a : (a == c && b != d ? a : (a == d && b != c ? a : (b == c && a != d ? b : (b == d && a != c ? b : (c == d && a != b ? c : values[nextInt(4)])))))))));
}
//#)


(c-external (zoomLayer int int int int scheme-object scheme-object scheme-object bool) void
  #/C/
    int areaX = ___arg1;
    int areaY = ___arg2;
    int areaWidth = ___arg3;
    int areaHeight = ___arg4;
    ___S32* pint = ___CAST(___S32*, ___BODY(___arg5));
    ___S32* aint = ___CAST(___S32*, ___BODY(___arg6));
    ___S32* aint2 = ___CAST(___S32*, ___BODY(___arg7));
    ___BOOL fuzzy = ___arg8;
    
    int i = areaX >> 1;
    int j = areaY >> 1;
    int k = (areaWidth >> 1) + 2;
    int l = (areaHeight >> 1) + 2;
    int i1 = k - 1 << 1;
    int j1 = l - 1 << 1;

    int k1;
    for (k1 = 0; k1 < l - 1; ++k1)
    {
        int l1 = (k1 << 1) * i1;
        int i2 = 0;
        int j2 = pint[i2 + 0 + (k1 + 0) * k];

        int k2;
        for (k2 = pint[i2 + 0 + (k1 + 1) * k]; i2 < k - 1; ++i2)
        {
            initChunkSeed((i2 + i << 1), (k1 + j << 1));
            int l2 = pint[i2 + 1 + (k1 + 0) * k];
            int i3 = pint[i2 + 1 + (k1 + 1) * k];
            aint[l1] = j2;
            aint[l1++ + i1] = selectRandom(j2, k2);
            aint[l1] = selectRandom(j2, l2);
            aint[l1++ + i1] = selectModeOrRandom(j2, l2, k2, i3, fuzzy);
            j2 = l2;
            k2 = i3;
        }
    }

    int j3;
    for (j3 = 0; j3 < areaHeight; ++j3)
    {
        memcpy(aint2 + (j3 * areaWidth), aint + ((j3 + (areaY & 1)) * i1 + (areaX & 1)), areaWidth * sizeof(___S32));
    }
//#)


(c-external (voronoiLayer int int int int scheme-object scheme-object scheme-object) void
  #/C/
    int areaX = ___arg1;
    int areaY = ___arg2;
    int areaWidth = ___arg3;
    int areaHeight = ___arg4;
    ___S32* pint = ___CAST(___S32*, ___BODY(___arg5));
    ___S32* aint = ___CAST(___S32*, ___BODY(___arg6));
    ___S32* aint2 = ___CAST(___S32*, ___BODY(___arg7));
    
    areaX = areaX - 2;
    areaY = areaY - 2;
    int i = areaX >> 2;
    int j = areaY >> 2;
    int k = (areaWidth >> 2) + 2;
    int l = (areaHeight >> 2) + 2;
    int i1 = k - 1 << 2;
    int j1 = l - 1 << 2;

    int k1;
    for (k1 = 0; k1 < l - 1; ++k1)
    {
        int l1 = 0;
        int i2 = pint[l1 + 0 + (k1 + 0) * k];

        int j2;
        for (j2 = pint[l1 + 0 + (k1 + 1) * k]; l1 < k - 1; ++l1)
        {
            double d0 = 3.6;
            initChunkSeed((l1 + i << 2), (k1 + j << 2));
            double d1 = ((double)nextInt(1024) / 1024.0 - 0.5) * 3.6;
            double d2 = ((double)nextInt(1024) / 1024.0 - 0.5) * 3.6;
            initChunkSeed((l1 + i + 1 << 2), (k1 + j << 2));
            double d3 = ((double)nextInt(1024) / 1024.0 - 0.5) * 3.6 + 4.0;
            double d4 = ((double)nextInt(1024) / 1024.0 - 0.5) * 3.6;
            initChunkSeed((l1 + i << 2), (k1 + j + 1 << 2));
            double d5 = ((double)nextInt(1024) / 1024.0 - 0.5) * 3.6;
            double d6 = ((double)nextInt(1024) / 1024.0 - 0.5) * 3.6 + 4.0;
            initChunkSeed((l1 + i + 1 << 2), (k1 + j + 1 << 2));
            double d7 = ((double)nextInt(1024) / 1024.0 - 0.5) * 3.6 + 4.0;
            double d8 = ((double)nextInt(1024) / 1024.0 - 0.5) * 3.6 + 4.0;
            int k2 = pint[l1 + 1 + (k1 + 0) * k] & 255;
            int l2 = pint[l1 + 1 + (k1 + 1) * k] & 255;

            int i3;
            for (i3 = 0; i3 < 4; ++i3)
            {
                int j3 = ((k1 << 2) + i3) * i1 + (l1 << 2);

                int k3;
                for (k3 = 0; k3 < 4; ++k3)
                {
                    double d9 = ((double)i3 - d2) * ((double)i3 - d2) + ((double)k3 - d1) * ((double)k3 - d1);
                    double d10 = ((double)i3 - d4) * ((double)i3 - d4) + ((double)k3 - d3) * ((double)k3 - d3);
                    double d11 = ((double)i3 - d6) * ((double)i3 - d6) + ((double)k3 - d5) * ((double)k3 - d5);
                    double d12 = ((double)i3 - d8) * ((double)i3 - d8) + ((double)k3 - d7) * ((double)k3 - d7);

                    if (d9 < d10 && d9 < d11 && d9 < d12)
                    {
                        aint[j3++] = i2;
                    }
                    else if (d10 < d9 && d10 < d11 && d10 < d12)
                    {
                        aint[j3++] = k2;
                    }
                    else if (d11 < d9 && d11 < d10 && d11 < d12)
                    {
                        aint[j3++] = j2;
                    }
                    else
                    {
                        aint[j3++] = l2;
                    }
                }
            }

            i2 = k2;
            j2 = l2;
        }
    }
    
    int j3;
    for (j3 = 0; j3 < areaHeight; ++j3)
    {
        memcpy(aint2 + (j3 * areaWidth), aint + ((j3 + (areaY & 1)) * i1 + (areaX & 1)), areaWidth * sizeof(___S32));
    }
//#)


(c-external (smoothLayer int int int int scheme-object scheme-object) void
  #/C/
    int areaX = ___arg1;
    int areaY = ___arg2;
    int areaWidth = ___arg3;
    int areaHeight = ___arg4;
    ___S32* pint = ___CAST(___S32*, ___BODY(___arg5));
    ___S32* aint = ___CAST(___S32*, ___BODY(___arg6));
    
    int i = areaX - 1;
    int j = areaY - 1;
    int k = areaWidth + 2;
    int l = areaHeight + 2;

    int i1;
    for (i1 = 0; i1 < areaHeight; ++i1)
    {
        int j1;
        for (j1 = 0; j1 < areaWidth; ++j1)
        {
            int k1 = pint[j1 + 0 + (i1 + 1) * k];
            int l1 = pint[j1 + 2 + (i1 + 1) * k];
            int i2 = pint[j1 + 1 + (i1 + 0) * k];
            int j2 = pint[j1 + 1 + (i1 + 2) * k];
            int k2 = pint[j1 + 1 + (i1 + 1) * k];

            if (k1 == l1 && i2 == j2)
            {
                initChunkSeed((j1 + areaX), (i1 + areaY));

                if (nextInt(2) == 0)
                {
                    k2 = k1;
                }
                else
                {
                    k2 = i2;
                }
            }
            else
            {
                if (k1 == l1)
                {
                    k2 = k1;
                }

                if (i2 == j2)
                {
                    k2 = i2;
                }
            }

            aint[j1 + i1 * areaWidth] = k2;
        }
    }
//#)


(c-external (mushroomIslandsLayer int int int int scheme-object scheme-object) void
  #/C/
    int areaX = ___arg1;
    int areaY = ___arg2;
    int areaWidth = ___arg3;
    int areaHeight = ___arg4;
    ___S32* pint = ___CAST(___S32*, ___BODY(___arg5));
    ___S32* aint = ___CAST(___S32*, ___BODY(___arg6));
    
    int i = areaX - 1;
    int j = areaY - 1;
    int k = areaWidth + 2;
    int l = areaHeight + 2;

    int i1;
    for (i1 = 0; i1 < areaHeight; ++i1)
    {
        int j1;
        for (j1 = 0; j1 < areaWidth; ++j1)
        {
            int k1 = pint[j1 + 0 + (i1 + 0) * k];
            int l1 = pint[j1 + 2 + (i1 + 0) * k];
            int i2 = pint[j1 + 0 + (i1 + 2) * k];
            int j2 = pint[j1 + 2 + (i1 + 2) * k];
            int k2 = pint[j1 + 1 + (i1 + 1) * k];
            initChunkSeed((j1 + areaX), (i1 + areaY));

            if (k2 == 0 && k1 == 0 && l1 == 0 && i2 == 0 && j2 == 0 && nextInt(100) == 0)
            {
                aint[j1 + i1 * areaWidth] = MUSHROOM_ISLAND;
            }
            else
            {
                aint[j1 + i1 * areaWidth] = k2;
            }
        }
    }
//#)


(c-external (deepOceanLayer int int int int scheme-object scheme-object) void
  #/C/
    int areaX = ___arg1;
    int areaY = ___arg2;
    int areaWidth = ___arg3;
    int areaHeight = ___arg4;
    ___S32* pint = ___CAST(___S32*, ___BODY(___arg5));
    ___S32* aint = ___CAST(___S32*, ___BODY(___arg6));
    
    int i = areaX - 1;
    int j = areaY - 1;
    int k = areaWidth + 2;
    int l = areaHeight + 2;

    int i1;
    for (i1 = 0; i1 < areaHeight; ++i1)
    {
        int j1;
        for (j1 = 0; j1 < areaWidth; ++j1)
        {
            int k1 = pint[j1 + 1 + (i1 + 1 - 1) * (areaWidth + 2)];
            int l1 = pint[j1 + 1 + 1 + (i1 + 1) * (areaWidth + 2)];
            int i2 = pint[j1 + 1 - 1 + (i1 + 1) * (areaWidth + 2)];
            int j2 = pint[j1 + 1 + (i1 + 1 + 1) * (areaWidth + 2)];
            int k2 = pint[j1 + 1 + (i1 + 1) * k];
            int l2 = 0;

            if (k1 == 0)
            {
                ++l2;
            }

            if (l1 == 0)
            {
                ++l2;
            }

            if (i2 == 0)
            {
                ++l2;
            }

            if (j2 == 0)
            {
                ++l2;
            }

            if (k2 == 0 && l2 > 3)
            {
                aint[j1 + i1 * areaWidth] = DEEP_OCEAN;
            }
            else
            {
                aint[j1 + i1 * areaWidth] = k2;
            }
        }
    }
//#))
