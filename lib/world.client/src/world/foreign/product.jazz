;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Foreign Product
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(unit world.foreign.product


;;;
;;;; Build
;;;


(cond-expand
  (windows
    (define jazz:world-foreign-units
      (let ((glew-include-path (jazz:quote-jazz-pathname "lib/jazz.opengl/foreign/windows/opengl/glew/include"))
            (glew-lib-path     (jazz:quote-jazz-pathname "lib/jazz.opengl/foreign/windows/opengl/glew/lib"))
            (obj-include-path  (jazz:quote-jazz-pathname "../world/foreign/obj"))
            (triangulate-include-path  (jazz:quote-jazz-pathname "../world/foreign/triangulate")))
        `((world.foreign cc-options: ,(string-append "-I" glew-include-path " -fpermissive") ld-options: ,(string-append "-L" glew-lib-path " -lopengl32 -lglu32 -lglew32"))
          (world.foreign.obj cc-options: ,(string-append "-I" obj-include-path))
          (world.foreign.triangulate cc-options: ,(string-append "-I" triangulate-include-path " -fpermissive"))))))
  (cocoa
    (define jazz:world-foreign-units
      (let ((glew-include-path (jazz:quote-jazz-pathname "lib/jazz.opengl/foreign/mac/opengl/glew/include"))
            (glew-lib-path     (jazz:quote-jazz-pathname "lib/jazz.opengl/foreign/mac/opengl/glew/lib"))
            (obj-include-path  (jazz:quote-jazz-pathname "../world/foreign/obj"))
            (triangulate-include-path  (jazz:quote-jazz-pathname "../world/foreign/triangulate")))
        `((world.foreign cc-options: ,(string-append "-I" glew-include-path " -fpermissive") ld-options: ,(string-append "-L" glew-lib-path " -framework OpenGL -lglew"))
          (world.foreign.obj cc-options: ,(string-append "-I" obj-include-path))
          (world.foreign.triangulate cc-options: ,(string-append "-I" triangulate-include-path " -fpermissive"))))))
  (else
    (define jazz:world-foreign-units
      (let ((obj-include-path  (jazz:quote-jazz-pathname "../world/foreign/obj"))
            (triangulate-include-path  (jazz:quote-jazz-pathname "../world/foreign/triangulate")))
        `((world.foreign.obj cc-options: ,(string-append "-I" obj-include-path))
          (world.foreign.triangulate cc-options: ,(string-append "-I" triangulate-include-path " -fpermissive")))))))


(define (jazz:build-world-foreign descriptor #!key (unit #f) (force? #f))
  (let ((unit-specs jazz:world-foreign-units))
    (jazz:custom-compile/build unit-specs unit: unit force?: force?)
    (if (or (not unit) (not (assq unit unit-specs)))
        (jazz:build-product-descriptor descriptor unit: unit force?: force?))))


;;;
;;;; Register
;;;


(jazz:register-product 'world.foreign
  build: jazz:build-world-foreign))
