;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; World I/O
;;;


(module world.io jazz


(import (jazz.designer)
        (jazz.io)
        (jazz.jml)
        (jazz.library)
        (jazz.library.component)
        (world)
        (world.autoload))


;;;
;;;; World
;;;


(definition public (new-world)
  (let ((model 'Live-World)
        (unit 'world.data))
    (let ((tag (string->symbol (format "<{a}>" model))))
      (let ((form (construct-form (list tag) (imports-locator (list unit)) #f)))
        (make-world form)))))


(definition public (open-world file)
  (make-world (read-form file)))


(definition public (make-world form)
  (let ((current world)
        (world (instantiate~ form)))
    (when current
      (close~ current))
    (unless (get-title~ world)
      (let ((origin (get-origin~ form)))
        (when origin
          (set-title~ world (get-name~ (get-parent~ origin))))))
    (set-designer~ world (new Designer form: form reference: world))
    (set-window~ world world-window)
    (setup-world~ world)
    (setup-opengl~ world)
    (initialize-world~ world)
    (let ((start-zone (get-start-zone~ world)))
      (if (not start-zone)
          (new-zone)
        (open-zone (new-file~ (get-parent~ (get-moniker~ world)) (format "{a}.zone" start-zone)))))
    (start-world~ world)
    world))


;;;
;;;; Zone
;;;


(definition public (new-zone)
  (let ((model 'Zone)
        (unit 'world.data))
    (let ((tag (string->symbol (format "<{a}>" model))))
      (let ((form (construct-form (list tag) (imports-locator (list unit)) #f)))
        (make-zone form)))))


(definition public (open-zone file)
  (make-zone (read-form file)))


(definition public (make-zone form)
  (let ((current zone)
        (zone (instantiate~ form)))
    (when current
      (close~ current))
    (unless (get-title~ zone)
      (let ((origin (get-origin~ form)))
        (when origin
          (set-title~ zone (get-base~ origin)))))
    (set-designer~ zone (new Designer form: form reference: zone))
    (initialize-zone~ zone)
    (update-children~ zone)
    (zone-update~ world)
    (when (eq? (get-start-mode~ world) 'first-person)
      (activate-first-person~ world)
      (follow-player~ world))
    zone)))
