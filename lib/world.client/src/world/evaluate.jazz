;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Evaluate
;;;


(module world.evaluate jazz


(import (jazz.geometry)
        (jazz.graphic)
        (jazz.graphic.opengl.glew)
        (jazz.io)
        (jazz.library)
        (jazz.literals)
        (jazz.media)
        (jazz.network)
        (jazz.platform)
        (jazz.platform.cairo)
        (jazz.runtime)
        (jazz.system)
        (jazz.ui)
        (jazz.ui.dialog)
        (jazz.ui.window)
        (time)
        (world)
        (world.actor)
        (world.autoload)
        (world.block)
        (world.element)
        (world.foreign)
        (world.geometry)
        (world.history)
        (world.syntax (phase syntax))
        (world.texture)
        (world.window)
        (world.client.window))


;;;
;;;; Update
;;;


(definition public (update-position pos)
  (when (eq? (walk-for) 'eval)
    (if (not ?t)
        (bell)
      (set-position~ ?t pos))))


(definition public (update-color color)
  (when (eq? (walk-for) 'eval)
    (if (not ?t)
        (bell)
      (set-color~ ?t color))))


(definition public (update-alpha alpha)
  (when (eq? (walk-for) 'eval)
    (if (not ?t)
        (bell)
      (let ((color (copy-object~ (get-color~ ?t) #f)))
        (set-alpha~ color alpha)
        (set-color~ ?t color)))))


(definition public (show-target)
  (when (eq? (walk-for) 'eval)
    (if (not ?t)
        (bell)
      (debug ?t))))


(definition public (show-properties)
  (when (eq? (walk-for) 'eval)
    (if (not ?t)
        (bell)
      (for-each (lambda (property)
                  (let ((name (symbolize-property property)))
                    (when (not (memq? name '(before children class-info name-info presentation-info visible?)))
                      (debug name '= (read-property ?t property)))))
                (get-properties~ (class-of ?t)))))))
