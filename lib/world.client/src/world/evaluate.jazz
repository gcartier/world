;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Evaluate
;;;


(module world.evaluate jazz


(import (jazz.geometry)
        (jazz.graphic)
        (jazz.graphic.opengl.glew)
        (jazz.io)
        (jazz.library)
        (jazz.literals)
        (jazz.media)
        (jazz.network)
        (jazz.platform)
        (jazz.platform.cairo)
        (jazz.runtime)
        (jazz.system)
        (jazz.ui)
        (jazz.ui.dialog)
        (jazz.ui.window)
        (time)
        (world.autoload)
        (world.actor)
        (world.block)
        (world.client.window)
        (world.foreign)
        (world.geometry)
        (world.history)
        (world.object)
        (world.sprite)
        (world.texture)
        (world.window))


;;;
;;;; Update
;;;


(definition public (update-x x)
  (when (eq? (walk-for) 'eval)
    (if (not ?t)
        (bell)
      (set-x~ ?t x)
      (update-position~ ?t))))


(definition public (update-y y)
  (when (eq? (walk-for) 'eval)
    (if (not ?t)
        (bell)
      (set-y~ ?t y)
      (update-position~ ?t))))


(definition public (update-z z)
  (when (eq? (walk-for) 'eval)
    (if (not ?t)
        (bell)
      (set-z~ ?t z)
      (update-position~ ?t))))


(definition public (update-color color)
  (when (eq? (walk-for) 'eval)
    (if (not ?t)
        (bell)
      (set-color~ ?t color))))


(definition public (update-alpha alpha)
  (when (eq? (walk-for) 'eval)
    (if (not ?t)
        (bell)
      (let ((color (copy-object~ (get-color~ ?t) #f)))
        (set-alpha~ color alpha)
        (set-color~ ?t color)))))


(definition public (show-target)
  (when (eq? (walk-for) 'eval)
    (if (not ?t)
        (bell)
      (debug ?t))))


(definition public (show-properties)
  (when (eq? (walk-for) 'eval)
    (if (not ?t)
        (bell)
      (for-each (lambda (property)
                  (let ((name (symbolize-property property)))
                    (when (not (memq? name '(before children class-info name-info presentation-info visible?)))
                      (debug name '= (read-property ?t property)))))
                (get-properties~ (class-of ?t)))))))
