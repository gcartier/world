;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; Evaluate
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is WorldScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2014
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See http://github.com/gcartier/world for details.


(module world.evaluate jazz


(import (world.syntax (phase syntax)))


;;;
;;;; Update
;;;


(definition public (update-position pos)
  (when (eq? (walk-for) 'eval)
    (if (not ?t)
        (bell)
      (set-position~ ?t pos))))


(definition public (update-color color)
  (when (eq? (walk-for) 'eval)
    (if (not ?t)
        (bell)
      (set-color~ ?t color))))


(definition public (update-alpha alpha)
  (when (eq? (walk-for) 'eval)
    (if (not ?t)
        (bell)
      (let ((color (copy-object~ (get-color~ ?t) #f)))
        (set-alpha~ color alpha)
        (set-color~ ?t color)))))


(definition public (show-target)
  (when (eq? (walk-for) 'eval)
    (if (not ?t)
        (bell)
      (debug ?t))))


(definition public (show-properties)
  (when (eq? (walk-for) 'eval)
    (if (not ?t)
        (bell)
      (for-each (lambda (property)
                  (let ((name (symbolize-property property)))
                    (when (not (memq? name '(before children class-info name-info presentation-info visible?)))
                      (debug name '= (read-property ?t property)))))
                (get-properties~ (class-of ?t)))))))
