;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; World Product
;;;


(module world.product jazz


(import (jazz.io)
        (world.settings))


;;;
;;;; Build
;;;


(definition (build descriptor (unit: unit #f) (force?: force? #f))
  (define (copy-info)
    (install-file '("README")))
  
  (define (copy-assets)
    (let ((path '("lib" "world.client" "assets")))
      (let ((src (world-directory path 'World))
            (dst (world-directory path 'Build)))
        (unless (exists?~ dst)
          (build-feedback "; copying assets...")
          (create-directories~ dst)
          (copy-directory~ src dst)))))
  
  (define (copy-templates)
    (let ((src (world-templates-directory 'World))
          (dst (world-templates-directory 'Build)))
      (unless (exists?~ dst)
        (build-feedback "; copying templates...")
        (create-directories~ dst)
        (copy-directory~ src dst))))
  
  (define (install-file path (name #f))
    (let ((src (world-file path 'World))
          (dst (world-file path 'Build)))
      (unless (and (exists?~ dst)
                   (equal? (digest-file (parse~ src) 'SHA-1) (digest-file (parse~ dst) 'SHA-1)))
        (build-feedback "; copying {a}..." (or name (last path)))
        (create-directories~ dst)
        (copy-file~ src dst))))
  
  (initialize-aliases)
  (copy-info)
  (copy-assets)
  (copy-templates)
  (build-product-descriptor descriptor unit: unit force?: force?))


;;;
;;;; Register
;;;


(register-product 'world.client
  build: build))
