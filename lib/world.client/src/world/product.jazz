;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Product
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is WorldScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2014
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See http://github.com/gcartier/world for details.


(module world.product jazz


(import (jazz.io)
        (world.settings))


;;;
;;;; Build
;;;


(definition (build descriptor (unit: unit #f) (force?: force? #f))
  (define (copy-info)
    (install-file '("README"))
    (install-file '("devel" "world" "Help.ftx"))
    (install-file '("devel" "world" "News.ftx"))
    (install-file '("devel" "world" "Roadmap.ftx")))
  
  (define (copy-assets)
    (let ((path '("lib" "world.client" "assets")))
      (let ((src (world-directory path 'World))
            (dst (world-directory path 'Build)))
        (install-directory "assets" src dst))))
  
  (define (copy-doc)
    (let ((src (world-directory '("lib" "world.website" "content") 'World))
          (dst (world-directory '("doc") 'Build)))
      (install-directory "doc" src dst)))
  
  (define (copy-templates)
    (let ((src (world-templates-directory 'World))
          (dst (world-templates-directory 'Build)))
      (install-directory "templates" src dst)))
  
  (define (install-file path (name #f))
    (let ((src (world-file path 'World))
          (dst (world-file path 'Build)))
      (unless (and (exists?~ dst)
                   (equal? (digest-file (parse~ src) 'SHA-1) (digest-file (parse~ dst) 'SHA-1)))
        (build-feedback "; copying {a}..." (or name (last path)))
        (create-directories~ dst)
        (copy-file~ src dst))))
  
  (define (install-directory name src dst)
    (unless (and (exists?~ dst)
                 (equal? (digest-directory src 'SHA-1) (digest-directory dst 'SHA-1)))
      ;; should only copy changes with feedback accordingly
      (build-feedback "; copying {a}..." name)
      (create-directories~ dst)
      (copy-directory~ src dst)))
  
  (initialize-aliases)
  (copy-info)
  (copy-assets)
  (copy-doc)
  (copy-templates)
  (build-product-descriptor descriptor unit: unit force?: force?))


;;;
;;;; Register
;;;


(register-product 'world-client
  build: build))
