;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Tests
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.test jazz


;;;
;;;; Tracking
;;;


(import (jazz.tracker)
        (jazz.debuggee)
        (jazz.debugger.stub)
        (world)
        (world.autoload)
        (world.context))


(class Zoo extends Object
  
  (method override (initialize self a b)
    ))

(define a
  #f)

(define (foo a b)
  (+ a b))

(define (goo (a: a 2) . rest)
  rest)

(definition public (tracking)
(goo)
(goo a: 3 5 6 7)
;; gambit.h
(set! a (foo 1. 2.))             ;; ___F64BOX
(set! a (cons 1 2))              ;; ___CONS
(set! a (box 1))                 ;; ___BOX
                                 ;; ___MAKEPROMISE *****
(continuation-capture            ;; ___MAKECONTINUATION
  (lambda (cont)
    (set! a cont)))
                                 ;; ___MAKESYMBOL *****
                                 ;; ___MAKEKEYWORD *****
@todo
(let ((x 1))                     ;; ___ALLOC_CLO *****
  (set! a (lambda (y)
            (+ x y))))
(set! a (list 1 2))              ;; ___BEGIN_ALLOC_LIST
(set! a (string #\a #\b))        ;; ___BEGIN_ALLOC_STRING
(set! a (u8vector 1 2))          ;; ___BEGIN_ALLOC_U8VECTOR
(set! a (f64vector 1. 2.))       ;; ___BEGIN_ALLOC_F64VECTOR
(set! a (vector 1 2))            ;; ___BEGIN_ALLOC_VECTOR
(set! a (make-serialized 1 2))   ;; ___BEGIN_ALLOC_STRUCTURE
(set! a (values 1 2))            ;; ___BEGIN_ALLOC_VALUES
;; _kernel.scm
(set! a (make-vector 2))
(set! a (make-vector 2 'a))
(set! a (make-u8vector 2))
(set! a (make-f64vector 2))
(set! a (make-string 2 #\a))
(set! a (make-table))
(set! a (make-mutex))
(set! a (make-condition-variable))
@todo
(set! a (make-thread foo))       ;; allocates many other objects
(set! a (make-will #f foo))
@todo
(set! a (make-parameter #f))     ;; allocates many other objects
;; jazz
(set! a (allocate-vector 2))
(set! a (allocate-u8vector 2))
(set! a (allocate-f64vector 2))
(set! a (new Point 1 2))         ;; allocate
(set! a (new Zoo 1 2))           ;; new
)


(definition public (test-tracking)
  (reset-tracking)
  (start-tracker)
  (tracking)
  (stop-tracker)
  (view-tracking (get-controller-debugger))
  (display-message (current-world) "Done"))


;;;
;;;; Audio
;;;


@audio (
(require (trun))

(import (jazz.io)
        (jazz.listener)
        (jazz.process)
        (jazz.stream)
        (jazz.stream.syntax (phase syntax))
        (jazz.stream.test)
        (jazz.syntax (phase syntax))
        (world.audio)
        (world.stream))


(definition (test-audio)
  (let ((audio (gst-pipeline "audiotestsrc samplesperbuffer=480 wave=silence name=silence"
                             "queue name=queue"
                             "webrtcaudioprobe delay=0"
                             (gst-element audiosink name: "sink")))
        (mixer? #f)
        (channels '()))
    (define (remove-silence)
      (with-unref ((silence (gst_bin_get_by_name audio "silence"))
                   (queue (gst_bin_get_by_name audio "queue")))
        (gst_element_unlink silence queue)
        (gst_element_set_state silence GST_STATE_NULL)
        (gst_bin_remove audio silence)))
    
    (define (add-channel location (volume 1.))
      (let ((channel (create-channel location volume)))
        (set! channels (append channels (list channel)))
        channel))
    
    (define (create-channel location volume)
      (when (not mixer?)
        (let ((mixer (gst_element_factory_make "audiomixer" "mixer")))
          (g_object_set_uint64 mixer "latency" 100000000)
          ;; output-buffer-duration 10000000
          (with-unref ((queue (gst_bin_get_by_name audio "queue")))
            (gst_bin_add audio mixer)
            (gst_element_link mixer queue)
            (gst_element_sync_state_with_parent mixer)
            (set! mixer? #t))))
      (let ((file (new-file {Directory Documents} (tokenise-filename location))))
        (let ((reader (new Stream-Reader file)))
          (let ((codec (get-codec reader))
                (caps (get-caps reader)))
            (close reader)
            (let ((bin (gst-bin (format "appsrc caps=\"{a}\" min-latency=40000000 name=src" caps)
                                (and (eq? codec 'mp3) "avdec_mp3 name=dec")
                                (and (eq? codec 'aac) "avdec_aac name=dec")
                                (and (eq? codec 'opus) "opusdec name=dec")
                                (and (eq? codec 'vorbis) "vorbisdec name=dec")
                                "audiorate"
                                "audioconvert"
                                "audioresample"
                                "audio/x-raw, format=S16LE, layout=interleaved, rate=48000, channels=2"
                                (tie "volume volume={volume}")
                                "audiopanorama method=1 name=end")))
              (gst_object_set_name bin (filename-base location))
              (gst_bin_add audio bin)
              (with-unref ((audio-mixer (gst_bin_get_by_name audio "mixer"))
                           (bin-src (gst_bin_get_by_name bin "src"))
                           (bin-end (gst_bin_get_by_name bin "end")))
                (g-object-set bin-src
                              "is-live"     'boolean #t
                              "stream-type" 'int     GST_APP_STREAM_TYPE_STREAM
                              "format"      'int     GST_FORMAT_TIME)
                (let ((src (new File-Stream-Audio-Src
                             #f
                             file: file
                             sound?: #t))
                      (sink (let ((adapter (new Source-Coupler)))
                              (new Stream-Frame-Consumer
                                consumer: (lambda (buffer dts pts duration flags)
                                            (let ((timestamp-offset (adapt-time adapter bin-src pts)))
                                              (let ((dts (+ dts timestamp-offset))
                                                    (pts (+ pts timestamp-offset)))
                                                (gst_app_src_write bin-src buffer (u8vector-length buffer) dts pts duration))))))))
                  (let ((input (pipeline (list src sink))))
                    (gst_element_link bin-end audio-mixer)
                    (gst_element_set_state bin GST_STATE_PLAYING)
                    (play input)
                    (gst_bin_recalculate_latency audio)
                    (new Channel location input bin #f)))))))))
    
    (define huge
      (make-vector 120000000))
    
    (define (mouser view pos)
      (terminal 'gc)
      (gc))
    
    (gst_object_set_name audio "audio")
    (gst_element_set_state audio GST_STATE_PLAYING)
    (wait-playing audio)
    (remove-silence)
    (add-channel "streams/music/Blood Diamond - Solomon Vandy.streamaudio")
    (report-info audio "audio")
    ;; application
    (boot-environment (new Test-Application position: {Point 350 250} mouser: mouser))))


(definition (run descriptor)
  (test-audio))

(register-product-run 'world.test run))


;;;
;;;; Chronology
;;;


@chronology (
(import (jazz.syntax (phase syntax))
        (world.chronology)
        (world.profiling))


(definition (chronological-range chronology)
  (let ((start (chronological-time chronology (first-position chronology)))
        (end (chronological-time chronology (last-position chronology))))
    (new Range start end)))


(definition (present-profiles threads (present-thread #f))
  (table-iterate threads
    (lambda (thread profile)
      (define (present id profile level)
        (let ((site (id->site id)))
          (format :terminal "{_ :v}{a} {r precision: 1}s {a}b {a}{%}" (* level 2) (get-name site) (get-running profile) (flonum->fixnum (get-allocated profile)) (get-called profile))
          (present-children profile level)))
      
      (define (present-children profile level)
        (table-iterate (get-children profile)
          (lambda (id profile)
            (present id profile (+ level 1)))))
      
      (format :terminal "{a}{%}" (if present-thread (present-thread thread) 'primordial))
      (present-children profile 0))))


(definition (goo a b)
  (site goo
    (let ((x (site x (+ a b))))
      (define (bar)
        (site bar
          (let ((y (site y (+ a b))))
            y)))
      
      (site bar.1 (bar))
      (loop (repeat 10)
            (site bar.2 (bar)))
      x)))

(loop (repeat 5)
      (goo 1 2))

(receive (threads elapsed) (profile-sites (current-chronology) (chronological-range (current-chronology)))
  (present-profiles threads))

(terminal '********************)

(definition chronology
  (new Chronology 100))

(definition primordial
  0)

(definition render
  1)

(definition foo
  (get-id (register-site '(foo) '() '())))

(definition bar
  (get-id (register-site '(bar) '() '())))

(definition baz
  (get-id (register-site '(baz) '() '())))

(definition (tname thread)
  (ecase (flonum->fixnum thread)
    ((primordial) 'primordial)
    ((render) 'render)))

(let ((content (get-content chronology)))
  (define (add thread id marker running allocated)
    (let ((index (index-now chronology)))
      (f64vector-set! content index (cast <fl> id))
      (f64vector-set! content (+ index 1) (cast <fl> marker))
      (f64vector-set! content (+ index 2) running)
      (f64vector-set! content (+ index 3) allocated)
      (f64vector-set! content (+ index 4) (cast <fl> thread))
      (advance! chronology)))
  
  ;;     thread       id    marker running allocated
  (add   primordial   foo   0      0.      0.)
  (add   primordial   bar   2      0.      0.)
  (add   primordial   bar   3      .1      3.)
  (add   render       baz   4      .1      3.)
  (add   primordial   foo   1      .2      5.)
  (add   primordial   bar   6      .3      7.)
  (add   render       baz   5      .4      8.)
  (add   primordial   bar   7      .5      9.)
  (add   render       baz   8      .5      10.)
  (add   render       baz   9      .6      12.))

(let ((threads (profile-sites chronology (chronological-range chronology))))
  (present-profiles threads tname)))


;;;
;;;; Profiling
;;;


@w (
(import (jazz.syntax (phase syntax))
        (world.profiling))

(definition (goo a b)
  (site goo
    (let ((x (site x (+ a b))))
      (define (bar)
        (site bar
          (let ((y (site y (+ a b))))
            y)))
      
      (site bar.1 (bar))
      (loop (repeat 10)
            (site bar.2 (bar)))
      x)))

(reset-chronology)
(advise-sites)

(debug (goo 1 2))

@w
(debug (sites-tree)))


;;;
;;;; Evaluate
;;;


@evaluate (
(define evaluate-definition
  `(module jazz.console jazz
   
   (export (jazz.console.autoload))
   (import (jazz.editor.lisp)
           (jazz.view))
   
   (definition public (get-console-text)
     (get-text (get-console-manager-guest)))))


(define evaluate-method
  `(module jazz.console.Console-Manager jazz
   
   (import (jazz.console)
           (jazz.debugger)
           (jazz.graphic)
           (jazz.markup)
           (jazz.skin)
           (jazz.ui)
           (jazz.view))
   
   (class undocumented Console-Manager extends Layout-View
     
     (method override (focus-default)
       (let ((text (get-text)))
         (when text
           (acquire-focus text)))))))


(define evaluate-root-method
  `(module jazz.view.View jazz
   
   (import (jazz.cairo)
           (jazz.designer)
           (jazz.geometry)
           (jazz.graphic)
           (jazz.locale)
           (jazz.markup)
           (jazz.platform)
           (jazz.print)
           (jazz.runtime)
           (jazz.ui)
           (jazz.ui.dialog)
           (jazz.view)
           (jazz.window)
           (jazz.workspace)
           (time))
   
   (class View extends Drawing implements (Actionable Context-Provider)
     
     (method protected virtual (update-displayed)
       ))))


(define evaluate-new-root-method
  `(module jazz.view.View jazz
   
   (import (jazz.cairo)
           (jazz.designer)
           (jazz.geometry)
           (jazz.graphic)
           (jazz.locale)
           (jazz.markup)
           (jazz.platform)
           (jazz.print)
           (jazz.runtime)
           (jazz.ui)
           (jazz.ui.dialog)
           (jazz.view)
           (jazz.window)
           (jazz.workspace)
           (time))
   
   (class View extends Drawing implements (Actionable Context-Provider)
     
     (method protected virtual (update-displayed-new-method)
       ))))


(definition public (analyse-definition . rest)
  (apply analyse-evaluate evaluate-definition rest))

(definition public (analyse-method . rest)
  (apply analyse-evaluate evaluate-method rest))

(definition public (analyse-root-method . rest)
  (apply analyse-evaluate evaluate-root-method rest))

(definition public (analyse-new-root-method . rest)
  (apply analyse-evaluate evaluate-new-root-method rest))


(load-unit 'jazz.console)
(load-unit 'jazz.console.Console-Manager)
;(analyse-definition)
;(analyse-method)
;(analyse-root-method)
(analyse-new-root-method))


;;;
;;;; Copy
;;;


@copy (
(import (gambit.walk))


(define (report-memory what)
  (time (gc))
  (bind-values (last-gc-heap-size last-gc-live last-gc-movable last-gc-still) (process-memory)
    (debug what last-gc-live last-gc-movable last-gc-still)))


(report-memory 'a)


@w
(define vec
  (make-vector 1000000))

(define vec
  (make-list 5000000))


(report-memory 'b)


(set! vec (copy-to vec PERM (make-domain)))


(report-memory 'c)
(report-memory 'c)
(report-memory 'c))


;;;
;;;; Memory
;;;


@memory (
(import (jazz.syntax (phase syntax))
        (world.profiling))


(definition (foo)
  (site foo
    #f))


(definition (bar)
  (site bar
    (foo)))


(definition (baz)
  (site baz
    (bar)))


(definition test
  (let ((before (make-f64vector 1))
        (after (make-f64vector 1))
        (iterations 100000))
    (lambda ()
      (bytes-allocated! before 0)
      (loop (for i from 0 below iterations)
            (baz))
      (bytes-allocated! after 0)
      (/ (- (f64vector-ref after 0) (f64vector-ref before 0)) iterations))))


(advise-site :foo)
(advise-site :bar)
(advise-site :baz)
(debug (test))
(debug (test))
(debug (test))

(time (test))


;(define vec (make-vector 10000))
;
;(define (yoloop v)
;  (loop (for n in-vector v)
;        n))
;
;(time (yoloop vec))
)


;;;
;;;; Outline
;;;


@outline (
(native testnative)
(native jazz:testjazznative)

(native-syntax testnativesyntax)
(native-syntax jazz:testjazznativesyntax)


(export testexport)

(define (testexport)
  'export)

(definition (testprivate)
  'private)

(definition private (testprivate2)
  'private2)

(definition protected (testprotected)
  'protected)

(definition package (testpackage)
  'package)

(definition public (testopt (o 2))
  'opt)

(definition public (testkey (k: k 2))
  'key)

(definition package (testtypes x <fx>) <fl>
  'types)

(interface TestI)
(interface TestJ extends TestI)
(interface TestK extends (TestI TestJ))

(class TestX extends Object implements (TestI TestJ TestK))
(class TestY extends TestX implements TestI
  
  (method meta public (metafoo)
    'metafoo)
  
  (slot a)
  (slot b <fx>)
  (slot c <fl> accessors generate)
  (slot d <fl> getter generate setter explicit)
  (method public (foo)
    'foo)
  (method public (goo) <symbol>
    'goo)))


;;;
;;;; Memory
;;;


@memory
(let ((el (new Entity)))
  (time
    (let ((x (+ 2. 1.)))
      #f))
  (time
    (let ((x (+ (get-x el) 1.)))
      #f)))


;;;
;;;; Optimizations
;;;


@optimizations (
(vertex 0. 0. 0.)
(make-f64vector 5)
(+ (f64vector-length (make-f64vector 5)) 2)
(f64vector-ref (make-f64vector 5) 2))


;;;
;;;; Types
;;;


@types (
(let ((world (current-world)))
  (rotate-left world))

(let ((world (current-world)))
  (+ (get-width world) 1.))))
