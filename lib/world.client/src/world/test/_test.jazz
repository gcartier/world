;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Tests
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.test jazz


;;;
;;;; Chronology
;;;


@chronology (
(import (jazz.syntax (phase syntax))
        (world.chronology)
        (world.profiling))


(definition (chronological-range chronology)
  (let ((start (chronological-time chronology (first-position chronology)))
        (end (chronological-time chronology (last-position chronology))))
    (new Range start end)))


(definition (present-profiles threads (present-thread #f))
  (iterate-table threads
    (lambda (thread profile)
      (define (present id profile level)
        (let ((site (id->site id)))
          (format :terminal "{_ :v}{a} {r precision: 1}s {a}b {a}{%}" (* level 2) (get-name site) (get-running profile) (flonum->fixnum (get-allocated profile)) (get-called profile))
          (present-children profile level)))
      
      (define (present-children profile level)
        (iterate-table (get-children profile)
          (lambda (id profile)
            (present id profile (+ level 1)))))
      
      (format :terminal "{a}{%}" (if present-thread (present-thread thread) 'primordial))
      (present-children profile 0))))


(definition (goo a b)
  (site (goo)
    (let ((x (site (x) (+ a b))))
      (define (bar)
        (site (bar)
          (let ((y (site (y) (+ a b))))
            y)))
      
      (site (bar.1) (bar))
      (loop (repeat 10)
            (site (bar.2) (bar)))
      x)))

(loop (repeat 5)
      (goo 1 2))

(let ((threads (profile-sites (current-chronology) (chronological-range (current-chronology)))))
  (present-profiles threads))

(terminal '********************)

(definition chronology
  (new Chronology 100))

(definition primordial
  0)

(definition render
  1)

(definition foo
  (get-id (register-site '(foo) '() '())))

(definition bar
  (get-id (register-site '(bar) '() '())))

(definition baz
  (get-id (register-site '(baz) '() '())))

(definition (tname thread)
  (ecase (flonum->fixnum thread)
    ((primordial) 'primordial)
    ((render) 'render)))

(let ((content (get-content chronology)))
  (define (add thread id marker running allocated)
    (let ((index (index-now chronology)))
      (f64vector-set! content index (cast <fl> id))
      (f64vector-set! content (+ index 1) (cast <fl> marker))
      (f64vector-set! content (+ index 2) running)
      (f64vector-set! content (+ index 3) allocated)
      (f64vector-set! content (+ index 4) (cast <fl> thread))
      (advance! chronology)))
  
  ;;     thread       id    marker running allocated
  (add   primordial   foo   0      0.      0.)
  (add   primordial   bar   2      0.      0.)
  (add   primordial   bar   3      .1      3.)
  (add   render       baz   4      .1      3.)
  (add   primordial   foo   1      .2      5.)
  (add   primordial   bar   6      .3      7.)
  (add   render       baz   5      .4      8.)
  (add   primordial   bar   7      .5      9.)
  (add   render       baz   8      .5      10.)
  (add   render       baz   9      .6      12.))

(let ((threads (profile-sites chronology (chronological-range chronology))))
  (present-profiles threads tname)))


;;;
;;;; Profiling
;;;


@w (
(import (jazz.syntax (phase syntax))
        (world.profiling))

(definition (goo a b)
  (site (goo)
    (let ((x (site (x) (+ a b))))
      (define (bar)
        (site (bar)
          (let ((y (site (y) (+ a b))))
            y)))
      
      (site (bar.1) (bar))
      (loop (repeat 10)
            (site (bar.2) (bar)))
      x)))

(reset-chronology)
(advise-sites)

(debug (goo 1 2))

@w
(debug (sites-tree)))


;;;
;;;; Evaluate
;;;


@evaluate (
(define evaluate-definition
  `(module jazz.console jazz
   
   (export (jazz.console.autoload))
   (import (jazz.editor.lisp)
           (jazz.view))
   
   (definition public (get-console-text)
     (get-text (get-console-manager-guest)))))


(define evaluate-method
  `(module jazz.console.Console-Manager jazz
   
   (import (jazz.console)
           (jazz.debugger)
           (jazz.graphic)
           (jazz.markup)
           (jazz.skin)
           (jazz.ui)
           (jazz.view))
   
   (class undocumented Console-Manager extends Layout-View
     
     (method override (focus-default)
       (let ((text (get-text)))
         (when text
           (acquire-focus text)))))))


(define evaluate-root-method
  `(module jazz.view.View jazz
   
   (import (jazz.cairo)
           (jazz.designer)
           (jazz.geometry)
           (jazz.graphic)
           (jazz.locale)
           (jazz.markup)
           (jazz.platform)
           (jazz.print)
           (jazz.runtime)
           (jazz.ui)
           (jazz.ui.dialog)
           (jazz.view)
           (jazz.window)
           (jazz.workspace)
           (time))
   
   (class View extends Drawing implements (Actionable Context-Provider)
     
     (method protected virtual (update-displayed)
       ))))


(define evaluate-new-root-method
  `(module jazz.view.View jazz
   
   (import (jazz.cairo)
           (jazz.designer)
           (jazz.geometry)
           (jazz.graphic)
           (jazz.locale)
           (jazz.markup)
           (jazz.platform)
           (jazz.print)
           (jazz.runtime)
           (jazz.ui)
           (jazz.ui.dialog)
           (jazz.view)
           (jazz.window)
           (jazz.workspace)
           (time))
   
   (class View extends Drawing implements (Actionable Context-Provider)
     
     (method protected virtual (update-displayed-new-method)
       ))))


(definition public (analyse-definition . rest)
  (apply analyse-evaluate evaluate-definition rest))

(definition public (analyse-method . rest)
  (apply analyse-evaluate evaluate-method rest))

(definition public (analyse-root-method . rest)
  (apply analyse-evaluate evaluate-root-method rest))

(definition public (analyse-new-root-method . rest)
  (apply analyse-evaluate evaluate-new-root-method rest))


(load-unit 'jazz.console)
(load-unit 'jazz.console.Console-Manager)
;(analyse-definition)
;(analyse-method)
;(analyse-root-method)
(analyse-new-root-method))


;;;
;;;; Copy
;;;


@copy (
(import (gambit.walk))


(define (report-memory what)
  (time (gc))
  (bind-values (last-gc-heap-size last-gc-alloc last-gc-live last-gc-movable last-gc-nonmovable) (process-memory)
    (debug what last-gc-live last-gc-movable last-gc-nonmovable)))


(report-memory 'a)


@w
(define vec
  (make-vector 1000000))

(define vec
  (make-list 5000000))


(report-memory 'b)


(set! vec (copy-to vec PERM (make-domain)))


(report-memory 'c)
(report-memory 'c)
(report-memory 'c))


;;;
;;;; Memory
;;;


@memory (
(import (jazz.syntax (phase syntax))
        (world.profiling))


(definition (foo)
  (site (foo)
    #f))


(definition (bar)
  (site (bar)
    (foo)))


(definition (baz)
  (site (baz)
    (bar)))


(definition test
  (let ((before (make-f64vector 1))
        (after (make-f64vector 1))
        (iterations 100000))
    (lambda ()
      (bytes-allocated! before 0)
      (loop (for i from 0 below iterations)
            (baz))
      (bytes-allocated! after 0)
      (/ (- (f64vector-ref after 0) (f64vector-ref before 0)) iterations))))


(advise-site :foo)
(advise-site :bar)
(advise-site :baz)
(debug (test))
(debug (test))
(debug (test))

(time (test))


;(define vec (make-vector 10000))
;
;(define (yoloop v)
;  (loop (for n in-vector v)
;        n))
;
;(time (yoloop vec))
)


;;;
;;;; Outline
;;;


@outline (
(native testnative)
(native jazz:testjazznative)

(native-syntax testnativesyntax)
(native-syntax jazz:testjazznativesyntax)


(export testexport)

(define (testexport)
  'export)

(definition (testprivate)
  'private)

(definition private (testprivate2)
  'private2)

(definition protected (testprotected)
  'protected)

(definition package (testpackage)
  'package)

(definition public (testopt (o 2))
  'opt)

(definition public (testkey (k: k 2))
  'key)

(definition package (testtypes x <fx>) <fl>
  'types)

(interface TestI)
(interface TestJ extends TestI)
(interface TestK extends (TestI TestJ))

(class TestX extends Object implements (TestI TestJ TestK))
(class TestY extends TestX implements TestI
  
  (method meta public (metafoo)
    'metafoo)
  
  (slot a)
  (slot b <fx>)
  (slot c <fl> accessors generate)
  (slot d <fl> getter generate setter explicit)
  (method public (foo)
    'foo)
  (method public (goo) <symbol>
    'goo)))


;;;
;;;; Memory
;;;


@memory
(let ((el (new Entity)))
  (time
    (let ((x (+ 2. 1.)))
      #f))
  (time
    (let ((x (+ (get-x el) 1.)))
      #f)))


;;;
;;;; Optimizations
;;;


@optimizations (
(vertex 0. 0. 0.)
(make-f64vector 5)
(+ (f64vector-length (make-f64vector 5)) 2)
(f64vector-ref (make-f64vector 5) 2))


;;;
;;;; Types
;;;


@types (
(let ((world (current-world)))
  (rotate-left world))

(let ((world (current-world)))
  (+ (get-width world) 1.))))
