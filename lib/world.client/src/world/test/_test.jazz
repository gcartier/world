;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Tests
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is WorldScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2014
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See http://github.com/gcartier/world for details.


(module world.test jazz


(import (world.syntax (phase syntax)))


(proclaim (warn optimizations))


;;;
;;;; Evaluate
;;;


@evaluate (
(define evaluate-definition
  `(module jazz.console jazz
   
   (export (jazz.console.autoload))
   (import (jazz.editor.lisp)
           (jazz.ui.view))
   
   (definition public (get-console-text)
     (get-text~ (get-console-manager)))))


(define evaluate-method
  `(module jazz.console.Console-Manager jazz
   
   (import (jazz.console)
           (jazz.debugger)
           (jazz.graphic)
           (jazz.jml)
           (jazz.library)
           (jazz.system)
           (jazz.ui)
           (jazz.ui.skin)
           (jazz.ui.view))
   
   (class undocumented Console-Manager extends Layout-View
     
     (method override (focus-default)
       (let ((text (get-text)))
         (when text
           (acquire-focus~ text)))))))


(define evaluate-root-method
  `(module jazz.ui.view.View jazz
   
   (import (jazz.designer)
           (jazz.geometry)
           (jazz.graphic)
           (jazz.jml)
           (jazz.library)
           (jazz.locale)
           (jazz.platform)
           (jazz.platform.cairo)
           (jazz.runtime)
           (jazz.system)
           (jazz.ui)
           (jazz.ui.dialog)
           (jazz.ui.print)
           (jazz.ui.window)
           (jazz.ui.view)
           (jazz.ui.workspace)
           (time))
   
   (class View extends Drawing implements (Actionable Context-Provider)
     
     (method protected virtual (update-displayed)
       ))))


(define evaluate-new-root-method
  `(module jazz.ui.view.View jazz
   
   (import (jazz.designer)
           (jazz.geometry)
           (jazz.graphic)
           (jazz.jml)
           (jazz.library)
           (jazz.locale)
           (jazz.platform)
           (jazz.platform.cairo)
           (jazz.runtime)
           (jazz.system)
           (jazz.ui)
           (jazz.ui.dialog)
           (jazz.ui.print)
           (jazz.ui.window)
           (jazz.ui.view)
           (jazz.ui.workspace)
           (time))
   
   (class View extends Drawing implements (Actionable Context-Provider)
     
     (method protected virtual (update-displayed-new-method)
       ))))


(definition public (analyse-definition . rest)
  (apply analyse-evaluate evaluate-definition rest))

(definition public (analyse-method . rest)
  (apply analyse-evaluate evaluate-method rest))

(definition public (analyse-root-method . rest)
  (apply analyse-evaluate evaluate-root-method rest))

(definition public (analyse-new-root-method . rest)
  (apply analyse-evaluate evaluate-new-root-method rest))


(load-unit 'jazz.console)
(load-unit 'jazz.console.Console-Manager)
;(analyse-definition)
;(analyse-method)
;(analyse-root-method)
(analyse-new-root-method))


;;;
;;;; Copy
;;;


@copy (
(import (gambit.ext))


(define (report-memory what)
  (time (gc))
  (receive (last-gc-heap-size last-gc-alloc last-gc-live last-gc-movable last-gc-nonmovable) (process-memory)
    (debug what last-gc-live last-gc-movable last-gc-nonmovable)))


(report-memory 'a)


@w
(define vec
  (make-vector 1000000))

(define vec
  (make-list 5000000))


(report-memory 'b)


(set! vec (copy-to vec PERM (make-domain)))


(report-memory 'c)
(report-memory 'c)
(report-memory 'c))


;;;
;;;; Checkpoint
;;;


@checkpoint (
(import (world)
        (world.profiling)
        (world.syntax (phase syntax)))


(definition test
  (let ((before (make-f64vector 1))
        (after (make-f64vector 1))
        (iterations 10000))
    (lambda ()
      (bytes-allocated! before 0)
      (loop (for i from 0 below iterations)
            (checkpoint 111)
            (checkpoint 222)
            (checkpoint 333))
      (bytes-allocated! after 0)
      (- (f64vector-ref after 0) (f64vector-ref before 0)))))


(debug (test))
(debug (test))
(debug (test)))


;;;
;;;; Memory
;;;


@memory (
(definition (foo)
  (site (foo on?: #t)
    #f))


(definition (bar)
  (site (bar on?: #t)
    (foo)))


(definition (baz)
  (site (baz on?: #t)
    (bar)))


(definition test
  (let ((before (make-f64vector 1))
        (after (make-f64vector 1))
        (iterations 10000))
    (lambda ()
      (bytes-allocated! before 0)
      (loop (for i from 0 below iterations)
            (baz))
      (bytes-allocated! after 0)
      (/ (- (f64vector-ref after 0) (f64vector-ref before 0)) iterations))))


(advise-site :foo)
(advise-site :bar)
(advise-site :baz)
(debug (test))
(debug (test))
(debug (test))


;(define vec (make-vector 10000))
;
;(define (yoloop v)
;  (loop (for n in-vector v)
;        n))
;
;(time (yoloop vec))
)


;;;
;;;; Outline
;;;


@outline (
(native testnative)
(native jazz:testjazznative)

(native-syntax testnativesyntax)
(native-syntax jazz:testjazznativesyntax)


(export testexport)

(define (testexport)
  'export)

(definition (testprivate)
  'private)

(definition private (testprivate2)
  'private2)

(definition protected (testprotected)
  'protected)

(definition package (testpackage)
  'package)

(definition public (testopt (o 2))
  'opt)

(definition public (testkey (k: k 2))
  'key)

(definition package (testtypes x <fx>) <fl>
  'types)

(interface TestI)
(interface TestJ extends TestI)
(interface TestK extends (TestI TestJ))

(class TestX extends Object implements (TestI TestJ TestK))
(class TestY extends TestX implements TestI
  
  (method meta public (metafoo)
    'metafoo)
  
  (slot a)
  (slot b <fx>)
  (slot c <fl> accessors generate)
  (slot d <fl> getter generate setter explicit)
  (method public (foo)
    'foo)
  (method public (goo) <symbol>
    'goo)))


;;;
;;;; Memory
;;;


@memory
(let ((el (new Block)))
  (time
    (let ((x (+ 2. 1.)))
      #f))
  (time
    (let ((x (+ (get-x~ el) 1.)))
      #f)))


;;;
;;;; Optimizations
;;;


@optimizations (
(vertex 0. 0. 0.)
(make-f64vector 5)
(+ (f64vector-length (make-f64vector 5)) 2)
(f64vector-ref (make-f64vector 5) 2))


;;;
;;;; Types
;;;


@types (
(let ((world (current-world)))
  (rotate-left~ world))

(let ((world (current-world)))
  (+ (get-width~ world) 1.))))
