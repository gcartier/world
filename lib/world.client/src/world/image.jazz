;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Image
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.image jazz


(import (jazz.cairo)
        (jazz.io)
        (world.foreign)
        (world.settings)
        (world.texture))


(definition public (read-crg file)
  (receive (format width height stride) (call-with-input-file (path-settings file)
                                          (lambda (port)
                                            (let* ((format (read-32-bit-integer port))
                                                   (width (read-32-bit-integer port))
                                                   (height (read-32-bit-integer port))
                                                   (stride (read-32-bit-integer port)))
                                              (values format width height stride))))
    (let ((size (* stride height)))
      (let ((data (load-crg (parse~ file) 16 size)))
        (values width height data)))))


(definition public (read-image asset)
  (if (world-setting 'world.cache-images? #f)
      (let ((crg (new-file~ {Directory Settings "work" "images"} (get-unique-spine~ asset "crg"))))
        (when (not (exists?~ crg))
          (create-directories~ crg)
          (let ((png (make-brother~ asset "png")))
            (receive (width height surface) (cairo-surface-from-file png)
              (let ((format (cairo_image_surface_get_format surface)))
                (let ((stride (cairo_format_stride_for_width format width)))
                  (let ((data (cairo_image_surface_get_data surface))
                        (size (* stride height)))
                    (call-with-output-file (path-settings crg)
                      (lambda (port)
                        (write-32-bit-integer format port)
                        (write-32-bit-integer width port)
                        (write-32-bit-integer height port)
                        (write-32-bit-integer stride port)))
                    (save-crg (parse~ crg) data size)
                    (close~ surface)))))))
        (read-crg crg))
    (let ((file (make-brother~ asset "png")))
      (receive (image-width image-height surface) (cairo-surface-from-file file)
        @convert
        (when sample?
          (let ((data (cairo_image_surface_get_data surface)))
            (let ((texture (new Image-Texture image-width image-height data: data file: file)))
              (map-texture~ texture)
              (set! sample texture))))
        (values image-width image-height surface))))))
