;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Image
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.image jazz


(import (jazz.cairo)
        (jazz.io)
        (world)
        (world.asset)
        (world.foreign)
        (world.settings)
        (world.texture))


;; until regression fixed due to atlas containing
;; non-uniform sized if we add the earth texture
(definition cache-images? <bool>
  (if (world-setting 'world.earth? #f)
      #f
    (world-setting 'world.cache-images? #f)))


(definition public (read-crg file)
  (bind-values (format width height stride) (call-with-input-file (path-settings file)
                                              (lambda (port)
                                                (let* ((format (read-32-bit-integer port))
                                                       (width (read-32-bit-integer port))
                                                       (height (read-32-bit-integer port))
                                                       (stride (read-32-bit-integer port)))
                                                  (values format width height stride))))
    (let ((size (* stride height)))
      (let ((data (load-crg (parse file) 16 size)))
        (values width height data)))))


(definition public (read-image asset)
  ;; leave default at false as on computers with a slow harddrive the cache
  ;; can actually make things slower and have a big impact on first launch
  (if cache-images?
      (let ((crg (new-file {Directory Settings "work" "caches" "image"} (brother-path asset (add-extension (get-base asset) "crg")))))
        (when (not (exists? crg))
          (create-directories crg)
          (let ((png (retrieve-file asset)))
            (bind-values (width height surface) (cairo-surface-from-file png)
              (let ((format (cairo_image_surface_get_format surface)))
                (let ((stride (cairo_format_stride_for_width format width)))
                  (let ((data (cairo_image_surface_get_data surface))
                        (size (* stride height)))
                    (call-with-output-file (path-settings crg)
                      (lambda (port)
                        (write-32-bit-integer format port)
                        (write-32-bit-integer width port)
                        (write-32-bit-integer height port)
                        (write-32-bit-integer stride port)))
                    (save-crg (parse crg) data size)
                    (close surface)))))))
        (read-crg crg))
    (let ((png (retrieve-file asset)))
      (bind-values (image-width image-height surface) (cairo-surface-from-file png)
        (values image-width image-height surface))))))
