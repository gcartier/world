;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; Camera Exibit
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.exibit jazz


(import (jazz.graphic)
        (jazz.stream)
        (world)
        (world.context)
        (world.pane)
        (world.profile)
        (world.stream)
        (world.streaming)
        (world.video))


(definition video-sink-consumers
  (make-table test: eq?))

(definition (register-video-sink-consumer sink consumer)
  (table-set! video-sink-consumers sink consumer))

(definition (unregister-video-sink-consumer sink)
  (table-clear video-sink-consumers sink))

(definition public (registered-video-sink-consumer sink)
  (table-ref video-sink-consumers sink #f))


(definition (open-exibit-output consumer profile caps process?)
  (let ((output (create-exibit-output profile caps process?)))
    (install-exibit-output output)
    (register-video-sink-consumer output consumer)
    (when (not exibit-focus)
      (set! exibit-focus output))
    output))


(definition (create-exibit-output profile caps process?)
  (let ((level (get-level profile))
        (resolution (get-resolution profile))
        (framerate (get-framerate profile))
        (bitrate (get-bitrate profile))
        (codec (get-codec profile)))
    (let ((id (list 'self level))
          (stream-no #f)
          (channel #f)
          (player (current-me)))
      (new Circle-Video-Sink
        id
        stream-no
        channel
        player
        level: level
        resolution: resolution
        framerate: framerate
        bitrate: bitrate
        codec: codec
        caps: caps
        alpha-overlay: video-alpha
        flipped?: #t
        process?: process?))))


(definition (install-exibit-output output)
  (let ((video (current-video)))
    (install-output video (get-id output) output)))


(definition (close-exibit-output output)
  (let ((video (current-video)))
    (close-output video (get-id output) output)
    (unregister-video-sink-consumer output)
    (set-stream-state output 'off)))


;;;
;;;; Consumer
;;;


(interface Camera-Exibit-Consumer
  
  
  (method public virtual abstract (draw-media self output draw-header draw present-rate)))


;;;
;;;; Self
;;;


(class Camera-Exibit-Self-Consumer extends Stream-Buffer-Consumer implements (Camera-Self-Consumable Camera-Exibit-Consumer)
  
  
  (slot profile initialize #f getter explicit)
  (slot output  initialize #f accessors generate)
  (slot probe   initialize #f getter generate setter explicit)
  
  
  (method override (initialize self . rest)
    (bind-keywords ((profile #f) . others) rest
      (apply nextmethod self others)
      (set! self.profile profile)))
  
  
  (method override (destroy self)
    (when output
      (close-exibit-output output)
      (set! output #f))
    (when probe
      (gst_pad_probe_free probe)
      (set! probe #f))
    (nextmethod self))
  
  
  (method override (get-profile self)
    profile)
  
  
  (method override (set-probe self value)
    (set! probe value))
  
  
  (method override (task-name self)
    (list 'self-exibit (get-name profile)))
  
  
  (method override (consume-buffer self buffer)
    (if (not output)
        (gst_buffer_unref buffer)
      (when (eq? (get-stream-state output) 'off)
        (set-stream-state output 'on))
      (set-stream-state output 'drawn)
      (draw-buffer output buffer)))
  
  
  (method override (consume-eos self)
    (when output
      (set-stream-state output 'off)))
  
  
  (method override (draw-media self output draw-header draw present-rate)
    (draw-header (format "{a} #{a}" (reference-name (get-name (class-of output))) (object->serial output)) {Color World-Ochre})
    (draw (format "Self-Consumer #{a}" (object->serial self)) {Color World-Ochre})
    (draw (format "Resolution: {a}x{a}" (get-width (get-resolution profile)) (get-height (get-resolution profile))) {Color World-Red})
    (draw (format "Framerate: {a}" (present-rate (get-framerate profile))) {Color World-Red})
    (draw (format "Bitrate: {a}" (present-rate (get-bitrate profile))) {Color World-Red})))


;;;
;;;; Video
;;;


(class Camera-Exibit-Video-Consumer extends Stream-Frame-Consumer implements (Camera-Video-Consumable Camera-Exibit-Consumer)
  
  
  (slot profile initialize #f getter explicit)
  (slot output  initialize #f accessors generate)
  (slot probe   initialize #f getter generate setter explicit)
  
  
  (method override (initialize self . rest)
    (bind-keywords ((profile #f) . others) rest
      (apply nextmethod self others)
      (set! self.profile profile)))
  
  
  (method override (destroy self)
    (when output
      (close-exibit-output output)
      (set! output #f))
    (when probe
      (gst_pad_probe_free probe)
      (set! probe #f))
    (nextmethod self))
  
  
  (method override (get-profile self)
    profile)
  
  
  (method override (set-probe self value)
    (set! probe value))
  
  
  (method override (task-name self)
    (list 'video-exibit (get-name profile)))
  
  
  (method override (consume-frame self buffer dts pts duration flags)
    (let ((video (current-video)))
      (when output
        (receive-video video output buffer dts pts duration flags #f))))
  
  
  (method override (consume-eos self)
    (when output
      (set-stream-state output 'off)))
  
  
  (method override (draw-media self output draw-header draw present-rate)
    (draw-header (format "{a} #{a}" (reference-name (get-name (class-of output))) (object->serial output)) {Color World-Ochre})
    (draw (format "Video-Consumer #{a}" (object->serial self)) {Color World-Ochre})
    (draw (format "Resolution: {a}x{a}" (get-width (get-resolution profile)) (get-height (get-resolution profile))) {Color World-Red})
    (draw (format "Framerate: {a}" (present-rate (get-framerate profile))) {Color World-Red})
    (draw (format "Bitrate: {a}" (present-rate (get-bitrate profile))) {Color World-Red})))


;;;
;;;; Exibit
;;;


(definition protected exibit-focus
  #f)

(definition protected (change-exibit-focus output)
  (unless (eq? output exibit-focus)
    (let ((actual exibit-focus))
      (set! exibit-focus output)
      (when actual
        (exibit-invalidate actual))
      (when exibit-focus
        (exibit-invalidate exibit-focus)))))


(definition protected exibit-pipeline
  #f)


(definition public (exibit-on?)
  (boolean exibit-pipeline))


(definition public (exibit-on)
  (let ((world (current-world)))
    (unless exibit-pipeline
      (let ((exibit (make-camera-exibit)))
        (play-camera-exibit exibit)
        (display-on/off world "Exibit" #t)
        (set! exibit-pipeline exibit)))))


(definition public (exibit-off)
  (let ((world (current-world)))
    (when exibit-pipeline
      (release-camera-exibit exibit-pipeline)
      (close-camera-exibit exibit-pipeline)
      (set! exibit-pipeline #f)
      (display-on/off world "Exibit" #f))))


(hub show-interface)
(definition (exibit-invalidate output)
  (invalidate-texture (get-interface-pane output))
  (show-interface (current-space) #t))


(definition public (exibit-bitrate-modifier output)
  (let ((consumer (registered-video-sink-consumer output)))
    (get-bitrate-modifier consumer)))


(definition public (exibit-bitrate output)
  (let ((consumer (registered-video-sink-consumer output)))
    (let ((profile (get-profile consumer)))
      (let ((min-bitrate (get-min-bitrate profile))
            (bitrate (get-bitrate profile)))
        (effective-bitrate consumer min-bitrate bitrate)))))


(definition public (exibit-mouse-down view)
  (change-exibit-focus (get-output view)))


(definition public (exibit-backspace)
  (when exibit-focus
    (let ((consumer (registered-video-sink-consumer exibit-focus)))
      (let ((src (get-src consumer)))
        (change-bitrate src consumer 1.)
        (exibit-invalidate exibit-focus)))))


(definition public (exibit-left)
  (when exibit-focus
    (let ((consumer (registered-video-sink-consumer exibit-focus)))
      (let ((src (get-src consumer))
            (modifier (get-bitrate-modifier consumer)))
        (when (> modifier -.8)
          (change-bitrate src consumer (- modifier .1)))
        (exibit-invalidate exibit-focus)))))


(definition public (exibit-right)
  (when exibit-focus
    (let ((consumer (registered-video-sink-consumer exibit-focus)))
      (let ((src (get-src consumer))
            (modifier (get-bitrate-modifier consumer)))
        (change-bitrate src consumer (+ modifier .1))
        (exibit-invalidate exibit-focus)))))


(definition public (exibit-up)
  )


(definition public (exibit-down)
  )


(definition (exibit-profiles camera-profile)
  (define (full (n #f))
    (let ((name (if (not n) 'full (string->symbol (format "full{a}" n)))))
      (new Graphic-Profile name 4 {Dimension 1920 1080} 30 30 2048 4096 'h264 #f)))
  
  (define (high (n #f))
    (let ((name (if (not n) 'high (string->symbol (format "high{a}" n)))))
      (new Graphic-Profile name 3 {Dimension 1280  720} 30 30 1024 2048 'h264 #f)))
  
  (define (standard (n #f))
    (let ((name (if (not n) 'standard (string->symbol (format "standard{a}" n)))))
      (new Graphic-Profile name 2 {Dimension  640  360} 24 24  512 1024 'h264 #f)))
  
  (define (medium (n #f))
    (let ((name (if (not n) 'medium (string->symbol (format "medium{a}" n)))))
      (new Graphic-Profile name 1 {Dimension  416  234} 18 18  256  512 'h264 #f)))
  
  (define (low (n #f))
    (let ((name (if (not n) 'low (string->symbol (format "low{a}" n)))))
      (new Graphic-Profile name 0 {Dimension  256  144} 12 12  128  256 'h264 #f)))
  
  (list
    (high) (standard) (medium) (low)))


(definition public (make-camera-exibit)
  (let ((camera-profile (maximum-camera-profile)))
    (let ((profiles (exibit-profiles camera-profile)))
      (let ((src (new Camera-Video-Src
                   resolution: (get-resolution camera-profile)
                   framerate: (get-framerate camera-profile)
                   selfrate: (get-selfrate camera-profile)))
            @self (self-sinks (map (lambda (profile)
                                     (new Camera-Exibit-Self-Consumer
                                       caps: 'self
                                       profile: profile
                                       processing?: #t))
                                   profiles))
            (sinks (map (lambda (profile)
                          (new Camera-Exibit-Video-Consumer
                            profile: profile
                            processing?: #t))
                        profiles)))
        (pipeline `(,src @self ,@self-sinks ,@sinks))))))


(definition public (close-camera-exibit pipeline)
  (close pipeline)
  (change-exibit-focus #f))


(definition public (play-camera-exibit pipeline)
  (play pipeline)
  (let ((src (get-src pipeline)))
    (for-each (lambda (consumer)
                (typecase consumer
                  ((Camera-Exibit-Self-Consumer)
                   (set-output consumer (open-exibit-output consumer (get-profile consumer) #f #f)))
                  ((Camera-Exibit-Video-Consumer)
                   (receive (caps resolution) (require-consumer-caps/resolution src consumer)
                     (set-output consumer (open-exibit-output consumer (get-profile consumer) caps #t))))))
              (get-sinks pipeline))))


(definition public (release-camera-exibit pipeline)
  (release pipeline)))
