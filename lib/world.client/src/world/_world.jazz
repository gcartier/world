;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; World
;;;


(module world jazz


(import (jazz.version))


;;;
;;;; Version
;;;


(definition public world-version
  {Version 1 1})


;;;
;;;; Shader
;;;


(definition public validate-shaders?
  #f)


(definition public (set-validate-shaders? flag)
  (set! validate-shaders? flag))


;;;
;;;; Allocation
;;;


(definition public debug-memory?
  (make-parameter #f))


(definition public debug-memory-table
  (make-table test: eq?))


(definition public (debug-memory-allocation name)
  (table-set! debug-memory-table name (+ (cast <fx> (table-ref debug-memory-table name 0)) 1))
  @w
  (case name
    ((make-matrix)
     (when (< (table-ref debug-memory-table name 0) 20)
       (debug (execution-stack depth: 10))))))


(definition public (debug-memory . rest)
  (when (debug-memory?)
    (apply debug rest)))


(definition public (debug-memory-report)
  (iterate-table debug-memory-table
    (lambda (name count)
      (debug name count))))


(definition public (debug-memory-reset)
  (empty-table debug-memory-table))


;;;
;;;; Memory
;;;


(definition public memory-checkpoints
  (make-table test: eq?))

(definition public memory-calls
  (make-table test: eq?))

(definition last-memory-checkpoint
  (make-f64vector 1))


(definition public memory-checkpoint
  (let ((checkpoint (make-f64vector 1)))
    (lambda (name)
      (bytes-allocated! checkpoint)
      (let ((allocated (- (f64vector-ref checkpoint 0) (f64vector-ref last-memory-checkpoint 0) 344. 88. 128.)))
        (table-set! memory-checkpoints name (+ (table-ref memory-checkpoints name 0.) allocated))
        (table-set! memory-calls name (+ (table-ref memory-calls name 0) 1))
        (f64vector-set! last-memory-checkpoint 0 (f64vector-ref checkpoint 0))))))


(definition public (reset-memory-checkpoints)
  (set! memory-checkpoints (make-table test: eq?))
  (set! memory-calls (make-table test: eq?))
  (set! last-memory-checkpoint (make-f64vector 1)))


(definition public (report-memory-checkpoints)
  (iterate-table memory-checkpoints
    (lambda (name allocated)
      (let ((calls (table-ref memory-calls name)))
        (debug name (/ allocated calls) calls)))))


;; complete me
(definition public (bytes-allocated! checkpoint)
  )


;;;
;;;; Actor
;;;


(definition public tick-actor
  (make-parameter #f))


;;;
;;;; Window
;;;


(definition protected *current-world-window*
  #f)


(definition public (set-current-world-window window)
  (set! *current-world-window* window)
  (set-?w window))


;;;
;;;; World
;;;


(definition protected *current-world*
  #f)


(definition public (set-current-world world)
  (set! *current-world* world)
  (set-? world))


;;;
;;;; Zone
;;;


(definition protected *current-zone*
  #f)


(definition public (set-current-zone zone)
  (set! *current-zone* zone)
  (set-?z zone))


;;;
;;;; Me
;;;


(definition protected *current-me*
  #f)


(definition public (set-current-me me)
  (set! *current-me* me)
  (set-?m me)))
