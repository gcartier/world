;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2016
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world jazz


(import (jazz.io)
        (jazz.network)
        (jazz.settings)
        (jazz.version))


;;;
;;;; Setup
;;;


(definition process-kind
  #f)

(definition public (get-process-kind)
  process-kind)

(definition protected (set-process-kind value)
  (set! process-kind value))

(definition public (process?)
  (eq? process-kind 'process))

(definition public (application?)
  (eq? process-kind 'application))


(definition public tier-kind
  #f)

(definition protected (set-tier-kind kind)
  (set! tier-kind kind))

(definition public (local?)
  (eq? tier-kind 'local))

(definition public (client?)
  (eq? tier-kind 'client))

(definition public (server?)
  (eq? tier-kind 'server))

(definition public (processor?)
  (eq? tier-kind 'processor))

(definition public (processing?)
  (or (eq? tier-kind 'server)
      (eq? tier-kind 'processor)))


(definition public client-id
  #f)

(definition public client-no <fx>
  -1)

(definition protected (set-client-id/no id no <fx>)
  (set! client-id id)
  (set! client-no no))


(definition settings-root
  #f)

(definition public (get-settings-root)
  settings-root)

(definition public (set-settings-root root)
  (set! settings-root root))


(definition settings-alias
  #f)

(definition public (get-settings-alias)
  settings-alias)

(definition public (set-settings-alias alias)
  (set! settings-alias alias))


(definition protected aliases-setup
  #f)

(definition public (set-aliases-setup setup)
  (set! aliases-setup setup))


(definition valid-roles
  '())

(definition public (get-valid-roles)
  valid-roles)

(definition public (set-valid-roles roles)
  (set! valid-roles roles))


;;;
;;;; Aliases
;;;


(definition public (setup-aliases)
  (register-alias 'App
                  (if (is-alias? 'Yownu)
                      (list 'Yownu)
                    (cond-expand
                      (mac (get-list~ (get-parent~ (get-parent~ {Directory Build}))))
                      (else (list 'Build)))))
  (register-resources-alias 'Yownu 'yownu))


;;;
;;;; Processor
;;;


(definition processor-filename
  #f)

(definition public (get-processor-filename)
  processor-filename)

(definition public (setup-processor-filename)
  (set! processor-filename
        (cond-expand (mac "yownu-processor.app/Contents/MacOS/Yownu-Processor")
                     (else "Yownu-Processor"))))


;;;
;;;; Worker
;;;


(definition worker-filename
  #f)

(definition public (get-worker-filename)
  worker-filename)

(definition public (setup-worker-filename)
  (set! worker-filename
        (cond-expand (mac "yownu-worker.app/Contents/MacOS/Yownu-Worker")
                     (else "Yownu-Worker"))))


;;;
;;;; Version
;;;


(definition public world-version
  {Version 1 1})

(definition public zone-version
  {Version 1 4})


;;;
;;;; Test
;;;


(definition public open-test?
  #t)


(definition public open-test-host
  "centro.iro.umontreal.ca")

(definition public open-test-service
  50000)


;;;
;;;; Server
;;;


(definition protected local-server/clients?
  (or (boolean-argument "local-server/clients" #f)
      (boolean-argument "local" #f)))


(definition public default-server-listen
  #f)

(definition public default-server-host
  localhost)

(definition public default-server-service
  50000)


;;;
;;;; Shader
;;;


(definition public validate-shaders?
  #f)


(definition public (set-validate-shaders? flag)
  (set! validate-shaders? flag))


;;;
;;;; Memory
;;;


(definition public bytes-allocated
  (let ((bytes (f64vector 0.)))
    (lambda ()
      (bytes-allocated! bytes 0)
      (f64vector-ref bytes 0))))


;;;
;;;; Window
;;;


(definition protected *current-world-window*
  #f)


(definition public (set-current-world-window window)
  (set! *current-world-window* window)
  (set-?w window))


(definition protected *window?*
  #t)

(definition public (window?)
  *window?*)

(definition public (set-window? window?)
  (set! *window?* window?))


;;;
;;;; Interface
;;;


(definition protected *current-interface*
  #f)


(definition public (set-current-interface interface)
  (set! *current-interface* interface)
  (set-?i interface))


;;;
;;;; Tier
;;;


(definition protected *current-tier*
  #f)


(definition public (set-current-tier tier)
  (set! *current-tier* tier)
  (set-?r tier))


;;;
;;;; Processor
;;;


(definition protected *current-processor*
  #f)


(definition public (set-current-processor processor)
  (set! *current-processor* processor)
  (set-?s processor))


;;;
;;;; World
;;;


(definition protected *current-world*
  #f)


(definition public (set-current-world world)
  (set! *current-world* world)
  (set-? world))


;;;
;;;; Zone
;;;


(definition protected *current-zone*
  #f)


(definition public (set-current-zone zone)
  (set! *current-zone* zone)
  (set-?z zone))


;;;
;;;; Game
;;;


(definition protected *current-game*
  #f)


(definition public (set-current-game game)
  (set! *current-game* game)
  (set-?g game))


;;;
;;;; Me
;;;


(definition protected *current-me*
  #f)


(definition public (set-current-me me)
  (set! *current-me* me)
  (set-?m me))


;;;
;;;; Camera
;;;


(definition protected *current-camera*
  #f)


(definition public (set-current-camera camera)
  (set! *current-camera* camera)
  (set-?c camera))


;;;
;;;; Motion
;;;


(definition protected *current-motion*
  #f)


(definition public (set-current-motion motion)
  (set! *current-motion* motion)
  (set-?v motion))


;;;
;;;; Mic
;;;


(definition protected *current-mic*
  #f)


(definition public (set-current-mic mic)
  (set! *current-mic* mic))


;;;
;;;; Music
;;;


(definition protected *current-music*
  #f)


(definition public (set-current-music music)
  (set! *current-music* music)
  (set-?u music))


;;;
;;;; Ambience
;;;


(definition protected *current-ambience*
  #f)


(definition public (set-current-ambience ambience)
  (set! *current-ambience* ambience))


;;;
;;;; History
;;;


(definition protected *current-history*
  #f)


(definition public (set-current-history history)
  (set! *current-history* history)
  (set-?h history))


;;;
;;;; Tutorial
;;;


(definition protected *current-tutorial*
  #f)


(definition public (set-current-tutorial tutorial)
  (set! *current-tutorial* tutorial)
  (set-?t tutorial)))
