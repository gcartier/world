;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; World
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2013
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world jazz


(import (jazz.version))


;;;
;;;; Load
;;;


(define profile-load?
  #f)

(define profile-what
  'memory)

(define profile-load-base
  #f)

(define profile-load-previous
  #f)


(definition public (load-base)
  (when profile-load?
    (set! profile-load-base (current-seconds))
    (set! profile-load-previous profile-load-base)
    (load-report 'base 0)))


(definition public (load-point name)
  (when profile-load?
    (let ((time (current-seconds)))
      (load-report name (- time profile-load-previous))
      (set! profile-load-previous time))))


(definition public (load-total name)
  (when profile-load?
    (load-report name (- (current-seconds) profile-load-base))))


(definition (load-report name time)
  (define (meg bytes)
    (fxround (/ (cast <fl> bytes) 1024. 1024.)))
  
  (case profile-what
    ((time)
     (terminal name time))
    (else
     (gc)
     (receive (last-gc-heap-size last-gc-alloc last-gc-live last-gc-movable last-gc-nonmovable) (process-memory)
       (terminal name (meg last-gc-live) (meg last-gc-movable) (meg last-gc-nonmovable))))))


;;;
;;;; Version
;;;


(definition public world-version
  {Version 1 1})

(definition public zone-version
  {Version 1 4})


;;;
;;;; Shader
;;;


(definition public validate-shaders?
  #f)


(definition public (set-validate-shaders? flag)
  (set! validate-shaders? flag))


;;;
;;;; Allocation
;;;


(definition public debug-memory?
  (make-parameter #f))


(definition public debug-memory-table
  (make-table test: eq?))


(definition public (debug-memory-allocation name)
  (table-set! debug-memory-table name (+ (cast <fx> (table-ref debug-memory-table name 0)) 1)))


(definition public (debug-memory . rest)
  (when (debug-memory?)
    (apply debug rest)))


(definition public (debug-memory-report)
  (iterate-table debug-memory-table
    (lambda (name count)
      (debug name count))))


(definition public (debug-memory-reset)
  (empty-table debug-memory-table))


;;;
;;;; Memory
;;;


(define debug-memory-checkpoints?
  #t)


(definition public bytes-allocated
  (let ((bytes (make-f64vector 1)))
    (lambda ()
      (bytes-allocated! bytes 0)
      (f64vector-ref bytes 0))))


(definition protected memory-checkpoints
  (make-table test: eq?))

(definition protected memory-calls
  (make-table test: eq?))

(definition last-memory-checkpoint
  (make-f64vector 1))


(definition public memory-checkpoint
  (let ((checkpoint (make-f64vector 1)))
    (lambda (name)
      (when debug-memory-checkpoints?
        (bytes-allocated! checkpoint 0)
        (let ((allocated (- (f64vector-ref checkpoint 0) (f64vector-ref last-memory-checkpoint 0) 128.)))
          (table-set! memory-checkpoints name (+ (table-ref memory-checkpoints name 0.) allocated))
          (table-set! memory-calls name (+ (table-ref memory-calls name 0) 1))
          (f64vector-set! last-memory-checkpoint 0 (f64vector-ref checkpoint 0)))))))


(definition public (reset-memory-checkpoints)
  (set! memory-checkpoints (make-table test: eq?))
  (set! memory-calls (make-table test: eq?))
  (set! last-memory-checkpoint (make-f64vector 1)))


(definition public (report-memory-checkpoints)
  (for-each (lambda (name)
              (let ((allocated (table-ref memory-checkpoints name))
                    (calls (table-ref memory-calls name)))
                (debug name (/ allocated calls))))
            (sort nu<? (table-keys memory-checkpoints) key: ->string)))


;;;
;;;; Actor
;;;


(definition public ticked-actor
  (make-parameter #f))


;;;
;;;; Window
;;;


(definition protected *current-world-window*
  #f)


(definition public (set-current-world-window window)
  (set! *current-world-window* window)
  (set-?w window))


;;;
;;;; World
;;;


(definition protected *current-world*
  #f)


(definition public (set-current-world world)
  (set! *current-world* world)
  (set-? world))


;;;
;;;; Zone
;;;


(definition protected *current-zone*
  #f)


(definition public (set-current-zone zone)
  (set! *current-zone* zone)
  (set-?z zone))


;;;
;;;; Me
;;;


(definition protected *current-me*
  #f)


(definition public (set-current-me me)
  (set! *current-me* me)
  (set-?m me))


;;;
;;;; Tutorial
;;;


(definition protected *current-tutorial*
  #f)


(definition public (set-current-tutorial tutorial)
  (set! *current-tutorial* tutorial)
  (set-?t tutorial)))
