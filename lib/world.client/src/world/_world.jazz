;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2016
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world jazz


(import (jazz.io)
        (jazz.version))


;;;
;;;; Setup
;;;


(definition tier
  #f)

(definition public (get-tier)
  tier)

(definition public (set-tier value)
  (set! tier value))

(definition public (server-side?)
  (eq? tier 'server))

(definition public (client-side?)
  (eq? tier 'client))


(definition settings-root
  {Directory Home ".world"})

(definition public (get-settings-root)
  settings-root)

(definition public (set-settings-root root)
  (set! settings-root root))


(definition settings-alias
  'World)

(definition public (get-settings-alias)
  settings-alias)

(definition public (set-settings-alias alias)
  (set! settings-alias alias))


(definition protected aliases-setup
  #f)

(definition public (set-aliases-setup setup)
  (set! aliases-setup setup))


(definition valid-roles
  '())

(definition public (get-valid-roles)
  valid-roles)

(definition public (set-valid-roles roles)
  (set! valid-roles roles))


;;;
;;;; Worker
;;;


(definition worker-filename
  #f)

(definition public (get-worker-filename)
  worker-filename)

(definition public (set-worker-filename filename)
  (set! worker-filename filename))


;;;
;;;; Version
;;;


(definition public world-version
  {Version 1 1})

(definition public zone-version
  {Version 1 4})


;;;
;;;; Shader
;;;


(definition public validate-shaders?
  #f)


(definition public (set-validate-shaders? flag)
  (set! validate-shaders? flag))


;;;
;;;; Allocation
;;;


(definition public debug-memory?
  (make-parameter #f))


(definition public debug-memory-table
  (make-table test: eq?))


(definition public (debug-memory-allocation name)
  (table-set! debug-memory-table name (+ (cast <fx> (table-ref debug-memory-table name 0)) 1)))


(definition public (debug-memory . rest)
  (when (debug-memory?)
    (apply debug rest)))


(definition public (debug-memory-report)
  (iterate-table debug-memory-table
    (lambda (name count)
      (debug name count))))


(definition public (debug-memory-reset)
  (empty-table debug-memory-table))


;;;
;;;; Memory
;;;


(definition public bytes-allocated
  (let ((bytes (f64vector 0.)))
    (lambda ()
      (bytes-allocated! bytes 0)
      (f64vector-ref bytes 0))))


;;;
;;;; Window
;;;


(definition protected *current-world-window*
  #f)


(definition public (set-current-world-window window)
  (set! *current-world-window* window)
  (set-?w window))


;;;
;;;; Interface
;;;


(definition protected *current-interface*
  #f)


(definition public (set-current-interface interface)
  (set! *current-interface* interface)
  (set-?i interface))


;;;
;;;; World
;;;


(definition protected *current-world*
  #f)


(definition public (set-current-world world)
  (set! *current-world* world)
  (set-? world))


;;;
;;;; Zone
;;;


(definition protected *current-zone*
  #f)


(definition public (set-current-zone zone)
  (set! *current-zone* zone)
  (set-?z zone))


;;;
;;;; Game
;;;


(definition protected *current-game*
  #f)


(definition public (set-current-game game)
  (set! *current-game* game)
  (set-?g game))


;;;
;;;; Me
;;;


(definition protected *current-me*
  #f)


(definition public (set-current-me me)
  (set! *current-me* me)
  (set-?m me))


;;;
;;;; Camera
;;;


(definition protected *current-camera*
  #f)


(definition public (set-current-camera camera)
  (set! *current-camera* camera)
  (set-?c camera))


;;;
;;;; Motion
;;;


(definition protected *current-motion*
  #f)


(definition public (set-current-motion motion)
  (set! *current-motion* motion)
  (set-?v motion))


;;;
;;;; Ambience
;;;


(definition protected *current-ambience*
  #f)


(definition public (set-current-ambience ambience)
  (set! *current-ambience* ambience))


;;;
;;;; Music
;;;


(definition protected *current-music*
  #f)


(definition public (set-current-music music)
  (set! *current-music* music)
  (set-?u music))


;;;
;;;; History
;;;


(definition protected *current-history*
  #f)


(definition public (set-current-history history)
  (set! *current-history* history))


;;;
;;;; Tutorial
;;;


(definition protected *current-tutorial*
  #f)


(definition public (set-current-tutorial tutorial)
  (set! *current-tutorial* tutorial)
  (set-?t tutorial)))
