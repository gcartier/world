;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world jazz


(import (jazz.io)
        (jazz.network)
        (jazz.settings)
        (jazz.version)
        (time))


;;;
;;;; Timezone
;;;


;; set timezone to eastern until adjusted
(let ((timezone (lambda () -18000)))
  (system-timezone-set! timezone)
  (local-timezone-set! timezone))


;;;
;;;; Setup
;;;


(definition process-kind
  #f)

(definition public (get-process-kind)
  process-kind)

(definition protected (set-process-kind value)
  (set! process-kind value))

(definition public (process?)
  (eq? process-kind 'process))

(definition public (application?)
  (eq? process-kind 'application))


(definition protected *window?*
  #f)

(definition public (window?)
  *window?*)

(definition public (set-window? window?)
  (set! *window?* window?))


(definition public tier-kind
  #f)

(definition protected (set-tier-kind kind)
  (set! tier-kind kind))

(definition public (client?)
  (eq? tier-kind 'client))

(definition public (server?)
  (eq? tier-kind 'server))

(definition public (processor?)
  (eq? tier-kind 'processor))

(definition public (serving?)
  (or (eq? tier-kind 'server)
      (eq? tier-kind 'processor)))

(definition public (worker?)
  (eq? tier-kind 'worker))


(definition public tier-title
  #f)

(definition protected (set-tier-title title)
  (set! tier-title title))


(definition public tier-id
  #f)

(definition public tier-no <fx>
  -1)

(definition protected (set-tier-id/no id no <fx>)
  (set! tier-id id)
  (set! tier-no no))


(definition options-setup
  #f)

(definition public (get-options-setup)
  options-setup)

(definition public (set-options-setup setup)
  (set! options-setup setup))


(definition settings-alias
  #f)

(definition public (get-settings-alias)
  settings-alias)

(definition public (set-settings-alias alias)
  (set! settings-alias alias))


(definition settings-root
  #f)

(definition public (get-settings-root)
  settings-root)

(definition public (set-settings-root root)
  (set! settings-root root))


(definition settings-setup
  #f)

(definition public (get-settings-setup)
  settings-setup)

(definition public (set-settings-setup setup)
  (set! settings-setup setup))


(definition settings-override
  #f)

(definition public (get-settings-override)
  settings-override)

(definition public (set-settings-override override)
  (set! settings-override override))


(definition documents-root
  '(Settings))

(definition public (get-documents-root)
  documents-root)

(definition public (set-documents-root root)
  (set! documents-root root))


(definition universe-root
  '(Settings))

(definition public (get-universe-root)
  universe-root)

(definition public (set-universe-root root)
  (set! universe-root root))


(definition protected aliases-setup
  #f)

(definition public (set-aliases-setup setup)
  (set! aliases-setup setup))


(definition valid-roles
  '())

(definition public (get-valid-roles)
  valid-roles)

(definition public (set-valid-roles roles)
  (set! valid-roles roles))


(definition public refresh-interface-hook
  #f)

(definition public (set-refresh-interface-hook hook)
  (set! refresh-interface-hook hook))

(definition public (call-refresh-interface-hook)
  (and refresh-interface-hook
       (refresh-interface-hook)))


(definition public translucent-players? <bool>
  #f)

(definition public (set-translucent-players? flag <bool>)
  (set! translucent-players? flag))


(definition protected environment-title-suffix
  (cond-expand
    (prod   "")
    (stage  " Stage")
    (stable " Stable")
    (triage " Triage")
    (test   " Test")
    (trial  " Trial")
    (else   " Devel")))


(definition protected environment-suffix
  (cond-expand
    (prod   "")
    (stage  " (stage)")
    (stable " (stable)")
    (triage " (triage)")
    (test   " (test)")
    (trial  " (trial)")
    (else   " (devel)")))


;;;
;;;; UDP
;;;


(definition protected udp-code
  213)


;;;
;;;; Mobile
;;;


(definition protected mobile-code
  "TWJG")


;;;
;;;; Tier
;;;


;; delay so these can be run outside of loading the
;; settings module so we do not block the load mutex


(definition protected start-tier-listener
  #f)

(definition protected (start-tier-listener-set! thunk)
  (set! start-tier-listener thunk))


(definition protected connect-slave-to-master
  #f)

(definition protected (connect-slave-to-master-set! thunk)
  (set! connect-slave-to-master thunk))


;;;
;;;; Client
;;;


(definition public sleeping?
  #f)

(definition public (set-sleeping? flag)
  (set! sleeping? flag))


;;;
;;;; Server
;;;


(definition server-filename
  #f)

(definition public (get-server-filename)
  server-filename)

(definition public (set-server-filename filename)
  (set! server-filename filename))


;;;
;;;; Processor
;;;


(definition processor-filename
  #f)

(definition public (get-processor-filename)
  processor-filename)

(definition public (set-processor-filename filename)
  (set! processor-filename filename))


;;;
;;;; Worker
;;;


(definition worker-filename
  #f)

(definition public (get-worker-filename)
  worker-filename)

(definition public (set-worker-filename filename)
  (set! worker-filename filename))


;;;
;;;; Version
;;;


(definition public world-version
  {Version 1 1})

(definition public zone-version
  {Version 1 4})


;;;
;;;; Server
;;;


(definition public default-server-listen
  #f)

(definition public default-server-host
  localhost)

(definition public default-server-service
  (cond-expand (prod   50500)
               (triage 50500)
               (stage  50400)
               (stable 50300)
               (test   50200)
               (trial  50100)
               (else   50000)))

(definition public (set-default-server-host host)
  (set! default-server-host host))

(definition public (set-default-server-service service)
  (set! default-server-service service))


(definition public default-server
  "Local")

(definition public (set-default-server server)
  (set! default-server server))


;;;
;;;; Boot
;;;


(definition public boot-process
  #f)

(definition public (set-boot-process boot)
  (set! boot-process boot))


;;;
;;;; Domain
;;;


(definition protected domain-names
  (make-table test: eq?))


(definition public (registered-domain-name name (default #f))
  (table-ref domain-names name default))

(definition public (register-domain-name name value)
  (table-set! domain-names name value)))
