;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; Renderer
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is WorldScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2014
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See http://github.com/gcartier/world for details.


(module world.renderer jazz


(import (jazz.graphic.opengl.glew)
        (world)
        (world.animation)
        (world.autoload)
        (world.entity)
        (world.geometry)
        (world.material)
        (world.mesh)
        (world.model)
        (world.profiling)
        (world.programs)
        (world.renderers)
        (world.support)
        (world.syntax (phase syntax)))


(proclaim (warn optimizations))


;;;
;;;; Renderer
;;;


(class Mesh-Renderer extends Object
  
  
  (slot program  <Mesh-Program> getter generate)
  (slot meshes   <Axis>         getter generate)
  (slot entities <Axis>         getter generate)
  (slot ghosts   <Axis>         getter generate)
  
  
  (method override (initialize program)
    (let ((world (current-world)))
      (set! program~self (find-mesh-program~ world program))
      (set! meshes~self (new Axis 0))
      (set! entities~self (new Axis 0))
      (set! ghosts~self (new Axis 0))))
  
  
  (method (reset)
    (set-size~ meshes 0)
    (set-size~ entities 0)
    (set-size~ ghosts 0))
  
  
  (method (add-mesh mesh <Mesh>)
    (axis-add meshes mesh))
  
  
  (method (add-entity entity model mesh <Mesh>)
    (axis-add entities entity)
    (axis-add entities model)
    (axis-add entities mesh))
  
  
  (method (add-ghost entity model mesh <Mesh> matrix <f64vector> moment <fx>)
    (axis-add ghosts entity)
    (axis-add ghosts model)
    (axis-add ghosts mesh)
    (axis-add ghosts matrix)
    (axis-add ghosts moment))
  
  
  (method (empty?)
    (and (= 0 (get-size~ meshes))
         (= 0 (get-size~ entities))
         (= 0 (get-size~ ghosts))))
  
  
  (method protected virtual (render)
    )
  
  
  (method (draw)
    (draw-meshes)
    (draw-entities)
    (draw-ghosts))
  
  
  (method (draw-meshes)
    (let ((world (current-world)))
      (let ((size (get-size~ meshes))
            (content (get-content~ meshes))
            (matrix (get-block-matrix~ world)))
        (loop (for i from 0 below size)
              (let ((mesh <Mesh> (vector-ref content i)))
                (vector-set! content i #f)
                (let ((material (get-material~ mesh)))
                  (bind-render-uniforms~ program material)
                  (bind-uniforms~ program mesh matrix #f 0)
                  (draw-mesh~ program mesh)
                  (unbind-uniforms~ program)
                  (unbind-render-uniforms~ program)))))))
  
  
  (method (draw-entities)
    (let ((size (get-size~ entities))
          (content (get-content~ entities)))
      (loop (for i from 0 below size by 3)
            (let ((entity <Entity> (vector-ref content i))
                  (model <Model> (vector-ref content (+ i 1)))
                  (mesh <Mesh> (vector-ref content (+ i 2))))
              (vector-set! content i #f)
              (vector-set! content (+ i 1) #f)
              (vector-set! content (+ i 2) #f)
              (let ((matrix (matrix-multiply& (get-matrix~ entity) (get-global-matrix~ model)))
                    (material (get-material~ mesh)))
                (bind-render-uniforms~ program material)
                (bind-uniforms entity model mesh matrix 0)
                (draw-mesh~ program mesh)
                (unbind-render-uniforms)
                (unbind-render-uniforms~ program))))))
  
  
  ;; temp a copy/paste of draw-entities
  (method (draw-ghosts)
    (let ((size (get-size~ ghosts))
          (content (get-content~ ghosts)))
      (loop (for i from 0 below size by 5)
            (let ((entity <Entity> (vector-ref content i))
                  (model <Model> (vector-ref content (+ i 1)))
                  (mesh <Mesh> (vector-ref content (+ i 2)))
                  (matrix <f64vector> (vector-ref content (+ i 3)))
                  (moment <fx> (vector-ref content (+ i 4))))
              (vector-set! content i #f)
              (vector-set! content (+ i 1) #f)
              (vector-set! content (+ i 2) #f)
              (vector-set! content (+ i 3) #f)
              (vector-set! content (+ i 4) #f)
              (let ((matrix (matrix-multiply& matrix (get-global-matrix~ model)))
                    (material (get-material~ mesh)))
                (bind-render-uniforms~ program material)
                (bind-uniforms entity model mesh matrix moment)
                (draw-mesh~ program mesh)
                (unbind-render-uniforms)
                (unbind-render-uniforms~ program))))))
  
  
  (method protected virtual (bind-uniforms entity <Entity> model <Model> mesh <Mesh> matrix <f64vector> moment)
    (bind-uniforms~ program mesh matrix (and (entity-animate?~ entity) (get-bone-matrices~ (cast <Morphing> (get-morphing~ entity)))) moment))
  
  
  (method protected virtual (unbind-render-uniforms)
    (unbind-render-uniforms~ program)))


;;;
;;;; Renderers
;;;


(definition public (prepare-renderes)
  (set-opaque-renderer (register-renderer 'opaque (new Opaque-Renderer 'phong)))
  (set-transparent-renderer (register-renderer 'transparent (new Transparent-Renderer 'phong)))
  (set-culled-transparent-renderer (register-renderer 'culled-transparent (new Culled-Transparent-Renderer 'phong)))
  (set-coverage-renderer (register-renderer 'coverage (new Coverage-Renderer 'phong)))
  (set-occlusion-renderer (register-renderer 'occlusion (new Transparent-Renderer 'occlusion)))
  (set-wireframe-renderer (register-renderer 'wireframe (new Transparent-Renderer 'wireframe)))
  (set-squareframe-renderer (register-renderer 'squareframe (new Transparent-Renderer 'squareframe)))
  (set-radial-blur-renderer (register-renderer 'radial-blur (new Transparent-Renderer 'radial-blur)))
  (set-motion-blur-renderer (register-renderer 'motion-blur (new Transparent-Renderer 'motion-blur)))
  (set-water-renderer (register-renderer 'water (new (if (get-arb-multisample?) Water-Renderer Transparent-Renderer) 'water)))
  (set-wet-renderer (register-renderer 'wet (new Opaque-Renderer 'wet)))
  (set-julia-renderer (register-renderer 'julia (new Transparent-Renderer 'julia)))
  (set-sierpinski-renderer (register-renderer 'sierpinski (new Transparent-Renderer 'sierpinski)))
  (set-multitexture-renderer (register-renderer 'multitexture (new Transparent-Renderer 'multitexture)))
  (set-kaleidoscope-renderer (register-renderer 'kaleidoscope (new Transparent-Renderer 'kaleidoscope)))
  (set-tunnel-renderer (register-renderer 'tunnel (new Transparent-Renderer 'tunnel)))
  (set-square-tunnel-renderer (register-renderer 'square-tunnel (new Transparent-Renderer 'square-tunnel)))
  (set-fly-renderer (register-renderer 'fly (new Transparent-Renderer 'fly)))
  (set-color-renderer (register-renderer 'color (new Color-Renderer 'color)))
  (set-character-renderer (register-renderer 'character (new Character-Renderer 'playerframe)))
  (set-character2-renderer (register-renderer 'character2 (new Character2-Renderer 'color)))
  (set-drawable-renderer (register-renderer 'drawable (new Drawable-Renderer 'color))))


;;;
;;;; Opaque-Renderer
;;;


(class Opaque-Renderer extends Mesh-Renderer
  
  
  (method override (render)
    (unless (empty?)
      (use~ program)
      (glDisable GL_BLEND)
      (glDisable GL_ALPHA_TEST)
      (draw)
      (unuse~ program))))


;;;
;;;; Transparent-Renderer
;;;


(class Transparent-Renderer extends Mesh-Renderer
  
  
  (method override (render)
    (unless (empty?)
      (use~ program)
      ;; ghosts
      (glEnable GL_CULL_FACE)
      (glCullFace GL_FRONT)
      (glEnable GL_BLEND)
      (glEnable GL_ALPHA_TEST)
      (glAlphaFunc GL_GREATER .2)
      (draw-ghosts)
      (glDisable GL_ALPHA_TEST)
      (glDisable GL_BLEND)
      (glCullFace GL_BACK)
      (glDisable GL_CULL_FACE)
      ;; meshes / entities
      (glDisable GL_BLEND)
      (glEnable GL_ALPHA_TEST)
      (glAlphaFunc GL_GREATER .7)
      (draw-meshes)
      (draw-entities)
      (glDisable GL_ALPHA_TEST)
      (glDisable GL_BLEND)
      (unuse~ program))))


;;;
;;;; Culled-Transparent-Renderer
;;;


(class Culled-Transparent-Renderer extends Mesh-Renderer
  
  
  (method override (render)
    (unless (empty?)
      (use~ program)
      (glEnable GL_CULL_FACE)
      (glCullFace GL_FRONT)
      (glDisable GL_BLEND)
      (glEnable GL_ALPHA_TEST)
      (glAlphaFunc GL_GREATER .7)
      (draw)
      (glDisable GL_ALPHA_TEST)
      (glDisable GL_BLEND)
      (glCullFace GL_BACK)
      (glDisable GL_CULL_FACE)
      (unuse~ program))))


;;;
;;;; Coverage-Renderer
;;;


(class Coverage-Renderer extends Mesh-Renderer
  
  
  (method override (render)
    (unless (empty?)
      (use~ program)
      (glDisable GL_BLEND)
      (glDisable GL_ALPHA_TEST)
      (glEnable GL_SAMPLE_ALPHA_TO_COVERAGE_ARB)
      (draw)
      (glDisable GL_SAMPLE_ALPHA_TO_COVERAGE_ARB)
      (glDisable GL_ALPHA_TEST)
      (glDisable GL_BLEND)
      (unuse~ program))))


;;;
;;;; Water-Renderer
;;;


(class Water-Renderer extends Mesh-Renderer
  
  
  (method override (render)
    (unless (empty?)
      (use~ program)
      (glDisable GL_BLEND)
      (glDisable GL_ALPHA_TEST)
      (glEnable GL_SAMPLE_ALPHA_TO_COVERAGE_ARB)
      (draw)
      (glDisable GL_SAMPLE_ALPHA_TO_COVERAGE_ARB)
      (glDisable GL_ALPHA_TEST)
      (glDisable GL_BLEND)
      (unuse~ program))))


;;;
;;;; Color-Renderer
;;;


(class Color-Renderer extends Mesh-Renderer
  
  
  (method override (render)
    (unless (empty?)
      (use~ program)
      (glDisable GL_BLEND)
      (glEnable GL_ALPHA_TEST)
      (glAlphaFunc GL_GREATER .1)
      (draw)
      (glDisable GL_ALPHA_TEST)
      (glDisable GL_BLEND)
      (unuse~ program)))
  
  
  (method override (bind-uniforms entity <Entity> model <Model> mesh <Mesh> matrix <f64vector> moment)
    (model-bind-uniforms~ model entity program mesh matrix moment)))


;;;
;;;; Character-Renderer
;;;


(class Character-Renderer extends Mesh-Renderer
  
  
  (method override (render)
    (unless (empty?)
      (use~ program)
      (glEnable GL_CULL_FACE)
      (glCullFace GL_FRONT)
      (glEnable GL_BLEND)
      (glBlendFunc GL_SRC_ALPHA GL_ONE_MINUS_SRC_ALPHA)
      (glEnable GL_ALPHA_TEST)
      (glAlphaFunc GL_GEQUAL .1)
      (draw)
      (glDisable GL_ALPHA_TEST)
      (glCullFace GL_BACK)
      (glDisable GL_CULL_FACE)
      (unuse~ program)))
  
  
  (method override (bind-uniforms entity <Entity> model <Model> mesh <Mesh> matrix <f64vector> moment)
    (model-bind-uniforms~ model entity program mesh matrix moment)))


;;;
;;;; Character2-Renderer
;;;


(class Character2-Renderer extends Mesh-Renderer
  
  
  (method override (render)
    (unless (empty?)
      (use~ program)
      (glEnable GL_CULL_FACE)
      (glCullFace GL_FRONT)
      (glDisable GL_LIGHTING)
      (glEnable GL_BLEND)
      (glBlendFunc GL_SRC_ALPHA GL_ONE_MINUS_SRC_ALPHA)
      (glDisable GL_ALPHA_TEST)
      (draw)
      (glDisable GL_ALPHA_TEST)
      (glDisable GL_BLEND)
      (glCullFace GL_BACK)
      (glDisable GL_CULL_FACE)
      (unuse~ program)))
  
  
  (method override (bind-uniforms entity <Entity> model <Model> mesh <Mesh> matrix <f64vector> moment)
    (model-bind-uniforms~ model entity program mesh matrix moment)))


;;;
;;;; Drawable-Renderer
;;;


(class Drawable-Renderer extends Mesh-Renderer
  
  
  (method override (render)
    (glDisable GL_LIGHTING)
    (glDisable GL_BLEND)
    (let ((size (get-size~ entities))
          (content (get-content~ entities)))
      (loop (for i from 0 below size)
            (let ((entity <Entity> (vector-ref content i)))
              (vector-set! content i #f)
              (draw~ entity))))))


;;;
;;;; Occlusion
;;;


(definition occlusion?
  #f)

(definition public (get-occlusion?)
  occlusion?)

(definition public (set-occlusion? flag)
  (set! occlusion? flag))


;;;
;;;; Wireframe
;;;


(definition wireframe?
  #f)

(definition public (get-wireframe?)
  wireframe?)

(definition public (set-wireframe? flag)
  (set! wireframe? flag))


;;;
;;;; Register
;;;


(definition override-renderer
  #f)

(definition public (set-override-renderer renderer)
  (set! override-renderer renderer))


(definition public (register-meshes meshes)
  (iterate-table meshes
    (lambda (material <Material> mesh <Mesh>)
      (let ((renderer <Mesh-Renderer> (or override-renderer (get-renderer~ material))))
        (add-mesh~ renderer mesh)))))


(definition public (register-entities entities)
  (for-each register-entity entities))


(definition public (register-entity entity <Entity> (include-invisibles? #f))
  (define (add-model model <Model> meshes)
    (loop (for mesh <Mesh> in-vector meshes)
          (let ((renderer <Mesh-Renderer> (or (get-renderer~ entity) (effective-renderer model mesh))))
            (add-entity~ renderer entity model mesh)))
    (for-each (lambda (child <Model>)
                (add-model child (get-meshes~ child)))
              (get-children~ model)))
  
  (define (effective-renderer model <Model> mesh <Mesh>)
    (let ((material (get-material~ mesh)))
      (or (and material (get-renderer~ material))
          (model-renderer~ model))))
  
  (when (or (get-visible?~ entity) include-invisibles?)
    (if (drawable?~ entity)
        (axis-add (get-entities~ (get-drawable-renderer)) entity)
      (add-model (cache-model~ entity)
                 (entity-meshes~ entity)))))


;; temp a copy/paste of register-entity
(definition public (register-ghost entity <Entity> model <Model> matrix <f64vector> moment <fx>)
  (define (add-model model <Model> meshes)
    (loop (for mesh <Mesh> in-vector meshes)
          (let ((renderer <Mesh-Renderer> (or (get-renderer~ entity) (effective-renderer model mesh))))
            (add-ghost~ renderer entity model mesh matrix moment)))
    (for-each (lambda (child <Model>)
                (add-model child (get-meshes~ child)))
              (get-children~ model)))
  
  (define (effective-renderer model <Model> mesh <Mesh>)
    (let ((material (get-material~ mesh)))
      (or (and material (get-renderer~ material))
          (model-renderer~ model))))
  
  (add-model model (entity-meshes~ entity)))


;;;
;;;; Render
;;;


(definition public (render-opaque)
  (site (render-opaque on?: #f parent: render-draw)
    (render~ (get-opaque-renderer))
    (render~ (get-wet-renderer))))


(definition public (render-transparent)
  (site (render-transparent on?: #f parent: render-draw)
    (render~ (get-occlusion-renderer))
    (render~ (get-wireframe-renderer))
    (render~ (get-squareframe-renderer))
    (render~ (get-radial-blur-renderer))
    (render~ (get-motion-blur-renderer))
    (render~ (get-water-renderer))
    (render~ (get-julia-renderer))
    (render~ (get-sierpinski-renderer))
    (render~ (get-multitexture-renderer))
    (render~ (get-kaleidoscope-renderer))
    (render~ (get-tunnel-renderer))
    (render~ (get-square-tunnel-renderer))
    (render~ (get-fly-renderer))
    (render~ (get-color-renderer))
    (render~ (get-transparent-renderer))
    (render~ (get-culled-transparent-renderer))
    (render~ (get-coverage-renderer))
    (render~ (get-drawable-renderer))))


(definition public (render-character)
  (site (render-character on?: #f parent: render-draw)
    (render~ (get-character2-renderer))
    (render~ (get-character-renderer)))))
