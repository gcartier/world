;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Renderer
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2013
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.renderer jazz


(import (jazz.geometry)
        (jazz.graphic)
        (jazz.graphic.opengl.glew)
        (jazz.library)
        (world)
        (world.autoload)
        (world.geometry)
        (world.support)
        (world.syntax (phase syntax)))


;;;
;;;; Renderers
;;;


(definition renderers
  (make-table test: eq?))

(definition public (get-renderers)
  renderers)

(definition public (register-renderer name renderer)
  (table-set! renderers name renderer)
  renderer)

(definition public (find-renderer name)
  (table-ref renderers name #f))

(definition public (require-renderer name)
  (or (find-renderer name)
      (error "Unknown renderer: {a}" name)))


(definition public opaque-renderer
  #f)

(definition public transparent-renderer
  #f)

(definition public culled-transparent-renderer
  #f)

(definition public wireframe-renderer
  #f)

(definition public squareframe-renderer
  #f)

(definition public radial-blur-renderer
  #f)

(definition public motion-blur-renderer
  #f)

(definition public water-renderer
  #f)

(definition public wet-renderer
  #f)

(definition public julia-renderer
  #f)

(definition public sierpinski-renderer
  #f)

(definition public multitexture-renderer
  #f)

(definition public kaleidoscope-renderer
  #f)

(definition public tunnel-renderer
  #f)

(definition public square-tunnel-renderer
  #f)

(definition public fly-renderer
  #f)

(definition public color-renderer
  #f)

(definition public character-renderer
  #f)

(definition public character2-renderer
  #f)


(definition public (prepare-renderes)
  (set! opaque-renderer (register-renderer 'opaque (new Opaque-Renderer 'dynamic-phong)))
  (set! transparent-renderer (register-renderer 'transparent (new Transparent-Renderer 'dynamic-phong)))
  (set! culled-transparent-renderer (register-renderer 'culled-transparent (new Culled-Transparent-Renderer 'dynamic-phong)))
  (set! wireframe-renderer (register-renderer 'wireframe (new Transparent-Renderer 'wireframe)))
  (set! squareframe-renderer (register-renderer 'squareframe (new Transparent-Renderer 'squareframe)))
  (set! radial-blur-renderer (register-renderer 'radial-blur (new Transparent-Renderer 'radial-blur)))
  (set! motion-blur-renderer (register-renderer 'motion-blur (new Transparent-Renderer 'motion-blur)))
  (set! water-renderer (register-renderer 'water (new (if (get-arb-multisample?) Water-Renderer Transparent-Renderer) 'water)))
  (set! wet-renderer (register-renderer 'wet (new Opaque-Renderer 'wet)))
  (set! julia-renderer (register-renderer 'julia (new Transparent-Renderer 'julia)))
  (set! sierpinski-renderer (register-renderer 'sierpinski (new Transparent-Renderer 'sierpinski)))
  (set! multitexture-renderer (register-renderer 'multitexture (new Transparent-Renderer 'multitexture)))
  (set! kaleidoscope-renderer (register-renderer 'kaleidoscope (new Transparent-Renderer 'kaleidoscope)))
  (set! tunnel-renderer (register-renderer 'tunnel (new Transparent-Renderer 'tunnel)))
  (set! square-tunnel-renderer (register-renderer 'square-tunnel (new Transparent-Renderer 'square-tunnel)))
  (set! fly-renderer (register-renderer 'fly (new Transparent-Renderer 'fly)))
  (set! color-renderer (register-renderer 'color (new Color-Renderer 'color)))
  (set! character-renderer (register-renderer 'character (new Character-Renderer 'playerframe)))
  (set! character2-renderer (register-renderer 'character2 (new Character2-Renderer 'color))))


(definition public (reset-renderes)
  (iterate-table renderers
    (lambda (name renderer)
      (reset~ renderer))))


(definition protected (report-renderers)
  (iterate-table renderers
    (lambda (name renderer)
      (debug name
             (get-size~ (get-meshes~ renderer))
             (get-size~ (get-entities~ renderer))))))


;;;
;;;; Renderer
;;;


(class Mesh-Renderer extends Object
  
  
  (slot program  getter generate)
  (slot meshes   getter generate)
  (slot entities getter generate)
  
  
  (method override (initialize program)
    (let ((world (current-world)))
      (set! program~self (find-mesh-program~ world program))
      (set! meshes~self (new Axis 0))
      (set! entities~self (new Axis 0))))
  
  
  (method (reset)
    (set-size~ meshes 0)
    (set-size~ entities 0))
  
  
  (method (add-mesh mesh)
    (axis-add meshes mesh))
  
  
  (method (add-entity entity model mesh)
    (axis-add entities entity)
    (axis-add entities model)
    (axis-add entities mesh))
  
  
  (method (draw)
    (draw-meshes)
    (draw-entities))
  
  
  (method (draw-meshes)
    (let ((world (current-world)))
      (let ((size (get-size~ meshes))
            (content (get-content~ meshes))
            (matrix (get-block-matrix~ world)))
        (loop (for i from 0 below size)
              (let ((mesh (vector-ref content i)))
                (vector-set! content i #f)
                (let ((material (get-material~ mesh)))
                  (bind-render-uniforms~ program material)
                  (bind-uniforms~ program mesh matrix #f)
                  (draw-mesh~ program mesh)
                  (unbind-uniforms~ program)
                  (unbind-render-uniforms~ program)))))))
  
  
  (method (draw-entities)
    (let ((size (get-size~ entities))
          (content (get-content~ entities)))
      (loop (for i from 0 below size by 3)
            (let ((entity (vector-ref content i))
                  (model (vector-ref content (+ i 1)))
                  (mesh (vector-ref content (+ i 2))))
              (vector-set! content i #f)
              (vector-set! content (+ i 1) #f)
              (vector-set! content (+ i 2) #f)
              (let ((matrix (matrix-multiply& (get-matrix~ entity) (get-global-matrix~ model)))
                    (material (get-material~ mesh)))
                (bind-render-uniforms~ program material)
                (bind-uniforms entity model mesh matrix)
                (draw-mesh~ program mesh)
                (unbind-render-uniforms)
                (unbind-render-uniforms~ program))))))
  
  
  (method protected virtual (bind-uniforms entity model mesh matrix)
    (bind-uniforms~ program mesh matrix (and (entity-animate?~ entity) (get-bone-matrices~ (get-morphing~ entity)))))
  
  
  (method protected virtual (unbind-render-uniforms)
    (unbind-render-uniforms~ program)))


;;;
;;;; Opaque-Renderer
;;;


(class Opaque-Renderer extends Mesh-Renderer
  
  
  (method (render)
    (use~ program)
    (glDisable GL_BLEND)
    (glDisable GL_ALPHA_TEST)
    (draw)
    (unuse~ program)))


;;;
;;;; Transparent-Renderer
;;;


(class Transparent-Renderer extends Mesh-Renderer
  
  
  (method (render)
    (use~ program)
    (glDisable GL_BLEND)
    (glEnable GL_ALPHA_TEST)
    (glAlphaFunc GL_GREATER .7)
    (draw)
    (glDisable GL_ALPHA_TEST)
    (glDisable GL_BLEND)
    (unuse~ program)))


;;;
;;;; Culled-Transparent-Renderer
;;;


(class Culled-Transparent-Renderer extends Mesh-Renderer
  
  
  (method (render)
    (use~ program)
    (glEnable GL_CULL_FACE)
    (glCullFace GL_FRONT)
    (glDisable GL_BLEND)
    (glEnable GL_ALPHA_TEST)
    (glAlphaFunc GL_GREATER .7)
    (draw)
    (glDisable GL_ALPHA_TEST)
    (glDisable GL_BLEND)
    (glCullFace GL_BACK)
    (glDisable GL_CULL_FACE)
    (unuse~ program)))


;;;
;;;; Water-Renderer
;;;


(class Water-Renderer extends Mesh-Renderer
  
  
  (method (render)
    (use~ program)
    (glDisable GL_BLEND)
    (glDisable GL_ALPHA_TEST)
    (glEnable GL_SAMPLE_ALPHA_TO_COVERAGE_ARB)
    (draw)
    (glDisable GL_SAMPLE_ALPHA_TO_COVERAGE_ARB)
    (glDisable GL_ALPHA_TEST)
    (glDisable GL_BLEND)
    (unuse~ program)))


;;;
;;;; Color-Renderer
;;;


(class Color-Renderer extends Mesh-Renderer
  
  
  (method (render)
    (use~ program)
    (glDisable GL_BLEND)
    (glEnable GL_ALPHA_TEST)
    (glAlphaFunc GL_GREATER .7)
    (draw)
    (glDisable GL_ALPHA_TEST)
    (glDisable GL_BLEND)
    (unuse~ program))
  
  
  (method override (bind-uniforms entity model mesh matrix)
    (model-bind-uniforms~ model entity program mesh matrix)))


;;;
;;;; Character-Renderer
;;;


(class Character-Renderer extends Mesh-Renderer
  
  
  (method (render)
    (use~ program)
    (glEnable GL_CULL_FACE)
    (glCullFace GL_FRONT)
    (glEnable GL_BLEND)
    (glBlendFunc GL_SRC_ALPHA GL_ONE_MINUS_SRC_ALPHA)
    (glEnable GL_ALPHA_TEST)
    (glAlphaFunc GL_GEQUAL .1)
    (draw)
    (glDisable GL_ALPHA_TEST)
    (glCullFace GL_BACK)
    (glDisable GL_CULL_FACE)
    (unuse~ program))
  
  
  (method override (bind-uniforms entity model mesh matrix)
    (model-bind-uniforms~ model entity program mesh matrix)))


;;;
;;;; Character2-Renderer
;;;


(class Character2-Renderer extends Mesh-Renderer
  
  
  (method (render)
    (use~ program)
    (glEnable GL_CULL_FACE)
    (glCullFace GL_FRONT)
    (glDisable GL_LIGHTING)
    (glEnable GL_BLEND)
    (glBlendFunc GL_SRC_ALPHA GL_ONE_MINUS_SRC_ALPHA)
    (glDisable GL_ALPHA_TEST)
    (draw)
    (glDisable GL_ALPHA_TEST)
    (glDisable GL_BLEND)
    (glCullFace GL_BACK)
    (glDisable GL_CULL_FACE)
    (unuse~ program))
  
  
  (method override (bind-uniforms entity model mesh matrix)
    (model-bind-uniforms~ model entity program mesh matrix)))


;;;
;;;; Wireframe
;;;


(definition wireframe?
  #f)

(definition public (get-wireframe?)
  wireframe?)

(definition public (set-wireframe? flag)
  (set! wireframe? flag))


;;;
;;;; Register
;;;


(definition public (register-meshes meshes)
  (iterate-table meshes
    (lambda (material mesh)
      (let ((renderer (if wireframe? wireframe-renderer (get-renderer~ material))))
        (add-mesh~ renderer mesh)))))


(definition public (register-entities entities)
  (for-each register-entity entities))


(definition public (register-entity entity)
  (define (add-model model meshes)
    (loop (for mesh in-vector meshes)
          (let ((renderer (or (get-renderer~ entity) (effective-renderer model mesh))))
            (add-entity~ renderer entity model mesh)))
    (for-each (lambda (child)
                (add-model child (get-meshes~ child)))
              (get-children~ model)))
  
  (define (effective-renderer model mesh)
    (let ((material (get-material~ mesh)))
      (or (and material (get-renderer~ material))
          (model-renderer~ model))))
  
  (when (get-visible?~ entity)
    (add-model (cache-model~ entity)
               (entity-meshes~ entity))))


;;;
;;;; Render
;;;


(definition public (render-opaque)
  (site (render-opaque parent: draw-world)
  (render~ opaque-renderer)
  (render~ wet-renderer)))


(definition public (render-transparent)
  (site (render-transparent parent: draw-world)
  (render~ wireframe-renderer)
  (render~ squareframe-renderer)
  (render~ radial-blur-renderer)
  (render~ motion-blur-renderer)
  (render~ water-renderer)
  (render~ julia-renderer)
  (render~ sierpinski-renderer)
  (render~ multitexture-renderer)
  (render~ kaleidoscope-renderer)
  (render~ tunnel-renderer)
  (render~ square-tunnel-renderer)
  (render~ fly-renderer)
  (render~ color-renderer)
  (render~ transparent-renderer)
  (render~ culled-transparent-renderer)))


(definition public (render-character)
  (site (render-character parent: draw-world)
  (render~ character2-renderer)
  (render~ character-renderer))))
