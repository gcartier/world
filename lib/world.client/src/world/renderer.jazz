;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Renderer
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2013
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.renderer jazz


(import (jazz.geometry)
        (jazz.graphic)
        (jazz.graphic.opengl.glew)
        (jazz.library)
        (world)
        (world.autoload)
        (world.geometry)
        (world.support)
        (world.syntax (phase syntax)))


;;;
;;;; Renderers
;;;


(definition renderers
  (make-table test: eq?))

(definition public (get-renderers)
  renderers)

(definition public (register-renderer name renderer)
  (table-set! renderers name renderer)
  renderer)

(definition public (find-renderer name)
  (table-ref renderers name))


(definition public opaque-renderer
  #f)

(definition public transparent-renderer
  #f)

(definition public culled-transparent-renderer
  #f)

(definition public wireframe-renderer
  #f)

(definition public squareframe-renderer
  #f)

(definition public radial-blur-renderer
  #f)

(definition public motion-blur-renderer
  #f)

(definition public water-renderer
  #f)

(definition public julia-renderer
  #f)

(definition public sierpinski-renderer
  #f)

(definition public multitexture-renderer
  #f)

(definition public kaleidoscope-renderer
  #f)

(definition public tunnel-renderer
  #f)

(definition public square-tunnel-renderer
  #f)

(definition public fly-renderer
  #f)

(definition public color-renderer
  #f)

(definition public character-renderer
  #f)

(definition public character2-renderer
  #f)

(definition public animation-opaque-renderer
  #f)

(definition public animation-transparent-renderer
  #f)

(definition public animation-culled-transparent-renderer
  #f)


(definition public (prepare-renderes)
  (set! opaque-renderer (register-renderer 'opaque (new Opaque-Renderer 'dynamic-phong)))
  (set! transparent-renderer (register-renderer 'transparent (new Transparent-Renderer 'dynamic-phong)))
  (set! culled-transparent-renderer (register-renderer 'culled-transparent (new Culled-Transparent-Renderer 'dynamic-phong)))
  (set! wireframe-renderer (register-renderer 'wireframe (new Transparent-Renderer 'wireframe)))
  (set! squareframe-renderer (register-renderer 'squareframe (new Transparent-Renderer 'squareframe)))
  (set! radial-blur-renderer (register-renderer 'radial-blur (new Transparent-Renderer 'radial-blur)))
  (set! motion-blur-renderer (register-renderer 'motion-blur (new Transparent-Renderer 'motion-blur)))
  (set! water-renderer (register-renderer 'water (new Transparent-Renderer 'water)))
  (set! julia-renderer (register-renderer 'julia (new Transparent-Renderer 'julia)))
  (set! sierpinski-renderer (register-renderer 'sierpinski (new Transparent-Renderer 'sierpinski)))
  (set! multitexture-renderer (register-renderer 'multitexture (new Transparent-Renderer 'multitexture)))
  (set! kaleidoscope-renderer (register-renderer 'kaleidoscope (new Transparent-Renderer 'kaleidoscope)))
  (set! tunnel-renderer (register-renderer 'tunnel (new Transparent-Renderer 'tunnel)))
  (set! square-tunnel-renderer (register-renderer 'square-tunnel (new Transparent-Renderer 'square-tunnel)))
  (set! fly-renderer (register-renderer 'fly (new Transparent-Renderer 'fly)))
  (set! color-renderer (register-renderer 'color (new Color-Renderer 'color)))
  (set! character-renderer (register-renderer 'character (new Character-Renderer 'playerframe)))
  (set! character2-renderer (register-renderer 'character2 (new Character2-Renderer 'color)))
  (when (get-animations?)
    (set! animation-opaque-renderer (register-renderer 'animation-opaque (new Opaque-Renderer 'skeletal-phong animation?: #t)))
    (set! animation-transparent-renderer (register-renderer 'animation-transparent (new Transparent-Renderer 'skeletal-phong animation?: #t)))
    (set! animation-culled-transparent-renderer (register-renderer 'animation-culled-transparent (new Culled-Transparent-Renderer 'skeletal-phong animation?: #t)))))


(definition public (reset-renderes)
  (iterate-table renderers
    (lambda (name renderer)
      (reset~ renderer))))


(definition protected (report-renderers)
  (iterate-table renderers
    (lambda (name renderer)
      (debug name
             (get-size~ (get-meshes~ renderer))
             (get-size~ (get-entities~ renderer))))))


;;;
;;;; Renderer
;;;


(class Mesh-Renderer extends Object
  
  
  (slot program    getter generate)
  (slot animation? getter generate)
  (slot meshes     getter generate)
  (slot entities   getter generate)
  
  
  (method override (initialize program (animation?: animation? #f))
    (let ((world (current-world)))
      (set! program~self (find-mesh-program~ world program))
      (set! animation?~self animation?)
      (set! meshes~self (new Axis 0))
      (set! entities~self (new Axis 0))))
  
  
  (method (reset)
    (set-size~ meshes 0)
    (set-size~ entities 0))
  
  
  (method (add-mesh mesh)
    (axis-add meshes mesh))
  
  
  (method (add-entity entity model mesh)
    (axis-add entities entity)
    (axis-add entities model)
    (axis-add entities mesh))
  
  
  (method (draw-meshes)
    (let ((size (get-size~ meshes))
          (content (get-content~ meshes)))
      (loop (for i from 0 below size)
            (let ((mesh (vector-ref content i)))
              (draw-mesh~ program mesh)))))
  
  
  (method (draw-entities)
    (let ((size (get-size~ entities))
          (content (get-content~ entities)))
      (loop (for i from 0 below size by 3)
            (let ((entity (vector-ref content i))
                  (model (vector-ref content (+ i 1)))
                  (mesh (vector-ref content (+ i 2))))
              (let ((matrix (matrix-multiply& (get-matrix~ entity) (get-global-matrix~ model)))
                    (material (get-material~ mesh)))
                (bind-render-uniforms~ program material)
                (bind-uniforms entity model mesh matrix)
                (draw-mesh~ program mesh)
                (unbind-render-uniforms)
                (unbind-render-uniforms~ program))))))
  
  
  (method protected virtual (bind-uniforms entity model mesh matrix)
    (bind-uniforms~ program mesh matrix (and animation? (get-bone-matrices~ (get-morphing~ entity)))))
  
  
  (method protected virtual (unbind-render-uniforms)
    (unbind-render-uniforms~ program)))


;;;
;;;; Opaque-Renderer
;;;


(class Opaque-Renderer extends Mesh-Renderer
  
  
  (method (render-entities)
    (use~ program)
    (glDisable GL_BLEND)
    (glDisable GL_ALPHA_TEST)
    (draw-entities)
    (unuse~ program)))


;;;
;;;; Transparent-Renderer
;;;


(class Transparent-Renderer extends Mesh-Renderer
  
  
  (method (render-entities)
    (use~ program)
    (glDisable GL_BLEND)
    (glEnable GL_ALPHA_TEST)
    (glAlphaFunc GL_GREATER .7)
    (draw-entities)
    (glDisable GL_ALPHA_TEST)
    (glDisable GL_BLEND)
    (unuse~ program)))


;;;
;;;; Culled-Transparent-Renderer
;;;


(class Culled-Transparent-Renderer extends Mesh-Renderer
  
  
  (method (render-entities)
    (use~ program)
    (glEnable GL_CULL_FACE)
    (glCullFace GL_FRONT)
    (glDisable GL_BLEND)
    (glEnable GL_ALPHA_TEST)
    (glAlphaFunc GL_GREATER .7)
    (draw-entities)
    (glDisable GL_ALPHA_TEST)
    (glDisable GL_BLEND)
    (glCullFace GL_BACK)
    (glDisable GL_CULL_FACE)
    (unuse~ program)))


;;;
;;;; Color-Renderer
;;;


(class Color-Renderer extends Mesh-Renderer
  
  
  (method (render-entities)
    (use~ program)
    (glDisable GL_BLEND)
    (glEnable GL_ALPHA_TEST)
    (glAlphaFunc GL_GREATER .7)
    (draw-entities)
    (glDisable GL_ALPHA_TEST)
    (glDisable GL_BLEND)
    (unuse~ program))
  
  
  (method override (bind-uniforms entity model mesh matrix)
    (model-bind-uniforms~ model entity program mesh matrix)))


;;;
;;;; Wait
;;;


;; alpha-blend
@wait
((alpha-blend)
 (glEnable GL_BLEND)
 (glBlendFunc GL_SRC_ALPHA GL_ONE_MINUS_SRC_ALPHA)
 (glDisable GL_ALPHA_TEST)
 (draw-entities)
 (glDisable GL_BLEND))

;; additive
@wait
((additive)
 (glEnable GL_BLEND)
 (glBlendFunc GL_SRC_COLOR GL_ONE)
 (draw-entities)
 (glBlendFunc GL_SRC_ALPHA GL_ONE_MINUS_SRC_ALPHA)
 (glDisable GL_BLEND))

;; additive-alpha
@wait
((additive-alpha)
 (glEnable GL_BLEND)
 (glBlendFunc GL_SRC_ALPHA GL_ONE)
 (draw-entities)
 (glBlendFunc GL_SRC_ALPHA GL_ONE_MINUS_SRC_ALPHA)
 (glDisable GL_BLEND))

;; modulate
@wait
((modulate)
 (glEnable GL_BLEND)
 (glBlendFunc GL_DST_COLOR GL_SRC_COLOR)
 (draw-entities)
 (glBlendFunc GL_SRC_ALPHA GL_ONE_MINUS_SRC_ALPHA)
 (glDisable GL_BLEND))


;;;
;;;; Vegetation
;;;


@wait
((vegetation)
 (let ((texture (get-texture~ material)))
   ;; alpha test
   (glBindTexture GL_TEXTURE_2D (get-id~ texture))
   (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_MAG_FILTER GL_LINEAR)
   (glEnable GL_BLEND)
   (glBlendFunc GL_ONE GL_ONE_MINUS_SRC_ALPHA)
   (glEnable GL_ALPHA_TEST)
   (glAlphaFunc GL_GREATER .7)
   (draw-entities)
   (glDisable GL_ALPHA_TEST)
   (glBlendFunc GL_SRC_ALPHA GL_ONE_MINUS_SRC_ALPHA)
   ;; blend - doesn't seem to work for vegetation
   (when #f
     (glEnable GL_BLEND)
     (glBlendFunc GL_SRC_ALPHA GL_ONE_MINUS_SRC_ALPHA)
     (glDepthMask GL_FALSE)
     (draw-entities)
     (glDepthMask GL_TRUE))
   (glBindTexture GL_TEXTURE_2D 0)))


;;;
;;;; Character-Renderer
;;;


(class Character-Renderer extends Mesh-Renderer
  
  
  (method (render-entities)
    (use~ program)
    (glEnable GL_CULL_FACE)
    (glCullFace GL_FRONT)
    (glEnable GL_BLEND)
    (glBlendFunc GL_SRC_ALPHA GL_ONE_MINUS_SRC_ALPHA)
    (glEnable GL_ALPHA_TEST)
    (glAlphaFunc GL_GEQUAL .1)
    (draw-entities)
    (glDisable GL_ALPHA_TEST)
    (glCullFace GL_BACK)
    (glDisable GL_CULL_FACE)
    (unuse~ program))
  
  
  (method override (bind-uniforms entity model mesh matrix)
    (model-bind-uniforms~ model entity program mesh matrix)))


;;;
;;;; Character2-Renderer
;;;


(class Character2-Renderer extends Mesh-Renderer
  
  
  (method (render-entities)
    (use~ program)
    (glEnable GL_CULL_FACE)
    (glCullFace GL_FRONT)
    (glDisable GL_LIGHTING)
    (glEnable GL_BLEND)
    (glBlendFunc GL_SRC_ALPHA GL_ONE_MINUS_SRC_ALPHA)
    (glDisable GL_ALPHA_TEST)
    (draw-entities)
    (glDisable GL_ALPHA_TEST)
    (glDisable GL_BLEND)
    (glCullFace GL_BACK)
    (glDisable GL_CULL_FACE)
    (unuse~ program))
  
  
  (method override (bind-uniforms entity model mesh matrix)
    (model-bind-uniforms~ model entity program mesh matrix)))


;;;
;;;; Register
;;;


(definition public (register-entities entities)
  (for-each register-entity entities))


(definition public (register-entity entity)
  (let ((animate? (entity-animate?~ entity)))
    (define (add-model model)
      (let ((meshes (entity-meshes~ entity model)))
        (loop (for mesh in-vector meshes)
              (let ((renderer (or (get-renderer~ entity) (effective-renderer model mesh))))
                ;; quicky for test
                (when animate?
                  (cond ((eq? renderer opaque-renderer) (set! renderer animation-opaque-renderer))
                        ((eq? renderer transparent-renderer) (set! renderer animation-transparent-renderer))
                        ((eq? renderer culled-transparent-renderer) (set! renderer animation-culled-transparent-renderer))))
                (add-entity~ renderer entity model mesh)))
        (for-each add-model (get-children~ model))))
    
    (define (effective-renderer model mesh)
      (let ((material (get-material~ mesh)))
        ;; or is a quicky for test
        (or (and material (get-renderer~ material))
            (model-renderer~ model animate?))))
    
    (when (get-visible?~ entity)
      (add-model (cache-model~ entity)))))


;;;
;;;; Render
;;;


(definition public (render-opaque)
  (render-entities~ opaque-renderer)
  (when (get-animations?)
    (render-entities~ animation-opaque-renderer)))


(definition public (render-transparent)
  (render-entities~ wireframe-renderer)
  (render-entities~ squareframe-renderer)
  (render-entities~ radial-blur-renderer)
  (render-entities~ motion-blur-renderer)
  (render-entities~ water-renderer)
  (render-entities~ julia-renderer)
  (render-entities~ sierpinski-renderer)
  (render-entities~ multitexture-renderer)
  (render-entities~ kaleidoscope-renderer)
  (render-entities~ tunnel-renderer)
  (render-entities~ square-tunnel-renderer)
  (render-entities~ fly-renderer)
  (render-entities~ color-renderer)
  (render-entities~ transparent-renderer)
  (render-entities~ culled-transparent-renderer)
  (when (get-animations?)
    (render-entities~ animation-transparent-renderer)
    (render-entities~ animation-culled-transparent-renderer)))


(definition public (render-character)
  (render-entities~ character2-renderer)
  (render-entities~ character-renderer)))
