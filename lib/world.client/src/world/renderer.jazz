;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Renderer
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2013
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.renderer jazz


(import (jazz.geometry)
        (jazz.graphic)
        (jazz.graphic.opengl.glew)
        (jazz.library)
        (world)
        (world.autoload)
        (world.geometry)
        (world.syntax (phase syntax)))


;;;
;;;; Renderers
;;;


(definition public opaque-renderer
  #f)

(definition public transparent-renderer
  #f)

(definition public wireframe-renderer
  #f)

(definition public color-renderer
  #f)

(definition public animation-renderer
  #f)

(definition public character-renderer
  #f)

(definition public character2-renderer
  #f)


(definition public (prepare-renderes)
  (set! opaque-renderer (new Opaque-Renderer 'dynamic-phong))
  (set! transparent-renderer (new Transparent-Renderer 'dynamic-phong))
  (set! wireframe-renderer (new Wireframe-Renderer 'wireframe))
  (set! color-renderer (new Color-Renderer 'color))
  (set! animation-renderer (new Animation-Renderer 'skeletal-phong))
  (set! character-renderer (new Character-Renderer 'playerframe))
  (set! character2-renderer (new Character2-Renderer 'color)))


(definition public (reset-renderes)
  (reset~ opaque-renderer)
  (reset~ transparent-renderer)
  (reset~ wireframe-renderer)
  (reset~ color-renderer)
  (reset~ animation-renderer)
  (reset~ character-renderer)
  (reset~ character2-renderer))


;;;
;;;; Renderer
;;;


(class Mesh-Renderer extends Object
  
  
  (slot program  getter generate)
  (slot meshes   getter generate)
  (slot entities getter generate)
  
  
  (method override (initialize program)
    (let ((world (current-world)))
      (set! program~self (find-mesh-program~ world program))
      (set! meshes~self (new Axis 0))
      (set! entities~self (new Axis 0))))
  
  
  (method (reset)
    (set-size~ meshes 0)
    (set-size~ entities 0))
  
  
  (method (add-mesh mesh)
    (axis-add meshes mesh))
  
  
  (method (add-entity entity model)
    (axis-add entities entity)
    (axis-add entities model))
  
  
  (method (draw-meshes)
    (let ((size (get-size~ meshes))
          (content (get-content~ meshes)))
      (loop (for i from 0 below size)
            (let ((mesh (vector-ref content i)))
              (draw-mesh~ program mesh)))))
  
  
  (method (draw-entities)
    (let ((size (get-size~ entities))
          (content (get-content~ entities)))
      (loop (for i from 0 below size by 2)
            (let ((entity (vector-ref content i))
                  (model (vector-ref content (+ i 1))))
              (let ((mesh (get-mesh~ model))
                    (matrix (matrix-multiply (get-matrix~ entity) (get-global-matrix~ model)))
                    (material (effective-material~ entity model)))
                (bind-render-uniforms~ program material)
                (bind-uniforms entity model mesh matrix)
                (draw-mesh~ program mesh)
                (unbind-render-uniforms)
                (unbind-render-uniforms~ program))))))
  
  
  (method protected virtual (bind-uniforms entity model mesh matrix)
    (bind-uniforms~ program mesh matrix #f))
  
  
  (method protected virtual (unbind-render-uniforms)
    (unbind-render-uniforms~ program)))


;;;
;;;; Opaque-Renderer
;;;


(class Opaque-Renderer extends Mesh-Renderer
  
  
  (method (render-entities)
    (glDisable GL_BLEND)
    (glDisable GL_ALPHA_TEST)
    (draw-entities)))


;;;
;;;; Transparent-Renderer
;;;


(class Transparent-Renderer extends Mesh-Renderer
  
  
  (method (render-entities)
    (use~ program)
    (glDisable GL_BLEND)
    (glEnable GL_ALPHA_TEST)
    (glAlphaFunc GL_GREATER .7)
    (draw-entities)
    (glDisable GL_ALPHA_TEST)
    (glDisable GL_BLEND)
    (unuse~ program)))


;;;
;;;; Wireframe-Renderer
;;;


(class Wireframe-Renderer extends Mesh-Renderer
  
  
  (method (render-entities)
    (use~ program)
    (glDisable GL_BLEND)
    (glEnable GL_ALPHA_TEST)
    (glAlphaFunc GL_GREATER .7)
    (draw-entities)
    (glDisable GL_ALPHA_TEST)
    (glDisable GL_BLEND)
    (unuse~ program)))


;;;
;;;; Color-Renderer
;;;


(class Color-Renderer extends Mesh-Renderer
  
  
  (method (render-entities)
    (use~ program)
    (glDisable GL_BLEND)
    (glEnable GL_ALPHA_TEST)
    (glAlphaFunc GL_GREATER .7)
    (draw-entities)
    (glDisable GL_ALPHA_TEST)
    (glDisable GL_BLEND)
    (unuse~ program))
  
  
  (method override (bind-uniforms entity model mesh matrix)
    (model-bind-uniforms~ model entity program mesh matrix)))


;;;
;;;; Wait
;;;


;; alpha-blend
@wait
((alpha-blend)
 (glEnable GL_BLEND)
 (glBlendFunc GL_SRC_ALPHA GL_ONE_MINUS_SRC_ALPHA)
 (glDisable GL_ALPHA_TEST)
 (draw-mesh~ program mesh)
 (glDisable GL_BLEND))

;; additive
@wait
((additive)
 (glEnable GL_BLEND)
 (glBlendFunc GL_SRC_COLOR GL_ONE)
 (draw-mesh~ program mesh)
 (glBlendFunc GL_SRC_ALPHA GL_ONE_MINUS_SRC_ALPHA)
 (glDisable GL_BLEND))

;; additive-alpha
@wait
((additive-alpha)
 (glEnable GL_BLEND)
 (glBlendFunc GL_SRC_ALPHA GL_ONE)
 (draw-mesh~ program mesh)
 (glBlendFunc GL_SRC_ALPHA GL_ONE_MINUS_SRC_ALPHA)
 (glDisable GL_BLEND))

;; modulate
@wait
((modulate)
 (glEnable GL_BLEND)
 (glBlendFunc GL_DST_COLOR GL_SRC_COLOR)
 (draw-mesh~ program mesh)
 (glBlendFunc GL_SRC_ALPHA GL_ONE_MINUS_SRC_ALPHA)
 (glDisable GL_BLEND))


;;;
;;;; Vegetation
;;;


@wait
((vegetation)
 (let ((texture (get-texture~ material)))
   ;; alpha test
   (glBindTexture GL_TEXTURE_2D (get-id~ texture))
   (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_MAG_FILTER GL_LINEAR)
   (glEnable GL_BLEND)
   (glBlendFunc GL_ONE GL_ONE_MINUS_SRC_ALPHA)
   (glEnable GL_ALPHA_TEST)
   (glAlphaFunc GL_GREATER .7)
   (draw-mesh~ program mesh)
   (glDisable GL_ALPHA_TEST)
   (glBlendFunc GL_SRC_ALPHA GL_ONE_MINUS_SRC_ALPHA)
   ;; blend - doesn't seem to work for vegetation
   (when #f
     (glEnable GL_BLEND)
     (glBlendFunc GL_SRC_ALPHA GL_ONE_MINUS_SRC_ALPHA)
     (glDepthMask GL_FALSE)
     (draw-mesh~ program mesh)
     (glDepthMask GL_TRUE))
   (glBindTexture GL_TEXTURE_2D 0)))


;;;
;;;; Animation-Renderer
;;;


(class Animation-Renderer extends Mesh-Renderer
  
  
  (method (render-entities)
    (use~ program)
    (glDisable GL_BLEND)
    (glEnable GL_ALPHA_TEST)
    (glAlphaFunc GL_GREATER .7)
    (draw-entities)
    (glDisable GL_ALPHA_TEST)
    (glDisable GL_BLEND)
    (unuse~ program))
  
  
  (method override (bind-uniforms entity model mesh matrix)
    (bind-uniforms~ program mesh matrix (get-bone-matrices~ (get-morphing~ entity)))))


;;;
;;;; Character-Renderer
;;;


(class Character-Renderer extends Mesh-Renderer
  
  
  (method (render-entities)
    (use~ program)
    (glEnable GL_CULL_FACE)
    (glCullFace GL_FRONT)
    (glEnable GL_BLEND)
    (glBlendFunc GL_SRC_ALPHA GL_ONE_MINUS_SRC_ALPHA)
    (glEnable GL_ALPHA_TEST)
    (glAlphaFunc GL_GEQUAL .1)
    (draw-entities)
    (glDisable GL_ALPHA_TEST)
    (glCullFace GL_BACK)
    (glDisable GL_CULL_FACE)
    (unuse~ program))
  
  
  (method override (bind-uniforms entity model mesh matrix)
    (model-bind-uniforms~ model entity program mesh matrix)))


;;;
;;;; Character2-Renderer
;;;


(class Character2-Renderer extends Mesh-Renderer
  
  
  (method (render-entities)
    (use~ program)
    (glEnable GL_CULL_FACE)
    (glCullFace GL_FRONT)
    (glDisable GL_LIGHTING)
    (glEnable GL_BLEND)
    (glBlendFunc GL_SRC_ALPHA GL_ONE_MINUS_SRC_ALPHA)
    (glDisable GL_ALPHA_TEST)
    (draw-entities)
    (glDisable GL_ALPHA_TEST)
    (glDisable GL_BLEND)
    (glCullFace GL_BACK)
    (glDisable GL_CULL_FACE)
    (unuse~ program))
  
  
  (method override (bind-uniforms entity model mesh matrix)
    (model-bind-uniforms~ model entity program mesh matrix)))


;;;
;;;; Register
;;;


(definition public (register-entities entities)
  (for-each register-entity entities))


(definition public (register-entity entity (renderer #f))
  (define (add-model renderer model)
    (for-each (lambda (model)
                (let ((renderer (model-renderer~ model)))
                  (add-entity~ renderer entity model)
                  (for-each add-model (get-children~ model))))
              (get-children~ model)))
  
  (when (get-visible?~ entity)
    (let ((model (cache-model~ entity)))
      (let ((renderer (or renderer (entity-renderer~ entity) (model-renderer~ model))))
        (add-entity~ renderer entity model)
        (add-model renderer model)))))


;;;
;;;; Render
;;;


(definition public (render-opaque)
  (render-entities~ opaque-renderer))


(definition public (render-transparent)
  (render-entities~ wireframe-renderer)
  (render-entities~ color-renderer)
  (render-entities~ animation-renderer)
  (render-entities~ transparent-renderer))


(definition public (render-character)
  (render-entities~ character2-renderer)
  (render-entities~ character-renderer)))
