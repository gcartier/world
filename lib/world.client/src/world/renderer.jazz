;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; Renderer
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2016
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.renderer jazz


(import (jazz.opengl.glew)
        (world)
        (world.animation)
        (world.autoload)
        (world.entity)
        (world.geometry)
        (world.lighting)
        (world.mesh)
        (world.model)
        (world.overlay)
        (world.renderers)
        (world.shader)
        (world.support)
        (world.syntax (phase syntax))
        (world.task))


(proclaim (warn optimizations))


(class Base-Renderer extends Object
  
  
  (slot program <Shader-Program> accessors generate)
  
  
  (method protected virtual (reset)
    )
  
  
  (method protected virtual (add-mesh mesh <Mesh>)
    )
  
  
  (method protected virtual (empty?)
    )
  
  
  (method protected virtual (render)
    ))


;;;
;;;; Terrain
;;;


(class Terrain-Renderer extends Base-Renderer
  
  
  (slot meshes <Axis> getter generate)
  
  
  (method override (initialize program)
    (let ((world (current-world)))
      (set! program~self (find-mesh-program~ world program))
      (set! meshes~self (new Axis 0))))
  
  
  (method override (reset)
    (assert-task-mutex)
    (set-size~ meshes 0))
  
  
  (method override (add-mesh mesh <Mesh>)
    (assert-task-mutex)
    (axis-add meshes mesh))
  
  
  (method override (empty?)
    (assert-task-mutex)
    (= 0 (get-size~ meshes)))
  
  
  (method (draw-meshes material alpha-cut)
    (assert-task-mutex)
    (let ((world (current-world)))
      (let ((size (get-size~ meshes))
            (content (get-content~ meshes))
            (matrix (get-block-matrix~ world)))
        (when (> size 0)
          (bind-material~ program material)
          (bind-uniforms~ program (get-block-matrix~ world) #f no-overlay alpha-cut (current-block-lighting))
          (loop (for i from 0 below size)
                (let ((mesh <Mesh> (vector-ref content i)))
                  (vector-set! content i #f)
                  (draw-mesh~ program mesh)))
          (unbind-uniforms~ program)))))
  
  
  (method protected virtual (bind-uniforms entity <Entity> model <Model> matrix <f64vector> overlay alpha-cut lighting animate?)
    (bind-uniforms~ program matrix #f overlay alpha-cut lighting))
  
  
  (method protected virtual (unbind-uniforms)
    (unbind-uniforms~ program)))


;;;
;;;; Mesh
;;;


(class Mesh-Renderer extends Base-Renderer
  
  
  (slot meshes   <Axis> getter generate)
  (slot entities <Axis> getter generate)
  (slot ghosts   <Axis> getter generate)
  
  
  (method override (initialize program)
    (let ((world (current-world)))
      (set! program~self (find-mesh-program~ world program))
      (set! meshes~self (new Axis 0))
      (set! entities~self (new Axis 0))
      (set! ghosts~self (new Axis 0))))
  
  
  (method override (reset)
    (assert-task-mutex)
    (set-size~ meshes 0)
    (set-size~ entities 0)
    (set-size~ ghosts 0))
  
  
  (method override (add-mesh mesh <Mesh>)
    (assert-task-mutex)
    (axis-add meshes mesh))
  
  
  (method (add-entity entity model mesh <Mesh> lighting)
    (assert-task-mutex)
    (axis-add entities entity)
    (axis-add entities model)
    (axis-add entities mesh)
    (axis-add entities lighting))
  
  
  (method (add-ghost entity model mesh <Mesh> matrix <f64vector> moment <fx>)
    (assert-task-mutex)
    (axis-add ghosts entity)
    (axis-add ghosts model)
    (axis-add ghosts mesh)
    (axis-add ghosts matrix)
    (axis-add ghosts moment))
  
  
  (method override (empty?)
    (assert-task-mutex)
    (and (= 0 (get-size~ meshes))
         (= 0 (get-size~ entities))
         (= 0 (get-size~ ghosts))))
  
  
  (method (draw alpha-cut)
    (assert-task-mutex)
    (draw-meshes alpha-cut)
    (draw-entities alpha-cut)
    (draw-ghosts alpha-cut))
  
  
  (method (draw-meshes alpha-cut)
    (assert-task-mutex)
    (let ((world (current-world)))
      (let ((size (get-size~ meshes))
            (content (get-content~ meshes))
            (matrix (get-block-matrix~ world))
            (material? (bind-material?~ program)))
        (when (> size 0)
          (bind-uniforms~ program (get-block-matrix~ world) #f no-overlay alpha-cut (current-lighting))
          (loop (for i from 0 below size)
                (let ((mesh <Mesh> (vector-ref content i)))
                  (vector-set! content i #f)
                  (when material?
                    (bind-material~ program (get-material~ mesh)))
                  (draw-mesh~ program mesh)))
          (unbind-uniforms~ program)))))
  
  
  (method (draw-entities alpha-cut)
    (assert-task-mutex)
    (let ((size (get-size~ entities))
          (content (get-content~ entities))
          (material? (bind-material?~ program)))
      (when (> size 0)
        (loop (for i from 0 below size by 4)
              (let ((entity <Entity> (vector-ref content i))
                    (model <Model> (vector-ref content (+ i 1)))
                    (mesh <Mesh> (vector-ref content (+ i 2)))
                    (lighting <Lighting+> (vector-ref content (+ i 3))))
                (vector-set! content i #f)
                (vector-set! content (+ i 1) #f)
                (vector-set! content (+ i 2) #f)
                (vector-set! content (+ i 3) #f)
                (let ((matrix (matrix-multiply& (get-matrix~ entity) (get-global-matrix~ model))))
                  (when material?
                    (bind-material~ program (get-material~ mesh)))
                  (bind-uniforms entity model matrix (get-overlay~ entity) alpha-cut (or lighting (current-lighting)) #t)
                  (draw-mesh~ program mesh)
                  (unbind-uniforms)))))))
  
  
  ;; temp copy/paste of draw-entities
  (method (draw-ghosts alpha-cut)
    (assert-task-mutex)
    (let ((size (get-size~ ghosts))
          (content (get-content~ ghosts))
          (material? (bind-material?~ program)))
      (when (> size 0)
        (loop (for i from 0 below size by 5)
              (let ((entity <Entity> (vector-ref content i))
                    (model <Model> (vector-ref content (+ i 1)))
                    (mesh <Mesh> (vector-ref content (+ i 2)))
                    (matrix <f64vector> (vector-ref content (+ i 3)))
                    (moment <fx> (vector-ref content (+ i 4))))
                (vector-set! content i #f)
                (vector-set! content (+ i 1) #f)
                (vector-set! content (+ i 2) #f)
                (vector-set! content (+ i 3) #f)
                (vector-set! content (+ i 4) #f)
                (let ((matrix (matrix-multiply& matrix (get-global-matrix~ model))))
                  (when material?
                    (bind-material~ program (get-material~ mesh)))
                  (let ((overlay (if (= moment 0)
                                     #f32(1. 1. 1. 1.)
                                   #f32(1. 1. 1. .3))))
                    (bind-uniforms entity model matrix overlay alpha-cut (current-lighting) #f))
                  (draw-mesh~ program mesh)
                  (unbind-uniforms)))))))
  
  
  (method protected virtual (bind-uniforms entity <Entity> model <Model> matrix <f64vector> overlay alpha-cut lighting animate?)
    (bind-uniforms~ program matrix (and animate? (entity-animate?~ entity) (get-bone-matrices~ (cast <Morphing> (get-morphing~ entity)))) overlay alpha-cut lighting))
  
  
  (method protected virtual (unbind-uniforms)
    (unbind-uniforms~ program)))


;;;
;;;; Renderers
;;;


(definition public (prepare-renderes)
  ;; terrain
  (set-opaque-terrain-renderer (register-renderer 'opaque-terrain (new Opaque-Terrain-Renderer 'terrain)))
  (set-transparent-terrain-renderer (register-renderer 'transparent-terrain (new Transparent-Terrain-Renderer 'terrain)))
  (set-coverage-terrain-renderer (register-renderer 'coverage-terrain (new Coverage-Terrain-Renderer 'terrain)))
  (set-water-terrain-renderer (register-renderer 'water-terrain (new (if arb-multisample? Water-Terrain-Renderer Transparent-Terrain-Renderer) 'water-terrain)))
  (set-wet-terrain-renderer (register-renderer 'wet-terrain (new Opaque-Terrain-Renderer 'wet-terrain)))
  (set-multitexture-terrain-renderer (register-renderer 'multitexture-terrain (new Multitexture-Terrain-Renderer 'multitexture-terrain)))
  ;; entities
  (set-opaque-renderer (register-renderer 'opaque (new Opaque-Renderer 'phong)))
  (set-transparent-renderer (register-renderer 'transparent (new Transparent-Renderer 'phong)))
  (set-culled-transparent-renderer (register-renderer 'culled-transparent (new Culled-Transparent-Renderer 'phong)))
  (set-coverage-renderer (register-renderer 'coverage (new Coverage-Renderer 'phong)))
  (set-occlusion-renderer (register-renderer 'occlusion (new Transparent-Renderer 'occlusion)))
  (set-wireframe-renderer (register-renderer 'wireframe (new Transparent-Renderer 'wireframe)))
  (set-squareframe-renderer (register-renderer 'squareframe (new Transparent-Renderer 'squareframe)))
  (set-radial-blur-renderer (register-renderer 'radial-blur (new Transparent-Renderer 'radial-blur)))
  (set-motion-blur-renderer (register-renderer 'motion-blur (new Transparent-Renderer 'motion-blur)))
  (set-water-renderer (register-renderer 'water (new (if arb-multisample? Water-Renderer Transparent-Renderer) 'water)))
  (set-julia-renderer (register-renderer 'julia (new Transparent-Renderer 'julia)))
  (set-sierpinski-renderer (register-renderer 'sierpinski (new Transparent-Renderer 'sierpinski)))
  (set-multitexture-renderer (register-renderer 'multitexture (new Transparent-Renderer 'multitexture)))
  (set-kaleidoscope-renderer (register-renderer 'kaleidoscope (new Transparent-Renderer 'kaleidoscope)))
  (set-tunnel-renderer (register-renderer 'tunnel (new Transparent-Renderer 'tunnel)))
  (set-square-tunnel-renderer (register-renderer 'square-tunnel (new Transparent-Renderer 'square-tunnel)))
  (set-fly-renderer (register-renderer 'fly (new Transparent-Renderer 'fly)))
  (set-color-renderer (register-renderer 'color (new Color-Renderer 'color)))
  (set-orb-renderer (register-renderer 'orb (new Orb-Renderer 'playerframe)))
  (set-eye-renderer (register-renderer 'eye (new Eye-Renderer 'color)))
  (set-enemy-renderer (register-renderer 'enemy (new Enemy-Renderer 'color)))
  (set-missile-renderer (register-renderer 'missile (new Missile-Renderer 'playerframe)))
  (set-texture-renderer (register-renderer 'texture (new Texture-Renderer)))
  (set-drawable-renderer (register-renderer 'drawable (new Drawable-Renderer 'color))))


;;;
;;;; Opaque-Terrain-Renderer
;;;


(class Opaque-Terrain-Renderer extends Terrain-Renderer
  
  
  (method override (render)
    (assert-task-mutex)
    (unless (empty?)
      (use~ program)
      (draw-meshes (get-block-opaque~ (current-world)) 0.)
      (unuse~ program))))


;;;
;;;; Transparent-Terrain-Renderer
;;;


(class Transparent-Terrain-Renderer extends Terrain-Renderer
  
  
  (method override (render)
    (assert-task-mutex)
    (unless (empty?)
      (use~ program)
      (draw-meshes (get-block-transparent~ (current-world)) .7)
      (unuse~ program))))


;;;
;;;; Coverage-Terrain-Renderer
;;;


(class Coverage-Terrain-Renderer extends Terrain-Renderer
  
  
  (method override (render)
    (assert-task-mutex)
    (unless (empty?)
      (use~ program)
      (glEnable GL_SAMPLE_ALPHA_TO_COVERAGE_ARB)
      (draw-meshes (get-block-coverage~ (current-world)) 0.)
      (glDisable GL_SAMPLE_ALPHA_TO_COVERAGE_ARB)
      (unuse~ program))))


;;;
;;;; Water-Terrain-Renderer
;;;


(class Water-Terrain-Renderer extends Terrain-Renderer
  
  
  (method override (render)
    (assert-task-mutex)
    (unless (empty?)
      (use~ program)
      (glEnable GL_SAMPLE_ALPHA_TO_COVERAGE_ARB)
      (draw-meshes (get-block-water~ (current-world)) 0.)
      (glDisable GL_SAMPLE_ALPHA_TO_COVERAGE_ARB)
      (unuse~ program))))


;;;
;;;; Multitexture-Terrain-Renderer
;;;


(class Multitexture-Terrain-Renderer extends Terrain-Renderer
  
  
  (method override (render)
    (assert-task-mutex)
    (unless (empty?)
      (use~ program)
      (draw-meshes (get-block-multitexture~ (current-world)) .7)
      (unuse~ program))))


;;;
;;;; Opaque-Renderer
;;;


(class Opaque-Renderer extends Mesh-Renderer
  
  
  (method override (render)
    (assert-task-mutex)
    (unless (empty?)
      (use~ program)
      (draw 0.)
      (unuse~ program))))


;;;
;;;; Transparent-Renderer
;;;


(class Transparent-Renderer extends Mesh-Renderer
  
  
  (method override (render)
    (assert-task-mutex)
    (unless (empty?)
      (use~ program)
      ;; meshes / entities
      (draw-meshes .7)
      (draw-entities .7)
      ;; ghosts
      (glEnable GL_CULL_FACE)
      (glCullFace GL_FRONT)
      (glEnable GL_BLEND)
      (draw-ghosts .2)
      (glDisable GL_BLEND)
      (glCullFace GL_BACK)
      (glDisable GL_CULL_FACE)
      (unuse~ program))))


;;;
;;;; Culled-Transparent-Renderer
;;;


(class Culled-Transparent-Renderer extends Mesh-Renderer
  
  
  (method override (render)
    (assert-task-mutex)
    (unless (empty?)
      (use~ program)
      (glEnable GL_BLEND)
      (glEnable GL_CULL_FACE)
      (glCullFace GL_FRONT)
      (draw .7)
      (glDisable GL_BLEND)
      (glCullFace GL_BACK)
      (glDisable GL_CULL_FACE)
      (unuse~ program))))


;;;
;;;; Coverage-Renderer
;;;


(class Coverage-Renderer extends Mesh-Renderer
  
  
  (method override (render)
    (assert-task-mutex)
    (unless (empty?)
      (use~ program)
      (glEnable GL_SAMPLE_ALPHA_TO_COVERAGE_ARB)
      (draw 0.)
      (glDisable GL_SAMPLE_ALPHA_TO_COVERAGE_ARB)
      (unuse~ program))))


;;;
;;;; Water-Renderer
;;;


(class Water-Renderer extends Mesh-Renderer
  
  
  (method override (render)
    (assert-task-mutex)
    (unless (empty?)
      (use~ program)
      (glEnable GL_SAMPLE_ALPHA_TO_COVERAGE_ARB)
      (draw 0.)
      (glDisable GL_SAMPLE_ALPHA_TO_COVERAGE_ARB)
      (unuse~ program))))


;;;
;;;; Color-Renderer
;;;


(class Color-Renderer extends Mesh-Renderer
  
  
  (method override (render)
    (assert-task-mutex)
    (unless (empty?)
      (use~ program)
      (draw .1)
      (unuse~ program)))
  
  
  (method override (bind-uniforms entity <Entity> model <Model> matrix <f64vector> overlay alpha-cut lighting animate?)
    (model-bind-uniforms~ model entity program matrix overlay alpha-cut lighting)))


;;;
;;;; Orb-Renderer
;;;


(class Orb-Renderer extends Mesh-Renderer
  
  
  (method override (render)
    (assert-task-mutex)
    (unless (empty?)
      (use~ program)
      (glEnable GL_CULL_FACE)
      (glCullFace GL_FRONT)
      (glEnable GL_BLEND)
      (draw .1)
      (glDisable GL_BLEND)
      (glCullFace GL_BACK)
      (glDisable GL_CULL_FACE)
      (unuse~ program)))
  
  
  (method override (bind-uniforms entity <Entity> model <Model> matrix <f64vector> overlay alpha-cut lighting animate?)
    (model-bind-uniforms~ model entity program matrix overlay alpha-cut lighting)))


;;;
;;;; Eye-Renderer
;;;


(class Eye-Renderer extends Mesh-Renderer
  
  
  (method override (render)
    (assert-task-mutex)
    (unless (empty?)
      (use~ program)
      (glEnable GL_CULL_FACE)
      (glCullFace GL_FRONT)
      (glEnable GL_BLEND)
      (draw 0.)
      (glDisable GL_BLEND)
      (glCullFace GL_BACK)
      (glDisable GL_CULL_FACE)
      (unuse~ program)))
  
  
  (method override (bind-uniforms entity <Entity> model <Model> matrix <f64vector> overlay alpha-cut lighting animate?)
    (model-bind-uniforms~ model entity program matrix overlay alpha-cut lighting)))


;;;
;;;; Enemy-Renderer
;;;


(class Enemy-Renderer extends Mesh-Renderer
  
  
  (method override (render)
    (assert-task-mutex)
    (unless (empty?)
      (use~ program)
      (glEnable GL_CULL_FACE)
      (glCullFace GL_FRONT)
      (glEnable GL_SAMPLE_ALPHA_TO_COVERAGE_ARB)
      (draw 0.)
      (glDisable GL_SAMPLE_ALPHA_TO_COVERAGE_ARB)
      (glCullFace GL_BACK)
      (glDisable GL_CULL_FACE)
      (unuse~ program)))
  
  
  (method override (bind-uniforms entity <Entity> model <Model> matrix <f64vector> overlay alpha-cut lighting animate?)
    (model-bind-uniforms~ model entity program matrix overlay alpha-cut lighting)))


;;;
;;;; Missile-Renderer
;;;


(class Missile-Renderer extends Mesh-Renderer
  
  
  (method override (render)
    (assert-task-mutex)
    (unless (empty?)
      (use~ program)
      (glEnable GL_CULL_FACE)
      (glCullFace GL_FRONT)
      (glEnable GL_BLEND)
      (draw .1)
      (glDisable GL_BLEND)
      (glCullFace GL_BACK)
      (glDisable GL_CULL_FACE)
      (unuse~ program)))
  
  
  (method override (bind-uniforms entity <Entity> model <Model> matrix <f64vector> overlay alpha-cut lighting animate?)
    (unless (get-rendered?~ entity)
      (set-rendered?~ entity #t))
    (model-bind-uniforms~ model entity program matrix overlay alpha-cut lighting)))


;;;
;;;; Texture-Renderer
;;;


(class Texture-Renderer extends Base-Renderer
  
  
  (slot elements <Axis> getter generate)
  
  
  (method override (initialize)
    (let ((world (current-world)))
      (set! program~self (get-texture-program~ world))
      (set! elements~self (new Axis 0))))
  
  
  (method override (reset)
    (assert-task-mutex)
    (set-size~ elements 0))
  
  
  (method override (empty?)
    (assert-task-mutex)
    (= 0 (get-size~ elements)))
  
  
  (method override (render)
    (assert-task-mutex)
    (let ((camera (current-camera)))
      (glEnable GL_BLEND)
      (use~ program)
      (let ((size (get-size~ elements))
            (content (get-content~ elements)))
        (loop (for i from 0 below size)
              (let ((element <Element> (vector-ref content i)))
                (vector-set! content i #f)
                (bind-uniforms~ program (get-projection-matrix~ camera) (get-view-matrix~ camera) (get-matrix~ element))
                (draw~ element))))
      (unuse~ program)
      (glDisable GL_BLEND))))


;;;
;;;; Drawable-Renderer
;;;


(class Drawable-Renderer extends Mesh-Renderer
  
  
  (method override (render)
    (assert-task-mutex)
    (let ((size (get-size~ entities))
          (content (get-content~ entities)))
      (loop (for i from 0 below size)
            (let ((element <Element> (vector-ref content i)))
              (vector-set! content i #f)
              (draw~ element))))))


;;;
;;;; Occlusion
;;;


(definition occlusion?
  #f)

(definition public (get-occlusion?)
  occlusion?)

(definition public (set-occlusion? flag)
  (set! occlusion? flag))


;;;
;;;; Wireframe
;;;


(definition wireframe?
  #f)

(definition public (get-wireframe?)
  wireframe?)

(definition public (set-wireframe? flag)
  (set! wireframe? flag))


;;;
;;;; Register
;;;


(definition override-renderer
  #f)

(definition public (get-override-renderer)
  override-renderer)

(definition public (set-override-renderer renderer)
  (set! override-renderer renderer))


;; aec quicky
(definition public (register-entity entity <Entity> (include-invisibles? #f) (renderer #f) (lighting #f))
  (define (add-model model <Model> meshes)
    (loop (for mesh <Mesh> in-vector meshes)
          (let ((renderer <Mesh-Renderer> (or renderer (get-renderer~ entity) (effective-renderer model mesh))))
            (add-entity~ renderer entity model mesh lighting)))
    (for-each (lambda (child <Model>)
                (add-model child (get-meshes~ child)))
              (get-children~ model)))
  
  (define (effective-renderer model <Model> mesh <Mesh>)
    (let ((material (get-material~ mesh)))
      (or (and material (get-renderer~ material))
          (model-renderer~ model))))
  
  (assert-task-mutex)
  (when (or (get-visible?~ entity) include-invisibles?)
    (unless (virtual?~ entity)
      (if (drawable?~ entity)
          (axis-add (get-entities~ (get-drawable-renderer)) entity)
        (add-model (cache-model~ entity)
                   (entity-meshes~ entity))))
    (register-billboards~ entity)))


(definition public (register-texture-elements elements)
  (assert-task-mutex)
  (let ((axis (get-elements~ (get-texture-renderer))))
    (for-each (lambda (element)
                (axis-add axis element))
              elements)))


(definition public (register-texture-element element)
  (assert-task-mutex)
  (let ((axis (get-elements~ (get-texture-renderer))))
    (axis-add axis element)))


;; temp copy/paste of register-entity
(definition public (register-ghost entity <Entity> model <Model> meshes <object> matrix <f64vector> moment <fx>)
  (define (add-model model <Model> meshes)
    (loop (for mesh <Mesh> in-vector meshes)
          (let ((renderer <Mesh-Renderer> (or (get-renderer~ entity) (effective-renderer model mesh))))
            (add-ghost~ renderer entity model mesh matrix moment)))
    (for-each (lambda (child <Model>)
                (add-model child (get-meshes~ child)))
              (get-children~ model)))
  
  (define (effective-renderer model <Model> mesh <Mesh>)
    (let ((material (get-material~ mesh)))
      (or (and material (get-renderer~ material))
          (model-renderer~ model))))
  
  (assert-task-mutex)
  (add-model model meshes))


;;;
;;;; Render
;;;


(definition public (render-opaque)
  (render~ (get-opaque-terrain-renderer))
  (render~ (get-opaque-renderer))
  (render~ (get-wet-terrain-renderer)))


(definition public (render-transparent)
  (render~ (get-occlusion-renderer))
  (render~ (get-wireframe-renderer))
  (render~ (get-squareframe-renderer))
  (render~ (get-radial-blur-renderer))
  (render~ (get-motion-blur-renderer))
  (render~ (get-water-terrain-renderer))
  (render~ (get-water-renderer))
  (render~ (get-julia-renderer))
  (render~ (get-sierpinski-renderer))
  (render~ (get-multitexture-terrain-renderer))
  (render~ (get-multitexture-renderer))
  (render~ (get-kaleidoscope-renderer))
  (render~ (get-tunnel-renderer))
  (render~ (get-square-tunnel-renderer))
  (render~ (get-fly-renderer))
  (render~ (get-color-renderer))
  (render~ (get-transparent-terrain-renderer))
  (render~ (get-transparent-renderer))
  (render~ (get-culled-transparent-renderer))
  (render~ (get-coverage-terrain-renderer))
  (render~ (get-coverage-renderer))
  (render~ (get-texture-renderer))
  (render~ (get-drawable-renderer)))


(definition public (render-orb)
  (render~ (get-eye-renderer))
  (render~ (get-orb-renderer))
  (render~ (get-enemy-renderer))
  (render~ (get-missile-renderer))))
