;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; Billboards
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.billboard jazz


(import (jazz.geometry)
        (jazz.graphic)
        (world)
        (world.context)
        (gaea.geometry)
        (world.pane))


(definition public (billboard-matrix& position)
  (let ((view (get-view-matrix (current-camera)))
        (matrix (make-translation-matrix& position)))
    (matrix-transpose-3x3! matrix view)
    matrix))

(definition public (entity-billboard-matrix& me entity spacing)
  (billboard-matrix& (vertex+& (get-position entity) (vertex& 0. spacing 0.))))


(definition public (console-matrix& position)
  (matrix-multiply& (make-translation-matrix& position)
                    (make-x-rotation-matrix (/ PI 6.))))

(definition public (entity-console-matrix& me entity spacing)
  (console-matrix& (vertex+& (get-position entity) (vertex& 0. spacing 0.))))


(definition public (broken-matrix& position)
  (matrix-multiply& (make-translation-matrix& position)
                    (make-x-rotation-matrix& (/ PI 3.))
                    (make-y-rotation-matrix& (/ PI 4.))))

(definition public (entity-broken-matrix& me entity spacing)
  (broken-matrix& (vertex+& (get-position entity) (vertex& 0. spacing 0.))))


(definition public (lookat-matrix& lookat position)
  (matrix-multiply& (make-translation-matrix& position)
                    (make-lookat-matrix& lookat)
                    (make-y-rotation-matrix PI)))

(definition public (entity-lookat-matrix& me entity spacing)
  (lookat-matrix& (vertex+& (get-position entity) (vertex& 0. spacing 0.))
                  (get-lookat me)))


(definition public (orthogonal-matrix& from position)
  (matrix-multiply& (make-translation-matrix& position)
                    (make-lookat-matrix& (horizon-lookat& (vertex-normalize& (vertex-& from position))))))

(definition public (entity-orthogonal-matrix& me entity spacing)
  (matrix-multiply& (make-translation-matrix& (vertex+& (get-position entity) (vertex& 0. spacing 0.)))
                    (make-lookat-matrix& (horizon-lookat& (vertex-normalize& (vertex-& (get-position me) (get-position entity)))))))


(definition public (entity-matrix& me entity spacing)
  (matrix-multiply& (make-translation-matrix& (vertex+& (get-position entity) (vertex& 0. spacing 0.)))
                    (make-lookat-matrix& (get-lookat entity))))


(definition public (auxiliary-matrix& me entity spacing)
  (matrix-multiply& (make-translation-matrix& (vertex+& (get-position entity) spacing))
                    (make-lookat-matrix& (get-lookat entity))))


;;;
;;;; Name
;;;


(definition public (make-name-pane data)
  (bind (text font color h) data
    (let ((extent (text-extent font text)))
      (let ((width (get-width extent))
            (height (get-height extent)))
        (let ((w (/ (* h width) height)))
          (new Name-Pane
            title: "Name"
            expanse: (new Dimension$fl$ w h)
            resolution: (new Dimension width height)
            data: data))))))


(class Name-Pane extends World-Pane
  
  
  (method override (draw self surface)
    (bind (text font color h) data
      (let ((extent (text-extent font text)))
        (clear surface)
        (set-font surface font)
        (draw-text surface 0 0 text color))))))
