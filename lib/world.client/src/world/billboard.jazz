;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; Billboards
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2016
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.billboard jazz


(import (jazz.graphic)
        (world)
        (world.autoload)
        (world.geometry)
        (world.quad-texture)
        (world.syntax (phase syntax)))


(definition public (billboard-matrix& ref spacing)
  (let ((view (get-view-matrix (current-camera)))
        (matrix (make-translation-matrix& (vertex+& (get-position ref) (vertex& 0. spacing 0.)))))
    (matrix-transpose-3x3! matrix view)
    matrix))


(class Billboard-Element extends Element
  
  
  (property billboard initialize #f accessors generate)
  (property render?   initialize #t accessors generate)
  
  
  (slot quad-texture <Quad-Texture+> initialize #f getter generate)
  
  
  (method protected virtual (make-billboard-texture self)
    )
  
  
  (method package virtual (billboard-top self)
    0.)
  
  
  (method package virtual (billboard-center self)
    0.)
  
  
  (method package (cache-quad-texture self)
    (when (not quad-texture)
      (set! quad-texture (make-billboard-texture self)))
    quad-texture)
  
  
  (method override (draw self)
    (draw-texture (cache-quad-texture self))))


;;;
;;;; Name
;;;


(definition public (make-billboard-name billboard)
  (new Billboard-Name
    billboard: billboard))


(class Billboard-Name extends Billboard-Element
  
  
  (method override (make-billboard-texture self)
    (bind (text font color h) billboard
      (let ((extent (text-extent font text)))
        (let ((width (get-width extent))
              (height (get-height extent)))
          (let ((w (/ (* h width) height)))
            (let ((v1 (vertex (/ w -2.) (/ h  2.) 0.))
                  (v2 (vertex (/ w -2.) (/ h -2.) 0.))
                  (v3 (vertex (/ w  2.) (/ h -2.) 0.))
                  (v4 (vertex (/ w  2.) (/ h  2.) 0.)))
              (let ((quad-texture <Quad-Texture> (make-quad-texture width height v1 v2 v3 v4)))
                (let ((texture (get-texture quad-texture)))
                  (let ((surface (get-surface texture)))
                    (clear surface)
                    (set-font surface font)
                    (draw-text surface 0 0 text color)
                    (map-texture texture)))
                quad-texture)))))))
  
  
  (method override (billboard-top self)
    .1)
  
  
  (method override (billboard-center self)
    0.)))
