;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; World Scripts
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2013
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;    Alain Marcotte


(module world.script jazz


(import (jazz.system)
        (world)
        (world.autoload)
        (world.memory)
        (world.syntax (phase syntax)))


;;;
;;;; Memory
;;;


@test-memory (
(definition public (test1)
  (define (meg bytes)
    (fxround (/ (cast <fl> bytes) 1024. 1024.)))
  
  (gc)
  (gc)
  (receive (last-gc-heap-size last-gc-alloc last-gc-live last-gc-movable last-gc-nonmovable) (process-memory)
    (terminal (meg last-gc-live) (meg last-gc-movable) (meg last-gc-nonmovable))))


(definition public (test2)
  (setup-memory)
  (outline-unit 'world.test.z)
  (display-message~ (current-world) "Memory setup"))


(definition public (test3)
  (setup-memory-test)
  @w
  (snapshot-heap))


(definition public (test4)
  (let ((unit-name 'jazz.language.runtime.homogeneous @w 'world.test.x))
    (setup-outline-hook 'world.test.x @w unit-name)
    ;(load-unit 'world.test.x)
    (snapshot-heap)
    ;(setup-memory-debug)
    (analyse-incoming @unit-name: unit-name)
    (display-message~ (current-world) "Memory setup")))


(definition public (test5)
  (setup-memory-debug)
  (display-message~ (current-world) "Memory setup")
  (load-unit 'jazz.ui.event.Focus-Event)
  (outline-unit 'jazz.ui.event.Focus-Event))


(definition public (test6)
  (load-unit 'world.test.y)
  (setup-memory-compare))


(definition public (test7)
  (load-unit 'world.test.y)
  (setup-memory-compare present: 'container))


(definition public (test8)
  @w
  (analyse-incoming))


(definition public (test9)
  (analyse-regions))


(definition public (test0)
  (analyse-types threshold: 50)))


;;;
;;;; Test
;;;


(definition public (test1)
  (dispatch-to (find-setting 'world.test1 'test1)))


(definition public (test2)
  (dispatch-to (find-setting 'world.test2 'test2)))


(definition public (test3)
  (dispatch-to (find-setting 'world.test3 'test3)))


(definition public (test4)
  (dispatch-to (find-setting 'world.test4 'test4)))


(definition public (test5)
  (dispatch-to (find-setting 'world.test5 'test5)))


(definition public (test6)
  (dispatch-to (find-setting 'world.test6 'test6)))


(definition public (test7)
  (dispatch-to (find-setting 'world.test7 'test7)))


(definition public (test8)
  (dispatch-to (find-setting 'world.test8 'test8)))


(definition public (test9)
  (dispatch-to (find-setting 'world.test9 'test9)))


(definition public (test0)
  (dispatch-to (find-setting 'world.test0 'test0)))


;;;
;;;; Dispatch
;;;


(definition (dispatch-to to)
  (let ((world (current-world)))
    (cond ((not to)
           (bell))
          ((symbol? to)
           (let ((profile (get-profile~ (get-application))))
             (if profile
                 (let ((dispatch (find-dispatch (class-of profile) to)))
                   (if dispatch
                       (dispatch profile)
                     (display-error~ world (format "Unable to find method {a} in profile" to))
                     (bell)))
               (bell))))
          ((string? to)
           (execute-script~ world to))
          (else
           (error "Invalid test setting: {a}" to))))))
