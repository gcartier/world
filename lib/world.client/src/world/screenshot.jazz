;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; Screenshot Capture
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.screenshot jazz


(import (jazz.cairo)
        (jazz.graphic)
        (jazz.opengl.glew)
        (jazz.opengl.render)
        (jazz.opengl.texture)
        (world)
        (world.buffers)
        (world.context)
        (world.foreign)
        (world.render)
        (world.settings))


(definition (screenshot-render width height multisampling)
  (let ((fb (new Framebuffer width height multisampling)))
    (add-color-texture fb)
    (add-depth-buffer fb)
    (check-framebuffer fb)
    fb))

(definition (screenshot-output width height)
  (let ((fb (new Framebuffer width height)))
    (add-color-texture fb)
    (add-depth-buffer fb)
    (check-framebuffer fb)
    fb))


(definition public (capture-window-to-surface)
  (with-render-mutex
    (lambda ()
      (let ((world (current-world)))
        (receive (render-width render-height render-multisampling) (render-settings (get-multisampled-framebuffer world))
          (let ((handle (cairo_image_surface_create CAIRO_FORMAT_RGB24 render-width render-height)))
            (let ((data (cairo_image_surface_get_data handle))
                  (surface (new Surface handle)))
              (glReadPixels 0 0 render-width render-height GL_BGRA GL_UNSIGNED_BYTE data)
              (let ((flipped (new Surface (cairo_image_surface_create CAIRO_FORMAT_RGB24 render-width render-height))))
                (let ((fx 1.)
                      (fy -1.)
                      (cx (/ (cast <fl> render-width) 2.))
                      (cy (/ (cast <fl> render-height) 2.)))
                  (set-matrix flipped fx 0. 0. fy (* cx (- 1. fx)) (* cy (- 1. fy))))
                (blit-surface flipped surface)
                (close surface)
                (values render-width render-height flipped)))))))))


(definition public (capture-window-to-texture)
  (receive (width height surface) (capture-window-to-surface)
    (let ((texture (make-cairo-texture width height surface: surface)))
      (map-texture texture)
      texture)))


(definition public (capture-window-to-file file)
  (receive (width height surface) (capture-window-to-surface)
    (export-to-png surface file)
    (close surface)))


@xp-that-could-be-used-to-capture-at-different-resolution/multisampling/...
(definition public (capture-window-to-file file)
  (with-render-mutex
    (lambda ()
      (let ((world (current-world))
            (video (current-video)))
        (receive (render-width render-height render-multisampling) (render-settings (get-multisampled-framebuffer world))
          (let ((renderbuffer (screenshot-render render-width render-height render-multisampling))
                (outputbuffer (screenshot-output render-width render-height)))
            (bind-framebuffer renderbuffer)
            (glClear GL_COLOR_BUFFER_BIT)
            (glClear GL_DEPTH_BUFFER_BIT)
            (render-world world)
            (render-outputs video)
            (render-interface world)
            (unbind-framebuffer renderbuffer)
            (blit renderbuffer (get-framebuffer outputbuffer))
            (let ((handle (cairo_image_surface_create CAIRO_FORMAT_RGB24 render-width render-height)))
              (let ((id (get-color-texture outputbuffer))
                    (data (cairo_image_surface_get_data handle))
                    (surface (new Surface handle)))
                (glBindTexture GL_TEXTURE_2D id)
                (glGetTexImage GL_TEXTURE_2D 0 GL_BGRA GL_UNSIGNED_BYTE data)
                (glBindTexture GL_TEXTURE_2D 0)
                (let ((flipped (new Surface (cairo_image_surface_create CAIRO_FORMAT_RGB24 render-width render-height))))
                  (let ((fx 1.)
                        (fy -1.)
                        (cx (/ (cast <fl> render-width) 2.))
                        (cy (/ (cast <fl> render-height) 2.)))
                    (set-matrix flipped fx 0. 0. fy (* cx (- 1. fx)) (* cy (- 1. fy))))
                  (blit-surface flipped surface)
                  (export-to-png flipped file)
                  (close flipped))
                (close surface)
                (close renderbuffer)
                (close outputbuffer))))))))))
