;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; World Models
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2013
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.model jazz


(import (jazz.jml)
        (jazz.graphic)
        (jazz.graphic.opengl.glew)
        (world)
        (world.autoload)
        (world.draw)
        (world.element)
        (world.generate)
        (world.geometry)
        (world.material)
        (world.mesh)
        (world.polygon)
        (world.serialization)
        (world.shader)
        (world.syntax (phase syntax)))


(definition public (make-faces-model faces)
  (define (determine-bounds)
    (let ((left +inf.0)
          (bottom +inf.0)
          (back +inf.0)
          (right -inf.0)
          (top -inf.0)
          (front -inf.0))
      (for-each (lambda (face)
                  (let ((vertices (get-vertices~ (get-polygon~ face))))
                    (loop (for n from 0 below (vector-length vertices))
                          (let ((vert (vector-ref vertices n)))
                            (let ((x (vertex-x vert))
                                  (y (vertex-y vert))
                                  (z (vertex-z vert)))
                              (when (< x left) (set! left x))
                              (when (< y bottom) (set! bottom y))
                              (when (< z back) (set! back z))
                              (when (> x right) (set! right x))
                              (when (> y top) (set! top y))
                              (when (> z front) (set! front z)))))))
                faces)
      (cuboid left bottom back right top front)))
  
  (let ((world (current-world)))
    (let ((material (get-tile-material~ world)))
      (let ((model (new Model faces: faces material: material)))
        (set-bounds~ model (determine-bounds))
        model))))


;;;
;;;; Model
;;;


(class Model extends Object
  
  
  (slot file       <object> initialize #f accessors generate)
  (slot path       <object> initialize #f accessors generate)
  (slot path-time  <object> initialize #f accessors generate)
  (slot name       <object>               accessors generate)
  (slot faces      <object>               accessors generate)
  (slot polygons   <vector+>              accessors generate)
  (slot mesh       <object>               accessors generate)
  (slot bounds     <object> initialize #f getter generate setter explicit)
  (slot center     <object> initialize #f getter generate)
  (slot animation  <object> initialize #f accessors generate)
  (slot animations <object> initialize #f accessors generate)
  
  
  (method override (initialize (name: name #f) (faces: faces #f) (material: material #f) (mesh: mesh #f))
    (set! name~self name)
    (set! faces~self faces)
    (set! polygons~self (and faces (extract-polygons faces)))
    (set! mesh~self (or mesh (if faces (generate-mesh (faces-generator faces) material: material) (new Mesh)))))
  
  
  (method override (print output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{a}" name))))
  
  
  (method meta override (marshall-object obj)
    (serialize-object (class-of obj)
                      (vector
                        (serialize (get-path~ obj)))))
  
  
  (method meta override (unmarshall-object content)
    (let ((world (current-world)))
      (bind-vector (path) content
        (find-model~ world (deserialize path)))))
  
  
  (method (extract-polygons faces)
    (let ((count (length faces)))
      (let ((vect (make-f64vector (* count polygon-float-size)))
            (offset 0))
        (for-each (lambda (face)
                    (let ((poly (get-polygon~ face)))
                      (polygon-move!~ poly vect offset #f)
                      (increase! offset polygon-float-size)))
                  faces)
        vect)))
  
  
  (method public (set-bounds bnd)
    (set! bounds bnd)
    (set! center (cuboid-center bnd)))
  
  
  (method public (add-animation name anim)
    (when (not animations)
      (set! animations (make-table test: equal?)))
    (table-set! animations name anim))
  
  
  (method public (find-animation name)
    (if (not name)
        animation
      (and animations (table-ref animations name #f))))
  
  
  (method public (require-animation name)
    (or (find-animation name)
        (error "Unknown animation: {a}" name)))))
