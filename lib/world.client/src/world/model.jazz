;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Models
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.model jazz


(import (jazz.component)
        (jazz.io)
        (gaea.geometry)
        (world)
        (world.context)
        (world.face)
        (world.generate)
        (world.polygon)
        (world.renderers))


;;;
;;;; Metadata
;;;


(definition public (load-model-metadata name file)
  (and (exists? file)
       (let ((metadata (call-with-input-file (path-settings file) read)))
         (assert (and (pair? metadata)
                      (pair? (cdr metadata))
                      (let ((symbol (cadr metadata)))
                        (and (symbol? symbol)
                             (equal? (symbol->string symbol) name)))))
         (cddr metadata))))


(definition public (model-metadata-class metadata)
  (and metadata
       (let ((pair (assq 'class metadata)))
         (and pair
              (cadr pair)))))

(definition public (model-metadata-feet metadata)
  (and metadata
       (let ((pair (assq 'feet metadata)))
         (and pair
              (cdr pair)))))

(definition public (model-metadata-walk-speed metadata)
  (and metadata
       (let ((pair (assq 'walk-speed metadata)))
         (and pair
              (cadr pair)))))

(definition public (model-metadata-run-speed metadata)
  (and metadata
       (let ((pair (assq 'run-speed metadata)))
         (and pair
              (cadr pair)))))

(definition public (model-metadata-orientation metadata)
  'vertical
  @until-horizontal-debugged
  (and metadata
       (let ((pair (assq 'orientation metadata)))
         (and pair
              (cadr pair)))))

(definition public (model-metadata-render metadata)
  (and metadata
       (let ((pair (assq 'render metadata)))
         (and pair
              (cadr pair)))))

(definition public (model-metadata-mask metadata)
  (and metadata
       (let ((pair (assq 'mask metadata)))
         (and pair
              (cadr pair)))))

(definition public (model-metadata-scaling metadata)
  (and metadata
       (let ((pair (assq 'scaling metadata)))
         (and pair
              (cadr pair)))))

(definition public (model-metadata-avatar-scaling metadata)
  (and metadata
       (let ((pair (assq 'avatar-scaling metadata)))
         (and pair
              (cadr pair)))))

(definition public (model-metadata-sounds metadata)
  (and metadata
       (let ((pair (assq 'sounds metadata)))
         (and pair
              (cdr pair)))))

(definition public (model-metadata-limits metadata)
  (and metadata
       (let ((pair (assq 'limits metadata)))
         (and pair
              (cdr pair)))))

(definition public (model-metadata-lens metadata)
  (and metadata
       (let ((pair (assq 'lens metadata)))
         (and pair
              (cadr pair)))))

(definition public (model-metadata-pumps metadata)
  (and metadata
       (let ((pair (assq 'pumps metadata)))
         (and pair
              (cadr pair)))))

(definition public (model-metadata-block-pumps metadata)
  (and metadata
       (let ((pair (assq 'block-pumps metadata)))
         (and pair
              (cadr pair)))))

(definition public (model-metadata-saddle metadata)
  (and metadata
       (let ((pair (assq 'saddle metadata)))
         (and pair
              (cadr pair)))))

(definition public (model-metadata-ride-saddle metadata)
  (and metadata
       (let ((pair (assq 'ride-saddle metadata)))
         (and pair
              (cadr pair)))))

(definition public (model-metadata-fly-saddle metadata)
  (and metadata
       (let ((pair (assq 'fly-saddle metadata)))
         (and pair
              (cadr pair)))))

(definition public (model-metadata-vehicle-scale metadata)
  (and metadata
       (let ((pair (assq 'vehicle-scale metadata)))
         (and pair
              (cdr pair)))))

(definition public (model-metadata-frames metadata)
  (and metadata
       (let ((pair (assq 'frames metadata)))
         (and pair
              (cadr pair)))))


;;;
;;;; Exceptions
;;;


(class Model-Import-Error extends Error)


(class Model-Not-Found-Error extends Error)


;;;
;;;; Models
;;;


(definition models <table>
  (make-table test: eq?))

(definition model-id <fx>
  0)


(definition public (registered-models)
  models)

(definition public (registered-model name)
  ;; hack around air special case
  (let ((name (if (eq? name 'Air) 'Stone name)))
    (let ((info/model (table-ref models name #f)))
      (cond ((not info/model)
             (error "Unable to find model: {s}" name))
            ((is? info/model Model)
             info/model)
            (else
             (bind (id kind generate) info/model
               (let ((model (generate)))
                 (set-name model name)
                 (set-id model id)
                 (table-set! models name model)
                 model)))))))

(definition public (register-model name generate showcase? (kind #f))
  (if (not showcase?)
      (table-set! models name (list #f kind generate))
    (table-set! models name (list model-id kind generate))
    (increase! model-id)))

(definition public (unregister-model name)
  (table-clear models name))


(definition public (registered-non-block-models)
  (let ((queue (new-queue)))
    (iterate-table models
      (lambda (name info/model)
        (if (is? info/model Model)
            (when (and (get-id info/model)
                       (not (block? info/model)))
              (enqueue queue info/model))
          (bind (id kind generate) info/model
            (when (and id (not kind))
              (enqueue queue (registered-model name)))))))
    (queue-list queue)))


(definition public (registered-block-models)
  (let ((queue (new-queue)))
    (iterate-table models
      (lambda (name info/model)
        (if (is? info/model Model)
            (when (and (get-id info/model)
                       (block? info/model))
              (enqueue queue info/model))
          (bind (id kind generate) info/model
            (when (and id (eq? kind 'block))
              (enqueue queue (registered-model name)))))))
    (queue-list queue)))


;;;
;;;; Model
;;;


(class Model extends Component
  
  
  (property position      <vertex>    initialize (vertex 0. 0. 0.) getter generate setter explicit)
  (property rotation      <vertex>    initialize (vertex 0. 0. 0.) getter generate setter explicit)
  (property scale         <vertex>    initialize (vertex 1. 1. 1.) getter generate setter explicit)
  (property faces         <object>    initialize #f                getter generate setter explicit)
  (property meshes        <vector+>   initialize #f                accessors generate)
  (property pumps         <object>    initialize #f                accessors generate)
  (property block-pumps   <object>    initialize #f                accessors generate)
  (property saddle        <object>    initialize 0.                accessors generate)
  (property ride-saddle   <object>    initialize 0.                accessors generate)
  (property fly-saddle    <object>    initialize 0.                accessors generate)
  (property vehicle-scale <object>    initialize (vertex 1. 1. 1.) accessors generate)
  (property sounds        <object>    initialize #f                accessors generate)
  (property steps?        <bool>      initialize #t                accessors generate)
  (property flat?         <bool>      initialize #f                accessors generate)
  
  
  (slot file                <object>     initialize #f                     accessors generate)
  (slot metadata            <object>     initialize #f                     accessors generate)
  (slot matrix              <matrix>     initialize (make-identity-matrix) accessors generate)
  (slot global-matrix       <matrix>     initialize (make-identity-matrix) accessors generate)
  ;; quicky
  (slot global-matrix2      <matrix>     initialize (make-identity-matrix) accessors generate)
  (slot polygons            <f64vector+> initialize #f                     accessors generate)
  (slot bounds              <object>     initialize #f                     getter generate setter explicit)
  (slot anchor              <object>     initialize 'center                accessors generate)
  (slot center              <vertex>     initialize (vertex 0. 0. 0.)      getter generate)
  (slot animation           <object>     initialize #f                     accessors generate)
  (slot animations          <object>     initialize #f                     accessors generate)
  (slot entity-class        <object>     initialize #f                     accessors generate)
  (slot feet-bones          <object>     initialize #f                     accessors generate)
  (slot walk-speed          <object>     initialize #f                     accessors generate)
  (slot run-speed           <object>     initialize #f                     accessors generate)
  (slot orientation         <object>     initialize #f                     accessors generate)
  (slot limits              <object>     initialize #f                     accessors generate)
  (slot lens                <object>     initialize #f                     accessors generate)
  (slot atlas               <object>     initialize #f                     accessors generate)
  (slot id                  <fx+>        initialize #f                     accessors generate)
  (slot instance-rendering? <bool>       initialize #f                     accessors generate)
  (slot rendering?          <bool>       initialize #f                     accessors generate)
  (slot rendering-texture   <object>     initialize #f                     accessors generate)
  (slot rendering-instances <Axis>       initialize (new Axis 0)           getter generate)
  
  ;; debug native format (b3d, ms3d, ...)
  (slot native              <object>     initialize #f                     accessors generate)
  
  
  (method override (install-in-parent self)
    (nextmethod self)
    (update-matrix self))
  
  
  (method public (set-position self pos <vertex>) <void>
    (vertex-copy! position pos)
    (update-matrix self))
  
  
  (method public (set-rotation self rot <vertex>) <void>
    (vertex-copy! rotation rot)
    (update-matrix self))
  
  
  (method public (set-scale self s <vertex>) <void>
    (vertex-copy! scale s)
    (update-matrix self))
  
  (method public (set-scaling self s <fl>) <void>
    (vertex! scale s s s)
    (update-matrix self))
  
  
  (method package (update-matrix self)
    (case anchor
      ((center)
       (matrix-multiply! matrix
                         (make-translation-matrix& position)
                         (make-euler-matrix& rotation)
                         (make-scaling-matrix& scale)))
      ((origin)
       (matrix-multiply! matrix
                         (make-euler-matrix& rotation)
                         (make-scaling-matrix& scale)
                         ;; quicky
                         (make-translation-matrix& (vertex& (- (vertex-x center)) 0. (- (vertex-z center)))))))
    (if (not parent)
        (matrix-copy! global-matrix matrix)
      (matrix-multiply! global-matrix (get-global-matrix parent) matrix))
    (for-each update-matrix children)
    ;; quicky
    (matrix-multiply! global-matrix2
                      (make-euler-matrix& rotation)
                      (make-scaling-matrix& scale)))
  
  
  ;;;
  ;;;; Faces
  ;;;
  
  
  (method public (set-faces self lst)
    (let ((world (current-world)))
      (set! faces lst)
      (set! polygons (faces-polygons self faces))
      (set! meshes (list->vector (map (lambda (partition)
                                        (bind (material . faces) partition
                                          (generate-mesh (faces-generator faces) matrix: matrix neighbors?: #t material: material)))
                                      (partition faces key: get-material))))))
  
  
  (method (faces-polygons self faces)
    (let ((count (length faces)))
      (let ((vect (make-f64vector (* count polygon-float-size)))
            (offset 0))
        (for-each (lambda (face)
                    (let ((poly (get-polygon face)))
                      (polygon-move! poly vect offset matrix)
                      (increase! offset polygon-float-size)))
                  faces)
        vect)))
  
  
  (method package virtual (block? self)
    #f)
  
  
  (method protected virtual (opaque-cube? self)
    #f)
  
  
  ;;;
  ;;;; Bounds
  ;;;
  
  
  (method public (set-bounds self bnd)
    (set! bounds (if (not limits) bnd (bind (x y z) limits (cuboid-scalar* bnd (vertex x y z)))))
    (vertex-copy! center (cuboid-center bnd))
    ;; quicky
    (update-matrix self))
  
  
  (method public (determine-bounds self)
    (compute-vertices-bounds
      (lambda (process)
        (if (and (null? faces)
                 (null? children))
            ;; use arbitrary values
            (cuboid -.5 -.5 -.5 .5 .5 .5)
          (for-each (lambda (face)
                      (let ((vertices (get-vertices (get-polygon face))))
                        (loop (for n from 0 below (vector-length vertices))
                              (let ((vert (vector-ref vertices n)))
                                (process vert)))))
                    faces)
          (for-each (lambda (model)
                      (let ((para (transformed-parallelepiped model)))
                        (iterate-parallelepiped-vertices para process)))
                    children)))))
  
  
  (method public (transformed-bounds self)
    (parallelepiped-bounds (transformed-parallelepiped self)))
  
  
  (method public (transformed-parallelepiped self)
    (transform-cuboid bounds matrix))
  
  
  (method public (bounds-radius self)
    (vertex-norm (cuboid-radiuses bounds)))
  
  
  ;;;
  ;;;; Anchor
  ;;;
  
  
  (method package (position->anchor self pos (entity-scale #f))
    (vertex- pos (anchor-point self entity-scale)))
  
  
  (method package (anchor->position self anchor (entity-scale #f))
    (vertex+ anchor (anchor-point self entity-scale)))
  
  
  (method (anchor-point self entity-scale)
    (case anchor
      ((center)
       (vertex 0.
               (* (vertex-y (cuboid-radiuses (get-bounds self))) (vertex-y scale) (if entity-scale (vertex-y entity-scale) 1.))
               0.))
      ((origin)
       (vertex 0.
               0.
               0.))))
  
  
  ;;;
  ;;;; Metadata
  ;;;
  
  
  (method package (install-metadata self metadata)
    (set! self.metadata metadata)
    (let ((class (model-metadata-class metadata)))
      (when class
        (set-entity-class self (find-entity-class self class))))
    (let ((scaling (model-metadata-scaling metadata)))
      (when scaling
        (set-scaling self scaling)))
    (let ((feet-bones (model-metadata-feet metadata)))
      (when feet-bones
        (set-feet-bones self feet-bones)))
    (let ((walk-speed (model-metadata-walk-speed metadata)))
      (when walk-speed
        (set-walk-speed self walk-speed)))
    (let ((run-speed (model-metadata-run-speed metadata)))
      (when run-speed
        (set-run-speed self run-speed)))
    (let ((orientation (model-metadata-orientation metadata)))
      (when orientation
        (set-orientation self orientation)))
    (let ((sounds (model-metadata-sounds metadata)))
      (when (pair? sounds)
        (set-sounds self (list->table (map (lambda (pair) (cons (car pair) (cadr pair))) sounds) test: eq?))))
    (let ((limits (model-metadata-limits metadata)))
      (when limits
        (set-limits self limits)))
    (let ((lens (model-metadata-lens metadata)))
      (when lens
        (set-lens self lens)))
    (let ((pumps (model-metadata-pumps metadata)))
      (when pumps
        (set-pumps self (vertex 0. pumps 0.))))
    (let ((block-pumps (model-metadata-block-pumps metadata)))
      (when block-pumps
        (set-block-pumps self (vertex 0. block-pumps 0.))))
    (let ((saddle (model-metadata-saddle metadata)))
      (when saddle
        (set-saddle self saddle)))
    (let ((ride-saddle (model-metadata-ride-saddle metadata)))
      (when ride-saddle
        (set-ride-saddle self ride-saddle)))
    (let ((fly-saddle (model-metadata-fly-saddle metadata)))
      (when fly-saddle
        (set-fly-saddle self fly-saddle)))
    (let ((vehicle-scale (model-metadata-vehicle-scale metadata)))
      (when vehicle-scale
        (if (= (length vehicle-scale) 1)
            (let ((scale (car vehicle-scale)))
              (set-vehicle-scale self (vertex scale scale scale)))
          (bind (sx sy sz) vehicle-scale
            (set-vehicle-scale self (vertex sx sy sz)))))))
  
  
  ;; quicky
  (method (find-entity-class self class)
    (case class
      ((Creature) world.creature:Creature)
      (else (error "Unknown class: {s}" class))))
  
  
  ;;;
  ;;;; Render
  ;;;
  
  
  (method package virtual (model-renderer self)
    transparent-renderer)
  
  
  (method package virtual (model-bind-uniforms self entity program overlay alpha-cut)
    (world.programs:bind-uniforms program #f overlay alpha-cut))
  
  
  (method protected virtual (model-unbind-uniforms self entity program)
    (world.programs:unbind-uniforms program))
  
  
  ;;;
  ;;;; Animation
  ;;;
  
  
  (method public (all-animations self)
    (let ((animations (if animations (table-keys animations) '())))
      (if (not animation)
          animations
        (cons "Idle" animations))))
  
  
  (method public (add-animation self name anim)
    (when (not animations)
      (set! animations (make-table test: equal?)))
    (table-set! animations name anim))
  
  
  (method public (find-animation self name)
    (if (equal? name "Idle")
        animation
      (and animations (let ((anim (table-ref animations name #f)))
                        (if (procedure? anim)
                            (let ((anim (anim)))
                              (table-set! animations name anim)
                              anim)
                          anim)))))
  
  
  (method public (require-animation self name)
    (or (find-animation self name)
        (error "Unknown animation: {a}" name))))


;;;
;;;; Problem
;;;


(class Problem-Model extends Model))
