;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; Streams
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2016
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.stream jazz


(import (jazz.cairo)
        (jazz.geometry)
        (jazz.gstreamer)
        (jazz.syntax (phase syntax))
        (world)
        (world.autoload)
        (world.context)
        (world.geometry)
        (world.quad-texture)
        (world.syntax (phase syntax))
        (world.task))


;;;
;;;; Element
;;;


(class Stream-Element extends Object
  
  
  (slot state initialize #f getter generate)
  (slot sink  initialize #f accessors generate)
  (slot src   initialize #f accessors generate)
  
  
  (method package (ready? self)
    (eq? state 'ready))
  
  
  (method package (playing? self)
    (eq? state 'playing))
  
  
  (method public (setup self)
    (when (not state)
      (startup-gstreamer)
      (setup-element self)
      (set! state 'ready)))
  
  
  (method public (start self)
    (setup self)
    (unless (eq? state 'playing)
      (start-element self)
      (set! state 'playing)))
  
  
  (method public (stop self)
    (when (eq? state 'playing)
      (stop-element self)
      (set! state 'ready)))
  
  
  (method public (conclude self)
    (stop self)
    (when (eq? state 'ready)
      (conclude-element self)
      (set! state #f)))
  
  
  (method protected virtual (setup-element self)
    )
  
  
  (method protected virtual (start-element self)
    )
  
  
  (method protected virtual (stop-element self)
    )
  
  
  (method protected virtual (conclude-element self)
    )
  
  
  (method protected virtual (process self)
    )
  
  
  (method package virtual (consume self buffer timestamp duration)
    ))


;;;
;;;; Src
;;;


(class Stream-Src extends Stream-Element)


;;;
;;;; Sink
;;;


(class Stream-Sink extends Stream-Element
  
  
  (slot consumer initialize #f accessors generate)
  
  
  (method override (initialize self (consumer: consumer #f))
    (nextmethod self)
    (set! self.consumer consumer))
  
  
  (method override (consume self buffer timestamp duration)
    (consumer buffer timestamp duration)))


;;;
;;;; Debug-Sink
;;;


(class Debug-Sink extends Stream-Sink
  
  
  (slot name initialize #f accessors generate)
  
  
  (method override (initialize self name . rest)
    (apply nextmethod self rest)
    (set! self.name name))
  
  
  (method override (consume self buffer timestamp duration)
    (debug name (u8vector-length buffer) timestamp duration)))


;;;
;;;; Pipeline
;;;


(definition public (pipeline . elements)
  (let ((len (length elements)))
    (if (< len 2)
        (error "Invalid pipeline length: {s}" len)
      (let (loop (previous #f) (scan elements))
        (when (not-null? scan)
          (let ((elem (car scan)))
            (when previous
              (set-src elem previous)
              (set-sink previous elem))
            (loop elem (cdr scan)))))))
  (new Stream-Pipeline elements))


(class Stream-Pipeline extends Stream-Element
  
  
  (slot elements initialize #f accessors generate)
  
  
  (method override (initialize self elements)
    (nextmethod self)
    (set! self.elements elements))
  
  
  (method override (setup-element self)
    (for-each setup elements))
  
  
  (method override (start-element self)
    (for-each start elements))
  
  
  (method override (stop-element self)
    (for-each stop elements))
  
  
  (method override (conclude-element self)
    (for-each conclude elements))))
