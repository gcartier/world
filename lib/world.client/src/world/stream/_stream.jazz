;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; Streams
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2016
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.stream jazz


(import (jazz.cairo)
        (jazz.geometry)
        (jazz.gstreamer)
        (jazz.syntax (phase syntax))
        (world)
        (world.autoload)
        (world.geometry)
        (world.quad-texture)
        (world.syntax (phase syntax))
        (world.task))


;;;
;;;; Element
;;;


(class Stream-Element extends Object
  
  
  (slot state initialize #f getter generate)
  (slot sink  initialize #f accessors generate)
  (slot src   initialize #f accessors generate)
  
  
  (method protected virtual (start)
    )
  
  
  (method protected virtual (stop)
    )
  
  
  (method (stopped?)
    (not state))
  
  
  (method (playing?)
    (eq? state 'playing))
  
  
  (method protected virtual (process)
    )
  
  
  (method protected virtual (consume buffer timestamp duration)
    ))


;;;
;;;; Src
;;;


(class Stream-Src extends Stream-Element)


;;;
;;;; Sink
;;;


(class Stream-Sink extends Stream-Element
  
  
  (slot consumer initialize #f accessors generate)
  
  
  (method override (initialize (consumer: consumer #f))
    (nextmethod)
    (set! consumer~self consumer))
  
  
  (method override (consume buffer timestamp duration)
    (consumer buffer timestamp duration)))


;;;
;;;; Debug-Sink
;;;


(class Debug-Sink extends Stream-Sink
  
  
  (method override (consume buffer timestamp duration)
    (debug (u8vector-length buffer) timestamp duration)))


;;;
;;;; Pipeline
;;;


(definition public (pipeline . elements)
  (let ((len (length elements)))
    (if (< len 2)
        (error "Invalid pipeline length: {s}" len)
      (let (loop (previous #f) (scan elements))
        (when (not-null? scan)
          (let ((elem (car scan)))
            (when previous
              (set-src~ elem previous)
              (set-sink~ previous elem))
            (loop elem (cdr scan)))))))
  (new Stream-Pipeline elements))


(class Stream-Pipeline extends Stream-Element
  
  
  (slot elements initialize #f accessors generate)
  
  
  (method override (initialize elements)
    (nextmethod)
    (set! elements~self elements))
  
  
  (method override (start)
    (unless (eq? state 'playing)
      (for-each start~ elements)
      (set! state 'playing)))
  
  
  (method override (stop)
    (when (eq? state 'playing)
      (for-each stop~ elements)
      (set! state #f))))


;;;
;;;; GStreamer
;;;


(definition public (init-gstreamer)
  (startup-gstreamer))


(definition public (stream-video description (width: width 1920) (height: height 1080) (framerate: framerate 60) (data: data #f) (sampled: sampled #f))
  (let ((pipeline (gst_parse_launch description)))
    (let ((appsink (gst_bin_get_by_name pipeline "appsink")))
      (gst_element_set_state pipeline GST_STATE_PLAYING)
      (thread-start!
        (new-thread
          (lambda ()
            (let ((info (make-u64vector 2)))
              (declare (proper-tail-calls))
              (let (loop)
                (let ((size (gst_app_sink_pull appsink data info)))
                  (when (/= size -1)
                    (sampled)))
                (sleep .001)
                (loop)))))))))


(definition public (test-pipeline ignore (width: width 1920) (height: height 1080) (framerate: framerate 60))
  (format "videotestsrc ! video/x-raw, width={a}, height={a}, framerate={a}/1 ! queue max-size-buffers=3 ! videoflip video-direction=vert ! appsink caps=\"video/x-raw, format=BGRA\" name=appsink" width height framerate))


(definition public (file-pipeline location (width: width 1920) (height: height 1080) (framerate: framerate 60))
  (format "filesrc location={a} ! matroskademux name=demux demux.video_0 ! vp8dec ! videoconvert ! videoscale ! queue max-size-buffers=3 ! videoflip video-direction=vert ! appsink caps=\"video/x-raw, format=BGRA\" name=appsink demux.audio_0 ! queue ! decodebin ! audioconvert ! audioresample ! autoaudiosink" location))


(definition public (camera-pipeline ignore (width: width 1280) (height: height 720) (framerate: framerate 60))
  (format "avfvideosrc ! videoscale ! videoconvert ! video/x-raw, width={a}, height={a}, framerate={a}/1 ! videoflip video-direction=180 ! appsink caps=\"video/x-raw, format=BGRA\" name=appsink" width height framerate))


;;;
;;;; Video
;;;


(definition public (make-video-texture name pipeline-description data width height framerate matrix)
  (let ((world (current-world))
        (zone (current-zone)))
    (init-gstreamer)
    (let ((ratio (/ (cast <fl> width) (cast <fl> height))))
      (let ((w ratio)
            (h 1.))
        (let ((v1 (vertex (/ w -2.) (/ h -2.) 0.))
              (v2 (vertex (/ w -2.) (/ h  2.) 0.))
              (v3 (vertex (/ w  2.) (/ h  2.) 0.))
              (v4 (vertex (/ w  2.) (/ h -2.) 0.)))
          (let ((quad-texture <Quad-Texture> (make-quad-texture width height v1 v2 v3 v4)))
            (let ((texture (get-texture~ quad-texture)))
              (let ((handle (get-handle~ (get-surface~ texture))))
                (let ((width (cairo_image_surface_get_width handle))
                      (height (cairo_image_surface_get_height handle))
                      (stride (cairo_image_surface_get_stride handle)))
                  (let ((description (pipeline-description data width: width height: height framerate: framerate))
                        (data (get-data~ texture))
                        (sampled (lambda ()
                                   (map-texture~ texture))))
                    (stream-video description data: data sampled: sampled)))))
            (register-draw~ zone name
              (lambda ()
                (render-texture~ quad-texture matrix)))
            #t))))))


;;;
;;;; Texture Sink
;;;


(definition public (make-texture-sink name width height matrix)
  (let ((world (current-world))
        (zone (current-zone)))
    (init-gstreamer)
    (let ((ratio (/ (cast <fl> width) (cast <fl> height))))
      (let ((w ratio)
            (h 1.))
        (let ((v1 (vertex (/ w -2.) (/ h -2.) 0.))
              (v2 (vertex (/ w -2.) (/ h  2.) 0.))
              (v3 (vertex (/ w  2.) (/ h  2.) 0.))
              (v4 (vertex (/ w  2.) (/ h -2.) 0.)))
          (let ((quad-texture <Quad-Texture> (make-quad-texture width height v1 v2 v3 v4)))
            (let ((texture (get-texture~ quad-texture)))
              (let ((handle (get-handle~ (get-surface~ texture))))
                (let ((width (cairo_image_surface_get_width handle))
                      (height (cairo_image_surface_get_height handle))
                      (stride (cairo_image_surface_get_stride handle)))
                  (let ((data (get-data~ texture))
                        (info (make-u64vector 2)))
                    (register-draw~ zone name
                      (lambda ()
                        (render-texture~ quad-texture matrix)))
                    (lambda (appsink)
                      (let ((size (gst_app_sink_pull appsink data info)))
                        (when (/= size -1)
                          (map-texture~ texture)))))))))))))))
