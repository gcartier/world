;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Draw
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2016
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.draw jazz


(import (jazz.geometry)
        (jazz.opengl.glew)
        (world)
        (world.autoload)
        (world.dye)
        (world.geometry)
        (world.homogeneous)
        (world.lighting)
        (world.overlay)
        (world.plane)
        (world.polygon)
        (world.shape)
        (world.syntax (phase syntax)))


;;;
;;;; Colors
;;;


(definition (with-colors color wire-color fill-color proc)
  (define (make-fill-color)
    (let ((color (copy-dye wire-color)))
      (dye-alpha-set! color 0.)
      color))
  
  (let ((wire-color (or color wire-color))
        (fill-color (or color fill-color (make-fill-color))))
    (proc wire-color fill-color)))


;;;
;;;; Quad
;;;


(definition quad-mesh
  #f)

(definition quad-program
  #f)


(definition (prepare-quad)
  (let ((world (current-world)))
    (unless quad-mesh
      (set! quad-program (find-mesh-program~ world 'squareframe))
      (set! quad-mesh (generate-quad-mesh neighbors?: #t))
      (set-array~ quad-mesh (create-array~ quad-program quad-mesh)))))


(definition public (render-quad matrix (color: color #f) (wire-color: wire-color #f) (fill-color: fill-color #f))
  (with-colors color wire-color fill-color
    (lambda (wire-color fill-color)
      (use~ quad-program)
      (bind-uniforms~ quad-program #f no-overlay 0. (current-lighting) wire-color: wire-color fill-color: fill-color)
      (bind-entity-matrix~ quad-program matrix)
      (glEnable GL_BLEND)
      (glBindVertexArray (get-array~ quad-mesh))
      (glDrawArrays GL_TRIANGLES 0 (get-indices~ (get-vertices-buffer~ quad-mesh)))
      (glBindVertexArray 0)
      (glDisable GL_BLEND)
      (unbind-uniforms~ quad-program)
      (unuse~ quad-program))))


;;;
;;;; Cube
;;;


(definition cube-mesh
  #f)

(definition cube-program
  #f)


(definition (prepare-cube)
  (let ((world (current-world)))
    (unless cube-mesh
      (set! cube-program (find-mesh-program~ world 'squareframe))
      (set! cube-mesh (generate-cube-mesh neighbors?: #t))
      (set-array~ cube-mesh (create-array~ cube-program cube-mesh)))))


(definition public (render-cube matrix (color: color #f) (wire-color: wire-color #f) (fill-color: fill-color #f))
  (with-colors color wire-color fill-color
    (lambda (wire-color fill-color)
      (use~ cube-program)
      (bind-uniforms~ cube-program #f no-overlay 0. (current-lighting) wire-color: wire-color fill-color: fill-color)
      (bind-entity-matrix~ cube-program matrix)
      (glEnable GL_BLEND)
      ;(glEnable GL_CULL_FACE)
      ;(glCullFace GL_FRONT)
      (glBindVertexArray (get-array~ cube-mesh))
      (glDrawArrays GL_TRIANGLES 0 (get-indices~ (get-vertices-buffer~ cube-mesh)))
      (glBindVertexArray 0)
      ;(glCullFace GL_BACK)
      ;(glDisable GL_CULL_FACE)
      (glDisable GL_BLEND)
      (unbind-uniforms~ cube-program)
      (unuse~ cube-program))))


;;;
;;;; Sphere
;;;


(definition sphere-mesh
  #f)

(definition sphere-program
  #f)


(definition (prepare-sphere)
  (let ((world (current-world)))
    (unless sphere-mesh
      (let ((material (get-block-opaque~ world))
            (uv (f32vector 0. 0. 0. 0. 0. 0. 0. 0.)))
        (set! sphere-program (find-mesh-program~ world 'squareframe))
        (set! sphere-mesh (generate-sphere-mesh 48 24 uv neighbors?: #t material: material))
        (set-array~ sphere-mesh (create-array~ sphere-program sphere-mesh))))))


(definition public (render-sphere matrix (color: color #f) (wire-color: wire-color #f) (fill-color: fill-color #f))
  (with-colors color wire-color fill-color
    (lambda (wire-color fill-color)
      (use~ sphere-program)
      (bind-uniforms~ sphere-program #f no-overlay 0. (current-lighting) wire-color: wire-color fill-color: fill-color)
      (bind-entity-matrix~ sphere-program matrix)
      (glEnable GL_BLEND)
      (glEnable GL_CULL_FACE)
      (glCullFace GL_FRONT)
      (glBindVertexArray (get-array~ sphere-mesh))
      (glDrawArrays GL_TRIANGLES 0 (get-indices~ (get-vertices-buffer~ sphere-mesh)))
      (glBindVertexArray 0)
      (glCullFace GL_BACK)
      (glDisable GL_CULL_FACE)
      (glDisable GL_BLEND)
      (unbind-uniforms~ sphere-program)
      (unuse~ sphere-program))))


;;;
;;;; Cylinder
;;;


(definition cylinder-mesh
  #f)

(definition cylinder-program
  #f)


(definition (prepare-cylinder)
  (let ((world (current-world)))
    (unless cylinder-mesh
      (let ((material (get-block-opaque~ world))
            (uv (f32vector 0. 0. 0. 0. 0. 0. 0. 0.)))
        (set! cylinder-program (find-mesh-program~ world 'squareframe))
        (set! cylinder-mesh (generate-cylinder-mesh 48 24 1. 1. uv neighbors?: #t material: material))
        (set-array~ cylinder-mesh (create-array~ cylinder-program cylinder-mesh))))))


(definition public (render-cylinder matrix (color: color #f) (wire-color: wire-color #f) (fill-color: fill-color #f))
  (with-colors color wire-color fill-color
    (lambda (wire-color fill-color)
      (use~ cylinder-program)
      (bind-uniforms~ cylinder-program #f no-overlay 0. (current-lighting) wire-color: wire-color fill-color: fill-color)
      (bind-entity-matrix~ cylinder-program matrix)
      (glEnable GL_BLEND)
      ;(glEnable GL_CULL_FACE)
      ;(glCullFace GL_FRONT)
      (glBindVertexArray (get-array~ cylinder-mesh))
      (glDrawArrays GL_TRIANGLES 0 (get-indices~ (get-vertices-buffer~ cylinder-mesh)))
      (glBindVertexArray 0)
      ;(glCullFace GL_BACK)
      ;(glDisable GL_CULL_FACE)
      (glDisable GL_BLEND)
      (unbind-uniforms~ cylinder-program)
      (unuse~ cylinder-program))))


(definition public (render-line start end width color)
  (let ((dist (vertex-& end start)))
    (let ((norm (vertex-norm& dist))
          (sight (vertex-normalize& dist))
          (mid (vertex+& start (vertex-scalar/& dist 2.))))
      (let ((up (roll-free-up sight)))
        (let ((right (cross-product& sight up)))
          (let ((matrix (matrix-multiply& (make-translation-matrix& mid)
                                          (make-lookat-matrix& (lookat& sight up right))
                                          (make-scaling-matrix& (vertex width width (/ norm 2.))))))
            (render-cylinder matrix color: color)))))))


;;;
;;;; Cone
;;;


(definition cone-mesh
  #f)

(definition cone-program
  #f)


(definition (prepare-cone)
  (let ((world (current-world)))
    (unless cone-mesh
      (let ((material (get-block-opaque~ world))
            (uv (f32vector 0. 0. 0. 0. 0. 0. 0. 0.)))
        (set! cone-program (find-mesh-program~ world 'squareframe))
        (set! cone-mesh (generate-cylinder-mesh 48 24 1. 0. uv neighbors?: #t material: material))
        (set-array~ cone-mesh (create-array~ cone-program cone-mesh))))))


(definition public (render-cone matrix (color: color #f) (wire-color: wire-color #f) (fill-color: fill-color #f))
  (with-colors color wire-color fill-color
    (lambda (wire-color fill-color)
      (use~ cone-program)
      (bind-uniforms~ cone-program #f no-overlay 0. (current-lighting) wire-color: wire-color fill-color: fill-color)
      (bind-entity-matrix~ cone-program matrix)
      (glEnable GL_BLEND)
      ;(glEnable GL_CULL_FACE)
      ;(glCullFace GL_FRONT)
      (glBindVertexArray (get-array~ cone-mesh))
      (glDrawArrays GL_TRIANGLES 0 (get-indices~ (get-vertices-buffer~ cone-mesh)))
      (glBindVertexArray 0)
      ;(glCullFace GL_BACK)
      ;(glDisable GL_CULL_FACE)
      (glDisable GL_BLEND)
      (unbind-uniforms~ cone-program)
      (unuse~ cone-program))))


;;;
;;;; Torus
;;;


(definition torus-meshes
  (make-table test: eqv?))

(definition torus-program
  #f)


(definition (prepare-torus)
  (let ((world (current-world)))
    (set! torus-program (find-mesh-program~ world 'squareframe))))


(definition (cache-torus radius)
  (let ((world (current-world)))
    (or (table-ref torus-meshes radius #f)
        (let ((material (get-block-opaque~ world))
              (uv (f32vector 0. 0. 0. 0. 0. 0. 0. 0.)))
          (let ((mesh (generate-torus-mesh 48 96 radius uv neighbors?: #t material: material)))
            (set-array~ mesh (create-array~ torus-program mesh))
            (table-set! torus-meshes radius mesh)
            mesh)))))


(definition public (render-torus matrix (radius: radius #f) (color: color #f) (wire-color: wire-color #f) (fill-color: fill-color #f))
  (with-colors color wire-color fill-color
    (lambda (wire-color fill-color)
      (let ((mesh (cache-torus (or radius .01))))
        (use~ torus-program)
        (bind-uniforms~ torus-program #f no-overlay 0. (current-lighting) wire-color: wire-color fill-color: fill-color)
        (bind-entity-matrix~ torus-program matrix)
        (glEnable GL_BLEND)
        (glEnable GL_CULL_FACE)
        (glCullFace GL_FRONT)
        (glBindVertexArray (get-array~ mesh))
        (glDrawArrays GL_TRIANGLES 0 (get-indices~ (get-vertices-buffer~ mesh)))
        (glBindVertexArray 0)
        (glCullFace GL_BACK)
        (glDisable GL_CULL_FACE)
        (glDisable GL_BLEND)
        (unbind-uniforms~ torus-program)
        (unuse~ torus-program)))))


(definition public (render-circle center radius color)
  (let ((matrix (matrix-multiply& (make-translation-matrix& center)
                                  (make-scaling-matrix& (vertex radius radius radius)))))
    (render-torus matrix color: color)))


;;;
;;;; Draw
;;;


(definition public (prepare-draw)
  (prepare-quad)
  (prepare-cube)
  (prepare-sphere)
  (prepare-cylinder)
  (prepare-cone)
  (prepare-torus))


(definition public (reset-draw)
  (set! quad-mesh #f)
  (set! cube-mesh #f)
  (set! sphere-mesh #f)
  (set! cylinder-mesh #f)
  (set! cone-mesh #f)
  (set! torus-meshes (make-table test: eqv?)))


;;;
;;;; Polygon
;;;


(definition public (draw-polygon poly <Polygon> dye <dye>)
  (let ((width .005)
        (vertices (get-vertices~ poly)))
    (let ((card (vector-length vertices)))
      (loop (for n from 0 below card)
            (let ((start (vector-ref vertices n))
                  (end (vector-ref vertices (modulo (+ n 1) card))))
              (render-line start end width dye))))))


(definition public (draw-polygon-vertex poly <Polygon> vertex <vertex> dye <dye>)
  (draw-plane poly dye origin: vertex torus-radius: .035 radius: .05 normal?: #f))


;;;
;;;; Plane
;;;


(definition public (draw-plane plane <Plane> dye <dye> (origin: origin #f) (torus-radius: torus-radius #f) (radius: radius #f) (width: width #f) (normal?: normal? #t))
  (let ((origin (or origin (get-origin~ plane)))
        (normal (get-normal~ plane))
        (radius (or radius .15))
        (width (or width .0025)))
    (let ((sight normal))
      (let ((up (roll-free-up sight)))
        (let ((right (cross-product& sight up)))
          (let ((translation-matrix (make-translation-matrix& origin))
                (lookat-matrix (make-lookat-matrix& (lookat& sight up right))))
            (render-torus (matrix-multiply& translation-matrix
                                            lookat-matrix
                                            (make-euler-matrix& (vertex PI/2 0. 0.))
                                            (make-scaling-matrix& (vertex radius radius radius)))
                          radius: torus-radius
                          color: dye)
            (when normal?
              (render-cylinder (matrix-multiply& translation-matrix
                                                 lookat-matrix
                                                 (make-translation-matrix& (vertex 0. 0. .1))
                                                 (make-scaling-matrix& (vertex width width .1)))
                               color: dye)))))))))
