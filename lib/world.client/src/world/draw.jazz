;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; World Draw
;;;


(module world.draw jazz


(import (jazz.geometry)
        (jazz.graphic)
        (jazz.graphic.opengl.glew)
        (jazz.io)
        (jazz.library)
        (jazz.literals)
        (jazz.media)
        (jazz.network)
        (jazz.platform)
        (jazz.platform.cairo)
        (jazz.runtime)
        (jazz.system)
        (jazz.ui)
        (jazz.ui.window)
        (time)
        (world.geometry))


(definition public (gl-pixel point color)
  (let ((x (cast <fl> (get-h~ point)))
        (y (cast <fl> (get-v~ point))))
    (gl-colorize color)
    (glBegin GL_POINTS)
    (glVertex2f x y)
    (glEnd)))


(definition public (gl-line from to color)
  (let ((x1 (cast <fl> (get-h~ from)))
        (y1 (cast <fl> (get-v~ from)))
        (x2 (cast <fl> (get-h~ to)))
        (y2 (cast <fl> (get-v~ to))))
    (gl-colorize color)
    (glBegin GL_LINES)
    (glVertex2f x1 y1)
    (glVertex2f x2 y2)
    (glEnd)))


(definition public (gl-fill-rect rect color)
  (let ((x1 (cast <fl> (get-left~ rect)))
        (y1 (cast <fl> (get-top~ rect)))
        (x2 (cast <fl> (get-right~ rect)))
        (y2 (cast <fl> (get-bottom~ rect))))
    (gl-colorize color)
    (glBegin GL_QUADS)
    (glVertex2f x1 y1)
    (glVertex2f x2 y1)
    (glVertex2f x2 y2)
    (glVertex2f x1 y2)
    (glEnd)))


(definition public (gl-frame-rect rect color)
  (let ((x1 (cast <fl> (get-left~ rect)))
        (y1 (cast <fl> (get-top~ rect)))
        (x2 (cast <fl> (get-right~ rect)))
        (y2 (cast <fl> (get-bottom~ rect))))
    (gl-colorize color)
    (glBegin GL_LINE_LOOP)
    (glVertex2f x1 y1)
    (glVertex2f x2 y1)
    (glVertex2f x2 y2)
    (glVertex2f x1 y2)
    (glEnd)))


(definition public (gl-frame-circle center radius color)
  (let ((x (cast <fl> (get-h~ center)))
        (y (cast <fl> (get-v~ center))))
    (gl-colorize color)
    (glBegin GL_LINE_LOOP)
    (loop (for angle from 0 to 365 by 5)
          (glVertex2f (+ x (* (sin angle) radius))
                      (+ y (* (cos angle) radius))))
    (glEnd)))


(definition public (gl-segment-circle center radius color segments)
  (let ((segments (max 3 segments)))
    (let ((cx (cast <fl> (get-h~ center)))
          (cy (cast <fl> (get-v~ center)))
          (theta (/ PI*2 segments)))
      (let ((c (cos theta))
            (s (sin theta))
            (x radius)
            (y 0))
        (gl-colorize color)
        (glBegin GL_LINE_LOOP)
        (loop (for n from 0 below segments)
              (glVertex2f (+ x cx) (+ y cy))
              (let ((t x))
                (set! x (- (* c x) (* s y)))
                (set! y (+ (* s t) (* c y)))))
        (glEnd))))))
