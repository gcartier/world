;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Draw
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is WorldScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2014
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See http://github.com/gcartier/world for details.


(module world.draw jazz


(import (jazz.geometry)
        (jazz.graphic.opengl.glew)
        (world.dye)
        (world.foreign)
        (world.geometry)
        (world.opengl)
        (world.parallelepiped)
        (world.plane)
        (world.polygon))


(definition public (gl-pixel point color)
  (let ((x (cast <fl> (get-h~ point)))
        (y (cast <fl> (get-v~ point))))
    (gl-colorize color)
    (glBegin GL_POINTS)
    (glVertex2f x y)
    (glEnd)))


(definition public (gl-line from to color)
  (let ((x1 (cast <fl> (get-h~ from)))
        (y1 (cast <fl> (get-v~ from)))
        (x2 (cast <fl> (get-h~ to)))
        (y2 (cast <fl> (get-v~ to))))
    (gl-colorize color)
    (glBegin GL_LINES)
    (glVertex2f x1 y1)
    (glVertex2f x2 y2)
    (glEnd)))


(definition public (gl-fill-rect rect color)
  (let ((x1 (cast <fl> (get-left~ rect)))
        (y1 (cast <fl> (get-top~ rect)))
        (x2 (cast <fl> (get-right~ rect)))
        (y2 (cast <fl> (get-bottom~ rect))))
    (gl-colorize color)
    (glBegin GL_QUADS)
    (glVertex2f x1 y1)
    (glVertex2f x2 y1)
    (glVertex2f x2 y2)
    (glVertex2f x1 y2)
    (glEnd)))


(definition public (gl-frame-rect rect color)
  (let ((x1 (cast <fl> (get-left~ rect)))
        (y1 (cast <fl> (get-top~ rect)))
        (x2 (cast <fl> (get-right~ rect)))
        (y2 (cast <fl> (get-bottom~ rect))))
    (gl-colorize color)
    (glBegin GL_LINE_LOOP)
    (glVertex2f x1 y1)
    (glVertex2f x2 y1)
    (glVertex2f x2 y2)
    (glVertex2f x1 y2)
    (glEnd)))


(definition public (gl-frame-circle center radius color)
  (let ((x (cast <fl> (get-h~ center)))
        (y (cast <fl> (get-v~ center))))
    (gl-colorize color)
    (glBegin GL_LINE_LOOP)
    (loop (for angle from 0 to 365 by 5)
          (glVertex2f (+ x (* (sin angle) radius))
                      (+ y (* (cos angle) radius))))
    (glEnd)))


(definition public (gl-horizontal-circle center radius color)
  (let ((x (vertex-x center))
        (y (vertex-y center))
        (z (vertex-z center)))
    (gl-colorize color)
    (glBegin GL_LINE_LOOP)
    (loop (for angle <fl> from 0. to PI*2 by (/ PI*2 100.))
          (glVertex3f (+ x (* (sin angle) radius))
                      y
                      (+ z (* (cos angle) radius))))
    (glEnd)))


(definition public (gl-segment-circle center radius color segments)
  (let ((segments (max 3 segments)))
    (let ((cx (cast <fl> (get-h~ center)))
          (cy (cast <fl> (get-v~ center)))
          (theta (/ PI*2 segments)))
      (let ((c (cos theta))
            (s (sin theta))
            (x radius)
            (y 0))
        (gl-colorize color)
        (glBegin GL_LINE_LOOP)
        (loop (for n from 0 below segments)
              (glVertex2f (+ x cx) (+ y cy))
              (let ((t x))
                (set! x (- (* c x) (* s y)))
                (set! y (+ (* s t) (* c y)))))
        (glEnd)))))


(definition public (render-cube left bottom back right top front proc)
  ;; top
  (glNormal3f 0.0 1.0 0.0)
  (proc
    (lambda ()
      (glVertex3f right top back)
      (glVertex3f left  top back)
      (glVertex3f left  top front)
      (glVertex3f right top front)))
  ;; bottom
  (glNormal3f 0.0 -1.0 0.0)
  (proc
    (lambda ()
      (glVertex3f right bottom front)
      (glVertex3f left  bottom front)
      (glVertex3f left  bottom back)
      (glVertex3f right bottom back)))
  ;; front
  (glNormal3f 0.0 0.0 1.0)
  (proc
    (lambda ()
      (glVertex3f left  bottom front)
      (glVertex3f right bottom front)
      (glVertex3f right top    front)
      (glVertex3f left  top    front)))
  ;; back
  (glNormal3f 0.0 0.0 -1.0)
  (proc
    (lambda ()
      (glVertex3f right bottom back)
      (glVertex3f left  bottom back)
      (glVertex3f left  top    back)
      (glVertex3f right top    back)))
  ;; left
  (glNormal3f -1.0 0.0 0.0)
  (proc
    (lambda ()
      (glVertex3f left top    front)
      (glVertex3f left top    back)
      (glVertex3f left bottom back)
      (glVertex3f left bottom front)))
  ;; right
  (glNormal3f 1.0 0.0 0.0)
  (proc
    (lambda ()
      (glVertex3f right top    back)
      (glVertex3f right top    front)
      (glVertex3f right bottom front)
      (glVertex3f right bottom back))))


(definition public (render-parallelepiped para <Parallelepiped> proc)
  (define (gl-vertex vert)
    (glVertex3f (vertex-x vert)
                (vertex-y vert)
                (vertex-z vert)))
  
  (let ((left/bottom/back (get-left/bottom/back~ para))
        (left/bottom/front (get-left/bottom/front~ para))
        (left/top/back (get-left/top/back~ para))
        (left/top/front (get-left/top/front~ para))
        (right/bottom/back (get-right/bottom/back~ para))
        (right/bottom/front (get-right/bottom/front~ para))
        (right/top/back (get-right/top/back~ para))
        (right/top/front (get-right/top/front~ para)))
    ;; top
    (proc
      (lambda ()
        (gl-vertex right/top/back)
        (gl-vertex left/top/back)
        (gl-vertex left/top/front)
        (gl-vertex right/top/front)))
    ;; bottom
    (proc
      (lambda ()
        (gl-vertex right/bottom/front)
        (gl-vertex left/bottom/front)
        (gl-vertex left/bottom/back)
        (gl-vertex right/bottom/back)))
    ;; front
    (proc
      (lambda ()
        (gl-vertex left/bottom/front)
        (gl-vertex right/bottom/front)
        (gl-vertex right/top/front)
        (gl-vertex left/top/front)))
    ;; back
    (proc
      (lambda ()
        (gl-vertex right/bottom/back)
        (gl-vertex left/bottom/back)
        (gl-vertex left/top/back)
        (gl-vertex right/top/back)))
    ;; left
    (proc
      (lambda ()
        (gl-vertex left/top/front)
        (gl-vertex left/top/back)
        (gl-vertex left/bottom/back)
        (gl-vertex left/bottom/front)))
    ;; right
    (proc
      (lambda ()
        (gl-vertex right/top/back)
        (gl-vertex right/top/front)
        (gl-vertex right/bottom/front)
        (gl-vertex right/bottom/back)))))


(definition public (draw-sphere x y z radius slices stacks color)
  (glPushMatrix)
  (glTranslatef x y z)
  (gl-colorize color)
  (gl-sphere radius slices stacks)
  (glPopMatrix))


(definition public (draw-polygon poly <Polygon> dye <f32vector>)
  (gl-colorize-dye dye)
  (glLineWidth 2.)
  (glBegin GL_LINE_LOOP)
  (loop (for vert in-vector (get-vertices~ poly))
        (glVertex3f (vertex-x vert) (vertex-y vert) (vertex-z vert)))
  (glEnd)
  (glLineWidth 1.))


(definition public (draw-plane plane <Plane> dye <f32vector>)
  (gl-colorize-dye dye)
  (let ((origin (get-origin~ plane))
        (normal (get-normal~ plane)))
    (let ((other (vertex (vertex-y origin) (vertex-z origin) (vertex-x origin))))
      (let ((right (cross-normal& other normal)))
        (let ((sight (cross-normal& right normal)))
          (glPushMatrix)
          (glMultMatrixv
            (vertex-x right) (vertex-x normal) (vertex-x sight) (vertex-x origin)
            (vertex-y right) (vertex-y normal) (vertex-y sight) (vertex-y origin)
            (vertex-z right) (vertex-z normal) (vertex-z sight) (vertex-z origin)
            0. 0. 0. 1.)
          (glLineWidth 2.)
          (gl-horizontal-circle (vertex 0. 0. 0.) .15 (dye->color dye))
          (glBegin GL_LINES)
          (glVertex3f 0.0 0.0 0.0)
          (glVertex3f 0.0 .75 0.0)
          (glEnd)
          (glLineWidth 1.)
          (glPopMatrix)))))))
