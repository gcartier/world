;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; World Geometry
;;;


(module world.geometry jazz


(import (jazz.geometry)
        (jazz.graphic)
        (jazz.graphic.opengl))


(proclaim (warn optimizations))


;;;
;;;; Vertex
;;;


(class Vertex extends Object
  
  
  (slot x <fl> accessors generate)
  (slot y <fl> accessors generate)
  (slot z <fl> accessors generate)
  
  
  (method override (initialize x <fl> y <fl> z <fl>)
    (set! x~self x)
    (set! y~self y)
    (set! z~self z))
  
  
  (method override (print printer readably)
    (format printer "~{{a} {r precision: 1} {r precision: 1} {r precision: 1}}"
            (category-name (class-of self))
            x
            y
            z)))


;;;
;;;; Operations
;;;


(definition public (vertex+ v1 <Vertex> v2 <Vertex>)
  (new Vertex
    (+ (get-x~ v1) (get-x~ v2))
    (+ (get-y~ v1) (get-y~ v2))
    (+ (get-z~ v1) (get-z~ v2))))


(definition public (vertex2- v1 <Vertex> v2 <Vertex>)
  (new Vertex
    (- (get-x~ v1) (get-x~ v2))
    (- (get-y~ v1) (get-y~ v2))
    (- (get-z~ v1) (get-z~ v2))))


(definition public (vertex- v <Vertex>)
  (new Vertex
    (- (get-x~ v))
    (- (get-y~ v))
    (- (get-z~ v))))


(definition public (vertex-scalar* v <Vertex> r <fl>)
  (new Vertex
    (* r (get-x~ v))
    (* r (get-y~ v))
    (* r (get-z~ v))))


(definition public (rotate-upon angle <fl> u <Vertex> v <Vertex>)
  (let ((c <fl> (cos angle))
        (s <fl> (sin angle))
        (x (get-x~ u))
        (y (get-y~ u))
        (z (get-z~ u))
        (i (get-x~ v))
        (j (get-y~ v))
        (k (get-z~ v)))
    (new Vertex
      (+ (* i (+ (* x x (- 1 c)) c))
         (* j (- (* x y (- 1 c)) (* z s)))
         (* k (+ (* x z (- 1 c)) (* y s))))
      (+ (* i (+ (* y x (- 1 c)) (* z s)))
         (* j (+ (* y y (- 1 c)) c))
         (* k (- (* y z (- 1 c)) (* x s))))
      (+ (* i (- (* x z (- 1 c)) (* y s)))
         (* j (+ (* y z (- 1 c)) (* x s)))
         (* k (+ (* z z (- 1 c)) c))))))


(definition public (vertex-norm v <Vertex>)
  (let ((x (get-x~ v))
        (y (get-y~ v))
        (z (get-z~ v)))
    (sqrt (+ (* x x)
             (* y y)
             (* z z)))))


(definition public (vertex-normalize v <Vertex>)
  (vertex-scalar* v (/ (vertex-norm v))))


(definition public (cross-product u <Vertex> v <Vertex>)
  (let ((a (get-x~ u))
        (b (get-y~ u))
        (c (get-z~ u))
        (d (get-x~ v))
        (e (get-y~ v))
        (f (get-z~ v)))
    (new Vertex
      (- (* b f) (* c e))
      (- (* c d) (* a f))
      (- (* a e) (* b d)))))


(definition public (plane-normal v1 <Vertex> v2 <Vertex> v3 <Vertex>)
  (cross-product (vertex2- v2 v1)
                 (vertex2- v3 v1)))


;;;
;;;; OpenGL
;;;


(definition public (gl-plane-normal v1 v2 v3)
  (let ((normal (plane-normal v1 v2 v3)))
    (gl-normal (get-x~ normal)
               (get-y~ normal)
               (get-z~ normal))))


;;;
;;;; Utilities
;;;


(definition public (random-in max)
  (- (* (random-real) max 2) max)))
