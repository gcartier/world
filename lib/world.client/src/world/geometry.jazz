;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; World Geometry
;;;


(module world.geometry jazz


(import (jazz.geometry)
        (jazz.graphic)
        (jazz.graphic.opengl))


(proclaim (warn optimizations))


;;;
;;;; Vertex
;;;


(definition public inline (vertex x y z)
  (f32vector x y z))


(definition public inline (vertex-x vert)
  (f32vector-ref vert 0))

(definition public inline (vertex-y vert)
  (f32vector-ref vert 1))

(definition public inline (vertex-z vert)
  (f32vector-ref vert 2))


;;;
;;;; Matrix
;;;


;; 0  4  8 12
;; 1  5  9 13
;; 2  6 10 14
;; 3  7 11 15


(definition public (make-matrix) <f32vector>
  (make-f32vector 16))


(definition public inline (matrix-ref mat <f32vector> ind <fx>) <fl>
  (f32vector-ref mat ind))


(definition public inline (matrix-set! mat <f32vector> ind <fx> val <object>) <void>
  (f32vector-set! mat ind val))


(definition public (make-identity-matrix) <f32vector>
  (let ((mat (make-matrix)))
    (matrix-set-identity! mat)
    mat))


(definition public (matrix-set-identity! mat <f32vector>) <void>
  (matrix-set! mat 0  1.)
  (matrix-set! mat 1  0.)
  (matrix-set! mat 2  0.)
  (matrix-set! mat 3  0.)
  (matrix-set! mat 4  0.)
  (matrix-set! mat 5  1.)
  (matrix-set! mat 6  0.)
  (matrix-set! mat 7  0.)
  (matrix-set! mat 8  0.)
  (matrix-set! mat 9  0.)
  (matrix-set! mat 10 1.)
  (matrix-set! mat 11 0.)
  (matrix-set! mat 12 0.)
  (matrix-set! mat 13 0.)
  (matrix-set! mat 14 0.)
  (matrix-set! mat 15 1.))


(definition public (matrix-multiply a <f32vector> b <f32vector>) <f32vector>
  (let ((mat (make-matrix)))
    (matrix-multiply! mat a b)
    mat))


(definition public (matrix-multiply! mat <f32vector> a <f32vector> b <f32vector>) <void>
  (loop (for i from 0 below 4)
        (loop (for j from 0 below 4)
              (let ((ind (+ (* j 4) i)))
                (matrix-set! mat ind 0.)
                (loop (for k from 0 below 4)
                      (matrix-set! mat ind (+ (matrix-ref mat ind)
                                              (* (matrix-ref a (+ (* k 4) i))
                                                 (matrix-ref b (+ (* j 4) k))))))))))


(definition public (matrix-set-translation! mat <f32vector> x <fl> y <fl> z <fl>) <void>
  (matrix-set-identity! mat)
  (matrix-set! mat 12 x)
  (matrix-set! mat 13 y)
  (matrix-set! mat 14 z))


(definition public (matrix-set-projection! mat <f32vector> fov <fl> ratio <fl> near <fl> far <fl>) <void>
  (let ((f (/ 1.0 (tan (* fov (/ PI 360.))))))
    (matrix-set-identity! mat)
    (matrix-set! mat  0 (/ f ratio))
    (matrix-set! mat  5 f)
    (matrix-set! mat 10 (/ (+ far near) (- near far)))
    (matrix-set! mat 14 (/ (* 2.0 far near) (- near far)))
    (matrix-set! mat 11 -1.)
    (matrix-set! mat 15 0.)))


(definition public (matrix-set-camera! view <f32vector> position <f32vector> lookat <f32vector>) <void>
  (let* ((up (vertex 0.0 1.0 0.0))
         (dir (vertex-normalize (vertex- lookat position)))
         (right (vertex-normalize (cross-product dir up)))
         (up (vertex-normalize (cross-product right dir)))
         (aux (make-matrix)))
    (matrix-set! view  0 (vertex-x right))
    (matrix-set! view  4 (vertex-y right))
    (matrix-set! view  8 (vertex-z right))
    (matrix-set! view 12 0.0)
 
    (matrix-set! view  1 (vertex-x up))
    (matrix-set! view  5 (vertex-y up))
    (matrix-set! view  9 (vertex-z up))
    (matrix-set! view 13 0.0)
 
    (matrix-set! view  2 (- (vertex-x dir)))
    (matrix-set! view  6 (- (vertex-y dir)))
    (matrix-set! view 10 (- (vertex-z dir)))
    (matrix-set! view 14  0.0)
 
    (matrix-set! view  3 0.0)
    (matrix-set! view  7 0.0)
    (matrix-set! view 11 0.0)
    (matrix-set! view 15 1.0)
 
    (matrix-set-translation! aux
                             (- (vertex-x position))
                             (- (vertex-y position))
                             (- (vertex-z position)))
 
    (matrix-multiply! view view aux)))


;;;
;;;; LookAt
;;;


(class LookAt extends Object
  
  
  (slot sight <f32vector> accessors generate)
  (slot up    <f32vector> accessors generate)
  (slot right <f32vector> accessors generate)
  
  
  (method override (initialize sight <f32vector> up <f32vector> right <f32vector>)
    (set! sight~self sight)
    (set! up~self up)
    (set! right~self right))
  
  
  (method public (rotate angle <fl> vert <f32vector>) <void>
    (set! sight (vertex-normalize (rotate-upon angle vert sight)))
    (set! up (vertex-normalize (rotate-upon angle vert up)))
    (set! right (vertex-normalize (rotate-upon angle vert right))))
  
  
  (method public (validate-normalized)
    (define (validate vert)
      (unless (near? (vertex-norm vert) 1. .0001)
        (error "Vertex {s} is not normalized" vert)))
    
    (validate sight)
    (validate up)
    (validate right)))


;;;
;;;; Cuboid
;;;


(class Cuboid extends Object
  
  
  (slot left   <fl> accessors generate)
  (slot bottom <fl> accessors generate)
  (slot far    <fl> accessors generate)
  (slot right  <fl> accessors generate)
  (slot top    <fl> accessors generate)
  (slot near   <fl> accessors generate)
  
  
  (method override (initialize left <fl> bottom <fl> far <fl> right <fl> top <fl> near <fl>)
    (set! left~self left)
    (set! bottom~self bottom)
    (set! far~self far)
    (set! right~self right)
    (set! top~self top)
    (set! near~self near))
  
  
  (method override (print printer readably)
    (format printer "~{{a} {r precision: 1} {r precision: 1} {r precision: 1} {r precision: 1} {r precision: 1} {r precision: 1}}"
            (category-name (class-of self))
            left
            bottom
            far
            right
            top
            near)))


;;;
;;;; Operations
;;;


(definition public (vertex+ v1 <f32vector> v2 <f32vector>) <f32vector>
  (vertex
    (+ (vertex-x v1) (vertex-x v2))
    (+ (vertex-y v1) (vertex-y v2))
    (+ (vertex-z v1) (vertex-z v2))))


(definition public (vertex- v1 <f32vector> v2 <f32vector>) <f32vector>
  (vertex
    (- (vertex-x v1) (vertex-x v2))
    (- (vertex-y v1) (vertex-y v2))
    (- (vertex-z v1) (vertex-z v2))))


(definition public (vertex-negate v <f32vector>) <f32vector>
  (vertex
    (- (vertex-x v))
    (- (vertex-y v))
    (- (vertex-z v))))


(definition public (vertex-scalar* v <f32vector> r <fl>) <f32vector>
  (vertex
    (* r (vertex-x v))
    (* r (vertex-y v))
    (* r (vertex-z v))))


(definition public (rotate-upon angle <fl> u <f32vector> v <f32vector>) <f32vector>
  (let ((c <fl> (cos angle))
        (s <fl> (sin angle))
        (x (vertex-x u))
        (y (vertex-y u))
        (z (vertex-z u))
        (i (vertex-x v))
        (j (vertex-y v))
        (k (vertex-z v)))
    (vertex
      (+ (* i (+ (* x x (- 1 c)) c))
         (* j (- (* x y (- 1 c)) (* z s)))
         (* k (+ (* x z (- 1 c)) (* y s))))
      (+ (* i (+ (* y x (- 1 c)) (* z s)))
         (* j (+ (* y y (- 1 c)) c))
         (* k (- (* y z (- 1 c)) (* x s))))
      (+ (* i (- (* x z (- 1 c)) (* y s)))
         (* j (+ (* y z (- 1 c)) (* x s)))
         (* k (+ (* z z (- 1 c)) c))))))


(definition public (vertex-norm v <f32vector>) <fl>
  (let ((x (vertex-x v))
        (y (vertex-y v))
        (z (vertex-z v)))
    (sqrt (+ (* x x)
             (* y y)
             (* z z)))))


(definition public (vertex-normalize v <f32vector>) <f32vector>
  (vertex-scalar* v (/ (vertex-norm v))))


(definition public (vertex-distance v1 <f32vector> v2 <f32vector>) <fl>
  (vertex-norm (vertex- v2 v1)))


(definition public (dot-product u <f32vector> v <f32vector>) <fl>
  (+ (* (vertex-x u) (vertex-x v))
     (* (vertex-y u) (vertex-y v))
     (* (vertex-z u) (vertex-z v))))


(definition public (cross-product u <f32vector> v <f32vector>) <f32vector>
  (let ((a (vertex-x u))
        (b (vertex-y u))
        (c (vertex-z u))
        (d (vertex-x v))
        (e (vertex-y v))
        (f (vertex-z v)))
    (vertex
      (- (* b f) (* c e))
      (- (* c d) (* a f))
      (- (* a e) (* b d)))))


(definition public (vector-angle v1 <f32vector> v2 <f32vector>) <fl>
  (acos (dot-product v1 v2)))


(definition public (vertical-angle vert world-up)
  (- (vector-angle vert world-up)
     PI/2))


(definition public (plane-normal v1 <f32vector> v2 <f32vector> v3 <f32vector>) <f32vector>
  (cross-product (vertex- v2 v1)
                 (vertex- v3 v1)))


;;;
;;;; OpenGL
;;;


(definition public (gl-plane-normal v1 v2 v3)
  (let ((normal (plane-normal v1 v2 v3)))
    (glNormal3f (vertex-x normal)
                (vertex-y normal)
                (vertex-z normal))))


;;;
;;;; Utilities
;;;


(definition public (random-in max)
  (- (* (random-real) max 2) max)))
