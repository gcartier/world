;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; World Geometry
;;;


(module world.geometry jazz


(import (jazz.geometry)
        (jazz.graphic)
        (jazz.graphic.opengl))


(proclaim (warn optimizations))


;;;
;;;; Vertex
;;;


(definition public inline (vertex x y z)
  (f32vector x y z))


(definition public inline (vertex-x vert)
  (f32vector-ref vert 0))

(definition public inline (vertex-y vert)
  (f32vector-ref vert 1))

(definition public inline (vertex-z vert)
  (f32vector-ref vert 2))


;;;
;;;; Matrix
;;;


(definition public inline (matrix-ref mat ind)
  (f32vector-ref mat ind))


(definition public inline (matrix-set! mat ind val)
  (f32vector-set! mat ind val))


;;;
;;;; LookAt
;;;


(class LookAt extends Object
  
  
  (slot sight <f32vector> accessors generate)
  (slot up    <f32vector> accessors generate)
  (slot right <f32vector> accessors generate)
  
  
  (method override (initialize sight <f32vector> up <f32vector> right <f32vector>)
    (set! sight~self sight)
    (set! up~self up)
    (set! right~self right))
  
  
  (method public (rotate angle <fl> vert <f32vector>) <void>
    (set! sight (vertex-normalize (rotate-upon angle vert sight)))
    (set! up (vertex-normalize (rotate-upon angle vert up)))
    (set! right (vertex-normalize (rotate-upon angle vert right))))
  
  
  (method public (validate-normalized)
    (define (validate vert)
      (unless (near? (vertex-norm vert) 1. .0001)
        (error "Vertex {s} is not normalized" vert)))
    
    (validate sight)
    (validate up)
    (validate right)))


;;;
;;;; Cuboid
;;;


(class Cuboid extends Object
  
  
  (slot left   <fl> accessors generate)
  (slot bottom <fl> accessors generate)
  (slot far    <fl> accessors generate)
  (slot right  <fl> accessors generate)
  (slot top    <fl> accessors generate)
  (slot near   <fl> accessors generate)
  
  
  (method override (initialize left <fl> bottom <fl> far <fl> right <fl> top <fl> near <fl>)
    (set! left~self left)
    (set! bottom~self bottom)
    (set! far~self far)
    (set! right~self right)
    (set! top~self top)
    (set! near~self near))
  
  
  (method override (print printer readably)
    (format printer "~{{a} {r precision: 1} {r precision: 1} {r precision: 1} {r precision: 1} {r precision: 1} {r precision: 1}}"
            (category-name (class-of self))
            left
            bottom
            far
            right
            top
            near)))


;;;
;;;; Operations
;;;


(definition public (vertex+ v1 <f32vector> v2 <f32vector>) <f32vector>
  (vertex
    (+ (vertex-x v1) (vertex-x v2))
    (+ (vertex-y v1) (vertex-y v2))
    (+ (vertex-z v1) (vertex-z v2))))


(definition public (vertex- v1 <f32vector> v2 <f32vector>) <f32vector>
  (vertex
    (- (vertex-x v1) (vertex-x v2))
    (- (vertex-y v1) (vertex-y v2))
    (- (vertex-z v1) (vertex-z v2))))


(definition public (vertex-negate v <f32vector>) <f32vector>
  (vertex
    (- (vertex-x v))
    (- (vertex-y v))
    (- (vertex-z v))))


(definition public (vertex-scalar* v <f32vector> r <fl>) <f32vector>
  (vertex
    (* r (vertex-x v))
    (* r (vertex-y v))
    (* r (vertex-z v))))


(definition public (rotate-upon angle <fl> u <f32vector> v <f32vector>) <f32vector>
  (let ((c <fl> (cos angle))
        (s <fl> (sin angle))
        (x (vertex-x u))
        (y (vertex-y u))
        (z (vertex-z u))
        (i (vertex-x v))
        (j (vertex-y v))
        (k (vertex-z v)))
    (vertex
      (+ (* i (+ (* x x (- 1 c)) c))
         (* j (- (* x y (- 1 c)) (* z s)))
         (* k (+ (* x z (- 1 c)) (* y s))))
      (+ (* i (+ (* y x (- 1 c)) (* z s)))
         (* j (+ (* y y (- 1 c)) c))
         (* k (- (* y z (- 1 c)) (* x s))))
      (+ (* i (- (* x z (- 1 c)) (* y s)))
         (* j (+ (* y z (- 1 c)) (* x s)))
         (* k (+ (* z z (- 1 c)) c))))))


(definition public (vertex-norm v <f32vector>) <fl>
  (let ((x (vertex-x v))
        (y (vertex-y v))
        (z (vertex-z v)))
    (sqrt (+ (* x x)
             (* y y)
             (* z z)))))


(definition public (vertex-normalize v <f32vector>) <f32vector>
  (vertex-scalar* v (/ (vertex-norm v))))


(definition public (vertex-distance v1 <f32vector> v2 <f32vector>) <fl>
  (vertex-norm (vertex- v2 v1)))


(definition public (dot-product u <f32vector> v <f32vector>) <fl>
  (+ (* (vertex-x u) (vertex-x v))
     (* (vertex-y u) (vertex-y v))
     (* (vertex-z u) (vertex-z v))))


(definition public (cross-product u <f32vector> v <f32vector>) <f32vector>
  (let ((a (vertex-x u))
        (b (vertex-y u))
        (c (vertex-z u))
        (d (vertex-x v))
        (e (vertex-y v))
        (f (vertex-z v)))
    (vertex
      (- (* b f) (* c e))
      (- (* c d) (* a f))
      (- (* a e) (* b d)))))


(definition public (vector-angle v1 <f32vector> v2 <f32vector>) <fl>
  (acos (dot-product v1 v2)))


(definition public (vertical-angle vert world-up)
  (- (vector-angle vert world-up)
     PI/2))


(definition public (plane-normal v1 <f32vector> v2 <f32vector> v3 <f32vector>) <f32vector>
  (cross-product (vertex- v2 v1)
                 (vertex- v3 v1)))


;;;
;;;; OpenGL
;;;


(definition public (gl-plane-normal v1 v2 v3)
  (let ((normal (plane-normal v1 v2 v3)))
    (glNormal3f (vertex-x normal)
                (vertex-y normal)
                (vertex-z normal))))


;;;
;;;; Utilities
;;;


(definition public (random-in max)
  (- (* (random-real) max 2) max)))
