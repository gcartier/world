;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; World Geometry
;;;


(module world.geometry jazz


(import (jazz.geometry)
        (jazz.graphic)
        (jazz.graphic.opengl))


(proclaim (warn optimizations))


;;;
;;;; Vertex
;;;


(class Vertex extends Object
  
  
  (slot x <fl> accessors generate)
  (slot y <fl> accessors generate)
  (slot z <fl> accessors generate)
  
  
  (method override (initialize x <fl> y <fl> z <fl>)
    (set! x~self x)
    (set! y~self y)
    (set! z~self z))
  
  
  (method override (print printer readably)
    (format printer "~{{a} {r precision: 1} {r precision: 1} {r precision: 1}}"
            (category-name (class-of self))
            x
            y
            z)))


;;;
;;;; LookAt
;;;


(class LookAt extends Object
  
  
  (slot sight <Vertex> accessors generate)
  (slot up    <Vertex> accessors generate)
  (slot right <Vertex> accessors generate)
  
  
  (method override (initialize sight <Vertex> up <Vertex> right <Vertex>)
    (set! sight~self sight)
    (set! up~self up)
    (set! right~self right))
  
  
  (method public (rotate angle <fl> vert <Vertex>) <void>
    (set! sight (vertex-normalize (rotate-upon angle vert sight)))
    (set! up (vertex-normalize (rotate-upon angle vert up)))
    (set! right (vertex-normalize (rotate-upon angle vert right))))
  
  
  (method public (validate-normalized)
    (define (validate vert)
      (unless (near? (vertex-norm vert) 1. .0001)
        (error "Vertex {s} is not normalized" vert)))
    
    (validate sight)
    (validate up)
    (validate right)))


;;;
;;;; Cuboid
;;;


(class Cuboid extends Object
  
  
  (slot left   <fl> accessors generate)
  (slot bottom <fl> accessors generate)
  (slot far    <fl> accessors generate)
  (slot right  <fl> accessors generate)
  (slot top    <fl> accessors generate)
  (slot near   <fl> accessors generate)
  
  
  (method override (initialize left <fl> bottom <fl> far <fl> right <fl> top <fl> near <fl>)
    (set! left~self left)
    (set! bottom~self bottom)
    (set! far~self far)
    (set! right~self right)
    (set! top~self top)
    (set! near~self near))
  
  
  (method override (print printer readably)
    (format printer "~{{a} {r precision: 1} {r precision: 1} {r precision: 1} {r precision: 1} {r precision: 1} {r precision: 1}}"
            (category-name (class-of self))
            left
            bottom
            far
            right
            top
            near)))


;;;
;;;; Operations
;;;


(definition public (vertex+ v1 <Vertex> v2 <Vertex>) <Vertex>
  (new Vertex
    (+ (get-x~ v1) (get-x~ v2))
    (+ (get-y~ v1) (get-y~ v2))
    (+ (get-z~ v1) (get-z~ v2))))


(definition public (vertex- v1 <Vertex> v2 <Vertex>) <Vertex>
  (new Vertex
    (- (get-x~ v1) (get-x~ v2))
    (- (get-y~ v1) (get-y~ v2))
    (- (get-z~ v1) (get-z~ v2))))


(definition public (vertex-negate v <Vertex>) <Vertex>
  (new Vertex
    (- (get-x~ v))
    (- (get-y~ v))
    (- (get-z~ v))))


(definition public (vertex-scalar* v <Vertex> r <fl>) <Vertex>
  (new Vertex
    (* r (get-x~ v))
    (* r (get-y~ v))
    (* r (get-z~ v))))


(definition public (rotate-upon angle <fl> u <Vertex> v <Vertex>) <Vertex>
  (let ((c <fl> (cos angle))
        (s <fl> (sin angle))
        (x (get-x~ u))
        (y (get-y~ u))
        (z (get-z~ u))
        (i (get-x~ v))
        (j (get-y~ v))
        (k (get-z~ v)))
    (new Vertex
      (+ (* i (+ (* x x (- 1 c)) c))
         (* j (- (* x y (- 1 c)) (* z s)))
         (* k (+ (* x z (- 1 c)) (* y s))))
      (+ (* i (+ (* y x (- 1 c)) (* z s)))
         (* j (+ (* y y (- 1 c)) c))
         (* k (- (* y z (- 1 c)) (* x s))))
      (+ (* i (- (* x z (- 1 c)) (* y s)))
         (* j (+ (* y z (- 1 c)) (* x s)))
         (* k (+ (* z z (- 1 c)) c))))))


(definition public (vertex-norm v <Vertex>) <fl>
  (let ((x (get-x~ v))
        (y (get-y~ v))
        (z (get-z~ v)))
    (sqrt (+ (* x x)
             (* y y)
             (* z z)))))


(definition public (vertex-normalize v <Vertex>) <Vertex>
  (vertex-scalar* v (/ (vertex-norm v))))


(definition public (vertex-distance v1 <Vertex> v2 <Vertex>) <fl>
  (vertex-norm (vertex- v2 v1)))


(definition public (dot-product u <Vertex> v <Vertex>) <fl>
  (+ (* (get-x~ u) (get-x~ v))
     (* (get-y~ u) (get-y~ v))
     (* (get-z~ u) (get-z~ v))))


(definition public (cross-product u <Vertex> v <Vertex>) <Vertex>
  (let ((a (get-x~ u))
        (b (get-y~ u))
        (c (get-z~ u))
        (d (get-x~ v))
        (e (get-y~ v))
        (f (get-z~ v)))
    (new Vertex
      (- (* b f) (* c e))
      (- (* c d) (* a f))
      (- (* a e) (* b d)))))


(definition public (vector-angle v1 <Vertex> v2 <Vertex>) <fl>
  (acos (dot-product v1 v2)))


(definition public (vertical-angle vert world-up)
  (- (vector-angle vert world-up)
     PI/2))


(definition public (plane-normal v1 <Vertex> v2 <Vertex> v3 <Vertex>) <Vertex>
  (cross-product (vertex- v2 v1)
                 (vertex- v3 v1)))


;;;
;;;; OpenGL
;;;


(definition public (gl-plane-normal v1 v2 v3)
  (let ((normal (plane-normal v1 v2 v3)))
    (glNormal3f (get-x~ normal)
                (get-y~ normal)
                (get-z~ normal))))


;;;
;;;; Utilities
;;;


(definition public (random-in max)
  (- (* (random-real) max 2) max)))
