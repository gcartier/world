;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; Ambience
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2016
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.ambience jazz


(import (jazz.audio)
        (jazz.io)
        (world)
        (world.autoload)
        (world.settings)
        (world.sound)
        (world.syntax (phase syntax)))


(class World-Ambience extends Object
  
  
  (slot ambience?         <bool>   initialize #f accessors generate)
  (slot ambience-volume   <fl>     initialize #f accessors generate)
  (slot ambience-playing  <object> initialize #f getter generate)
  
  
  (method override (initialize)
    (set! ambience? (world-setting 'world.ambience? #t))
    (set! ambience-volume (world-setting 'world.ambience-volume default-ambience-volume)))
  
  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method (on-toggle-ambience evt)
    (toggle-ambience))
  
  
  ;;;
  ;;;; Ambience
  ;;;
  
  
  (method public (initial-ambience)
    (when ambience?
      (change-ambience)))
  
  
  (method (toggle-ambience)
    (let ((world (current-world)))
      (set! ambience? (not ambience?))
      (change-ambience)
      (display-on/off~ world "Ambience" (ambience-playing?))))
  
  
  (method (change-ambience? flag)
    (set! ambience? flag)
    (if ambience?
        (change-ambience)
      (close-ambience)))
  
  
  (method (change-ambience (error?: error? #t))
    (if (not ambience?)
        (close-ambience)
      (let ((world (current-world)))
        (let ((queue (new-queue))
              (where "ambience/outdoor"))
          (iterate-assets~ world
            (lambda (assets)
              (let ((ambience-dir (new-directory~ (get-directory~ assets) where)))
                (when (exists?~ ambience-dir)
                  (iterate-directory~ ambience-dir
                    (lambda (path kind)
                      (let ((path (join path "/")))
                        (when (or (extension=? (extract-extension path) "mp3")
                                  (extension=? (extract-extension path) "ogg"))
                          (enqueue queue (extract-spine path)))))
                    full?: #f
                    files?: #t
                    directories?: #f)))))
          (let ((ambience-list (queue-list queue)))
            (if (null? ambience-list)
                (and error? (display-error~ world "No ambience found"))
              (let ((ambience (random-element ambience-list)))
                (play-ambience (concatenate where "/" ambience)))))))))
  
  
  (method (ambience-playing?)
    (boolean ambience-playing))
  
  
  (method (play-ambience path)
    (let ((world (current-world)))
      (let ((file (effective-ambience path)))
        (when file
          (let ((sound (new-stream-sound file)))
            (close-ambience)
            (set! ambience-playing sound)
            (set-volume~ sound ambience-volume)
            (set-loop~ sound)
            (play~ sound)
            (update-parameter~ world 'ambience))))))
  
  
  (method (effective-ambience path)
    (let ((world (current-world)))
      (and path
           (continuation-capture
             (lambda (return)
               (iterate-assets~ world
                 (lambda (assets)
                   (let ((mp3 (new-file~ (get-directory~ assets) (make-filename path "mp3"))))
                     (if (exists?~ mp3)
                         (continuation-return return mp3)
                       (let ((ogg (new-file~ (get-directory~ assets) (make-filename path "ogg"))))
                         (when (exists?~ ogg)
                           (continuation-return return ogg)))))))
               #f)))))
  
  
  (method (close-ambience)
    (let ((world (current-world)))
      (when ambience-playing
        (close~ ambience-playing)
        (set! ambience-playing #f)
        (update-parameter~ world 'ambience))))))
