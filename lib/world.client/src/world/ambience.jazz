;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; Ambience
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.ambience jazz


(import (jazz.audio)
        (jazz.event)
        (jazz.io)
        (world)
        (world.asset)
        (world.assets)
        (world.autoload)
        (world.context)
        (world.settings)
        (world.sound)
        (world.task))


(class World-Ambience extends Object
  
  
  (slot ambience?         <bool>   initialize #f accessors generate)
  (slot ambience-volume   <fl>     initialize #f accessors generate)
  (slot ambience-playing  <object> initialize #f getter generate)
  
  
  (method override (initialize self)
    (set! ambience? (world-setting 'world.ambience? #t))
    (set! ambience-volume (world-setting 'world.ambience-volume default-ambience-volume)))
  
  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method (on-toggle-ambience self evt)
    (toggle-ambience self))
  
  
  ;;;
  ;;;; Ambience
  ;;;
  
  
  (method public (initial-ambience self)
    (when ambience?
      (change-ambience self)))
  
  
  (method (toggle-ambience self)
    (let ((world (current-world)))
      (set! ambience? (not ambience?))
      (change-ambience self)
      (display-on/off world "Ambience" (ambience-playing? self))))
  
  
  (method package (change-ambience? self flag)
    (set! ambience? flag)
    (if ambience?
        (change-ambience self)
      (close-ambience self)))
  
  
  (method package (change-ambience self (error?: error? #t))
    (if (not ambience?)
        (close-ambience self)
      (let ((world (current-world)))
        (let ((queue (new-queue)))
          (iterate-assets world
            (lambda (assets)
              (iterate-entries assets
                (lambda (path)
                  (when (starts-with? path "ambience/")
                    (let ((ext (filename-extension path)))
                      (when (or (extension=? ext "mp3")
                                (extension=? ext "ogg"))
                        (enqueue queue (new Asset assets path)))))))))
          (let ((ambience-list (queue-list queue)))
            (if (null? ambience-list)
                (and error? (display-error world "No ambience found"))
              (let ((ambience (random-element ambience-list)))
                (play-ambience self ambience))))))))
  
  
  (method package (ambience-playing? self)
    (boolean ambience-playing))
  
  
  (method package (ambience-ended self)
    (post-event
      (lambda ()
        (with-task-mutex
          (lambda ()
            (when ambience-playing
              (change-ambience self)))))))
  
  
  (method package (play-ambience self asset)
    (let ((world (current-world)))
      (let ((file (effective-ambience self asset)))
        (when file
          (let ((song (new-song file)))
            (close-ambience self)
            (set! ambience-playing song)
            (set-volume song ambience-volume)
            (register-playing-song song (lambda (song)
                                          (ambience-ended self)
                                          (close song)))
            (play song)
            (update-parameter world 'ambience))))))
  
  
  (method (effective-ambience self asset)
    (and asset (retrieve-file asset)))
  
  
  (method package (close-ambience self)
    (let ((world (current-world)))
      (when ambience-playing
        (unregister-playing-song ambience-playing)
        (close ambience-playing)
        (set! ambience-playing #f)
        (update-parameter world 'ambience))))))
