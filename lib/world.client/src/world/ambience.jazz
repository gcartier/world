;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; Ambience
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.ambience jazz


(import (jazz.audio)
        (jazz.event)
        (jazz.io)
        (world)
        (world.autoload)
        (world.context)
        (world.settings)
        (world.sound)
        (world.syntax (phase syntax))
        (world.task))


(class World-Ambience extends Object
  
  
  (slot ambience?         <bool>   initialize #f accessors generate)
  (slot ambience-volume   <fl>     initialize #f accessors generate)
  (slot ambience-playing  <object> initialize #f getter generate)
  
  
  (method override (initialize self)
    (set! ambience? (world-setting 'world.ambience? #t))
    (set! ambience-volume (world-setting 'world.ambience-volume default-ambience-volume)))
  
  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method (on-toggle-ambience self evt)
    (toggle-ambience self))
  
  
  ;;;
  ;;;; Ambience
  ;;;
  
  
  (method public (initial-ambience self)
    (when ambience?
      (change-ambience self)))
  
  
  (method (toggle-ambience self)
    (let ((world (current-world)))
      (set! ambience? (not ambience?))
      (change-ambience self)
      (display-on/off world "Ambience" (ambience-playing? self))))
  
  
  (method package (change-ambience? self flag)
    (set! ambience? flag)
    (if ambience?
        (change-ambience self)
      (close-ambience self)))
  
  
  (method package (change-ambience self (error?: error? #t))
    (if (not ambience?)
        (close-ambience self)
      (let ((world (current-world)))
        (let ((queue (new-queue))
              (where "ambience/outdoor"))
          (iterate-assets world
            (lambda (assets)
              (let ((ambience-dir (new-directory (get-directory assets) where)))
                (when (exists? ambience-dir)
                  (iterate-directory ambience-dir
                    (lambda (path kind)
                      (let ((path (join path "/")))
                        (when (or (extension=? (filename-extension path) "mp3")
                                  (extension=? (filename-extension path) "ogg"))
                          (enqueue queue (filename-spine path)))))
                    full?: #f
                    files?: #t
                    directories?: #f)))))
          (let ((ambience-list (queue-list queue)))
            (if (null? ambience-list)
                (and error? (display-error world "No ambience found"))
              (let ((ambience (random-element ambience-list)))
                (play-ambience self (concatenate where "/" ambience)))))))))
  
  
  (method package (ambience-playing? self)
    (boolean ambience-playing))
  
  
  (method package (ambience-ended self)
    (post-event
      (lambda ()
        (with-task-mutex
          (lambda ()
            (when ambience-playing
              (change-ambience self)))))))
  
  
  (method package (play-ambience self path)
    (let ((world (current-world)))
      (let ((file (effective-ambience self path)))
        (when file
          (let ((sound (new-sound file)))
            (close-ambience self)
            (set! ambience-playing sound)
            (set-volume sound ambience-volume)
            (register-playing-sound sound (lambda (sound)
                                            (ambience-ended self)
                                            (close sound)))
            (play sound)
            (update-parameter world 'ambience))))))
  
  
  (method (effective-ambience self path)
    (let ((world (current-world)))
      (and path
           (continuation-capture
             (lambda (return)
               (iterate-assets world
                 (lambda (assets)
                   (let ((mp3 (new-file (get-directory assets) (add-extension path "mp3"))))
                     (if (exists? mp3)
                         (continuation-return return mp3)
                       (let ((ogg (new-file (get-directory assets) (add-extension path "ogg"))))
                         (when (exists? ogg)
                           (continuation-return return ogg)))))))
               #f)))))
  
  
  (method package (close-ambience self)
    (let ((world (current-world)))
      (when ambience-playing
        (unregister-playing-sound ambience-playing)
        (close ambience-playing)
        (set! ambience-playing #f)
        (update-parameter world 'ambience))))))
