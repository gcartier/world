;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Meshes
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2016
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.mesh jazz


(import (jazz.platform)
        (jazz.opengl.glew)
        (world)
        (world.buffer)
        (world.material))


(proclaim (warn optimizations))


(constant inline vertex-floats <fx>
  10)

(constant inline neighbors-floats <fx>
  7)

(constant inline lightmap-floats <fx>
  3)

(constant inline triangle-floats <fx>
  30
  @wait-constant-folding
  (* 3 vertex-floats))

(constant inline triangle-neighbors-floats <fx>
  21
  @wait-constant-folding
  (* 3 neighbors-floats))

(constant inline triangle-lightmap-floats <fx>
  9
  @wait-constant-folding
  (* 3 lightmap-floats))

(constant inline vertex-stride <fx>
  40
  @wait-constant-folding
  (* 10 float-size))

(constant inline neighbors-stride <fx>
  28
  @wait-constant-folding
  (* 7 float-size))

(constant inline lightmap-stride <fx>
  12
  @wait-constant-folding
  (* 3 float-size))

(constant inline vertex-offset <fx>
  0)

(constant inline normal-offset <fx>
  12
  @wait-constant-folding
  (* 3 float-size))


(constant inline texture-offset <fx>
  24
  @wait-constant-folding
  (* 6 float-size))

(constant inline bone-offset <fx>
  36
  @wait-constant-folding
  (* 9 float-size))

(constant inline swizz-offset <fx>
  0)

(constant inline neighbor1-offset <fx>
  4
  @wait-constant-folding
  float-size)

(constant inline neighbor2-offset <fx>
  16
  @wait-constant-folding
  (* 4 float-size))


;;;
;;;; Mesh
;;;


;; Vertices
;;   triangle1 ...
;;   v1 n1 t1 b1 v2 n2 t2 b2 v3 n3 t3 b3 ...
;;   v1x v1y v1z n1x n1y n1z t1u t1v t1z b1 v2x v2y v2z n2x n2y n2z t2u t2v t2z b2 v3x v3y v3z n3x n3y n3z t3u t3v t3z b3 ...
;;
;; Neighbors
;;   rank neighbor1 neighbor2 ...
;;   rank v11 v12 v13 v21 v22 v23 ...
;;
;; Lightmap
;;   l1 l2 l3 ...
;;   l1r l1g l1b l2r l2g l2b l3r l3g l3b ...


(class Mesh extends Object
  
  
  (slot vertices-buffer  <Buffer>   getter generate)
  (slot neighbors-buffer <Buffer>   getter generate)
  (slot lightmap-buffer  <Buffer>   getter generate)
  (slot array            <object>   accessors generate)
  (slot material         <Material> accessors generate)
  
  ;; debug
  (slot vertices-data <object> initialize #f accessors generate)
  (slot lightmap-data <object> initialize #f accessors generate)
  
  
  (method override (initialize self (material: material #f))
    (set! self.vertices-buffer (new Buffer))
    (set! self.neighbors-buffer (new Buffer))
    (set! self.lightmap-buffer (new Buffer))
    (set! self.array #f)
    (set! self.material material))
  
  
  (method public (empty? self)
    (empty? vertices-buffer))
  
  
  (method public (count-floats self)
    (+ (or (get-floats vertices-buffer) 0)
       @need-to-adjust-debug-info-calculations
       (or (get-floats neighbors-buffer) 0)
       @need-to-adjust-debug-info-calculations
       (or (get-floats lightmap-buffer) 0)))
  
  
  (method public (setup-array self (program #f))
    (define (warn msg)
      @w
      (terminal msg))
    
    (define (determine-program)
      ;; quick hack
      (if (not material)
          (begin
            (warn "No material")
            #f)
        (let ((renderer (get-renderer material)))
          ;; quick hack
          (if (not renderer)
              (begin
                (warn (format "No renderer in {s}" material))
                #f)
            (let ((program (get-program renderer)))
              ;; quick hack
              (if (not program)
                  (begin
                    (warn "No program")
                    #f)
                program))))))
    
    (let ((program (or program (determine-program))))
      (when program
        (set! array (create-array program self)))))

  
  (method public (draw self)
    (draw vertices-buffer))
  
  
  (method public (draw-array self)
    (glBindVertexArray array)
    (glDrawArrays GL_TRIANGLES 0 (get-indices vertices-buffer))
    (glBindVertexArray 0))
  
  
  (method public (allocate-vertices self)
    (generate-buffer vertices-buffer))
  
  (method public (allocate-neighbors self)
    (generate-buffer neighbors-buffer))
  
  (method public (allocate-lightmap self)
    (generate-buffer lightmap-buffer))
  
  
  (method public (free-vertices self)
    (free-buffer vertices-buffer))
  
  (method public (free-neighbors self)
    (free-buffer neighbors-buffer))
  
  (method public (free-lightmap self)
    (free-buffer lightmap-buffer))
  
  
  (method public (free-resources self)
    (free-vertices self)
    (free-neighbors self)
    (free-lightmap self))
  
  
  (method override (destroy self)
    (free-resources self))))
