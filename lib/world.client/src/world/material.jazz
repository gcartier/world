;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Materials
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.material jazz


(import (jazz.opengl)
        (jazz.opengl.texture)
        (world.texture))


;;;
;;;; Material
;;;


(class Material extends Object
  
  
  (slot name         <object>         accessors generate)
  (slot ambient      <f32vector+>     accessors generate)
  (slot diffuse      <f32vector+>     accessors generate)
  (slot specular     <f32vector+>     accessors generate)
  (slot emissive     <f32vector+>     accessors generate)
  (slot shininess    <fl+>            accessors generate)
  (slot transparency <fl+>            accessors generate)
  (slot mode         <fx+>            accessors generate)
  (slot atlas        <object>         accessors generate)
  (slot texture-name <string+>        accessors generate)
  (slot texture      <Image-Texture+> accessors generate)
  (slot alphamap     <string+>        accessors generate)
  (slot renderer     <object>         accessors generate)
  
  
  (method override (initialize self (name: name #f)
                               (ambient: ambient #f)
                               (diffuse: diffuse #f)
                               (specular: specular #f)
                               (emissive: emissive #f)
                               (shininess: shininess #f)
                               (transparency: transparency #f)
                               (mode: mode #f)
                               (atlas: atlas #f)
                               (texture-name: texture-name #f)
                               (texture: texture #f)
                               (alphamap: alphamap #f)
                               (renderer: renderer #f))
    (set! self.name name)
    (set! self.ambient ambient)
    (set! self.diffuse diffuse)
    (set! self.specular specular)
    (set! self.emissive emissive)
    (set! self.shininess shininess)
    (set! self.transparency transparency)
    (set! self.mode mode)
    (set! self.atlas atlas)
    (set! self.texture-name texture-name)
    (set! self.texture texture)
    (set! self.alphamap alphamap)
    (set! self.renderer renderer))
  
  
  (method override (print self output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{a}" name)))))


;;;
;;;; Copy
;;;


(definition public (copy-material mat)
  (new Material
    name: (get-name mat)
    ambient: (get-ambient mat)
    diffuse: (get-diffuse mat)
    specular: (get-specular mat)
    emissive: (get-emissive mat)
    shininess: (get-shininess mat)
    transparency: (get-transparency mat)
    mode: (get-mode mat)
    atlas: (get-atlas mat)
    texture: (get-texture mat)
    alphamap: (get-alphamap mat)
    renderer: (get-renderer mat))))
