;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Materials
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is WorldScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2014
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See http://github.com/gcartier/world for details.


(module world.material jazz


(import (jazz.graphic.opengl.glew)
        (world.support)
        (world.texture))


;;;
;;;; Material
;;;


(class Material extends Object
  
  
  (slot name         <string+>       accessors generate)
  (slot ambient      <f32vector+>    accessors generate)
  (slot diffuse      <f32vector+>    accessors generate)
  (slot specular     <f32vector+>    accessors generate)
  (slot emissive     <f32vector+>    accessors generate)
  (slot shininess    <fl+>           accessors generate)
  (slot transparency <fl+>           accessors generate)
  (slot mode         <fx+>           accessors generate)
  (slot atlas        <object>        accessors generate)
  (slot texture-name <string+>       accessors generate)
  (slot texture      <Image-Texture> accessors generate)
  (slot alphamap     <string+>       accessors generate)
  (slot renderer     <object>        accessors generate)
  
  
  (method override (initialize (name: name #f)
                               (ambient: ambient #f)
                               (diffuse: diffuse #f)
                               (specular: specular #f)
                               (emissive: emissive #f)
                               (shininess: shininess #f)
                               (transparency: transparency #f)
                               (mode: mode #f)
                               (atlas: atlas #f)
                               (texture-name: texture-name #f)
                               (texture: texture #f)
                               (alphamap: alphamap #f)
                               (renderer: renderer #f))
    (set! name~self name)
    (set! ambient~self ambient)
    (set! diffuse~self diffuse)
    (set! specular~self specular)
    (set! emissive~self emissive)
    (set! shininess~self shininess)
    (set! transparency~self transparency)
    (set! mode~self mode)
    (set! atlas~self atlas)
    (set! texture-name~self texture-name)
    (set! texture~self texture)
    (set! alphamap~self alphamap)
    (set! renderer~self renderer))
  
  
  (method override (print output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{a}" name)))))


;;;
;;;; Copy
;;;


(definition public (copy-material mat)
  (new Material
    name: (get-name~ mat)
    ambient: (get-ambient~ mat)
    diffuse: (get-diffuse~ mat)
    specular: (get-specular~ mat)
    emissive: (get-emissive~ mat)
    shininess: (get-shininess~ mat)
    transparency: (get-transparency~ mat)
    mode: (get-mode~ mat)
    atlas: (get-atlas~ mat)
    texture: (get-texture~ mat)
    alphamap: (get-alphamap~ mat)
    renderer: (get-renderer~ mat))))
