;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; World Materials
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2013
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.material jazz


(import (world.texture))


(definition public (copy-material mat)
  (new Material
    name: (get-name~ mat)
    ambient: (get-ambient~ mat)
    diffuse: (get-diffuse~ mat)
    specular: (get-specular~ mat)
    emissive: (get-emissive~ mat)
    shininess: (get-shininess~ mat)
    transparency: (get-transparency~ mat)
    mode: (get-mode~ mat)
    atlas: (get-atlas~ mat)
    texture: (get-texture~ mat)
    alphamap: (get-alphamap~ mat)
    renderer: (get-renderer~ mat)))


;;;
;;;; Material
;;;


(class Material extends Object
  
  
  (slot name         <string+>       accessors generate)
  (slot ambient      <f32vector+>    accessors generate)
  (slot diffuse      <f32vector+>    accessors generate)
  (slot specular     <f32vector+>    accessors generate)
  (slot emissive     <f32vector+>    accessors generate)
  (slot shininess    <fl+>           accessors generate)
  (slot transparency <fl+>           accessors generate)
  (slot mode         <fx+>           accessors generate)
  (slot atlas        <object>        accessors generate)
  (slot texture-name <string+>       accessors generate)
  (slot texture      <Image-Texture> accessors generate)
  (slot alphamap     <string+>       accessors generate)
  (slot renderer     <object>        accessors generate)
  
  
  (method override (initialize (name: name #f)
                               (ambient: ambient #f)
                               (diffuse: diffuse #f)
                               (specular: specular #f)
                               (emissive: emissive #f)
                               (shininess: shininess #f)
                               (transparency: transparency #f)
                               (mode: mode #f)
                               (atlas: atlas #f)
                               (texture-name: texture-name #f)
                               (texture: texture #f)
                               (alphamap: alphamap #f)
                               (renderer: renderer #f))
    (set! name~self name)
    (set! ambient~self ambient)
    (set! diffuse~self diffuse)
    (set! specular~self specular)
    (set! emissive~self emissive)
    (set! shininess~self shininess)
    (set! transparency~self transparency)
    (set! mode~self mode)
    (set! atlas~self atlas)
    (set! texture-name~self texture-name)
    (set! texture~self texture)
    (set! alphamap~self alphamap)
    (set! renderer~self renderer))
  
  
  (method override (print output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{a}" name))))))
