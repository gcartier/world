;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Tracking
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;    Alain Marcotte


;; NOTES
;; - replace last-point and last-time by using last-mouses
;; - could we more generally, hook at the camera change and smooth every camera change!?
;;   - hummm not so sure anymore. moving the mouse is a jerky process, whereas the other camera jerkyness
;;   - are probably more due to bugs that should be identified and corrected. if that's the case then rename to mouse-smoothing
;; - going horizontal, waiting a bit like .2 and going down looks really bad. need something more continuous than only considering scalar < 0
;; - we should take the angle between the movements instead of the scalar product so we can do a test like (> 30 degree) for example


;; BUG
;; - the code at the moment has a major bug that can be made very apparent by making max-moves very large like 250
;;   and then moving the mouse in a line, stopping, waiting some time and then moving just a tiny bit which will generate
;;   a crazy unrelated mouse move (note that this bug happens all the time on windows with raw input as for some reason on
;;   mouse up we get a last input message where the delta is zero. so moving, waiting a bit and releasing the mouse triggers
;;   the bug). i have tracked the bug to (/ elapse time-delta) which becomes crazy large and decided to give up for now
;; - the code is also at the moment really not usable because of the insane amount of memory it
;;   generates which is made very apparent with a high dpi mouse using windows raw input


(module world.track jazz


(import (world)
        (world.autoload))


(definition last-x
  0.)

(definition last-y
  0.)


(definition public (track-down)
  )


(definition public (track-start x y)
  (set! last-x x)
  (set! last-y y))


(definition public (track-move world x y)
  (let ((dx (- x last-x))
        (dy (- y last-y)))
    (set! last-x x)
    (set! last-y y)
    (mouse-track world dx dy)))


@needs-a-lot-more-work (


(definition camera-smoothing? <bool>
  #t)

(definition public (get-camera-smoothing?) <bool>
  camera-smoothing?)

(definition public (set-camera-smoothing? flag <bool>)
  (set! camera-smoothing? flag))


(definition ppond <fl>
  1.)


(definition protected last-point
  #f)

(definition protected last-time
  #f)

(definition protected last-mouses
  '())


(definition public (track-down)
  (set! last-mouses '()))


(definition public (track-start x y)
  (set! last-point (new Point$fl$ x y))
  (set! last-time (current-monotonic)))


(definition public (track-move world x y)
  (let ((new-point (new Point$fl$ x y))
        (new-time (current-monotonic)))
    (track-mouse world new-point new-time)
    (set! last-point new-point)
    (set! last-time new-time)
    (when camera-smoothing?
      (let ((max-moves 5))
        (set! last-mouses (cons (cons new-point new-time) last-mouses))
        (when (> (length last-mouses) max-moves)
          (set-cdr! (tail last-mouses (- max-moves 1)) '()))))))


(definition (track-mouse world new-point new-time)
  (define (scalarproduct a <Point$fl$> b <Point$fl$>) <fl>
    (+ (* (get-h a) (get-h b)) (* (get-v a) (get-v b))))
  
  (let ((poschange (nu- new-point last-point))
        (elapse (- new-time last-time)))
    ;; a try for moving the mouse, waiting a long time and starting again can behave a bit strangely because of large elapse
    (when (> elapse .25)
      (set! last-mouses '()))
    (let ((delta (if (or (not camera-smoothing?) (null? last-mouses))
                     poschange
                   (let ((dirchange (if (null? (cdr last-mouses)) -1. (scalarproduct (cast <Point$fl$> poschange) (cast <Point$fl$> (nu- last-point (caadr last-mouses)))))))
                     ;; can still be a bit jerky when going from .5 to 1. all of a sudden
                     (let ((ponderation (if (and (< (norm poschange) 25.)
                                                 (>= dirchange 0.))
                                            .5
                                          1.)))
                       (when (/= ponderation ppond)
                         (set! ppond ponderation))
                       (bind (furthest-point . furthest-time) (last last-mouses)
                         (let ((time-delta (- new-time furthest-time)))
                           (if (= time-delta 0.)
                               poschange
                             (nu+ (nu* (nu- new-point furthest-point) (* (/ elapse time-delta) (- 1. ponderation)))
                                  (nu* poschange ponderation))))))))))
      (let ((dx (get-h delta))
            (dy (get-v delta)))
        (mouse-track world dx dy)))))


@move-experiment
(let ((poschange (nu- new-point last-point))
      (elapse (- new-time last-time)))
  (let ((delta (if (null? last-mouses)
                   poschange
                 (let ((dirchange (if (null? (cdr last-mouses)) -1. (scalarproduct poschange (nu- last-point (caadr last-mouses))))))
                   (let ((ponderation (if (and (< (norm poschange) 5.)
                                               (>= dirchange 0.))
                                          .5
                                        1.)))
                     (bind (furthest-point . furthest-time) (last last-mouses)
                       (nu+ (nu* (nu- new-point furthest-point) (* (/ elapse (- new-time furthest-time)) (- 1. ponderation)))
                            (nu* poschange ponderation))))))))
    (let ((dx (get-h delta))
          (dy (get-v delta)))
      (mouse-track dx dy))))))
