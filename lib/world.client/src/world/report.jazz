;;;============
;;;  Together
;;;============
;;;
;;;; Client Reports
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.report jazz


(import (jazz.io)
        (jazz.pack)
        (world)
        (world.context))


(definition reports-directory
  {Directory Settings "work" "reports"})

(definition reports-remote
  (cond-expand
    (devel  "http://logs.togethersphere.com/devel/reports")
    (trial  "http://logs.togethersphere.com/trial/reports")
    (test   "http://logs.togethersphere.com/test/reports")
    (triage "http://logs.togethersphere.com/triage/reports")
    (stable "http://logs.togethersphere.com/stable/reports")
    (stage  "http://logs.togethersphere.com/stage/reports")
    (prod   "http://logs.togethersphere.com/prod/reports")))


(definition send-directory
  {Directory Settings "work" "send"})


(definition public (send-reports (feedback?: feedback? #t))
  (let ((world (and feedback? (current-world)))
        (curl (curl-path)))
    (define (normalize-file file)
      (let ((name (get-name file)))
        (if (find name #\space)
            (let ((brother-name (substitute #\space #\_ name)))
              (let ((brother (new-brother file brother-name)))
                (rename file brother)
                brother))
          file)))
    
    (define (send-unsent unsent rank total)
      (for-each (lambda (report)
                  (when feedback?
                    (working-progress world (format "Sending logs ({a} of {a})" (+ rank 1) total) #f))
                  (send-report report)
                  (increase! rank))
                unsent))
    
    (define (send-report report)
      (let ((report (normalize-file report)))
        (let ((port (open-process
                      (list
                        path: curl
                        arguments: (list "--silent" "-T" (parse report) "-H" "Content-Type: text/plain" (string-append reports-remote "/" (get-name report)))
                        show-console: #f))))
          (let ((status (process-status port)))
            (when (= status 0)
              (delete report))))))
    
    (define (send-dirs dirs rank total)
      (for-each (lambda (dir)
                  (when feedback?
                    (working-progress world (format "Sending logs ({a} of {a})" (+ rank 1) total) #f))
                  (send-dir dir)
                  (increase! rank))
                dirs))
    
    (define (send-dir dir)
      (create-directories send-directory)
      (let ((report (new-file send-directory (add-extension (get-name dir) "report"))))
        (pack-directory dir report)
        (delete dir)
        (send-report report)))
    
    (define (collect-unsent)
      (let ((queue (new-queue)))
        (when (exists? send-directory)
          (iterate-directory send-directory
            (lambda (file)
              (when (extension=? (get-extension file) "report")
                (enqueue queue file)))
            files?: #t
            directories?: #f
            recursive?: #f))
        (queue-list queue)))
    
    (define (collect-dirs)
      (let ((queue (new-queue)))
        (when (exists? reports-directory)
          (iterate-directory reports-directory
            (lambda (dir)
              (let ((name (get-name dir)))
                (when (or (starts-with? name "profile_")
                          (starts-with? name "replay_"))
                  (enqueue queue dir))))
            files?: #f
            directories?: #t
            recursive?: #f))
        (queue-list queue)))
    
    (let ((unsent (collect-unsent))
          (dirs (collect-dirs)))
      (let ((total (+ (length unsent) (length dirs))))
        (define (send-all)
          (send-unsent unsent 0 total)
          (send-dirs dirs (length unsent) total))
        
        (when (> total 0)
          (if (not feedback?)
              (send-all)
            (working world
              (lambda ()
                (send-all)))))))))


;;;
;;;; Curl
;;;


(cond-expand
  (windows
   (definition public (curl-path)
     (parse {File Build "curl.exe"})))
  (else
   (definition public (curl-path)
     "/usr/bin/curl"))))
