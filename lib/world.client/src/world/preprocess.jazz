;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; Stream Preprocess
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.preprocess jazz


(import (jazz.io)
        (jazz.stream)
        (jazz.stream.syntax (phase syntax))
        (world)
        (world.audio)
        (world.context)
        (world.settings)
        (world.stream)
        (world.streaming)
        (world.video))


(definition public (preprocess-directory dir (what: what #f) (profile: profile #f) (denoise?: denoise? #f) (prime?: prime? #f) (dry?: dry? #f) (feedback?: feedback? #t) (feedback: feedback #f))
  (iterate-directory dir
    (lambda (file)
      (preprocess-file file what: what profile: profile denoise?: denoise? prime?: prime? dry?: dry? feedback?: feedback? feedback: feedback))
    files?: #t;
    directories?: #f
    recursive?: #t))


(definition public (preprocess-file file (what: what #f) (profile: profile #f) (denoise?: denoise? #f) (prime?: prime? #f) (skip: skip #f) (dry?: dry? #f) (feedback?: feedback? #t) (feedback: feedback #f) (force?: force? #f))
  (let ((profile (and profile (name->video-profile profile))))
    (define (maybe-audio file)
      (define (maybe-profile)
        (let ((media-file (media-brother file 'audio profile)))
          (when (or (not (exists? media-file)) force?)
            (if dry?
                (terminal 'audio file)
              (preprocess-audio file media-file profile denoise? feedback? feedback)))))
      
      (define (maybe-prime)
        (let ((info (discover-audio file)))
          (when info
            (bind (media-type bitrate sample_rate channels caps) info
              (define (determine-codec media-type)
                (cond ((equal? media-type "audio/mpeg")
                       'aac)
                      (else
                       (error "Unsupported media type: {a}" media-type))))
              
              (let ((codec (determine-codec media-type)))
                (let ((media-file (media-brother file 'audio profile)))
                  (when (or (not (exists? media-file)) force?)
                    (if dry?
                        (terminal 'audio file)
                      (preprocess-prime-audio file media-file profile codec feedback? feedback)))))))))
      
      (if prime?
          (maybe-prime)
        (maybe-profile)))
    
    (define (maybe-video file)
      (define (maybe-profile profile)
        (let ((media-file (media-brother file 'video profile)))
          (when (or (not (exists? media-file)) force?)
            (if dry?
                (terminal 'video file (get-name profile))
              (preprocess-video file media-file profile feedback? feedback)))))
      
      (define (maybe-prime)
        (let ((info (discover-video file)))
          (when info
            (bind (media-type resolution framerate bitrate caps) info
              (define (determine-codec media-type)
                (cond ((equal? media-type "video/x-h264")
                       'h264)
                      (else
                       (error "Unsupported media type: {a}" media-type))))
              
              (let ((codec (determine-codec media-type)))
                (define (resolution->area resolution)
                  (cast <fl> (* (get-width resolution) (get-height resolution))))
                
                (let ((area (resolution->area resolution)))
                  (define (estimate-profile info)
                    (car (sort < (table-values video-profile-names)
                           key: (lambda (profile)
                                  (let ((profile-area (resolution->area (get-resolution profile))))
                                    (abs (- area profile-area)))))))
                  
                  (let ((profile (estimate-profile info)))
                    (let ((media-file (media-brother file 'video profile)))
                      (when (or (not (exists? media-file)) force?)
                        (if dry?
                            (terminal 'video file (get-name profile))
                          (preprocess-prime-video file media-file profile resolution framerate bitrate codec feedback? feedback skip)))))))))))
      
      (if prime?
          (maybe-prime)
        (if profile
            (maybe-profile profile)
          (loop (for level from 0 to (video-profile-level))
                (maybe-profile (level->video-profile level))))))
    
    (let ((ext (get-extension file)))
      (cond ((member? (get-extension file) '("m4v" "mp4" "mov" "webm" "wav") test: extension=?)
             (case what
               ((audio)
                (maybe-audio file))
               ((video)
                (maybe-video file))
               (else
                (maybe-audio file)
                (maybe-video file))))))))


(definition public (preprocess-audio file media-file profile denoise? feedback? feedback)
  (let ((media-file (or media-file (media-brother file 'audio profile))))
    (let ((src (new File-Preprocess-Audio-Src
                 (parse file))))
      (preprocess-media file media-file src "audio" 'audio #f #f #f #f 'vorbis feedback? feedback)
      (thread-join! (get-thread (get-task src))))))


(definition public (preprocess-prime-audio file media-file profile codec feedback? feedback)
  (let ((media-file (or media-file (media-brother file 'audio profile))))
    (let ((src (new File-Preprocess-Audio-Src
                 (parse file)
                 prime?: #t)))
      (preprocess-media file media-file src "audio" 'audio #f #f #f #f codec feedback? feedback)
      (thread-join! (get-thread (get-task src))))))


(definition public (preprocess-video file media-file profile feedback? feedback)
  (let ((media-file (or media-file (media-brother file 'video profile)))
        (level (get-level profile))
        (resolution (get-resolution profile))
        (framerate (get-framerate profile))
        (bitrate (get-bitrate profile))
        (codec (get-codec profile)))
    (let ((src (new File-Preprocess-Video-Src
                 (parse file)
                 level: level
                 resolution: resolution
                 framerate: framerate
                 bitrate: bitrate
                 codec: codec)))
      (preprocess-media file media-file src (format "video {a}" (get-name profile)) 'video level resolution framerate bitrate codec feedback? feedback)
      (thread-join! (get-thread (get-task src))))))


(definition public (preprocess-prime-video file media-file profile resolution framerate bitrate codec feedback? feedback skip)
  (let ((media-file (or media-file (media-brother file 'video profile)))
        (level (get-level profile)))
    (let ((src (new File-Preprocess-Video-Src
                 (parse file)
                 prime?: #t
                 level: level
                 resolution: resolution
                 framerate: framerate
                 bitrate: bitrate
                 codec: codec)))
      (preprocess-media file media-file src (format "video {a}" (get-name profile)) 'video level resolution framerate bitrate codec feedback? feedback skip)
      (thread-join! (get-thread (get-task src))))))


(definition (preprocess-media file media-file src suffix kind level resolution framerate bitrate codec feedback? feedback (skip #f))
  (let ((preprocess-pipeline #f)
        (preprocess-writer #f)
        (start-time #f)
        (eos? #f)
        (count 0))
    (define (play-pipeline)
      (set! start-time (current-seconds))
      (play preprocess-pipeline)
      (when feedback?
        (if feedback
            (feedback 'start file suffix)
          (format :terminal "{a} ({a})" (get-name file) suffix))))
    
    (define (pipeline-output buffer dts pts duration keyframe?)
      (when (and skip keyframe?)
        (if (= skip 0)
            (set! skip #f)
          (decrease! skip)))
      (when (not preprocess-writer)
        (set! preprocess-writer (new Stream-Writer media-file kind level resolution framerate bitrate codec)))
      (unless skip
        (write-frame preprocess-writer buffer dts pts duration keyframe?)
        (when (and feedback? (= (modulo count 100) 0))
          (if feedback
              (feedback 'progress file suffix)
            (format :terminal ".")))
        (increase! count)))
    
    (define (pipeline-eos)
      (unless eos?
        (set! eos? #t)
        (when preprocess-writer
          (maybe-add-metadata)
          (close preprocess-writer))
        (release preprocess-pipeline)
        (when feedback?
          (if feedback
              (feedback 'end file suffix)
            (format :terminal "({a}){%}" (present-seconds (- (current-seconds) start-time)))))))
    
    (define (maybe-add-metadata)
      (typecase src
        ((File-Preprocess-Audio-Src)
         (with-unref ((appsink (gst_bin_get_by_name (get-pipeline src) "appsink")))
           (with-unref ((pad (gst_element_get_static_pad appsink "sink")))
             (let ((caps (gst_pad_get_current_caps pad)))
               (let ((caps-string (gst_caps_to_string caps)))
                 (set-caps preprocess-writer caps-string))
               (gst_caps_unref caps)))))
        ((File-Preprocess-Video-Src)
         (with-unref ((appsink (gst_bin_get_by_name (get-pipeline src) "appsink")))
           (with-unref ((pad (gst_element_get_static_pad appsink "sink")))
             (let ((caps (gst_pad_get_current_caps pad)))
               (let ((caps-string (gst_caps_to_string caps)))
                 (set-caps preprocess-writer caps-string)
                 (let ((struc (gst_caps_get_structure caps 0)))
                   (let ((width (gst_structure_get_int struc "width"))
                         (height (gst_structure_get_int struc "height")))
                     (set-resolution preprocess-writer (new Dimension width height)))))
               (gst_caps_unref caps)))))))
    
    (let ((sink (new Stream-Consumer
                  consumer: (lambda (buffer dts pts duration keyframe?)
                              (if buffer
                                  (pipeline-output buffer dts pts duration keyframe?)
                                (pipeline-eos))))))
      (set! preprocess-pipeline (pipeline (list src sink)))
      (play-pipeline))))


(definition (media-brother file kind profile)
  (let ((extension (case kind
                     ((audio) "streamaudio")
                     ((video) (get-extension profile)))))
    (get-brother file (add-extension (get-base file) extension)))))
