;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; Stream Preprocess
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.preprocess jazz


(import (jazz.io)
        (jazz.stream)
        (world)
        (world.audio)
        (world.context)
        (world.settings)
        (world.streaming)
        (world.video))


(definition protected preprocess-level
  (world-setting 'world.preprocess-level 2))


(definition public (preprocess-directory dir (what: what #f) (profile: profile #f) (dry?: dry? #f))
  (iterate-directory dir
    (lambda (file)
      (preprocess-file file what: what profile: profile dry?: dry?))
    files?: #t;
    directories?: #f
    recursive?: #t))


(definition public (preprocess-file file (what: what #f) (profile: profile #f) (dry?: dry? #f) (force?: force? #f))
  (let ((profile (and profile (name->video-profile profile))))
    (define (maybe-audio file)
      (let ((media-file (media-brother file 'audio profile)))
        (when (or (not (exists? media-file)) force?)
          (if dry?
              (terminal 'audio file)
            (preprocess-audio file media-file profile)))))
    
    (define (maybe-video file)
      (define (maybe-profile profile)
        (let ((media-file (media-brother file 'video profile)))
          (when (or (not (exists? media-file)) force?)
            (if dry?
                (terminal 'video file (get-name profile))
              (preprocess-video file media-file profile)))))
      
      (if profile
          (maybe-profile profile)
        (loop (for level from 0 to preprocess-level)
              (maybe-profile (level->video-profile level)))))
    
    (define (maybe-image file)
      (let ((media-file (media-brother file 'video profile)))
        (when (or (not (exists? media-file)) force?)
          (if dry?
              (terminal 'video file)
            (preprocess-image file media-file profile)))))
    
    (let ((ext (get-extension file)))
      (cond ((member? ext '("jpg" "jpeg" "png") test: extension=?)
             (maybe-image file))
            ((member? (get-extension file) '("mp4" "mov" "webm") test: extension=?)
             (case what
               ((audio)
                (maybe-audio file))
               ((video)
                (maybe-video file))
               (else
                (maybe-audio file)
                (maybe-video file))))))))


(definition public (preprocess-audio file media-file profile)
  (let ((media-file (or media-file (media-brother file 'audio profile))))
    (let ((src (new File-Preprocess-Audio-Src
                 (parse file))))
      (preprocess-media file media-file src "audio")
      (thread-join! (get-thread (get-audio-task src))))))


(definition public (preprocess-video file media-file profile)
  (let ((media-file (or media-file (media-brother file 'video profile))))
    (let ((src (new File-Preprocess-Video-Src
                 (parse file)
                 resolution: (get-resolution profile)
                 framerate: (get-framerate profile)
                 bitrate: (get-bitrate profile))))
      (preprocess-media file media-file src (format "video {a}" (get-name profile)))
      (thread-join! (get-thread (get-task src))))))


(definition public (preprocess-image file media-file profile)
  (let ((media-file (or media-file (media-brother file 'video profile))))
    (let ((src (new Image-Stream-Video-Src
                 (get-name file))))
      (preprocess-media file media-file src "image")
      (thread-join! (get-thread (get-task src))))))


(definition (preprocess-media file media-file src suffix)
  (let ((preprocess-pipeline #f)
        (preprocess-output #f)
        (temporary (make-u8vector 8))
        (start-time #f)
        (eos? #f)
        (count 0))
    (define (play-pipeline)
      (set! start-time (current-seconds))
      (play preprocess-pipeline)
      (terminal-string (format "{a} ({a})" (get-name file) suffix)))
    
    (define (pipeline-output buffer timestamp duration)
      (unless preprocess-output
        (set! preprocess-output (open-output-file (path-settings media-file))))
      (put-s64 temporary 0 timestamp)
      (write-subu8vector temporary 0 8 preprocess-output)
      (put-u64 temporary 0 duration)
      (write-subu8vector temporary 0 8 preprocess-output)
      (let ((size (u8vector-length buffer)))
        (write-32-bit-integer size preprocess-output)
        (write-subu8vector buffer 0 size preprocess-output))
      (when (= (modulo count 100) 0)
        (terminal-string "."))
      (increase! count))
    
    (define (pipeline-eos)
      (unless eos?
        (set! eos? #t)
        (close preprocess-output)
        (release preprocess-pipeline)
        (terminal-string (format "({a})" (present-seconds (- (current-seconds) start-time))))
        (terminal-newline)))
    
    (let ((sink (new Stream-Sink
                  consumer: (lambda (buffer timestamp duration)
                              (if buffer
                                  (pipeline-output buffer timestamp duration)
                                (pipeline-eos))))))
      (set! preprocess-pipeline (pipeline src sink))
      (play-pipeline))))


(definition (media-brother file kind profile)
  (let ((extension (case kind
                     ((audio) "streamaudio")
                     ((video) (get-extension profile)))))
    (get-brother file (add-extension (get-base file) extension)))))
