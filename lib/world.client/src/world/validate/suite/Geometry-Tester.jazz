;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; Geometry Tests
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2016
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module protected world.validate.suite.Geometry-Tester jazz


(import (jazz.jml)
        (jazz.validation)
        (world.geometry))


(class Geometry-Tester extends Tester
  
  
  (form
    (<install> title: "Geometry"))


  (method override (test self)
    (invoke self #f (~ test-vertex self))
    (invoke self #f (~ test-matrix self))
    (invoke self #f (~ test-cross-product self))
    (invoke self #f (~ test-ray-intersects-triangle? self))
    (invoke self #f (~ test-ray-intersects-sphere? self)))
  
  
  ;;;
  ;;;; vertex
  ;;;
  
  
  (method (test-vertex self)
    (success? (vertex=? (vertex 1. 2. 3.) (vertex 1. 2. 3.)))
    (success? (vertex=? (make-vertex) (vertex 0. 0. 0.)))
    (let ((v (vertex 1. 2. 3.)))
      (success? (= (vertex-x v) 1.))
      (success? (= (vertex-y v) 2.))
      (success? (= (vertex-z v) 3.))
      (vertex-x-set! v 10.)
      (vertex-y-set! v 20.)
      (vertex-z-set! v 30.)
      (success? (= (vertex-x v) 10.))
      (success? (= (vertex-y v) 20.))
      (success? (= (vertex-z v) 30.))
      (vertex! v 4. 5. 6.)
      (success? (= (vertex-x v) 4.))
      (success? (= (vertex-y v) 5.))
      (success? (= (vertex-z v) 6.))
      (vertex-copy! v (vertex 7. 8. 9.))
      (success? (= (vertex-x v) 7.))
      (success? (= (vertex-y v) 8.))
      (success? (= (vertex-z v) 9.)))
    ;; functional
    (success? (vertex=? (vertex+ (vertex 1. 2. 3.) (vertex 1. 2. 3.)) (vertex 2. 4. 6.)))
    (success? (vertex=? (vertex- (vertex 1. 2. 3.) (vertex 1. 2. 3.)) (vertex 0. 0. 0.)))
    (success? (vertex=? (vertex-negate (vertex 1. 2. 3.)) (vertex -1. -2. -3.)))
    (success? (vertex=? (vertex-scalar* (vertex 1. 2. 3.) 5.) (vertex 5. 10. 15.0)))
    (success? (= (vertex-norm (vertex 1. 0. 0.)) 1.))
    (success? (vertex=? (vertex-normalize (vertex 5. 0. 0.)) (vertex 1. 0. 0.)))
    (success? (= (vertex-distance (vertex 1. 0. 0.) (vertex 5. 0. 0.)) 4.))
    ;; destructive
    (let ((v (make-vertex)))
      (vertex+! v (vertex 1. 2. 3.) (vertex 1. 2. 3.))
      (success? (vertex=? v (vertex 2. 4. 6.)))
      (vertex-! v (vertex 1. 2. 3.) (vertex 1. 2. 3.))
      (success? (vertex=? v (vertex 0. 0. 0.)))
      (vertex! v 1. 2. 3.)
      (vertex-negate! v v)
      (success? (vertex=? v (vertex -1. -2. -3.)))
      (vertex! v 1. 2. 3.)
      (vertex-scalar*! v v 5.)
      (success? (vertex=? v (vertex 5. 10. 15.0)))
      (vertex! v 5. 0. 0.)
      (vertex-normalize! v v)
      (success? (vertex=? v (vertex 1. 0. 0.)))))
  
  
  ;;;
  ;;;; matrix
  ;;;
  
  
  (method (test-matrix self)
    (success? (matrix=? (matrix 1. 0. 0. 0.
                                0. 1. 0. 0.
                                0. 0. 1. 0.
                                0. 0. 0. 1.)
                        (make-identity-matrix)))
    (success? (matrix=? (matrix-multiply (make-identity-matrix) (make-identity-matrix)) (make-identity-matrix)))
    (let ((t (make-translation-matrix (vertex 1. 2. 3.))))
      (success? (matrix=? t (matrix 1. 0. 0. 1.
                                    0. 1. 0. 2.
                                    0. 0. 1. 3.
                                    0. 0. 0. 1.)))
      (make-identity-matrix! t)
      (success? (matrix=? t (make-identity-matrix))))
    (let ((p (make-perspective-matrix 45.0 1.5 1.0 30.0)))
      (matrix-copy! p (make-identity-matrix))
      (success? (matrix=? p (make-identity-matrix))))
    (let ((v (make-view-matrix (vertex 10. 2. 10.) (make-standard-lookat))))
      ))
  
  
  ;;;
  ;;;; cross-product
  ;;;


  (method (test-cross-product self)
    (let ((x (vertex 1. 0. 0.))
          (y (vertex 0. 1. 0.))
          (z (vertex 0. 0. 1.))
          (sight (vertex 0. 0. -1.))
          (up (vertex 0. 1. 0.))
          (right (vertex 1. 0. 0.)))
      ;; axis
      (success? (vertex=? (cross-product x y) z))
      (success? (vertex=? (cross-product y x) (vertex-negate z)))
      
      ;; lookat
      (success? (vertex=? (cross-product sight up) right))))
  
  
  ;;;
  ;;;; ray-intersects-triangle?
  ;;;
  
  
  (method (test-ray-intersects-triangle? self)
    (success? (ray-intersects-triangle? (vertex 0. 0. 0.) (vertex 0. 0. 1.) (vertex 0. 1. 1.) (vertex -1. -1. 1.) (vertex 1. -1. 1.)))
    (success? (not (ray-intersects-triangle? (vertex 0. 0. 0.) (vertex 0. 0. -1.) (vertex 0. 1. 1.) (vertex -1. -1. 1.) (vertex 1. -1. 1.))))
    (success? (ray-intersects-triangle? (vertex 0. 0. 0.) (vertex 0. 0. 1.) (vertex 0. 1. 1.) (vertex -1. 0. 1.) (vertex 1. 0. 1.)))
    (success? (not (ray-intersects-triangle? (vertex 0. 0. 0.) (vertex 0. 0. 1.) (vertex 0. 1. 1.) (vertex -1. 0.1 1.) (vertex 1. 0. 1.)))))
    
  
  ;;;
  ;;;; test-ray-intersects-sphere?
  ;;;

  
  (method (test-ray-intersects-sphere? self)
    (success? (ray-intersects-sphere? (vertex 0. 0. 0.) (vertex 0. 0. 1.) (vertex 0. 0. 1.) 1.))
    (success? (ray-intersects-sphere? (vertex 0. 0. 0.) (vertex 0. 0. -1.) (vertex 0. 0. 1.) 1.))
    (success? (not (ray-intersects-sphere? (vertex 0. 0. 0.) (vertex 0. 0. -1.) (vertex 0. 0. 1.) .9))))))
