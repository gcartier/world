;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Areas
;;;


(module world.area jazz


(import (jazz.geometry)
        (jazz.graphic)
        (jazz.graphic.opengl.glew)
        (jazz.io)
        (jazz.library)
        (jazz.literals)
        (jazz.media)
        (jazz.network)
        (jazz.platform)
        (jazz.platform.cairo)
        (jazz.runtime)
        (jazz.system)
        (jazz.ui)
        (jazz.ui.dialog)
        (jazz.ui.window)
        (time)
        (world.autoload)
        (world.actor)
        (world.block)
        (world.client.window)
        (world.foreign)
        (world.geometry)
        (world.history)
        (world.object)
        (world.sprite)
        (world.texture)
        (world.window))


;;;
;;;; Area
;;;


(class Area extends Object
  
  
  (slot index   <list>                getter generate)
  (slot actors  <list> initialize '() accessors generate)
  (slot blocks  <list> initialize '() accessors generate)
  (slot gadgets <list> initialize '() accessors generate)
  
  
  (method override (initialize index)
    (set! index~self index))
  
  
  (method override (print output readably)
    (print-unreadable self output
      (lambda (output)
        (let ((actors (length actors))
              (blocks (length blocks))
              (gadgets (length gadgets)))
          (format output
                  "{a}{a}{a}{a}"
                  (format "{l}{a}" index (if (or (/= actors 0) (/= blocks 0)) " with " ""))
                  (if (= actors 0) "" (format "{a} actor{a}" actors (format-plural actors)))
                  (if (= blocks 0) "" (format "{a}{a} block{a}" (if (= actors 0) "" ", ") blocks (format-plural blocks)))
                  (if (= gadgets 0) "" (format "{a}{a} gadget{a}" (if (and (= actors 0) (= blocks 0)) "" ", ") gadgets (format-plural gadgets))))))))))
