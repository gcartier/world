;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; Audio
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.audio jazz


(import (jazz.audio)
        (jazz.io)
        (jazz.syntax (phase syntax))
        (world)
        (world.autoload)
        (world.configure)
        (world.geometry)
        (world.settings)
        (world.support)
        (world.syntax (phase syntax))
        (world.task))


(definition public default-music-volume     1.)
(definition public default-ambience-volume  .1)
(definition public default-game-volume      .5)
(definition public default-interface-volume .5)


(definition public game-volume <fl+>
  #f)

(definition public (set-game-volume volume <fl+>)
  (set! game-volume volume))


(definition public interface-volume <fl+>
  #f)

(definition public (set-interface-volume volume <fl+>)
  (set! interface-volume volume))


(definition public sounds? <bool>
  #f)

(definition public (set-sounds? flag <bool>)
  (set! sounds? flag))


(definition public selection-sounds? <bool>
  #f)

(definition public (set-selection-sounds? flag <bool>)
  (set! selection-sounds? flag))


(definition protected (prepare-sounds)
  (set! game-volume (world-setting 'world.game-volume default-game-volume))
  (set! interface-volume (world-setting 'world.interface-volume default-interface-volume))
  (set! sounds? (world-setting 'world.sounds? #t))
  (set! selection-sounds? (world-setting 'world.selection-sounds? #t)))


;;;
;;;; Task
;;;


(definition public (audio-task task <Task>)
  (declare (proper-tail-calls))
  (with-task task
    (lambda (exit)
      (let (iter (previous (current-seconds)))
        (let ((time (current-seconds)))
          (let ((elapse (- time previous)))
            (unless (stopping?~ task)
              (site (audio on?: #t)
                (trace-task audio "A")
                (update-audio)))
            (let ((duration (- (current-seconds) time)))
              (task-sleep task audio-period duration exit))
            (iter time)))))))


;;;
;;;; Sound
;;;


(definition sounds
  (make-table test: equal?))


(definition protected (reset-sounds)
  (empty-table sounds))


(definition (cache-sound path)
  (or (table-ref sounds path #f)
      (let ((ckb (require-ckb-sound path)))
        (let ((sound (new-bank-sound ckb)))
          (table-set! sounds path sound)
          sound))))


(definition (require-ckb-sound path)
  (let ((world (current-world)))
    (continuation-capture
      (lambda (return)
        (iterate-assets~ world
          (lambda (assets)
            (let ((ckb (new-file~ (get-directory~ assets) (make-filename path "ckb"))))
              (when (exists?~ ckb)
                (continuation-return return ckb)))))
        (error "Unable to find ckb sound: {s}" path)))))


(definition public (play-3d-sound path pos)
  (when (and sounds? (neq? path 'none))
    (let ((sound (cache-sound path)))
      ;; quick try this should be an initialization
      (set-3d-attenuation 1. 50.)
      ;; quick try this should be updated when the player moves
      (let ((me (current-me)))
        (let ((position (get-position~ me))
              (lookat (get-lookat~ me)))
          (let ((lookingat (vertex+& position (get-sight~ lookat)))
                (up (get-up~ lookat)))
            (set-3d-listener
              (vertex-x position) (vertex-y position) (vertex-z position)
              (vertex-x lookingat) (vertex-y lookingat) (vertex-z lookingat)
              (vertex-x up) (vertex-y up) (vertex-z up)))))
      (set-volume~ sound game-volume)
      (set-3d-position~ sound (vertex-x pos) (vertex-y pos) (vertex-z pos))
      (set-3d-enabled~ sound #t)
      (play~ sound))))


(definition public (play-sound-file path (volume: volume #f))
  (when sounds?
    (let ((sound (cache-sound path)))
      (when volume
        (set-volume~ sound volume))
      (play~ sound))))


(definition public (play-game-sound path)
  (play-sound-file path volume: game-volume))


(definition public (play-interface-sound path)
  (play-sound-file path volume: interface-volume))


;;;
;;;; Steps
;;;


(definition categorized-steps
  #f)


(definition public (random-step kind)
  (random-element (table-ref (get-categorized-steps) kind)))


(definition (get-categorized-steps)
  (or categorized-steps
      (let ((steps (categorize-steps (collect-steps))))
        (set! categorized-steps steps)
        steps)))


(definition (categorize-steps steps)
  (let ((table (make-table test: eq?))
        (dirt (make-search-context "dirt" ignore-case?: #t))
        (grass (make-search-context "grass" ignore-case?: #t))
        (ladder (make-search-context "ladder" ignore-case?: #t))
        (snow (make-search-context "snow" ignore-case?: #t))
        (stone (make-search-context "stone" ignore-case?: #t))
        (water (make-search-context "water" ignore-case?: #t))
        (wood (make-search-context "wood" ignore-case?: #t)))
    (for-each (lambda (step)
                (cond ((search step dirt) (table-add table 'dirt step))
                      ((search step grass) (table-add table 'grass step))
                      ((search step ladder) (table-add table 'ladder step))
                      ((search step snow) (table-add table 'snow step))
                      ((search step stone) (table-add table 'stone step))
                      ((search step water) (table-add table 'water step))
                      ((search step wood) (table-add table 'wood step))
                      (else (error "Uncategorized step: {s}" step))))
              steps)
    table))


(definition (collect-steps)
  (let ((world (current-world)))
    (let ((queue (new-queue)))
      (iterate-assets~ world
        (lambda (assets)
          (let ((step-dir (new-directory~ (get-directory~ assets) '("sound" "step"))))
            (when (exists?~ step-dir)
              (iterate-directory~ step-dir
                (lambda (path kind)
                  (let ((path (join path "/")))
                    (when (extension=? (extract-extension path) "ckb")
                      (enqueue queue (string-append "sound/step/" (extract-spine path))))))
                full?: #f
                files?: #t
                directories?: #f)))))
      (queue-list queue)))))
