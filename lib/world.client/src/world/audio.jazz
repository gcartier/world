;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; Audio
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.audio jazz


(import (jazz.audio)
        (jazz.io)
        (jazz.syntax (phase syntax))
        (world)
        (world.autoload)
        (world.configure)
        (world.log)
        (world.support)
        (world.syntax (phase syntax))
        (world.task))


;;;
;;;; Task
;;;


(definition public (audio-task task <Task>)
  (declare (proper-tail-calls))
  (with-task task "audio" audio-id support-state
    (lambda (log-context exit)
      (let (iter (previous (current-seconds)))
        (let ((time (current-seconds)))
          (let ((elapse (- time previous)))
            (unless (task-stopping?)
              (site (audio on?: #t)
                (trace-task audio "A")
                (update-audio)))
            (let ((duration (- (current-seconds) time)))
              (task-sleep (- audio-rate duration) exit #f))
            (iter time)))))))


;;;
;;;; Steps
;;;


(definition categorized-steps
  #f)


(definition public (random-step kind)
  (random-element (table-ref (get-categorized-steps) kind)))


(definition (get-categorized-steps)
  (or categorized-steps
      (let ((steps (categorize-steps (collect-steps))))
        (set! categorized-steps steps)
        steps)))


(definition (categorize-steps steps)
  (let ((table (make-table test: eq?))
        (dirt (make-search-context "dirt" ignore-case?: #t))
        (grass (make-search-context "grass" ignore-case?: #t))
        (ladder (make-search-context "ladder" ignore-case?: #t))
        (snow (make-search-context "snow" ignore-case?: #t))
        (stone (make-search-context "stone" ignore-case?: #t))
        (water (make-search-context "water" ignore-case?: #t))
        (wood (make-search-context "wood" ignore-case?: #t)))
    (for-each (lambda (step)
                (cond ((search step dirt) (table-add table 'dirt step))
                      ((search step grass) (table-add table 'grass step))
                      ((search step ladder) (table-add table 'ladder step))
                      ((search step snow) (table-add table 'snow step))
                      ((search step stone) (table-add table 'stone step))
                      ((search step water) (table-add table 'water step))
                      ((search step wood) (table-add table 'wood step))
                      (else (error "Uncategorized step: {s}" step))))
              steps)
    table))


(definition (collect-steps)
  (let ((world (current-world)))
    (let ((queue (new-queue)))
      (iterate-assets~ world
        (lambda (assets)
          (let ((step-dir (new-directory~ (get-directory~ assets) '("sound" "step"))))
            (when (exists?~ step-dir)
              (iterate-directory~ step-dir
                (lambda (path kind)
                  (let ((path (join path "/")))
                    (when (extension=? (extract-extension path) "ckb")
                      (enqueue queue (string-append "sound/step/" (extract-spine path))))))
                full?: #f
                files?: #t
                directories?: #f)))))
      (queue-list queue)))))
