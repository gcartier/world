;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; World Window Manager
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2013
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.manager jazz


(import (jazz.geometry)
        (jazz.graphic)
        (jazz.graphic.opengl.autoload)
        (jazz.graphic.opengl.glew)
        (jazz.library)
        (jazz.literals)
        (jazz.platform)
        (jazz.platform.cairo)
        (jazz.ui)
        (jazz.ui.view)
        (jazz.ui.window)
        (world)
        (world.autoload)
        (world.interface)
        (world.interface.popup)
        (world.interface.tooltip)
        (world.profiling)
        (world.syntax (phase syntax)))


;;;
;;;; Popups
;;;


(definition popups-table
  (make-table test: eq?))

(definition (register-popup window popup)
  (table-set! popups-table window popup))

(definition (registered-popup window)
  (table-ref popups-table window #f))

(definition (unregister-popup window)
  (table-clear popups-table window))


(definition public (find-popup class)
  (continuation-capture
    (lambda (return)
      (iterate-table popups-table
        (lambda (window popup)
          ;; quick solution
          (unless (is? popup World-Tooltip)
            (let ((view (popup-guest window)))
              (when (is? view class)
                (continuation-return return window))))))
      #f)))

(definition public (popup-guest window)
  (let ((popup (registered-popup window)))
    (first-child~ (child~ popup 'border))))


;;;
;;;; Manager
;;;


(class World-Window-Manager extends Window-Manager
  
  
  (method override (popup origin-view <View> view <View> position/location (padding: padding #f) (alternate-position: alternate-position #f) (initiator: initiator #f) (class: class Popup) (border: border #f) (fade-speed: fade-speed #f) (effect: effect #f) (close-behavior: close-behavior #f))
    (let ((world (current-world)))
      (define (popup-view)
        (let ((interface (get-interface~ world)))
          (let ((size (+ (get-size~ view) {Dimension 2 2}))
                (border (or border (new Border-View name: 'border border-type: 'solid border-color: {Color red: .308 green: .381 blue: .448})))
                (window (popup~ (get-player~ origin-view) class close-behavior: close-behavior))
                (popup (new World-Popup parent: interface name: 'popup visible?: #f)))
            (set-initiator~ window (or initiator origin-view))
            (set-parent~ border popup)
            (set-position~ border {Point 0 0})
            (set-size~ border size)
            (if (is? position/location Point)
                (set-position~ popup position/location)
              (set-location~ popup position/location))
            (set-size~ popup size)
            (set-parent~ view border)
            (set-visible?~ view #t)
            (layout-view~ border)
            (register-popup window popup)
            (set-visible?~ popup #t)
            (unless (is? position/location Point)
              (layout-view~ interface))
            window)))
      
      (define (popup-tooltip)
        (let ((interface (get-interface~ world)))
          (define (position-tooltip)
            (let ((area (get-size~ interface))
                  (spacing 4)
                  (base (acquire~ interface origin-view {Point 0 0}))
                  (size (+ (get-size~ view) {Dimension 0 3})))
              (let ((position (nu+ base (new Point
                                          (- (center (get-width~ origin-view) (get-width~ size)))
                                          (if (< (get-v~ base) 100)
                                              (+ (get-height~ origin-view) spacing)
                                            (- (+ spacing (get-height~ size)))))))
                    (padding 0))
                (fit-within area (position/size->rect position size)))))
          
          (receive (position size) (position-tooltip)
            (let ((border (or border (new Border-View name: 'border border-type: 'raised)))
                  (window (popup~ (get-player~ origin-view) class close-behavior: close-behavior))
                  (popup (new World-Tooltip parent: interface name: 'popup visible?: #f)))
              (set-initiator~ window (or initiator origin-view))
              (set-parent~ border popup)
              (set-position~ border {Point 0 0})
              (set-size~ border size)
              (set-position~ popup position)
              (set-size~ popup size)
              (set-parent~ view border)
              (set-visible?~ view #t)
              (layout-view~ border)
              (register-popup window popup)
              (set-visible?~ popup #t)
              window))))
      
      (if (eq? class Tooltip)
          (popup-tooltip)
        (popup-view))))
  
  
  (method override (close-popups player (all?: all? #f) (exclude: exclude #f))
    )
  
  
  (method override (close-popup window)
    (let ((popup (registered-popup window)))
      (close~ popup)
      (unregister-popup window))
    (close~ window))))
