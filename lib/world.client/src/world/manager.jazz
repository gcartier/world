;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Window Manager
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.manager jazz


(import (jazz.component)
        (jazz.geometry)
        (jazz.graphic)
        (jazz.ui)
        (jazz.view)
        (jazz.window)
        (world)
        (world.context)
        (world.interface.panel)
        (world.interface.popup)
        (world.interface.tooltip))


;;;
;;;; Popups
;;;


(definition protected popups-table
  (make-table test: eq?))

(definition protected (register-popup window popup)
  (table-set! popups-table window popup))

(definition protected (registered-popup window)
  (table-ref popups-table window #f))

(definition protected (unregister-popup window)
  (table-clear popups-table window))


(definition public (find-popup class)
  (continuation-capture
    (lambda (return)
      (iterate-table popups-table
        (lambda (window popup)
          ;; quick solution
          (unless (is? popup World-Tooltip)
            (let ((view (first-child (child popup 'border))))
              (when (is? view class)
                (continuation-return return view))))))
      #f)))


;;;
;;;; Manager
;;;


(class World-Window-Manager extends Window-Manager
  
  
  (method override (popups-border self)
    1)
  
  
  (method override (popup self origin-view <View> view <View> position/location (padding: padding #f) (alternate-position: alternate-position #f) (initiator: initiator #f) (class: class Popup) (border: border #f) (fade-speed: fade-speed #f) (effect: effect #f) (close-behavior: close-behavior #f))
    (let ((interface (current-interface))
          (world (current-world)))
      (define (popup-view)
        (let ((size (+ (get-size view) {Dimension 2 2}))
              (border (or border (new Border-View name: 'border border-type: 'solid border-color: {Color red: .308 green: .381 blue: .448})))
              (window (popup (get-player origin-view) class close-behavior: close-behavior))
              (popup (new World-Popup parent: interface name: 'popup visible?: #f)))
          (set-initiator window (or initiator origin-view))
          (set-parent border popup)
          (set-position border {Point 0 0})
          (set-size border size)
          (if (is? position/location Point)
              (set-position popup (acquire (get-root origin-view) origin-view position/location))
            (set-location popup position/location))
          (set-size popup size)
          (set-parent view border)
          (set-visible? view #t)
          (layout-view border)
          (register-popup window popup)
          (set-visible? popup #t)
          (unless (is? position/location Point)
            (layout-view interface))
          window))
      
      (define (popup-tooltip)
        (define (position-tooltip)
          (let ((area (get-size interface))
                (spacing 4)
                (base (acquire interface origin-view {Point 0 0}))
                (size (+ (get-size view) {Dimension 0 3})))
            (let ((position (nu+ base
                                 ;; quick hack to make it horizontal
                                 (if (nu=? position/location {Point -1 -1})
                                     (new Point
                                       (if (< (get-h base) 100)
                                           (- (+ spacing (get-width size)))
                                         (+ (get-width origin-view) spacing))
                                       ;; quick hack for the history
                                       -27
                                       @wait
                                       (- (center (get-height origin-view) (get-height size))))
                                   (new Point
                                     (- (center (get-width origin-view) (get-width size)))
                                     (if (< (get-v base) 100)
                                         (+ (get-height origin-view) spacing)
                                       (- (+ spacing (get-height size))))))))
                  (padding 0))
              (fit-within area (position/size->rect position size)))))
        
        (bind-values (position size) (position-tooltip)
          (let ((border (or border (new Border-View name: 'border border-type: 'raised)))
                (window (popup (get-player origin-view) class close-behavior: close-behavior))
                (popup (new World-Tooltip parent: interface name: 'popup visible?: #f)))
            (set-initiator window (or initiator origin-view))
            (set-parent border popup)
            (set-position border {Point 0 0})
            (set-size border size)
            (set-position popup position)
            (set-size popup size)
            (set-parent view border)
            (set-visible? view #t)
            (layout-view border)
            (register-popup window popup)
            (set-visible? popup #t)
            window)))
      
      (if (eq? class Tooltip)
          (if (and (is? origin-view World-Panel) (tooltip-default-popup? origin-view))
              (nextmethod self origin-view view position/location padding: padding alternate-position: alternate-position initiator: initiator class: class border: border fade-speed: fade-speed effect: effect close-behavior: close-behavior)
            (popup-tooltip))
        (popup-view))))
  
  
  (method override (close-popup self window)
    (let ((popup (registered-popup window)))
      (close popup)
      (unregister-popup window))
    (close window))))
