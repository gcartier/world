;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Triangles
;;;


(module world.triangle jazz


(import (jazz.geometry)
        (jazz.graphic)
        (jazz.graphic.opengl.glew)
        (jazz.io)
        (jazz.library)
        (jazz.literals)
        (jazz.media)
        (jazz.network)
        (jazz.platform)
        (jazz.platform.cairo)
        (jazz.runtime)
        (jazz.system)
        (jazz.ui)
        (jazz.ui.dialog)
        (jazz.ui.window)
        (world)
        (world.foreign)
        (world.geometry)
        (world.plane)
        (world.polygon)
        (world.texture)
        (time))


(definition public (make-triangle normal v1 v2 v3 t1 t2 t3)
  (new Triangle normal v1 v2 v3 t1 t2 t3))


(definition public (make-smooth-triangle normal v1 v2 v3 t1 t2 t3 n1 n2 n3)
  (new Smooth-Triangle normal v1 v2 v3 t1 t2 t3 n1 n2 n3))


;;;
;;;; Triangle
;;;


(class Triangle extends Polygon
  
  
  (slot t1     initialize #f getter generate)
  (slot t2     initialize #f getter generate)
  (slot t3     initialize #f getter generate)
  (slot indice initialize #f accessors generate)
  
  
  (method override (initialize normal v1 v2 v3 t1 t2 t3)
    (nextmethod (vector v1 v2 v3) normal)
    (set! t1~self t1)
    (set! t2~self t2)
    (set! t3~self t3))
  
  
  (method public (get-v1)
    (vector-ref vertices 0))
  
  (method public (get-v2)
    (vector-ref vertices 1))
  
  (method public (get-v3)
    (vector-ref vertices 2))
  
  
  (method public (get-normal)
    (get-normal~ plane))
  
  (method public virtual (get-normal1)
    (get-normal~ plane))
  
  (method public virtual (get-normal2)
    (get-normal~ plane))
  
  (method public virtual (get-normal3)
    (get-normal~ plane))
  
  
  (method public (center-of-mass)
    (get-origin~ plane)))


;;;
;;;; Smooth-Triangle
;;;


(class Smooth-Triangle extends Triangle
  
  
  (slot n1 <f32vector> initialize #f getter generate)
  (slot n2 <f32vector> initialize #f getter generate)
  (slot n3 <f32vector> initialize #f getter generate)
  
  
  (method override (initialize normal v1 v2 v3 t1 t2 t3 n1 n2 n3)
    (nextmethod normal v1 v2 v3 t1 t2 t3)
    (set! n1~self n1)
    (set! n2~self n2)
    (set! n3~self n3))
  
  
  (method override (get-normal1)
    n1)
  
  (method override (get-normal2)
    n2)
  
  (method override (get-normal3)
    n3)))
