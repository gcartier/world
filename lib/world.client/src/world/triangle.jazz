;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; Triangles
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.triangle jazz


(import (jazz.math)
        (jazz.syntax (phase syntax))
        (gaea.geometry)
        (gaea.homogeneous)
        (world.polygon))


(proclaim (not check bounds)
          (warn optimizations))


(definition public (make-triangle element v1 v2 v3)
  (new Triangle element (vector v1 v2 v3)))


(definition public (make-smooth-triangle element v1 v2 v3 n1 n2 n3)
  (new Smooth-Triangle element (vector v1 v2 v3) n1 n2 n3))


;; use f64vector to bypass finite feature
(definition public (allocate-triangle element)
  (allocate Triangle
            (f64vector +nan.0 +nan.0 +nan.0)
            (f64vector +nan.0 +nan.0 +nan.0)
            element
            (vector (f64vector +nan.0 +nan.0 +nan.0)
                    (f64vector +nan.0 +nan.0 +nan.0)
                    (f64vector +nan.0 +nan.0 +nan.0))
            (make-fl)
            (make-fl)
            (make-fl)
            (make-fl)
            (make-fl)))


;;;
;;;; Triangle
;;;


(class Triangle extends Polygon
  
  
  (method override (triangle-count self) <fx>
    1)
  
  
  (method override (add-triangles self uv <f32vector> depth <fl> add)
    (let ((v1 (get-v1 self))
          (v2 (get-v2 self))
          (v3 (get-v3 self))
          (n1 (get-normal1 self))
          (n2 (get-normal2 self))
          (n3 (get-normal3 self)))
      (add v1 n1 0 1 0
           v2 n2 2 3 0
           v3 n3 4 5 0
           uv
           depth)))
  
  
  (method override (add-template-triangles self mesher x y z inverse? uv <f32vector> depth <fl> add)
    (let ((v1 (get-v1 self))
          (v2 (get-v2 self))
          (v3 (get-v3 self))
          (n1 (get-normal1 self))
          (n2 (get-normal2 self))
          (n3 (get-normal3 self)))
      (add mesher
           x y z
           v1 n1 0 1 0
           v2 n2 2 3 0
           v3 n3 4 5 0
           uv
           depth)))
  
  
  (method override (iterate-triangles self proc)
    (proc (get-v1 self)
          (get-v2 self)
          (get-v3 self)))
  
  
  (method override (iterate-vertices self proc)
    (proc (get-v1 self))
    (proc (get-v2 self))
    (proc (get-v3 self)))
  
  
  (method public (get-v1 self) <vertex>
    (vector-ref vertices 0))
  
  (method public (get-v2 self) <vertex>
    (vector-ref vertices 1))
  
  (method public (get-v3 self) <vertex>
    (vector-ref vertices 2))
  
  
  (method public virtual (get-normal1 self) <vertex>
    normal)
  
  (method public virtual (get-normal2 self) <vertex>
    normal)
  
  (method public virtual (get-normal3 self) <vertex>
    normal)
  
  
  (method override (assemble self element v1 v2 v3)
    (vertex-copy! (get-v1 self) v1)
    (vertex-copy! (get-v2 self) v2)
    (vertex-copy! (get-v3 self) v3)
    (nextmethod self element))
  
  
  (method override (need-polygon$ self) <void>
    (need-triangle$))
  
  
  (method override (return-polygon$ self)
    (return-triangle$ self))
  
  
  (method override (copy-polygon self) <Polygon>
    (allocate Triangle
              (copy-vertex origin)
              (copy-vertex normal)
              element
              (vector (copy-vertex (get-v1 self))
                      (copy-vertex (get-v2 self))
                      (copy-vertex (get-v3 self)))
              (flo radius)
              (flo data1)
              (flo data2)
              (flo data3)
              (flo data4)))
  
  
  (method override (flip-polygon self) <Polygon>
    (allocate Triangle
              (copy-vertex origin)
              (vertex-negate normal)
              element
              (vector (copy-vertex (get-v3 self))
                      (copy-vertex (get-v2 self))
                      (copy-vertex (get-v1 self)))
              (flo radius)
              (flo data1)
              (flo data2)
              (flo data3)
              (flo data4)))
  
  
  (method override (polygon-transform! self src <Triangle> matrix <matrix> inverse-matrix <matrix>) <void>
    (matrix-transform-3x4! origin matrix (get-origin src))
    (matrix-transform-3x4! (get-v1 self) matrix (get-v1 src))
    (matrix-transform-3x4! (get-v2 self) matrix (get-v2 src))
    (matrix-transform-3x4! (get-v3 self) matrix (get-v3 src))
    (matrix-transform-normal! normal inverse-matrix (get-normal src))
    (set! element (get-element src))
    (fl! radius (get-radius src))
    (fl! data1 (get-data1 src))
    (fl! data2 (get-data2 src))
    (fl! data3 (get-data3 src))
    (fl! data4 (get-data4 src))
    (unspecified))
  
  
  (method override (polygon-move! self vect <f64vector> offset <fx> matrix <matrix+>) <void>
    (let ((v1 (get-v1 self))
          (v2 (get-v2 self))
          (v3 (get-v3 self)))
      (matrix+-transform-3x4->offset! vect (+ offset 0) matrix origin)
      (matrix+-transform-3x4->offset! vect (+ offset 3) matrix v1)
      (matrix+-transform-3x4->offset! vect (+ offset 6) matrix v2)
      (matrix+-transform-3x4->offset! vect (+ offset 9) matrix v3)
      (f64vector-set! vect (+ offset 12) +nan.0)
      (f64vector-set! vect (+ offset 13) +nan.0)
      (f64vector-set! vect (+ offset 14) +nan.0)
      (f64vector-set! vect (+ offset 15) radius)
      (f64vector-set! vect (+ offset 16) data1)
      (f64vector-set! vect (+ offset 17) data2)
      (f64vector-set! vect (+ offset 18) data3)
      (f64vector-set! vect (+ offset 19) data4)))
  
  
  (method override (polygon-extract! self elem vect <f64vector> offset <fx> matrix <matrix+>) <void>
    (matrix+-transform-3x4-offset! origin matrix vect offset)
    (matrix+-transform-3x4-offset! (get-v1 self) matrix vect (+ offset 3))
    (matrix+-transform-3x4-offset! (get-v2 self) matrix vect (+ offset 6))
    (matrix+-transform-3x4-offset! (get-v3 self) matrix vect (+ offset 9))
    (polygon-normal! normal vertices)
    (set! element elem)
    (fl! radius (f64-ref (polygon-radius^ origin vertices)))
    (fl! data1 (f64vector-ref vect (+ offset 16)))
    (fl! data2 (f64vector-ref vect (+ offset 17)))
    (fl! data3 (f64vector-ref vect (+ offset 18)))
    (fl! data4 (f64vector-ref vect (+ offset 19)))
    (unspecified))
  
  
  (method protected (mesh-extract! self elem data <f32vector> offset <fx> matrix <matrix+>) <void>
    (matrix+-transform-3x4! (get-v1 self) matrix (vertex^ (f32vector-ref data (+ offset  0)) (f32vector-ref data (+ offset  1)) (f32vector-ref data (+ offset  2))))
    (matrix+-transform-3x4! (get-v2 self) matrix (vertex^ (f32vector-ref data (+ offset 10)) (f32vector-ref data (+ offset 11)) (f32vector-ref data (+ offset 12))))
    (matrix+-transform-3x4! (get-v3 self) matrix (vertex^ (f32vector-ref data (+ offset 20)) (f32vector-ref data (+ offset 21)) (f32vector-ref data (+ offset 22))))
    (vertex-copy! origin (center-of-mass^ vertices))
    (polygon-normal! normal vertices)
    (set! element elem)
    (f64! radius (f64-ref (polygon-radius^ origin vertices)))
    (unspecified)))


;;;
;;;; Smooth-Triangle
;;;


(class Smooth-Triangle extends Triangle
  
  
  (slot n1 <vertex> accessors generate)
  (slot n2 <vertex> accessors generate)
  (slot n3 <vertex> accessors generate)
  
  
  (method override (initialize self element vertices n1 n2 n3)
    (nextmethod self element vertices)
    (set! self.n1 n1)
    (set! self.n2 n2)
    (set! self.n3 n3))
  
  
  (method override (get-normal1 self)
    n1)
  
  (method override (get-normal2 self)
    n2)
  
  (method override (get-normal3 self)
    n3))


;;;
;;;; Pool
;;;


(definition (allocate-triangle$)
  (allocate-triangle #f))


(define-pool triangle$
  allocate-triangle$ Triangle)


(definition protected (make-triangle$ element v1 v2 v3) <Triangle>
  (let ((triangle (need-triangle$)))
    (assemble triangle element v1 v2 v3)
    triangle)))
