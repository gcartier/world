;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; Triangles
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.triangle jazz


(import (world.geometry)
        (world.polygon))


(definition public (make-triangle element v1 v2 v3)
  (new Triangle element (vector v1 v2 v3)))


(definition public (make-smooth-triangle element v1 v2 v3 n1 n2 n3)
  (new Smooth-Triangle element (vector v1 v2 v3) n1 n2 n3))


(definition public (dummy-triangle element)
  (allocate Triangle
            (vertex +nan.0 +nan.0 +nan.0)
            (vertex +nan.0 +nan.0 +nan.0)
            element
            (vector (vertex +nan.0 +nan.0 +nan.0)
                    (vertex +nan.0 +nan.0 +nan.0)
                    (vertex +nan.0 +nan.0 +nan.0))
            +nan.0
            +nan.0
            +nan.0
            +nan.0
            +nan.0))


;;;
;;;; Triangle
;;;


(class Triangle extends Polygon
  
  
  (method override (triangle-count) <fx>
    1)
  
  
  (method override (add-triangles uv <f32vector> depth <fl> add)
    (let ((v1 (get-v1))
          (v2 (get-v2))
          (v3 (get-v3))
          (n1 (get-normal1))
          (n2 (get-normal2))
          (n3 (get-normal3)))
      (add v1 n1 0 1 0
           v2 n2 2 3 0
           v3 n3 4 5 0
           uv
           depth)))
  
  
  (method override (iterate-triangles proc)
    (proc (get-v1)
          (get-v2)
          (get-v3)))
  
  
  (method override (iterate-vertices proc)
    (proc (get-v1))
    (proc (get-v2))
    (proc (get-v3)))
  
  
  (method public (get-v1)
    (vector-ref vertices 0))
  
  (method public (get-v2)
    (vector-ref vertices 1))
  
  (method public (get-v3)
    (vector-ref vertices 2))
  
  
  (method public virtual (get-normal1)
    normal)
  
  (method public virtual (get-normal2)
    normal)
  
  (method public virtual (get-normal3)
    normal)
  
  
  (method override (copy-polygon) <Polygon>
    (allocate Triangle
              (copy-vertex origin)
              (copy-vertex normal)
              element
              (vector (copy-vertex (get-v1))
                      (copy-vertex (get-v2))
                      (copy-vertex (get-v3)))
              radius
              data1
              data2
              data3
              data4))
  
  
  (method override (flip-polygon) <Polygon>
    (allocate Triangle
              (copy-vertex origin)
              (vertex-negate normal)
              element
              (vector (copy-vertex (get-v3))
                      (copy-vertex (get-v2))
                      (copy-vertex (get-v1)))
              radius
              data1
              data2
              data3
              data4))
  
  
  (method override (transform-polygon matrix <f64vector> inverse-matrix <f64vector>) <Polygon>
    (allocate Triangle
              (matrix-transform-3x4 matrix origin)
              (transform-normal normal inverse-matrix)
              element
              (vector (matrix-transform-3x4 matrix (get-v1))
                      (matrix-transform-3x4 matrix (get-v2))
                      (matrix-transform-3x4 matrix (get-v3)))
              radius
              data1
              data2
              data3
              data4))
  
  
  (method override (polygon-move! vect <f64vector> offset <fx> matrix <f64vector+>) <void>
    (let ((v1 (get-v1))
          (v2 (get-v2))
          (v3 (get-v3)))
      (matrix+-transform-3x4->offset! vect (+ offset 0) matrix origin)
      (matrix+-transform-3x4->offset! vect (+ offset 3) matrix v1)
      (matrix+-transform-3x4->offset! vect (+ offset 6) matrix v2)
      (matrix+-transform-3x4->offset! vect (+ offset 9) matrix v3)
      (f64vector-set! vect (+ offset 12) +nan.0)
      (f64vector-set! vect (+ offset 13) +nan.0)
      (f64vector-set! vect (+ offset 14) +nan.0)
      (f64vector-set! vect (+ offset 15) radius)
      (f64vector-set! vect (+ offset 16) data1)
      (f64vector-set! vect (+ offset 17) data2)
      (f64vector-set! vect (+ offset 18) data3)
      (f64vector-set! vect (+ offset 19) data4)))
  
  
  (method override (polygon-extract! elem vect <f64vector> offset <fx> matrix <f64vector+>) <void>
    (matrix+-transform-3x4-offset! origin~self matrix vect offset)
    (matrix+-transform-3x4-offset! (get-v1) matrix vect (+ offset 3))
    (matrix+-transform-3x4-offset! (get-v2) matrix vect (+ offset 6))
    (matrix+-transform-3x4-offset! (get-v3) matrix vect (+ offset 9))
    (polygon-normal! normal~self vertices)
    (set! element~self elem)
    (set! radius~self (polygon-radius origin vertices))
    (set! data1~self (f64vector-ref vect (+ offset 16)))
    (set! data2~self (f64vector-ref vect (+ offset 17)))
    (set! data3~self (f64vector-ref vect (+ offset 18)))
    (set! data4~self (f64vector-ref vect (+ offset 19))))
  
  
  (method protected (mesh-extract! elem data <f32vector> offset <fx> matrix <f64vector+>) <void>
    (matrix+-transform-3x4! (get-v1) matrix (vertex& (f32vector-ref data (+ offset  0)) (f32vector-ref data (+ offset  1)) (f32vector-ref data (+ offset  2))))
    (matrix+-transform-3x4! (get-v2) matrix (vertex& (f32vector-ref data (+ offset 10)) (f32vector-ref data (+ offset 11)) (f32vector-ref data (+ offset 12))))
    (matrix+-transform-3x4! (get-v3) matrix (vertex& (f32vector-ref data (+ offset 20)) (f32vector-ref data (+ offset 21)) (f32vector-ref data (+ offset 22))))
    (vertex-copy! origin~self (center-of-mass& vertices))
    (polygon-normal! normal~self vertices)
    (set! element~self elem)
    (set! radius~self (polygon-radius origin vertices))))


;;;
;;;; Smooth-Triangle
;;;


(class Smooth-Triangle extends Triangle
  
  
  (slot n1 <f64vector> accessors generate)
  (slot n2 <f64vector> accessors generate)
  (slot n3 <f64vector> accessors generate)
  
  
  (method override (initialize element vertices n1 n2 n3)
    (nextmethod element vertices)
    (set! n1~self n1)
    (set! n2~self n2)
    (set! n3~self n3))
  
  
  (method override (get-normal1)
    n1)
  
  (method override (get-normal2)
    n2)
  
  (method override (get-normal3)
    n3)))
