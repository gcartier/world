;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; World Texture
;;;


(module world.texture jazz


(import (jazz.graphic)
        (jazz.graphic.opengl.glew)
        (jazz.library)
        (jazz.literals)
        (jazz.platform)
        (jazz.platform.cairo))


;;;
;;;; Texture
;;;


(class Cairo-Texture extends Object
  
  
  (slot width   <fx>      getter generate)
  (slot height  <fx>      getter generate)
  (slot surface <Surface> getter generate)
  (slot data    <object>  getter generate)
  (slot texture <object>  getter generate)
  (slot program <object>  getter generate)
  (slot uni-loc <object>  getter generate)
  
  
  (method override (initialize width height (surface: surface #f) (program: program #f) (uni-loc: uni-loc #f))
    (set! width~self width)
    (set! height~self height)
    (set! program~self program)
    (set! uni-loc~self uni-loc)
    (set! surface~self (or surface (new Surface (cairo_image_surface_create CAIRO_FORMAT_ARGB32 width height))))
    (set! data~self (cairo_image_surface_get_data (get-handle~ surface~self)))
    (set! texture~self (gl-generate-texture)))
  
  
  (method (map-texture)
    (glBindTexture GL_TEXTURE_2D texture)
    (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_MIN_FILTER GL_LINEAR)
    (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_MAG_FILTER GL_LINEAR)
    (glTexImage2D GL_TEXTURE_2D
                  0
                  GL_RGBA
                  width
                  height
                  0
                  GL_BGRA
                  GL_UNSIGNED_BYTE
                  data)
    (glBindTexture GL_TEXTURE_2D 0))
  
  
  (method (textured-quad bl tl tr br)
    (when (not program)
      (break)
      )
    (activate~ program)
    (glActiveTexture GL_TEXTURE0)
    (glBindTexture GL_TEXTURE_2D texture)
    (glUniform1i uni-loc 0)
    (glBegin GL_QUADS)
    (glTexCoord2d 0. 1.)
    (bl)
    (glTexCoord2d 1. 1.)
    (tl)
    (glTexCoord2d 1. 0.)
    (tr)
    (glTexCoord2d 0. 0.)
    (br)
    (glEnd)
    (deactivate~ program)
    (glBindTexture GL_TEXTURE_2D 0)))


;;;
;;;; Creation
;;;


(definition public (make-cairo-texture width height (program: program #f) (uni-loc: uni-loc #f))
  (new Cairo-Texture width height program: program uni-loc: uni-loc))


(definition public (make-png-texture file tex-shader tex-loc)
  (let ((png (cairo_image_surface_create_from_png (parse~ file))))
    (let ((width (cairo_image_surface_get_width png))
          (height (cairo_image_surface_get_height png)))
      (let ((ct (new Cairo-Texture width height surface: (new Surface png) program: tex-shader uni-loc: tex-loc)))
        (map-texture~ ct)
        ct)))))
