;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; World Texture
;;;


(module world.texture jazz


(import (jazz.graphic)
        (jazz.graphic.opengl.glew)
        (jazz.io)
        (jazz.library)
        (jazz.literals)
        (jazz.platform)
        (jazz.platform.cairo)
        (world.external.targa)
        (world.foreign))


;;;
;;;; Image
;;;


(class Image-Texture extends Object
  
  
  (slot width   <fx>      getter generate)
  (slot height  <fx>      getter generate)
  (slot data    <object>  getter generate)
  (slot texture <object>  getter generate)
  (slot mipmap? <bool>    getter generate)
  (slot program <object>  getter generate)
  (slot overlay <fl+>     getter generate)
  (slot file    <object>  getter generate)
  
  
  (method override (initialize width height (data: data #f) (mipmap?: mipmap? #f) (program: program #f) (overlay: overlay #f) (file: file #f))
    (set! width~self width)
    (set! height~self height)
    (set! data~self data)
    (set! texture~self (gl-generate-texture))
    (set! mipmap?~self mipmap?)
    (set! program~self program)
    (set! overlay~self overlay)
    (set! file~self file))
  
  
  (method protected (map-texture)
    (glEnable GL_TEXTURE_2D)
    (glBindTexture GL_TEXTURE_2D texture)
    (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_MIN_FILTER (if mipmap? GL_LINEAR_MIPMAP_LINEAR GL_LINEAR))
    (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_MAG_FILTER GL_LINEAR)
    (glTexImage2D GL_TEXTURE_2D
                  0
                  GL_RGBA
                  width
                  height
                  0
                  GL_BGRA
                  GL_UNSIGNED_BYTE
                  data)
    (when mipmap?
      (glGenerateMipmapEXT GL_TEXTURE_2D))
    (glBindTexture GL_TEXTURE_2D 0))
  
  
  (method (textured-quad bl tl tr br)
    (if (not program)
        (begin
          (glColor3f 1. 1. 1.)
          (glBindTexture GL_TEXTURE_2D texture))
      (use~ program)
      (glActiveTexture GL_TEXTURE0)
      (glBindTexture GL_TEXTURE_2D texture)
      (glUniform1i (get-uniform~ program "texture") 0)
      (glUniform1f (get-uniform~ program "overlay") (or overlay 0.6)))
    (glBegin GL_QUADS)
    (glTexCoord2d 0. 1.)
    (bl)
    (glTexCoord2d 1. 1.)
    (tl)
    (glTexCoord2d 1. 0.)
    (tr)
    (glTexCoord2d 0. 0.)
    (br)
    (glEnd)
    (if (not program)
        (glBindTexture GL_TEXTURE_2D 0)
      (glBindTexture GL_TEXTURE_2D 0)
      (unuse~ program))))


;;;
;;;; Cairo
;;;


(class Cairo-Texture extends Image-Texture
  
  
  (slot surface <Surface> getter generate)
  
  
  (method override (initialize width height . rest)
    (bind-keywords ((surface #f) . others) rest
      (apply nextmethod width height others)
      (set! surface~self (or surface (new Surface (cairo_image_surface_create CAIRO_FORMAT_ARGB32 width height))))
      (set! data~self (cairo_image_surface_get_data (get-handle~ surface~self))))))


(definition public (make-cairo-texture width height (program: program #f) (overlay: overlay #f))
  (new Cairo-Texture width height program: program overlay: overlay))


;;;
;;;; File
;;;


(definition public (make-file-texture file)
  (let ((ext (get-extension~ file)))
    (cond ((extension=? ext "png")
           (make-png-texture file))
          ((extension=? ext "tga")
           (make-tga-texture file))
          (else
           (error "Unsupported texture format: {a}" ext)))))


(definition public (make-file-cairo-texture file)
  (let ((ext (get-extension~ file)))
    (cond ((extension=? ext "png")
           (make-png-cairo-texture file))
          ((extension=? ext "tga")
           (make-tga-cairo-texture file))
          (else
           (error "Unsupported texture format: {a}" ext)))))


(definition public (cairo-surface-from-file file)
  (let ((ext (get-extension~ file)))
    (cond ((extension=? ext "png")
           (cairo-surface-from-png file))
          ((extension=? ext "tga")
           (cairo-surface-from-tga file))
          (else
           (error "Unsupported texture format: {a}" ext)))))


;;;
;;;; PNG
;;;


(definition protected (make-png-texture file)
  (assert (exists?~ file))
  (receive (width height surf) (cairo-surface-from-png file)
    (let ((data (cairo_image_surface_get_data surf)))
      ;; not sure if destroying the surface releases the data
      ;; (cairo_surface_destroy surf)
      (let ((ct (new Image-Texture width height data: data mipmap?: #t file: file)))
        (map-texture~ ct)
        ct))))


(definition protected (make-png-cairo-texture file)
  (assert (exists?~ file))
  (receive (width height surf) (cairo-surface-from-png file)
    (let ((surface (new Surface surf)))
      (let ((ct (new Cairo-Texture width height surface: surface mipmap?: #t file: file)))
        (map-texture~ ct)
        ct))))


(definition protected (cairo-surface-from-png file)
  (let ((surf (cairo_image_surface_create_from_png (parse~ file))))
    (let ((width (cairo_image_surface_get_width surf))
          (height (cairo_image_surface_get_height surf)))
      (values width height surf))))


;;;
;;;; TGA
;;;


(definition protected (make-tga-texture file)
  (assert (exists?~ file))
  (receive (width height depth data) (load-tga file)
    (let ((ct (new Image-Texture width height data: data mipmap?: #t file: file)))
      (map-texture~ ct)
      ct)))


(definition protected (make-tga-cairo-texture file)
  (assert (exists?~ file))
  (receive (width height surf) (cairo-surface-from-tga file)
    (let ((surface (new Surface surf)))
      (let ((ct (new Cairo-Texture width height surface: surface mipmap?: #t file: file)))
        (map-texture~ ct)
        ct))))


(definition protected (cairo-surface-from-tga file)
  (receive (width height depth data) (load-tga file)
    (let ((format CAIRO_FORMAT_ARGB32))
      (let ((stride (cairo_format_stride_for_width format width)))
        (assert (= stride (* width depth)))
        (values width height (cairo_image_surface_create_for_data data format width height stride)))))))
