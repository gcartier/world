;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; Quad Textures
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.quad-texture jazz


(import (jazz.opengl.glew)
        (jazz.opengl.render)
        (jazz.opengl.texture)
        (gaea.geometry)
        (world)
        (world.autoload)
        (world.context)
        (world.foreign)
        (world.shader)
        (world.support)
        (world.texture))


(definition public (make-quad-texture width height v1 v2 v3 v4 . rest)
  (bind-keywords ((texture #f) (flipped? #f) (hardware? #f) . others) rest
    (let ((world (current-world)))
      (with-reentrant-render-mutex
        (lambda ()
          (let ((quad-texture (new Quad-Texture))
                (program (cond (hardware? (get-texture-hardware-program world))
                               (flipped? (get-texture-flipped-program world))
                               (else (get-texture-program world)))))
            (receive (array buffer) (let ((vertices (f32vector
                                                      (vertex-x v1) (vertex-y v1) (vertex-z v1) 0. 0. 0.
                                                      (vertex-x v4) (vertex-y v4) (vertex-z v4) 1. 0. 0.
                                                      (vertex-x v2) (vertex-y v2) (vertex-z v2) 0. 1. 0.
                                                      (vertex-x v3) (vertex-y v3) (vertex-z v3) 1. 1. 0.
                                                      (vertex-x v2) (vertex-y v2) (vertex-z v2) 0. 1. 0.
                                                      (vertex-x v4) (vertex-y v4) (vertex-z v4) 1. 0. 0.)))
                                      (world.programs:create-vertices-array program vertices))
              (set-program quad-texture program)
              (set-array quad-texture array)
              (set-buffer quad-texture buffer)
              (set-texture quad-texture (or texture (apply make-cairo-texture width height others)))
              quad-texture)))))))


;;;
;;;; Quad Texture
;;;


(class Quad-Texture extends Object
  
  
  (slot program <object>        initialize #f accessors generate)
  (slot array   <object>        initialize #f accessors generate)
  (slot buffer  <object>        initialize #f accessors generate)
  (slot texture <Image-Texture> initialize #f accessors generate)
  
  
  (method override (destroy self)
    (nextmethod self)
    (with-reentrant-render-mutex
      (lambda ()
        (glDeleteVertexArrays* array)
        (glDeleteBuffers* buffer)
        (close texture))))
  
  
  (method public (draw-texture self)
    ;; quick hack until fixed
    (when (get-id texture)
      (bind-material program (get-id texture) (get-width texture) (get-height texture))
      (glBindVertexArray array)
      (glDrawArrays GL_TRIANGLES 0 6)
      (glBindVertexArray 0)))
  
  
  (method public (render-texture self matrix)
    (let ((camera (current-camera)))
      (if multisampling?
          (glEnable GL_SAMPLE_ALPHA_TO_COVERAGE_ARB)
        (glEnable GL_BLEND))
      (use program)
      (bind-uniforms program (get-projection-matrix camera) (get-view-matrix camera) matrix)
      (bind-entity-matrix program matrix)
      (bind-material program (get-id texture) (get-width texture) (get-height texture))
      (glBindVertexArray array)
      (glDrawArrays GL_TRIANGLES 0 6)
      (glBindVertexArray 0)
      (unuse program)
      (if multisampling?
          (glDisable GL_SAMPLE_ALPHA_TO_COVERAGE_ARB)
        (glDisable GL_BLEND))))))
