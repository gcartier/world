;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; Quad Textures
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is WorldScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2014
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See http://github.com/gcartier/world for details.


(module world.quad-texture jazz


(import (jazz.graphic)
        (jazz.graphic.opengl.glew)
        (world)
        (world.autoload)
        (world.geometry)
        (world.syntax (phase syntax))
        (world.texture))


(definition public (make-quad-texture width height v1 v2 v3 v4)
  (let ((world (current-world)))
    (let ((quad-texture (new Quad-Texture))
          (program (get-texture-program~ world)))
      (set-program~ quad-texture program)
      (set-array~ quad-texture (let ((vertices (f32vector (vertex-x v1) (vertex-y v1) (vertex-z v1) 0. 0. 0.
                                                          (vertex-x v4) (vertex-y v4) (vertex-z v4) 1. 0. 0.
                                                          (vertex-x v2) (vertex-y v2) (vertex-z v2) 0. 1. 0.
                                                          (vertex-x v3) (vertex-y v3) (vertex-z v3) 1. 1. 0.
                                                          (vertex-x v2) (vertex-y v2) (vertex-z v2) 0. 1. 0.
                                                          (vertex-x v4) (vertex-y v4) (vertex-z v4) 1. 0. 0.)))
                                 (create-vertices-array~ program vertices)))
      (set-texture~ quad-texture (make-cairo-texture width height))
      quad-texture)))


;;;
;;;; Quad Texture
;;;


(class Quad-Texture extends Object
  
  
  (slot program <object> initialize #f accessors generate)
  (slot array   <object> initialize #f accessors generate)
  (slot texture <object> initialize #f accessors generate)
  
  
  (method public (render-texture)
    (let ((camera (current-camera)))
      (glEnable GL_BLEND)
      (use~ program)
      (bind-uniforms~ program (get-projection-matrix~ camera) (get-view-matrix~ camera) (get-id~ texture))
      (glBindVertexArray array)
      (glDrawArrays GL_TRIANGLES 0 6)
      (glBindVertexArray 0)
      (unbind-uniforms~ program)
      (unuse~ program)
      (glDisable GL_BLEND)))))
