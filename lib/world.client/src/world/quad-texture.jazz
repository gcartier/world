;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; Quad Textures
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2016
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.quad-texture jazz


(import (jazz.geometry)
        (jazz.opengl.glew)
        (world)
        (world.autoload)
        (world.foreign)
        (world.geometry)
        (world.syntax (phase syntax))
        (world.texture))


(definition public (make-quad-texture width height v1 v2 v3 v4)
  (let ((world (current-world)))
    (let ((quad-texture (new Quad-Texture))
          (program (get-texture-program~ world)))
      (set-program~ quad-texture program)
      (set-array~ quad-texture (let ((vertices (f32vector (vertex-x v1) (vertex-y v1) (vertex-z v1) 0. 0. 0.
                                                          (vertex-x v4) (vertex-y v4) (vertex-z v4) 1. 0. 0.
                                                          (vertex-x v2) (vertex-y v2) (vertex-z v2) 0. 1. 0.
                                                          (vertex-x v3) (vertex-y v3) (vertex-z v3) 1. 1. 0.
                                                          (vertex-x v2) (vertex-y v2) (vertex-z v2) 0. 1. 0.
                                                          (vertex-x v4) (vertex-y v4) (vertex-z v4) 1. 0. 0.)))
                                 (create-vertices-array~ program vertices)))
      (set-texture~ quad-texture (make-cairo-texture width height))
      quad-texture)))


;;;
;;;; Quad Texture
;;;


(class Quad-Texture extends Object
  
  
  (slot program <object>        initialize #f accessors generate)
  (slot array   <object>        initialize #f accessors generate)
  (slot texture <Cairo-Texture> initialize #f accessors generate)
  
  
  (method override (destroy)
    (nextmethod)
    (glDeleteVertexArrays* array)
    (close~ texture))
  
  
  (method public (draw-texture)
    (bind-material~ program (get-id~ texture))
    (glBindVertexArray array)
    (glDrawArrays GL_TRIANGLES 0 6)
    (glBindVertexArray 0))
  
  
  (method public (render-texture matrix)
    (let ((camera (current-camera)))
      (glEnable GL_SAMPLE_ALPHA_TO_COVERAGE_ARB)
      (use~ program)
      (bind-uniforms~ program (get-projection-matrix~ camera) (get-view-matrix~ camera) matrix)
      (bind-entity-matrix~ program matrix)
      (bind-material~ program (get-id~ texture))
      (glBindVertexArray array)
      (glDrawArrays GL_TRIANGLES 0 6)
      (glBindVertexArray 0)
      (unuse~ program)
      (glDisable GL_SAMPLE_ALPHA_TO_COVERAGE_ARB)))))
