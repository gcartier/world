;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; Billboard Consoles
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2016
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.console jazz


(import (jazz.cairo)
        (jazz.component)
        (jazz.geometry)
        (jazz.graphic)
        (jazz.markup)
        (jazz.opengl.glew)
        (jazz.outline)
        (jazz.text)
        (jazz.ui)
        (jazz.view)
        (jazz.window)
        (world)
        (world.autoload)
        (world.billboard)
        (world.context)
        (world.geometry)
        (world.pane)
        (world.quad-texture)
        (world.syntax (phase syntax)))


;;;
;;;; Entity
;;;


(class Entity-Pane extends World-Pane
  
  
  (property entity initialize #f accessors generate)
  
  
  (method override (look-at self)
    (let ((world (current-world))
          (camera (current-camera)))
      (let ((sight (matrix-direction (get-matrix self)))
            (distance (pane-distance camera (get-width (get-resolution self)) (get-width (get-size self)))))
        (free-motion world feedback?: #f)
        (set-lookat camera (horizon-lookat sight @w (vertex-negate& sight)))
        (set-position camera (vertex+ (vertex+ (get-position entity) (vertex 0. (+ (transformed-height entity) (get-radius-y (get-script-pane entity))) 0.))
                                      (vertex-scalar* sight (- distance) @w distance)))
        (derive-target camera)
        (camera-update camera))
      (focus-default root))))


;;;
;;;; Script
;;;


(definition public (make-script-pane entity billboard)
  (let ((size {Dimension$fl$ 6. 3.375})
        (resolution {Dimension 1280 720}))
    (let ((pane (new Script-Pane
                  size: size
                  resolution: resolution
                  billboard: billboard
                  entity: entity))
          (manager (new world.interface.script:Script-Manager size: resolution)))
      (set-player manager pane)
      (set-root pane manager)
      (set-background manager #f)
      (let ((view (locate manager 'script)))
        (set-visible? (locate view 'run) #f)
        (let ((text (locate view 'text))
              (script (get-script entity)))
          (when script
            (set-string-content text (get-text script)))))
      (let ((pos (center (get-size manager) resolution)))
        (set-position manager pos))
      (invalidate-view manager)
      pane)))


(class Script-Pane extends Entity-Pane
  
  
  ;; makes the code a bit darker but is a lot nicer when
  ;; viewed from afar and it is exactly the same when viewed
  ;; from pane-distance which is where it really counts
  (method override (mipmap? self)
    #t)
  
  
  (method override (draw self surface)
    (let ((width (get-width resolution))
          (height (get-height resolution)))
      (let ((rect (new Rect 0 0 width height))
            (color {Color red: .000 green: .000 blue: .000 alpha: .5}))
        (clear surface)
        (fill-rect surface rect color)
        (frame-rect surface rect color)
        (paint-drawing root surface '())))))


;;;
;;;; Console
;;;


(definition public (make-console-pane entity billboard)
  (new Console-Pane
    size: {Dimension$fl$ 6. 3.}
    resolution: {Dimension 600 300}
    billboard: billboard
    entity: entity))


(class Console-Pane extends Entity-Pane
  
  
  (method override (draw self surface)
    (clear-glass surface resolution)
    (bind (message point-size) billboard
      (let ((point-size (or point-size 36))
            (text (if (and (pair? message)
                           (eq? (car message) '<span>))
                      `(<span>
                         ,@(map (lambda (par)
                                  (if (string? par)
                                      `(<paragraph> (<text> color: White ,par))
                                    par))
                                (cdr message)))
                    `(<span>
                       (<paragraph>
                         (<text> color: White ,(->string message)))))))
        (let ((view (console-view text point-size)))
          (let ((pos (center (get-size view) resolution)))
            (set-position view pos)
            (paint-drawing view surface '())))))))


;;;
;;;; View
;;;


(definition protected (console-view text point-size)
  (let* ((view (new World-Console-View size: {Dimension 4000 10}))
         (text-view (get-text view))
         (text-model (get-model text-view)))
    (setup-style text-view (new Text-Style font: (new Font font-name: 'tahoma point-size: point-size hint-style: 'slight hint-metrics: 'on) color: {Color White}))
    (set-text text-model text)
    (let ((size (scrollee-content-size text-view))
          (max-width 600))
      (if (< (get-width size) max-width)
          (set-size view (scrollee-content-size text-view))
        (set-size view (new Dimension max-width 10))
        (set-wrap? text-model #t)
        (wrap-content text-model '())
        (set-wrap? text-model #f)
        (set-size view (new Dimension (calculate-contour-scrollee-width text-model) (get-height text-view)))))
    view))


;;;
;;;; World-Console-View
;;;


(class World-Console-View extends Layout-View
  
  
  (form
    (<install>                                     layout-type: fill
      (<Scroller-View>                             hscroll?: #f vscroll?: #f style: tool
        (<!>                         name: content layout-type: fill
          (<World-Console-Text-View> name: text    background: #f editable?: #f selectable?: #f)))))
  
  
  (method public (get-text self)
    (locate self 'text)))


;;;
;;;; World-Console-Text-View
;;;


(class World-Console-Text-View extends Plain-Formatted-Text-View
  
  
  (method override (new-model self)
    (new Formatted-Text-Model base-style: {Text-Style font: {Font Label-User} color: {Color White}} left-padding: 0 top-padding: 0))))
