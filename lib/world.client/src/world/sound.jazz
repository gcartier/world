;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; Sound
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.sound jazz


(import (jazz.audio)
        (jazz.geometry)
        (jazz.io)
        (jazz.stream)
        (jazz.syntax (phase syntax))
        (gaea.geometry)
        (gaea.math)
        (world)
        (world.asset)
        (world.assets)
        (world.audio)
        (world.configure)
        (world.context)
        (world.id)
        (world.preprocess)
        (world.settings)
        (world.stream)
        (world.task))


(definition public default-music-volume     1.)
(definition public default-ambience-volume  .1)
(definition public default-universe-volume  .5)
(definition public default-interface-volume .5)


(definition public universe-volume <fl+>
  #f)

(definition public (set-universe-volume volume <fl+>)
  (set! universe-volume volume))


(definition public interface-volume <fl+>
  #f)

(definition public (set-interface-volume volume <fl+>)
  (set! interface-volume volume))


(definition public sounds? <bool>
  #f)

(definition public (set-sounds? flag <bool>)
  (set! sounds? flag))


(definition protected (setup-sounds)
  (set! universe-volume (world-setting 'world.universe-volume default-universe-volume))
  (set! interface-volume (world-setting 'world.interface-volume default-interface-volume))
  (set! sounds? (world-setting 'world.sounds? #t))
  (register-sound 'message "warcraft/user/MapPing"))


;;;
;;;; Task
;;;


(definition public (run-sound task <Task>)
  (declare (proper-tail-calls))
  (with-task task
    (lambda (exit)
      (let (iter (previous (current-monotonic)))
        (let ((time (current-monotonic)))
          (let ((elapse (- time previous)))
            (unless (stopping? task)
              (site sound
                (update-playing-songs)))
            (let ((duration (- (current-monotonic) time)))
              (task-wait task sound-period duration exit))
            (iter time)))))))


;;;
;;;; Songs
;;;


(definition protected named-songs
  (make-table test: eq?))

(definition public (register-song name path)
  (table-set! named-songs name path))

(definition public (registered-song name)
  (table-ref named-songs name #f))


(definition protected songs
  (make-table test: equal?))


(definition protected (reset-songs)
  (empty-table songs))


(definition protected (cache-song name/path)
  (define (cache-path path)
    (let ((cached (table-ref songs path 'not-found)))
      (if (neq? cached 'not-found)
          cached
        (let ((asset (find-song-file path)))
          (let ((song (and asset (new-song (retrieve-file asset)))))
            (table-set! songs path song)
            song)))))
  
  (if (symbol? name/path)
      (let ((path (registered-song name/path)))
        (when path
          (cache-path path)))
    (cache-path name/path)))


(definition (find-song-file path)
  (let ((world (current-world)))
    (let ((wav (add-extension path "wav"))
          (mp3 (add-extension path "mp3"))
          (ogg (add-extension path "ogg")))
      (continuation-capture
        (lambda (return)
          (iterate-assets world
            (lambda (assets)
              (iterate-entries assets
                (lambda (path)
                  (when (or (filename=? path wav)
                            (filename=? path mp3)
                            (filename=? path ogg))
                    (continuation-return return (new Asset assets path)))))))
          #f)))))

(definition (require-song-file path)
  (or (find-song-file path)
      (error "Unable to find song: {s}" path)))


(definition protected (effective-cache-song path/song)
  (and (client?)
       (neq? path/song 'none)
       (if (is? path/song Song)
           path/song
         (cache-song path/song))))


;;;
;;;; Playing
;;;


(definition package playing-songs
  (make-table test: eq?))

(definition public (register-playing-song song (ended-proc #f))
  (table-set! playing-songs song ended-proc))

(definition public (unregister-playing-song song)
  (table-clear playing-songs song))


(definition package (update-playing-songs)
  (with-task-mutex
    (lambda ()
      (let ((ended '()))
        (iterate-table playing-songs
          (lambda (song ended-proc)
            (when (ended? song)
              (set! ended (cons song ended)))))
        (for-each (lambda (song)
                    (let ((ended-proc (table-ref playing-songs song)))
                      (when ended-proc
                        (ended-proc song)))
                    (table-clear playing-songs song))
                  ended)))))


;;;
;;;; Sounds
;;;


(definition protected named-sounds
  (make-table test: eq?))

(definition public (register-sound name path)
  (table-set! named-sounds name path))

(definition public (registered-sound name)
  (table-ref named-sounds name #f))


(definition protected sounds
  (make-table test: equal?))


(definition protected (reset-sounds)
  (empty-table sounds))


(definition protected (cache-sound name/path)
  (define (cache-path path)
    (let ((cached (table-ref sounds path 'not-found)))
      (if (neq? cached 'not-found)
          cached
        (let ((file (find-sound-file path)))
          (let ((sound (and file (new-sound file))))
            (table-set! sounds path sound)
            sound)))))
  
  (if (symbol? name/path)
      (let ((path (registered-sound name/path)))
        (when path
          (cache-path path)))
    (cache-path name/path)))


(definition protected (find-sound-asset path)
  (let ((world (current-world)))
    (let ((fullpath (string-append "sound/" path)))
      (let ((wav (add-extension fullpath "wav"))
            (mp3 (add-extension fullpath "mp3"))
            (ogg (add-extension fullpath "ogg")))
        (continuation-capture
          (lambda (return)
            (iterate-assets world
              (lambda (assets)
                (iterate-entries assets
                  (lambda (path)
                    (when (or (filename=? path wav)
                              (filename=? path mp3)
                              (filename=? path ogg))
                      (continuation-return return (new Asset assets path)))))))
            #f))))))


(definition protected (find-sound-file path)
  (let ((asset (find-sound-asset path)))
    (and asset
         (sound-asset-file asset))))


(definition protected (sound-asset-file asset)
  (let ((file (retrieve-file asset)))
    (let ((media-file (new-file {Directory Settings "work" "caches"} (tokenise-filename (add-extension (filename-spine (string-path asset)) "streamaudio")))))
      (if (exists? media-file)
          media-file
        (create-directories media-file)
        (preprocess-audio file media-file #f #f #f #f #f)
        media-file))))


(definition protected (require-sound-file path)
  (or (find-sound-file path)
      (error "Unable to find sound: {s}" path)))


(definition protected (effective-cache-sound path/sound)
  (and sounds?
       (client?)
       (neq? path/sound 'none)
       (if (is? path/sound Sound)
           path/sound
         (cache-sound path/sound))))


;;;
;;;; Sound
;;;


(definition public (new-sound file)
  (new Sound file))


(class Sound extends Audible
  
  
  (slot input  getter generate)
  (slot output getter generate)
  
  
  (method override (initialize self file)
    (nextmethod self)
    (let ((reader (new Stream-Reader file)))
      (let ((codec (get-codec reader))
            (caps (get-caps reader)))
        (close reader)
        (let ((output (new Audio-Sink
                        codec: codec
                        caps: caps
                        sound?: #t)))
          (let ((src (new File-Stream-Audio-Src
                       #f
                       file: file
                       sound?: #t))
                (sink (new Stream-Frame-Consumer
                        consumer: (lambda (buffer dts pts duration flags)
                                    (write-audio output buffer dts pts duration #f)))))
            (let ((input (pipeline (list src sink))))
              (setup output)
              (setup input)
              (set! self.input input)
              (set! self.output output)))))))
  
  
  (method override (destroy self)
    (nextmethod self))
  
  
  (method override (play self)
    (start output)
    (play input))
  
  
  (method override (playing? self)
    #t)
  
  
  (method override (rewind self)
    (when (playing? input)
      (reset (get-source-adapter output))
      (rewind-stream (get-src input))))
  
  
  (method override (get-volume self)
    (get-volume output))
  
  
  (method override (set-volume self vol)
    (set-volume output vol))
  
  
  (method override (set-panorama self pan)
    (set-panorama output pan)))


;;;
;;;; Ambient
;;;


(definition public (play-ambient-sound path/sound (volume: volume #f) (error?: error? #f))
  (let ((sound (effective-cache-sound path/sound)))
    (if (not sound)
        (when error?
          (error "Unable to find sound: {a}" path/sound))
      (when volume
        (set-volume sound volume))
      (rewind sound)
      (play sound))))


(definition public (play-universe-sound path)
  (play-ambient-sound path volume: universe-volume))


(definition public (play-interface-sound path)
  (play-ambient-sound path volume: interface-volume))


;;;
;;;; 3d
;;;


(definition package 3d-audibles
  (make-table test: eq?))

(definition public (register-3d-audible audible position)
  (table-set! 3d-audibles audible position))

(definition public (unregister-3d-audible audible)
  (table-clear 3d-audibles audible))


(definition listener-position
  #f)

(definition listener-sight
  #f)


(definition near-distance
  5.)

(definition far-distance
  50.)

(definition infinite-distance
  60.)

(definition rolloff
  1.)


(definition package (update-3d-audibles position sight)
  (when (and (window?)
             (or (not listener-position)
                 (not listener-sight)
                 (not (vertex-near? position listener-position))
                 (not (vertex-near? sight listener-sight))))
    (set! listener-position (copy-vertex position))
    (set! listener-sight (copy-vertex sight))
    (iterate-table 3d-audibles
      (lambda (audible position)
        (when (playing? audible)
          (update-3d-audible audible position))))
    (iterate-table (get-outputs (current-audio))
      (lambda (id output)
        (let ((player (find-entity id)))
          (when player
            (update-3d-output output (get-position player))))))))


(definition package (updating-3d-audio position sight proc)
  (when (and (window?)
             (or (not listener-position)
                 (not listener-sight)
                 (not (vertex-near? position listener-position))
                 (not (vertex-near? sight listener-sight))))
    (set! listener-position (copy-vertex position))
    (set! listener-sight (copy-vertex sight))
    (proc)))


(definition package (update-3d-audible audible position)
  (when (window?)
    (updating-3d-audible position
      (lambda (volume pan)
        (set-volume audible volume)
        (set-panorama audible pan)))))


(definition package (update-3d-output output position)
  (when (window?)
    (updating-3d-audible position
      (lambda (volume pan)
        (set-volume output volume)
        (set-panorama output pan)))))


(definition package (updating-3d-audible position proc)
  (proc
    ;; volume
    (let ((dist (vertex-distance position listener-position)))
      (let ((attenuation (distance-attenuation dist)))
        (let ((volume (* universe-volume attenuation)))
          volume)))
    ;; pan
    (let ((angle (vector-signed-angle listener-sight (vertex-& position listener-position) (f64vector 0. 1. 0.))))
      (let ((pan (sight-panning angle)))
        pan))))


(definition package (distance-attenuation dist)
  (define (inverse dist)
    (/ near-distance (+ near-distance (* rolloff (- dist near-distance)))))
  
  (cond ;; none
        ((<= dist near-distance)
         1.)
        ;; silent
        ((>= dist infinite-distance)
         0.)
        ;; linear attenuation
        ((>= dist far-distance)
         (let ((lowest (inverse far-distance)))
           (interpolate dist far-distance infinite-distance lowest 0.)))
        ;; inverse attenuation
        (else
         (inverse dist))))


(definition package (sight-panning angle)
  (cond ((between? angle 0. PI/2) (interpolate angle 0. PI/2 0. -1.))
        ((between? angle PI/2 PI) (interpolate angle PI/2 PI -1. 0.))
        ((between? angle (- PI) (- PI/2)) (interpolate angle (- PI) (- PI/2) 0. 1.))
        ((between? angle (- PI/2) 0.) (interpolate angle (- PI/2) 0. 1. 0.))))


(definition public (play-3d-sound path/sound pos (volume: volume #f))
  (let ((sound (effective-cache-sound path/sound)))
    (when sound
      (set-volume sound (or volume universe-volume))
      (register-3d-audible sound pos)
      (update-3d-audible sound pos)
      (rewind sound)
      (play sound))))


(definition public (play-3d-sound-if path pos)
  (when path
    (play-3d-sound path pos)))


(definition public (play-3d-song path/song pos (volume: volume #f) (close?: close? #f))
  (let ((song (effective-cache-song path/song)))
    (when song
      (set-volume song (or volume universe-volume))
      (register-playing-song song (lambda (song)
                                    (unregister-3d-audible song)
                                    (when close?
                                      (close song))))
      (register-3d-audible song pos)
      (update-3d-audible song pos)
      (rewind song)
      (play song))))


(definition public (play-3d-song-if path pos)
  (when path
    (play-3d-song path pos)))


;;;
;;;; Steps
;;;


(definition categorized-steps
  #f)


@work-in-progess
(definition public (prepare-steps)
  (iterate-table (get-categorized-steps)
    (lambda (kind steps)
      (for-each find-sound-file steps))))


(definition public (random-step kind)
  (let ((steps (table-ref (get-categorized-steps) kind #f)))
    (and steps
         (random-element steps))))


(definition protected (get-categorized-steps)
  (or categorized-steps
      (let ((steps (categorize-steps (collect-steps))))
        (set! categorized-steps steps)
        steps)))


(definition (categorize-steps steps)
  (let ((table (make-table test: eq?))
        (dirt (make-search-context "dirt" ignore-case?: #t))
        (grass (make-search-context "grass" ignore-case?: #t))
        (ladder (make-search-context "ladder" ignore-case?: #t))
        (snow (make-search-context "snow" ignore-case?: #t))
        (stone (make-search-context "stone" ignore-case?: #t))
        (water (make-search-context "water" ignore-case?: #t))
        (wood (make-search-context "wood" ignore-case?: #t)))
    (for-each (lambda (step)
                (cond ((search step dirt) (table-add table 'dirt step))
                      ((search step grass) (table-add table 'grass step))
                      ((search step ladder) (table-add table 'ladder step))
                      ((search step snow) (table-add table 'snow step))
                      ((search step stone) (table-add table 'stone step))
                      ((search step water) (table-add table 'water step))
                      ((search step wood) (table-add table 'wood step))
                      (else (error "Uncategorized step: {s}" step))))
              steps)
    table))


(definition (collect-steps)
  (let ((world (current-world)))
    (let ((queue (new-queue)))
      (iterate-assets world
        (lambda (assets)
          (iterate-entries assets
            (lambda (path)
              (when (starts-with? path "sound/warcraft/step/")
                (when (extension=? (filename-extension path) "wav")
                  (let ((path (substring path (string-length "sound/") (string-length path))))
                    (enqueue queue (filename-spine path)))))))))
      (queue-list queue)))))
