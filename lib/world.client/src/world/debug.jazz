;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; World Debug
;;;


(module world.debug jazz


(import (jazz.debuggee)
        (jazz.jrm)
        (world)
        (world.autoload)
        (world.syntax (phase syntax)))


(definition public (target-update target face poly)
  (define (collect-properties target)
    (collect (lambda (property)
               (let ((name (symbolize-property property)))
                 (unless (memq? name '(before children class-info name-info presentation-info visible? texture))
                   (list name (read-property ?t property)))))
             (get-properties~ (class-of target))))
  
  (set-?t target)
  (set-?f face)
  (set-?p poly)
  @bugged
  (let ((controller-debugger (get-controller-debugger)))
    (when controller-debugger
      (let ((debuggee (load-object~ (get-local-register) 'world.debuggee 'world-debuggee))
            (debugger (load-object~ (get-remote-register controller-debugger) 'gaia.debugger 'gaia-debugger))
            (class (and target (category-name (class-of target))))
            (properties (and target (collect-properties target))))
        (show-properties~ debugger debuggee class properties)))))


(definition public (set-target-property property value)
  (let ((world (current-world))
        (zone (current-zone)))
    (let ((target (get-target~ world)))
      (if (not target)
          (bell)
        (let ((designer (if (eq? target world) (get-designer~ world) (get-designer~ zone))))
          (set-property~ designer target property value)))))))
