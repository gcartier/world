;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Debug
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2016
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.debug jazz


(import (jazz.process)
        (world)
        (world.autoload)
        (world.biome)
        (world.block)
        (world.entity)
        (world.geometry)
        (world.history)
        (world.index)
        (world.info)
        (world.region)
        (world.render)
        (world.scripter)
        (world.settings)
        (world.syntax (phase syntax))
        (world.window))


;;;
;;;; Info
;;;


(definition object-info?
  #f)


(definition public (setup-info)
  (define (present-object obj)
    (format "~{{s} #{s}}"
            (reference-name (get-name~ (class-of obj)))
            (object->serial obj)))
  
  (define (present-vertex vert)
    (format "{r precision: 3}, {r precision: 3}, {r precision: 3}"
            (vertex-x vert)
            (vertex-y vert)
            (vertex-z vert)))
  
  (define (present-boolean bool)
    (if bool "true" "false"))
  
  (define (client-info add-section add-info)
    (when (eq? tier-kind 'client)
      (let ((tier (client-tier)))
        (let ((section (add-section "Client")))
          (add-info section "player" (get-character-name~ tier))))))
  
  (define (server-info add-section add-info)
    (when (eq? tier-kind 'server)
      (let ((process (get-process))
            (tier (server-tier)))
        (let ((section (add-section "Server")))
          (add-info section "host" (or (server-host~ process) "localhost"))
          (add-info section "service" (server-service~ process))
          (add-info section "clients" (length (get-clients~ tier)))
          (add-info section "hits" (get-hits~ process))
          (add-info section "debug?" (server-debug?~ process))))))
  
  (define (window-info add-section add-info)
    (let ((window (current-world-window))
          (world (current-world))
          (section (add-section "Window")))
      (when object-info?
        (add-info section "window" (present-object window)))
      (add-info section "size" (format "{a}x{a}" (fxround (get-width~ world)) (fxround (get-height~ world))))))
  
  (define (world-info add-section add-info)
    (when (programmer?)
      (let ((world (current-world))
            (section (add-section "World")))
        (when object-info?
          (add-info section "world" (present-object world)))
        (add-info section "version" (present~ (get-version~ world))))))
  
  (define (zone-info add-section add-info)
    (let ((world (current-world))
          (zone (current-zone)))
      (define (current-zone-version)
        (let ((data (get-data~ (get-form~ zone))))
          (if data
              (get-version~ data)
            zone-version)))
      
      (let ((section (add-section "Zone")))
        (when object-info?
          (add-info section "zone" (present-object zone)))
        (when (programmer?)
          (add-info section "version" (present~ (current-zone-version))))
        (with-regions-mutex~ zone
          (lambda ()
            (add-info section "regions" (count-regions~ zone))
            (add-info section "chunks" (count-chunks~ zone))
            (when (programmer?)
              (add-info section "sections" (count-sections~ zone)))))
        (let ((info (add-info section "sectors" (let ((neighbors (get-eye-neighbors~ zone)))
                                                  (if neighbors (vector-length neighbors) 0)))))
          (when (programmer?)
            (add-info info "non empty" (count-non-empty-sectors~ zone))
            (add-info info "visited" visited-sectors)
            (add-info info "rendered" rendered-sectors)
            (add-info info "meshed" rendered-meshes)
            (add-info info "triangled" (format "{r precision: 1}M" (/ (cast <fl> rendered-triangles) 1024. 1024.)))
            (add-info info "generating" (get-sectors-generating~ zone))))
        (when (programmer?)
          (add-info section "areas" (table-length (get-areas~ zone))))
        (let ((info (add-info section "entities" (length (get-entities~ zone)))))
          (add-info info "rendered" rendered-entities))
        (add-info section "gadgets" (length (get-gadgets~ zone)))
        (add-info section "actors" (length (get-actors~ zone)))
        (add-info section "creatures" (length (get-creatures~ zone)))
        @w(add-info section "polygons" (count-polygons~ zone))
        @w(let* ((floats (compute-floats~ zone))
               (vertices (/ floats 10))
               (triangles (/ vertices 3)))
          (add-info section "triangles" triangles)
          (add-info section "vertices" vertices)
          (add-info section "floats" floats))
        (add-info section "daytime" (get-daytime~ zone)))))
  
  (define (with-information pos proc)
    (let ((zone (current-zone)))
      (let ((sectio (position-section~ zone pos)))
        (when sectio
          (transfer~ sectio 'position-section 'position-information)
          (let ((x (fxfloor (vertex-x pos)))
                (y (fxfloor (vertex-y pos)))
                (z (fxfloor (vertex-z pos))))
            (let ((section-index (get-index~ sectio)))
              (let ((section-x (index-x section-index))
                    (section-y (index-y section-index))
                    (section-z (index-z section-index)))
                (let ((i (- x (* section-x 16)))
                      (j (- y (* section-y 16)))
                      (k (- z (* section-z 16))))
                  (let ((region (get-region~ (get-chunk~ sectio))))
                    (let ((region-x (get-x~ region))
                          (region-y (get-y~ region))
                          (region-z (get-z~ region))
                          (chunk-x (section->chunk section-x))
                          (chunk-z (section->chunk section-z)))
                      (proc region-x region-y region-z chunk-x chunk-z section-x section-y section-z i j k)
                      (release~ sectio 'position-information)))))))))))
  
  (define (player-info add-section add-info)
    (when (programmer?)
      (let ((me (current-me+)))
        (when me
          (let ((section (add-section "Player")))
            (when object-info?
              (add-info section "player" (present-object me)))
            (add-info section "position" (present-vertex (get-position~ me)))
            (add-info section "sight" (present-vertex (get-sight~ (get-lookat~ me))))
            (add-info section "up" (present-vertex (get-up~ (get-lookat~ me))))
            (add-info section "right" (present-vertex (get-right~ (get-lookat~ me))))
            (with-information (get-position~ me)
              (lambda (region-x region-y region-z chunk-x chunk-z section-x section-y section-z i j k)
                (add-info section "region" (format "{a} {a} {a}" region-x region-y region-z))
                (add-info section "chunk" (format "{a} {a}" chunk-x chunk-z)))))))))
  
  (define (camera-info add-section add-info)
    (let ((camera (current-camera))
          (section (add-section "Camera")))
      (define (add-coordinates)
        (with-information (get-position~ camera)
          (lambda (region-x region-y region-z chunk-x chunk-z section-x section-y section-z i j k)
            (add-info section "region" (format "{a} {a} {a}" region-x region-y region-z))
            (add-info section "chunk" (format "{a} {a}" chunk-x chunk-z))
            (add-info section "section" (format "{a} {a} {a}" section-x section-y section-z))
            (add-info section "coordinates" (format "{a} {a} {a}" i j k))
            @$$$-biomes-not-there-i-think-for-extended-sections
            (add-info section "biome" (get-title~ (get-chunk-biome (load-chunk~ region chunk-x chunk-z) i k))))))
      
      (add-info section "position" (present-vertex (get-position~ camera)))
      (when (programmer?)
        (add-info section "target" (present-vertex (get-target~ camera))))
      (add-info section "sight" (present-vertex (get-sight~ camera)))
      (when (programmer?)
        (add-info section "up" (present-vertex (get-up~ camera)))
        (add-info section "right" (present-vertex (get-right~ camera))))
      (add-coordinates)))
  
  (define (history-info add-section add-info)
    (let ((world (current-world))
          (history (current-history)))
      (let ((section (add-section "History")))
        (add-info section "history" (history-end~ history))
        (add-info section "now" (get-now~ history))
        (add-info section "first" (get-first~ history)))))
  
  (define (network-info add-section add-info)
    (when (eq? tier-kind 'client)
      (let ((tier (client-tier))
            (section (add-section "Network")))
        (add-info section "server" (get-remote-server~ tier))
        (add-info section "client" (get-remote-client~ tier)))))
  
  (define (target-info add-section add-info)
    (let ((world (current-world)))
      (let ((targ (first-target~ world)))
        (when targ
          (let ((section (add-section "Target")))
            (let ((count (length (get-selection~ world))))
              (add-info section "target" (format "{a}{a}" (category-name (class-of targ)) (if (> count 1) (format " ({a} total)" count) "")))
              (add-info section "position" (present-vertex (get-position~ targ)))
              (add-info section "scale" (present-vertex (get-scale~ targ)))
              (add-info section "radiuses" (present-vertex (get-radiuses~ targ)))))))))
  
  (define (model-info add-section add-info)
    (let ((world (current-world)))
      (let ((targ (first-target~ world)))
        (when (is? targ Entity)
          (let ((model (cache-model~ targ))
                (section (add-section "Model")))
            (add-info section "model" (format "{a}" (category-name (class-of model))))
            (add-info section "name" (get-name~ model)))))))
  
  @w (register-info 'client client-info)
  @w (register-info 'server server-info)
  @w (register-info 'window window-info)
  (register-info 'world world-info)
  (register-info 'zone zone-info)
  (register-info 'player player-info)
  (register-info 'camera camera-info)
  @w (register-info 'history history-info)
  (register-info 'target target-info)
  (register-info 'model model-info))


;;;
;;;; Target
;;;


(definition public (target-update target poly vert)
  (let ((world (current-world))
        (zone (current-zone)))
    (define (collect-properties elem)
      (collect (lambda (property)
                 (let ((name (symbolize-property property)))
                   (unless (memq? name '(before children class-info name-info presentation-info visible? texture))
                     (list name (read-property ?t property)))))
               (get-properties~ (class-of elem))))
    
    (let ((element (and (not-null? target) (first target))))
      (let ((model (and (is? element Entity) (cache-model~ element))))
        (let ((animation (and model (get-animation~ model))))
          (set-?t target)
          (set-?e element)
          (set-?o model)
          (set-?h (and (is? element Entity) (get-morphing~ element)))
          (set-?a animation)
          (set-?p poly)
          (set-?q (and poly (vertex (get-data2~ poly) (get-data3~ poly) (get-data4~ poly))))
          (set-?v vert)
          (set-?x (cond ((is? element Scriptable)
                         (get-script~ element))
                        ((is? element Block-Entity)
                         (let ((proxy (find-block-proxy~ element)))
                           (and proxy (get-script~ proxy))))
                        (else
                         #f))))))
    @bugged
    (let ((controller-debugger (get-controller-debugger)))
      (when controller-debugger
        (let ((debuggee (load-object~ (get-local-register) 'world.debuggee 'world-debuggee))
              (debugger (load-object~ (get-remote-register controller-debugger) 'gaia.debugger 'gaia-debugger))
              (first (and target (first target))))
          (let ((class (and first (category-name (class-of first))))
                (properties (and first (collect-properties first))))
            (show-properties~ debugger debuggee class properties)))))))


(definition public (set-selection-property property value)
  (let ((world (current-world))
        (zone (current-zone)))
    (let ((selection (get-selection~ world)))
      (if (null? selection)
          (bell)
        (for-each (lambda (target)
                    (let ((designer (if (eq? target world) (get-designer~ world) (get-designer~ zone))))
                      (set-property~ designer target property value)))
                  selection))))))
