;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; World Debug
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2013
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.debug jazz


(import (jazz.system)
        (jazz.ui.view)
        (world)
        (world.autoload)
        (world.dye)
        (world.entity)
        (world.geometry)
        (world.info)
        (world.interface.color)
        (world.light)
        (world.manager)
        (world.syntax (phase syntax))
        (world.window))


;;;
;;;; Info
;;;


(definition object-info?
  #f)


(definition public (setup-info)
  (define (present-object obj)
    (format "~{{s} #{s}}"
            (reference-name (get-name~ (class-of obj)))
            (object->serial obj)))
  
  (define (present-vertex vert)
    (format "{r precision: 3}, {r precision: 3}, {r precision: 3}"
            (vertex-x vert)
            (vertex-y vert)
            (vertex-z vert)))
  
  (define (present-boolean bool)
    (if bool "true" "false"))
  
  (define (window-info add-section add-info)
    (let ((window (current-world-window))
          (world (current-world))
          (section (add-section "Window")))
      (when object-info?
        (add-info section "window" (present-object window)))
      (add-info section "size" (format "{a}x{a}" (fxround (get-width~ world)) (fxround (get-height~ world))))))
  
  (define (world-info add-section add-info)
    (let ((world (current-world))
          (section (add-section "World")))
      (when object-info?
        (add-info section "world" (present-object world)))
      (add-info section "version" (present~ (get-version~ world)))
      (add-info section "stable" (present-boolean (get-render-stable?~ world)))
      (add-info section "idle" (present-boolean (get-idle?~ world)))))
  
  (define (zone-info add-section add-info)
    (let ((world (current-world))
          (zone (current-zone)))
      (define (current-zone-version)
        (let ((data (get-data~ (get-form~ zone))))
          (if data
              (get-version~ data)
            zone-version)))
      
      (let ((section (add-section "Zone")))
        (when object-info?
          (add-info section "zone" (present-object zone)))
        (add-info section "version" (present~ (current-zone-version)))
        (let ((info (add-info section "sectors" (table-length (get-sectors~ zone)))))
          (add-info info "non empty" (count-non-empty-sectors~ zone))
          (if (nmc?~ zone)
              (add-zone-info~ zone info add-info)
            (let ((neighbors (get-eye-sectors~ zone)))
              (when neighbors
                (add-info info "neighbors" (vector-length neighbors))))
            (add-info info "visited" (get-visited-sectors~ world))
            (add-info info "rendered" (get-rendered-sectors~ world))
            (add-info info "waiting" (get-sectors-waiting~ zone))
            (add-info info "generating" (get-sectors-generating~ zone))))
        (add-info section "blocks" (length (get-blocks~ zone)))
        (add-info section "entities" (length (get-entities~ zone)))
        (add-info section "actors" (length (get-actors~ zone)))
        (add-info section "gadgets" (length (get-gadgets~ zone)))
        (add-info section "areas" (table-length (get-areas~ zone)))
        (add-info section "polygons" (count-polygons~ zone))
        (let* ((floats (compute-floats~ zone))
               (vertices (/ floats 10))
               (triangles (/ vertices 3)))
          (add-info section "triangles" triangles)
          (add-info section "vertices" vertices)
          (add-info section "floats" floats))
        (add-info section "daytime" (get-daytime~ zone)))))
  
  (define (player-info add-section add-info)
    (let ((me (current-me))
          (section (add-section "Player")))
      (when object-info?
        (add-info section "player" (present-object me)))
      (add-info section "position" (present-vertex (get-position~ me)))
      (add-info section "sight" (present-vertex (get-sight~ (get-lookat~ me))))
      (add-info section "up" (present-vertex (get-up~ (get-lookat~ me))))
      (add-info section "right" (present-vertex (get-right~ (get-lookat~ me))))))
  
  (define (camera-info add-section add-info)
    (let ((world (current-world)))
      (let ((eye (get-eye~ world))
            (section (add-section "Camera")))
        (add-info section "position" (present-vertex (get-eye-position~ world)))
        (add-info section "target" (present-vertex (get-eye-target~ world)))
        (add-info section "sight" (present-vertex (get-eye-sight~ world)))
        (add-info section "up" (present-vertex (get-eye-up~ world)))
        (add-info section "right" (present-vertex (get-eye-right~ world))))))
  
  (define (history-info add-section add-info)
    (let ((world (current-world)))
      (let ((history (get-history~ world))
            (section (add-section "History")))
        (add-info section "history" (history-end~ history))
        (add-info section "now" (get-now~ history))
        (add-info section "first" (get-first~ history)))))
  
  (define (network-info add-section add-info)
    (let ((process (get-process))
          (section (add-section "Network")))
      (add-info section "server" (get-world-server~ process))
      (add-info section "client" (get-world-client~ process))))
  
  (define (client-info add-section add-info)
    (let ((process (get-process)))
      (when (client-side?~ process)
        (let ((section (add-section "Client")))
          (add-info section "player" (get-player-name~ process))))))
  
  (define (server-info add-section add-info)
    (let ((process (get-process)))
      (when (server-side?~ process)
        (let ((section (add-section "Server")))
          (add-info section "clients" (length (get-clients~ process)))
          (add-info section "hits" (get-hits~ process))))))
  
  (define (target-info add-section add-info)
    (let ((world (current-world)))
      (let ((targ (first-target~ world)))
        (when targ
          (let ((section (add-section "Target")))
            (let ((count (length (get-target~ world))))
              (add-info section "target" (format "{a}{a}" (category-name (class-of targ)) (if (> count 1) (format " ({a} total)" count) "")))
              (add-info section "position" (present-vertex (get-position~ targ)))
              (add-info section "scale" (present-vertex (get-scale~ targ)))
              (add-info section "radiuses" (present-vertex (get-radiuses~ targ)))))))))
  
  (define (model-info add-section add-info)
    (let ((world (current-world)))
      (let ((targ (first-target~ world)))
        (when (is? targ Entity)
          (let ((model (cache-model~ targ))
                (section (add-section "Model")))
            (add-info section "model" (format "{a}" (category-name (class-of model))))
            (add-info section "name" (get-name~ model)))))))
  
  (register-info 'window window-info)
  (register-info 'world world-info)
  (register-info 'zone zone-info)
  (register-info 'player player-info)
  (register-info 'camera camera-info)
  @w (register-info 'history history-info)
  @w (register-info 'client client-info)
  @w (register-info 'server server-info)
  (register-info 'target target-info)
  (register-info 'model model-info))


;;;
;;;; Target
;;;


(definition public (target-update target face face-rank poly)
  (let ((world (current-world))
        (zone (current-zone)))
    (define (collect-properties elem)
      (collect (lambda (property)
                 (let ((name (symbolize-property property)))
                   (unless (memq? name '(before children class-info name-info presentation-info visible? texture))
                     (list name (read-property ?t property)))))
               (get-properties~ (class-of elem))))
    
    (define (light-update element)
      (define (popup-chooser)
        (let ((interface (get-interface~ world))
              (color? #f))
          (let ((width (if color? 528 430)))
            (let ((chooser (new World-Color-Chooser size: (new Dimension width 110))))
              (set-visible?~ (child~ chooser 'color) #f)
              (popup~ interface chooser '(center 10))))))
      
      (let ((popup (find-popup World-Color-Chooser)))
        (if (is-not? element Light)
            (when popup
              (close-popup popup))
          (let ((popup (or popup (popup-chooser))))
            (let ((chooser (popup-guest popup)))
              (set-feedback~ chooser
                (lambda (color)
                  (let ((designer (get-designer~ zone)))
                    (set-property~ designer element 'color (color->dye color))))))))))
    
    (let ((element (and (not-null? target) (first target))))
      (let ((model (and (is? element Entity) (cache-model~ element))))
        (let ((animation (and model (get-animation~ model))))
          (set-?t target)
          (set-?e element)
          (set-?o model)
          (set-?a animation)
          (set-?f face)
          (set-?r face-rank)
          (set-?p poly)
          (light-update element))))
    @bugged
    (let ((controller-debugger (get-controller-debugger)))
      (when controller-debugger
        (let ((debuggee (load-object~ (get-local-register) 'world.debuggee 'world-debuggee))
              (debugger (load-object~ (get-remote-register controller-debugger) 'gaia.debugger 'gaia-debugger))
              (first (and target (first target))))
          (let ((class (and first (category-name (class-of first))))
                (properties (and first (collect-properties first))))
            (show-properties~ debugger debuggee class properties)))))))


(definition public (set-target-property property value)
  (let ((world (current-world))
        (zone (current-zone)))
    (let ((target (get-target~ world)))
      (if (null? target)
          (bell)
        (for-each (lambda (target)
                    (let ((designer (if (eq? target world) (get-designer~ world) (get-designer~ zone))))
                      (set-property~ designer target property value)))
                  target))))))
