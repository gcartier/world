;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Debug
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.debug jazz


(import (jazz.component)
        (jazz.network)
        (jazz.process)
        (jazz.version)
        (gaea.geometry)
        (world)
        (world.autoload)
        (world.biome)
        (world.camera)
        (world.chronology)
        (world.chunk)
        (world.context)
        (world.entity)
        (world.history)
        (world.index)
        (world.info)
        (world.polygon)
        (world.region)
        (world.render)
        (world.server.serving)
        (world.settings))


;;;
;;;; Info
;;;


(definition public (setup-info)
  (let ((info-object? (world-setting 'world.info-object? #f)))
    (define (present-object obj)
      (format "~{{s} #{s}}"
              (reference-name (get-name (class-of obj)))
              (object->serial obj)))
    
    (define (present-vertex vert)
      (format "{r precision: 3} {r precision: 3} {r precision: 3}"
              (vertex-x vert)
              (vertex-y vert)
              (vertex-z vert)))
    
    (define (present-position vert)
      (format "{r precision: 0} {r precision: 0} {r precision: 0}"
              (vertex-x vert)
              (vertex-y vert)
              (vertex-z vert)))
    
    (define (present-boolean bool)
      (if bool "true" "false"))
    
    (define (client-info add-section add-info)
      (when (client?)
        (let ((tier (current-client)))
          (let ((section (add-section "Client")))
            (add-info section "player" (get-character-name tier))))))
    
    (define (server-info add-section add-info)
      (when (server?)
        (let ((process (current-process))
              (tier (current-server)))
          (let ((section (add-section "Server")))
            (add-info section "host" (or (server-host process) "localhost"))
            (add-info section "service" (server-service process))
            (add-info section "clients" (length (get-delegates tier)))
            (add-info section "hits" (get-hits process))
            (add-info section "debug?" (server-debug? process))))))
    
    (define (window-info add-section add-info)
      (let ((window (current-window))
            (world (current-world))
            (section (add-section "Window")))
        (when info-object?
          (add-info section "window" (present-object window)))
        (add-info section "size" (format "{a}x{a}" (fxround (get-width world)) (fxround (get-height world))))))
    
    (define (world-info add-section add-info)
      (let ((world (current-world))
            (section (add-section "World")))
        (if (not (can-script?))
            (add-info section "fps" (format "{r precision: 0}" render-fps))
          (when info-object?
            (add-info section "world" (present-object world)))
          (add-info section "version" (present (get-version world)))
          (add-info section "fps" (format "{r precision: 0}" render-fps))
          @wait
          (add-info section "duration" (format "{r precision: 0}us" (* render-duration 1000000)))
          (add-info section "camera stable" (if (get-stable? (current-camera)) "yes" "no")))))
    
    (define (zone-info add-section add-info)
      (when (developer?)
        (let ((world (current-world))
              (zone (current-zone)))
          (define (current-zone-version)
            (let ((data (get-data (get-form zone))))
              (if data
                  (get-version data)
                zone-version)))
          
          (let ((section (add-section "Zone"))
                (info-rendered? (world-setting 'world.info-rendered? #f)))
            (when info-object?
              (add-info section "zone" (present-object zone)))
            (when (developer?)
              (add-info section "version" (present (current-zone-version))))
            (add-info section "regions" (count-regions zone))
            (add-info section "chunks" (count-chunks zone))
            (when (developer?)
              (add-info section "sections" (count-sections zone)))
            (let ((info (add-info section "sectors" (let ((neighbors (get-eye-neighbors zone)))
                                                      (if neighbors (vector-length neighbors) 0)))))
              (when (and (developer?) info-rendered?)
                (add-info info "laden" (count-laden-sectors zone))
                (add-info info "visited" visited-sectors)
                (add-info info "rendered" rendered-sectors)
                (add-info info "meshed" rendered-meshes)
                (add-info info "triangled" (format "{r precision: 1}M" (/ (cast <fl> rendered-triangles) 1024. 1024.)))
                (add-info info "generating" (get-sectors-generating zone))))
            (when (developer?)
              (add-info section "areas" (table-length (get-areas zone))))
            (when (developer?)
              (add-info section "expanses" (table-length (get-expanses zone))))
            (let ((info (add-info section "entities" (length (get-entities zone)))))
              (when (and (developer?) info-rendered?)
                (add-info info "rendered" rendered-entities)))
            @w(add-info section "gadgets" (length (get-gadgets zone)))
            (add-info section "actors" (length (get-actors zone)))
            @w(add-info section "creatures" (length (get-creatures zone)))
            (add-info section "threads" (length (top-threads)))
            @w(add-info section "polygons" (count-polygons zone))
            @w(let* ((floats (compute-floats zone))
                     (vertices (/ floats 10))
                     (triangles (/ vertices 3)))
                (add-info section "triangles" triangles)
                (add-info section "vertices" vertices)
                (add-info section "floats" floats))
            (add-info section "daytime" (format "{r precision: 0}" (get-daytime zone)))))))
    
    (define (with-information pos proc)
      (let ((zone (current-zone)))
        (let ((sectio (position-section zone pos)))
          (when sectio
            (let ((x (fxfloor (vertex-x pos)))
                  (y (fxfloor (vertex-y pos)))
                  (z (fxfloor (vertex-z pos))))
              (let ((section-index (get-index sectio)))
                (let ((section-x (index-x section-index))
                      (section-y (index-y section-index))
                      (section-z (index-z section-index)))
                  (let ((i (- x (* section-x 16)))
                        (j (- y (* section-y 16)))
                        (k (- z (* section-z 16))))
                    (let ((region (get-region (get-chunk sectio))))
                      (let ((region-x (get-x region))
                            (region-y (get-y region))
                            (region-z (get-z region))
                            (chunk-x (section->chunk section-x))
                            (chunk-z (section->chunk section-z)))
                        (proc region-x region-y region-z chunk-x chunk-z section-x section-y section-z i j k)))))))))))
    
    (define (player-info add-section add-info)
      ;; simpler view for now
      (when (can-explore?)
        (let ((me (current-me+)))
          (when me
            (let ((section (add-section "Player")))
              (when info-object?
                (add-info section "player" (present-object me)))
              (add-info section "position" (present-position (get-position me)))
              (add-info section "sight" (present-vertex (get-sight (get-lookat me))))
              (add-info section "up" (present-vertex (get-up (get-lookat me))))
              (add-info section "right" (present-vertex (get-right (get-lookat me))))
              (when (developer?)
                (with-information (get-position me)
                  (lambda (region-x region-y region-z chunk-x chunk-z section-x section-y section-z i j k)
                    (add-info section "region" (print-region region-x region-y region-z))
                    (add-info section "chunk" (format "{a} {a}" chunk-x chunk-z))
                    (add-info section "section" (format "{a} {a} {a}" section-x section-y section-z))))))))))
    
    (define (camera-info add-section add-info)
      (let ((camera (current-camera))
            (section (add-section "Camera")))
        (define (add-coordinates)
          (with-information (get-position camera)
            (lambda (region-x region-y region-z chunk-x chunk-z section-x section-y section-z i j k)
              (add-info section "region" (format "{a} {a} {a}" region-x region-y region-z))
              (add-info section "chunk" (format "{a} {a}" chunk-x chunk-z))
              (add-info section "section" (format "{a} {a} {a}" section-x section-y section-z))
              (add-info section "coordinates" (format "{a} {a} {a}" i j k))
              @$$$-biomes-not-there-i-think-for-extended-sections
              (add-info section "biome" (get-title (get-chunk-biome (load-chunk region (planar-index chunk-x chunk-z)) i k))))))
        
        (add-info section "position" (present-vertex (get-position camera)))
        (when (developer?)
          (add-info section "target" (present-vertex (get-target camera))))
        (add-info section "sight" (present-vertex (get-sight camera)))
        (when (developer?)
          (add-info section "up" (present-vertex (get-up camera)))
          (add-info section "right" (present-vertex (get-right camera))))
        (add-coordinates)))
    
    (define (history-info add-section add-info)
      (let ((world (current-world))
            (history (current-history)))
        (let ((section (add-section "History")))
          (add-info section "history" (history-end history))
          (add-info section "now" (get-now history))
          (add-info section "head" (get-head history)))))
    
    (define (network-info add-section add-info)
      (when (client?)
        (let ((tier (current-client))
              (section (add-section "Network")))
          (add-info section "server" (get-remote-server tier))
          (add-info section "client" (get-remote-client tier)))))
    
    (define (target-info add-section add-info)
      (let ((world (current-world)))
        (let ((targ (first-target world)))
          (when targ
            (let ((section (add-section "Target")))
              (let ((count (length (get-selection world))))
                (add-info section "class" (format "{a}{a}" (category-name (class-of targ)) (if (> count 1) (format " ({a} total)" count) "")))
                (add-info section "position" (present-vertex (get-position targ)))
                (add-info section "scale" (present-vertex (get-scale targ)))
                (add-info section "radiuses" (present-vertex (get-radiuses targ)))))))))
    
    (define (model-info add-section add-info)
      (let ((world (current-world)))
        (let ((targ (first-target world)))
          (when (is? targ Entity)
            (let ((model (cache-model targ))
                  (section (add-section "Model")))
              (add-info section "class" (format "{a}" (category-name (class-of model))))
              (add-info section "name" (get-model targ)))))))
    
    (when (world-setting 'world.info-client? #f) (register-info 'client client-info))
    (when (world-setting 'world.info-server? #f) (register-info 'server server-info))
    (when (world-setting 'world.info-window? #f) (register-info 'window window-info))
    (when (world-setting 'world.info-world? #t) (register-info 'world world-info))
    (when (world-setting 'world.info-zone? #t) (register-info 'zone zone-info))
    (when (world-setting 'world.info-player? #t) (register-info 'player player-info))
    (when (world-setting 'world.info-camera? #f) (register-info 'camera camera-info))
    (when (world-setting 'world.info-history? #f) (register-info 'history history-info))
    (when (world-setting 'world.info-target? #t) (register-info 'target target-info))
    (when (world-setting 'world.info-model? #t) (register-info 'model model-info))))


;;;
;;;; Target
;;;


(definition public (target-updated target poly vert)
  (let ((world (current-world))
        (zone (current-zone)))
    (define (collect-properties elem)
      (collect (lambda (property)
                 (let ((name (symbolize-property property)))
                   (unless (memq? name '(before children class-info name-info presentation-info visible? texture))
                     (list name (read-property ?t property)))))
               (get-properties (class-of elem))))
    
    (let ((element (and (not-null? target) (first target))))
      (let ((model (and (is? element Entity) (cache-model element))))
        (let ((animation (and model (get-animation model))))
          (set-%e element)
          (set-%m model)
          (set-%y (and (is? element Entity) (get-morphing element)))
          (set-%a animation)
          (set-%p poly)
          (set-%q (and poly (polygon-position poly)))
          (set-%v vert)
          (set-%s (cond ((is? element Entity)
                         (get-script element))
                        (else
                         #f))))))
    @bugged
    (let ((controller-debugger (get-controller-debugger)))
      (when controller-debugger
        (let ((debuggee (load-object (get-local-register 'debugging) 'world.debuggee 'world-debuggee))
              (debugger (load-object (get-remote-register controller-debugger) 'gaia.debugger 'gaia-debugger))
              (first (and target (first target))))
          (let ((class (and first (category-name (class-of first))))
                (properties (and first (collect-properties first))))
            (show-properties debugger debuggee class properties)))))))


(definition public (set-selection-property property value)
  (let ((world (current-world))
        (zone (current-zone)))
    (let ((selection (get-selection world)))
      (if (null? selection)
          (bell)
        (for-each (lambda (target)
                    (let ((designer (if (eq? target world) (get-designer world) (get-designer zone))))
                      (set-property designer target property value)))
                  selection)))))


;;;
;;;; Descriptors
;;;


(definition protected (debug-file-descriptors tag target (type: type #f))
  (let ((port (open-process (list path: "lsof" arguments: (list "-c" target)))))
    (let ((lines (read-all port read-line)))
      (close-port port)
      (let ((matches (collect-if (lambda (line)
                                   (and (not (search line "/dev/tty"))
                                        (not (search line "private/var"))
                                        (not (search line "SubmitDiagInfo"))
                                        (let ((info (remove-empty (split line " "))))
                                          (bind (command pid user fd typ) info
                                            (and (numeric? (string-ref fd 0))
                                                 (or (not type)
                                                     (equal? typ type)))))))
                                 lines)))
        (format :terminal "***** {a} ({a}){%}" tag (length matches))
        (for-each terminal matches))))))
