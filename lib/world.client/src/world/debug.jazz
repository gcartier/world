;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; World Debug
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2013
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.debug jazz


(import (jazz.debuggee)
        (jazz.jrm)
        (jazz.ui)
        (jazz.ui.view)
        (world)
        (world.autoload)
        (world.dye)
        (world.entity)
        (world.interface)
        (world.interface.color)
        (world.light)
        (world.manager)
        (world.syntax (phase syntax)))


(definition public (target-update target face face-rank poly)
  (let ((world (current-world))
        (zone (current-zone)))
    (define (collect-properties elem)
      (collect (lambda (property)
                 (let ((name (symbolize-property property)))
                   (unless (memq? name '(before children class-info name-info presentation-info visible? texture))
                     (list name (read-property ?t property)))))
               (get-properties~ (class-of elem))))
    
    (define (light-update element)
      (define (popup-chooser)
        (let ((interface (get-interface~ world))
              (color? #f))
          (let ((width (if color? 528 430)))
            (let ((chooser (new World-Color-Chooser size: (new Dimension width 110))))
              (set-visible?~ (child~ chooser 'color) #f)
              (popup~ interface chooser '(center 10))))))
      
      (let ((popup (find-popup World-Color-Chooser)))
        (if (is-not? element Light)
            (when popup
              (close-popup popup))
          (let ((popup (or popup (popup-chooser))))
            (let ((chooser (popup-guest popup)))
              (set-feedback~ chooser
                (lambda (color)
                  (let ((designer (get-designer~ zone)))
                    (set-property~ designer element 'color (color->dye color))))))))))
    
    (let ((element (and (not-null? target) (first target))))
      (let ((model (and (is? element Entity) (get-model~ element))))
        (set-?t target)
        (set-?e element)
        (set-?o model)
        (set-?f face)
        (set-?r face-rank)
        (set-?p poly)
        (light-update element)))
    @bugged
    (let ((controller-debugger (get-controller-debugger)))
      (when controller-debugger
        (let ((debuggee (load-object~ (get-local-register) 'world.debuggee 'world-debuggee))
              (debugger (load-object~ (get-remote-register controller-debugger) 'gaia.debugger 'gaia-debugger))
              (first (and target (first target))))
          (let ((class (and first (category-name (class-of first))))
                (properties (and first (collect-properties first))))
            (show-properties~ debugger debuggee class properties)))))))


(definition public (set-target-property property value)
  (let ((world (current-world))
        (zone (current-zone)))
    (let ((target (get-target~ world)))
      (if (null? target)
          (bell)
        (for-each (lambda (target)
                    (let ((designer (if (eq? target world) (get-designer~ world) (get-designer~ zone))))
                      (set-property~ designer target property value)))
                  target))))))
