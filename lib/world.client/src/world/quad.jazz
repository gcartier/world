;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; Quads
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.quad jazz


(import (world.geometry)
        (world.homogeneous)
        (world.polygon))


(proclaim (warn optimizations))


(definition public (make-quad element v1 v2 v3 v4)
  (new Quad element (vector v1 v2 v3 v4)))


(definition public (make-smooth-quad element v1 v2 v3 v4 n1 n2 n3 n4)
  (new Smooth-Quad element (vector v1 v2 v3 v4) n1 n2 n3 n4))


;; use f64vector to bypass finite feature
(definition public (allocate-quad element)
  (allocate Quad
            (f64vector +nan.0 +nan.0 +nan.0)
            (f64vector +nan.0 +nan.0 +nan.0)
            element
            (vector (f64vector +nan.0 +nan.0 +nan.0)
                    (f64vector +nan.0 +nan.0 +nan.0)
                    (f64vector +nan.0 +nan.0 +nan.0)
                    (f64vector +nan.0 +nan.0 +nan.0))
            (make-fl)
            (make-fl)
            (make-fl)
            (make-fl)
            (make-fl)
            #f))


;;;
;;;; Quad
;;;


(class Quad extends Polygon
  
  
  (method override (triangle-count self) <fx>
    2)
  
  
  (method override (add-triangles self uv <f32vector> depth <fl> add)
    (let ((v1 (get-v1 self))
          (v2 (get-v2 self))
          (v3 (get-v3 self))
          (v4 (get-v4 self))
          (n1 (get-normal1 self))
          (n2 (get-normal2 self))
          (n3 (get-normal3 self))
          (n4 (get-normal4 self)))
      (add v1 n1 0 1 0
           v2 n2 2 3 0
           v3 n3 4 5 0
           uv
           depth)
      (add v3 n3 4 5 0
           v4 n4 6 7 0
           v1 n1 0 1 0
           uv
           depth)))
  
  
  (method override (add-template-triangles self mesher x y z inverse? uv <f32vector> depth <fl> add)
    (cond ((not inverse?)
           (let ((v1 (get-v1 self))
                 (v2 (get-v2 self))
                 (v3 (get-v3 self))
                 (v4 (get-v4 self))
                 (n1 (get-normal1 self))
                 (n2 (get-normal2 self))
                 (n3 (get-normal3 self))
                 (n4 (get-normal4 self)))
             (add mesher
                  x y z
                  v1 n1 0 1 0
                  v2 n2 2 3 0
                  v3 n3 4 5 0
                  uv
                  depth)
             (add mesher
                  x y z
                  v3 n3 4 5 0
                  v4 n4 6 7 0
                  v1 n1 0 1 0
                  uv
                  depth)))
          (else
           (let ((v1 (get-v4 self))
                 (v2 (get-v1 self))
                 (v3 (get-v2 self))
                 (v4 (get-v3 self))
                 (n1 (get-normal1 self))
                 (n2 (get-normal2 self))
                 (n3 (get-normal3 self))
                 (n4 (get-normal4 self)))
             (add mesher
                  x y z
                  v1 n1 6 7 0
                  v2 n2 0 1 0
                  v3 n3 2 3 0
                  uv
                  depth)
             (add mesher
                  x y z
                  v3 n3 2 3 0
                  v4 n4 4 5 0
                  v1 n1 6 7 0
                  uv
                  depth)))))
  
  
  (method override (iterate-triangles self proc)
    (let ((v1 (get-v1 self))
          (v2 (get-v2 self))
          (v3 (get-v3 self))
          (v4 (get-v4 self)))
      (proc v1 v2 v3)
      (proc v3 v4 v1)))
  
  
  (method override (iterate-vertices self proc)
    (proc (get-v1 self))
    (proc (get-v2 self))
    (proc (get-v3 self))
    (proc (get-v4 self)))
  
  
  (method public (get-v1 self)
    (vector-ref vertices 0))
  
  (method public (get-v2 self)
    (vector-ref vertices 1))
  
  (method public (get-v3 self)
    (vector-ref vertices 2))
  
  (method public (get-v4 self)
    (vector-ref vertices 3))
  
  
  (method public virtual (get-normal1 self)
    normal)
  
  (method public virtual (get-normal2 self)
    normal)
  
  (method public virtual (get-normal3 self)
    normal)
  
  (method public virtual (get-normal4 self)
    normal)
  
  
  (method override (assemble self element v1 v2 v3 v4)
    (vertex-copy! (get-v1 self) v1)
    (vertex-copy! (get-v2 self) v2)
    (vertex-copy! (get-v3 self) v3)
    (vertex-copy! (get-v4 self) v4)
    (nextmethod self element))
  
  
  (method override (alloc-polygon$ self) <void>
    (alloc-quad$))
  
  
  (method override (free-polygon$ self) <void>
    (free-quad$ self))
  
  
  (method override (copy-polygon self) <Polygon>
    (allocate Quad
              (copy-vertex origin)
              (copy-vertex normal)
              element
              (vector (copy-vertex (get-v1 self))
                      (copy-vertex (get-v2 self))
                      (copy-vertex (get-v3 self))
                      (copy-vertex (get-v4 self)))
              (flo radius)
              (flo data1)
              (flo data2)
              (flo data3)
              (flo data4)))
  
  
  (method override (flip-polygon self) <Polygon>
    (allocate Quad
              (copy-vertex origin)
              (vertex-negate normal)
              element
              (vector (copy-vertex (get-v4 self))
                      (copy-vertex (get-v3 self))
                      (copy-vertex (get-v2 self))
                      (copy-vertex (get-v1 self)))
              (flo radius)
              (flo data1)
              (flo data2)
              (flo data3)
              (flo data4)))
  
  
  (method override (polygon-transform! self src <Quad> matrix <matrix> inverse-matrix <matrix>) <void>
    (matrix-transform-3x4! origin matrix (get-origin src))
    (matrix-transform-3x4! (get-v1 self) matrix (get-v1 src))
    (matrix-transform-3x4! (get-v2 self) matrix (get-v2 src))
    (matrix-transform-3x4! (get-v3 self) matrix (get-v3 src))
    (matrix-transform-3x4! (get-v4 self) matrix (get-v4 src))
    (matrix-transform-normal! normal inverse-matrix (get-normal src))
    (set! element (get-element src))
    (fl! radius (get-radius src))
    (fl! data1 (get-data1 src))
    (fl! data2 (get-data2 src))
    (fl! data3 (get-data3 src))
    (fl! data4 (get-data4 src))
    (unspecified))
  
  
  (method override (polygon-move! self vect <vertex> offset <fx> matrix <matrix+>) <void>
    (let ((v1 (get-v1 self))
          (v2 (get-v2 self))
          (v3 (get-v3 self))
          (v4 (get-v4 self)))
      (matrix+-transform-3x4->offset! vect (+ offset  0) matrix origin)
      (matrix+-transform-3x4->offset! vect (+ offset  3) matrix v1)
      (matrix+-transform-3x4->offset! vect (+ offset  6) matrix v2)
      (matrix+-transform-3x4->offset! vect (+ offset  9) matrix v3)
      (matrix+-transform-3x4->offset! vect (+ offset 12) matrix v4)
      (f64vector-set! vect (+ offset 15) radius)
      (f64vector-set! vect (+ offset 16) data1)
      (f64vector-set! vect (+ offset 17) data2)
      (f64vector-set! vect (+ offset 18) data3)
      (f64vector-set! vect (+ offset 19) data4)))
  
  
  (method override (polygon-extract! self elem vect <vertex> offset <fx> matrix <matrix+>) <void>
    (matrix+-transform-3x4-offset! origin matrix vect offset)
    (matrix+-transform-3x4-offset! (get-v1 self) matrix vect (+ offset  3))
    (matrix+-transform-3x4-offset! (get-v2 self) matrix vect (+ offset  6))
    (matrix+-transform-3x4-offset! (get-v3 self) matrix vect (+ offset  9))
    (matrix+-transform-3x4-offset! (get-v4 self) matrix vect (+ offset 12))
    (polygon-normal! normal vertices)
    (set! element elem)
    (fl! radius (f64-ref (polygon-radius& origin vertices)))
    (fl! data1 (f64vector-ref vect (+ offset 16)))
    (fl! data2 (f64vector-ref vect (+ offset 17)))
    (fl! data3 (f64vector-ref vect (+ offset 18)))
    (fl! data4 (f64vector-ref vect (+ offset 19)))
    (unspecified)))


;;;
;;;; Smooth-Quad
;;;


(class Smooth-Quad extends Quad
  
  
  (slot n1 <vertex> getter generate)
  (slot n2 <vertex> getter generate)
  (slot n3 <vertex> getter generate)
  (slot n4 <vertex> getter generate)
  
  
  (method override (initialize self element vertices n1 n2 n3 n4)
    (nextmethod self element vertices)
    (set! self.n1 n1)
    (set! self.n2 n2)
    (set! self.n3 n3)
    (set! self.n4 n4))
  
  
  (method override (get-normal1 self)
    n1)
  
  (method override (get-normal2 self)
    n2)
  
  (method override (get-normal3 self)
    n3)
  
  (method override (get-normal4 self)
    n4))


;;;
;;;; Pool
;;;


(constant quads-cardinality <fx>
  4096)

(definition protected quads-pool <vector>
  (make-vector quads-cardinality #f))

(definition protected quads-allocated <fx>
  0)

(definition protected quads-available <fx>
  0)


(definition protected (alloc-quad$) <Quad>
  (if (= quads-available 0)
      (assert (< quads-allocated quads-cardinality)
        (increase! quads-allocated)
        (allocate-quad #f))
    (decrease! quads-available)
    (let ((quad (vector-ref quads-pool quads-available)))
      (vector-set! quads-pool quads-available #f)
      quad)))


(definition protected (make-quad$ element v1 v2 v3 v4) <Quad>
  (let ((quad (alloc-quad$)))
    (assemble quad element v1 v2 v3 v4)
    quad))


(definition protected (free-quad$ quad <Quad>) <void>
  (assert (< quads-available quads-cardinality))
  (vector-set! quads-pool quads-available quad)
  (increase! quads-available)))
