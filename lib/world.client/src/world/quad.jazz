;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Quads
;;;


(module world.quad jazz


(import (jazz.geometry)
        (jazz.graphic)
        (jazz.graphic.opengl.glew)
        (jazz.io)
        (jazz.library)
        (jazz.literals)
        (jazz.media)
        (jazz.network)
        (jazz.platform)
        (jazz.platform.cairo)
        (jazz.runtime)
        (jazz.system)
        (jazz.ui)
        (jazz.ui.dialog)
        (jazz.ui.window)
        (world)
        (world.foreign)
        (world.geometry)
        (world.plane)
        (world.polygon)
        (world.texture)
        (time))


(definition public (make-quad element normal v1 v2 v3 v4)
  (new Quad element normal v1 v2 v3 v4))


(definition public (make-smooth-quad element normal v1 v2 v3 v4 n1 n2 n3 n4)
  (new Smooth-Quad element normal v1 v2 v3 v4 n1 n2 n3 n4))


(definition protected (f32vector->quad elem vect <f32vector> offset <fx> sphere-matrix)
  (define (transform vert)
    (if sphere-matrix
        (matrix-transform-3x4 sphere-matrix vert)
      vert))
  
  (allocate Quad
    (transform (vertex (f32vector-ref vect (+ offset 0)) (f32vector-ref vect (+ offset 1)) (f32vector-ref vect (+ offset 2))))
    ;; to be recalculated
    (vertex (f32vector-ref vect (+ offset 3)) (f32vector-ref vect (+ offset 4)) (f32vector-ref vect (+ offset 5)))
    elem
    (vector (transform (vertex (f32vector-ref vect (+ offset  6)) (f32vector-ref vect (+ offset  7)) (f32vector-ref vect (+ offset  8))))
            (transform (vertex (f32vector-ref vect (+ offset  9)) (f32vector-ref vect (+ offset 10)) (f32vector-ref vect (+ offset 11))))
            (transform (vertex (f32vector-ref vect (+ offset 12)) (f32vector-ref vect (+ offset 13)) (f32vector-ref vect (+ offset 14))))
            (transform (vertex (f32vector-ref vect (+ offset 15)) (f32vector-ref vect (+ offset 16)) (f32vector-ref vect (+ offset 17)))))
    ;; to be recalculated
    (f32vector-ref vect (+ offset 18))))


;;;
;;;; Quad
;;;


(class Quad extends Polygon
  
  
  (method override (initialize element normal v1 v2 v3 v4)
    (nextmethod element (vector v1 v2 v3 v4) normal))
  
  
  (method override (triangle-count) <fx>
    2)
  
  
  (method override (add-triangles uv depth add)
    (let ((v1 (get-v1))
          (v2 (get-v2))
          (v3 (get-v3))
          (v4 (get-v4))
          (n1 (get-normal1))
          (n2 (get-normal2))
          (n3 (get-normal3))
          (n4 (get-normal4)))
      (add v1 v2 v3 n1 n2 n3 (f32vector-ref uv 0) (f32vector-ref uv 1) (f32vector-ref uv 2) (f32vector-ref uv 3) (f32vector-ref uv 4) (f32vector-ref uv 5) depth)
      (add v3 v4 v1 n3 n4 n1 (f32vector-ref uv 4) (f32vector-ref uv 5) (f32vector-ref uv 6) (f32vector-ref uv 7) (f32vector-ref uv 0) (f32vector-ref uv 1) depth)))
  
  
  (method override (iterate-triangles proc)
    (let ((v1 (get-v1))
          (v2 (get-v2))
          (v3 (get-v3))
          (v4 (get-v4)))
      (proc v1 v2 v3)
      (proc v3 v4 v1)))
  
  
  (method public (get-v1)
    (vector-ref vertices 0))
  
  (method public (get-v2)
    (vector-ref vertices 1))
  
  (method public (get-v3)
    (vector-ref vertices 2))
  
  (method public (get-v4)
    (vector-ref vertices 3))
  
  
  (method public virtual (get-normal1)
    normal)
  
  (method public virtual (get-normal2)
    normal)
  
  (method public virtual (get-normal3)
    normal)
  
  (method public virtual (get-normal4)
    normal)
  
  
  (method override (polygon-move! vect <f32vector> offset <fx>) <void>
    (let ((v1 (get-v1))
          (v2 (get-v2))
          (v3 (get-v3))
          (v4 (get-v4)))
      (f32vector-set! vect (+ offset  0) (vertex-x origin))
      (f32vector-set! vect (+ offset  1) (vertex-y origin))
      (f32vector-set! vect (+ offset  2) (vertex-z origin))
      (f32vector-set! vect (+ offset  3) (vertex-x normal))
      (f32vector-set! vect (+ offset  4) (vertex-y normal))
      (f32vector-set! vect (+ offset  5) (vertex-z normal))
      (f32vector-set! vect (+ offset  6) (vertex-x v1))
      (f32vector-set! vect (+ offset  7) (vertex-y v1))
      (f32vector-set! vect (+ offset  8) (vertex-z v1))
      (f32vector-set! vect (+ offset  9) (vertex-x v2))
      (f32vector-set! vect (+ offset 10) (vertex-y v2))
      (f32vector-set! vect (+ offset 11) (vertex-z v2))
      (f32vector-set! vect (+ offset 12) (vertex-x v3))
      (f32vector-set! vect (+ offset 13) (vertex-y v3))
      (f32vector-set! vect (+ offset 14) (vertex-z v3))
      (f32vector-set! vect (+ offset 15) (vertex-x v4))
      (f32vector-set! vect (+ offset 16) (vertex-y v4))
      (f32vector-set! vect (+ offset 17) (vertex-z v4))
      (f32vector-set! vect (+ offset 18) radius))))


;;;
;;;; Smooth-Quad
;;;


(class Smooth-Quad extends Quad
  
  
  (slot n1 <f32vector> getter generate)
  (slot n2 <f32vector> getter generate)
  (slot n3 <f32vector> getter generate)
  (slot n4 <f32vector> getter generate)
  
  
  (method override (initialize element normal v1 v2 v3 v4 n1 n2 n3 n4)
    (nextmethod element normal v1 v2 v3 v4)
    (set! n1~self n1)
    (set! n2~self n2)
    (set! n3~self n3)
    (set! n4~self n4))
  
  
  (method override (get-normal1)
    n1)
  
  (method override (get-normal2)
    n2)
  
  (method override (get-normal3)
    n3)
  
  (method override (get-normal4)
    n4)))
