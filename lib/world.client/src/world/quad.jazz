;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; Quads
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.quad jazz


(import (world.geometry)
        (world.polygon))


(definition public (make-quad element v1 v2 v3 v4)
  (new Quad element (vector v1 v2 v3 v4)))


(definition public (make-smooth-quad element v1 v2 v3 v4 n1 n2 n3 n4)
  (new Smooth-Quad element (vector v1 v2 v3 v4) n1 n2 n3 n4))


;;;
;;;; Quad
;;;


(class Quad extends Polygon
  
  
  (method override (triangle-count) <fx>
    2)
  
  
  (method override (add-triangles uv <f32vector> depth <fl> add)
    (let ((v1 (get-v1))
          (v2 (get-v2))
          (v3 (get-v3))
          (v4 (get-v4))
          (n1 (get-normal1))
          (n2 (get-normal2))
          (n3 (get-normal3))
          (n4 (get-normal4)))
      (add v1 n1 0 1 0
           v2 n2 2 3 0
           v3 n3 4 5 0
           uv
           depth)
      (add v3 n3 4 5 0
           v4 n4 6 7 0
           v1 n1 0 1 0
           uv
           depth)))
  
  
  (method override (iterate-triangles proc)
    (let ((v1 (get-v1))
          (v2 (get-v2))
          (v3 (get-v3))
          (v4 (get-v4)))
      (proc v1 v2 v3)
      (proc v3 v4 v1)))
  
  
  (method public (get-v1)
    (vector-ref vertices 0))
  
  (method public (get-v2)
    (vector-ref vertices 1))
  
  (method public (get-v3)
    (vector-ref vertices 2))
  
  (method public (get-v4)
    (vector-ref vertices 3))
  
  
  (method public virtual (get-normal1)
    normal)
  
  (method public virtual (get-normal2)
    normal)
  
  (method public virtual (get-normal3)
    normal)
  
  (method public virtual (get-normal4)
    normal)
  
  
  (method override (copy-polygon) <Polygon>
    (allocate Quad
              (copy-vertex origin)
              (copy-vertex normal)
              element
              (vector (copy-vertex (get-v1))
                      (copy-vertex (get-v2))
                      (copy-vertex (get-v3))
                      (copy-vertex (get-v4)))
              radius
              data1
              data2))
  
  
  (method override (transform-polygon matrix <f64vector> inverse-matrix <f64vector>) <Polygon>
    (allocate Quad
              (matrix-transform-3x4 matrix origin)
              (transform-normal normal inverse-matrix)
              element
              (vector (matrix-transform-3x4 matrix (get-v1))
                      (matrix-transform-3x4 matrix (get-v2))
                      (matrix-transform-3x4 matrix (get-v3))
                      (matrix-transform-3x4 matrix (get-v4)))
              radius
              data1
              data2))
  
  
  (method override (polygon-move! vect <f64vector> offset <fx> matrix <f64vector+>) <void>
    (let ((v1 (get-v1))
          (v2 (get-v2))
          (v3 (get-v3))
          (v4 (get-v4)))
      (matrix+-transform-3x4->offset! vect (+ offset  0) matrix origin)
      (matrix+-transform-3x4->offset! vect (+ offset  3) matrix v1)
      (matrix+-transform-3x4->offset! vect (+ offset  6) matrix v2)
      (matrix+-transform-3x4->offset! vect (+ offset  9) matrix v3)
      (matrix+-transform-3x4->offset! vect (+ offset 12) matrix v4)
      (f64vector-set! vect (+ offset 15) radius)
      (f64vector-set! vect (+ offset 16) data1)
      (f64vector-set! vect (+ offset 17) data2)))
  
  
  (method override (polygon-extract! elem vect <f64vector> offset <fx> matrix <f64vector+>) <void>
    (matrix+-transform-3x4-offset! origin~self matrix vect offset)
    (matrix+-transform-3x4-offset! (get-v1) matrix vect (+ offset  3))
    (matrix+-transform-3x4-offset! (get-v2) matrix vect (+ offset  6))
    (matrix+-transform-3x4-offset! (get-v3) matrix vect (+ offset  9))
    (matrix+-transform-3x4-offset! (get-v4) matrix vect (+ offset 12))
    (polygon-normal! normal~self vertices)
    (set! element~self elem)
    (set! radius~self (polygon-radius origin vertices))
    (set! data1~self (f64vector-ref vect (+ offset 16)))
    (set! data2~self (f64vector-ref vect (+ offset 17)))))


;;;
;;;; Smooth-Quad
;;;


(class Smooth-Quad extends Quad
  
  
  (slot n1 <f64vector> getter generate)
  (slot n2 <f64vector> getter generate)
  (slot n3 <f64vector> getter generate)
  (slot n4 <f64vector> getter generate)
  
  
  (method override (initialize element vertices n1 n2 n3 n4)
    (nextmethod element vertices)
    (set! n1~self n1)
    (set! n2~self n2)
    (set! n3~self n3)
    (set! n4~self n4))
  
  
  (method override (get-normal1)
    n1)
  
  (method override (get-normal2)
    n2)
  
  (method override (get-normal3)
    n3)
  
  (method override (get-normal4)
    n4)))
