;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; Scripting Contour
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.contour jazz


;;;
;;;; Category
;;;


(class Contour-Category extends Object
  
  
  (slot name getter generate)
  (slot rank getter generate)
  
  
  (method override (initialize self name rank)
    (set! self.name name)
    (set! self.rank rank))
  
  
  (method override (print self output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{a}" name)))))


(definition package contour-categories <table>
  (make-table test: eq?))

(definition package (register-contour-category name (rank: rank #f))
  (let ((category (new Contour-Category name rank)))
    (table-set! contour-categories name category)
    category))


(definition public (name->contour-category name)
  (table-ref contour-categories name))


(definition public (sorted-contour-categories)
  (sort < (table-values contour-categories) key: get-rank))


;;;
;;;; Contour
;;;


(class Contour extends Object
  
  
  (slot name      getter generate)
  (slot signature getter generate)
  (slot category  getter generate)
  
  
  (method override (initialize self name signature category)
    (set! self.name name)
    (set! self.signature signature)
    (set! self.category category))
  
  
  (method override (print self output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{a}" name)))))


(definition protected contours <table>
  (make-table test: eq?))


(definition public (registered-contours)
  contours)


(definition public (register-contour name signature (category: category #f))
  (let ((contour (new Contour name signature category)))
    (table-set! contours name contour)
    (unspecified)))


(definition public (registered-contour name)
  (table-ref contours name #f))


(definition public (sorted-category-contours category)
  (sort nu<? (collect-if (lambda (contour)
                           (eq? (get-category contour) (get-name category)))
                         (table-values contours))
    key: get-name)))
