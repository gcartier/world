;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; Speed Determination
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.speed jazz


(import (world)
        (world.animation)
        (world.asset)
        (world.context)
        (gaea.geometry))


(definition (estimate-model-speeds model feet-bones)
  (define (foot-speed name bone)
    (let ((animation (find-animation model name)))
      (let ((morphing (new Morphing animation)))
        (let ((morph (vector-ref (get-morphs morphing) bone))
              (frames (get-total-frames animation))
              (duration (get-frame-duration animation))
              (speeds (new-queue))
              (previous-x #f))
          (loop (for frame from 0 to frames)
                (goto-frame morphing (cast <fl> frame))
                (let ((x (vertex-x (matrix-transform (get-global-matrix morph) (vertex 0. 0. 0.)))))
                  (when previous-x
                    (let ((speed (/ (- previous-x x) duration)))
                      (when (> speed 0.)
                        (enqueue speeds speed))))
                  (set! previous-x x)))
          (let ((speeds (queue-list speeds)))
            (apply max speeds))))))
  
  (define (calculate-speed name)
    (let ((speeds (map (lambda (bone)
                         (foot-speed name bone))
                       feet-bones)))
      ;; not clear if we should take min max or average
      (average speeds)))
  
  (values (calculate-speed "Walk")
          (calculate-speed "Run")))


(definition public (estimate-speeds)
  (let ((world (current-world)))
    (for-each (lambda (asset)
                (let ((model (find-model world (string-path asset))))
                  (let ((name (get-name model))
                        (feet-bones (get-feet-bones model)))
                    (when feet-bones
                      (bind-values (walk run) (estimate-model-speeds model feet-bones)
                        (debug-string (format "{a}{&}{r precision: 1}{&}{r precision: 1}{%}" name walk run)))))))
              (collect-models world)))))
