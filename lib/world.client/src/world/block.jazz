;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Blocks
;;;


(module world.block jazz


(import (jazz.geometry)
        (jazz.graphic)
        (jazz.graphic.opengl.glew)
        (jazz.io)
        (jazz.jml)
        (jazz.library)
        (jazz.literals)
        (jazz.media)
        (jazz.network)
        (jazz.platform)
        (jazz.platform.cairo)
        (jazz.runtime)
        (jazz.system)
        (jazz.ui)
        (jazz.ui.dialog)
        (jazz.ui.window)
        (time)
        (world.autoload)
        (world.client.window)
        (world.foreign)
        (world.geometry)
        (world.object)
        (world.sprite)
        (world.texture)
        (world.window))


;;;
;;;; Block
;;;


(class Block extends Sprite
  
  (slot block-location <int> initialize #f accessors generate)
  (slot block-texture-location <int> initialize #f accessors generate)
  (slot block-shader <Object> initialize #f accessors generate)
  (slot w initialize #f accessors generate)
  
  (method override (prepare rest)
    (nextmethod rest)
    (set! width 5.)
    (set! height 5.)
    (set! depth 5.)
    (set! w world)
    (set-texture (get-block-texture~ world))
    (set! block-location (get-block-location~ world))
    (set! block-shader (get-block-shader~ world))
    (set! block-texture-location (get-block-texture-location~ world))
    (set-color (or (get-block-color~ world) {Color red: 134 green: 82 blue: 1})))
  
  (method public override (update-position)
    (nextmethod)
    @w(create/update-vbo))
  
  (method protected (create/update-vbo)
    (when (not vao)
      (set! vao (glGenBuffers*))
      (let ((vertices (triangles->vertices (sprite-triangles))))
        (create-vertex-buffer vertices))))
  
  (method protected (triangles->vertices vertices)
    (let ((f32 (make-f32vector (* (length vertices) 3))))
      (let (iter (n 0) (scan vertices))
        (if (null? scan)
            f32
          (let ((vert (car scan)))
            (f32vector-set! f32 n (vertex-x vert))
            (f32vector-set! f32 (+ n 1) (vertex-y vert))
            (f32vector-set! f32 (+ n 2) (vertex-z vert)))
          (iter (+ n 3) (cdr scan))))))
  
  (method (create-vertex-buffer vertices)
      (glBindBuffer GL_ARRAY_BUFFER vao)
      (glBufferDataFloat* GL_ARRAY_BUFFER (f32vector-length vertices) vertices GL_STATIC_DRAW)
      (glBindBuffer GL_ARRAY_BUFFER 0))
  
  (method override (draw-3d-textured)
    )
  
  @w(method override (draw-3d-textured)
    (activate~ block-shader)
    (glActiveTexture GL_TEXTURE0)
    (glBindTexture GL_TEXTURE_2D (get-texture~ texture))
    (glUniform1i block-texture-location 0)

    (glEnableVertexAttribArray block-location)
    
    (glBindBuffer GL_ARRAY_BUFFER vao)
    (glVertexAttribPointer block-location 3 GL_FLOAT GL_FALSE 0 #f)
    (glDrawArrays GL_TRIANGLES 0 (length (sprite-triangles)))
    (glDisableVertexAttribArray block-location)
    (glBindBuffer GL_ARRAY_BUFFER 0)
    (deactivate~ block-shader))
  
  @w(method override (draw-3d-textured)
    (glPushMatrix)
    (glTranslatef x y z)
    (glRotatef rtri 1.0 1.0 1.0)
    (glScalef 1.0 1.0 1.0)
    (let ((f -2.5)
          (t 2.5))
      ;; top
      (glNormal3f 0.0 1.0 0.0)
      (textured-quad~ texture
        (lambda () (glVertex3f t t f))
        (lambda () (glVertex3f f t f))
        (lambda () (glVertex3f f t t))
        (lambda () (glVertex3f t t t)))
      ;; bottom
      (glNormal3f 0.0 -1.0 0.0)
      (textured-quad~ texture
        (lambda () (glVertex3f t f t))
        (lambda () (glVertex3f f f t))
        (lambda () (glVertex3f f f f))
        (lambda () (glVertex3f t f f)))
      ;; front
      (glNormal3f 0.0 0.0 1.0)
      (textured-quad~ texture
        (lambda () (glVertex3f f f t))
        (lambda () (glVertex3f t f t))
        (lambda () (glVertex3f t t t))
        (lambda () (glVertex3f f t t)))
      ;; back
      (glNormal3f 0.0 0.0 -1.0)
      (textured-quad~ texture
        (lambda () (glVertex3f t f f))
        (lambda () (glVertex3f f f f))
        (lambda () (glVertex3f f t f))
        (lambda () (glVertex3f t t f)))
      ;; left
      (glNormal3f -1.0 0.0 0.0)
      (textured-quad~ texture
        (lambda () (glVertex3f f t t))
        (lambda () (glVertex3f f t f))
        (lambda () (glVertex3f f f f))
        (lambda () (glVertex3f f f t)))
      ;; right
      (glNormal3f 1.0 0.0 0.0)
      (textured-quad~ texture
        (lambda () (glVertex3f t t f))
        (lambda () (glVertex3f t t t))
        (lambda () (glVertex3f t f t))
        (lambda () (glVertex3f t f f))))
    (glPopMatrix))
  
  )


(class Block-Red extends Block
  
  
  (form
    (<install> color: {Color Red})))


(class Block-Green extends Block
  
  
  (method override (prepare rest)
    (nextmethod rest)
    (set-color {Color Green})))


(class Block-Blue extends Block
  
  
  (method override (prepare rest)
    (nextmethod rest)
    (set-color {Color Blue}))))
