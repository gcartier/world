;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; World Window
;;;


(module world.window jazz


(import (jazz.graphic)
        (jazz.graphic.opengl.autoload)
        (jazz.graphic.opengl.glew)
        (jazz.library)
        (jazz.literals)
        (jazz.platform)
        (jazz.platform.cairo)
        (jazz.ui)
        (jazz.ui.view)
        (jazz.ui.window)
        (world)
        (world.autoload)
        (world.interface)
        (world.syntax (phase syntax)))


(class World-Window extends OpenGL-Window
  
  
  (slot down-interface? initialize #f getter generate)
  
  
  (method override (destroy)
    (destroy~ (current-world))
    (nextmethod))
  
  
  ;;;
  ;;;; Scene
  ;;;
  
  
  (method override (draw-scene)
    (let ((world (current-world+)))
      (when world
        (if (eq? (testing) 'time) 
            (time (render-world~ world))
          (render-world~ world)))))
  
  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method override (size-change state size)
    (let ((world (current-world+)))
      (when world
        (set-width~ world (cast <fl> (get-width~ size)))
        (set-height~ world (cast <fl> (get-height~ size)))))
    (nextmethod state size))
  
  
  (method override (resize-scene width height)
    (nextmethod width height)
    (let ((world (current-world+)))
      (when world
        (resize-scene~ world))))

  
  (method override (cursor-update hit)
    (if hit
        (cursor-update~ (current-world))
      (nextmethod hit)))
  
  
  (method override (mouse-down h v)
    (let ((world (current-world)))
      (let ((view (find-view (new Point h v))))
        (if (get-explore-interface?~ world)
            (begin
              (set-explore-interface?~ world #f)
              (set-% view))
          (set! down-interface? (and view (is-not? view World-Interface)))
          (if down-interface?
              (nextmethod h v)
            (bring-to-front)
            (acquire-capture)
            (acquire-focus)
            (mouse-down~ world h v))))))
  
  
  (method override (mouse-move h v)
    (let ((world (current-world)))
      (if (get-explore-interface?~ world)
          (display-status~ world (format "{a}" (find-view (new Point h v))))
        (if down-interface?
            (nextmethod h v)
          (mouse-move~ world h v)))))
  
  
  (method override (mouse-up h v)
    (let ((world (current-world)))
      (if down-interface?
          (nextmethod h v)
        (release-capture)
        (mouse-up~ world h v))))
  
  
  (method override (right-mouse-down h v)
    (let ((world (current-world)))
      (acquire-capture)
      (right-mouse-down~ world h v)))
  
  
  (method override (right-mouse-up h v)
    (let ((world (current-world)))
      (release-capture)
      (right-mouse-up~ world h v)))
  
  
  (method override (mouse-wheel h v delta)
    (let ((world (current-world)))
      (mouse-wheel~ world h v delta)))
  
  
  (method override (key-down c)
    (let ((world (current-world)))
      (if (get-focus)
          (nextmethod c)
        (key-down~ world c))))
  
  
  (method override (key-press c)
    (let ((world (current-world)))
      (if (get-focus)
          (nextmethod c)
        (key-press~ world c))))
  
  
  (method (toggle-fullscreen)
    (set! fullscreen? (not fullscreen?))
    (if fullscreen?
        (set-fullscreen-mode)
      (reset-fullscreen-mode)))))
