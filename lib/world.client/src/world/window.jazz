;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Window
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.window jazz


(import (jazz.application)
        (jazz.debuggee)
        (jazz.geometry)
        (jazz.opengl)
        (jazz.platform)
        (jazz.screen)
        (jazz.view)
        (jazz.window)
        (world)
        (world.autoload)
        (world.context)
        (world.geometry)
        (world.hook)
        (world.interface)
        (world.interface.sheet)
        (world.pane)
        (world.ray)
        (world.settings)
        (world.support)
        (world.task))


(definition public window-fullscreen?
  ;; temporary until fullscreen crash fixed
  (cond-expand
    (windows
     #f)
    (else
     (if (neq? fullscreen? 'default)
         fullscreen?
       (world-setting 'world.fullscreen? #f @until-retina-incorrect-in-fullscreen-fixed (and (window?) (not (get-controller-debugger))))))))


(definition public (with-window-cursor cursor thunk)
  (if (not (window?))
      (thunk)
    (let ((window (current-window)))
      (unwind-protect
          (begin
            (set-cursor cursor)
            (thunk)
            @fix-me-this-can-cause-all-sorts-of-problems
            (prog1 (thunk)
              (render-scene window)))
        (cursor-update window #t)))))


(definition protected inhibit-paint?
  #f)

(definition protected (set-inhibit-paint? flag)
  (set! inhibit-paint? flag))


(class World-Window extends OpenGL-Window
  
  
  (slot window-cursor initialize #f  getter generate)
  (slot sheets        initialize '() getter generate)
  (slot panes         initialize '() getter generate)
  (slot down-mousable initialize #f  getter generate)
  (slot last-mousable initialize #f  getter generate)
  
  
  (method override (destroy self)
    (destroy (current-world))
    (nextmethod self))
  
  
  ;;;
  ;;;; Render
  ;;;
  
  
  (method override (render-ready? self)
    (let ((zone (current-zone+)))
      (and zone (get-ready? zone))))
  
  
  @fix-me-this-can-cause-all-sorts-of-problems
  (method override (render-scene self)
    )
  
  
  (cond-expand
    (windows
     ;; fixes horrible flicker
     (method override (paint self update-region . platform-data)
       (with-platform-painting self platform-data
         (lambda (surface)
           ))))
    (mac
     ;; needed for mac resizing
     (method override (paint self update-region . platform-data)
       (with-platform-painting self platform-data
         (lambda (surface)
           (when (window?)
             (when (reshaping?)
               (unless inhibit-paint?
                 (unless being-debugged?
                   (with-reentrant-task-mutex
                     (lambda ()
                       (when (render-ready? self)
                         (draw-scene self)
                         (render-sync self))))))))))))
    (else))
  
  
  ;; can only be called by above paint
  (method override (draw-scene self)
    (let ((world (current-world+)))
      (when world
        (render-frame world))))
  
  
  ;;;
  ;;;; Cursor
  ;;;
  
  
  (method public (set-window-cursor self cursor)
    (set! window-cursor cursor)
    (update-window-cursor self))

  
  (method package (update-window-cursor self)
    (when (and window-cursor (world-focused?) (not (current-drag-drop)))
      (set-cursor window-cursor)))
  
  
  ;;;
  ;;;; Size
  ;;;
  
  
  (method override (size-change self state size)
    (let ((world (current-world+)))
      (when world
        (size-change world size)))
    (nextmethod self state size))
  
  
  (method override (resize-scene self width height)
    (nextmethod self width height)
    (let ((world (current-world+)))
      (when world
        (resize-scene world))))
  
  
  ;;;
  ;;;; Sheets
  ;;;
  
  
  (method public (register-sheet self sheet)
    (unless (memq? sheet sheets)
      (set! sheets (cons sheet sheets))))
  
  
  (method public (unregister-sheet self sheet)
    (set! sheets (remove! sheet sheets)))
  
  
  (method public (bring-sheet-to-front self sheet)
    (set! sheets (cons sheet (remove! sheet sheets))))
  
  
  (method public (send-sheet-to-back self sheet)
    (set! sheets (append! (remove! sheet sheets) (list sheet))))
  
  
  (method protected (find-sheet self x <fl> y <fl>)
    (let ((pos (new Point (fxround x) (fxround y))))
      (continuation-capture
        (lambda (return)
          (for-each (lambda (sheet)
                      (when (and (mousable? sheet)
                                 (in-rect? pos (get-rect sheet)))
                        (let ((pos (screen->sheet-coordinates self sheet x y)))
                          (continuation-return return (values sheet pos)))))
                    sheets)
          #f))))
  
  
  (method protected (screen->sheet-coordinates self sheet x <fl> y <fl>)
    (let ((position (get-position sheet))
          (size (get-size sheet)))
      (let ((x (- x (cast <fl> (get-h position))))
            (y (- y (cast <fl> (get-v position)))))
        (let ((sx (/ (* x 1280.) (cast <fl> (get-width size))))
              (sy (/ (* y 720.) (cast <fl> (get-height size)))))
          (new Point$fl$ sx sy)))))
  
  
  ;;;
  ;;;; Panes
  ;;;
  
  
  (method public (register-pane self pane)
    (unless (memq? pane panes)
      (set! panes (cons pane panes))))
  
  
  (method public (unregister-pane self pane)
    (set! panes (remove! pane panes)))
  
  
  (method protected (find-pane self x <fl> y <fl>)
    (bind-values (position direction) (screen->world (current-camera) x y)
      (let ((hits (collect (lambda (pane)
                             (and (mousable? pane)
                                  (let ((expanse (get-expanse pane))
                                        (resolution (get-resolution pane))
                                        (matrix (get-matrix pane)))
                                    (let ((info (ray-intersect-pane position direction expanse resolution matrix)))
                                      (and info
                                           (receive (point pos) info
                                             (cons (cons pane pos) (vertex-distance position point))))))))
                           panes)))
        (and (not-null? hits)
             (bind (pane . pos) (caar (sort < hits key: cdr))
               (values pane pos))))))
  
  
  (method protected (screen->pane-coordinates self pane x <fl> y <fl>)
    (let ((expanse (get-expanse pane))
          (resolution (get-resolution pane))
          (matrix (get-matrix pane)))
      (bind-values (position direction) (screen->world (current-camera) x y)
        (let ((info (ray-intersect-pane position direction expanse resolution matrix #t)))
          (and info
               (receive (point pos) info
                 pos))))))
  
  
  ;;;
  ;;;; Mousable
  ;;;
  
  
  (method (find-mousable self x <fl> y <fl>)
    (or (find-pane self x y)
        (find-sheet self x y)))
  
  
  (method (screen->mousable-coordinates self mousable x <fl> y <fl>)
    (if (is? mousable World-Pane)
        (screen->pane-coordinates self mousable x y)
      (screen->sheet-coordinates self mousable x y)))
  
  
  ;;;
  ;;;; Mouse
  ;;;
  
  
  (method override (mouse-down self h v)
    (unless being-debugged?
      (with-task-mutex
        (lambda ()
          (let ((world (current-world))
                (zone (current-zone))
                (view (find-view self (new Point h v))))
            (mouse-down zone h v)
            (cond ((get-explore-interface? world)
                   (set-explore-interface? world #f)
                   (set-window-cursor (current-window) :arrow)
                   (set-% view))
                  ((and view (is-not? view World-Interface))
                   (nextmethod self h v))
                  ((find-mousable self h v)
                   => (lambda (info)
                        (receive (mousable pos) info
                          (set! down-mousable mousable)
                          (set! last-mousable mousable)
                          (mousable-down mousable (get-h pos) (get-v pos)))))
                  (else
                   ;; weird showcase behavior
                   (cond-expand
                     ((not x11)
                      (bring-to-front self))
                     (else))
                   (acquire-capture self)
                   (acquire-focus self)
                   (set-mouse-down? #t)
                   (mouse-down world h v))))))))
  
  
  (method override (mouse-moved self x y)
    (unless being-debugged?
      (with-task-mutex
        (lambda ()
          (let ((world (current-world))
                (zone (current-zone))
                (view (find-view self (new Point (fxround x) (fxround y)))))
            (mouse-moved zone x y)
            (cond ((get-explore-interface? world)
                   (display-status world (format "{a}" view)))
                  ((and (not (get-down? world)) (not (is-moving? world)) (not down-mousable) (or (get-mouse-down-view) (and view (is-not? view World-Interface))))
                   (nextmethod self x y))
                  (down-mousable
                   (let ((pos (screen->mousable-coordinates self down-mousable x y)))
                     (when pos
                       (mousable-moved down-mousable (get-h pos) (get-v pos)))))
                  (else
                   (when (get-mouse-in)
                     (dispatch-mouse-leave (get-mouse-in)))
                   (reset-mouse-in)
                   (mouse-moved world x y))))
          (update-window-cursor self)))))
  
  
  (method override (mouse-up self h v)
    (unless being-debugged?
      (with-task-mutex
        (lambda ()
          (let ((world (current-world))
                (zone (current-zone))
                (view (find-view self (new Point h v))))
            (mouse-up zone h v)
            (cond ((and (not (get-down? world)) (not (is-moving? world)) (not down-mousable) (or (get-mouse-down-view) (and view (is-not? view World-Interface))))
                   (nextmethod self h v))
                  (down-mousable
                   (let ((mousable down-mousable))
                     (set! down-mousable #f)
                     (let ((pos (screen->mousable-coordinates self mousable h v)))
                       (when pos
                         (mousable-up mousable (get-h pos) (get-v pos))))))
                  (else
                   (release-capture self)
                   (set-mouse-down? #f)
                   (mouse-up world h v))))))))
  
  
  (method override (double-click self h v)
    (unless being-debugged?
      (with-task-mutex
        (lambda ()
          (let ((world (current-world))
                (zone (current-zone))
                (view (find-view self (new Point h v))))
            (double-click zone h v)
            (cond ((and (not (get-down? world)) (not (is-moving? world)) (not down-mousable) view (is-not? view World-Interface))
                   (nextmethod self h v))
                  ((find-mousable self h v)
                   => (lambda (info)
                        (receive (mousable pos) info
                          (if #f @wait (eq? mousable (get-window-focus))
                              (nextmethod self h v)
                            (if (neq? mousable last-mousable)
                                (mousable-down mousable (get-h pos) (get-v pos))
                              (if together?
                                  (mousable-double mousable (get-h pos) (get-v pos))
                                (when (and (get-root mousable)
                                           (is? mousable World-Pane))
                                  (look-at mousable))))))))
                  (else
                   (release-capture self)
                   (double-click world h v))))))))
  
  
  (method override (multiple-click self count h v)
    (unless being-debugged?
      (with-task-mutex
        (lambda ()
          (let ((world (current-world))
                (zone (current-zone))
                (view (find-view self (new Point h v))))
            (multiple-click zone h v)
            (cond ((and (not (get-down? world)) (not (is-moving? world)) view (is-not? view World-Interface))
                   (nextmethod self count h v))
                  ((find-mousable self h v)
                   => (lambda (info)
                        (receive (mousable pos) info
                          (if (neq? mousable last-mousable)
                              (mousable-down mousable (get-h pos) (get-v pos))
                            (mousable-multiple mousable count (get-h pos) (get-v pos))))))
                  (else
                   (release-capture self)
                   (if (odd? count)
                       (mouse-down world h v)
                     (double-click world h v)))))))))
  
  
  (method override (right-mouse-down self h v)
    (unless being-debugged?
      (with-task-mutex
        (lambda ()
          (let ((world (current-world))
                (zone (current-zone))
                (view (let ((pos (new Point h v)))
                        ;; quick pass-through hacks to be improved
                        (let ((view (find-view self pos)))
                          (if (and (is? view world.interface.inventory:Inventory-Slot)
                                   (get-id view))
                              view
                            (find-view self pos
                                       ignore: (let ((interface (current-interface)))
                                                 (list (child interface 'map)
                                                       (child interface 'compass)
                                                       (child interface 'combat)
                                                       (child interface 'character)
                                                       (child interface 'bag)
                                                       (child interface 'belt)
                                                       (child interface 'chest)
                                                       (child interface 'crafting)))))))))
            (mouse-action zone h v)
            (cond ((and view (is-not? view World-Interface))
                   (nextmethod self h v))
                  ((find-mousable self h v)
                   => (lambda (info)
                        (receive (mousable pos) info
                          (set! down-mousable mousable)
                          (set! last-mousable mousable)
                          (mousable-right-down mousable (get-h pos) (get-v pos)))))
                  (else
                   (acquire-capture self)
                   (set-mouse-right-down? #t)
                   (right-mouse-down world h v))))))))
  
  
  (method override (right-mouse-up self h v)
    (unless being-debugged?
      (with-task-mutex
        (lambda ()
          (let ((world (current-world))
                (zone (current-zone))
                (view (find-view self (new Point h v))))
            (mouse-action zone h v)
            (cond ((and (not (get-down? world)) (not (is-moving? world)) (or (get-mouse-down-view) (and view (is-not? view World-Interface))))
                   (nextmethod self h v))
                  (down-mousable
                   (let ((mousable down-mousable))
                     (set! down-mousable #f)
                     (let ((pos (screen->mousable-coordinates self mousable h v)))
                       (when pos
                         (mousable-right-up mousable (get-h pos) (get-v pos))))))
                  (else
                   (release-capture self)
                   (set-mouse-right-down? #f)
                   (right-mouse-up world h v))))))))
  
  
  (method override (mouse-wheel self h v delta)
    (unless being-debugged?
      (with-task-mutex
        (lambda ()
          (let ((world (current-world)))
            (cond ((get-mouse-in)
                   (nextmethod self h v delta))
                  ((find-mousable self h v)
                   => (lambda (info)
                        (receive (mousable pos) info
                          (mousable-wheel mousable (get-h pos) (get-v pos) delta))))
                  (else
                   (mouse-wheel world h v delta))))))))
  
  
  ;;;
  ;;;; Keyboard
  ;;;
  
  
  (method override (key-down self c)
    (unless being-debugged?
      (with-task-mutex
        (lambda ()
          (let ((world (current-world)))
            (if (world-focused?)
                (key-down world c)
              (nextmethod self c)))))))
  
  
  (method override (key-press self c)
    (unless being-debugged?
      (with-task-mutex
        (lambda ()
          (let ((world (current-world)))
            (if (world-focused?)
                (key-press world c)
              (nextmethod self c)))))))
  
  
  (method override (key-up self c)
    (unless being-debugged?
      (with-task-mutex
        (lambda ()
          (let ((world (current-world)))
            (if (world-focused?)
                (key-up world c)
              (nextmethod self c))))))))


;;;
;;;; Live
;;;


(definition public (tile-server/clients clients)
  (cond-expand
    (cocoa
     (let ((handle (and (window?) (get-handle (current-toplevel)))))
       (let ((rect (get-frame-rect (main-screen))))
         (let ((left (get-left rect))
               (top (get-top rect))
               (right (get-right rect))
               (bottom (get-bottom rect))
               (mode 'horizontal))
           (case mode
             ((vertical)
              (let ((screen-width (- right left)))
                (let ((area-width (fxround (percent screen-width 45.5)))
                      (area-height (- bottom top)))
                  (when handle
                    (with-NSRect (new Rect area-width 0 screen-width bottom)
                      (lambda (rect)
                        (platformEnterWindowed handle rect #f))))
                  (when (not-null? clients)
                    (let ((count (length clients))
                          (maximum 5)
                          (rank 0))
                      (let ((horizontal (+ (quotient (- count 1) maximum) 1))
                            (vertical (min maximum count)))
                        (let ((width (fxround (exact->inexact (/ area-width horizontal))))
                              (height (fxround (exact->inexact (/ area-height vertical)))))
                          (for-each (lambda (client)
                                      (let ((horz (quotient rank maximum))
                                            (vert (modulo rank maximum)))
                                        (let ((left (* width horz))
                                              (top (* height vert)))
                                          (let ((right (+ left width))
                                                (bottom (+ top height)))
                                            (let ((rect (new Rect left top right bottom)))
                                              (position-client client rect)))))
                                      (increase! rank))
                                    clients))))))))
             ((horizontal)
              (let ((screen-height (- bottom top)))
                (let ((area-width (- right left))
                      (area-height (fxround (percent screen-height 45.5)))
                      (server-position (if (window?) 'bottom 'none)))
                  (when handle
                    (with-NSRect (case server-position
                                   ((top)
                                    (new Rect 0 area-height right screen-height))
                                   ((bottom)
                                    (new Rect 0 0 right area-height)))
                      (lambda (rect)
                        (platformEnterWindowed handle rect #f))))
                  (when (not-null? clients)
                    (let ((count (length clients))
                          (maximum 5)
                          (rank 0))
                      (let ((horizontal (min maximum count))
                            (vertical (+ (quotient (- count 1) maximum) 1)))
                        (let ((width (fxround (exact->inexact (/ area-width horizontal))))
                              (height (fxround (exact->inexact (/ area-height vertical)))))
                          (for-each (lambda (client)
                                      (let ((horz (modulo rank maximum))
                                            (vert (quotient rank maximum)))
                                        (let ((left (* width horz))
                                              (top (* height vert)))
                                          (let ((right (+ left width))
                                                (bottom (+ top height)))
                                            (let ((rect (case server-position
                                                          ((top)
                                                           (new Rect left top right bottom))
                                                          ((bottom)
                                                           (new Rect left bottom right screen-height))
                                                          ((none)
                                                           (new Rect left 0 right screen-height)))))
                                              (position-client client rect)))))
                                      (increase! rank))
                                    clients)))))))))))))
    (else)))


(definition public (position-client-window rect)
  (cond-expand
    (cocoa
     (let ((handle (get-handle (current-toplevel))))
       (with-NSRect rect
         (lambda (rect)
           (platformEnterWindowed handle rect #f)))))
    (else)))


(definition public (restore-client-window)
  (cond-expand
    (cocoa
     (let ((handle (get-handle (current-toplevel))))
       (platformExitWindowed handle)))
    (else)))


(definition public (restore-server/clients clients)
  (cond-expand
    (cocoa
     (when (window?)
       (let ((handle (get-handle (current-toplevel))))
         (platformExitWindowed handle)))
     (when (not-null? clients)
       (for-each restore-client clients)))
    (else))))
