;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; World Window
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2013
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.window jazz


(import (jazz.graphic)
        (jazz.graphic.opengl.autoload)
        (jazz.graphic.opengl.glew)
        (jazz.library)
        (jazz.literals)
        (jazz.platform)
        (jazz.platform.cairo)
        (jazz.ui)
        (jazz.ui.view)
        (jazz.ui.window)
        (world)
        (world.autoload)
        (world.interface)
        (world.profiling)
        (world.syntax (phase syntax)))


(class World-Window extends OpenGL-Window
  
  
  (method override (destroy)
    (destroy~ (current-world))
    (nextmethod))
  
  
  ;;;
  ;;;; Scene
  ;;;
  
  
  (method override (draw-scene)
    (let ((world (current-world+)))
      (when world
        (profiling 'render
          (lambda ()
            (render-world~ world))))))
  
  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method override (size-change state size)
    (let ((world (current-world+)))
      (when world
        (set-width~ world (cast <fl> (get-width~ size)))
        (set-height~ world (cast <fl> (get-height~ size)))))
    (nextmethod state size))
  
  
  (method override (resize-scene width height)
    (nextmethod width height)
    (let ((world (current-world+)))
      (when world
        (resize-scene~ world))))

  
  (method override (cursor-update hit)
    (if hit
        (cursor-update~ (current-world))
      (nextmethod hit)))
  
  
  (method override (mouse-down h v)
    (let ((world (current-world))
          (view (find-view (new Point h v))))
      (cond ((get-explore-interface?~ world)
             (set-explore-interface?~ world #f)
             (set-% view))
            ((and view (is-not? view World-Interface))
             (nextmethod h v))
            (else
             (bring-to-front)
             (acquire-capture)
             (acquire-focus)
             (mouse-down~ world h v)))))
  
  
  (method override (mouse-move h v)
    (let ((world (current-world))
          (view (find-view (new Point h v))))
      (cond ((get-explore-interface?~ world)
             (display-status~ world (format "{a}" view)))
            ((and (not (get-down?~ world)) (not (get-moving?~ world)) (or (get-mouse-down-view) (and view (is-not? view World-Interface))))
             (nextmethod h v))
            (else
             (when (get-mouse-in)
               (dispatch-mouse-leave~ (get-mouse-in)))
             (reset-mouse-in)
             (mouse-move~ world h v)))))
  
  
  (method override (mouse-up h v)
    (let ((world (current-world))
          (view (find-view (new Point h v))))
      (if (and (not (get-down?~ world)) (not (get-moving?~ world)) (or (get-mouse-down-view) (and view (is-not? view World-Interface))))
          (nextmethod h v)
        (release-capture)
        (mouse-up~ world h v))))
  
  
  (method override (double-click h v)
    (let ((world (current-world))
          (view (find-view (new Point h v))))
      (if (and (not (get-down?~ world)) (not (get-moving?~ world)) view (is-not? view World-Interface))
          (nextmethod h v)
        (release-capture)
        (double-click~ world h v))))
  
  
  (method override (right-mouse-down h v)
    (let ((world (current-world)))
      (acquire-capture)
      (right-mouse-down~ world h v)))
  
  
  (method override (right-mouse-up h v)
    (let ((world (current-world)))
      (release-capture)
      (right-mouse-up~ world h v)))
  
  
  (method override (mouse-wheel h v delta)
    (let ((world (current-world)))
      (if (get-mouse-in)
          (nextmethod h v delta)
        (mouse-wheel~ world h v delta))))
  
  
  (method override (key-down c)
    (let ((world (current-world)))
      (if (get-focus)
          (nextmethod c)
        (key-down~ world c))))
  
  
  (method override (key-press c)
    (let ((world (current-world)))
      (if (get-focus)
          (nextmethod c)
        (key-press~ world c))))))
