;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Animations
;;;


(module world.animation jazz


(import (jazz.geometry)
        (jazz.graphic)
        (jazz.graphic.opengl.glew)
        (jazz.io)
        (jazz.library)
        (world)
        (world.geometry)
        (world.homogeneous))


(class Animation extends Object
  
  
  (slot model         <object> initialize #f getter generate)
  (slot frame         <fl>     initialize 0. getter generate)
  (slot bone-matrices <object> initialize #f getter generate)
  
  
  (method override (initialize model)
    (set! model~self model))
  
  
  (method public (animate elapse)
    (declare (optimize-dead-local-variables))
    (let ((imported (get-imported~ model)))
      (let ((fps (get-animation-fps~ imported))
            (frames (cast <fl> (get-total-frames~ imported))))
        (let ((new-frame (flmodulo (+ frame (* elapse fps)) frames)))
          (set-frame new-frame)))))
  
  
  (method public (set-frame frame)
    (declare (optimize-dead-local-variables))
    (set! frame~self frame)
    (set! bone-matrices (extract-bone-matrices)))
  
  
  (method (extract-bone-matrices)
    (declare (optimize-dead-local-variables))
    (let ((imported (get-imported~ model)))
      (set-frame~ imported frame)
      (let ((joints (get-joints~ imported)))
        (let ((count (vector-length joints)))
          (let ((content <f32vector> (or bone-matrices (make-f32vector (* 200 16)))))
            (loop (for i from 0 below count)
                  (let ((joint (vector-ref joints i)))
                    (let ((bone-transformation <f32vector> (get-bone-transformation~ joint)))
                      (subf32vector-move! bone-transformation 0 16 content (* i 16)))))
            content)))))))
