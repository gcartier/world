;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Shader Showcase
;;;


(module world.shader jazz


(import (jazz.graphic)
        (jazz.graphic.opengl.autoload)
        (jazz.graphic.opengl.glew)
        (jazz.graphic.opengl.platform)
        (jazz.io)
        (jazz.library)
        (jazz.literals)
        (jazz.media)
        (jazz.network)
        (jazz.platform)
        (jazz.platform.cairo)
        (jazz.runtime)
        (jazz.system)
        (jazz.ui)
        (jazz.ui.window)
        (time)
        (world.geometry))


(definition vs
  #<<SHADER
#version 130

void main()
{
    gl_Position = gl_Vertex;
}
SHADER
)


(definition fs
  #<<SHADER
#version 130

void main()
{
    gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);
}
SHADER
)


(class Shader-Window extends OpenGL-Window
  
  
  (slot triangle initialize #f getter generate)
  
  
  (method override (initialize-opengl)
    ;; Init GLEW
    (glewInit)
    (unless (glewIsSupported "GL_VERSION_3_3")
      (system-message "OpenGL 3.3 not supported")
      (exit 1))
    
    ;; Buffers
    (initialize-buffers)
    
    ;; Program and shaders
    (let ((p (glCreateProgram)))
      (add-shader p vs GL_VERTEX_SHADER)
      (add-shader p fs GL_FRAGMENT_SHADER)
      (glLinkProgram p)
      (glUseProgram p)))
  
  
  (method (initialize-buffers)
    (let ((vertices #f32(-1.0 -1.0 0.0
                          1.0 -1.0 0.0
                          0.0  1.0 0.0)))
      (set! triangle (create-vertex-buffer vertices))))
  
  
  (method (create-vertex-buffer vertices)
    (let ((vbo (glGenBuffers*)))
      (glBindBuffer GL_ARRAY_BUFFER vbo)
      (glBufferData* GL_ARRAY_BUFFER (f32vector-length vertices) vertices GL_STATIC_DRAW)
      vbo))
  
  
  (method (add-shader program shader-text shader-type)
    (let ((shader (glCreateShader shader-type)))
      (glShaderSource shader 1 (list shader-text) #f)
      (glCompileShader shader)
      (let ((success (glGetShaderiv* shader GL_COMPILE_STATUS)))
        (terminal success)
  ;  if (!success) {
  ;      GLchar InfoLog[1024]
  ;      glGetShaderInfoLog(ShaderObj 1024 NULL InfoLog)
  ;      fprintf(stderr "Error compiling shader type %d: '%s'\n" ShaderType InfoLog)
  ;      exit(1)
  ; }
        (glAttachShader program shader))))
  
  
  (method override (draw-scene)
    ;; Dark blue background
    (glClearColor 0.0 0.0 0.0 0.0)
    (glClear GL_COLOR_BUFFER_BIT)
    
    ;; Draw triangle
    (glEnableVertexAttribArray 0)
    (glBindBuffer GL_ARRAY_BUFFER triangle)
    (glVertexAttribPointer 0 3 GL_FLOAT GL_FALSE 0 #f)
    (glDrawArrays GL_TRIANGLES 0 3)
    (glDisableVertexAttribArray 0))))
