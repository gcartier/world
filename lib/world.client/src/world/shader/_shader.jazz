;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Shader Showcase
;;;


(module world.shader jazz


(import (jazz.graphic)
        (jazz.graphic.opengl.autoload)
        (jazz.graphic.opengl.glew)
        (jazz.graphic.opengl.platform)
        (jazz.io)
        (jazz.library)
        (jazz.literals)
        (jazz.media)
        (jazz.network)
        (jazz.platform)
        (jazz.platform.cairo)
        (jazz.runtime)
        (jazz.system)
        (jazz.ui)
        (jazz.ui.window)
        (time)
        (world.geometry))


;;;
;;;; Log
;;;


(definition log?
  #t)

(definition log-port
  #f)


(definition (printlog fmt . rest)
  (when log?
    (unless log-port
      (set! log-port (open-output-file `(path: "log.txt" eol-encoding: ,(get-eol-encoding)))))
    (apply format log-port fmt rest)
    (newline log-port)
    (force-output log-port)))


;;;
;;;; Shaders
;;;


(definition vs
  #<<SHADER
#version 130

void main()
{
    gl_Position = gl_Vertex;
}
SHADER
)


(definition fs
  #<<SHADER
#version 130

void main()
{
    gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);
}
SHADER
)


;;;
;;;; Window
;;;


(class Shader-Window extends OpenGL-Window
  
  
  (slot program     initialize #f getter generate)
  (slot vert-shader initialize #f getter generate)
  (slot frag-shader initialize #f getter generate)
  (slot triangle    initialize #f getter generate)
  
  
  (method override (setup-opengl)
    (create-shaders)
    (create-program))
  
  
  ;;;
  ;;;; Objects
  ;;;
  
  
  (method (initialize-buffers)
    (let ((vertices #f32(-1.0 -1.0 0.0 1.0
                          1.0 -1.0 0.0 1.0
                          0.0  1.0 0.0 1.0)))
      (set! triangle (create-vertex-buffer vertices))
      (printlog "Triangle initialized")))
  
  
  (method (create-vertex-buffer vertices)
    (let ((vbo (glGenBuffers*)))
      (glBindBuffer GL_ARRAY_BUFFER vbo)
      (glBufferDataFloat* GL_ARRAY_BUFFER (f32vector-length vertices) vertices GL_STATIC_DRAW)
      vbo))
  
  
  ;;;
  ;;;; Shaders
  ;;;
  
  
  (method (create-shader shader-text shader-type)
    (printlog "Creating shader")
    (let ((shader (glCreateShader shader-type)))
      (when (= shader 0)
        (error "Error creating shader"))
      (printlog "Setting shader source")
      (glShaderSource shader 1 (list shader-text) #f)
      (printlog "Compiling shader")
      (glCompileShader shader)
      (let ((success (glGetShaderiv* shader GL_COMPILE_STATUS)))
  ;      (when (= success 0)
  ;      GLchar InfoLog[1024]
  ;      glGetShaderInfoLog(ShaderObj 1024 NULL InfoLog)
  ;      (error "Error compiling shader type %d: '%s'\n" ShaderType InfoLog)
  ;      exit(1)
        shader)))
  
  
  (method (create-shaders)
    (set! vert-shader (create-shader vs GL_VERTEX_SHADER))
    (set! frag-shader (create-shader fs GL_FRAGMENT_SHADER)))
  
  
  (method (add-shaders program)
    (printlog "Adding shaders")
    (glAttachShader program vert-shader)
    (glAttachShader program frag-shader))
  
  
  ;;;
  ;;;; Program
  ;;;
  
  
  (method (create-program)
    ;; Buffers
    (initialize-buffers)
    
    ;; Program and shaders
    (let ((p (glCreateProgram)))
      (printlog "Program created")
      (add-shaders p)
      (glLinkProgram p)
      (glUseProgram p)
      (set! program p)))
  
  
  (method (release-program)
    (glDeleteProgram program)
    (set! program #f))
  
  
  ;;;
  ;;;; Draw
  ;;;
  
  
  (method override (draw-scene)
    ;; Dark blue background
    (glClearColor 0.0 0.0 0.0 0.0)
    (glClear GL_COLOR_BUFFER_BIT)
    
    ;; Draw triangle
    (glEnableVertexAttribArray 0)
    (glBindBuffer GL_ARRAY_BUFFER triangle)
    (glVertexAttribPointer 0 4 GL_FLOAT GL_FALSE 0 #f)
    (glDrawArrays GL_TRIANGLES 0 3)
    (glDisableVertexAttribArray 0))))
