;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; World History
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2013
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.history jazz


(import (jazz.graphic)
        (world)
        (world.autoload)
        (world.draw)
        (world.serialization)
        (world.shader)
        (world.shaders)
        (world.syntax (phase syntax)))


;;;
;;;; Parameters
;;;


(definition public in-history?
  (make-parameter #f))


(definition history-fs
  #<<SHADER
#version 120
 
void main()
{
    gl_FragColor = vec4(0.45, 0.95, 0.0, 1.0);
}
SHADER
)


;;;
;;;; Moment
;;;


(class Moment extends Object
  
  
  (slot metadata <object> accessors generate)
  (slot snapshot <object> accessors generate)
  (slot commands <object> accessors generate)
  (slot time     <object> accessors generate)
  (slot elapse   <object> accessors generate)
  
  
  (method override (initialize metadata snapshot commands time elapse)
    (nextmethod)
    (set! metadata~self metadata)
    (set! snapshot~self snapshot)
    (set! commands~self commands)
    (set! time~self time)
    (set! elapse~self elapse))
  
  
  (method meta override (marshall-object obj)
    (serialize-object (class-of obj)
                      (vector
                        (serialize (get-metadata~ obj))
                        (serialize (get-snapshot~ obj))
                        (serialize (get-commands~ obj))
                        (serialize (get-time~ obj))
                        (serialize (get-elapse~ obj)))))
  
  
  (method meta override (unmarshall-object content)
    (bind-vector (metadata snapshot commands time elapse) content
      (new self
        (deserialize metadata)
        (deserialize snapshot)
        (deserialize commands)
        (deserialize time)
        (deserialize elapse)))))


;;;
;;;; History
;;;


(class History extends Object
  
  
  (slot program  <object> initialize #f getter generate)
  (slot moments  <object> initialize #f accessors generate)
  (slot now      <object> initialize #f accessors generate)
  (slot current  <object> initialize #f accessors generate)
  (slot maximum  <fx+>    initialize #f accessors generate)
  (slot first    <fx+>    initialize #f accessors generate)
  (slot count    <fx+>    initialize #f accessors generate)
  (slot log-file <object> initialize #f getter generate)
  (slot log-port <object> initialize #f getter generate)
  
  
  (method override (initialize maximum)
    (nextmethod)
    (set! maximum~self maximum)
    (set! program~self (new Shader-Program name: 'history))
    (set-fs~ program history-fs)
    (set-vs~ program default-vs)
    (link~ program)
    (setup)
    (setup-log))
  
  
  (method (setup)
    (cond ((not maximum)
           (set! moments (new Axis 0))
           (set! now 0))
          (else
           (set! moments (make-vector maximum))
           (set! now 0)
           (set! first 0)
           (set! count 0))))
  
  
  (method (setup-log)
    @wait
    (let ((file (timestamped-file (logger-directory) "history" "log")))
      (create-directories~ file)
      (set! log-file file)
      (set! log-port (open-output-file (path-settings log-file)))))
  
  
  (method meta override (marshall-object obj)
    (serialize-object (class-of obj)
                      (vector
                        (serialize (accumulate (get-moments~ obj) serialize Vector))
                        (serialize (get-now~ obj))
                        (serialize (get-current~ obj))
                        (serialize (get-maximum~ obj))
                        (serialize (get-first~ obj))
                        (serialize (get-count~ obj)))))
  
  
  (method meta override (unmarshall-object content)
    (bind-vector (moments now current maximum first count) content
      (let ((obj (new self maximum)))
        (set-moments~ obj (accumulate moments deserialize Vector))
        (set-now~ obj (deserialize now))
        (set-current~ obj (deserialize current))
        (set-first~ obj (deserialize first))
        (set-count~ obj (deserialize count)))))

  
  (method (history-start)
    0)
  
  
  (method (history-end)
    (if (not maximum)
        (cardinality moments)
      count))
  
  
  (method (history-first)
    0)
  
  
  (method (history-last)
    (- (history-end) 1))
  
  
  (method (historical-index n)
    (modulo (+ first n) maximum))
  
  
  (method (historical-moment n)
    (if (not maximum)
        (element moments n)
      (element moments (historical-index n))))
  
  
  (method (in-history n)
    (max (history-first) (min n (history-end))))
  
  
  (method (add-history moment)
    (cond ((not maximum)
           (axis-add moments moment)
           (increase! now))
          (else
           (let ((index (historical-index count)))
             (set-element! moments index moment)
             (if (< count maximum)
                 (begin
                   (increase! count)
                   (increase! now))
               (set! first (modulo (+ first 1) maximum)))))))
  
  
  (method (backward-history)
    (goto-history (- now 1)))
  
  
  (method (forward-history)
    (goto-history (+ now 1)))
  
  
  (method (goto-history n)
    (let ((world (current-world)))
      (let ((n (in-history n)))
        (unless (= n now)
          (set! now n)
          (if (= n (history-end))
              (load-world~ world current)
            (load-world~ world (get-snapshot~ (historical-moment now))))))))
  
  
  (method (slide-history where)
    (goto-history (fxround (* where (history-end)))))
  
  
  (method (truncate-future)
    (if (not maximum)
        (axis-adjust moments now)
      (set! count now)))
  
  
  (method (step-history)
    (let ((world (current-world))
          (me (current-me)))
      (when (< now (history-end))
        (let ((moment (historical-moment now)))
          (increase! now)
          (when moment
            (let ((commands (get-commands~ moment))
                  (time (get-time~ moment))
                  (elapse (get-elapse~ moment)))
              (complete~ commands)
              (tick-sliced~ world me commands time elapse)
              (tick-actors~ world commands time elapse)))))))
  
  
  (method (recalculate-future)
    (let ((world (current-world)))
      (let ((end (history-end)))
        (loop (for n from now below end)
              (let ((moment (historical-moment n)))
                (let ((commands (get-commands~ moment))
                      (time (get-time~ moment))
                      (elapse (get-elapse~ moment)))
                  (complete~ commands)
                  (tick-actors~ world commands time elapse)
                  (let ((next (+ n 1)))
                    (let ((moment (historical-moment next)))
                      (receive (metadata snapshot) (metadata-snapshot-world~ world)
                        (if (= next end)
                            (set! current snapshot)
                          (set-metadata~ moment metadata)
                          (set-snapshot~ moment snapshot))))))))
        ;; for now
        (if (= now end)
            (load-world~ world current)
          (load-world~ world (get-snapshot~ (historical-moment now)))))))
  
  
  (method (call-with-slider-info proc)
    (let ((world (current-world)))
      (let ((width (fxround (get-width~ world)))
            (height (fxround (get-height~ world))))
        (let ((cx (fxround/ width 2)))
          (proc width height cx
            (let ((end (history-end)))
              (when (> end 0)
                (let ((h (+ (fxround (- (* (/ (cast <fl> now) end) 400.) 200.)) cx)))
                  (new Point h (- height 32))))))))))
  
  
  (method (inside-slider-thumb? h v)
    (call-with-slider-info
      (lambda (width height cx center)
        (and center
             (let ((pt (new Point h (- height v))))
               (<= (distance center pt) 7))))))
  
  
  (method (draw-history-slider)
    (call-with-slider-info
      (lambda (width height cx center)
        (gl-frame-rect (new Rect (- cx 200) (- height 30) (+ cx 200) (- height 31)) {Color Gray})
        (gl-frame-rect (new Rect (- cx 200) (- height 32) (+ cx 200) (- height 33)) {Color Light-Gray})
        (when center
          (gl-segment-circle center 7 {Color Light-Blue} 100)))))
  
  
  (method (draw-history draw-moment)
    (let ((step 1)
          (max 1000))
      ;; past
      (loop (for n from (- now 1) downto (history-first) by step)
            (repeat max)
            (draw-moment n))
      ;; future
      (loop (for n from now to (history-last) by step)
            (repeat max)
            (draw-moment n))))
  
  
  ;;;
  ;;;; Log
  ;;;
  
  
  (method (log-commands commands elapse)
    @wait (
    (format log-port "(commands {s} {s}){%}" (->symbolic~ commands) elapse)
    (force-output log-port)))
  
  
  (method (log-action name arguments)
    @wait (
    (format log-port "({s} {l}){%}" name arguments)
    (force-output log-port)))
  
  
  (method (flush-log)
    @wait (
    (close~ log-port)
    (set! log-port (open-output-file (path-settings log-file append: #t))))))


;;;
;;;; Snapshot
;;;


(class Snapshot extends Object
  
  
  (slot actors    getter generate)
  (slot gadgets   getter generate)
  (slot marks     getter generate)
  (slot sun-angle getter generate)
  
  
  (method override (initialize actors gadgets marks sun-angle)
    (nextmethod)
    (set! actors~self actors)
    (set! gadgets~self gadgets)
    (set! marks~self marks)
    (set! sun-angle~self sun-angle))
  
  
  (method meta override (marshall-object obj)
    (serialize-object (class-of obj)
                      (vector
                        (get-actors~ obj)
                        (get-gadgets~ obj)
                        (get-marks~ obj)
                        (get-sun-angle~ obj))))
  
  
  (method meta override (unmarshall-object content)
    (bind-vector (actors gadgets marks sun-angle) content
      (new self actors gadgets marks sun-angle)))))
