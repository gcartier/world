;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World History
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.history jazz


(import (jazz.component)
        (jazz.event)
        (jazz.network)
        (jazz.view)
        (world)
        (world.autoload)
        (world.binary)
        (world.change)
        (world.context)
        (world.network))


(proclaim (not check bounds)
          (warn optimizations))


;;;
;;;; Id
;;;


(definition protected (make-unique-id)
  (make-f64vector-uuid))


(definition protected (make-f64vector-uuid)
  (let ((bytes (make-u8vector-uuid)))
    (f64vector
      (scan-double bytes 0)
      (scan-double bytes 8))))


;;;
;;;; Literal
;;;


;; 0 is reserved for #f
(definition next-literal-id <fx>
  1)

(definition protected (next-literal-id!) <fx>
  (prog1 next-literal-id
    (increase! next-literal-id)))


(definition protected literal-ids <table>
  (make-table test: equal?))

(definition protected id-literals <table>
  (make-table test: eqv?))

;; open test quicky these should simply go inside the tier
(definition protected (reset-literals)
  (set! next-literal-id 1)
  (set! literal-ids (make-table test: equal?))
  (set! id-literals (make-table test: eqv?)))


(definition public (literal->id literal (tier #f)) <fx>
  (if (not literal)
      0
    (or (table-ref literal-ids literal #f)
        (let ((id (tier-literal->id (cast <Tier> (or tier (current-tier))) literal)))
          (table-set! literal-ids literal id)
          (table-set! id-literals id literal)
          id))))


(definition public (id->literal id <fx> (tier #f))
  (if (= id 0)
      #f
    (or (table-ref id-literals id #f)
        (let ((literal (tier-id->literal (cast <Tier> (or tier (current-tier))) id)))
          (table-set! literal-ids literal id)
          (table-set! id-literals id literal)
          literal))))


;;;
;;;; Logic
;;;


(definition protected stepping-history?
  (make-parameter #f))


(definition protected previous-logic
  #f)

(definition protected at-logic
  #f)

(definition protected logic-continuation
  #f)


(definition any-logic
  '(any))

(definition skip-logic
  '(skip))

(definition complete-logic
  '(complete))

(definition protected logic-request
  #f)


(definition protected logic-again?
  #f)


(definition protected logic-exit
  #f)

(definition (with-logic-exit thunk)
  (continuation-capture
    (lambda (exit)
      (set! logic-exit exit)
      (thunk))))

(definition (exit-logic)
  (let ((exit logic-exit))
    (if exit
        (begin
          (set! logic-exit #f)
          (continuation-return exit #f))
      (error "No available logic exit"))))

(definition (clear-exit)
  (set! logic-exit #f))


(definition (clear-where)
  (set! previous-logic #f)
  (set! at-logic #f)
  (update-at-logic))


(definition (clear-logic (reset-request? #f))
  (set! previous-logic #f)
  (set! at-logic #f)
  (when reset-request?
    (set! logic-request #f))
  (set! logic-continuation #f)
  (update-at-logic))


(definition protected (break-logic-at name)
  (let ((request logic-request))
    (when request
      (set! previous-logic at-logic)
      (set! at-logic name)
      (when (or (eq? request any-logic)
                (eq? request name))
        (update-at-logic)
        (continuation-capture
          (lambda (cont)
            (set! logic-request #f)
            (set! logic-continuation cont)
            (exit-logic)))))))


(definition protected (break-logic-action action)
  (when logic-request
    (action)))


(definition protected (in-logic?)
  (let ((request logic-request))
    (or (and (stepping-history?)
             (eq? request #f))
        (eq? request any-logic)
        (eq? request complete-logic))))


(definition protected (debug-logic . rest)
  (when (in-logic?)
    (execute-event
      (lambda ()
        (apply debug rest)))))


;;;
;;;; Update
;;;


(definition update-at-logic
  (lambda ()
    ))

(definition protected (set-update-at-logic proc)
  (set! update-at-logic proc))


;;;
;;;; History
;;;


(definition index-size <fx>
  8)

(definition time-size <fx>
  3)

(definition metadata-size <fx>
  1)


(definition protected next-sequence-no <fx>
  0)

(definition protected (next-sequence-no!) <fx>
  (prog1 next-sequence-no
    (increase! next-sequence-no)))


(definition protected (copy-history history <History>) <History>
  (let ((copy (new History (get-size history))))
    (subu32vector-move! (get-indexes history) 0 (get-indexes-size history) (get-indexes copy) 0)
    (set-times-head copy (get-times-head history))
    (subf64vector-move! (get-times history) 0 (get-times-size history) (get-times copy) 0)
    (set-changes-head copy (get-changes-head history))
    (subf64vector-move! (get-changes history) 0 (get-changes-size history) (get-changes copy) 0)
    (set-metadatas-head copy (get-metadatas-head history))
    (subvector-move! (get-metadatas history) 0 (get-metadatas-size history) (get-metadatas copy) 0)
    (set-now copy (get-now history))
    (set-head copy (get-head history))
    (set-count copy (get-count history))
    copy))


(class History extends Object
  
  
  (slot size            <fx>        getter generate)
  (slot indexes-size    <fx>        getter generate)
  (slot indexes         <u32vector> getter generate)
  (slot times-size      <fx>        getter generate)
  (slot times-head      <fx>        accessors generate)
  (slot times           <f64vector> getter generate)
  (slot changes-size    <fx>        getter generate)
  (slot changes-head    <fx>        accessors generate)
  (slot changes         <f64vector> getter generate)
  (slot metadatas-size  <fx>        getter generate)
  (slot metadatas-head  <fx>        accessors generate)
  (slot metadatas       <vector>    getter generate)
  (slot now             <fx>        accessors generate)
  (slot head            <fx>        accessors generate)
  (slot count           <fx>        accessors generate)
  (slot paused?         <bool>      accessors generate)
  
  
  (method override (initialize self size <fx>)
    (nextmethod self)
    (set! self.size size)
    (set! indexes-size (* size index-size))
    (set! indexes (make-u32vector indexes-size))
    (set! times-size (* size time-size))
    (set! times-head 0)
    (set! times (make-f64vector times-size))
    (set! changes-size (* size (max-bidirectional-size)))
    (set! changes-head 0)
    (set! changes (make-f64vector changes-size))
    (set! metadatas-size (* size metadata-size))
    (set! metadatas-head 0)
    (set! metadatas (make-vector metadatas-size))
    (set! now 0)
    (set! head 0)
    (set! count 0)
    (set! paused? #f))
  
  
  (method package (pause self)
    (set! paused? #t))
  
  
  (method package (unpause self)
    (clear-logic #t)
    (clear-exit)
    (set! paused? #f))

  
  (method package (history-start self) <fx>
    0)
  
  
  (method package (history-end self) <fx>
    count)
  
  
  (method package (history-first self) <fx>
    0)
  
  
  (method package (history-last self) <fx>
    (- (history-end self) 1))
  
  
  ;; quicky until all rings unified
  (method package (first-position self) <fx>
    0)
  
  
  ;; quicky until all rings unified
  (method package (last-position self) <fx>
    (- (history-end self) 1))
  
  
  (method package (historical-index self n <fx>) <fx>
    (modulo (+ head (* n index-size)) indexes-size))
  
  
  (method package (historical-time self n <fx>) <fl>
    (f64vector-ref times (u32vector-ref indexes (historical-index self n))))
  
  (method package (historical-sent self n <fx>) <fl>
    (f64vector-ref times (+ (u32vector-ref indexes (historical-index self n)) 1)))
  
  (method package (historical-received self n <fx>) <fl>
    (f64vector-ref times (+ (u32vector-ref indexes (historical-index self n)) 2)))
  
  (method package (historical-client-id self n <fx>) <fx>
    (u32vector-ref indexes (+ (historical-index self n) 1)))
  
  (method package (historical-change-id self n <fx>) <fx>
    (u32vector-ref indexes (+ (historical-index self n) 2)))
  
  (method package (historical-sequence-no self n <fx>) <fx>
    (u32vector-ref indexes (+ (historical-index self n) 3)))
  
  (method package (historical-action-index self n <fx>) <fx>
    (u32vector-ref indexes (+ (historical-index self n) 4)))
  
  (method package (historical-forward-index self n <fx>) <fx>
    (u32vector-ref indexes (+ (historical-index self n) 5)))
  
  (method package (historical-backward-index self n <fx>) <fx>
    (u32vector-ref indexes (+ (historical-index self n) 6)))
  
  (method package (historical-metadata-index self n <fx>) <fx>
    (u32vector-ref indexes (+ (historical-index self n) 7)))
  
  
  (method package (historical-metadata self n <fx>)
    (vector-ref metadatas (historical-metadata-index self n)))
  
  
  (method (in-history self n <fx>) <fx>
    (max (history-first self) (min n (history-end self))))
  
  
  (method (times-push self val <fl>)
    (f64vector-set! times times-head val)
    (set! times-head (modulo (+ times-head 1) times-size)))
  
  
  (method (changes-push self val <fl>)
    (f64vector-set! changes changes-head val)
    (set! changes-head (modulo (+ changes-head 1) changes-size)))
  
  
  (method (metadatas-push self val)
    (vector-set! metadatas metadatas-head val)
    (set! metadatas-head (modulo (+ metadatas-head 1) metadatas-size)))
  
  
  (method package (add-change self time <fl> change-id <fx> action forward backward metadata)
    (let ((index (historical-index self now))
          (sequence-no (next-sequence-no!)))
      (assert (/= client-no -1))
      (u32vector-set! indexes index times-head)
      (times-push self time)
      (times-push self +nan.0)
      (times-push self +nan.0)
      (u32vector-set! indexes (+ index 1) client-no)
      (u32vector-set! indexes (+ index 2) change-id)
      (u32vector-set! indexes (+ index 3) sequence-no)
      (u32vector-set! indexes (+ index 4) changes-head)
      (action (~ changes-push self))
      (u32vector-set! indexes (+ index 5) changes-head)
      (forward (~ changes-push self))
      (u32vector-set! indexes (+ index 6) changes-head)
      (backward (~ changes-push self))
      (u32vector-set! indexes (+ index 7) metadatas-head)
      (metadatas-push self metadata)
      (unless (stepping-history?)
        (if (< count size)
            (begin
              (increase! count)
              (increase! now))
          (set! head (modulo (+ head index-size) indexes-size))))
      (unless (standalone?)
        (with-outgoing-mutex
          (lambda ()
            (outgoing-push time)
            (outgoing-push +nan.0)
            (outgoing-push +nan.0)
            (outgoing-push (cast <fl> client-no))
            (outgoing-push (cast <fl> change-id))
            (outgoing-push (cast <fl> sequence-no))
            (forward outgoing-push)
            (backward outgoing-push))))))
  
  
  (method package (add-incoming self time <fl> sent <fl> received <fl> clnt-id <fx> change-id <fx> sequence-no <fx> changes <f64vector> offset <fx>)
    (let ((index (historical-index self now)))
      (u32vector-set! indexes index times-head)
      (times-push self time)
      (times-push self sent)
      (times-push self received)
      (u32vector-set! indexes (+ index 1) clnt-id)
      (u32vector-set! indexes (+ index 2) change-id)
      (u32vector-set! indexes (+ index 3) sequence-no)
      (let ((change (id->change change-id)))
        (let ((action-count (get-action-count change))
              (forward-count (get-forward-count change))
              (backward-count (get-backward-count change)))
          (u32vector-set! indexes (+ index 4) changes-head)
          (loop (repeat action-count)
                (changes-push self +nan.0))
          (u32vector-set! indexes (+ index 5) changes-head)
          (loop (repeat forward-count)
                (changes-push self (f64vector-ref changes offset))
                (increase! offset))
          (u32vector-set! indexes (+ index 6) changes-head)
          (loop (repeat backward-count)
                (changes-push self (f64vector-ref changes offset))
                (increase! offset))))
      (u32vector-set! indexes (+ index 7) metadatas-head)
      (metadatas-push self #f)
      (if (< count size)
          (begin
            (increase! count)
            (increase! now))
        (set! head (modulo (+ head index-size) indexes-size)))))
  
  
  (method package (backward-history self (update-clients? #f))
    (goto-history self (- now 1) update-clients?))
  
  
  (method package (forward-history self (update-clients? #f))
    (goto-history self (+ now 1) update-clients?))
  
  
  (method (goto-now self)
    (goto-history self now))

  
  (method (goto-history self n <fx> (update-clients? #f))
    (let ((n (in-history self n)))
      (when (/= n now)
        (cond ((> n now)
               (loop (for s from now below n)
                     (let ((client-id (historical-client-id self s))
                           (id (historical-change-id self s))
                           (forward-index (historical-forward-index self s)))
                       (forward-change client-id id
                         (lambda ()
                           (prog1 (f64vector-ref changes (modulo forward-index changes-size))
                             (increase! forward-index)))))))
              (else
               (loop (for s from (- now 1) downto n)
                     (let ((client-id (historical-client-id self s))
                           (id (historical-change-id self s))
                           (backward-index (historical-backward-index self s)))
                       (backward-change client-id id
                         (lambda ()
                           (prog1 (f64vector-ref changes (modulo backward-index changes-size))
                             (increase! backward-index))))))))
        (set! now n)
        (invalidate-slider self)
        (set-?n now)
        ;; annoying to put interface stuff here
        (let ((interface (current-interface)))
          (let ((panel (child interface 'timeline)))
            (when (get-visible? panel)
              (update panel (historical-time self n))))
          (let ((tooltip-context (current-tooltip-context)))
            (when tooltip-context
              (let ((view (get-view tooltip-context)))
                (when (eq? view (child interface 'slider))
                  (popup-tooltip view (get-position tooltip-context) force?: #t))))))
        (when (and (server?) update-clients?)
          (let ((tier (current-tier)))
            (let ((time (historical-time self (min now (history-last self)))))
              (for-each (lambda (delegate)
                          (calling-client tier delegate
                            (lambda ()
                              (goto-client (get-client delegate) time))))
                        (get-delegates tier))))))))
  
  
  (method package (goto-time self time <fl>)
    (goto-history self (find-time self time)))
  
  
  ;; todo binary search
  (method (find-time self time <fl>) <fx>
    (let (iter (previous 0) (n 0))
      (if (or (>= n count)
              (> (historical-time self n) time))
          previous
        (iter n (+ n 1)))))
  
  
  (method (invalidate-slider self)
    (let ((interface (current-interface)))
      (invalidate-view (child interface 'slider))))
  
  
  (method package (slide-history self where <fl>)
    (goto-history self (fxround (* where (cast <fl> (history-end self)))) #t))
  
  
  (method package (truncate-history self)
    (set! count now))
  
  
  ;;;
  ;;;; Step
  ;;;

  
  (method package (step-backward self)
    (if previous-logic
        (let ((request previous-logic))
          (goto-now self)
          (step-to self request))
      ;; find last logic
      (backward-history self)
      (step-request self skip-logic)
      ;; backward again to it
      (let ((request at-logic))
        (backward-history self)
        (step-to self request))))
  
  
  (method package (step-forward self)
    (if logic-continuation
        (continue-logic self any-logic #t)
      (step-to self any-logic)))
  
  
  (method package (step-over self)
    (if logic-continuation
        (begin
          (clear-where)
          ;; let logic run to completion
          (continue-logic self complete-logic #f))
      (step-history self)))
  
  
  (method (continue-logic self request again?)
    (with-logic-exit
      (lambda ()
        (let ((cont logic-continuation))
          (set! logic-request request)
          (set! logic-again? again?)
          (set! logic-continuation #f)
          (continuation-return cont #f)))))
  
  
  (method (step-to self request)
    (with-logic-exit
      (lambda ()
        (step-again self request))))
  
  
  (method (step-again self request)
    (step-request self request)
    ;; exit was not consumed so step again
    (if logic-again?
        (when (< now (history-end self))
          (step-again self any-logic))
      (clear-logic #t))
    (exit-logic))
  
  
  (method (step-request self request)
    (set! logic-request request)
    (step-history self))
  
  
  ;; this is correct as we are redoing the same action so
  ;; the space taken on the changes buffer will be the same
  (method (step-history self)
    (clear-logic)
    (when (< now (history-end self))
      (let ((client-id (historical-client-id self now))
            (id (historical-change-id self now)))
        (parameterize ((stepping-history? #t))
          (action/forward-change self client-id id))
        (stepped-history self))))
  
  
  (method (action/forward-change self client-id id)
    (let ((change (id->change id)))
      (if (get-action-apply change)
          (let ((action-index (historical-action-index self now)))
            (action-change client-id id
              (lambda ()
                (prog1 (f64vector-ref changes (modulo action-index changes-size))
                  (increase! action-index)))))
        (let ((forward-index (historical-forward-index self now)))
          (forward-change client-id id
            (lambda ()
              (prog1 (f64vector-ref changes (modulo forward-index changes-size))
                (increase! forward-index))))))))
  
  
  (method (stepped-history self)
    (when (< now (history-end self))
      ;; we could let add-change advance the now but not
      ;; at the moment because some changes have no action
      (if (< count size)
          (increase! now)
        (set! head (modulo (+ head index-size) indexes-size)))
      (invalidate-slider self)
      (set-?n now)))
  
  
  ;;;
  ;;;; Future
  ;;;
  
  
  ;; future can be recalculated in-place as we are redoing the same
  ;; actions so the space taken on the changes buffer stays constant
  (method package (recalculate-future self)
    (let ((now now)
          (end (history-end self)))
      (loop (for n from now below end)
            (let ((client-id (historical-client-id self n))
                  (id (historical-change-id self n)))
              (parameterize ((stepping-history? #t))
                (action/forward-change self client-id id))
              (stepped-history self)))
      (goto-history self now)))))
