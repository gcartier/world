;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; World History
;;;


(module world.history jazz


(import (jazz.graphic)
        (jazz.graphic.opengl.glew)
        (world.draw))


;;;
;;;; Parameters
;;;


(definition public in-history?
  (make-parameter #f))


;;;
;;;; Moment
;;;


(class Moment extends Object
  
  
  (slot snapshot <object> initialize #f accessors generate)
  (slot commands <object> initialize #f accessors generate)
  (slot elapse   <object> initialize #f accessors generate)
  
  
  (method override (initialize snapshot commands elapse)
    (nextmethod)
    (set! snapshot~self snapshot)
    (set! commands~self commands)
    (set! elapse~self elapse)))


;;;
;;;; History
;;;


(class History extends Object
  
  
  (slot world   <object> initialize #f getter generate)
  (slot moments <object> initialize #f getter generate)
  (slot now     <object> initialize #f getter generate)
  (slot current <object> initialize #f accessors generate)
  (slot maximum <fx+>    initialize #f getter generate)
  
  
  (method override (initialize world maximum)
    (nextmethod)
    (set! world~self world)
    (set! maximum~self maximum)
    (setup))
  
  
  (method (setup)
    (cond ((not maximum)
           (set! moments (new Axis 0))
           (set! now 0))
          (else
           (set! moments (make-vector maximum))
           (set! now 0))))

  
  (method (history-start)
    0)
  
  
  (method (history-end)
    (cardinality moments))
  
  
  (method (history-first)
    0)
  
  
  (method (history-last)
    (- (history-end) 1))
  
  
  (method (historical-moment n)
    (element moments n))
  
  
  (method (in-history n)
    (max (history-first) (min n (history-end))))
  
  
  (method (add-history moment)
    (axis-add moments moment)
    (increase! now))
  
  
  (method (backward-history)
    (goto-history (- now 1)))
  
  
  (method (forward-history)
    (goto-history (+ now 1)))
  
  
  (method (goto-history n)
    (let ((n (in-history n)))
      (unless (= n now)
        (set! now n)
        (if (= n (history-end))
            (load-world~ world current)
          (load-world~ world (get-snapshot~ (historical-moment now)))))))
  
  
  (method (slide-history where)
    (goto-history (fxround (* where (history-end)))))
  
  
  (method (truncate-future)
    (axis-adjust moments now))
  
  
  (method (step-world)
    (when (< now (history-end))
      (let ((moment (historical-moment now)))
        (increase! now)
        (when moment
          (let ((commands (get-commands~ moment))
                (elapse (get-elapse~ moment)))
            (tick-actors~ world commands elapse))))))
  
  
  (method (recalculate-future)
    (let ((end (history-end)))
      (loop (for n from now below end)
            (let ((moment (historical-moment n)))
              (let ((commands (get-commands~ moment))
                    (elapse (get-elapse~ moment)))
                (tick-actors~ world commands elapse)
                (let ((next (+ n 1)))
                  (let ((moment (historical-moment next))
                        (snapshot (snapshot-world~ world)))
                    (if (= next end)
                        (set! current snapshot)
                      (set-snapshot~ moment snapshot)))))))
      ;; for now
      (if (= now end)
          (load-world~ world current)
        (load-world~ world (get-snapshot~ (historical-moment now))))))
  
  
  (method (draw-history-slider)
    (let ((width (fxround (get-width~ world)))
          (height (fxround (get-height~ world))))
      (let ((cx (fxround/ width 2)))
        (gl-frame-rect (new Rect (- cx 200) (- height 30) (+ cx 200) (- height 31)) {Color Gray})
        (gl-frame-rect (new Rect (- cx 200) (- height 32) (+ cx 200) (- height 33)) {Color Light-Gray})
        (let ((end (history-end)))
          (when (> end 0)
            (let ((h (+ (fxround (- (* (/ (cast <fl> now) end) 400.) 200.)) cx)))
              (gl-segment-circle (new Point h (- height 32)) 7 {Color Light-Blue} 100)))))))
  
  
  (method (draw-history draw)
    (let ((step 1)
          (max 1000))
      ;; past
      (loop (for n from (- now 1) downto (history-first) by step)
            (repeat max)
            (draw n))
      ;; future
      (loop (for n from now to (history-last) by step)
            (repeat max)
            (draw n))))
  
  
  (method (present-history)
    (define (present-coordinates obj)
      (format "{r precision: 1} {r precision: 1}" (get-x~ obj) (get-y~ obj)))
    
    (if (< (history-end) 5)
        `(,(format "c -> {a}" (present-coordinates (get-player~ world)))
          ,@(loop (for n from 0 to (history-last))
                  (collect
                    (let ((moment (historical-moment n)))
                      (let ((snapshot (get-snapshot~ moment))
                            (commands (get-commands~ moment)))
                        (let ((player (find-player~ world (get-actors~ snapshot))))
                          (format "{a} -> {a}" n (present-coordinates player))))))))
      '())))


;;;
;;;; Snapshot
;;;


(class Snapshot extends Object
  
  
  (slot actors  getter generate)
  (slot markers getter generate)
  
  
  (method override (initialize actors markers)
    (nextmethod)
    (set! actors~self actors)
    (set! markers~self markers))))
