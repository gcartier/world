;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World History
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.history jazz


(import (jazz.component)
        (jazz.event)
        (jazz.network)
        (jazz.view)
        (world)
        (world.autoload)
        (world.binary)
        (world.context)
        (world.network)
        (world.part)
        (world.server.autoload)
        (world.settings))


(proclaim (not check bounds zero)
          (warn optimizations))


;;;
;;;; Id
;;;


(definition protected (make-unique-id)
  (make-u8vector-uuid))


;;;
;;;; No
;;;


;; 0 is reserved for server-no
(definition next-no <fx>
  1)

(definition protected (next-no!) <fx>
  (prog1 next-no
    (increase! next-no)))


;;;
;;;; Logic
;;;


(definition protected stepping-history?
  (make-parameter #f))


(definition protected previous-logic
  #f)

(definition protected at-logic
  #f)

(definition protected logic-continuation
  #f)


(definition any-logic
  '(any))

(definition skip-logic
  '(skip))

(definition complete-logic
  '(complete))

(definition protected logic-request
  #f)


(definition protected logic-again?
  #f)


(definition protected logic-exit
  #f)

(definition (with-logic-exit thunk)
  (continuation-capture
    (lambda (exit)
      (set! logic-exit exit)
      (thunk))))

(definition (exit-logic)
  (let ((exit logic-exit))
    (if exit
        (begin
          (set! logic-exit #f)
          (continuation-return exit #f))
      (error "No available logic exit"))))

(definition (clear-exit)
  (set! logic-exit #f))


(definition (clear-where)
  (set! previous-logic #f)
  (set! at-logic #f)
  (update-at-logic))


(definition (clear-logic (reset-request? #f))
  (set! previous-logic #f)
  (set! at-logic #f)
  (when reset-request?
    (set! logic-request #f))
  (set! logic-continuation #f)
  (update-at-logic))


(definition protected (break-logic-at name)
  (let ((request logic-request))
    (when request
      (set! previous-logic at-logic)
      (set! at-logic name)
      (when (or (eq? request any-logic)
                (eq? request name))
        (update-at-logic)
        (continuation-capture
          (lambda (cont)
            (set! logic-request #f)
            (set! logic-continuation cont)
            (exit-logic)))))))


(definition protected (break-logic-action action)
  (when logic-request
    (action)))


(definition protected (in-logic?)
  (let ((request logic-request))
    (or (and (stepping-history?)
             (eq? request #f))
        (eq? request any-logic)
        (eq? request complete-logic))))


(definition protected (debug-logic . rest)
  (when (in-logic?)
    (send-event
      (lambda ()
        (apply debug rest)))))


;;;
;;;; Update
;;;


(definition update-at-logic
  (lambda ()
    ))

(definition protected (set-update-at-logic proc)
  (set! update-at-logic proc))


;;;
;;;; Update
;;;


(definition debug-changes?
  (world-setting 'world.debug-changes? #f))


(class Change extends Object
  
  
  (slot name                 getter generate)
  (slot id              <fx> getter generate)
  (slot droppable?           getter generate)
  (slot action-count    <fx> getter generate)
  (slot action-layout        getter generate)
  (slot action-store         getter generate)
  (slot action-apply         getter generate)
  (slot forward-count   <fx> getter generate)
  (slot forward-layout       getter generate)
  (slot forward-store        getter generate)
  (slot forward-apply        getter generate)
  (slot backward-count  <fx> getter generate)
  (slot backward-layout      getter generate)
  (slot backward-store       getter generate)
  (slot backward-apply       getter generate)
  
  
  (method override (initialize self name id droppable? action-layout action-store action-apply forward-layout forward-store forward-apply backward-layout backward-store backward-apply)
    (set! self.name name)
    (set! self.id id)
    (set! self.droppable? droppable?)
    (set! self.action-count (count-layout action-layout))
    (set! self.action-layout action-layout)
    (set! self.action-store action-store)
    (set! self.action-apply action-apply)
    (set! self.forward-count (count-layout forward-layout))
    (set! self.forward-layout forward-layout)
    (set! self.forward-store forward-store)
    (set! self.forward-apply forward-apply)
    (set! self.backward-count (count-layout backward-layout))
    (set! self.backward-layout backward-layout) 
    (set! self.backward-store backward-store)
    (set! self.backward-apply backward-apply))
  
  
  (method override (print self output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{a}" name)))))


(definition protected changes <table>
  (make-table test: eq?))

(definition protected changeids <vector>
  (make-vector 256 #f))


(definition public inline (name->change name) <Change>
  (table-ref changes name))

(definition public inline (id->change id <fx>) <Change>
  (vector-ref changeids id))


(definition next-change-id <fx>
  0)

(definition (next-change-id!) <fx>
  (prog1 next-change-id
    (increase! next-change-id)))


(definition protected (register-change name (droppable?: droppable? #f) (action-layout: action-layout '()) (action-store: action-store #f) (action-apply: action-apply #f) (forward-layout: forward-layout '()) (forward-store: forward-store #f) (forward-apply: forward-apply #f) (backward-layout: backward-layout '()) (backward-store: backward-store #f) (backward-apply: backward-apply #f))
  (let ((id <fx>
          ;; support dynamic evaluation
          (let ((actual (table-ref changes name #f)))
              (if actual
                  (get-id actual)
                (next-change-id!)))))
    (let ((change (new Change name id droppable? action-layout action-store action-apply forward-layout forward-store forward-apply backward-layout backward-store backward-apply)))
      (table-set! changes name change)
      (vector-set! changeids id change)
      (unspecified))))


(definition public (record-change? entity)
  (if (client?)
      (eq? entity (current-me))
    #t))


(definition public (snapshot-metadata? entity)
  (eq? entity (current-me+)))


(definition public (bidirectional-change name time action forward backward (metadata: metadata #f))
  (let ((history (current-history)))
    (let ((change (name->change name)))
      (let ((id (get-id change))
            (droppable? (get-droppable? change))
            (action-store (get-action-store change))
            (forward-store (get-forward-store change))
            (backward-store (get-backward-store change)))
        (add-change history time id droppable?
          (lambda (push)
            (when action-store
              (action action-store push)))
          (lambda (push)
            (forward forward-store push))
          (lambda (push)
            (when backward-store
              (backward backward-store push)))
          metadata)))))


(definition public (bidirectional-size change <Change>) <fx>
  (+ (get-action-count change)
     (get-forward-count change)
     (get-backward-count change)))


(definition protected (max-bidirectional-size) <fx>
  (let ((max -1))
    (iterate-table changes
      (lambda (name change)
        (let ((size (bidirectional-size change)))
          (when (> size max)
            (set! max size)))))
    max))


(definition public (update-size change <Change>) <fx>
  (+ 6
     (get-forward-count change)
     (get-backward-count change)))


(definition public (action-change tier-id id pop)
  (let ((change (id->change id)))
    (let ((action (get-action-apply change)))
      (action tier-id pop))))
  

(definition public (forward-change tier-id id pop)
  (let ((change (id->change id)))
    (let ((forward (get-forward-apply change)))
      (forward tier-id pop))))


(definition public (backward-change tier-id id pop)
  (let ((change (id->change id)))
    (let ((backward (get-backward-apply change)))
      ;; quicky until all changes have backward
      (when backward
        (backward tier-id pop)))))


(definition protected (forward-changes network-sent <fl> network-received <fl> changes <vector>)
  (declare (proper-tail-calls))
  (let ((history (current-history)))
    (let ((len (vector-length changes))
          (offset 0))
      (let (iter)
        (when (< offset len)
          (let ((time (vector-ref changes offset))
                (sent (vector-ref changes (+ offset 1)))
                (received (vector-ref changes (+ offset 2)))
                (clnt-id (vector-ref changes (+ offset 3)))
                (change-id (vector-ref changes (+ offset 4))))
            (increase! offset 5)
            ;; this way if client B is receiving a change from client A
            ;; we get the time A sent the change and the time B received it
            (let ((change (id->change change-id)))
              ;; ignore our own changes
              (if (= tier-no clnt-id)
                  (increase! offset (get-forward-count change))
                (let ((effective-sent (if (nan? sent) network-sent sent))
                      (effective-received network-received))
                  (add-incoming history time effective-sent effective-received clnt-id change-id changes offset))
                (when debug-changes?
                  (let ((name (get-name change)))
                    (unless (memq? name '(move lookat animate))
                      (tell name))))
                (forward-change clnt-id change-id
                  (lambda ()
                    (prog1 (vector-ref changes offset)
                      (increase! offset)))))
              ;; skip backward for now
              (increase! offset (get-backward-count change))))
          (iter))))))


;;;
;;;; History
;;;


(definition index-size <fx>
  7)

(definition time-size <fx>
  3)

(definition metadata-size <fx>
  1)


(definition protected (setup-history)
  (set-current-history (new History (world-setting 'world.history-size 1000))))


(definition protected (copy-history history <History>) <History>
  (let ((copy (new History (get-size history))))
    (subu32vector-move! (get-indexes history) 0 (get-indexes-size history) (get-indexes copy) 0)
    (set-times-head copy (get-times-head history))
    (subf64vector-move! (get-times history) 0 (get-times-size history) (get-times copy) 0)
    (set-changes-head copy (get-changes-head history))
    (subvector-move! (get-changes history) 0 (get-changes-size history) (get-changes copy) 0)
    (set-metadatas-head copy (get-metadatas-head history))
    (subvector-move! (get-metadatas history) 0 (get-metadatas-size history) (get-metadatas copy) 0)
    (set-now copy (get-now history))
    (set-head copy (get-head history))
    (set-count copy (get-count history))
    copy))


(definition protected (reset-history)
  (setup-history))


(class History extends Object
  
  
  (slot size            <fx>        getter generate)
  (slot indexes-size    <fx>        getter generate)
  (slot indexes         <u32vector> getter generate)
  (slot times-size      <fx>        getter generate)
  (slot times-head      <fx>        accessors generate)
  (slot times           <f64vector> getter generate)
  (slot changes-size    <fx>        getter generate)
  (slot changes-head    <fx>        accessors generate)
  (slot changes         <vector>    getter generate)
  (slot metadatas-size  <fx>        getter generate)
  (slot metadatas-head  <fx>        accessors generate)
  (slot metadatas       <vector>    getter generate)
  (slot now             <fx>        accessors generate)
  (slot head            <fx>        accessors generate)
  (slot count           <fx>        accessors generate)
  (slot paused?         <bool>      accessors generate)
  
  
  (method override (initialize self size <fx>)
    (nextmethod self)
    (set! self.size size)
    (set! indexes-size (* size index-size))
    (set! indexes (make-u32vector indexes-size))
    (set! times-size (* size time-size))
    (set! times-head 0)
    (set! times (make-f64vector times-size))
    (set! changes-size (* size (max-bidirectional-size)))
    (set! changes-head 0)
    (set! changes (make-vector changes-size))
    (set! metadatas-size (* size metadata-size))
    (set! metadatas-head 0)
    (set! metadatas (make-vector metadatas-size))
    (set! now 0)
    (set! head 0)
    (set! count 0)
    (set! paused? #f))
  
  
  (method package (pause self)
    (set! paused? #t))
  
  
  (method package (unpause self)
    (clear-logic #t)
    (clear-exit)
    (set! paused? #f))

  
  (method package (history-start self) <fx>
    0)
  
  
  (method package (history-end self) <fx>
    count)
  
  
  (method package (history-first self) <fx>
    0)
  
  
  (method package (history-last self) <fx>
    (- count 1))
  
  
  ;; quicky until all rings unified
  (method package (first-position self) <fx>
    0)
  
  
  ;; quicky until all rings unified
  (method package (last-position self) <fx>
    (- (history-end self) 1))
  
  
  (method package (historical-index self n <fx>) <fx>
    (modulo (+ head (* n index-size)) indexes-size))
  
  
  (method package (historical-time self n <fx>) <fl>
    (f64vector-ref times (u32vector-ref indexes (historical-index self n))))
  
  (method package (historical-sent self n <fx>) <fl>
    (f64vector-ref times (+ (u32vector-ref indexes (historical-index self n)) 1)))
  
  (method package (historical-received self n <fx>) <fl>
    (f64vector-ref times (+ (u32vector-ref indexes (historical-index self n)) 2)))
  
  (method package (historical-tier-id self n <fx>) <fx>
    (u32vector-ref indexes (+ (historical-index self n) 1)))
  
  (method package (historical-change-id self n <fx>) <fx>
    (u32vector-ref indexes (+ (historical-index self n) 2)))
  
  (method package (historical-action-index self n <fx>) <fx>
    (u32vector-ref indexes (+ (historical-index self n) 3)))
  
  (method package (historical-forward-index self n <fx>) <fx>
    (u32vector-ref indexes (+ (historical-index self n) 4)))
  
  (method package (historical-backward-index self n <fx>) <fx>
    (u32vector-ref indexes (+ (historical-index self n) 5)))
  
  (method package (historical-metadata-index self n <fx>) <fx>
    (u32vector-ref indexes (+ (historical-index self n) 6)))
  
  
  (method package (historical-metadata self n <fx>)
    (vector-ref metadatas (historical-metadata-index self n)))
  
  
  (method (in-history self n <fx>) <fx>
    (max (history-first self) (min n (history-end self))))
  
  
  (method (times-push self val <fl>)
    (f64vector-set! times times-head val)
    (set! times-head (modulo (+ times-head 1) times-size)))
  
  
  (method (changes-push self val)
    (vector-set! changes changes-head val)
    (set! changes-head (modulo (+ changes-head 1) changes-size)))
  
  
  (method (metadatas-push self val)
    (vector-set! metadatas metadatas-head val)
    (set! metadatas-head (modulo (+ metadatas-head 1) metadatas-size)))
  
  
  (method package (add-change self time <fl> change-id <fx> droppable? action forward backward metadata)
    (let ((index (historical-index self now))
          (changes-push (~ changes-push self)))
      (assert (/= tier-no -1))
      (u32vector-set! indexes index times-head)
      (times-push self time)
      (times-push self +nan.0)
      (times-push self +nan.0)
      (u32vector-set! indexes (+ index 1) tier-no)
      (u32vector-set! indexes (+ index 2) change-id)
      (u32vector-set! indexes (+ index 3) changes-head)
      (action changes-push)
      (u32vector-set! indexes (+ index 4) changes-head)
      (forward changes-push)
      (u32vector-set! indexes (+ index 5) changes-head)
      (backward changes-push)
      (u32vector-set! indexes (+ index 6) metadatas-head)
      (metadatas-push self metadata)
      (unless (stepping-history?)
        (if (< count size)
            (begin
              (increase! count)
              (increase! now))
          (set! head (modulo (+ head index-size) indexes-size))))
      (cond (droppable?
             (with-droppable-mutex
               (lambda ()
                 (world.client.network:droppable-push time)
                 (world.client.network:droppable-push +nan.0)
                 (world.client.network:droppable-push +nan.0)
                 (world.client.network:droppable-push tier-no)
                 (world.client.network:droppable-push change-id)
                 (forward world.client.network:droppable-push)
                 (backward world.client.network:droppable-push))))
            (else
             (with-outgoing-mutex
               (lambda ()
                 (update-push time)
                 (update-push +nan.0)
                 (update-push +nan.0)
                 (update-push tier-no)
                 (update-push change-id)
                 (forward update-push)
                 (backward update-push)))))))
  
  
  (method package (add-incoming self time <fl> sent <fl> received <fl> clnt-id <fx> change-id <fx> changes <vector> offset <fx>)
    (let ((index (historical-index self now)))
      (u32vector-set! indexes index times-head)
      (times-push self time)
      (times-push self sent)
      (times-push self received)
      (u32vector-set! indexes (+ index 1) clnt-id)
      (u32vector-set! indexes (+ index 2) change-id)
      (let ((change (id->change change-id)))
        (let ((action-count (get-action-count change))
              (forward-count (get-forward-count change))
              (backward-count (get-backward-count change)))
          (u32vector-set! indexes (+ index 3) changes-head)
          (loop (repeat action-count)
                (changes-push self +nan.0))
          (u32vector-set! indexes (+ index 4) changes-head)
          (loop (repeat forward-count)
                (changes-push self (vector-ref changes offset))
                (increase! offset))
          (u32vector-set! indexes (+ index 5) changes-head)
          (loop (repeat backward-count)
                (changes-push self (vector-ref changes offset))
                (increase! offset))))
      (u32vector-set! indexes (+ index 6) metadatas-head)
      (metadatas-push self #f)
      (if (< count size)
          (begin
            (increase! count)
            (increase! now))
        (set! head (modulo (+ head index-size) indexes-size)))))
  
  
  (method package (backward-history self (update-clients? #f))
    (goto-history self (- now 1) update-clients?))
  
  
  (method package (forward-history self (update-clients? #f))
    (goto-history self (+ now 1) update-clients?))
  
  
  (method (goto-now self)
    (goto-history self now))

  
  (method (goto-history self n <fx> (update-clients? #f))
    (let ((n (in-history self n)))
      (when (/= n now)
        (cond ((> n now)
               (loop (for s from now below n)
                     (let ((tier-id (historical-tier-id self s))
                           (id (historical-change-id self s))
                           (forward-index (historical-forward-index self s)))
                       (forward-change tier-id id
                         (lambda ()
                           (prog1 (vector-ref changes (modulo forward-index changes-size))
                             (increase! forward-index)))))))
              (else
               (loop (for s from (- now 1) downto n)
                     (let ((tier-id (historical-tier-id self s))
                           (id (historical-change-id self s))
                           (backward-index (historical-backward-index self s)))
                       (backward-change tier-id id
                         (lambda ()
                           (prog1 (vector-ref changes (modulo backward-index changes-size))
                             (increase! backward-index))))))))
        (set! now n)
        (set-?n now)
        (when (and (server?) update-clients?)
          (let ((tier (current-tier)))
            (let ((time (historical-time self (min now (history-last self)))))
              (for-each (lambda (delegate)
                          (unless (is? delegate world.server.mobile:Mobile-Delegate)
                            (calling-client tier delegate
                              (lambda ()
                                (goto-client (get-client delegate) time)))))
                        (get-delegates tier))))))))
  
  
  (method package (goto-time self time <fl>)
    (goto-history self (find-time self time)))
  
  
  ;; todo binary search
  (method (find-time self time <fl>) <fx>
    (let (iter (previous 0) (n 0))
      (if (or (>= n count)
              (> (historical-time self n) time))
          previous
        (iter n (+ n 1)))))
  
  
  (method package (slide-history self where <fl>)
    (goto-history self (fxround (* where (cast <fl> (history-end self)))) #t))
  
  
  ;;;
  ;;;; Step
  ;;;

  
  (method package (step-backward self)
    (if previous-logic
        (let ((request previous-logic))
          (goto-now self)
          (step-to self request))
      ;; find last logic
      (backward-history self)
      (step-request self skip-logic)
      ;; backward again to it
      (let ((request at-logic))
        (backward-history self)
        (step-to self request))))
  
  
  (method package (step-forward self)
    (if logic-continuation
        (continue-logic self any-logic #t)
      (step-to self any-logic)))
  
  
  (method package (step-over self)
    (if logic-continuation
        (begin
          (clear-where)
          ;; let logic run to completion
          (continue-logic self complete-logic #f))
      (step-history self)))
  
  
  (method (continue-logic self request again?)
    (with-logic-exit
      (lambda ()
        (let ((cont logic-continuation))
          (set! logic-request request)
          (set! logic-again? again?)
          (set! logic-continuation #f)
          (continuation-return cont #f)))))
  
  
  (method (step-to self request)
    (with-logic-exit
      (lambda ()
        (step-again self request))))
  
  
  (method (step-again self request)
    (step-request self request)
    ;; exit was not consumed so step again
    (if logic-again?
        (when (< now (history-end self))
          (step-again self any-logic))
      (clear-logic #t))
    (exit-logic))
  
  
  (method (step-request self request)
    (set! logic-request request)
    (step-history self))
  
  
  ;; this is correct as we are redoing the same action so
  ;; the space taken on the changes buffer will be the same
  (method (step-history self)
    (clear-logic)
    (when (< now (history-end self))
      (let ((tier-id (historical-tier-id self now))
            (id (historical-change-id self now)))
        (parameterize ((stepping-history? #t))
          (action/forward-change self tier-id id))
        (stepped-history self))))
  
  
  (method (action/forward-change self tier-id id)
    (let ((change (id->change id)))
      (if (get-action-apply change)
          (let ((action-index (historical-action-index self now)))
            (action-change tier-id id
              (lambda ()
                (prog1 (vector-ref changes (modulo action-index changes-size))
                  (increase! action-index)))))
        (let ((forward-index (historical-forward-index self now)))
          (forward-change tier-id id
            (lambda ()
              (prog1 (vector-ref changes (modulo forward-index changes-size))
                (increase! forward-index))))))))
  
  
  (method (stepped-history self)
    (when (< now (history-end self))
      ;; we could let add-change advance the now but not
      ;; at the moment because some changes have no action
      (if (< count size)
          (increase! now)
        (set! head (modulo (+ head index-size) indexes-size)))
      (set-?n now)))
  
  
  ;;;
  ;;;; Future
  ;;;
  
  
  ;; future can be recalculated in-place as we are redoing the same
  ;; actions so the space taken on the changes buffer stays constant
  (method package (recalculate-future self)
    (let ((now now)
          (end (history-end self)))
      (loop (for n from now below end)
            (let ((tier-id (historical-tier-id self n))
                  (id (historical-change-id self n)))
              (parameterize ((stepping-history? #t))
                (action/forward-change self tier-id id))
              (stepped-history self)))
      (goto-history self now)))))
