;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World History
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2016
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.history jazz


(import (jazz.event)
        (jazz.network)
        (jazz.view)
        (world)
        (world.autoload)
        (world.binary)
        (world.change)
        (world.network)
        (world.settings)
        (world.syntax (phase syntax)))


(proclaim (warn optimizations))


;;;
;;;; Id
;;;


(definition protected (make-unique-id)
  (make-f64vector-uuid))


(definition protected (make-f64vector-uuid)
  (let ((bytes (make-u8vector-uuid)))
    (f64vector
      (scan-double bytes 0)
      (scan-double bytes 8))))


;;;
;;;; Literal
;;;


;; 0 is reserved for #f
(definition next-literal-id <fx>
  1)

(definition protected (next-literal-id!) <fx>
  (prog1 next-literal-id
    (increase! next-literal-id)))


(definition protected literal-ids <table>
  (make-table test: equal?))

(definition protected id-literals <table>
  (make-table test: eqv?))

;; open test quicky these should simply go inside the tier
(definition protected (reset-literals)
  (set! next-literal-id 1)
  (set! literal-ids (make-table test: equal?))
  (set! id-literals (make-table test: eqv?)))


(definition public (literal->id literal (tier #f)) <fx>
  (if (not literal)
      0
    (or (table-ref literal-ids literal #f)
        (let ((id (tier-literal->id~ (cast <Tier> (or tier (current-tier))) literal)))
          (table-set! literal-ids literal id)
          (table-set! id-literals id literal)
          id))))


(definition public (id->literal id <fx> (tier #f))
  (if (= id 0)
      #f
    (or (table-ref id-literals id #f)
        (let ((literal (tier-id->literal~ (cast <Tier> (or tier (current-tier))) id)))
          (table-set! literal-ids literal id)
          (table-set! id-literals id literal)
          literal))))


;;;
;;;; Logic
;;;


(definition protected stepping-history?
  (make-parameter #f))


(definition protected previous-logic
  #f)

(definition protected at-logic
  #f)

(definition protected logic-continuation
  #f)


(definition any-logic
  '(any))

(definition skip-logic
  '(skip))

(definition complete-logic
  '(complete))

(definition protected logic-request
  #f)


(definition protected logic-again?
  #f)


(definition protected logic-exit
  #f)

(definition (with-logic-exit thunk)
  (continuation-capture
    (lambda (exit)
      (set! logic-exit exit)
      (thunk))))

(definition (exit-logic)
  (let ((exit logic-exit))
    (if exit
        (begin
          (set! logic-exit #f)
          (continuation-return exit #f))
      (error "No available logic exit"))))

(definition (clear-exit)
  (set! logic-exit #f))


(definition (clear-where)
  (set! previous-logic #f)
  (set! at-logic #f)
  (update-at-logic))


(definition (clear-logic (reset-request? #f))
  (set! previous-logic #f)
  (set! at-logic #f)
  (when reset-request?
    (set! logic-request #f))
  (set! logic-continuation #f)
  (update-at-logic))


(definition protected (break-logic-at name)
  (let ((request logic-request))
    (when request
      (set! previous-logic at-logic)
      (set! at-logic name)
      (when (or (eq? request any-logic)
                (eq? request name))
        (update-at-logic)
        (continuation-capture
          (lambda (cont)
            (set! logic-request #f)
            (set! logic-continuation cont)
            (exit-logic)))))))


(definition protected (break-logic-action action)
  (when logic-request
    (action)))


(definition protected (in-logic?)
  (let ((request logic-request))
    (or (and (stepping-history?)
             (eq? request #f))
        (eq? request any-logic)
        (eq? request complete-logic))))


(definition protected (debug-logic . rest)
  (when (in-logic?)
    (execute-event
      (lambda ()
        (apply debug rest)))))


;;;
;;;; Update
;;;


(definition update-at-logic
  (lambda ()
    ))

(definition protected (set-update-at-logic proc)
  (set! update-at-logic proc))


;;;
;;;; History
;;;


(definition index-size <fx>
  8)

(definition time-size <fx>
  3)

(definition metadata-size <fx>
  1)


(definition protected next-sequence-no <fx>
  0)

(definition protected (next-sequence-no!) <fx>
  (prog1 next-sequence-no
    (increase! next-sequence-no)))


(class History extends Object
  
  
  (slot size            <fx>        getter generate)
  (slot indexes-size    <fx>        getter generate)
  (slot indexes         <u32vector> getter generate)
  (slot times-size      <fx>        getter generate)
  (slot times-head      <fx>        getter generate)
  (slot times           <f64vector> getter generate)
  (slot changes-size    <fx>        getter generate)
  (slot changes-head    <fx>        getter generate)
  (slot changes         <f64vector> getter generate)
  (slot metadatas-size  <fx>        getter generate)
  (slot metadatas-head  <fx>        getter generate)
  (slot metadatas       <vector>    getter generate)
  (slot now             <fx>        accessors generate)
  (slot head            <fx>        accessors generate)
  (slot count           <fx>        accessors generate)
  (slot paused?         <bool>      accessors generate)
  
  
  (method override (initialize size <fx>)
    (nextmethod)
    (set! size~self size)
    (set! indexes-size (* size index-size))
    (set! indexes (make-u32vector indexes-size))
    (set! times-size (* size time-size))
    (set! times-head 0)
    (set! times (make-f64vector times-size))
    (set! changes-size (* size (max-bidirectional-size)))
    (set! changes-head 0)
    (set! changes (make-f64vector changes-size))
    (set! metadatas-size (* size metadata-size))
    (set! metadatas-head 0)
    (set! metadatas (make-vector metadatas-size))
    (set! now 0)
    (set! head 0)
    (set! count 0)
    (set! paused? #f))
  
  
  (method (pause)
    (set! paused? #t))
  
  
  (method (unpause)
    (clear-logic #t)
    (clear-exit)
    (set! paused? #f))

  
  (method (history-start) <fx>
    0)
  
  
  (method (history-end) <fx>
    count)
  
  
  (method (history-first) <fx>
    0)
  
  
  (method (history-last) <fx>
    (- (history-end) 1))
  
  
  (method (historical-index n <fx>) <fx>
    (modulo (+ head (* n index-size)) indexes-size))
  
  
  (method (historical-time n <fx>) <fl>
    (f64vector-ref times (u32vector-ref indexes (historical-index n))))
  
  (method (historical-sent n <fx>) <fl>
    (f64vector-ref times (+ (u32vector-ref indexes (historical-index n)) 1)))
  
  (method (historical-received n <fx>) <fl>
    (f64vector-ref times (+ (u32vector-ref indexes (historical-index n)) 2)))
  
  (method (historical-client-id n <fx>) <fx>
    (u32vector-ref indexes (+ (historical-index n) 1)))
  
  (method (historical-change-id n <fx>) <fx>
    (u32vector-ref indexes (+ (historical-index n) 2)))
  
  (method (historical-sequence-no n <fx>) <fx>
    (u32vector-ref indexes (+ (historical-index n) 3)))
  
  (method (historical-action-index n <fx>) <fx>
    (u32vector-ref indexes (+ (historical-index n) 4)))
  
  (method (historical-forward-index n <fx>) <fx>
    (u32vector-ref indexes (+ (historical-index n) 5)))
  
  (method (historical-backward-index n <fx>) <fx>
    (u32vector-ref indexes (+ (historical-index n) 6)))
  
  (method (historical-metadata-index n <fx>) <fx>
    (u32vector-ref indexes (+ (historical-index n) 7)))
  
  
  (method (historical-metadata n <fx>)
    (vector-ref metadatas (historical-metadata-index n)))
  
  
  (method (in-history n <fx>) <fx>
    (max (history-first) (min n (history-end))))
  
  
  (method (times-push val <fl>)
    (f64vector-set! times times-head val)
    (set! times-head (modulo (+ times-head 1) times-size)))
  
  
  (method (changes-push val <fl>)
    (f64vector-set! changes changes-head val)
    (set! changes-head (modulo (+ changes-head 1) changes-size)))
  
  
  (method (metadatas-push val)
    (vector-set! metadatas metadatas-head val)
    (set! metadatas-head (modulo (+ metadatas-head 1) metadatas-size)))
  
  
  (method (add-change time <fl> change-id <fx> action forward backward metadata)
    (let ((index (historical-index now))
          (sequence-no (next-sequence-no!)))
      (assert (/= client-no -1))
      (u32vector-set! indexes index times-head)
      (times-push time)
      (times-push +nan.0)
      (times-push +nan.0)
      (u32vector-set! indexes (+ index 1) client-no)
      (u32vector-set! indexes (+ index 2) change-id)
      (u32vector-set! indexes (+ index 3) sequence-no)
      (u32vector-set! indexes (+ index 4) changes-head)
      (action changes-push)
      (u32vector-set! indexes (+ index 5) changes-head)
      (forward changes-push)
      (u32vector-set! indexes (+ index 6) changes-head)
      (backward changes-push)
      (u32vector-set! indexes (+ index 7) metadatas-head)
      (metadatas-push metadata)
      (unless (stepping-history?)
        (if (< count size)
            (begin
              (increase! count)
              (increase! now))
          (set! head (modulo (+ head index-size) indexes-size))))
      (unless (local?)
        (with-outgoing-mutex
          (lambda ()
            (outgoing-push time)
            (outgoing-push +nan.0)
            (outgoing-push +nan.0)
            (outgoing-push (cast <fl> client-no))
            (outgoing-push (cast <fl> change-id))
            (outgoing-push (cast <fl> sequence-no))
            (forward outgoing-push)
            (backward outgoing-push))))))
  
  
  (method (add-incoming time <fl> sent <fl> received <fl> clnt-id <fx> change-id <fx> sequence-no <fx> changes <f64vector> offset <fx>)
    (let ((index (historical-index now)))
      (u32vector-set! indexes index times-head)
      (times-push time)
      (times-push sent)
      (times-push received)
      (u32vector-set! indexes (+ index 1) clnt-id)
      (u32vector-set! indexes (+ index 2) change-id)
      (u32vector-set! indexes (+ index 3) sequence-no)
      (let ((change (id->change change-id)))
        (let ((action-count (get-action-count~ change))
              (forward-count (get-forward-count~ change))
              (backward-count (get-backward-count~ change)))
          (u32vector-set! indexes (+ index 4) changes-head)
          (loop (repeat action-count)
                (changes-push +nan.0))
          (u32vector-set! indexes (+ index 5) changes-head)
          (loop (repeat forward-count)
                (changes-push (f64vector-ref changes offset))
                (increase! offset))
          (u32vector-set! indexes (+ index 6) changes-head)
          (loop (repeat backward-count)
                (changes-push (f64vector-ref changes offset))
                (increase! offset))))
      (u32vector-set! indexes (+ index 7) metadatas-head)
      (metadatas-push #f)
      (if (< count size)
          (begin
            (increase! count)
            (increase! now))
        (set! head (modulo (+ head index-size) indexes-size)))))
  
  
  (method (backward-history (update-clients? #f))
    (goto-history (- now 1) update-clients?))
  
  
  (method (forward-history (update-clients? #f))
    (goto-history (+ now 1) update-clients?))
  
  
  (method (goto-now)
    (goto-history now))

  
  (method (goto-history n <fx> (update-clients? #f))
    (let ((n (in-history n)))
      (when (/= n now)
        (cond ((> n now)
               (loop (for s from now below n)
                     (let ((client-id (historical-client-id s))
                           (id (historical-change-id s))
                           (forward-index (historical-forward-index s)))
                       (forward-change client-id id
                         (lambda ()
                           (prog1 (f64vector-ref changes (modulo forward-index changes-size))
                             (increase! forward-index)))))))
              (else
               (loop (for s from (- now 1) downto n)
                     (let ((client-id (historical-client-id s))
                           (id (historical-change-id s))
                           (backward-index (historical-backward-index s)))
                       (backward-change client-id id
                         (lambda ()
                           (prog1 (f64vector-ref changes (modulo backward-index changes-size))
                             (increase! backward-index))))))))
        (set! now n)
        (invalidate-slider)
        (set-?n now)
        ;; annoying to put interface stuff here
        (let ((interface (current-interface)))
          (let ((pane (child~ interface 'chronology)))
            (when (get-visible?~ pane)
              (update~ pane (historical-time n))))
          (let ((tooltip-context (current-tooltip-context)))
            (when tooltip-context
              (let ((view (get-view~ tooltip-context)))
                (when (eq? view (child~ interface 'slider))
                  (popup-tooltip~ view (get-position~ tooltip-context) force?: #t))))))
        (when (and (server?) update-clients?)
          (let ((time (historical-time (min now (history-last)))))
            (for-each (lambda (delegate)
                        (goto-client~ (get-client~ delegate) time))
                      (get-delegates~ (current-tier))))))))
  
  
  (method (goto-time time <fl>)
    (goto-history (find-time time)))
  
  
  ;; todo binary search
  (method (find-time time <fl>) <fx>
    (let (iter (previous 0) (n 0))
      (if (or (>= n count)
              (> (historical-time n) time))
          previous
        (iter n (+ n 1)))))
  
  
  (method (invalidate-slider)
    (let ((interface (current-interface)))
      (invalidate-view~ (child~ interface 'slider))))
  
  
  (method (slide-history where <fl>)
    (goto-history (fxround (* where (cast <fl> (history-end)))) #t))
  
  
  (method (truncate-history)
    (set! count now))
  
  
  ;;;
  ;;;; Step
  ;;;

  
  (method (step-backward)
    (if previous-logic
        (let ((request previous-logic))
          (goto-now)
          (step-to request))
      ;; find last logic
      (backward-history)
      (step-request skip-logic)
      ;; backward again to it
      (let ((request at-logic))
        (backward-history)
        (step-to request))))
  
  
  (method (step-forward)
    (if logic-continuation
        (continue-logic any-logic #t)
      (step-to any-logic)))
  
  
  (method (step-over)
    (if logic-continuation
        (begin
          (clear-where)
          ;; let logic run to completion
          (continue-logic complete-logic #f))
      (step-history)))
  
  
  (method (continue-logic request again?)
    (with-logic-exit
      (lambda ()
        (let ((cont logic-continuation))
          (set! logic-request request)
          (set! logic-again? again?)
          (set! logic-continuation #f)
          (continuation-return cont #f)))))
  
  
  (method (step-to request)
    (with-logic-exit
      (lambda ()
        (step-again request))))
  
  
  (method (step-again request)
    (step-request request)
    ;; exit was not consumed so step again
    (if logic-again?
        (when (< now (history-end))
          (step-again any-logic))
      (clear-logic #t))
    (exit-logic))
  
  
  (method (step-request request)
    (set! logic-request request)
    (step-history))
  
  
  ;; this is correct as we are redoing the same action so
  ;; the space taken on the changes buffer will be the same
  (method (step-history)
    (clear-logic)
    (when (< now (history-end))
      (let ((client-id (historical-client-id now))
            (id (historical-change-id now)))
        (parameterize ((stepping-history? #t))
          (action/forward-change client-id id))
        (stepped-history))))
  
  
  (method (action/forward-change client-id id)
    (let ((change (id->change id)))
      (if (get-action-apply~ change)
          (let ((action-index (historical-action-index now)))
            (action-change client-id id
              (lambda ()
                (prog1 (f64vector-ref changes (modulo action-index changes-size))
                  (increase! action-index)))))
        (let ((forward-index (historical-forward-index now)))
          (forward-change client-id id
            (lambda ()
              (prog1 (f64vector-ref changes (modulo forward-index changes-size))
                (increase! forward-index))))))))
  
  
  (method (stepped-history)
    (when (< now (history-end))
      ;; we could let add-change advance the now but not
      ;; at the moment because some changes have no action
      (if (< count size)
          (increase! now)
        (set! head (modulo (+ head index-size) indexes-size)))
      (invalidate-slider)
      (set-?n now)))
  
  
  ;;;
  ;;;; Future
  ;;;
  
  
  ;; future can be recalculated in-place as we are redoing the same
  ;; actions so the space taken on the changes buffer stays constant
  (method (recalculate-future)
    (let ((now now)
          (end (history-end)))
      (loop (for n from now below end)
            (let ((client-id (historical-client-id n))
                  (id (historical-change-id n)))
              (parameterize ((stepping-history? #t))
                (action/forward-change client-id id))
              (stepped-history)))
      (goto-history now)))))
