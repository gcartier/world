;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; Shaders
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;    Alain Marcotte


(module world.shaders jazz


(import (world.fog)
        (world.support))


(definition glsl-version
  #/C/
#version 150

//#)


;;;
;;;; Light
;;;


(definition protected (baked-light)
#/C/
    float blocklight = lighting.x;
    float skylight = lighting.y;
    float shade = lighting.z;
    float lighttime = daylight * 11. + 4.;
    float dimmer = lighttime / 15.;
    skylight = skylight * dimmer;
    vec4 baked_light = texture(lightmap_sampler, vec2(blocklight / 60., skylight / 60.));
    if (player_glow >= 0.)
    {
        float z = distance(player_coord, fragPos);
        float glow = player_glow / z;
        baked_light = baked_light + vec4(glow, glow, glow, 1);
        baked_light = min(baked_light, vec4(1, 1, 1, 1));
    }
    baked_light = baked_light * vec4(shade, shade, shade, 1);
//#)


;;;
;;;; Default
;;;


(definition (build-default-vs)
  (string-append glsl-version
    #/C/
void main()
{
    gl_Position = vec4(1.0, 1.0, 1.0, 1.0);
}
//#))


(definition (build-default-fs)
  (string-append glsl-version
    #/C/
out vec4 fragColor;

void main()
{
    fragColor = vec4(1.0, 1.0, 1.0, 1.0);
}
//#))


(definition public default-vs
  #f)

(definition public default-fs
  #f)


(definition public (build-default-shaders)
  (set! default-vs (build-default-vs))
  (set! default-fs (build-default-fs)))


;;;
;;;; Hardware
;;;


(definition (build-hardware-fs)
  (string-append glsl-version
    #/C/
uniform int width;
uniform int height;
uniform sampler2DRect texture_sampler;

in vec3 final_texture_coord;

out vec4 fragColor;

const vec3 R_cf = vec3(1.164383,  0.000000,  1.596027);
const vec3 G_cf = vec3(1.164383, -0.391762, -0.812968);
const vec3 B_cf = vec3(1.164383,  2.017232,  0.000000);
const vec3 offset = vec3(-0.0625, -0.5, -0.5);

void main()
{
    vec2 tPos = vec2(final_texture_coord.s, final_texture_coord.t);
    vec3 tc =  texture(texture_sampler, tPos * vec2(width, height)).rgb;
    vec3 yuv = vec3(tc.g, tc.b, tc.r);
    yuv += offset;
    fragColor.r = dot(yuv, R_cf);
    fragColor.g = dot(yuv, G_cf);
    fragColor.b = dot(yuv, B_cf);
    fragColor.a = 1.0;
}
//#))


(definition public hardware-fs
  #f)


(definition public (build-hardware-shaders)
  (set! hardware-fs (build-hardware-fs)))


;;;
;;;; Sheet
;;;


(definition (build-sheet-vs flipped?)
  (string-append glsl-version
    #/C/
uniform mat4 projection_matrix;

in vec3 vertex_coord;
in vec3 texture_coord;

out vec3 final_texture_coord;

void main()
{
    gl_Position = projection_matrix * vec4(vertex_coord, 1.0);
//#

(if (not flipped?)
#/C/
    final_texture_coord = texture_coord;
//#
#/C/
    final_texture_coord = vec3(1.0 - texture_coord.s, texture_coord.t, texture_coord.z);
//#
)

#/C/
}
//#))


(definition (build-sheet-fs)
  (string-append glsl-version
    #/C/
uniform sampler2D texture_sampler;

in vec3 final_texture_coord;

out vec4 fragColor;

void main()
{
    fragColor = texture(texture_sampler, vec2(final_texture_coord.x, final_texture_coord.y));
}
//#))


(definition public sheet-vs
  #f)

(definition public sheet-flipped-vs
  #f)

(definition public sheet-fs
  #f)


(definition public (build-sheet-shaders)
  (set! sheet-vs (build-sheet-vs #f))
  (set! sheet-flipped-vs (build-sheet-vs #t))
  (set! sheet-fs (build-sheet-fs)))


;;;
;;;; Texture
;;;


(definition (build-texture-vs flipped?)
  (string-append glsl-version
    #/C/
uniform mat4 projection_matrix;
uniform mat4 view_matrix;
uniform mat4 model_matrix;

in vec3 vertex_coord;
in vec3 texture_coord;

out vec3 final_texture_coord;

void main()
{
    gl_Position = projection_matrix * view_matrix * model_matrix * vec4(vertex_coord, 1.0);
//#

(if (not flipped?)
#/C/
    final_texture_coord = texture_coord;
//#
#/C/
    final_texture_coord = vec3(1.0 - texture_coord.s, texture_coord.t, texture_coord.z);
//#
)

#/C/
}
//#))


(definition (build-texture-fs overlay?)
  (string-append glsl-version
    (if overlay?
    #/C/
uniform sampler2D texture_sampler;
uniform vec4 overlay;

in vec3 final_texture_coord;

out vec4 fragColor;

void main()
{
    fragColor = texture(texture_sampler, vec2(final_texture_coord.x, final_texture_coord.y)) * overlay;
}
//#
    #/C/
uniform sampler2D texture_sampler;

in vec3 final_texture_coord;

out vec4 fragColor;

void main()
{
    fragColor = texture(texture_sampler, vec2(final_texture_coord.x, final_texture_coord.y));
}
//#)))


(definition public texture-vs
  #f)

(definition public texture-flipped-vs
  #f)

(definition public texture-fs
  #f)

(definition public texture-overlay-fs
  #f)


(definition public (build-texture-shaders)
  (set! texture-vs (build-texture-vs #f))
  (set! texture-flipped-vs (build-texture-vs #t))
  (set! texture-fs (build-texture-fs #f))
  (set! texture-overlay-fs (build-texture-fs #t)))


;;;
;;;; Skybox
;;;


(definition (build-skybox-vs)
  (string-append glsl-version
    #/C/
uniform mat4 projection_matrix;
uniform mat4 view_matrix;

in vec3 vertex_coord;

out vec3 texCoord;

void main()
{
    vec4 pos = projection_matrix * view_matrix * vec4(vertex_coord, 1.0);
    gl_Position = pos.xyww;
    texCoord = vertex_coord;
}
//#))


(definition (build-skybox-fs)
  (string-append glsl-version
    #/C/
uniform samplerCube cubemap;

in vec3 texCoord;

out vec4 fragColor;

void main()
{
    fragColor = texture(cubemap, texCoord);
}
//#))


(definition public skybox-vs
  #f)

(definition public skybox-fs
  #f)


(definition public (build-skybox-shaders)
  (set! skybox-vs (build-skybox-vs))
  (set! skybox-fs (build-skybox-fs)))


;;;
;;;; Horizon
;;;


;; Simplified infinite plane by Rants of a spud (2020)

(definition (build-horizon-vs)
  (string-append glsl-version
    #/C/
uniform mat4 projection;
uniform mat4 view;
uniform vec3 color;

// simple but expensive vertices cover the entire screen
// projected screen quad this is our hard-coded vertex buffer
const vec4 screen_quad[4] = vec4[4](
    vec4(-1, -1, 1, 1),
    vec4( 1, -1, 1, 1),
    vec4( 1,  1, 1, 1),
    vec4(-1,  1, 1, 1));

const int triangle_strip[4] = int[4](
    0, 1, 3, 2);

// output coordinates of view/plane intersection in view space
out float point_w;

void main()
{
    vec4 corner_ndc = screen_quad[triangle_strip[gl_VertexID]];

    // screen-quad corner coordinates arrive directly in clip-space
    gl_Position = corner_ndc;

    // from OpenGL super bible ray tracing section
    vec4 D = inverse(projection) * corner_ndc;
    vec4 N = view * vec4(0, 1, 0, 0);

    point_w = dot(D.xyz, N.xyz);
}
//#))


(definition (build-horizon-fs)
  (string-append glsl-version
    #/C/
uniform vec3 color;
uniform float cut;

in float point_w;

out vec4 frag_color;

void main()
{
    // simple but expensive discard pixels not on the plane
    if (point_w > -cut)
        discard;

    frag_color = vec4(color, (- (point_w + cut)) * 50);
    // frag_color = vec4(1, 0, 0, 1);
}
//#))


(definition public horizon-vs
  #f)

(definition public horizon-fs
  #f)


(definition public (build-horizon-shaders)
  (set! horizon-vs (build-horizon-vs))
  (set! horizon-fs (build-horizon-fs)))


;;;
;;;; Skeletal
;;;


(definition (skeletal-header skeletal?)
  (if (and animations? skeletal?)
      (format #/C/
uniform int use_bones;
uniform mat4 bone_matrices[{a}];
//# max-bones)

""))


(definition (skeletal-setup skeletal?)
  (if (and animations? skeletal?)
      #/C/
vec4 skeletal_pos;
if (use_bones != 0)
{
    mat4 boneTransform = bone_matrices[int(bone_id)];
    skeletal_pos = boneTransform * vec4(vertex_coord, 1.0);
}
else
{
    skeletal_pos = vec4(vertex_coord, 1.0);
}
//#

#/C/
    vec4 skeletal_pos = vec4(vertex_coord, 1.0);
//#))


;;;
;;;; Mesh Color
;;;


(definition (build-mesh-color-vs)
  (string-append glsl-version
    #/C/
uniform mat4 projection_matrix;
uniform mat4 view_matrix;
uniform mat4 model_matrix;
uniform vec4 overlay;
uniform vec4 color;
//#

(skeletal-header #t)

#/C/
in vec3 vertex_coord;
in float bone_id;

out vec4 final_color;

void main()
{
//#

(skeletal-setup #t)

#/C/
    gl_Position = projection_matrix * view_matrix * model_matrix * skeletal_pos;
    final_color = color;
}
//#))


(definition public (build-mesh-color-fs)
  (string-append glsl-version
    #/C/
uniform vec4 overlay;

in vec4 final_color;

out vec4 fragColor;

void main()
{
    fragColor = final_color * overlay;
}
//#))


(definition public mesh-color-vs
  #f)

(definition public mesh-color-fs
  #f)


(definition public (build-color-shaders)
  (set! mesh-color-vs (build-mesh-color-vs))
  (set! mesh-color-fs (build-mesh-color-fs)))


;;;
;;;; Mesh
;;;


(definition (build-mesh-vs skeletal? selflit?)
  (string-append glsl-version
#/C/
uniform mat4 projection_matrix;
uniform mat4 view_matrix;
uniform mat4 model_matrix;
uniform vec4 overlay;
uniform float daylight;
uniform float player_glow;
uniform vec3 player_coord;
uniform sampler2D lightmap_sampler;
//#

(skeletal-header skeletal?)

#/C/
in vec3 vertex_coord;
in vec3 texture_coord;
in float bone_id;
in vec3 lighting;

// out vec3 vertex_pos;
out vec4 final_light;
out vec3 final_texture_coord;
//#

(if debug-transform?
#/C/
out vec4 out1;
out vec4 out2;
out vec4 out3;
out vec4 out4;
//#
  "")

#/C/
void main()

//#

"{"

(skeletal-setup skeletal?)

#/C/
    vec3 fragPos = vec3(model_matrix * skeletal_pos);
//#

(baked-light)

(if debug-transform?
#/C/
    // debug
    out1 = vec4(vertex_coord, 1.0);
    out2 = vec4(0, 0, 0, 0);
    out3 = vec4(0, 0, 0, 0);
    out4 = vec4(0, 0, 0, 0);
//#
  "")

(if selflit?
#/C/
    final_light = vec4(1, 1, 1, 1);
//#
#/C/
    final_light = baked_light;
//#)

#/C/
    gl_Position = projection_matrix * view_matrix * vec4(fragPos, 1.0);
    // vertex_pos = gl_Position.xyz;
    final_texture_coord = texture_coord;
//#

"}"
))


(definition (mesh-header-fs alphacut? fog? wet?)
  (string-append
(if wet?
    #/C/
const vec4 wet_color = vec4(0.8, 0.8, 0.8, 1.0);

//#

"")

#/C/
uniform vec4 overlay;
uniform float daylight;
//#

(if alphacut?
#/C/
uniform float alpha_cut;
//#

"")

#/C/
uniform vec4 fog_color;
uniform float fog_near;
uniform float fog_far;

// in vec3 vertex_pos;
in vec4 final_light;
in vec3 final_texture_coord;

out vec4 fragColor;
//#))


(definition (mesh-main-fs texture-arrays? alphacut? fog? wet?)
  (string-append
(if texture-arrays?
    #/C/
    fragColor = final_light * fragColor;
//#

#/C/
    fragColor = final_light * fragColor;
//#)

(if alphacut?
#/C/
    if (fragColor.a < alpha_cut)
        discard;
//#

"")

(if fog?
    (if #f ;; z-buffer visualisation
    #/C/
    float zoverw = 1.0 - (gl_FragCoord.z / gl_FragCoord.w) / 100.0;
    fragColor = vec4(zoverw, zoverw, zoverw, 1.0);
//#
    @exponential
    #/C/
    float zoverw = gl_FragCoord.z / gl_FragCoord.w;
    // zoverw = length(vertex_pos);
    float distRatio = 4. * zoverw / fog_far;
    float fog_density = 0.3;
    float fogFactor = exp(-distRatio * fog_density);
    float fogAmount = 1 - fogFactor;
    fragColor = mix(fog_color, fragColor, fogFactor);
    // fragColor = vec4(fogAmount, fogAmount, fogAmount, 1);
//#
    ;@linear
    #/C/
    float zoverw = gl_FragCoord.z / gl_FragCoord.w;
    // zoverw = length(vertex_pos);
    float fogAmount = smoothstep(fog_near, fog_far, zoverw);
    fragColor = mix(fragColor, fog_color, fogAmount);
    // fragColor = vec4(fogAmount, fogAmount, fogAmount, 1);
//#)

"")

(if wet?
    #/C/
    fragColor = mix(wet_color, fragColor, .75);
//#

"")

#/C/
    fragColor = fragColor * overlay;
//#))


(definition (build-mesh-fs texture-arrays? alphacut? fog? wet?)
  (string-append glsl-version
(if texture-arrays?
    #/C/
uniform sampler2DArray texture_sampler;

//#

#/C/
uniform sampler2D texture_sampler;

//#)

(mesh-header-fs alphacut? fog? wet?)

#/C/
void main()
//#

"{"

(if texture-arrays?
    #/C/
    fragColor = texture(texture_sampler, final_texture_coord);
//#

#/C/
    fragColor = texture(texture_sampler, final_texture_coord.xy);
//#)

(mesh-main-fs texture-arrays? alphacut? fog? wet?)

"}"
))


(definition public mesh-fs
  #f)

(definition public mesh-alphacut-fs
  #f)

(definition public mesh-wet-fs
  #f)


(definition public (build-mesh-shaders)
  ;; fragment common to block and model
  (set! mesh-fs (build-mesh-fs texture-arrays? #f fog? #f))
  (set! mesh-alphacut-fs (build-mesh-fs texture-arrays? #t fog? #f))
  (set! mesh-wet-fs (build-mesh-fs texture-arrays? #f #f #t)))


;;;
;;;; Mesh Block
;;;


(definition public mesh-block-vs
  #f)


(definition public (build-block-shaders)
  ;; vertex
  (set! mesh-block-vs (build-mesh-vs #f #f)))


;;;
;;;; Mesh Model
;;;


(definition public mesh-model-vs
  #f)

(definition public mesh-selflit-vs
  #f)


(definition public (build-model-shaders)
  ;; vertex
  (set! mesh-model-vs (build-mesh-vs #t #f))
  (set! mesh-selflit-vs (build-mesh-vs #t #t)))


;;;
;;;; Mesh Occlusion
;;;


(definition (build-mesh-occlusion-vs)
  (string-append glsl-version
    #/C/
uniform mat4 projection_matrix;
uniform mat4 view_matrix;
uniform mat4 model_matrix;
uniform float daylight;

in vec3 vertex_coord;
in vec3 lighting;
uniform float player_glow;
uniform vec3 player_coord;
uniform sampler2D lightmap_sampler;

out vec4 final_light;

void main()

//#

"{"

#/C/
    vec3 fragPos = vec3(model_matrix * vec4(vertex_coord, 1.0));
//#

(baked-light)

#/C/
    final_light = baked_light;
    gl_Position = projection_matrix * view_matrix * vec4(fragPos, 1);

//#

"}"
))


(definition (build-mesh-occlusion-fs)
  (string-append glsl-version
    #/C/
in vec4 final_light;

out vec4 fragColor;

void main()
//#

"{"

#/C/
    fragColor = final_light;
//#

"}"
))


(definition public mesh-occlusion-vs
  #f)

(definition public mesh-occlusion-fs
  #f)


(definition public (build-occlusion-shaders)
  (set! mesh-occlusion-vs (build-mesh-occlusion-vs))
  (set! mesh-occlusion-fs (build-mesh-occlusion-fs)))


;;;
;;;; Mesh Frame
;;;


(definition (build-mesh-frame-vs square? instance?)
  (string-append glsl-version
    #/C/
/*
    Input: The vertex position and vertex ins p1_3d and p2_3d which
    are the positions of neighboring vertices.

    Output: dist a vector of distances from the vertex to the three edges of
    the triangle. Clearly only one of these distance is non-zero. For vertex 0
    in a triangle dist = (distance to opposite edge, 0, 0) on exit. The distance
    is multiplied by w. This is to negate perspective correction.
    
    http://www2.imm.dtu.dk/~jab/Wireframe
*/
uniform vec2 WIN_SCALE;
uniform mat4 projection_matrix;
uniform mat4 view_matrix;
uniform mat4 model_matrix;
uniform vec4 overlay;
in vec3 vertex_coord;
in float bone_id;
in float swizz;
in vec3 neighbor1;
in vec3 neighbor2;
in vec3 instancepos;

out vec3 dist;
//#

(skeletal-header #t)

(if square?
    #/C/
out vec3 ignore;
//#

"")

#/C/

void main()

//#

"{"

(skeletal-setup #t)

(if animations?
    #/C/
vec4 skeletal_neighbor1;
vec4 skeletal_neighbor2;
if (use_bones != 0)
{
    mat4 boneTransform = bone_matrices[int(bone_id)];
    skeletal_neighbor1 = boneTransform * vec4(neighbor1, 1.0);
    skeletal_neighbor2 = boneTransform * vec4(neighbor2, 1.0);
}
else
{
    skeletal_neighbor1 = vec4(neighbor1, 1.0);
    skeletal_neighbor2 = vec4(neighbor2, 1.0);
}
//#

#/C/
vec4 skeletal_neighbor1 = vec4(neighbor1, 1.0);
vec4 skeletal_neighbor2 = vec4(neighbor2, 1.0);
//#)

#/C/
    vec4 pos = skeletal_pos;
    vec4 p1_3d = skeletal_neighbor1;
    vec4 p2_3d = skeletal_neighbor2;
//#

(if instance?
    #/C/
    // Compute the vertex position in the usual fashion.
    vec4 instpos = vec4(instancepos, 1.0);
    gl_Position = projection_matrix * view_matrix * model_matrix * (pos + instpos);
    vec4 p1_3d_ = projection_matrix * view_matrix * model_matrix * (p1_3d + instpos);
    vec4 p2_3d_ = projection_matrix * view_matrix * model_matrix * (p2_3d + instpos);
//#

#/C/
    // Compute the vertex position in the usual fashion.
    gl_Position = projection_matrix * view_matrix * model_matrix * pos;
    vec4 p1_3d_ = projection_matrix * view_matrix * model_matrix * p1_3d;
    vec4 p2_3d_ = projection_matrix * view_matrix * model_matrix * p2_3d;
//#)

#/C/
    // p0, p1 and p2 are the 2D positions of the vertices.
    vec2 p0 = gl_Position.xy/gl_Position.w;
    vec2 p1 = p1_3d_.xy / p1_3d_.w;
    vec2 p2 = p2_3d_.xy / p2_3d_.w;

    // Project p1 and p2 and compute the vectors v1 = p1-p0 and v2 = p2-p0
    vec2 v1 = WIN_SCALE*(p1 - p0);
    vec2 v2 = WIN_SCALE*(p2 - p0);

    // Compute 2D area of triangle.
    float area2 = abs(v1.x*v2.y - v1.y * v2.x);

    // Compute distance from vertex to line in 2D coords
    float h = area2/length(v1-v2);
//#

(if square?
    #/C/
    float d01 = distance(pos, p1_3d);
    float d02 = distance(pos, p2_3d);
    float d12 = distance(p1_3d, p2_3d);
    float i;
    if (d12 >= d01 && d12 >= d02)
        i = -1.0;
    else
        i = 0.;
//#

"")

#/C/
    // ---
    // The swizz variable tells us which of the three vertices
    // we are dealing with. The ugly comparisons would not be needed if
    // swizz was an int.

    if (swizz<0.1)
    {
        dist = vec3(h,0,0);
//#

(if square?
    #/C/
        ignore = vec3(i,0,0);
//#

"")

#/C/
    }
    else if (swizz<1.1)
    {
        dist = vec3(0,h,0);
//#

(if square?
    #/C/
        ignore = vec3(0,i,0);
//#

"")

#/C/
    }
    else
    {
        dist = vec3(0,0,h);
//#

(if square?
    #/C/
        ignore = vec3(0,0,i);
//#

"")

#/C/
    }

    // ----
    // Quick fix to defy perspective correction

    dist *= gl_Position.w;
//#

(if square?
    #/C/
    ignore *= gl_Position.w;
//#

"")

"}"
))


(definition (build-mesh-frame-fs square? distance?)
  (string-append glsl-version
    #/C/
uniform vec4 overlay;
uniform vec4 WIRE_COL;
uniform vec4 FILL_COL;
//#

@wait
(if distance?
    #/C/
uniform float EYE_HEIGHT;
//#

"")

#/C/
in vec3 dist;
//#

(if square?
    #/C/
in vec3 ignore;
//#

"")

#/C/

out vec4 fragColor;

void main()

//#

"{"

#/C/
    // Undo perspective correction.
    vec3 dist_vec = dist * gl_FragCoord.w;
//#

(if square?
    #/C/
    vec3 ignore_vec = ignore * gl_FragCoord.w;
//#

"")

(if (not square?)
    #/C/
    // Compute the shortest distance to the edge
    float d = min(dist_vec[0], min(dist_vec[1], dist_vec[2]));
//#

#/C/
    float d;
    if (ignore_vec[0] < 0.)
        d = min(dist_vec[1], dist_vec[2]);
    else if (ignore_vec[1] < 0.)
        d = min(dist_vec[0], dist_vec[2]);
    else if (ignore_vec[2] < 0.)
        d = min(dist_vec[0], dist_vec[1]);
    else
        d = 100.;
//#)

#/C/
    // Compute line intensity and then fragment color
    float I = exp2(-2.0*d*d);
    
    vec4 wire_col = WIRE_COL;
    vec4 fill_col = FILL_COL;
    wire_col = wire_col * overlay;
    fill_col = fill_col * overlay;
  
//#

(if (not distance?)
    #/C/
    fragColor = I*wire_col + (1.0 - I)*fill_col;
//#

#/C/
    float A = exp(-d);
    vec4 WIRE_ALP = vec4(0., 0., 0., 1.);
    
    // Reduce moire patterns
    float z = gl_FragCoord.z / gl_FragCoord.w;
    I = (I / z) * 7.5;
    
  //  float zhorizontal = sqrt(max(z*z - (EYE_HEIGHT*EYE_HEIGHT / 1.3), 0));
  //  I = min((I / (1. + zhorizontal)) * 7.5, 1);
    
  //  fragColor = I*wire_col + (1.0 - I)*fill_col;
  //  fragColor = I*vec4(wire_col.xyz, 0.) + A*WIRE_ALP + (1.0 - I)*fill_col;
    fragColor = I*wire_col + (1.0 - I)*fill_col;
//#)

"}"
))


(definition public mesh-wireframe-vs
  #f)

(definition public mesh-squareframe-vs
  #f)

(definition public mesh-testinstance-vs
  #f)

(definition public mesh-playerframe-vs
  #f)

(definition public mesh-floorframe-vs
  #f)

(definition public mesh-player-vs
  #f)


(definition public mesh-wireframe-fs
  #f)

(definition public mesh-squareframe-fs
  #f)

(definition public mesh-testinstance-fs
  #f)

(definition public mesh-playerframe-fs
  #f)

(definition public mesh-floorframe-fs
  #f)

(definition public mesh-player-fs
  #f)


(definition public (build-frame-shaders)
  (set! mesh-wireframe-vs    (build-mesh-frame-vs #f #f))
  (set! mesh-squareframe-vs  (build-mesh-frame-vs #t #f))
  (set! mesh-testinstance-vs (build-mesh-frame-vs #t #t))
  (set! mesh-playerframe-vs  (build-mesh-frame-vs #t #f))
  (set! mesh-floorframe-vs   (build-mesh-frame-vs #t #f))
  (set! mesh-player-vs       (build-mesh-frame-vs #f #f))
  (set! mesh-wireframe-fs    (build-mesh-frame-fs #f #f))
  (set! mesh-squareframe-fs  (build-mesh-frame-fs #t #f))
  (set! mesh-testinstance-fs (build-mesh-frame-fs #t #f))
  (set! mesh-playerframe-fs  (build-mesh-frame-fs #t #f))
  (set! mesh-floorframe-fs   (build-mesh-frame-fs #t #t))
  (set! mesh-player-fs       (build-mesh-frame-fs #f #f)))


;;;
;;;; Tex
;;;


(definition (texture-macros)
  (if texture-arrays?
      #/C/

#define TEXSAMPLER sampler2DArray
#define TEXUV(u,v) vec3(u,v,final_texture_coord.z)

//#

#/C/

#define TEXSAMPLER sampler2D
#define TEXUV(u,v) vec2(u,v)

//#))


;;;
;;;; Mesh White
;;;


(definition public (build-mesh-white-fs texture-arrays? fog? wet?)
  (string-append glsl-version
(texture-macros)

(mesh-header-fs #f fog? wet?)

#/C/
uniform TEXSAMPLER texture_sampler;
//#

#/C/
void main()
{
    fragColor = vec4(1.0, 1.0, 1.0 ,1.0);
//#

(mesh-main-fs texture-arrays? #f fog? wet?)

#/C/
}
//#))


;;;
;;;; Mesh Radial Blur
;;;


;; Radial Blur by iq (2009)

(definition public (build-mesh-radial-blur-fs texture-arrays? fog? wet?)
  (string-append glsl-version
(texture-macros)

(mesh-header-fs #f fog? wet?)

#/C/
uniform float time;
uniform TEXSAMPLER texture_sampler;

float texx;
float texy;
float texu;
float texv;
//#

#/C/
vec3 deform(in vec2 p)
{
    vec2 uv;

    vec2 q = vec2(sin(1.1*time+p.x),sin(1.2*time+p.y));

    float a = atan(q.y,q.x);
    float r = sqrt(dot(q,q));

    uv.x = sin(0.0+1.0*time)+p.x*sqrt(r*r+1.0);
    uv.y = sin(0.6+1.1*time)+p.y*sqrt(r*r+1.0);
    
    texu = uv.x*.5;
    texv = uv.y*.5;
    
    return texture(texture_sampler,TEXUV(texu,texv)).xyz;
}

void main()
{
    texx = final_texture_coord.x;
    texy = final_texture_coord.y;
    
    vec2 p = -1.0 + 2.0 * vec2(texx, texy);
    vec2 s = p;

    vec3 total = vec3(0.0);
    vec2 d = (vec2(0.0,0.0)-p)/40.0;
    float w = 1.0;
    for (int i=0;
         i<40;
         i++)
    {
        vec3 res = deform(s);
        res = smoothstep(0.1,1.0,res*res);
        total += w*res;
        w *= .99;
        s += d;
    }
    total /= 40.0;
    float r = 1.5/(1.0+dot(p,p));
    fragColor = vec4(total*r,1.0);
//#

(mesh-main-fs texture-arrays? #f fog? wet?)

#/C/
}
//#))


;;;
;;;; Mesh Motion Blur
;;;


;; Motion Blur by iq (2009)

(definition public (build-mesh-motion-blur-fs texture-arrays? fog? wet?)
  (string-append glsl-version
(texture-macros)

(mesh-header-fs #f fog? wet?)

#/C/
uniform float time;
uniform TEXSAMPLER texture_sampler;

float texx;
float texy;
float texu;
float texv;
//#

#/C/
vec3 deform(in vec2 p, float scale)
{
    vec2 uv;
   
    float mtime = scale+time;
    float a = atan(p.y,p.x);
    float r = sqrt(dot(p,p));
    float s = r * (1.0+0.5*cos(mtime*1.7));

    uv.x = .1*mtime +.05*p.y+.05*cos(-mtime+a*3.0)/s;
    uv.y = .1*mtime +.05*p.x+.05*sin(-mtime+a*3.0)/s;

    float w = 0.8-0.2*cos(mtime+3.0*a);

    texu = uv.x;
    texv = uv.y;
    
    vec3 res = texture(texture_sampler,TEXUV(texu,texv)).xyz*w;
    return res*res;

}

void main()
{
    texx = final_texture_coord.x;
    texy = final_texture_coord.y;
    
    vec2 p = -1.0 + 2.0 * vec2(texx, texy);
    vec3 total = vec3(0.0);
    float w = 0.0;
    for (int i=0;
         i<20;
         i++)
    {
        vec3 res = deform(p,w);
        total += res;
        w += 0.02;
    }
    total /= 20.0;

    fragColor = vec4(3.0*total,1.0);
//#

(mesh-main-fs texture-arrays? #f fog? wet?)

#/C/
}
//#))


;;;
;;;; Mesh Fire
;;;


;; Fire by iq (2009)

(definition public (build-mesh-fire-fs texture-arrays? fog? wet?)
  (string-append glsl-version
(texture-macros)

(mesh-header-fs #f fog? wet?)

#/C/
uniform float time;
uniform TEXSAMPLER texture_sampler;

float texx;
float texy;
float texu;
float texv;
//#

#/C/
void main()
{
    texx = final_texture_coord.x;
    texy = final_texture_coord.y;
    
    vec2 p = -1.0 + 2.0 * vec2(texx, texy);
    // a rotozoom
    vec2 cst = vec2(cos(.5*time), sin(.5*time));
    mat2 rot = 0.5*cst.x*mat2(cst.x,-cst.y,cst.y,cst.x);
    
    vec2 tmp = rot*p;
    texu = tmp.x;
    texv = tmp.y;
    
    vec3 col1 = texture(texture_sampler,TEXUV(texu,texv)).xyz;

    tmp = 0.5*p+sin(0.1*time);
    texu = tmp.x;
    texv = tmp.y;
    
    // scroll
    vec3 col2 = texture(texture_sampler,TEXUV(texu,texv)).xyz;

    // blend layers
    vec3 col = col2*col1;

    fragColor = vec4(col,1.0);
//#

(mesh-main-fs texture-arrays? #f fog? wet?)

#/C/
}
//#))


;;;
;;;; Mesh Water
;;;


;; Water by Viktor Korsun (BIT_TEK) (2012)

(definition public (build-mesh-water-fs texture-arrays? fog? wet?)
  (string-append glsl-version
(texture-macros)

(mesh-header-fs #f fog? wet?)

#/C/
uniform TEXSAMPLER texture_sampler;
uniform float time;

const float PI = 3.1415926535897932;

//speed
const float speed = 0.2;
const float speed_x = 0.3;
const float speed_y = 0.3;

// geometry
const float intensity = 3.;
const int steps = 8;
const float frequency = 4.0;
const int angle = 7; // better when a prime

// reflection and emboss
const float delta = 20.;
const float intence = 400.;
const float emboss = 0.3;

float texx;
float texy;
float texu;
float texv;
//#

#/C/
//---------- crystals effect

float col(vec2 coord)
{
    float delta_theta = 2.0 * PI / float(angle);
    float col = 0.0;
    float theta = 0.0;
    for (int i = 0;
         i < steps;
         i++)
    {
      vec2 adjc = coord;
      theta = delta_theta*float(i);
      adjc.x += cos(theta)*time*speed + time * speed_x;
      adjc.y -= sin(theta)*time*speed - time * speed_y;
      col = col + cos((adjc.x*cos(theta) - adjc.y*sin(theta))*frequency)*intensity;
    }

    return cos(col);
}

//---------- main

void main()
{
    texx = final_texture_coord.x;
    texy = final_texture_coord.y;
    
    vec2 p = vec2(texx, texy), c1 = p, c2 = p;
    float cc1 = col(c1);

    c2.x += 1/delta;
    float dx = emboss*(cc1-col(c2))/delta;

    c2.x = p.x;
    c2.y += 1/delta;
    float dy = emboss*(cc1-col(c2))/delta;

    c1.x += dx;
    c1.y = -(c1.y+dy);

    float alpha = 1.+dot(dx,dy)*intence;

    texu = c1.x;
    texv = c1.y;
    
    fragColor = texture(texture_sampler,TEXUV(texu,texv))*(1.0);
    // adjust light between 1. for day and .2 for night
    float light = daylight * 0.8 + 0.2;
    fragColor = fragColor * vec4(light, light, light, 1.);
//#

(mesh-main-fs texture-arrays? #f fog? wet?)

#/C/
}
//#))


;;;
;;;; Mesh Julia
;;;


;; Julia by iq (2009)

(definition public (build-mesh-julia-fs texture-arrays? fog? wet?)
  (string-append glsl-version
(texture-macros)

(mesh-header-fs #f fog? wet?)

#/C/
uniform float time;

float texx;
float texy;
float texu;
float texv;
//#

#/C/
void main()
{
    texx = final_texture_coord.x;
    texy = final_texture_coord.y;
    
    vec2 p = -1.0 + 2.0 * vec2(texx, texy);
    vec2 cc = vec2(cos(.25*time), sin(.25*time*1.423));

    float dmin = 1000.0;
    vec2 z  = p*vec2(1.33,1.0);
    for (int i=0;
         i<64;
         i++)
    {
        z = cc + vec2(z.x*z.x - z.y*z.y, 2.0*z.x*z.y);
        float m2 = dot(z,z);
        if (m2>100.0) break;
        dmin=min(dmin,m2);
        }

    float color = sqrt(sqrt(dmin))*0.7;
    fragColor = vec4(color,color,color,1.0);
//#

(mesh-main-fs texture-arrays? #f fog? wet?)

#/C/
}
//#))


;;;
;;;; Mesh Sierpinski
;;;


;; Sierpinski by Lars Huttar (2010)

(definition public (build-mesh-sierpinski-fs texture-arrays? fog? wet?)
  (string-append glsl-version
(texture-macros)

(mesh-header-fs #f fog? wet?)

#/C/
uniform float time;
uniform TEXSAMPLER texture_sampler;

float texx;
float texy;
float texu;
float texv;
//#

#/C/
// Set color at the current fragment, with given coords
// and whether it should be "hole" or not.
void setColor(vec2 coord, bool isHole) {
    if (isHole)
        fragColor = vec4(texture(texture_sampler, TEXUV(final_texture_coord.x,final_texture_coord.y)).xyz, 1.0);
    else
        fragColor = vec4(coord.x, 0.5, coord.y, 1.0);
}

// Sierpinski carpet - with anti-holes!
// Maybe call it "Sierpinski tablecloth". If it doesn't already have a name.
void main()
{
    texx = final_texture_coord.x;
    texy = final_texture_coord.y;
    
    ivec2 sectors;
    vec2 coordOrig = vec2(texx, texy);
    const int lim = 5;
    // Toggle between "carpet" and "tablecloth" every 3 seconds.
    bool doInverseHoles = (mod(time, 6.0) < 3.0);
    
    /* If you want it to spin, just to prove that it is redrawing
    the carpet every frame: */
    vec2 center = vec2(0.5, 0.5);
    mat2 rotation = mat2(
        vec2(cos(time), sin(time)),
        vec2(-sin(time), cos(time))
    );
    vec2 coordRot = rotation * (coordOrig - center) + center;
    // rotation can put us out of bounds
    if (coordRot.x < 0.0 || coordRot.x > 1.0 ||
        coordRot.y < 0.0 || coordRot.y > 1.0) {
        setColor(coordOrig, true);
        return;
    }

    vec2 coordIter = coordRot;
    bool isHole = false;
    
    for (int i=0;
         i < lim;
         i++)
    {
        sectors = ivec2(floor(coordIter.xy * 3.0));
        if (sectors.x == 1 && sectors.y == 1) {
            if (doInverseHoles) {
                isHole = !isHole;
            } else {
                setColor(coordOrig, true);
                return;
            }
        }

        if (i + 1 < lim) {
            // map current sector to whole carpet
            coordIter.xy = coordIter.xy * 3.0 - vec2(sectors.xy);
        }
    }
    
    setColor(isHole ? coordOrig : coordRot, isHole);
//#

(mesh-main-fs texture-arrays? #f fog? wet?)

#/C/
}
//#))


;;;
;;;; Mesh Multitexture
;;;


;; Multitexture by iq (2009)

(definition public (build-mesh-multitexture-fs texture-arrays? fog? wet?)
  (string-append glsl-version
(texture-macros)

(mesh-header-fs #f fog? wet?)

#/C/
uniform float time;
uniform TEXSAMPLER texture_sampler;

float texx;
float texy;
float texu;
float texv;
//#

#/C/
void main()
{
    texx = final_texture_coord.x;
    texy = final_texture_coord.y;
    
    vec2 p = -1.0 + 2.0 * vec2(texx, texy);
    // a rotozoom
    vec2 cst = vec2(cos(.5*time), sin(.5*time));
    mat2 rot = 0.5*cst.x*mat2(cst.x,-cst.y,cst.y,cst.x);
    
    vec2 tmp = rot*p;
    texu = tmp.x;
    texv = tmp.y;
    
    vec3 col1 = texture(texture_sampler,TEXUV(texu,texv)).xyz;

    tmp = 0.5*p+sin(0.1*time);
    texu = tmp.x;
    texv = tmp.y;
    
    // scroll
    vec3 col2 = texture(texture_sampler,TEXUV(texu,texv)).xyz;

    // blend layers
    vec3 col = col2*col1;

    fragColor = vec4(col,1.0);
//#

(mesh-main-fs texture-arrays? #f fog? wet?)

#/C/
}
//#))


;;;
;;;; Mesh Kaleidoscope
;;;


;; Kaleidoscope by iq (2009)

(definition public (build-mesh-kaleidoscope-fs texture-arrays? fog? wet?)
  (string-append glsl-version
(texture-macros)

(mesh-header-fs #f fog? wet?)

#/C/
uniform float time;
uniform TEXSAMPLER texture_sampler;

float texx;
float texy;
float texu;
float texv;
//#

#/C/
void main()
{
    texx = final_texture_coord.x;
    texy = final_texture_coord.y;
    
    vec2 p = -1.0 + 2.0 * vec2(texx, texy);
    vec2 uv;
   
    float a = atan(p.y,p.x);
    float r = sqrt(dot(p,p));

    uv.x =          7.0*a/3.1416;
    uv.y = -time+ sin(7.0*r+time) + .7*cos(time+7.0*a);

    float w = .5+.5*(sin(time+7.0*r)+ .7*cos(time+7.0*a));

    texu = uv.x*.5;
    texv = uv.y*.5;
    
    vec3 col = texture(texture_sampler,TEXUV(texu,texv)).xyz;

    fragColor = vec4(col*w,1.0);
//#

(mesh-main-fs texture-arrays? #f fog? wet?)

#/C/
}
//#))


;;;
;;;; Mesh Tunnel
;;;


;; Tunnel by iq (2009)

(definition public (build-mesh-tunnel-fs texture-arrays? fog? wet?)
  (string-append glsl-version
(texture-macros)

(mesh-header-fs #f fog? wet?)

#/C/
uniform float time;
uniform TEXSAMPLER texture_sampler;

float texx;
float texy;
float texu;
float texv;
//#

#/C/
void main()
{
    texx = final_texture_coord.x;
    texy = final_texture_coord.y;
    
    vec2 p = -1.0 + 2.0 * vec2(texx, texy);
    vec2 uv;
   
    float a = atan(p.y,p.x);
    float r = sqrt(dot(p,p));

    uv.x = .75*time+.1/r;
    uv.y = a/3.1416;

    texu = uv.x;
    texv = uv.y;
    
    vec3 col = texture(texture_sampler,TEXUV(texu,texv)).xyz;

    fragColor = vec4(col*r,1.0);
//#

(mesh-main-fs texture-arrays? #f fog? wet?)

#/C/
}
//#))


;;;
;;;; Mesh Square Tunnel
;;;


;; Square Tunnel by iq (2009)

(definition public (build-mesh-square-tunnel-fs texture-arrays? fog? wet?)
  (string-append glsl-version
(texture-macros)

(mesh-header-fs #f fog? wet?)

#/C/
uniform float time;
uniform TEXSAMPLER texture_sampler;

float texx;
float texy;
float texu;
float texv;
//#

#/C/
void main()
{
    texx = final_texture_coord.x;
    texy = final_texture_coord.y;
    
    vec2 p = -1.0 + 2.0 * vec2(texx, texy);
    vec2 uv;

    float r = pow(pow(p.x*p.x,16.0) + pow(p.y*p.y,16.0), 1.0/32.0);
    uv.x = .5*time + 0.5/r;
    uv.y = 1.0*atan(p.y,p.x)/3.1416;

    texu = uv.x;
    texv = uv.y;
    
    vec3 col = texture(texture_sampler,TEXUV(texu,texv)).xyz;

    fragColor = vec4(col*r*r*r,1.0);
//#

(mesh-main-fs texture-arrays? #f fog? wet?)

#/C/
}
//#))


;;;
;;;; Mesh Fly
;;;


;; Fly by iq (2009)

(definition public (build-mesh-fly-fs texture-arrays? fog? wet?)
  (string-append glsl-version
(texture-macros)

(mesh-header-fs #f fog? wet?)

#/C/
uniform float time;
uniform TEXSAMPLER texture_sampler;

float texx;
float texy;
float texu;
float texv;
//#

#/C/
void main()
{
    texx = final_texture_coord.x;
    texy = final_texture_coord.y;
    
    vec2 p = -1.0 + 2.0 * vec2(texx, texy);
    vec2 uv;

    float an = time*.25;

    float x = p.x*cos(an)-p.y*sin(an);
    float y = p.x*sin(an)+p.y*cos(an);
     
    uv.x = .25*x/abs(y);
    uv.y = .20*time + .25/abs(y);

    texu = uv.x;
    texv = uv.y;
    
    fragColor = vec4(texture(texture_sampler,TEXUV(texu,texv)).xyz * y*y, 1.0);
//#

(mesh-main-fs texture-arrays? #f fog? wet?)

#/C/
}
//#))


;;;
;;;; Mesh Pulse
;;;


;; Pulse by Danguafer/Silexars (2010)

(definition public (build-mesh-pulse-fs texture-arrays? fog? wet?)
  (string-append glsl-version
(texture-macros)

(mesh-header-fs #f fog? wet?)

#/C/
uniform float time;
uniform TEXSAMPLER texture_sampler;

float texx;
float texy;
float texu;
float texv;
//#

#/C/
void main()
{
    texx = final_texture_coord.x;
    texy = final_texture_coord.y;
    
    vec2 halfres = vec2(0.5, 0.5);
    vec2 cPos = vec2(texx, texy);

    cPos.x -= 0.5*halfres.x*sin(time/2.0)+0.3*halfres.x*cos(time)+halfres.x;
    cPos.y -= 0.4*halfres.y*sin(time/5.0)+0.3*halfres.y*cos(time)+halfres.y;
    float cLength = length(cPos);

    vec2 uv = vec2(texx, texy)+(cPos/cLength)*sin(cLength/30.0-time*10.0)/25.0;
    
    texu = uv.x;
    texv = uv.y;
    
    vec3 col = texture(texture_sampler,TEXUV(texu,texv)).xyz*50.0/cLength;

    fragColor = vec4(col,1.0);
//#

(mesh-main-fs texture-arrays? #f fog? wet?)

#/C/
}
//#))


;;;
;;;; Mesh Transformation Build
;;;


(definition public mesh-white-fs
  #f)

(definition public mesh-radial-blur-fs
  #f)

(definition public mesh-motion-blur-fs
  #f)

(definition public mesh-fire-fs
  #f)

(definition public mesh-water-fs
  #f)

(definition public mesh-julia-fs
  #f)

(definition public mesh-sierpinski-fs
  #f)

(definition public mesh-multitexture-fs
  #f)

(definition public mesh-kaleidoscope-fs
  #f)

(definition public mesh-tunnel-fs
  #f)

(definition public mesh-square-tunnel-fs
  #f)

(definition public mesh-fly-fs
  #f)

(definition public mesh-pulse-fs
  #f)


(definition public (build-transformation-shaders)
  (let ((wet? #f))
    (set! mesh-white-fs (build-mesh-white-fs texture-arrays? fog? wet?))
    (set! mesh-radial-blur-fs (build-mesh-radial-blur-fs texture-arrays? fog? wet?))
    (set! mesh-motion-blur-fs (build-mesh-motion-blur-fs texture-arrays? fog? wet?))
    (set! mesh-fire-fs (build-mesh-fire-fs texture-arrays? fog? wet?))
    (set! mesh-water-fs (build-mesh-water-fs texture-arrays? fog? wet?))
    (set! mesh-julia-fs (build-mesh-julia-fs texture-arrays? fog? wet?))
    (set! mesh-sierpinski-fs (build-mesh-sierpinski-fs texture-arrays? fog? wet?))
    (set! mesh-multitexture-fs (build-mesh-multitexture-fs texture-arrays? fog? wet?))
    (set! mesh-kaleidoscope-fs (build-mesh-kaleidoscope-fs texture-arrays? fog? wet?))
    (set! mesh-tunnel-fs (build-mesh-tunnel-fs texture-arrays? fog? wet?))
    (set! mesh-square-tunnel-fs (build-mesh-square-tunnel-fs texture-arrays? fog? wet?))
    (set! mesh-fly-fs (build-mesh-fly-fs texture-arrays? fog? wet?))
    (set! mesh-pulse-fs (build-mesh-pulse-fs texture-arrays? fog? wet?)))))
