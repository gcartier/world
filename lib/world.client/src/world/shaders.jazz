;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Shader
;;;

(module world.shaders jazz

(import (jazz.geometry)
        (jazz.graphic)
        (jazz.graphic.opengl.glew)
        (jazz.io)
        (jazz.library)
        (jazz.literals)
        (jazz.media)
        (jazz.network)
        (jazz.platform)
        (jazz.platform.cairo)
        (jazz.runtime)
        (jazz.system)
        (jazz.ui)
        (jazz.ui.dialog)
        (jazz.ui.window)
        (time))

;;;
;;;; Default shaders
;;;

(definition default-vs
  #<<SHADER
#version 150

in vec3 color;

out vec3 Color;

void main()
{
    Color = color;
    gl_Position = gl_ModelViewProjectionMatrix * gl_Vertex;
}
SHADER
)

(definition default-fs
  #<<SHADER
#version 150

in vec3 Color;
out vec4 outputF;
 
void main()
{
    outputF = vec4(Color,1.0);
}
SHADER
)

;;;
;;;; Shader
;;;

(class Shader extends Object
  
  (slot type       <int>    initialize #f    accessors generate)
  (slot code                initialize #f    accessors generate)
  (slot shaderid   <int>    initialize #f    accessors generate) 
  
  (method public (create-shader)
    (set! shaderid (glCreateShader type))
    (glShaderSource shaderid 1 code #f))
  
  (method public (compile-shader)
    (glCompileShader shaderid))  
  
  (method public (set-code c)
    (set! code c))
  )

;;;
;;;; Shader-Program
;;;

(class Shader-Program extends Object
  
  (slot vertex-shader   <object> initialize #f accessors generate)
  (slot fragment-shader <object> initialize #f accessors generate) 
  (slot program         <int>    initialize #f accessors generate)
  
  (method override (initialize)
    (nextmethod)
    (set! vertex-shader~self (new Shader))
    (set! fragment-shader~self (new Shader))
    (create-program))
  
  (method public (set-fs code)
    (set-code~ fragment-shader code))
  
  (method public (set-vs code)
    (set-code~ vertex-shader code))
  
  (method public (create-program)
    (set! program (glCreateProgram)))
  
  (method public (attach-shaders)
    (when (and (get~ vertex-shader shaderid)
               (get~ fragment-shader shaderid))
      (glAttachShader program (get~ vertex-shader shaderid))
      (glAttachShader program (get~ fragment-shader shaderid))
      (glLinkProgram program)))
  
  (method public (detach-shaders)
    (when (and (get~ vertex-shader shaderid)
               (get~ fragment-shader shaderid))
      (glDetachShader program (get~ vertex-shader shaderid))
      (glDetachShader program (get~ fragment-shader shaderid))))
  
  (method public (activate)
    (glUseProgram program))
  
  (method public (deactivate)
    (glUseProgram #f))  
  )
)
