;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Worker
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.worker jazz


(import (jazz.evaluate)
        (jazz.io))


(definition protected (process-work)
  (declare (proper-tail-calls))
  (let ((port (open-tcp-client (string->number (command-argument "port")))))
    (let iter ()
         (let ((form (read port)))
           (define (write-expand-unit unit-name)
             (write-result (expand-unit unit-name)))
           
           (define (write-expand-script path)
             (write-result (expand-script path)))
           
           (define (write-expand-evaluate syntax str container line col evaluation-mode)
             (write-result (evaluate-forms syntax str container line col evaluation-mode expand?: #t)))
           
           (define (write-expand-console unit-name expr)
             (let ((module-declaration (outline-unit unit-name)))
               (let ((form `(module ,unit-name ,(get-dialect-name~ module-declaration) ,expr)))
                 (load-unit 'dialect.development)
                 (write-result (expand-form form unit-name: unit-name walk-for: 'eval)))))
           
           (define (write-result result)
             (write-binary-content port (list 'result result #f) marshall))
           
           (define (with-walk-problems thunk)
             (with-exception-catcher
               (lambda (exc)
                 (write-binary-content port (list 'error (exception-reason exc) #f) marshall))
               (lambda ()
                 (catch (Walk-Problems exc
                          (write-binary-content port (list 'walk (exception-reason exc) (exception-detail exc)) marshall))
                   (thunk)))))
           
           (if (or (eof-object? form)
                   (null? form))
               (begin
                 (close-port port)
                 (exit))
             (let ((command (car form))
                   (arguments (cdr form)))
               (case command
                 ((expand-unit)
                  (with-walk-problems
                    (lambda ()
                      (apply write-expand-unit arguments))))
                 ((expand-script)
                  (with-walk-problems
                    (lambda ()
                      (apply write-expand-script arguments))))
                 ((expand-evaluate)
                  (with-walk-problems
                    (lambda ()
                      (apply write-expand-evaluate arguments))))
                 ((expand-console)
                  (with-walk-problems
                    (lambda ()
                      (apply write-expand-console arguments))))
                 (else
                  (error "Unknown worker command" command)))
               (iter))))))))
