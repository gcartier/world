;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Processor
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2016
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.processor jazz


(require (dialect.development))

(import (jazz.debuggee)
        (jazz.digest)
        (jazz.evaluate)
        (jazz.event)
        (jazz.io)
        (jazz.jrm)
        (jazz.network)
        (jazz.runtime)
        (jazz.settings)
        (jazz.snapshot)
        (jazz.time)
        (world)
        (world.autoload)
        (world.settings)
        (world.syntax (phase syntax))
        (world.tier)
        (world.work))


;;;
;;;; Tier
;;;


(class Processor-Tier extends Tier)


;;;
;;;; Processor
;;;


(class Processor extends Object
  
  
  (slot clients          initialize '() getter generate)
  (slot hits             initialize 0   getter generate)
  (slot remote-processor                getter generate)
  (slot remote-server    initialize #f  getter generate)
  
  
  (method override (initialize)
    (set! remote-processor (load-object~ (get-local-register) 'world.processor.remote 'world-remote-processor)))
  
  
  ;;;
  ;;;; Incoming
  ;;;
  
  
  (method (processor-setup server worker)
    (set! remote-server server)
    (connect-remote worker)
    (set-worker worker))
  
  
  (method (processor-quit)
    (quit))
  
  
  (method (client-join)
    )
  
  
  (method (client-leave)
    )
  
  
  (method (retrieve-region region-x region-z)
    (let ((zone (current-zone)))
      (debug-processor 'retrieve-region region-x region-z)
      (boolean (get-region~ zone region-x region-z))))
  
  
  (method (retrieve-chunk region-x region-z chunk-x chunk-z chunk-digest)
    (let ((zone (current-zone)))
      (let ((region (get-region~ zone region-x region-z)))
        (when region
          (let ((chunk (get-chunk~ region chunk-x chunk-z create?: #t)))
            (when chunk
              (unless (equal? (get-digest~ chunk) chunk-digest)
                (let ((chunk-raw (get-raw~ chunk)))
                  (debug-processor 'retrieve-chunk region-x region-z chunk-x chunk-z (u8vector-length chunk-raw))
                  chunk-raw))))))))
  
  
  (method (debug-processor . rest)
    (when (world-setting 'world.processor.debug? #f)
      (apply debug 'processor rest)))
  
  
  (method (find-client-state target)
    (find-if (lambda (client)
               (proxy=? (get-client~ client) target))
             clients))
  
  
  (method (find-client-state-by-name target)
    (find-if (lambda (client)
               (equal? (get-name~ client) target))
             clients)))


;;;
;;;; Ready
;;;


(definition protected (ready-processor)
  (start-remote-listener)
  (let ((processor (new Processor)))
    (set-current-processor processor)
    (let ((master (command-argument "master"))
          (cookie (integer-argument "master-cookie")))
      (receive (host port alternate-port) (parse-host/service master)
        (let ((remote-register (connect-remote-register host port #t)))
          (let ((master (load-object~ remote-register 'world.master 'world-remote-master))
                (processor (get-remote-processor~ processor)))
            (slave-ready~ master processor cookie))))))))
