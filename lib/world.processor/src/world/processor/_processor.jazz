;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Processor
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2016
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.processor jazz


(require (dialect.development))

(import (jazz.component)
        (jazz.debuggee)
        (jazz.digest)
        (jazz.evaluate)
        (jazz.event)
        (jazz.graphic)
        (jazz.io)
        (jazz.markup)
        (jazz.network)
        (jazz.remote)
        (jazz.remote.transmission)
        (jazz.runtime)
        (jazz.settings)
        (jazz.snapshot)
        (jazz.time)
        (world)
        (world.assets)
        (world.autoload)
        (world.change)
        (world.context)
        (world.history)
        (world.id)
        (world.network)
        (world.settings)
        (world.server.client)
        (world.server.serving)
        (world.support)
        (world.syntax (phase syntax))
        (world.tier)
        (world.work))


;;;
;;;; Tier
;;;


(class Processor-Tier extends Serving-Tier
  
  
  (slot processor getter generate)
  
  
  (method override (initialize self dir)
    (nextmethod self dir)
    (set! processor (current-processor))
    @should-processor-have-its-assets?
    (set! assets (make-assets self directory))
    ;; aec quicky
    (set-remote-problem-handler
      (lambda (process)
        (catch (connection-problem? obj
                 obj)
          (process))))
    (start-remote-listener)
    ;; kinda of a hack around not being able to call server
    ;; as it is in the middle of the client change-zone call
    (delay-event
      (lambda ()
        (let ((id (make-unique-id)))
          (set-client-id/no id (literal->id id self))))))
  
  
  ;;;
  ;;;; Register
  ;;;
  
  
  (method override (tier-literal->id self literal)
    (calling-server self
      (lambda ()
        (register-literal (get-remote-server processor) literal))))
  
  
  (method override (tier-id->literal self id)
    (calling-server self
      (lambda ()
        (registered-id (get-remote-server processor) id))))
  
  
  ;;;
  ;;;; Retrieve
  ;;;
  
  
  (method override (retrieve-entity self id)
    (find-entity id))
  
  
  ;;;
  ;;;; Outgoing
  ;;;
  
  
  (method (calling-server self thunk)
    ;; longer timeout while in development
    ;; as we might be running under a debugger
    (parameterize ((receive-timeout 60))
      (thunk))))


;;;
;;;; Processor
;;;


(class Processor extends Object
  
  
  (slot delegates        initialize '() getter generate)
  (slot hits             initialize 0   getter generate)
  (slot remote-processor                getter generate)
  (slot remote-master    initialize #f  getter generate)
  (slot remote-cookie    initialize #f  getter generate)
  (slot remote-server    initialize #f  getter generate)
  (slot server-name      initialize #f  getter generate)
  (slot zone             initialize #f  getter generate)
  
  
  (method override (initialize self)
    (set! remote-processor (load-object (get-local-register) 'world.processor.remote 'world-remote-processor)))
  
  
  ;;;
  ;;;; Outgoing
  ;;;
  
  
  (method package (broadcast-processor-update self changes)
    (let ((tier (current-tier)))
      (for-each (lambda (delegate)
                  (let ((client (get-client delegate)))
                    (calling-client tier delegate
                      (lambda ()
                        (processor-update client (current-seconds) changes)))))
                delegates)))
  
  
  (method (broadcast-processor-audio self origin-client buffer timestamp duration)
    (let ((tier (current-tier))
          (id (get-id (find-delegate self origin-client))))
      (for-each (lambda (delegate)
                  (let ((client (get-client delegate)))
                    (when (or (not (proxy=? client origin-client))
                              (world-setting 'world.audio-self? #f))
                      (calling-client tier delegate
                        (lambda ()
                          (processor-audio client id buffer timestamp duration))))))
                delegates)))
  
  
  (method (broadcast-processor-video self origin-client buffer timestamp duration)
    (let ((tier (current-tier))
          (id (get-id (find-delegate self origin-client))))
      (for-each (lambda (delegate)
                  (let ((client (get-client delegate)))
                    (when (or (not (proxy=? client origin-client))
                              (world-setting 'world.video-self? #f))
                      (calling-client tier delegate
                        (lambda ()
                          (processor-video client id buffer timestamp duration))))))
                delegates)))
  
  
  (method (broadcast-processor-draw self id color alpha timestamp duration slide?)
    (let ((tier (current-tier)))
      (for-each (lambda (delegate)
                  (let ((client (get-client delegate)))
                    (calling-client tier delegate
                      (lambda ()
                        (processor-draw client id color alpha timestamp duration slide?)))))
                delegates)))
  
  
  ;;;
  ;;;; Incoming
  ;;;
  
  
  (method package (processor-setup self master cookie server server-name zone worker)
    (set! remote-master master)
    (set! remote-cookie cookie)
    (set! remote-server server)
    (set! self.server-name server-name)
    (set! self.zone zone)
    (set-worker (and worker (connect-remote-proxy worker))))
  
  
  (method package (processor-quit self)
    (quit))
  
  
  (method package (client-enter self client client-id client-no character-name character-avatar character-script)
    (let ((tier (current-tier))
          (zone (current-zone))
          (me (current-me+)))
      (let ((reconnected-delegate (find-delegate-by-name self character-name))
            (existing-player (find-player zone character-name)))
        (let ((delegate (if (not reconnected-delegate)
                            (new Client-Delegate client client-id client-no character-name character-avatar character-script)
                          (set-client reconnected-delegate client)
                          (set-alive reconnected-delegate (current-seconds))
                          (set-exception reconnected-delegate #f)
                          (set-exception-time reconnected-delegate #f)
                          reconnected-delegate)))
          (unless reconnected-delegate
            (set! delegates (cons delegate delegates)))
          ;; retrieve player
          (let ((player (or existing-player (player-retrieve self client-id character-name character-avatar character-script)))
                (player-delegate delegate))
            ;; collect other players for client
            (define (collect-other-players)
              (define (player-info player delegate)
                (and @this-doesnt-work-as-is-as-the-alive-is-not-sent-to-processor
                     (or (still-alive? delegate)
                         (eq? delegate player-delegate))
                     (let ((name (get-name player))
                           (avatar (get-avatar player))
                           (id (get-id player))
                           (position (get-position player))
                           (lookat (get-lookat player))
                           (script (get-script delegate)))
                       (list name avatar id position lookat script))))
              
              (let ((players
                      (collect (lambda (delegate)
                                 (and (neq? delegate player-delegate)
                                      (let ((name (get-name delegate)))
                                        (let ((existing (find-player zone name)))
                                          (player-info existing delegate)))))
                               delegates)))
                (if (or (not me) (admin-me? me))
                    players
                  (cons (player-info me player-delegate) players))))
            
            (let ((player-id (get-id player))
                  (player-position (get-position player))
                  (player-lookat (get-lookat player))
                  (player-script (get-script player-delegate))
                  (other-players (collect-other-players)))
              ;; broadcast entering player to other players
              (for-each (lambda (delegate)
                          (unless (eq? delegate player-delegate)
                            (let ((client (get-client delegate)))
                              (calling-client tier delegate
                                (lambda ()
                                  (processor-entered client client-id client-no character-name character-avatar character-script player-id player-position player-lookat player-script))))))
                        delegates)
              (let (;; open test quicky to send form as a string
                    (form (call-with-input-file (path-settings (get-moniker zone)) read-content-string))
                    (spawnpoint (get-spawnpoint zone))
                    ;; todo
                    (player-spawnpoint (get-player-spawnpoint zone)))
                (list form spawnpoint (or player-spawnpoint spawnpoint) player-id player-position player-lookat other-players))))))))
  
  
  (method package (client-exit self client character-name)
    (let ((tier (current-tier))
          (zone (current-zone)))
      ;; aec robust
      (let ((player (find-player zone character-name)))
        (when player
          ;; store player
          (player-store self player)
          ;; find server client
          (let ((player-delegate (find-delegate self client)))
            ;; broadcast exiting player to other players
            (for-each (lambda (delegate)
                        (unless (eq? delegate player-delegate)
                          (let ((client (get-client delegate)))
                            (calling-client tier delegate
                              (lambda ()
                                (processor-exited client character-name))))))
                      delegates)
            ;; unregister client
            (set! delegates (remove! player-delegate delegates)))))))
  
  
  (method (player-retrieve self client-id character-name character-avatar character-script)
    (let ((zone (current-zone)))
      (let ((file (new-file (players-dir self) (format "{a}.player" character-name))))
        (let ((player
                (if (exists? file)
                    (let ((player (instantiate (read-form file))))
                      (register-id player client-id)
                      (set-me? player #f)
                      (set-name player character-name)
                      (set-avatar player character-avatar)
                      player)
                  (let ((units '(world.data)))
                    (let ((tag '(<Player> (<Camera>)))
                          (data (new Data zone-version 'jazz units #f)))
                      (let ((form (construct-form tag (imports-locator units) data)))
                        (set-origin form file)
                        (let ((player (instantiate form)))
                          (register-id player client-id)
                          (set-me? player #f)
                          (set-name player character-name)
                          (set-avatar player character-avatar)
                          (set-position player (find-spawnpoint zone))
                          (set-lookat player (find-spawnlookat zone))
                          player)))))))
          (set-name-pane player character-name color: (if character-script {Color World-Yellow} {Color World-Purple}))
          (add-element zone player)
          player))))
  
  
  (method (player-store self player)
    (let ((world (current-world))
          (zone (current-zone)))
      (let ((file (new-file (players-dir self) (format "{a}.player" (get-name player)))))
        (create-directories file)
        (let ((designer (new Former form: (get-form player) reference: player)))
          (define (save-camera)
            (let ((eye (get-eye world))
                  (camera (player-camera player)))
              ;; useless at the moment as server doesnt have camera info
              (set-property designer camera 'position (get-position eye))
              (set-property designer camera 'lookat (get-lookat eye))))
          
          (define (save-player)
            (set-property designer player 'position (get-position player))
            (set-property designer player 'lookat (get-lookat player)))
          
          (save-camera)
          (save-player)
          (save designer)))
      (remove-element zone player)))
  
  
  (method (players-dir self)
    (let ((tier (current-tier)))
      (new-directory (get-directory tier) "players")))
  
  
  (method package (client-update self client sent changes)
    (increase! hits)
    (when debug-sequence?
      ;; rebase sequence for tests
      (world.change:iterate-changes changes
        (lambda (change offset)
          (let ((sequence-no (world.history:next-sequence-no!)))
            (f64vector-set! changes (+ offset 5) (cast <fl> sequence-no))))))
    (forward-changes sent (current-seconds) changes)
    (with-outgoing-mutex
      (lambda ()
        (push-client-changes changes))))
  
  
  (method package (client-audio self client buffer timestamp duration)
    (broadcast-processor-audio self client buffer timestamp duration))
  
  
  (method package (client-video self client buffer timestamp duration)
    (broadcast-processor-video self client buffer timestamp duration))
  
  
  (method package (retrieve-region self region-index)
    (let ((zone (current-zone)))
      (boolean (load-region zone region-index))))
  
  
  (method package (retrieve-chunk self region-index chunk-index chunk-digest)
    (let ((zone (current-zone)))
      (let ((region (load-region zone region-index)))
        (let ((chunk (load-chunk region chunk-index)))
          (and @always-retrieve (not (equal? (get-digest chunk) chunk-digest))
               (let ((chunk-raw (get-raw chunk)))
                 chunk-raw))))))
  
  
  (method package (retrieve-entity self id)
    (let ((world (current-world)))
      (let ((entity (find-entity id)))
        ;; quick hack for test
        (when (not entity)
          (debug 'entity id 'not 'found)
          (set! entity (new Creature id: id name: 'NOT-FOUND model: 'Wolf)))
        ;; quick hack for players
        (when (is? entity Player)
          (debug 'player id 'retrieved)
          (set! entity (new Creature id: id name: 'PLAYER model: 'Wolf)))
        ;; quick first draft we should probably use jazz serialization
        (let ((class (class-of entity)))
          (cons (class->class-name world class) (package class entity))))))
  
  
  (method (find-delegate self target)
    (find-if (lambda (delegate)
               (proxy=? (get-client delegate) target))
             delegates))
  
  
  (method (find-delegate-by-name self target)
    (find-if (lambda (delegate)
               (equal? (get-name delegate) target))
             delegates)))


;;;
;;;; Ready
;;;


(definition protected (setup-processor)
  (let ((processor (new Processor)))
    (set-current-processor processor)
    (let ((master (command-argument "master"))
          (cookie (integer-argument "master-cookie"))
          (host (command-argument "host"))
          (service (integer-argument "service")))
      (assert (not (get-remote-listener))
        (start-remote-listener host: host service: service))
      (receive (host port alternate-port) (parse-host/service master)
        (let ((remote-register (connect-remote-register host port #t)))
          (let ((master (load-object remote-register 'world.master 'world-remote-master))
                (processor (get-remote-processor processor)))
            (slave-setup master processor cookie)))))))


(definition protected (ready-processor)
  (let ((processor (current-processor)))
    (let ((master (get-remote-master processor))
          (processor (get-remote-processor processor))
          (cookie (get-remote-cookie processor)))
      (slave-ready master processor cookie)))))
