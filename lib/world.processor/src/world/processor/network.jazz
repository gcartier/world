;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; Processor Networking
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.processor.network jazz


(import (jazz.geometry)
        (jazz.syntax (phase syntax))
        (world)
        (world.configure)
        (world.context)
        (world.network)
        (world.support)
        (world.task))


(proclaim (not check bounds)
          (warn optimizations))


;;;
;;;; Update
;;;


(definition public (run-processor-update task <Task>)
  (declare (proper-tail-calls))
  (with-task task
    (lambda (exit)
      (let (iter (previous (current-monotonic)))
        (let ((time (current-monotonic)))
          (let ((elapse (- time previous)))
            (unless (stopping? task)
              (site update
                (process-processor-update)))
            (let ((duration (- (current-monotonic) time)))
              (task-wait task processor-update-period duration exit))
            (iter time)))))))


(definition protected (process-processor-update)
  (with-outgoing-mutex
    (lambda ()
      (when (> outgoing-size 0)
        ;; quick first draft to optimize
        (let ((changes (make-f64vector outgoing-size)))
          (subf64vector-move! outgoing-changes 0 outgoing-size changes 0)
          (broadcast-update (current-tier) changes)
          (set-outgoing-size 0))))))


(definition protected (push-client-update changes <f64vector>)
  (let ((len (f64vector-length changes)))
    (let ((new-size (+ outgoing-size len)))
      (maybe-grow-outgoing new-size)
      (subf64vector-move! changes 0 len outgoing-changes outgoing-size)
      (set-outgoing-size new-size))))


;;;
;;;; Droppable
;;;


(definition public (run-processor-droppable task <Task>)
  (declare (proper-tail-calls))
  (with-task task
    (lambda (exit)
      (let (iter (previous (current-monotonic)))
        (let ((time (current-monotonic)))
          (let ((elapse (- time previous)))
            (unless (stopping? task)
              (site droppable
                (process-processor-droppable)))
            (let ((duration (- (current-monotonic) time)))
              (task-wait task processor-droppable-period duration exit))
            (iter time)))))))


(definition protected (process-processor-droppable)
  (with-droppable-mutex
    (lambda ()
      (when (> droppable-size 0)
        ;; quick first draft to optimize
        (let ((changes (make-f64vector droppable-size)))
          (subf64vector-move! droppable-changes 0 droppable-size changes 0)
          (broadcast-droppable (get-udp-processor (current-tier)) changes)
          (set-droppable-size 0))))))


(definition protected (push-client-droppable changes <f64vector>)
  (let ((len (f64vector-length changes)))
    (let ((new-size (+ droppable-size len)))
      (maybe-grow-droppable new-size)
      (subf64vector-move! changes 0 len droppable-changes droppable-size)
      (set-droppable-size new-size)))))
