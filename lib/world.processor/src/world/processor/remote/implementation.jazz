;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Remote Processor Implementation
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2016
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.processor.remote.implementation jazz


(import (jazz.jrm)
        (jazz.syntax (phase syntax))
        (world)
        (world.autoload)
        (world.processor)
        (world.support)
        (world.syntax (phase syntax))
        (world.task)
        (world.tier)
        (world.work))


(definition (with-processor proc)
  (with-task-mutex
    (lambda ()
      (let ((processor (current-processor+)))
        (if (and processor
                 (not shutdown?)
                 (not being-debugged?))
            (continuation-capture
              (lambda (exit)
                (parameterize ((current-exit exit))
                  (proc processor))))
          disconnect-marker)))))


(class World-Remote-Processor extends Object
  
  
  (method public (processor-setup self master cookie server server-name zone worker)
    (processor-setup (current-processor) master cookie server server-name zone worker))
  
  
  (method public (processor-quit self)
    (processor-quit (current-processor)))
  
  
  (method public (client-join self client client-id client-no character-name character-avatar character-script)
    (client-join (current-processor) client client-id client-no character-name character-avatar character-script))
  
  
  (method public (client-leave self client character-name)
    (client-leave (current-processor) client character-name))
  
  
  (method public (client-update self client sent changes)
    (with-processor
      (lambda (processor)
        (client-update processor client sent changes))))
  
  
  (method public (client-audio self client buffer timestamp duration)
    (with-processor
      (lambda (processor)
        (client-audio processor client buffer timestamp duration))))
  
  
  (method public (client-video self client buffer timestamp duration)
    (with-processor
      (lambda (processor)
        (client-video processor client buffer timestamp duration))))
  
  
  (method public (retrieve-region self region-index)
    (with-processor
      (lambda (processor)
        (retrieve-region processor region-index))))
  
  
  (method public (retrieve-chunk self region-index chunk-index chunk-digest)
    (with-processor
      (lambda (processor)
        (retrieve-chunk processor region-index chunk-index chunk-digest))))
  
  
  (method public (retrieve-entity self id)
    (with-processor
      (lambda (processor)
        (retrieve-entity processor id))))))
