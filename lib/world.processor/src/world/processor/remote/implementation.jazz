;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; World Remote Processor Implementation
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.processor.remote.implementation jazz


(import (world.autoload)
        (world.context)
        (world.processor.tier)
        (world.support)
        (world.task)
        (world.tier))


(definition (with-processor proc)
  (with-task-mutex
    (lambda ()
      (let ((tier (current-tier+)))
        (if (and tier
                 (is? tier Processor-Tier)
                 (not shutdown?)
                 (not being-debugged?))
            (continuation-capture
              (lambda (exit)
                (parameterize ((current-exit exit))
                  (proc tier))))
          disconnect-marker)))))


(class World-Remote-Processor extends Object
  
  
  (method public (processor-setup self server server-path processor-id processor-no world-asset-entries zone)
    (with-processor
      (lambda (tier)
        (processor-setup tier server server-path processor-id processor-no world-asset-entries zone))))
  
  
  (method public (processor-quit self)
    (with-processor
      (lambda (tier)
        (processor-quit tier))))
  
  
  (method public (client-enter self client client-uuid client-id client-no character-name character-avatar character-dye character-script character-role character-admin?)
    (with-processor
      (lambda (tier)
        (client-enter tier client client-uuid client-id client-no character-name character-avatar character-dye character-script character-role character-admin?))))
  
  
  (method public (client-ready self client)
    (with-processor
      (lambda (tier)
        (client-ready tier client))))
  
  
  (method public (client-retrieve self client character-name)
    (with-processor
      (lambda (tier)
        (client-retrieve tier client character-name))))
    
  
  (method public (client-save self client character-name camera-position camera-lookat)
    (with-processor
      (lambda (tier)
        (client-save tier client character-name camera-position camera-lookat))))
  
  
  @reconnection-too-fragile
  (method public (client-disconnect self client)
    (with-processor
      (lambda (tier)
        (client-disconnect tier client))))
  
  
  (method public (client-reconnect self client)
    (with-processor
      (lambda (tier)
        (client-reconnect tier client))))
  
  
  (method public (client-kick self client)
    (with-processor
      (lambda (tier)
        (client-kick tier client))))

  
  (method public (client-exit self client character-name)
    (with-processor
      (lambda (tier)
        (client-exit tier client character-name))))
  
  
  (method public (client-role self client role)
    (with-processor
      (lambda (tier)
        (client-role tier client role))))

  
  (method public (client-mode self client mode)
    (with-processor
      (lambda (tier)
        (client-mode tier client mode))))
  
  
  (method public (client-update self client sent changes)
    (with-processor
      (lambda (tier)
        (client-update tier client sent changes))))
  
  
  (method public (delete-circle-stone self stone)
    (with-processor
      (lambda (tier)
        (delete-circle-stone tier stone))))
  
  
  (method public (world-assets-update self changes)
    (with-processor
      (lambda (tier)
        (world-assets-update tier changes))))
  
  
  (method public (request-chunk self client chunk-locator)
    (let ((tier (current-tier)))
      (request-chunk tier client chunk-locator)))
  
  
  (method public (request-zone-asset self client path)
    (with-processor
      (lambda (tier)
        (request-zone-asset tier client path))))
  
  
  (method public (upload-zone-asset self content digest)
    (with-processor
      (lambda (tier)
        (upload-zone-asset tier content digest))))
  
  
  (method public (update-zone-assets self client changes)
    (with-processor
      (lambda (tier)
        (update-zone-assets tier client changes))))
  
  
  (method public (pause self)
    (with-processor
      (lambda (tier)
        (pause tier))))
  
  
  (method public (unpause self)
    (with-processor
      (lambda (tier)
        (unpause tier))))
  
  
  (method public (attach self debugger)
    (with-processor
      (lambda (tier)
        (attach tier debugger))))
  
  
  (method public (detach self)
    (with-processor
      (lambda (tier)
        (detach tier))))
  
  
  (method public (admin-command self client command arguments)
    (with-processor
      (lambda (tier)
        (admin-command tier client command arguments))))
  
  
  (method public (admin-request-info self)
    (with-processor
      (lambda (tier)
        (admin-request-info tier))))))
