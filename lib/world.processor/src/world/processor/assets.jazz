;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; Processor Assets
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module world.processor.assets jazz


(import (jazz.associative)
        (jazz.io)
        (world)
        (world.assets)
        (world.context))


(class Processor-Assets extends Assets
  
  
  (slot repository   getter generate)
  (slot remote-index getter generate)
  
  
  (method override (initialize self where directory)
    (nextmethod self where)
    (set! self.repository (new Associative-Repository directory init?: #t))
    (set! self.remote-index (new Associative-Index #f #f)))
  
  
  (method override (cache-index self)
    (get-index repository))
  
  
  ;; removed special handling to ensure consistency
  ;; of local assets being a subset of remote assets
  (method package (update-removed self changes)
    (let ((removed (collect-if (lambda (change)
                                 (eq? (car change) 'removed))
                               changes)))
      (when (not-null? removed)
        (let ((index (cache-index self)))
          (apply-changes index removed)
          (discarding-directories repository
            (lambda (discard-directory)
              (for-each (lambda (change)
                          (let ((path (cadr change)))
                            (let ((file (new-file (get-working repository) (tokenise-filename path))))
                              (when (exists? file)
                                (delete file)
                                (discard-directory (get-parent file))))))
                        removed)))))))
  
  
  (method override (retrieve-directory self dirpath)
    (iterate-entries self
      (lambda (path)
        (when (starts-with? path dirpath)
          (retrieve-file self path))))
    (new-directory (get-working repository) (tokenise-filename dirpath)))
  
  
  (method override (retrieve-file self path)
    (let ((entry (find-entry (cache-index self) path))
          (remote-entry (find-entry remote-index path))
          (file (new-file (get-working repository) (tokenise-filename path))))
      (assert remote-entry
        (if (and entry (equal? (second entry) (second remote-entry)))
            file
          (bind (content digest) (retrieve-asset (current-processor) path)
            (store-object repository content digest)
            (retrieve-file repository digest file)
            file)))))
  
  
  (method override (iterate-entries self proc)
    (for-each (lambda (entry)
                (let ((path (car entry)))
                  (proc path)))
              (get-entries remote-index)))
  
  
  (method override (contains-file? self filename)
    (find-entry remote-index filename))))
