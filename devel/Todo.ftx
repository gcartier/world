{Formatted-Text
 formats:
 ({Format Base}
  {Format Heading1}
  {Format Base left-margin: 16 bulleted?: #t}
  {Format Base left-margin: 48 bulleted?: #t}
  {Format Heading2}
  {Format Base left-margin: 0 bulleted?: #f}
  {Format Heading2 left-margin: 16 bulleted?: #t}
  {Format Heading2 left-margin: 48 bulleted?: #t}
  {Format Heading2 left-margin: 80 bulleted?: #t}
  {Format Heading2 left-margin: 112 bulleted?: #t}
  {Format Heading2 left-margin: 0 bulleted?: #f}
  {Format Heading1 left-margin: 16 bulleted?: #t}
  {Format Heading1 left-margin: 48 bulleted?: #t}
  {Format Heading3})

 styles:
 ({Text-Style Base}
  {Text-Style Heading1}
  {Text-Style Heading2}
  {Text-Style Heading3})

 paragraphs:
 ((1 ("TODO" 1))
  (1)
  (1)
  (2 ("Improve lighting" 0))
  (2 ("Fix hit test problems" 0))
  (6 ("Think about object composition" 0))
  (11 ("It is urgent to start using vertex buffer objects (VBOs), vertex array objects (VAOs) and shaders as it will change everything" 0))
  (11 ("Optimize memory usage" 0))
  (11 ("Understand why we still need to have the glut dll" 0))
  (11 ("We are redoing all the camera stuff all the time in draw-world" 0))
  (11 ("Understand why we had to do (glCullFace GL_FRONT) in Actor instead of a global GL_BACK" 0))
  (12 ("Sprites render correctly with GL_BACK and using the same code!" 0))
  (11 ("Understand why activating (glEnable GL_CULL_FACE) globally reduces frame rate" 0))
  (11 ("Add to the walker the ability to define type aliases so I can do <vertex> equivalent to <f32vector>" 0))
  (1)
  (1)
  (4 ("Marc" 2))
  (6 ("Look at generated C code" 0))
  (6 ("Optimize code" 0))
  (6 ("Optimize memory" 0))
  (7 ("Constant data" 0))
  (11 ("Can a f32vector be passed directly to a FFI?" 0))
  (6 ("Show Marc the almost never ending augmentation of the memory in applications" 0))
  (6 ("Could floats and/or doubles be made to be Gambit immediate types" 0))
  (7 ("At least on 64 bit architectures" 0))
  (6 ("What can be done vs the huge advantage that C has of being able to stack allocate a vertex for example that it can then pass to a function that will put its result in it" 0))
  (7 ("C++ even enables this implicitly when passing parameters around so that you get the expressiveness of functional calls with no memory allocation" 0))
  (7 ("Can we extend the basic block float optimization for vertices" 0))
  (6 ("Do I understand correctly that anything <fl> is a double (F64)" 0))
  (7 ("If so is there any way to use floats (F32)" 0))
  (6 ("Is there any difference between" 0))
  (7 ("C code that defines foo + c-external to it and" 0))
  (7 ("Define foo c-lambda inlining the code" 0))
  (7 ("Because an advantage of the first approach is that you can name the parameters" 0))
  (8 ("Could the FFI be extended to allow naming parameters" 0))
  (1)
  (1)
  (4 ("Window" 2))
  (2 ("Window resize" 0))
  (3 ("For now we only update the current world when resizing" 0))
  (2 ("Fullscreen" 0))
  (2 ("Fullscreen windowed mode" 0))
  (2 ("Not play keyboard events when application is inactive" 0))
  (5)
  (5)
  (4 ("Windows" 2))
  (6 ("Remove the opengl-fullscreen? hack" 0))
  (6 ("Should we use AdjustWindowRectEx when creating window handle" 0))
  (0)
  (0)
  (4 ("Projection" 2))
  (2 ("Relate orthographic and perspective zooming (AM)" 0))
  (0)
  (5)
  (4 ("Camera" 2))
  (2 ("Limit strafing to game boundaries (AM)" 0))
  (3 ("Vertical boundary will solve block starting at exactly floor level" 0))
  (2 ("Need to ensure that there is no object between the camera and the player" 0))
  (2 ("Smooth camera movements by making it progressive" 0))
  (2 ("Fix pitch for flight mode (AM)" 0))
  (2 ("For eye occlusion removal to be intuitive, it is key that player target is always inside the player" 0))
  (0)
  (0)
  (4 ("Lighting" 2))
  (2 ("Improve lighting" 0))
  (0)
  (0)
  (4 ("Keyboard" 2))
  (0)
  (0)
  (4 ("Editor" 2))
  (6 ("Should we highlight the plane intersection square when moving the mouse?" 0))
  (5)
  (0)
  (4 ("History" 2))
  (2 ("Integrate non-actor state like:" 0))
  (3 ("World win/lose state" 0))
  (3 ("Color of win block" 0))
  (2 ("Try rendering non-now as a dimmed version" 0))
  (2 ("Save history to file (save in snapshot!?)" 0))
  (2 ("Add some (optional!?) history max" 0))
  (0)
  (0)
  (4 ("Live" 2))
  (6 ("Integrate to Jedi" 0))
  (5)
  (5)
  (4 ("Evaluate" 2))
  (2 ("Add / remove / modify slots" 0))
  (2 ("Support for top-down code that calls a not yet defined method" 0))
  (3 ("Complete work on delayed evaluation" 0))
  (2 ("Add info to evaluate-hook so it can recompile a shader" 0))
  (0)
  (0)
  (4 ("Areas" 2))
  (0)
  (0)
  (4 ("Hit Test" 2))
  (2 ("Do I do the trivial test of not calling hit testing when there is no movement?" 0))
  (2 ("For a very large game, I suppose the engine won't be moving unimportant mobs like wolves if there is no player near!?" 0))
  (2 ("Need to return the minimum value, e.g. continue iterating in case another objects is even closer" 0))
  (3 ("Return all objects hit that are at the minimal value" 0))
  (2 ("Maybe my heuristic approach should be based on the vector of the movement!?" 0))
  (3 ("For example, if we move .5 in x and .2 in y, then favor the x when there is conflicting solutions!?" 0))
  (2 ("Maze Joel has other cases where player gets stuck" 0))
  (3 ("It probably proves that we have to try the 6 possibilities!?" 0))
  (0)
  (0)
  (4 ("World" 2))
  (6 ("Use components to save / load the world!?" 0))
  (7 ("I think the best approach is to still use the Jazz module system" 0))
  (8 ("Gives us identification of classes and forms" 0))
  (8 ("Enables everything to be compiled or interpreted" 0))
  (7 ("Add a define-form!?" 0))
  (8 ("Could be referenced from a form (<f>) " 0))
  (8 ("Represents the structure but without the inheritence or behavior changes" 0))
  (6 ("Think about object composition" 0))
  (7 ("How can we make the player a sphere, composed from other objects, ..." 0))
  (0)
  (0)
  (4 ("Engine" 2))
  (6 ("To implement that the floor is always at the bottom of the screen in orthogonal projection for 2d games we need to do more that doing nothing as we currently do, as a resize that is not proportional will create problems" 0))
  (6 ("It pretty boils down to interpolation vs simulation" 0))
  (7 ("A good example that doesn't work well with interpolation is gravity" 0))
  (8 ("A jump that lags and is interpolated can make us miss the intended platform" 0))
  (7 ("A simulation approach where we redo the small ticks we missed solves the previous problem" 0))
  (8 ("But will not work if we are really getting behind in TPS" 0))
  (7 ("Maybe choose approach based on TPS!?" 0))
  (7 ("Is this interpolation vs simulation logic extensible to the problem of managing lag in a network game?" 0))
  (10)
  (10)
  (4 ("OpenGL" 2))
  (6 ("Activate antialiasing" 0))
  (7 ("Modern approach is fullscreen antialiasing also calling multisampling" 0))
  (6 ("Look into using VBO and VAO" 0))
  (6 ("Verify if when doing projMatrix * viewMatrix * position in the vertex shader, the shader compilator will make it so projMatrix * viewMatrix is done only once" 0))
  (6 ("Use a program = load-shaders(a, b, c) approach!?" 0))
  (2 ("Can VBO creation be done outside of program (when switching between fullscreen and windowed mode)" 0))
  (10)
  (10)
  (4 ("Shaders" 2))
  (6 ("Use glGetShaderInfoLog to display better info when a shader doesn't compile" 0))
  (10)
  (10)
  (4 ("Gaia" 2))
  (6 ("Jedi binaries" 0))
  (6 ("World binaries" 0))
  (7 ("Include Jazz binaries!?" 0))
  (6 ("Focus on interpreted development" 0))
  (7 ("Make sure it can be compiled if the build environment is available" 0))
  (10)
  (10)
  (4 ("Game" 2))
  (6 ("Add boost pills on the floor that can be used to go faster, jump higher, ..." 0))
  (0)
  (0)
  (4 ("Look" 2))
  (2 ("Character as a sphere!?" 0))
  (3 ("Add blinking eyes showing the direction!?" 0))
  (2 ("Add anti-aliasing to line in 3d!?" 0))
  (5)
  (5)
  (4 ("Foreing" 2))
  (6 ("OpenGL has functions that take a vector as parameter like glVertex3fv. Maybe this could be done by using homogenous vectors of floats!?" 0))
  (7 ("In Gambit FFI converter macro" 0))
  (8 ("begin part does the convertion" 0))
  (8 ("end part does the cleanup if needed" 0))
  (8 ("note that it receives the i index so it could use C's concatenation operation to access an offset in the previous argument!?" 0))
  (0)
  (0)
  (4 ("Performance" 2))
  (6 ("FFI overhead" 0))
  (7 ("Pure FFI calls render of metropolis: 35/s" 0))
  (7 ("All done in C: 70/s" 0))
  (7 ("Marc suggested try using ##code to see if it is the argument conversion part of the FFI call that is costly (done by a function call)" 0))
  (0)
  (0)
  (4 ("Memory" 2))
  (6 ("Add a flag to report gc occurences" 0))
  (6 ("Use Gambit's ##add-gc-interrupt-job and ##process-statistics (field 14) to add a GC counter!" 0))
  (6 ("With this counter, optimize memory usage" 0))
  (10)
  (10 ("10/06/01 metropolis moving around" 0))
  (6 ("GC: 1.0s 2%" 0))
  (6 ("Tick: 21/s 0%" 0))
  (6 ("Render: 21/s 82%" 0))
  (10 ("10/06/01 after removing gl- calls" 0))
  (6 ("GC: 1.0s 2%" 0))
  (6 ("Tick: 26/s 0%" 0))
  (6 ("Render: 26/s 88%" 0))
  (10)
  (10 ("12/06/06 metropolis determine-eye-occlusion test" 0))
  (6 ("11 real" 0))
  (6 ("16 cpu" 0))
  (6 ("23 megs" 0))
  (10 ("12/06/08 after floating point optimizations" 0))
  (6 ("4 real" 0))
  (6 ("0 cpu" 0))
  (6 ("1 meg" 0))
  (10)
  (6 ("Difficult to optimize memory and gcs while draw-info and draw-counters generate tons of memory themselves" 0))
  (10)
  (0)
  (4 ("Network" 2))
  (6 ("Multi-player over network" 0))
  (10)
  (10)
  (4 ("Deployment" 2))
  (6 ("Fix locating of the resources directory in devel and in deployment" 0))
  (6 ("Try reducing size of zipped application" 0))
  (7 ("Remove packages like jazz.ui by moving pure window stuff into a separate package" 0))
  (7 ("Add a means to not register exported symbols at runtime" 0))
  (0)
  (0)
  (4 ("Release" 2))
  (6 ("Needed for a release" 0))
  (7 ("Generational GC" 0))
  (0)
  (0)
  (4 ("Platforms" 2))
  (2 ("Port to other platforms" 0))
  (3 ("Can glut be used without any sacrifice?" 0))
  (2 ("Port to mobiles" 0))
  (3 ("Be wary of Cairo uses" 0))
  (3 ("Be extra wary of Jazz UI uses" 0))
  (0)
  (0)
  (4 ("Notes" 2))
  (6 ("In first person mode, with the camera far away and perpendicular to a flat level" 0))
  (7 ("When we then move in the level, the camera automatically follows exactly like in orthographic projection!" 0))
  (6 ("In first person" 0))
  (7 ("Camera rotates around the player" 0))
  (6 ("Else" 0))
  (7 ("Camera rotates around the eye" 0))
  (0))}
